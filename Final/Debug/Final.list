
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08009280  08009280  0000a280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096e0  080096e0  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080096e0  080096e0  0000a6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096e8  080096e8  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096e8  080096e8  0000a6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096ec  080096ec  0000a6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080096f0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  200001d4  080098c4  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  080098c4  0000b494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001023e  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002217  00000000  00000000  0001b442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0001d660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb2  00000000  00000000  0001e668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a46  00000000  00000000  0001f31a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c73  00000000  00000000  00036d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000931b6  00000000  00000000  000499d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dcb89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005720  00000000  00000000  000dcbcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e22ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009268 	.word	0x08009268

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08009268 	.word	0x08009268

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <QMC5883L_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void QMC5883L_Init() {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af02      	add	r7, sp, #8
    uint8_t data[2];
    data[0] = 0x0B; // Registro de configuración 2
 8000f4e:	230b      	movs	r3, #11
 8000f50:	713b      	strb	r3, [r7, #4]
    data[1] = 0x01; // Reinicio de software
 8000f52:	2301      	movs	r3, #1
 8000f54:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c2, QMC5883L_ADDR, data, 2, HAL_MAX_DELAY);
 8000f56:	1d3a      	adds	r2, r7, #4
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2302      	movs	r3, #2
 8000f60:	211a      	movs	r1, #26
 8000f62:	480a      	ldr	r0, [pc, #40]	@ (8000f8c <QMC5883L_Init+0x44>)
 8000f64:	f001 fdde 	bl	8002b24 <HAL_I2C_Master_Transmit>

    data[0] = 0x09; // Registro de control
 8000f68:	2309      	movs	r3, #9
 8000f6a:	713b      	strb	r3, [r7, #4]
    data[1] = 0x1D; // Configuración (ODR = 50Hz, RNG = 2G, OSR = 512)
 8000f6c:	231d      	movs	r3, #29
 8000f6e:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c2, QMC5883L_ADDR, data, 2, HAL_MAX_DELAY);
 8000f70:	1d3a      	adds	r2, r7, #4
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2302      	movs	r3, #2
 8000f7a:	211a      	movs	r1, #26
 8000f7c:	4803      	ldr	r0, [pc, #12]	@ (8000f8c <QMC5883L_Init+0x44>)
 8000f7e:	f001 fdd1 	bl	8002b24 <HAL_I2C_Master_Transmit>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000210 	.word	0x20000210

08000f90 <QMC5883L_Read>:
// Función para leer los datos de los ejes X, Y, Z
void QMC5883L_Read(int16_t *x, int16_t *y, int16_t *z, float *angulo) {
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b08a      	sub	sp, #40	@ 0x28
 8000f94:	af04      	add	r7, sp, #16
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	603b      	str	r3, [r7, #0]
    uint8_t data[6];
    HAL_I2C_Mem_Read(&hi2c2, QMC5883L_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, data, 6, HAL_MAX_DELAY);
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	2306      	movs	r3, #6
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	211a      	movs	r1, #26
 8000fb4:	483c      	ldr	r0, [pc, #240]	@ (80010a8 <QMC5883L_Read+0x118>)
 8000fb6:	f001 feb3 	bl	8002d20 <HAL_I2C_Mem_Read>

    *x = (int16_t)((data[1] << 8) | data[0]) - x_offset;
 8000fba:	7c7b      	ldrb	r3, [r7, #17]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	7c3b      	ldrb	r3, [r7, #16]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	4b38      	ldr	r3, [pc, #224]	@ (80010ac <QMC5883L_Read+0x11c>)
 8000fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((data[3] << 8) | data[2]) - y_offset;
 8000fdc:	7cfb      	ldrb	r3, [r7, #19]
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	7cbb      	ldrb	r3, [r7, #18]
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	4b30      	ldr	r3, [pc, #192]	@ (80010b0 <QMC5883L_Read+0x120>)
 8000fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((data[5] << 8) | data[4]);
 8000ffe:	7d7b      	ldrb	r3, [r7, #21]
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	b21a      	sxth	r2, r3
 8001004:	7d3b      	ldrb	r3, [r7, #20]
 8001006:	b21b      	sxth	r3, r3
 8001008:	4313      	orrs	r3, r2
 800100a:	b21a      	sxth	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	801a      	strh	r2, [r3, #0]

    // Calcular el ángulo en grados
    *angulo = atan2((float)*y, (float)*x) * (180.0 / M_PI);
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101e:	ee17 0a90 	vmov	r0, s15
 8001022:	f7ff fa99 	bl	8000558 <__aeabi_f2d>
 8001026:	4604      	mov	r4, r0
 8001028:	460d      	mov	r5, r1
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001038:	ee17 0a90 	vmov	r0, s15
 800103c:	f7ff fa8c 	bl	8000558 <__aeabi_f2d>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	ec43 2b11 	vmov	d1, r2, r3
 8001048:	ec45 4b10 	vmov	d0, r4, r5
 800104c:	f007 fea0 	bl	8008d90 <atan2>
 8001050:	ec51 0b10 	vmov	r0, r1, d0
 8001054:	a312      	add	r3, pc, #72	@ (adr r3, 80010a0 <QMC5883L_Read+0x110>)
 8001056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105a:	f7ff fad5 	bl	8000608 <__aeabi_dmul>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4610      	mov	r0, r2
 8001064:	4619      	mov	r1, r3
 8001066:	f7ff fda7 	bl	8000bb8 <__aeabi_d2f>
 800106a:	4602      	mov	r2, r0
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	601a      	str	r2, [r3, #0]
    if (*angulo < 0) {
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	edd3 7a00 	vldr	s15, [r3]
 8001076:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800107a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107e:	d400      	bmi.n	8001082 <QMC5883L_Read+0xf2>
        *angulo += 360.0;  // Ajuste para obtener el ángulo en [0, 360] grados
    }
}
 8001080:	e009      	b.n	8001096 <QMC5883L_Read+0x106>
        *angulo += 360.0;  // Ajuste para obtener el ángulo en [0, 360] grados
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	edd3 7a00 	vldr	s15, [r3]
 8001088:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80010b4 <QMC5883L_Read+0x124>
 800108c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	edc3 7a00 	vstr	s15, [r3]
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	1a63c1f8 	.word	0x1a63c1f8
 80010a4:	404ca5dc 	.word	0x404ca5dc
 80010a8:	20000210 	.word	0x20000210
 80010ac:	200001f0 	.word	0x200001f0
 80010b0:	200001f2 	.word	0x200001f2
 80010b4:	43b40000 	.word	0x43b40000

080010b8 <Calibrate_Sensor>:
void Calibrate_Sensor() {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b094      	sub	sp, #80	@ 0x50
 80010bc:	af00      	add	r7, sp, #0
    int16_t x_min = 32767, x_max = -32768;
 80010be:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80010c2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80010c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010ca:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    int16_t y_min = 32767, y_max = -32768;
 80010ce:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80010d2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80010d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010da:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    uint32_t calibration_duration = HAL_GetTick() + 10000; // 10 segundos de calibración
 80010de:	f001 f86b 	bl	80021b8 <HAL_GetTick>
 80010e2:	4603      	mov	r3, r0
 80010e4:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80010e8:	3310      	adds	r3, #16
 80010ea:	647b      	str	r3, [r7, #68]	@ 0x44
    char buffer[64];

    snprintf(buffer, sizeof(buffer), "Calibrando... Gire el sensor 360 grados\r\n");
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4a3c      	ldr	r2, [pc, #240]	@ (80011e0 <Calibrate_Sensor+0x128>)
 80010f0:	2140      	movs	r1, #64	@ 0x40
 80010f2:	4618      	mov	r0, r3
 80010f4:	f005 fd0a 	bl	8006b0c <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f8c0 	bl	8000280 <strlen>
 8001100:	4603      	mov	r3, r0
 8001102:	b29a      	uxth	r2, r3
 8001104:	1d39      	adds	r1, r7, #4
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	4836      	ldr	r0, [pc, #216]	@ (80011e4 <Calibrate_Sensor+0x12c>)
 800110c:	f003 ffde 	bl	80050cc <HAL_UART_Transmit>

    while (HAL_GetTick() < calibration_duration) {
 8001110:	e034      	b.n	800117c <Calibrate_Sensor+0xc4>
        QMC5883L_Read(&x, &y, &z, NULL);
 8001112:	2300      	movs	r3, #0
 8001114:	4a34      	ldr	r2, [pc, #208]	@ (80011e8 <Calibrate_Sensor+0x130>)
 8001116:	4935      	ldr	r1, [pc, #212]	@ (80011ec <Calibrate_Sensor+0x134>)
 8001118:	4835      	ldr	r0, [pc, #212]	@ (80011f0 <Calibrate_Sensor+0x138>)
 800111a:	f7ff ff39 	bl	8000f90 <QMC5883L_Read>

        if (x < x_min) x_min = x;
 800111e:	4b34      	ldr	r3, [pc, #208]	@ (80011f0 <Calibrate_Sensor+0x138>)
 8001120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001124:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 8001128:	429a      	cmp	r2, r3
 800112a:	dd03      	ble.n	8001134 <Calibrate_Sensor+0x7c>
 800112c:	4b30      	ldr	r3, [pc, #192]	@ (80011f0 <Calibrate_Sensor+0x138>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
        if (x > x_max) x_max = x;
 8001134:	4b2e      	ldr	r3, [pc, #184]	@ (80011f0 <Calibrate_Sensor+0x138>)
 8001136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113a:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 800113e:	429a      	cmp	r2, r3
 8001140:	da03      	bge.n	800114a <Calibrate_Sensor+0x92>
 8001142:	4b2b      	ldr	r3, [pc, #172]	@ (80011f0 <Calibrate_Sensor+0x138>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
        if (y < y_min) y_min = y;
 800114a:	4b28      	ldr	r3, [pc, #160]	@ (80011ec <Calibrate_Sensor+0x134>)
 800114c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001150:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 8001154:	429a      	cmp	r2, r3
 8001156:	dd03      	ble.n	8001160 <Calibrate_Sensor+0xa8>
 8001158:	4b24      	ldr	r3, [pc, #144]	@ (80011ec <Calibrate_Sensor+0x134>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        if (y > y_max) y_max = y;
 8001160:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <Calibrate_Sensor+0x134>)
 8001162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001166:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 800116a:	429a      	cmp	r2, r3
 800116c:	da03      	bge.n	8001176 <Calibrate_Sensor+0xbe>
 800116e:	4b1f      	ldr	r3, [pc, #124]	@ (80011ec <Calibrate_Sensor+0x134>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

        HAL_Delay(100); // Esperar antes de la siguiente lectura
 8001176:	2064      	movs	r0, #100	@ 0x64
 8001178:	f001 f82a 	bl	80021d0 <HAL_Delay>
    while (HAL_GetTick() < calibration_duration) {
 800117c:	f001 f81c 	bl	80021b8 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001184:	4293      	cmp	r3, r2
 8001186:	d8c4      	bhi.n	8001112 <Calibrate_Sensor+0x5a>
    }

    // Calcular los offsets para centrar en cero
    x_offset = (x_max + x_min) / 2;
 8001188:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 800118c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8001190:	4413      	add	r3, r2
 8001192:	0fda      	lsrs	r2, r3, #31
 8001194:	4413      	add	r3, r2
 8001196:	105b      	asrs	r3, r3, #1
 8001198:	b21a      	sxth	r2, r3
 800119a:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <Calibrate_Sensor+0x13c>)
 800119c:	801a      	strh	r2, [r3, #0]
    y_offset = (y_max + y_min) / 2;
 800119e:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 80011a2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80011a6:	4413      	add	r3, r2
 80011a8:	0fda      	lsrs	r2, r3, #31
 80011aa:	4413      	add	r3, r2
 80011ac:	105b      	asrs	r3, r3, #1
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <Calibrate_Sensor+0x140>)
 80011b2:	801a      	strh	r2, [r3, #0]

    snprintf(buffer, sizeof(buffer), "Calibracion completa.\r\n");
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	4a11      	ldr	r2, [pc, #68]	@ (80011fc <Calibrate_Sensor+0x144>)
 80011b8:	2140      	movs	r1, #64	@ 0x40
 80011ba:	4618      	mov	r0, r3
 80011bc:	f005 fca6 	bl	8006b0c <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f85c 	bl	8000280 <strlen>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	1d39      	adds	r1, r7, #4
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	4804      	ldr	r0, [pc, #16]	@ (80011e4 <Calibrate_Sensor+0x12c>)
 80011d4:	f003 ff7a 	bl	80050cc <HAL_UART_Transmit>
}
 80011d8:	bf00      	nop
 80011da:	3750      	adds	r7, #80	@ 0x50
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	08009280 	.word	0x08009280
 80011e4:	200002f4 	.word	0x200002f4
 80011e8:	200001f8 	.word	0x200001f8
 80011ec:	200001f6 	.word	0x200001f6
 80011f0:	200001f4 	.word	0x200001f4
 80011f4:	200001f0 	.word	0x200001f0
 80011f8:	200001f2 	.word	0x200001f2
 80011fc:	080092ac 	.word	0x080092ac

08001200 <Motor_forward>:
void Motor_forward() {
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2120      	movs	r1, #32
 8001208:	4804      	ldr	r0, [pc, #16]	@ (800121c <Motor_forward+0x1c>)
 800120a:	f001 fb2d 	bl	8002868 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800120e:	2201      	movs	r2, #1
 8001210:	2110      	movs	r1, #16
 8001212:	4802      	ldr	r0, [pc, #8]	@ (800121c <Motor_forward+0x1c>)
 8001214:	f001 fb28 	bl	8002868 <HAL_GPIO_WritePin>
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40020400 	.word	0x40020400

08001220 <stop>:
void Motor_backward() {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
}
void stop(){
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
    // Dirección hacia adelante
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2120      	movs	r1, #32
 8001228:	4804      	ldr	r0, [pc, #16]	@ (800123c <stop+0x1c>)
 800122a:	f001 fb1d 	bl	8002868 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2110      	movs	r1, #16
 8001232:	4802      	ldr	r0, [pc, #8]	@ (800123c <stop+0x1c>)
 8001234:	f001 fb18 	bl	8002868 <HAL_GPIO_WritePin>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40020400 	.word	0x40020400

08001240 <Motor_SetSpeed>:
// Función para configurar la velocidad del motor (PWM)
void Motor_SetSpeed(uint8_t speed) {
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
    if (speed > 100) speed = 100; // Limita el valor máximo a 100%
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b64      	cmp	r3, #100	@ 0x64
 800124e:	d901      	bls.n	8001254 <Motor_SetSpeed+0x14>
 8001250:	2364      	movs	r3, #100	@ 0x64
 8001252:	71fb      	strb	r3, [r7, #7]
    if (speed < 0) speed = 0; // Limita el valor minimo a 0%
    // Calcula el valor de comparación para el duty cycle
    uint32_t pulse = (speed * __HAL_TIM_GET_AUTORELOAD(&htim2)) / 100;
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <Motor_SetSpeed+0x40>)
 8001258:	6812      	ldr	r2, [r2, #0]
 800125a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800125c:	fb02 f303 	mul.w	r3, r2, r3
 8001260:	4a08      	ldr	r2, [pc, #32]	@ (8001284 <Motor_SetSpeed+0x44>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	60fb      	str	r3, [r7, #12]

    // Establece el duty cycle
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse);
 800126a:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <Motor_SetSpeed+0x40>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000264 	.word	0x20000264
 8001284:	51eb851f 	.word	0x51eb851f

08001288 <getElapsedTime>:
// Función para calcular el tiempo transcurrido
float getElapsedTime() {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    uint32_t current_tick = HAL_GetTick(); // Obtiene el tiempo actual en ms
 800128e:	f000 ff93 	bl	80021b8 <HAL_GetTick>
 8001292:	6078      	str	r0, [r7, #4]
    float elapsed = (current_tick - last_tick) / 1000.0; // Convierte a segundos
 8001294:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <getElapsedTime+0x4c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f939 	bl	8000514 <__aeabi_ui2d>
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <getElapsedTime+0x50>)
 80012a8:	f7ff fad8 	bl	800085c <__aeabi_ddiv>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4610      	mov	r0, r2
 80012b2:	4619      	mov	r1, r3
 80012b4:	f7ff fc80 	bl	8000bb8 <__aeabi_d2f>
 80012b8:	4603      	mov	r3, r0
 80012ba:	603b      	str	r3, [r7, #0]
    last_tick = current_tick;
 80012bc:	4a05      	ldr	r2, [pc, #20]	@ (80012d4 <getElapsedTime+0x4c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
    return elapsed;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	ee07 3a90 	vmov	s15, r3
}
 80012c8:	eeb0 0a67 	vmov.f32	s0, s15
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000033c 	.word	0x2000033c
 80012d8:	408f4000 	.word	0x408f4000

080012dc <PIControl>:
// Función para calcular y aplicar el control PI
void PIControl(float current_angle, float set_point) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80012e6:	edc7 0a00 	vstr	s1, [r7]
    // Calcula el error
    float error = set_point - current_angle;
 80012ea:	ed97 7a00 	vldr	s14, [r7]
 80012ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f6:	edc7 7a04 	vstr	s15, [r7, #16]

    // Tiempo transcurrido
    float dt = getElapsedTime();
 80012fa:	f7ff ffc5 	bl	8001288 <getElapsedTime>
 80012fe:	ed87 0a03 	vstr	s0, [r7, #12]

    // Acumula el término integral
    integral_sum += error * dt;
 8001302:	ed97 7a04 	vldr	s14, [r7, #16]
 8001306:	edd7 7a03 	vldr	s15, [r7, #12]
 800130a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800130e:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <PIControl+0x94>)
 8001310:	edd3 7a00 	vldr	s15, [r3]
 8001314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001318:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <PIControl+0x94>)
 800131a:	edc3 7a00 	vstr	s15, [r3]

    // Calcula el ajuste PI
    float adjustment = (Kp * error);
 800131e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001322:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001326:	ee67 7a87 	vmul.f32	s15, s15, s14
 800132a:	edc7 7a02 	vstr	s15, [r7, #8]

    // Calcula el nuevo valor PWM
    int pwm_value = CENTER_PWM + (int)adjustment;
 800132e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001336:	ee17 3a90 	vmov	r3, s15
 800133a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800133e:	617b      	str	r3, [r7, #20]

    // Limita el valor PWM al rango permitido
    if (pwm_value < MIN_PWM) pwm_value = MIN_PWM;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8001346:	da02      	bge.n	800134e <PIControl+0x72>
 8001348:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800134c:	617b      	str	r3, [r7, #20]
    if (pwm_value > MAX_PWM) pwm_value = MAX_PWM;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f240 228a 	movw	r2, #650	@ 0x28a
 8001354:	4293      	cmp	r3, r2
 8001356:	dd02      	ble.n	800135e <PIControl+0x82>
 8001358:	f240 238a 	movw	r3, #650	@ 0x28a
 800135c:	617b      	str	r3, [r7, #20]

    // Enviar el valor PWM al servo
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_value);
 800135e:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <PIControl+0x98>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000200 	.word	0x20000200
 8001374:	20000264 	.word	0x20000264

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	b099      	sub	sp, #100	@ 0x64
 800137c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137e:	f000 feb5 	bl	80020ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001382:	f000 f91d 	bl	80015c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001386:	f000 fab3 	bl	80018f0 <MX_GPIO_Init>
  MX_I2C2_Init();
 800138a:	f000 f981 	bl	8001690 <MX_I2C2_Init>
  MX_TIM2_Init();
 800138e:	f000 f9ad 	bl	80016ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8001392:	f000 fa2f 	bl	80017f4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001396:	f000 fa81 	bl	800189c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013a0:	487c      	ldr	r0, [pc, #496]	@ (8001594 <main+0x21c>)
 80013a2:	f001 fa61 	bl	8002868 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive
 80013a6:	2201      	movs	r2, #1
 80013a8:	497b      	ldr	r1, [pc, #492]	@ (8001598 <main+0x220>)
 80013aa:	487c      	ldr	r0, [pc, #496]	@ (800159c <main+0x224>)
 80013ac:	f003 ff19 	bl	80051e2 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Servo motor
 80013b0:	2100      	movs	r1, #0
 80013b2:	487b      	ldr	r0, [pc, #492]	@ (80015a0 <main+0x228>)
 80013b4:	f002 ff86 	bl	80042c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Velocidad de motor
 80013b8:	2104      	movs	r1, #4
 80013ba:	4879      	ldr	r0, [pc, #484]	@ (80015a0 <main+0x228>)
 80013bc:	f002 ff82 	bl	80042c4 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80013c0:	213c      	movs	r1, #60	@ 0x3c
 80013c2:	4878      	ldr	r0, [pc, #480]	@ (80015a4 <main+0x22c>)
 80013c4:	f003 f8d4 	bl	8004570 <HAL_TIM_Encoder_Start>
  htim2.Instance -> CCR1 = 500;
 80013c8:	4b75      	ldr	r3, [pc, #468]	@ (80015a0 <main+0x228>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80013d0:	635a      	str	r2, [r3, #52]	@ 0x34
  QMC5883L_Init();
 80013d2:	f7ff fdb9 	bl	8000f48 <QMC5883L_Init>
  Calibrate_Sensor(); // Llamar a la función de calibración al inicio
 80013d6:	f7ff fe6f 	bl	80010b8 <Calibrate_Sensor>
  int16_t x, y, z;
  float angle;
  char buffer[64];
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013e0:	486c      	ldr	r0, [pc, #432]	@ (8001594 <main+0x21c>)
 80013e2:	f001 fa41 	bl	8002868 <HAL_GPIO_WritePin>
  HAL_Delay(3000);
 80013e6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80013ea:	f000 fef1 	bl	80021d0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80013ee:	2201      	movs	r2, #1
 80013f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013f4:	4867      	ldr	r0, [pc, #412]	@ (8001594 <main+0x21c>)
 80013f6:	f001 fa37 	bl	8002868 <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 80013fa:	f241 3088 	movw	r0, #5000	@ 0x1388
 80013fe:	f000 fee7 	bl	80021d0 <HAL_Delay>
  Motor_forward();
 8001402:	f7ff fefd 	bl	8001200 <Motor_forward>
  Motor_SetSpeed(30);
 8001406:	201e      	movs	r0, #30
 8001408:	f7ff ff1a 	bl	8001240 <Motor_SetSpeed>
  QMC5883L_Read(&x, &y, &z, &angle);
 800140c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001410:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 8001414:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001418:	f107 004e 	add.w	r0, r7, #78	@ 0x4e
 800141c:	f7ff fdb8 	bl	8000f90 <QMC5883L_Read>
  set_point = angle;
 8001420:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001428:	ee17 3a90 	vmov	r3, s15
 800142c:	b21a      	sxth	r2, r3
 800142e:	4b5e      	ldr	r3, [pc, #376]	@ (80015a8 <main+0x230>)
 8001430:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  QMC5883L_Read(&x, &y, &z, &angle);
 8001432:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001436:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 800143a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800143e:	f107 004e 	add.w	r0, r7, #78	@ 0x4e
 8001442:	f7ff fda5 	bl	8000f90 <QMC5883L_Read>
	  timer_counter = __HAL_TIM_GET_COUNTER(&htim3);
 8001446:	4b57      	ldr	r3, [pc, #348]	@ (80015a4 <main+0x22c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144c:	b21a      	sxth	r2, r3
 800144e:	4b57      	ldr	r3, [pc, #348]	@ (80015ac <main+0x234>)
 8001450:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(10); // Tiempo de actualización (10 ms)
 8001452:	200a      	movs	r0, #10
 8001454:	f000 febc 	bl	80021d0 <HAL_Delay>
	  snprintf(buffer, sizeof(buffer), "x: %d, y: %d, z: %d, angle: %.2f\r\n", x, y, z, angle);
 8001458:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800145c:	461e      	mov	r6, r3
 800145e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001462:	461c      	mov	r4, r3
 8001464:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001468:	461d      	mov	r5, r3
 800146a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f873 	bl	8000558 <__aeabi_f2d>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	1d38      	adds	r0, r7, #4
 8001478:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800147c:	9501      	str	r5, [sp, #4]
 800147e:	9400      	str	r4, [sp, #0]
 8001480:	4633      	mov	r3, r6
 8001482:	4a4b      	ldr	r2, [pc, #300]	@ (80015b0 <main+0x238>)
 8001484:	2140      	movs	r1, #64	@ 0x40
 8001486:	f005 fb41 	bl	8006b0c <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	4618      	mov	r0, r3
 800148e:	f7fe fef7 	bl	8000280 <strlen>
 8001492:	4603      	mov	r3, r0
 8001494:	b29a      	uxth	r2, r3
 8001496:	1d39      	adds	r1, r7, #4
 8001498:	f04f 33ff 	mov.w	r3, #4294967295
 800149c:	483f      	ldr	r0, [pc, #252]	@ (800159c <main+0x224>)
 800149e:	f003 fe15 	bl	80050cc <HAL_UART_Transmit>
	  if (timer_counter < 14086) {
 80014a2:	4b42      	ldr	r3, [pc, #264]	@ (80015ac <main+0x234>)
 80014a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a8:	f243 7205 	movw	r2, #14085	@ 0x3705
 80014ac:	4293      	cmp	r3, r2
 80014ae:	dc11      	bgt.n	80014d4 <main+0x15c>
	      PIControl(angle, set_point);
 80014b0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80014b4:	4b3c      	ldr	r3, [pc, #240]	@ (80015a8 <main+0x230>)
 80014b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ba:	ee07 3a10 	vmov	s14, r3
 80014be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80014c2:	eef0 0a47 	vmov.f32	s1, s14
 80014c6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ca:	f7ff ff07 	bl	80012dc <PIControl>
	      Motor_forward(); // Ajusta el servo con el controlador PI
 80014ce:	f7ff fe97 	bl	8001200 <Motor_forward>
 80014d2:	e7ae      	b.n	8001432 <main+0xba>
	  }
	  else if (timer_counter >= 14086 && timer_counter < 28172) {
 80014d4:	4b35      	ldr	r3, [pc, #212]	@ (80015ac <main+0x234>)
 80014d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014da:	f243 7205 	movw	r2, #14085	@ 0x3705
 80014de:	4293      	cmp	r3, r2
 80014e0:	dd26      	ble.n	8001530 <main+0x1b8>
 80014e2:	4b32      	ldr	r3, [pc, #200]	@ (80015ac <main+0x234>)
 80014e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e8:	f646 620b 	movw	r2, #28171	@ 0x6e0b
 80014ec:	4293      	cmp	r3, r2
 80014ee:	dc1f      	bgt.n	8001530 <main+0x1b8>

	      if (delay_flag_1 == 0) {
 80014f0:	4b30      	ldr	r3, [pc, #192]	@ (80015b4 <main+0x23c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d108      	bne.n	800150a <main+0x192>
	    	  stop();
 80014f8:	f7ff fe92 	bl	8001220 <stop>
	          HAL_Delay(5000); // Retraso de 5 segundos
 80014fc:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001500:	f000 fe66 	bl	80021d0 <HAL_Delay>
	          delay_flag_1 = 1; // Asegura que el retraso ocurra solo la primera vez
 8001504:	4b2b      	ldr	r3, [pc, #172]	@ (80015b4 <main+0x23c>)
 8001506:	2201      	movs	r2, #1
 8001508:	701a      	strb	r2, [r3, #0]
	      }

	      Motor_forward(); // Ajusta el servo con el controlador PI
 800150a:	f7ff fe79 	bl	8001200 <Motor_forward>
	      PIControl(angle , set_point+100);
 800150e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001512:	4b25      	ldr	r3, [pc, #148]	@ (80015a8 <main+0x230>)
 8001514:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001518:	3364      	adds	r3, #100	@ 0x64
 800151a:	ee07 3a10 	vmov	s14, r3
 800151e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001522:	eef0 0a47 	vmov.f32	s1, s14
 8001526:	eeb0 0a67 	vmov.f32	s0, s15
 800152a:	f7ff fed7 	bl	80012dc <PIControl>
 800152e:	e02f      	b.n	8001590 <main+0x218>
	  }
	  else if (timer_counter >= 28172 && timer_counter < 42258) {
 8001530:	4b1e      	ldr	r3, [pc, #120]	@ (80015ac <main+0x234>)
 8001532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001536:	f646 620b 	movw	r2, #28171	@ 0x6e0b
 800153a:	4293      	cmp	r3, r2
 800153c:	dd1f      	ble.n	800157e <main+0x206>

	      if (delay_flag_2 == 0) {
 800153e:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <main+0x240>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d108      	bne.n	8001558 <main+0x1e0>
	    	  stop();
 8001546:	f7ff fe6b 	bl	8001220 <stop>
	          HAL_Delay(5000); // Retraso de 5 segundos
 800154a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800154e:	f000 fe3f 	bl	80021d0 <HAL_Delay>
	          delay_flag_2 = 1; // Asegura que el retraso ocurra solo la primera vez
 8001552:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <main+0x240>)
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]
	      }

	      Motor_forward(); // Ajusta el servo con el controlador PI
 8001558:	f7ff fe52 	bl	8001200 <Motor_forward>
	      PIControl(angle, set_point+200);
 800155c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <main+0x230>)
 8001562:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001566:	33c8      	adds	r3, #200	@ 0xc8
 8001568:	ee07 3a10 	vmov	s14, r3
 800156c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001570:	eef0 0a47 	vmov.f32	s1, s14
 8001574:	eeb0 0a67 	vmov.f32	s0, s15
 8001578:	f7ff feb0 	bl	80012dc <PIControl>
 800157c:	e759      	b.n	8001432 <main+0xba>

	      Motor_forward(); // Ajusta el servo con el controlador PI
	      PIControl(angle, set_point+300);
	  }
	  else {
	      delay_flag_1 = 0; // Reinicia la bandera para el primer rango
 800157e:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <main+0x23c>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
	      delay_flag_2 = 0; // Reinicia la bandera para el segundo rango
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <main+0x240>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
	      delay_flag_3 = 0; // Reinicia la bandera para el tercer rango
 800158a:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <main+0x244>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
	  QMC5883L_Read(&x, &y, &z, &angle);
 8001590:	e74f      	b.n	8001432 <main+0xba>
 8001592:	bf00      	nop
 8001594:	40020400 	.word	0x40020400
 8001598:	20000204 	.word	0x20000204
 800159c:	200002f4 	.word	0x200002f4
 80015a0:	20000264 	.word	0x20000264
 80015a4:	200002ac 	.word	0x200002ac
 80015a8:	2000020a 	.word	0x2000020a
 80015ac:	2000020c 	.word	0x2000020c
 80015b0:	080092c4 	.word	0x080092c4
 80015b4:	200001fb 	.word	0x200001fb
 80015b8:	200001fc 	.word	0x200001fc
 80015bc:	200001fd 	.word	0x200001fd

080015c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b094      	sub	sp, #80	@ 0x50
 80015c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c6:	f107 0320 	add.w	r3, r7, #32
 80015ca:	2230      	movs	r2, #48	@ 0x30
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f005 fb13 	bl	8006bfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	4b27      	ldr	r3, [pc, #156]	@ (8001688 <SystemClock_Config+0xc8>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ec:	4a26      	ldr	r2, [pc, #152]	@ (8001688 <SystemClock_Config+0xc8>)
 80015ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f4:	4b24      	ldr	r3, [pc, #144]	@ (8001688 <SystemClock_Config+0xc8>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	4b21      	ldr	r3, [pc, #132]	@ (800168c <SystemClock_Config+0xcc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a20      	ldr	r2, [pc, #128]	@ (800168c <SystemClock_Config+0xcc>)
 800160a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <SystemClock_Config+0xcc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800161c:	2301      	movs	r3, #1
 800161e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001620:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001626:	2302      	movs	r3, #2
 8001628:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800162a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800162e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001630:	2319      	movs	r3, #25
 8001632:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001634:	2390      	movs	r3, #144	@ 0x90
 8001636:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001638:	2302      	movs	r3, #2
 800163a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800163c:	2304      	movs	r3, #4
 800163e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001640:	f107 0320 	add.w	r3, r7, #32
 8001644:	4618      	mov	r0, r3
 8001646:	f002 f93d 	bl	80038c4 <HAL_RCC_OscConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001650:	f000 fa78 	bl	8001b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001654:	230f      	movs	r3, #15
 8001656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001658:	2302      	movs	r3, #2
 800165a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001660:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001664:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	2102      	movs	r1, #2
 8001670:	4618      	mov	r0, r3
 8001672:	f002 fb9f 	bl	8003db4 <HAL_RCC_ClockConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800167c:	f000 fa62 	bl	8001b44 <Error_Handler>
  }
}
 8001680:	bf00      	nop
 8001682:	3750      	adds	r7, #80	@ 0x50
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40023800 	.word	0x40023800
 800168c:	40007000 	.word	0x40007000

08001690 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <MX_I2C2_Init+0x50>)
 8001696:	4a13      	ldr	r2, [pc, #76]	@ (80016e4 <MX_I2C2_Init+0x54>)
 8001698:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800169a:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <MX_I2C2_Init+0x50>)
 800169c:	4a12      	ldr	r2, [pc, #72]	@ (80016e8 <MX_I2C2_Init+0x58>)
 800169e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <MX_I2C2_Init+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <MX_I2C2_Init+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <MX_I2C2_Init+0x50>)
 80016ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	@ (80016e0 <MX_I2C2_Init+0x50>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <MX_I2C2_Init+0x50>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c0:	4b07      	ldr	r3, [pc, #28]	@ (80016e0 <MX_I2C2_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <MX_I2C2_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016cc:	4804      	ldr	r0, [pc, #16]	@ (80016e0 <MX_I2C2_Init+0x50>)
 80016ce:	f001 f8e5 	bl	800289c <HAL_I2C_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016d8:	f000 fa34 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000210 	.word	0x20000210
 80016e4:	40005800 	.word	0x40005800
 80016e8:	000186a0 	.word	0x000186a0

080016ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08e      	sub	sp, #56	@ 0x38
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001700:	f107 0320 	add.w	r3, r7, #32
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
 8001718:	615a      	str	r2, [r3, #20]
 800171a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800171c:	4b34      	ldr	r3, [pc, #208]	@ (80017f0 <MX_TIM2_Init+0x104>)
 800171e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001722:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001724:	4b32      	ldr	r3, [pc, #200]	@ (80017f0 <MX_TIM2_Init+0x104>)
 8001726:	2247      	movs	r2, #71	@ 0x47
 8001728:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172a:	4b31      	ldr	r3, [pc, #196]	@ (80017f0 <MX_TIM2_Init+0x104>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001730:	4b2f      	ldr	r3, [pc, #188]	@ (80017f0 <MX_TIM2_Init+0x104>)
 8001732:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001736:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001738:	4b2d      	ldr	r3, [pc, #180]	@ (80017f0 <MX_TIM2_Init+0x104>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173e:	4b2c      	ldr	r3, [pc, #176]	@ (80017f0 <MX_TIM2_Init+0x104>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001744:	482a      	ldr	r0, [pc, #168]	@ (80017f0 <MX_TIM2_Init+0x104>)
 8001746:	f002 fd15 	bl	8004174 <HAL_TIM_Base_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001750:	f000 f9f8 	bl	8001b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001754:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001758:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800175a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800175e:	4619      	mov	r1, r3
 8001760:	4823      	ldr	r0, [pc, #140]	@ (80017f0 <MX_TIM2_Init+0x104>)
 8001762:	f003 f855 	bl	8004810 <HAL_TIM_ConfigClockSource>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800176c:	f000 f9ea 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001770:	481f      	ldr	r0, [pc, #124]	@ (80017f0 <MX_TIM2_Init+0x104>)
 8001772:	f002 fd4e 	bl	8004212 <HAL_TIM_PWM_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800177c:	f000 f9e2 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001788:	f107 0320 	add.w	r3, r7, #32
 800178c:	4619      	mov	r1, r3
 800178e:	4818      	ldr	r0, [pc, #96]	@ (80017f0 <MX_TIM2_Init+0x104>)
 8001790:	f003 fbde 	bl	8004f50 <HAL_TIMEx_MasterConfigSynchronization>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800179a:	f000 f9d3 	bl	8001b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800179e:	2360      	movs	r3, #96	@ 0x60
 80017a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80017a2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80017a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	4619      	mov	r1, r3
 80017b6:	480e      	ldr	r0, [pc, #56]	@ (80017f0 <MX_TIM2_Init+0x104>)
 80017b8:	f002 ff68 	bl	800468c <HAL_TIM_PWM_ConfigChannel>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80017c2:	f000 f9bf 	bl	8001b44 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	2204      	movs	r2, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	4807      	ldr	r0, [pc, #28]	@ (80017f0 <MX_TIM2_Init+0x104>)
 80017d2:	f002 ff5b 	bl	800468c <HAL_TIM_PWM_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 80017dc:	f000 f9b2 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017e0:	4803      	ldr	r0, [pc, #12]	@ (80017f0 <MX_TIM2_Init+0x104>)
 80017e2:	f000 fa9f 	bl	8001d24 <HAL_TIM_MspPostInit>

}
 80017e6:	bf00      	nop
 80017e8:	3738      	adds	r7, #56	@ 0x38
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000264 	.word	0x20000264

080017f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08c      	sub	sp, #48	@ 0x30
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	2224      	movs	r2, #36	@ 0x24
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f005 f9f9 	bl	8006bfa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001810:	4b20      	ldr	r3, [pc, #128]	@ (8001894 <MX_TIM3_Init+0xa0>)
 8001812:	4a21      	ldr	r2, [pc, #132]	@ (8001898 <MX_TIM3_Init+0xa4>)
 8001814:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001816:	4b1f      	ldr	r3, [pc, #124]	@ (8001894 <MX_TIM3_Init+0xa0>)
 8001818:	2200      	movs	r2, #0
 800181a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181c:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <MX_TIM3_Init+0xa0>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001822:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <MX_TIM3_Init+0xa0>)
 8001824:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001828:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182a:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <MX_TIM3_Init+0xa0>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001830:	4b18      	ldr	r3, [pc, #96]	@ (8001894 <MX_TIM3_Init+0xa0>)
 8001832:	2200      	movs	r2, #0
 8001834:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001836:	2301      	movs	r3, #1
 8001838:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800183e:	2301      	movs	r3, #1
 8001840:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800184e:	2301      	movs	r3, #1
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001852:	2300      	movs	r3, #0
 8001854:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	4619      	mov	r1, r3
 8001860:	480c      	ldr	r0, [pc, #48]	@ (8001894 <MX_TIM3_Init+0xa0>)
 8001862:	f002 fddf 	bl	8004424 <HAL_TIM_Encoder_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800186c:	f000 f96a 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	@ (8001894 <MX_TIM3_Init+0xa0>)
 800187e:	f003 fb67 	bl	8004f50 <HAL_TIMEx_MasterConfigSynchronization>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001888:	f000 f95c 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	3730      	adds	r7, #48	@ 0x30
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	200002ac 	.word	0x200002ac
 8001898:	40000400 	.word	0x40000400

0800189c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018a0:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018a2:	4a12      	ldr	r2, [pc, #72]	@ (80018ec <MX_USART1_UART_Init+0x50>)
 80018a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018a6:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ba:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c0:	4b09      	ldr	r3, [pc, #36]	@ (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018c2:	220c      	movs	r2, #12
 80018c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c6:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018cc:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018d2:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <MX_USART1_UART_Init+0x4c>)
 80018d4:	f003 fbaa 	bl	800502c <HAL_UART_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018de:	f000 f931 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200002f4 	.word	0x200002f4
 80018ec:	40011000 	.word	0x40011000

080018f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	@ 0x28
 80018f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b3b      	ldr	r3, [pc, #236]	@ (80019f8 <MX_GPIO_Init+0x108>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a3a      	ldr	r2, [pc, #232]	@ (80019f8 <MX_GPIO_Init+0x108>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b38      	ldr	r3, [pc, #224]	@ (80019f8 <MX_GPIO_Init+0x108>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b34      	ldr	r3, [pc, #208]	@ (80019f8 <MX_GPIO_Init+0x108>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a33      	ldr	r2, [pc, #204]	@ (80019f8 <MX_GPIO_Init+0x108>)
 800192c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b31      	ldr	r3, [pc, #196]	@ (80019f8 <MX_GPIO_Init+0x108>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	4b2d      	ldr	r3, [pc, #180]	@ (80019f8 <MX_GPIO_Init+0x108>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a2c      	ldr	r2, [pc, #176]	@ (80019f8 <MX_GPIO_Init+0x108>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b2a      	ldr	r3, [pc, #168]	@ (80019f8 <MX_GPIO_Init+0x108>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b26      	ldr	r3, [pc, #152]	@ (80019f8 <MX_GPIO_Init+0x108>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a25      	ldr	r2, [pc, #148]	@ (80019f8 <MX_GPIO_Init+0x108>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b23      	ldr	r3, [pc, #140]	@ (80019f8 <MX_GPIO_Init+0x108>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800197c:	481f      	ldr	r0, [pc, #124]	@ (80019fc <MX_GPIO_Init+0x10c>)
 800197e:	f000 ff73 	bl	8002868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001982:	2200      	movs	r2, #0
 8001984:	2120      	movs	r1, #32
 8001986:	481e      	ldr	r0, [pc, #120]	@ (8001a00 <MX_GPIO_Init+0x110>)
 8001988:	f000 ff6e 	bl	8002868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	f241 0130 	movw	r1, #4144	@ 0x1030
 8001992:	481c      	ldr	r0, [pc, #112]	@ (8001a04 <MX_GPIO_Init+0x114>)
 8001994:	f000 ff68 	bl	8002868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001998:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800199c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2301      	movs	r3, #1
 80019a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	4812      	ldr	r0, [pc, #72]	@ (80019fc <MX_GPIO_Init+0x10c>)
 80019b2:	f000 fdd5 	bl	8002560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019b6:	2320      	movs	r3, #32
 80019b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	480c      	ldr	r0, [pc, #48]	@ (8001a00 <MX_GPIO_Init+0x110>)
 80019ce:	f000 fdc7 	bl	8002560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_4|GPIO_PIN_5;
 80019d2:	f241 0330 	movw	r3, #4144	@ 0x1030
 80019d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	2301      	movs	r3, #1
 80019da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	4806      	ldr	r0, [pc, #24]	@ (8001a04 <MX_GPIO_Init+0x114>)
 80019ec:	f000 fdb8 	bl	8002560 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019f0:	bf00      	nop
 80019f2:	3728      	adds	r7, #40	@ 0x28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020800 	.word	0x40020800
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40020400 	.word	0x40020400

08001a08 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a44      	ldr	r2, [pc, #272]	@ (8001b28 <HAL_UART_RxCpltCallback+0x120>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	f040 8082 	bne.w	8001b20 <HAL_UART_RxCpltCallback+0x118>
  {
    if(rxData==78) // Ascii value of 'N' is 78 (N for NO)
 8001a1c:	4b43      	ldr	r3, [pc, #268]	@ (8001b2c <HAL_UART_RxCpltCallback+0x124>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b4e      	cmp	r3, #78	@ 0x4e
 8001a22:	d10a      	bne.n	8001a3a <HAL_UART_RxCpltCallback+0x32>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001a24:	2201      	movs	r2, #1
 8001a26:	2120      	movs	r1, #32
 8001a28:	4841      	ldr	r0, [pc, #260]	@ (8001b30 <HAL_UART_RxCpltCallback+0x128>)
 8001a2a:	f000 ff1d 	bl	8002868 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2110      	movs	r1, #16
 8001a32:	483f      	ldr	r0, [pc, #252]	@ (8001b30 <HAL_UART_RxCpltCallback+0x128>)
 8001a34:	f000 ff18 	bl	8002868 <HAL_GPIO_WritePin>
 8001a38:	e06d      	b.n	8001b16 <HAL_UART_RxCpltCallback+0x10e>

    }
    else if (rxData==89) // Ascii value of 'Y' is 89 (Y for YES)
 8001a3a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b2c <HAL_UART_RxCpltCallback+0x124>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b59      	cmp	r3, #89	@ 0x59
 8001a40:	d10a      	bne.n	8001a58 <HAL_UART_RxCpltCallback+0x50>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2120      	movs	r1, #32
 8001a46:	483a      	ldr	r0, [pc, #232]	@ (8001b30 <HAL_UART_RxCpltCallback+0x128>)
 8001a48:	f000 ff0e 	bl	8002868 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2110      	movs	r1, #16
 8001a50:	4837      	ldr	r0, [pc, #220]	@ (8001b30 <HAL_UART_RxCpltCallback+0x128>)
 8001a52:	f000 ff09 	bl	8002868 <HAL_GPIO_WritePin>
 8001a56:	e05e      	b.n	8001b16 <HAL_UART_RxCpltCallback+0x10e>

    }
    else if (rxData==69) // Ascii value of 'E' is 89 (E for EXIT)
 8001a58:	4b34      	ldr	r3, [pc, #208]	@ (8001b2c <HAL_UART_RxCpltCallback+0x124>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b45      	cmp	r3, #69	@ 0x45
 8001a5e:	d10a      	bne.n	8001a76 <HAL_UART_RxCpltCallback+0x6e>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2120      	movs	r1, #32
 8001a64:	4832      	ldr	r0, [pc, #200]	@ (8001b30 <HAL_UART_RxCpltCallback+0x128>)
 8001a66:	f000 feff 	bl	8002868 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2110      	movs	r1, #16
 8001a6e:	4830      	ldr	r0, [pc, #192]	@ (8001b30 <HAL_UART_RxCpltCallback+0x128>)
 8001a70:	f000 fefa 	bl	8002868 <HAL_GPIO_WritePin>
 8001a74:	e04f      	b.n	8001b16 <HAL_UART_RxCpltCallback+0x10e>

    }
    else if (rxData==67) // Ascii value of 'C' (C is for calibrate)
 8001a76:	4b2d      	ldr	r3, [pc, #180]	@ (8001b2c <HAL_UART_RxCpltCallback+0x124>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b43      	cmp	r3, #67	@ 0x43
 8001a7c:	d103      	bne.n	8001a86 <HAL_UART_RxCpltCallback+0x7e>
    {
        calibrara = 1;
 8001a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001b34 <HAL_UART_RxCpltCallback+0x12c>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
 8001a84:	e047      	b.n	8001b16 <HAL_UART_RxCpltCallback+0x10e>

    }
    else if (rxData==89) // Ascii value of 'Y' (Speed up)
 8001a86:	4b29      	ldr	r3, [pc, #164]	@ (8001b2c <HAL_UART_RxCpltCallback+0x124>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b59      	cmp	r3, #89	@ 0x59
 8001a8c:	d118      	bne.n	8001ac0 <HAL_UART_RxCpltCallback+0xb8>
    {
    	if (vel > 100){
 8001a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b38 <HAL_UART_RxCpltCallback+0x130>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b64      	cmp	r3, #100	@ 0x64
 8001a94:	d908      	bls.n	8001aa8 <HAL_UART_RxCpltCallback+0xa0>
    		vel = 100;
 8001a96:	4b28      	ldr	r3, [pc, #160]	@ (8001b38 <HAL_UART_RxCpltCallback+0x130>)
 8001a98:	2264      	movs	r2, #100	@ 0x64
 8001a9a:	701a      	strb	r2, [r3, #0]
    		Motor_SetSpeed(vel);
 8001a9c:	4b26      	ldr	r3, [pc, #152]	@ (8001b38 <HAL_UART_RxCpltCallback+0x130>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fbcd 	bl	8001240 <Motor_SetSpeed>
 8001aa6:	e036      	b.n	8001b16 <HAL_UART_RxCpltCallback+0x10e>
    	}
    	else{
    		vel += 10;
 8001aa8:	4b23      	ldr	r3, [pc, #140]	@ (8001b38 <HAL_UART_RxCpltCallback+0x130>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	330a      	adds	r3, #10
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	4b21      	ldr	r3, [pc, #132]	@ (8001b38 <HAL_UART_RxCpltCallback+0x130>)
 8001ab2:	701a      	strb	r2, [r3, #0]
    		Motor_SetSpeed(vel);
 8001ab4:	4b20      	ldr	r3, [pc, #128]	@ (8001b38 <HAL_UART_RxCpltCallback+0x130>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fbc1 	bl	8001240 <Motor_SetSpeed>
 8001abe:	e02a      	b.n	8001b16 <HAL_UART_RxCpltCallback+0x10e>
    	}
    }
    else if (rxData==90) // Ascii value of 'Z' (Speed down)
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <HAL_UART_RxCpltCallback+0x124>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b5a      	cmp	r3, #90	@ 0x5a
 8001ac6:	d10b      	bne.n	8001ae0 <HAL_UART_RxCpltCallback+0xd8>
    	if (vel < 0){
    		vel = 0;
    		Motor_SetSpeed(vel);
    	}
    	else{
    		vel -= 10;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <HAL_UART_RxCpltCallback+0x130>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	3b0a      	subs	r3, #10
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	4b19      	ldr	r3, [pc, #100]	@ (8001b38 <HAL_UART_RxCpltCallback+0x130>)
 8001ad2:	701a      	strb	r2, [r3, #0]
    		Motor_SetSpeed(vel);
 8001ad4:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <HAL_UART_RxCpltCallback+0x130>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fbb1 	bl	8001240 <Motor_SetSpeed>
 8001ade:	e01a      	b.n	8001b16 <HAL_UART_RxCpltCallback+0x10e>
    	}
    }
    else if (rxData==71) // Ascii value of 'G' (Speed down)
 8001ae0:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <HAL_UART_RxCpltCallback+0x124>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b47      	cmp	r3, #71	@ 0x47
 8001ae6:	d116      	bne.n	8001b16 <HAL_UART_RxCpltCallback+0x10e>
    {
    	if (posicion < 9000){
 8001ae8:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <HAL_UART_RxCpltCallback+0x134>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	f242 3227 	movw	r2, #8999	@ 0x2327
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d808      	bhi.n	8001b06 <HAL_UART_RxCpltCallback+0xfe>
    		vel = 10;
 8001af4:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <HAL_UART_RxCpltCallback+0x130>)
 8001af6:	220a      	movs	r2, #10
 8001af8:	701a      	strb	r2, [r3, #0]
    		Motor_SetSpeed(vel);
 8001afa:	4b0f      	ldr	r3, [pc, #60]	@ (8001b38 <HAL_UART_RxCpltCallback+0x130>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fb9e 	bl	8001240 <Motor_SetSpeed>
 8001b04:	e007      	b.n	8001b16 <HAL_UART_RxCpltCallback+0x10e>
    	}
    	else{
    		vel =0;
 8001b06:	4b0c      	ldr	r3, [pc, #48]	@ (8001b38 <HAL_UART_RxCpltCallback+0x130>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
    		Motor_SetSpeed(vel);
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <HAL_UART_RxCpltCallback+0x130>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fb95 	bl	8001240 <Motor_SetSpeed>
    	}
    }
    HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 8001b16:	2201      	movs	r2, #1
 8001b18:	4904      	ldr	r1, [pc, #16]	@ (8001b2c <HAL_UART_RxCpltCallback+0x124>)
 8001b1a:	4809      	ldr	r0, [pc, #36]	@ (8001b40 <HAL_UART_RxCpltCallback+0x138>)
 8001b1c:	f003 fb61 	bl	80051e2 <HAL_UART_Receive_IT>
  }
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40011000 	.word	0x40011000
 8001b2c:	20000204 	.word	0x20000204
 8001b30:	40020400 	.word	0x40020400
 8001b34:	20000208 	.word	0x20000208
 8001b38:	200001fa 	.word	0x200001fa
 8001b3c:	20000206 	.word	0x20000206
 8001b40:	200002f4 	.word	0x200002f4

08001b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b48:	b672      	cpsid	i
}
 8001b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <Error_Handler+0x8>

08001b50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b66:	4b0d      	ldr	r3, [pc, #52]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	4a08      	ldr	r2, [pc, #32]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b82:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	@ 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a22      	ldr	r2, [pc, #136]	@ (8001c48 <HAL_I2C_MspInit+0xa8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d13d      	bne.n	8001c3e <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	4b21      	ldr	r3, [pc, #132]	@ (8001c4c <HAL_I2C_MspInit+0xac>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	4a20      	ldr	r2, [pc, #128]	@ (8001c4c <HAL_I2C_MspInit+0xac>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c4c <HAL_I2C_MspInit+0xac>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be4:	2312      	movs	r3, #18
 8001be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bec:	2303      	movs	r3, #3
 8001bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4815      	ldr	r0, [pc, #84]	@ (8001c50 <HAL_I2C_MspInit+0xb0>)
 8001bfc:	f000 fcb0 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c06:	2312      	movs	r3, #18
 8001c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001c12:	2309      	movs	r3, #9
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	480c      	ldr	r0, [pc, #48]	@ (8001c50 <HAL_I2C_MspInit+0xb0>)
 8001c1e:	f000 fc9f 	bl	8002560 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <HAL_I2C_MspInit+0xac>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	4a08      	ldr	r2, [pc, #32]	@ (8001c4c <HAL_I2C_MspInit+0xac>)
 8001c2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <HAL_I2C_MspInit+0xac>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001c3e:	bf00      	nop
 8001c40:	3728      	adds	r7, #40	@ 0x28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40005800 	.word	0x40005800
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020400 	.word	0x40020400

08001c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c64:	d10d      	bne.n	8001c82 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <HAL_TIM_Base_MspInit+0x3c>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	4a08      	ldr	r2, [pc, #32]	@ (8001c90 <HAL_TIM_Base_MspInit+0x3c>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_TIM_Base_MspInit+0x3c>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001c82:	bf00      	nop
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800

08001c94 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	@ 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a19      	ldr	r2, [pc, #100]	@ (8001d18 <HAL_TIM_Encoder_MspInit+0x84>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d12b      	bne.n	8001d0e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b18      	ldr	r3, [pc, #96]	@ (8001d1c <HAL_TIM_Encoder_MspInit+0x88>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbe:	4a17      	ldr	r2, [pc, #92]	@ (8001d1c <HAL_TIM_Encoder_MspInit+0x88>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc6:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <HAL_TIM_Encoder_MspInit+0x88>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b11      	ldr	r3, [pc, #68]	@ (8001d1c <HAL_TIM_Encoder_MspInit+0x88>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	4a10      	ldr	r2, [pc, #64]	@ (8001d1c <HAL_TIM_Encoder_MspInit+0x88>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d1c <HAL_TIM_Encoder_MspInit+0x88>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cee:	23c0      	movs	r3, #192	@ 0xc0
 8001cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	4619      	mov	r1, r3
 8001d08:	4805      	ldr	r0, [pc, #20]	@ (8001d20 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d0a:	f000 fc29 	bl	8002560 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001d0e:	bf00      	nop
 8001d10:	3728      	adds	r7, #40	@ 0x28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40000400 	.word	0x40000400
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020000 	.word	0x40020000

08001d24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	@ 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d44:	d13b      	bne.n	8001dbe <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc8 <HAL_TIM_MspPostInit+0xa4>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	4a1e      	ldr	r2, [pc, #120]	@ (8001dc8 <HAL_TIM_MspPostInit+0xa4>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d56:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc8 <HAL_TIM_MspPostInit+0xa4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b18      	ldr	r3, [pc, #96]	@ (8001dc8 <HAL_TIM_MspPostInit+0xa4>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	4a17      	ldr	r2, [pc, #92]	@ (8001dc8 <HAL_TIM_MspPostInit+0xa4>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d72:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <HAL_TIM_MspPostInit+0xa4>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	480c      	ldr	r0, [pc, #48]	@ (8001dcc <HAL_TIM_MspPostInit+0xa8>)
 8001d9a:	f000 fbe1 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d9e:	2308      	movs	r3, #8
 8001da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	2300      	movs	r3, #0
 8001dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dae:	2301      	movs	r3, #1
 8001db0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	4619      	mov	r1, r3
 8001db8:	4805      	ldr	r0, [pc, #20]	@ (8001dd0 <HAL_TIM_MspPostInit+0xac>)
 8001dba:	f000 fbd1 	bl	8002560 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001dbe:	bf00      	nop
 8001dc0:	3728      	adds	r7, #40	@ 0x28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020000 	.word	0x40020000
 8001dd0:	40020400 	.word	0x40020400

08001dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	@ 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e68 <HAL_UART_MspInit+0x94>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d134      	bne.n	8001e60 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001e6c <HAL_UART_MspInit+0x98>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8001e6c <HAL_UART_MspInit+0x98>)
 8001e00:	f043 0310 	orr.w	r3, r3, #16
 8001e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e06:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <HAL_UART_MspInit+0x98>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <HAL_UART_MspInit+0x98>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	4a14      	ldr	r2, [pc, #80]	@ (8001e6c <HAL_UART_MspInit+0x98>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e22:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <HAL_UART_MspInit+0x98>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e2e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e40:	2307      	movs	r3, #7
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4809      	ldr	r0, [pc, #36]	@ (8001e70 <HAL_UART_MspInit+0x9c>)
 8001e4c:	f000 fb88 	bl	8002560 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2100      	movs	r1, #0
 8001e54:	2025      	movs	r0, #37	@ 0x25
 8001e56:	f000 faba 	bl	80023ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e5a:	2025      	movs	r0, #37	@ 0x25
 8001e5c:	f000 fad3 	bl	8002406 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e60:	bf00      	nop
 8001e62:	3728      	adds	r7, #40	@ 0x28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40011000 	.word	0x40011000
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020000 	.word	0x40020000

08001e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <NMI_Handler+0x4>

08001e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <HardFault_Handler+0x4>

08001e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <MemManage_Handler+0x4>

08001e8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <BusFault_Handler+0x4>

08001e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <UsageFault_Handler+0x4>

08001e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eca:	f000 f961 	bl	8002190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ed8:	4802      	ldr	r0, [pc, #8]	@ (8001ee4 <USART1_IRQHandler+0x10>)
 8001eda:	f003 f9a7 	bl	800522c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200002f4 	.word	0x200002f4

08001ee8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return 1;
 8001eec:	2301      	movs	r3, #1
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <_kill>:

int _kill(int pid, int sig)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f02:	f004 fecd 	bl	8006ca0 <__errno>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2216      	movs	r2, #22
 8001f0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <_exit>:

void _exit (int status)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f20:	f04f 31ff 	mov.w	r1, #4294967295
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ffe7 	bl	8001ef8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f2a:	bf00      	nop
 8001f2c:	e7fd      	b.n	8001f2a <_exit+0x12>

08001f2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	e00a      	b.n	8001f56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f40:	f3af 8000 	nop.w
 8001f44:	4601      	mov	r1, r0
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	60ba      	str	r2, [r7, #8]
 8001f4c:	b2ca      	uxtb	r2, r1
 8001f4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	3301      	adds	r3, #1
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	dbf0      	blt.n	8001f40 <_read+0x12>
  }

  return len;
 8001f5e:	687b      	ldr	r3, [r7, #4]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	e009      	b.n	8001f8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	60ba      	str	r2, [r7, #8]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	dbf1      	blt.n	8001f7a <_write+0x12>
  }
  return len;
 8001f96:	687b      	ldr	r3, [r7, #4]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <_close>:

int _close(int file)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fc8:	605a      	str	r2, [r3, #4]
  return 0;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <_isatty>:

int _isatty(int file)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fe0:	2301      	movs	r3, #1
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b085      	sub	sp, #20
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002010:	4a14      	ldr	r2, [pc, #80]	@ (8002064 <_sbrk+0x5c>)
 8002012:	4b15      	ldr	r3, [pc, #84]	@ (8002068 <_sbrk+0x60>)
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800201c:	4b13      	ldr	r3, [pc, #76]	@ (800206c <_sbrk+0x64>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002024:	4b11      	ldr	r3, [pc, #68]	@ (800206c <_sbrk+0x64>)
 8002026:	4a12      	ldr	r2, [pc, #72]	@ (8002070 <_sbrk+0x68>)
 8002028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800202a:	4b10      	ldr	r3, [pc, #64]	@ (800206c <_sbrk+0x64>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	429a      	cmp	r2, r3
 8002036:	d207      	bcs.n	8002048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002038:	f004 fe32 	bl	8006ca0 <__errno>
 800203c:	4603      	mov	r3, r0
 800203e:	220c      	movs	r2, #12
 8002040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	e009      	b.n	800205c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002048:	4b08      	ldr	r3, [pc, #32]	@ (800206c <_sbrk+0x64>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204e:	4b07      	ldr	r3, [pc, #28]	@ (800206c <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	4a05      	ldr	r2, [pc, #20]	@ (800206c <_sbrk+0x64>)
 8002058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800205a:	68fb      	ldr	r3, [r7, #12]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20020000 	.word	0x20020000
 8002068:	00000400 	.word	0x00000400
 800206c:	20000340 	.word	0x20000340
 8002070:	20000498 	.word	0x20000498

08002074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002078:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <SystemInit+0x20>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800207e:	4a05      	ldr	r2, [pc, #20]	@ (8002094 <SystemInit+0x20>)
 8002080:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002084:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002098:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800209c:	f7ff ffea 	bl	8002074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020a0:	480c      	ldr	r0, [pc, #48]	@ (80020d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020a2:	490d      	ldr	r1, [pc, #52]	@ (80020d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020a4:	4a0d      	ldr	r2, [pc, #52]	@ (80020dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a8:	e002      	b.n	80020b0 <LoopCopyDataInit>

080020aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ae:	3304      	adds	r3, #4

080020b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b4:	d3f9      	bcc.n	80020aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020b6:	4a0a      	ldr	r2, [pc, #40]	@ (80020e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020b8:	4c0a      	ldr	r4, [pc, #40]	@ (80020e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020bc:	e001      	b.n	80020c2 <LoopFillZerobss>

080020be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c0:	3204      	adds	r2, #4

080020c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c4:	d3fb      	bcc.n	80020be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020c6:	f004 fdf1 	bl	8006cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ca:	f7ff f955 	bl	8001378 <main>
  bx  lr    
 80020ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80020dc:	080096f0 	.word	0x080096f0
  ldr r2, =_sbss
 80020e0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80020e4:	20000494 	.word	0x20000494

080020e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020e8:	e7fe      	b.n	80020e8 <ADC_IRQHandler>
	...

080020ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020f0:	4b0e      	ldr	r3, [pc, #56]	@ (800212c <HAL_Init+0x40>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0d      	ldr	r2, [pc, #52]	@ (800212c <HAL_Init+0x40>)
 80020f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020fc:	4b0b      	ldr	r3, [pc, #44]	@ (800212c <HAL_Init+0x40>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0a      	ldr	r2, [pc, #40]	@ (800212c <HAL_Init+0x40>)
 8002102:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002106:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002108:	4b08      	ldr	r3, [pc, #32]	@ (800212c <HAL_Init+0x40>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a07      	ldr	r2, [pc, #28]	@ (800212c <HAL_Init+0x40>)
 800210e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002114:	2003      	movs	r0, #3
 8002116:	f000 f94f 	bl	80023b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800211a:	200f      	movs	r0, #15
 800211c:	f000 f808 	bl	8002130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002120:	f7ff fd16 	bl	8001b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023c00 	.word	0x40023c00

08002130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002138:	4b12      	ldr	r3, [pc, #72]	@ (8002184 <HAL_InitTick+0x54>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b12      	ldr	r3, [pc, #72]	@ (8002188 <HAL_InitTick+0x58>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	4619      	mov	r1, r3
 8002142:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002146:	fbb3 f3f1 	udiv	r3, r3, r1
 800214a:	fbb2 f3f3 	udiv	r3, r2, r3
 800214e:	4618      	mov	r0, r3
 8002150:	f000 f967 	bl	8002422 <HAL_SYSTICK_Config>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e00e      	b.n	800217c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b0f      	cmp	r3, #15
 8002162:	d80a      	bhi.n	800217a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002164:	2200      	movs	r2, #0
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f000 f92f 	bl	80023ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002170:	4a06      	ldr	r2, [pc, #24]	@ (800218c <HAL_InitTick+0x5c>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	e000      	b.n	800217c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000000 	.word	0x20000000
 8002188:	20000008 	.word	0x20000008
 800218c:	20000004 	.word	0x20000004

08002190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002194:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <HAL_IncTick+0x20>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <HAL_IncTick+0x24>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	4a04      	ldr	r2, [pc, #16]	@ (80021b4 <HAL_IncTick+0x24>)
 80021a2:	6013      	str	r3, [r2, #0]
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000008 	.word	0x20000008
 80021b4:	20000344 	.word	0x20000344

080021b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return uwTick;
 80021bc:	4b03      	ldr	r3, [pc, #12]	@ (80021cc <HAL_GetTick+0x14>)
 80021be:	681b      	ldr	r3, [r3, #0]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	20000344 	.word	0x20000344

080021d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d8:	f7ff ffee 	bl	80021b8 <HAL_GetTick>
 80021dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d005      	beq.n	80021f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002214 <HAL_Delay+0x44>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021f6:	bf00      	nop
 80021f8:	f7ff ffde 	bl	80021b8 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	429a      	cmp	r2, r3
 8002206:	d8f7      	bhi.n	80021f8 <HAL_Delay+0x28>
  {
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000008 	.word	0x20000008

08002218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002228:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <__NVIC_SetPriorityGrouping+0x44>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002234:	4013      	ands	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002240:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002244:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800224a:	4a04      	ldr	r2, [pc, #16]	@ (800225c <__NVIC_SetPriorityGrouping+0x44>)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	60d3      	str	r3, [r2, #12]
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002264:	4b04      	ldr	r3, [pc, #16]	@ (8002278 <__NVIC_GetPriorityGrouping+0x18>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	f003 0307 	and.w	r3, r3, #7
}
 800226e:	4618      	mov	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	2b00      	cmp	r3, #0
 800228c:	db0b      	blt.n	80022a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	f003 021f 	and.w	r2, r3, #31
 8002294:	4907      	ldr	r1, [pc, #28]	@ (80022b4 <__NVIC_EnableIRQ+0x38>)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	2001      	movs	r0, #1
 800229e:	fa00 f202 	lsl.w	r2, r0, r2
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000e100 	.word	0xe000e100

080022b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	6039      	str	r1, [r7, #0]
 80022c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	db0a      	blt.n	80022e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	490c      	ldr	r1, [pc, #48]	@ (8002304 <__NVIC_SetPriority+0x4c>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	0112      	lsls	r2, r2, #4
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	440b      	add	r3, r1
 80022dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e0:	e00a      	b.n	80022f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4908      	ldr	r1, [pc, #32]	@ (8002308 <__NVIC_SetPriority+0x50>)
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	3b04      	subs	r3, #4
 80022f0:	0112      	lsls	r2, r2, #4
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	440b      	add	r3, r1
 80022f6:	761a      	strb	r2, [r3, #24]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000e100 	.word	0xe000e100
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800230c:	b480      	push	{r7}
 800230e:	b089      	sub	sp, #36	@ 0x24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f1c3 0307 	rsb	r3, r3, #7
 8002326:	2b04      	cmp	r3, #4
 8002328:	bf28      	it	cs
 800232a:	2304      	movcs	r3, #4
 800232c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3304      	adds	r3, #4
 8002332:	2b06      	cmp	r3, #6
 8002334:	d902      	bls.n	800233c <NVIC_EncodePriority+0x30>
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3b03      	subs	r3, #3
 800233a:	e000      	b.n	800233e <NVIC_EncodePriority+0x32>
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	f04f 32ff 	mov.w	r2, #4294967295
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43da      	mvns	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	401a      	ands	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002354:	f04f 31ff 	mov.w	r1, #4294967295
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fa01 f303 	lsl.w	r3, r1, r3
 800235e:	43d9      	mvns	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	4313      	orrs	r3, r2
         );
}
 8002366:	4618      	mov	r0, r3
 8002368:	3724      	adds	r7, #36	@ 0x24
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002384:	d301      	bcc.n	800238a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002386:	2301      	movs	r3, #1
 8002388:	e00f      	b.n	80023aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800238a:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <SysTick_Config+0x40>)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3b01      	subs	r3, #1
 8002390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002392:	210f      	movs	r1, #15
 8002394:	f04f 30ff 	mov.w	r0, #4294967295
 8002398:	f7ff ff8e 	bl	80022b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800239c:	4b05      	ldr	r3, [pc, #20]	@ (80023b4 <SysTick_Config+0x40>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a2:	4b04      	ldr	r3, [pc, #16]	@ (80023b4 <SysTick_Config+0x40>)
 80023a4:	2207      	movs	r2, #7
 80023a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	e000e010 	.word	0xe000e010

080023b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ff29 	bl	8002218 <__NVIC_SetPriorityGrouping>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b086      	sub	sp, #24
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4603      	mov	r3, r0
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e0:	f7ff ff3e 	bl	8002260 <__NVIC_GetPriorityGrouping>
 80023e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	6978      	ldr	r0, [r7, #20]
 80023ec:	f7ff ff8e 	bl	800230c <NVIC_EncodePriority>
 80023f0:	4602      	mov	r2, r0
 80023f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff5d 	bl	80022b8 <__NVIC_SetPriority>
}
 80023fe:	bf00      	nop
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	4603      	mov	r3, r0
 800240e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff31 	bl	800227c <__NVIC_EnableIRQ>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ffa2 	bl	8002374 <SysTick_Config>
 8002430:	4603      	mov	r3, r0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b084      	sub	sp, #16
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002446:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002448:	f7ff feb6 	bl	80021b8 <HAL_GetTick>
 800244c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d008      	beq.n	800246c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2280      	movs	r2, #128	@ 0x80
 800245e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e052      	b.n	8002512 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0216 	bic.w	r2, r2, #22
 800247a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800248a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002490:	2b00      	cmp	r3, #0
 8002492:	d103      	bne.n	800249c <HAL_DMA_Abort+0x62>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0208 	bic.w	r2, r2, #8
 80024aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0201 	bic.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024bc:	e013      	b.n	80024e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024be:	f7ff fe7b 	bl	80021b8 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b05      	cmp	r3, #5
 80024ca:	d90c      	bls.n	80024e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2220      	movs	r2, #32
 80024d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2203      	movs	r2, #3
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e015      	b.n	8002512 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1e4      	bne.n	80024be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f8:	223f      	movs	r2, #63	@ 0x3f
 80024fa:	409a      	lsls	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d004      	beq.n	8002538 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2280      	movs	r2, #128	@ 0x80
 8002532:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e00c      	b.n	8002552 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2205      	movs	r2, #5
 800253c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	@ 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	e159      	b.n	8002830 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800257c:	2201      	movs	r2, #1
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	429a      	cmp	r2, r3
 8002596:	f040 8148 	bne.w	800282a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d005      	beq.n	80025b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d130      	bne.n	8002614 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	2203      	movs	r2, #3
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025e8:	2201      	movs	r2, #1
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 0201 	and.w	r2, r3, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	2b03      	cmp	r3, #3
 800261e:	d017      	beq.n	8002650 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	2203      	movs	r2, #3
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d123      	bne.n	80026a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	08da      	lsrs	r2, r3, #3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3208      	adds	r2, #8
 8002664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	220f      	movs	r2, #15
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	08da      	lsrs	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3208      	adds	r2, #8
 800269e:	69b9      	ldr	r1, [r7, #24]
 80026a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0203 	and.w	r2, r3, #3
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80a2 	beq.w	800282a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4b57      	ldr	r3, [pc, #348]	@ (8002848 <HAL_GPIO_Init+0x2e8>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	4a56      	ldr	r2, [pc, #344]	@ (8002848 <HAL_GPIO_Init+0x2e8>)
 80026f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026f6:	4b54      	ldr	r3, [pc, #336]	@ (8002848 <HAL_GPIO_Init+0x2e8>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002702:	4a52      	ldr	r2, [pc, #328]	@ (800284c <HAL_GPIO_Init+0x2ec>)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	089b      	lsrs	r3, r3, #2
 8002708:	3302      	adds	r3, #2
 800270a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	220f      	movs	r2, #15
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a49      	ldr	r2, [pc, #292]	@ (8002850 <HAL_GPIO_Init+0x2f0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d019      	beq.n	8002762 <HAL_GPIO_Init+0x202>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a48      	ldr	r2, [pc, #288]	@ (8002854 <HAL_GPIO_Init+0x2f4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d013      	beq.n	800275e <HAL_GPIO_Init+0x1fe>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a47      	ldr	r2, [pc, #284]	@ (8002858 <HAL_GPIO_Init+0x2f8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00d      	beq.n	800275a <HAL_GPIO_Init+0x1fa>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a46      	ldr	r2, [pc, #280]	@ (800285c <HAL_GPIO_Init+0x2fc>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d007      	beq.n	8002756 <HAL_GPIO_Init+0x1f6>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a45      	ldr	r2, [pc, #276]	@ (8002860 <HAL_GPIO_Init+0x300>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d101      	bne.n	8002752 <HAL_GPIO_Init+0x1f2>
 800274e:	2304      	movs	r3, #4
 8002750:	e008      	b.n	8002764 <HAL_GPIO_Init+0x204>
 8002752:	2307      	movs	r3, #7
 8002754:	e006      	b.n	8002764 <HAL_GPIO_Init+0x204>
 8002756:	2303      	movs	r3, #3
 8002758:	e004      	b.n	8002764 <HAL_GPIO_Init+0x204>
 800275a:	2302      	movs	r3, #2
 800275c:	e002      	b.n	8002764 <HAL_GPIO_Init+0x204>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_GPIO_Init+0x204>
 8002762:	2300      	movs	r3, #0
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	f002 0203 	and.w	r2, r2, #3
 800276a:	0092      	lsls	r2, r2, #2
 800276c:	4093      	lsls	r3, r2
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002774:	4935      	ldr	r1, [pc, #212]	@ (800284c <HAL_GPIO_Init+0x2ec>)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	3302      	adds	r3, #2
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002782:	4b38      	ldr	r3, [pc, #224]	@ (8002864 <HAL_GPIO_Init+0x304>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002864 <HAL_GPIO_Init+0x304>)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002864 <HAL_GPIO_Init+0x304>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027d0:	4a24      	ldr	r2, [pc, #144]	@ (8002864 <HAL_GPIO_Init+0x304>)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027d6:	4b23      	ldr	r3, [pc, #140]	@ (8002864 <HAL_GPIO_Init+0x304>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002864 <HAL_GPIO_Init+0x304>)
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002800:	4b18      	ldr	r3, [pc, #96]	@ (8002864 <HAL_GPIO_Init+0x304>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002824:	4a0f      	ldr	r2, [pc, #60]	@ (8002864 <HAL_GPIO_Init+0x304>)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3301      	adds	r3, #1
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b0f      	cmp	r3, #15
 8002834:	f67f aea2 	bls.w	800257c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002838:	bf00      	nop
 800283a:	bf00      	nop
 800283c:	3724      	adds	r7, #36	@ 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800
 800284c:	40013800 	.word	0x40013800
 8002850:	40020000 	.word	0x40020000
 8002854:	40020400 	.word	0x40020400
 8002858:	40020800 	.word	0x40020800
 800285c:	40020c00 	.word	0x40020c00
 8002860:	40021000 	.word	0x40021000
 8002864:	40013c00 	.word	0x40013c00

08002868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	807b      	strh	r3, [r7, #2]
 8002874:	4613      	mov	r3, r2
 8002876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002878:	787b      	ldrb	r3, [r7, #1]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800287e:	887a      	ldrh	r2, [r7, #2]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002884:	e003      	b.n	800288e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002886:	887b      	ldrh	r3, [r7, #2]
 8002888:	041a      	lsls	r2, r3, #16
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	619a      	str	r2, [r3, #24]
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e12b      	b.n	8002b06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff f96c 	bl	8001ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2224      	movs	r2, #36	@ 0x24
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002900:	f001 fc10 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8002904:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4a81      	ldr	r2, [pc, #516]	@ (8002b10 <HAL_I2C_Init+0x274>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d807      	bhi.n	8002920 <HAL_I2C_Init+0x84>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4a80      	ldr	r2, [pc, #512]	@ (8002b14 <HAL_I2C_Init+0x278>)
 8002914:	4293      	cmp	r3, r2
 8002916:	bf94      	ite	ls
 8002918:	2301      	movls	r3, #1
 800291a:	2300      	movhi	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	e006      	b.n	800292e <HAL_I2C_Init+0x92>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a7d      	ldr	r2, [pc, #500]	@ (8002b18 <HAL_I2C_Init+0x27c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	bf94      	ite	ls
 8002928:	2301      	movls	r3, #1
 800292a:	2300      	movhi	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e0e7      	b.n	8002b06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4a78      	ldr	r2, [pc, #480]	@ (8002b1c <HAL_I2C_Init+0x280>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	0c9b      	lsrs	r3, r3, #18
 8002940:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	430a      	orrs	r2, r1
 8002954:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4a6a      	ldr	r2, [pc, #424]	@ (8002b10 <HAL_I2C_Init+0x274>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d802      	bhi.n	8002970 <HAL_I2C_Init+0xd4>
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	3301      	adds	r3, #1
 800296e:	e009      	b.n	8002984 <HAL_I2C_Init+0xe8>
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002976:	fb02 f303 	mul.w	r3, r2, r3
 800297a:	4a69      	ldr	r2, [pc, #420]	@ (8002b20 <HAL_I2C_Init+0x284>)
 800297c:	fba2 2303 	umull	r2, r3, r2, r3
 8002980:	099b      	lsrs	r3, r3, #6
 8002982:	3301      	adds	r3, #1
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	430b      	orrs	r3, r1
 800298a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002996:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	495c      	ldr	r1, [pc, #368]	@ (8002b10 <HAL_I2C_Init+0x274>)
 80029a0:	428b      	cmp	r3, r1
 80029a2:	d819      	bhi.n	80029d8 <HAL_I2C_Init+0x13c>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	1e59      	subs	r1, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80029b2:	1c59      	adds	r1, r3, #1
 80029b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029b8:	400b      	ands	r3, r1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HAL_I2C_Init+0x138>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1e59      	subs	r1, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029cc:	3301      	adds	r3, #1
 80029ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d2:	e051      	b.n	8002a78 <HAL_I2C_Init+0x1dc>
 80029d4:	2304      	movs	r3, #4
 80029d6:	e04f      	b.n	8002a78 <HAL_I2C_Init+0x1dc>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d111      	bne.n	8002a04 <HAL_I2C_Init+0x168>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1e58      	subs	r0, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6859      	ldr	r1, [r3, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	440b      	add	r3, r1
 80029ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f2:	3301      	adds	r3, #1
 80029f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	bf0c      	ite	eq
 80029fc:	2301      	moveq	r3, #1
 80029fe:	2300      	movne	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	e012      	b.n	8002a2a <HAL_I2C_Init+0x18e>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1e58      	subs	r0, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	0099      	lsls	r1, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_Init+0x196>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e022      	b.n	8002a78 <HAL_I2C_Init+0x1dc>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10e      	bne.n	8002a58 <HAL_I2C_Init+0x1bc>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1e58      	subs	r0, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6859      	ldr	r1, [r3, #4]
 8002a42:	460b      	mov	r3, r1
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	440b      	add	r3, r1
 8002a48:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a56:	e00f      	b.n	8002a78 <HAL_I2C_Init+0x1dc>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1e58      	subs	r0, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	0099      	lsls	r1, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	6809      	ldr	r1, [r1, #0]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002aa6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6911      	ldr	r1, [r2, #16]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68d2      	ldr	r2, [r2, #12]
 8002ab2:	4311      	orrs	r1, r2
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	000186a0 	.word	0x000186a0
 8002b14:	001e847f 	.word	0x001e847f
 8002b18:	003d08ff 	.word	0x003d08ff
 8002b1c:	431bde83 	.word	0x431bde83
 8002b20:	10624dd3 	.word	0x10624dd3

08002b24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	607a      	str	r2, [r7, #4]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	460b      	mov	r3, r1
 8002b32:	817b      	strh	r3, [r7, #10]
 8002b34:	4613      	mov	r3, r2
 8002b36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b38:	f7ff fb3e 	bl	80021b8 <HAL_GetTick>
 8002b3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	f040 80e0 	bne.w	8002d0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	2319      	movs	r3, #25
 8002b52:	2201      	movs	r2, #1
 8002b54:	4970      	ldr	r1, [pc, #448]	@ (8002d18 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 fc7e 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b62:	2302      	movs	r3, #2
 8002b64:	e0d3      	b.n	8002d0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_I2C_Master_Transmit+0x50>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e0cc      	b.n	8002d0e <HAL_I2C_Master_Transmit+0x1ea>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d007      	beq.n	8002b9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 0201 	orr.w	r2, r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ba8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2221      	movs	r2, #33	@ 0x21
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	893a      	ldrh	r2, [r7, #8]
 8002bca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4a50      	ldr	r2, [pc, #320]	@ (8002d1c <HAL_I2C_Master_Transmit+0x1f8>)
 8002bda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bdc:	8979      	ldrh	r1, [r7, #10]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	6a3a      	ldr	r2, [r7, #32]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 face 	bl	8003184 <I2C_MasterRequestWrite>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e08d      	b.n	8002d0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c08:	e066      	b.n	8002cd8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	6a39      	ldr	r1, [r7, #32]
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fd3c 	bl	800368c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00d      	beq.n	8002c36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d107      	bne.n	8002c32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e06b      	b.n	8002d0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3a:	781a      	ldrb	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d11b      	bne.n	8002cac <HAL_I2C_Master_Transmit+0x188>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d017      	beq.n	8002cac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c80:	781a      	ldrb	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	6a39      	ldr	r1, [r7, #32]
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 fd33 	bl	800371c <I2C_WaitOnBTFFlagUntilTimeout>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00d      	beq.n	8002cd8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d107      	bne.n	8002cd4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cd2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e01a      	b.n	8002d0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d194      	bne.n	8002c0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e000      	b.n	8002d0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d0c:	2302      	movs	r3, #2
  }
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	00100002 	.word	0x00100002
 8002d1c:	ffff0000 	.word	0xffff0000

08002d20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08c      	sub	sp, #48	@ 0x30
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	4608      	mov	r0, r1
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4603      	mov	r3, r0
 8002d30:	817b      	strh	r3, [r7, #10]
 8002d32:	460b      	mov	r3, r1
 8002d34:	813b      	strh	r3, [r7, #8]
 8002d36:	4613      	mov	r3, r2
 8002d38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d3a:	f7ff fa3d 	bl	80021b8 <HAL_GetTick>
 8002d3e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	f040 8214 	bne.w	8003176 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	2319      	movs	r3, #25
 8002d54:	2201      	movs	r2, #1
 8002d56:	497b      	ldr	r1, [pc, #492]	@ (8002f44 <HAL_I2C_Mem_Read+0x224>)
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fb7d 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002d64:	2302      	movs	r3, #2
 8002d66:	e207      	b.n	8003178 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_I2C_Mem_Read+0x56>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e200      	b.n	8003178 <HAL_I2C_Mem_Read+0x458>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d007      	beq.n	8002d9c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002daa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2222      	movs	r2, #34	@ 0x22
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2240      	movs	r2, #64	@ 0x40
 8002db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dc6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002dcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4a5b      	ldr	r2, [pc, #364]	@ (8002f48 <HAL_I2C_Mem_Read+0x228>)
 8002ddc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dde:	88f8      	ldrh	r0, [r7, #6]
 8002de0:	893a      	ldrh	r2, [r7, #8]
 8002de2:	8979      	ldrh	r1, [r7, #10]
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	4603      	mov	r3, r0
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 fa4a 	bl	8003288 <I2C_RequestMemoryRead>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e1bc      	b.n	8003178 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d113      	bne.n	8002e2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e06:	2300      	movs	r3, #0
 8002e08:	623b      	str	r3, [r7, #32]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	623b      	str	r3, [r7, #32]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	623b      	str	r3, [r7, #32]
 8002e1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	e190      	b.n	8003150 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d11b      	bne.n	8002e6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	61fb      	str	r3, [r7, #28]
 8002e5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	e170      	b.n	8003150 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d11b      	bne.n	8002eae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e96:	2300      	movs	r3, #0
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	e150      	b.n	8003150 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ec4:	e144      	b.n	8003150 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	f200 80f1 	bhi.w	80030b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d123      	bne.n	8002f20 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fc65 	bl	80037ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e145      	b.n	8003178 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f1e:	e117      	b.n	8003150 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d14e      	bne.n	8002fc6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4906      	ldr	r1, [pc, #24]	@ (8002f4c <HAL_I2C_Mem_Read+0x22c>)
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 fa90 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e11a      	b.n	8003178 <HAL_I2C_Mem_Read+0x458>
 8002f42:	bf00      	nop
 8002f44:	00100002 	.word	0x00100002
 8002f48:	ffff0000 	.word	0xffff0000
 8002f4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fc4:	e0c4      	b.n	8003150 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fcc:	2200      	movs	r2, #0
 8002fce:	496c      	ldr	r1, [pc, #432]	@ (8003180 <HAL_I2C_Mem_Read+0x460>)
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fa41 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0cb      	b.n	8003178 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691a      	ldr	r2, [r3, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003018:	b29b      	uxth	r3, r3
 800301a:	3b01      	subs	r3, #1
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003028:	2200      	movs	r2, #0
 800302a:	4955      	ldr	r1, [pc, #340]	@ (8003180 <HAL_I2C_Mem_Read+0x460>)
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fa13 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e09d      	b.n	8003178 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800304a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030b0:	e04e      	b.n	8003150 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 fb78 	bl	80037ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e058      	b.n	8003178 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b04      	cmp	r3, #4
 8003104:	d124      	bne.n	8003150 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310a:	2b03      	cmp	r3, #3
 800310c:	d107      	bne.n	800311e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800311c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003154:	2b00      	cmp	r3, #0
 8003156:	f47f aeb6 	bne.w	8002ec6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	e000      	b.n	8003178 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003176:	2302      	movs	r3, #2
  }
}
 8003178:	4618      	mov	r0, r3
 800317a:	3728      	adds	r7, #40	@ 0x28
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	00010004 	.word	0x00010004

08003184 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af02      	add	r7, sp, #8
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	460b      	mov	r3, r1
 8003192:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003198:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d006      	beq.n	80031ae <I2C_MasterRequestWrite+0x2a>
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d003      	beq.n	80031ae <I2C_MasterRequestWrite+0x2a>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031ac:	d108      	bne.n	80031c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	e00b      	b.n	80031d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c4:	2b12      	cmp	r3, #18
 80031c6:	d107      	bne.n	80031d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 f937 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00d      	beq.n	800320c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031fe:	d103      	bne.n	8003208 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003206:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e035      	b.n	8003278 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003214:	d108      	bne.n	8003228 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003216:	897b      	ldrh	r3, [r7, #10]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	461a      	mov	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003224:	611a      	str	r2, [r3, #16]
 8003226:	e01b      	b.n	8003260 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003228:	897b      	ldrh	r3, [r7, #10]
 800322a:	11db      	asrs	r3, r3, #7
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f003 0306 	and.w	r3, r3, #6
 8003232:	b2db      	uxtb	r3, r3
 8003234:	f063 030f 	orn	r3, r3, #15
 8003238:	b2da      	uxtb	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	490e      	ldr	r1, [pc, #56]	@ (8003280 <I2C_MasterRequestWrite+0xfc>)
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f980 	bl	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e010      	b.n	8003278 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003256:	897b      	ldrh	r3, [r7, #10]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4907      	ldr	r1, [pc, #28]	@ (8003284 <I2C_MasterRequestWrite+0x100>)
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f970 	bl	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	00010008 	.word	0x00010008
 8003284:	00010002 	.word	0x00010002

08003288 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	4608      	mov	r0, r1
 8003292:	4611      	mov	r1, r2
 8003294:	461a      	mov	r2, r3
 8003296:	4603      	mov	r3, r0
 8003298:	817b      	strh	r3, [r7, #10]
 800329a:	460b      	mov	r3, r1
 800329c:	813b      	strh	r3, [r7, #8]
 800329e:	4613      	mov	r3, r2
 80032a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f8c2 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00d      	beq.n	80032f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032e8:	d103      	bne.n	80032f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e0aa      	b.n	800344c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032f6:	897b      	ldrh	r3, [r7, #10]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003304:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	6a3a      	ldr	r2, [r7, #32]
 800330a:	4952      	ldr	r1, [pc, #328]	@ (8003454 <I2C_RequestMemoryRead+0x1cc>)
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f91d 	bl	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e097      	b.n	800344c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003334:	6a39      	ldr	r1, [r7, #32]
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f9a8 	bl	800368c <I2C_WaitOnTXEFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00d      	beq.n	800335e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	2b04      	cmp	r3, #4
 8003348:	d107      	bne.n	800335a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003358:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e076      	b.n	800344c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d105      	bne.n	8003370 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003364:	893b      	ldrh	r3, [r7, #8]
 8003366:	b2da      	uxtb	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	611a      	str	r2, [r3, #16]
 800336e:	e021      	b.n	80033b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003370:	893b      	ldrh	r3, [r7, #8]
 8003372:	0a1b      	lsrs	r3, r3, #8
 8003374:	b29b      	uxth	r3, r3
 8003376:	b2da      	uxtb	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800337e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003380:	6a39      	ldr	r1, [r7, #32]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f982 	bl	800368c <I2C_WaitOnTXEFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00d      	beq.n	80033aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003392:	2b04      	cmp	r3, #4
 8003394:	d107      	bne.n	80033a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e050      	b.n	800344c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033aa:	893b      	ldrh	r3, [r7, #8]
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b6:	6a39      	ldr	r1, [r7, #32]
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f967 	bl	800368c <I2C_WaitOnTXEFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00d      	beq.n	80033e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d107      	bne.n	80033dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e035      	b.n	800344c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 f82b 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00d      	beq.n	8003424 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003412:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003416:	d103      	bne.n	8003420 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800341e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e013      	b.n	800344c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003424:	897b      	ldrh	r3, [r7, #10]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	b2da      	uxtb	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003436:	6a3a      	ldr	r2, [r7, #32]
 8003438:	4906      	ldr	r1, [pc, #24]	@ (8003454 <I2C_RequestMemoryRead+0x1cc>)
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f886 	bl	800354c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	00010002 	.word	0x00010002

08003458 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	603b      	str	r3, [r7, #0]
 8003464:	4613      	mov	r3, r2
 8003466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003468:	e048      	b.n	80034fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003470:	d044      	beq.n	80034fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003472:	f7fe fea1 	bl	80021b8 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d302      	bcc.n	8003488 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d139      	bne.n	80034fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	0c1b      	lsrs	r3, r3, #16
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b01      	cmp	r3, #1
 8003490:	d10d      	bne.n	80034ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	43da      	mvns	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	4013      	ands	r3, r2
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf0c      	ite	eq
 80034a4:	2301      	moveq	r3, #1
 80034a6:	2300      	movne	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	e00c      	b.n	80034c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	43da      	mvns	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4013      	ands	r3, r2
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bf0c      	ite	eq
 80034c0:	2301      	moveq	r3, #1
 80034c2:	2300      	movne	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	461a      	mov	r2, r3
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d116      	bne.n	80034fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e8:	f043 0220 	orr.w	r2, r3, #32
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e023      	b.n	8003544 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	0c1b      	lsrs	r3, r3, #16
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d10d      	bne.n	8003522 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	43da      	mvns	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4013      	ands	r3, r2
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	bf0c      	ite	eq
 8003518:	2301      	moveq	r3, #1
 800351a:	2300      	movne	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	461a      	mov	r2, r3
 8003520:	e00c      	b.n	800353c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	43da      	mvns	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4013      	ands	r3, r2
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf0c      	ite	eq
 8003534:	2301      	moveq	r3, #1
 8003536:	2300      	movne	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	429a      	cmp	r2, r3
 8003540:	d093      	beq.n	800346a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800355a:	e071      	b.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800356a:	d123      	bne.n	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800357a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003584:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a0:	f043 0204 	orr.w	r2, r3, #4
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e067      	b.n	8003684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d041      	beq.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035bc:	f7fe fdfc 	bl	80021b8 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d302      	bcc.n	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d136      	bne.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	0c1b      	lsrs	r3, r3, #16
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d10c      	bne.n	80035f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	43da      	mvns	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4013      	ands	r3, r2
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bf14      	ite	ne
 80035ee:	2301      	movne	r3, #1
 80035f0:	2300      	moveq	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	e00b      	b.n	800360e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	43da      	mvns	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4013      	ands	r3, r2
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf14      	ite	ne
 8003608:	2301      	movne	r3, #1
 800360a:	2300      	moveq	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d016      	beq.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362c:	f043 0220 	orr.w	r2, r3, #32
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e021      	b.n	8003684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	0c1b      	lsrs	r3, r3, #16
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b01      	cmp	r3, #1
 8003648:	d10c      	bne.n	8003664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	43da      	mvns	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4013      	ands	r3, r2
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf14      	ite	ne
 800365c:	2301      	movne	r3, #1
 800365e:	2300      	moveq	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	e00b      	b.n	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	43da      	mvns	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4013      	ands	r3, r2
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	bf14      	ite	ne
 8003676:	2301      	movne	r3, #1
 8003678:	2300      	moveq	r3, #0
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	f47f af6d 	bne.w	800355c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003698:	e034      	b.n	8003704 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f8e3 	bl	8003866 <I2C_IsAcknowledgeFailed>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e034      	b.n	8003714 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d028      	beq.n	8003704 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b2:	f7fe fd81 	bl	80021b8 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d302      	bcc.n	80036c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d11d      	bne.n	8003704 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d2:	2b80      	cmp	r3, #128	@ 0x80
 80036d4:	d016      	beq.n	8003704 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	f043 0220 	orr.w	r2, r3, #32
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e007      	b.n	8003714 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800370e:	2b80      	cmp	r3, #128	@ 0x80
 8003710:	d1c3      	bne.n	800369a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003728:	e034      	b.n	8003794 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f89b 	bl	8003866 <I2C_IsAcknowledgeFailed>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e034      	b.n	80037a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d028      	beq.n	8003794 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003742:	f7fe fd39 	bl	80021b8 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	429a      	cmp	r2, r3
 8003750:	d302      	bcc.n	8003758 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d11d      	bne.n	8003794 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b04      	cmp	r3, #4
 8003764:	d016      	beq.n	8003794 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003780:	f043 0220 	orr.w	r2, r3, #32
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e007      	b.n	80037a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d1c3      	bne.n	800372a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037b8:	e049      	b.n	800384e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b10      	cmp	r3, #16
 80037c6:	d119      	bne.n	80037fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0210 	mvn.w	r2, #16
 80037d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e030      	b.n	800385e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fc:	f7fe fcdc 	bl	80021b8 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	429a      	cmp	r2, r3
 800380a:	d302      	bcc.n	8003812 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d11d      	bne.n	800384e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800381c:	2b40      	cmp	r3, #64	@ 0x40
 800381e:	d016      	beq.n	800384e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	f043 0220 	orr.w	r2, r3, #32
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e007      	b.n	800385e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003858:	2b40      	cmp	r3, #64	@ 0x40
 800385a:	d1ae      	bne.n	80037ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003878:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800387c:	d11b      	bne.n	80038b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003886:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a2:	f043 0204 	orr.w	r2, r3, #4
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e267      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d075      	beq.n	80039ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038e2:	4b88      	ldr	r3, [pc, #544]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d00c      	beq.n	8003908 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ee:	4b85      	ldr	r3, [pc, #532]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d112      	bne.n	8003920 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038fa:	4b82      	ldr	r3, [pc, #520]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003902:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003906:	d10b      	bne.n	8003920 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003908:	4b7e      	ldr	r3, [pc, #504]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d05b      	beq.n	80039cc <HAL_RCC_OscConfig+0x108>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d157      	bne.n	80039cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e242      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003928:	d106      	bne.n	8003938 <HAL_RCC_OscConfig+0x74>
 800392a:	4b76      	ldr	r3, [pc, #472]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a75      	ldr	r2, [pc, #468]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e01d      	b.n	8003974 <HAL_RCC_OscConfig+0xb0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003940:	d10c      	bne.n	800395c <HAL_RCC_OscConfig+0x98>
 8003942:	4b70      	ldr	r3, [pc, #448]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a6f      	ldr	r2, [pc, #444]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	4b6d      	ldr	r3, [pc, #436]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a6c      	ldr	r2, [pc, #432]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e00b      	b.n	8003974 <HAL_RCC_OscConfig+0xb0>
 800395c:	4b69      	ldr	r3, [pc, #420]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a68      	ldr	r2, [pc, #416]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	4b66      	ldr	r3, [pc, #408]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a65      	ldr	r2, [pc, #404]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 800396e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d013      	beq.n	80039a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7fe fc1c 	bl	80021b8 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003984:	f7fe fc18 	bl	80021b8 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	@ 0x64
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e207      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003996:	4b5b      	ldr	r3, [pc, #364]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0xc0>
 80039a2:	e014      	b.n	80039ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fe fc08 	bl	80021b8 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ac:	f7fe fc04 	bl	80021b8 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	@ 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e1f3      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039be:	4b51      	ldr	r3, [pc, #324]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0xe8>
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d063      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039da:	4b4a      	ldr	r3, [pc, #296]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e6:	4b47      	ldr	r3, [pc, #284]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d11c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039f2:	4b44      	ldr	r3, [pc, #272]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d116      	bne.n	8003a2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fe:	4b41      	ldr	r3, [pc, #260]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <HAL_RCC_OscConfig+0x152>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d001      	beq.n	8003a16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e1c7      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a16:	4b3b      	ldr	r3, [pc, #236]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4937      	ldr	r1, [pc, #220]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2a:	e03a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d020      	beq.n	8003a76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a34:	4b34      	ldr	r3, [pc, #208]	@ (8003b08 <HAL_RCC_OscConfig+0x244>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3a:	f7fe fbbd 	bl	80021b8 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a42:	f7fe fbb9 	bl	80021b8 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e1a8      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a54:	4b2b      	ldr	r3, [pc, #172]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a60:	4b28      	ldr	r3, [pc, #160]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4925      	ldr	r1, [pc, #148]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	600b      	str	r3, [r1, #0]
 8003a74:	e015      	b.n	8003aa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a76:	4b24      	ldr	r3, [pc, #144]	@ (8003b08 <HAL_RCC_OscConfig+0x244>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fe fb9c 	bl	80021b8 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a84:	f7fe fb98 	bl	80021b8 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e187      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a96:	4b1b      	ldr	r3, [pc, #108]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d036      	beq.n	8003b1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d016      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ab6:	4b15      	ldr	r3, [pc, #84]	@ (8003b0c <HAL_RCC_OscConfig+0x248>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abc:	f7fe fb7c 	bl	80021b8 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac4:	f7fe fb78 	bl	80021b8 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e167      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x200>
 8003ae2:	e01b      	b.n	8003b1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae4:	4b09      	ldr	r3, [pc, #36]	@ (8003b0c <HAL_RCC_OscConfig+0x248>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aea:	f7fe fb65 	bl	80021b8 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af0:	e00e      	b.n	8003b10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af2:	f7fe fb61 	bl	80021b8 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d907      	bls.n	8003b10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e150      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
 8003b04:	40023800 	.word	0x40023800
 8003b08:	42470000 	.word	0x42470000
 8003b0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b10:	4b88      	ldr	r3, [pc, #544]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003b12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1ea      	bne.n	8003af2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8097 	beq.w	8003c58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b2e:	4b81      	ldr	r3, [pc, #516]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10f      	bne.n	8003b5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	4b7d      	ldr	r3, [pc, #500]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b42:	4a7c      	ldr	r2, [pc, #496]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b4a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b56:	2301      	movs	r3, #1
 8003b58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5a:	4b77      	ldr	r3, [pc, #476]	@ (8003d38 <HAL_RCC_OscConfig+0x474>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d118      	bne.n	8003b98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b66:	4b74      	ldr	r3, [pc, #464]	@ (8003d38 <HAL_RCC_OscConfig+0x474>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a73      	ldr	r2, [pc, #460]	@ (8003d38 <HAL_RCC_OscConfig+0x474>)
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b72:	f7fe fb21 	bl	80021b8 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7a:	f7fe fb1d 	bl	80021b8 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e10c      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8c:	4b6a      	ldr	r3, [pc, #424]	@ (8003d38 <HAL_RCC_OscConfig+0x474>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d106      	bne.n	8003bae <HAL_RCC_OscConfig+0x2ea>
 8003ba0:	4b64      	ldr	r3, [pc, #400]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba4:	4a63      	ldr	r2, [pc, #396]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bac:	e01c      	b.n	8003be8 <HAL_RCC_OscConfig+0x324>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b05      	cmp	r3, #5
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x30c>
 8003bb6:	4b5f      	ldr	r3, [pc, #380]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bba:	4a5e      	ldr	r2, [pc, #376]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	f043 0304 	orr.w	r3, r3, #4
 8003bc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bc2:	4b5c      	ldr	r3, [pc, #368]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc6:	4a5b      	ldr	r2, [pc, #364]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bce:	e00b      	b.n	8003be8 <HAL_RCC_OscConfig+0x324>
 8003bd0:	4b58      	ldr	r3, [pc, #352]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd4:	4a57      	ldr	r2, [pc, #348]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bdc:	4b55      	ldr	r3, [pc, #340]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be0:	4a54      	ldr	r2, [pc, #336]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003be2:	f023 0304 	bic.w	r3, r3, #4
 8003be6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d015      	beq.n	8003c1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf0:	f7fe fae2 	bl	80021b8 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf8:	f7fe fade 	bl	80021b8 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e0cb      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0e:	4b49      	ldr	r3, [pc, #292]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0ee      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x334>
 8003c1a:	e014      	b.n	8003c46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1c:	f7fe facc 	bl	80021b8 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c22:	e00a      	b.n	8003c3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c24:	f7fe fac8 	bl	80021b8 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e0b5      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1ee      	bne.n	8003c24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d105      	bne.n	8003c58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c4c:	4b39      	ldr	r3, [pc, #228]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c50:	4a38      	ldr	r2, [pc, #224]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80a1 	beq.w	8003da4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c62:	4b34      	ldr	r3, [pc, #208]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d05c      	beq.n	8003d28 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d141      	bne.n	8003cfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c76:	4b31      	ldr	r3, [pc, #196]	@ (8003d3c <HAL_RCC_OscConfig+0x478>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7fe fa9c 	bl	80021b8 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c84:	f7fe fa98 	bl	80021b8 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e087      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c96:	4b27      	ldr	r3, [pc, #156]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69da      	ldr	r2, [r3, #28]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	019b      	lsls	r3, r3, #6
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb8:	085b      	lsrs	r3, r3, #1
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	041b      	lsls	r3, r3, #16
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc4:	061b      	lsls	r3, r3, #24
 8003cc6:	491b      	ldr	r1, [pc, #108]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d3c <HAL_RCC_OscConfig+0x478>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd2:	f7fe fa71 	bl	80021b8 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cda:	f7fe fa6d 	bl	80021b8 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e05c      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cec:	4b11      	ldr	r3, [pc, #68]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f0      	beq.n	8003cda <HAL_RCC_OscConfig+0x416>
 8003cf8:	e054      	b.n	8003da4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfa:	4b10      	ldr	r3, [pc, #64]	@ (8003d3c <HAL_RCC_OscConfig+0x478>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d00:	f7fe fa5a 	bl	80021b8 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d08:	f7fe fa56 	bl	80021b8 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e045      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1a:	4b06      	ldr	r3, [pc, #24]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0x444>
 8003d26:	e03d      	b.n	8003da4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d107      	bne.n	8003d40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e038      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40007000 	.word	0x40007000
 8003d3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d40:	4b1b      	ldr	r3, [pc, #108]	@ (8003db0 <HAL_RCC_OscConfig+0x4ec>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d028      	beq.n	8003da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d121      	bne.n	8003da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d11a      	bne.n	8003da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d70:	4013      	ands	r3, r2
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d111      	bne.n	8003da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d86:	085b      	lsrs	r3, r3, #1
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d107      	bne.n	8003da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800

08003db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0cc      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b68      	ldr	r3, [pc, #416]	@ (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d90c      	bls.n	8003df0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b65      	ldr	r3, [pc, #404]	@ (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dde:	4b63      	ldr	r3, [pc, #396]	@ (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0b8      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d020      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e08:	4b59      	ldr	r3, [pc, #356]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4a58      	ldr	r2, [pc, #352]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e20:	4b53      	ldr	r3, [pc, #332]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4a52      	ldr	r2, [pc, #328]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e2c:	4b50      	ldr	r3, [pc, #320]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	494d      	ldr	r1, [pc, #308]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d044      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d107      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	4b47      	ldr	r3, [pc, #284]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d119      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e07f      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d003      	beq.n	8003e72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d107      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e72:	4b3f      	ldr	r3, [pc, #252]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e06f      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e82:	4b3b      	ldr	r3, [pc, #236]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e067      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e92:	4b37      	ldr	r3, [pc, #220]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f023 0203 	bic.w	r2, r3, #3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4934      	ldr	r1, [pc, #208]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea4:	f7fe f988 	bl	80021b8 <HAL_GetTick>
 8003ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	e00a      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eac:	f7fe f984 	bl	80021b8 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e04f      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec2:	4b2b      	ldr	r3, [pc, #172]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 020c 	and.w	r2, r3, #12
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d1eb      	bne.n	8003eac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed4:	4b25      	ldr	r3, [pc, #148]	@ (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d20c      	bcs.n	8003efc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee2:	4b22      	ldr	r3, [pc, #136]	@ (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eea:	4b20      	ldr	r3, [pc, #128]	@ (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e032      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f08:	4b19      	ldr	r3, [pc, #100]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4916      	ldr	r1, [pc, #88]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f26:	4b12      	ldr	r3, [pc, #72]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	490e      	ldr	r1, [pc, #56]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f3a:	f000 f821 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	4b0b      	ldr	r3, [pc, #44]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	490a      	ldr	r1, [pc, #40]	@ (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003f4c:	5ccb      	ldrb	r3, [r1, r3]
 8003f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f52:	4a09      	ldr	r2, [pc, #36]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f56:	4b09      	ldr	r3, [pc, #36]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fe f8e8 	bl	8002130 <HAL_InitTick>

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40023c00 	.word	0x40023c00
 8003f70:	40023800 	.word	0x40023800
 8003f74:	080092e8 	.word	0x080092e8
 8003f78:	20000000 	.word	0x20000000
 8003f7c:	20000004 	.word	0x20000004

08003f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f84:	b090      	sub	sp, #64	@ 0x40
 8003f86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f98:	4b59      	ldr	r3, [pc, #356]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 030c 	and.w	r3, r3, #12
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d00d      	beq.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x40>
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	f200 80a1 	bhi.w	80040ec <HAL_RCC_GetSysClockFreq+0x16c>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d003      	beq.n	8003fba <HAL_RCC_GetSysClockFreq+0x3a>
 8003fb2:	e09b      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fb4:	4b53      	ldr	r3, [pc, #332]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fb8:	e09b      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fba:	4b53      	ldr	r3, [pc, #332]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fbe:	e098      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fc0:	4b4f      	ldr	r3, [pc, #316]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fc8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fca:	4b4d      	ldr	r3, [pc, #308]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d028      	beq.n	8004028 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	099b      	lsrs	r3, r3, #6
 8003fdc:	2200      	movs	r2, #0
 8003fde:	623b      	str	r3, [r7, #32]
 8003fe0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4b47      	ldr	r3, [pc, #284]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fec:	fb03 f201 	mul.w	r2, r3, r1
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	fb00 f303 	mul.w	r3, r0, r3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	4a43      	ldr	r2, [pc, #268]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ffa:	fba0 1202 	umull	r1, r2, r0, r2
 8003ffe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004000:	460a      	mov	r2, r1
 8004002:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004006:	4413      	add	r3, r2
 8004008:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800400a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400c:	2200      	movs	r2, #0
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	61fa      	str	r2, [r7, #28]
 8004012:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004016:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800401a:	f7fc fe1d 	bl	8000c58 <__aeabi_uldivmod>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4613      	mov	r3, r2
 8004024:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004026:	e053      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004028:	4b35      	ldr	r3, [pc, #212]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x180>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	099b      	lsrs	r3, r3, #6
 800402e:	2200      	movs	r2, #0
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	617a      	str	r2, [r7, #20]
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800403a:	f04f 0b00 	mov.w	fp, #0
 800403e:	4652      	mov	r2, sl
 8004040:	465b      	mov	r3, fp
 8004042:	f04f 0000 	mov.w	r0, #0
 8004046:	f04f 0100 	mov.w	r1, #0
 800404a:	0159      	lsls	r1, r3, #5
 800404c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004050:	0150      	lsls	r0, r2, #5
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	ebb2 080a 	subs.w	r8, r2, sl
 800405a:	eb63 090b 	sbc.w	r9, r3, fp
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800406a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800406e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004072:	ebb2 0408 	subs.w	r4, r2, r8
 8004076:	eb63 0509 	sbc.w	r5, r3, r9
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	00eb      	lsls	r3, r5, #3
 8004084:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004088:	00e2      	lsls	r2, r4, #3
 800408a:	4614      	mov	r4, r2
 800408c:	461d      	mov	r5, r3
 800408e:	eb14 030a 	adds.w	r3, r4, sl
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	eb45 030b 	adc.w	r3, r5, fp
 8004098:	607b      	str	r3, [r7, #4]
 800409a:	f04f 0200 	mov.w	r2, #0
 800409e:	f04f 0300 	mov.w	r3, #0
 80040a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040a6:	4629      	mov	r1, r5
 80040a8:	028b      	lsls	r3, r1, #10
 80040aa:	4621      	mov	r1, r4
 80040ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040b0:	4621      	mov	r1, r4
 80040b2:	028a      	lsls	r2, r1, #10
 80040b4:	4610      	mov	r0, r2
 80040b6:	4619      	mov	r1, r3
 80040b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ba:	2200      	movs	r2, #0
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	60fa      	str	r2, [r7, #12]
 80040c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040c4:	f7fc fdc8 	bl	8000c58 <__aeabi_uldivmod>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4613      	mov	r3, r2
 80040ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x180>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	3301      	adds	r3, #1
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80040e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040ea:	e002      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040ec:	4b05      	ldr	r3, [pc, #20]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x184>)
 80040ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3740      	adds	r7, #64	@ 0x40
 80040f8:	46bd      	mov	sp, r7
 80040fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040fe:	bf00      	nop
 8004100:	40023800 	.word	0x40023800
 8004104:	00f42400 	.word	0x00f42400
 8004108:	017d7840 	.word	0x017d7840

0800410c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004110:	4b03      	ldr	r3, [pc, #12]	@ (8004120 <HAL_RCC_GetHCLKFreq+0x14>)
 8004112:	681b      	ldr	r3, [r3, #0]
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20000000 	.word	0x20000000

08004124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004128:	f7ff fff0 	bl	800410c <HAL_RCC_GetHCLKFreq>
 800412c:	4602      	mov	r2, r0
 800412e:	4b05      	ldr	r3, [pc, #20]	@ (8004144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	0a9b      	lsrs	r3, r3, #10
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	4903      	ldr	r1, [pc, #12]	@ (8004148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800413a:	5ccb      	ldrb	r3, [r1, r3]
 800413c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004140:	4618      	mov	r0, r3
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40023800 	.word	0x40023800
 8004148:	080092f8 	.word	0x080092f8

0800414c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004150:	f7ff ffdc 	bl	800410c <HAL_RCC_GetHCLKFreq>
 8004154:	4602      	mov	r2, r0
 8004156:	4b05      	ldr	r3, [pc, #20]	@ (800416c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	0b5b      	lsrs	r3, r3, #13
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	4903      	ldr	r1, [pc, #12]	@ (8004170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004162:	5ccb      	ldrb	r3, [r1, r3]
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004168:	4618      	mov	r0, r3
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40023800 	.word	0x40023800
 8004170:	080092f8 	.word	0x080092f8

08004174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e041      	b.n	800420a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fd fd5a 	bl	8001c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3304      	adds	r3, #4
 80041b0:	4619      	mov	r1, r3
 80041b2:	4610      	mov	r0, r2
 80041b4:	f000 fbf4 	bl	80049a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e041      	b.n	80042a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d106      	bne.n	800423e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f839 	bl	80042b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3304      	adds	r3, #4
 800424e:	4619      	mov	r1, r3
 8004250:	4610      	mov	r0, r2
 8004252:	f000 fba5 	bl	80049a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <HAL_TIM_PWM_Start+0x24>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b01      	cmp	r3, #1
 80042de:	bf14      	ite	ne
 80042e0:	2301      	movne	r3, #1
 80042e2:	2300      	moveq	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	e022      	b.n	800432e <HAL_TIM_PWM_Start+0x6a>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d109      	bne.n	8004302 <HAL_TIM_PWM_Start+0x3e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	bf14      	ite	ne
 80042fa:	2301      	movne	r3, #1
 80042fc:	2300      	moveq	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	e015      	b.n	800432e <HAL_TIM_PWM_Start+0x6a>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b08      	cmp	r3, #8
 8004306:	d109      	bne.n	800431c <HAL_TIM_PWM_Start+0x58>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	bf14      	ite	ne
 8004314:	2301      	movne	r3, #1
 8004316:	2300      	moveq	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	e008      	b.n	800432e <HAL_TIM_PWM_Start+0x6a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	bf14      	ite	ne
 8004328:	2301      	movne	r3, #1
 800432a:	2300      	moveq	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e068      	b.n	8004408 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d104      	bne.n	8004346 <HAL_TIM_PWM_Start+0x82>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004344:	e013      	b.n	800436e <HAL_TIM_PWM_Start+0xaa>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b04      	cmp	r3, #4
 800434a:	d104      	bne.n	8004356 <HAL_TIM_PWM_Start+0x92>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004354:	e00b      	b.n	800436e <HAL_TIM_PWM_Start+0xaa>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b08      	cmp	r3, #8
 800435a:	d104      	bne.n	8004366 <HAL_TIM_PWM_Start+0xa2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004364:	e003      	b.n	800436e <HAL_TIM_PWM_Start+0xaa>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2202      	movs	r2, #2
 800436a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2201      	movs	r2, #1
 8004374:	6839      	ldr	r1, [r7, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fdc4 	bl	8004f04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a23      	ldr	r2, [pc, #140]	@ (8004410 <HAL_TIM_PWM_Start+0x14c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d107      	bne.n	8004396 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004394:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1d      	ldr	r2, [pc, #116]	@ (8004410 <HAL_TIM_PWM_Start+0x14c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d018      	beq.n	80043d2 <HAL_TIM_PWM_Start+0x10e>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043a8:	d013      	beq.n	80043d2 <HAL_TIM_PWM_Start+0x10e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a19      	ldr	r2, [pc, #100]	@ (8004414 <HAL_TIM_PWM_Start+0x150>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00e      	beq.n	80043d2 <HAL_TIM_PWM_Start+0x10e>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a17      	ldr	r2, [pc, #92]	@ (8004418 <HAL_TIM_PWM_Start+0x154>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d009      	beq.n	80043d2 <HAL_TIM_PWM_Start+0x10e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a16      	ldr	r2, [pc, #88]	@ (800441c <HAL_TIM_PWM_Start+0x158>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d004      	beq.n	80043d2 <HAL_TIM_PWM_Start+0x10e>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a14      	ldr	r2, [pc, #80]	@ (8004420 <HAL_TIM_PWM_Start+0x15c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d111      	bne.n	80043f6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2b06      	cmp	r3, #6
 80043e2:	d010      	beq.n	8004406 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f4:	e007      	b.n	8004406 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0201 	orr.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40010000 	.word	0x40010000
 8004414:	40000400 	.word	0x40000400
 8004418:	40000800 	.word	0x40000800
 800441c:	40000c00 	.word	0x40000c00
 8004420:	40014000 	.word	0x40014000

08004424 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e097      	b.n	8004568 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d106      	bne.n	8004452 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7fd fc21 	bl	8001c94 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2202      	movs	r2, #2
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004468:	f023 0307 	bic.w	r3, r3, #7
 800446c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3304      	adds	r3, #4
 8004476:	4619      	mov	r1, r3
 8004478:	4610      	mov	r0, r2
 800447a:	f000 fa91 	bl	80049a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044a6:	f023 0303 	bic.w	r3, r3, #3
 80044aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	021b      	lsls	r3, r3, #8
 80044b6:	4313      	orrs	r3, r2
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80044c4:	f023 030c 	bic.w	r3, r3, #12
 80044c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	021b      	lsls	r3, r3, #8
 80044e0:	4313      	orrs	r3, r2
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	011a      	lsls	r2, r3, #4
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	031b      	lsls	r3, r3, #12
 80044f4:	4313      	orrs	r3, r2
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004502:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800450a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	4313      	orrs	r3, r2
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004580:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004588:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004590:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004598:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d110      	bne.n	80045c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d102      	bne.n	80045ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80045a6:	7b7b      	ldrb	r3, [r7, #13]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d001      	beq.n	80045b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e069      	b.n	8004684 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045c0:	e031      	b.n	8004626 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d110      	bne.n	80045ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045c8:	7bbb      	ldrb	r3, [r7, #14]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d102      	bne.n	80045d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045ce:	7b3b      	ldrb	r3, [r7, #12]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d001      	beq.n	80045d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e055      	b.n	8004684 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045e8:	e01d      	b.n	8004626 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d108      	bne.n	8004602 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045f0:	7bbb      	ldrb	r3, [r7, #14]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d105      	bne.n	8004602 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045f6:	7b7b      	ldrb	r3, [r7, #13]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d102      	bne.n	8004602 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045fc:	7b3b      	ldrb	r3, [r7, #12]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d001      	beq.n	8004606 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e03e      	b.n	8004684 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2202      	movs	r2, #2
 800460a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2202      	movs	r2, #2
 8004612:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2202      	movs	r2, #2
 800461a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2202      	movs	r2, #2
 8004622:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_TIM_Encoder_Start+0xc4>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2b04      	cmp	r3, #4
 8004630:	d008      	beq.n	8004644 <HAL_TIM_Encoder_Start+0xd4>
 8004632:	e00f      	b.n	8004654 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2201      	movs	r2, #1
 800463a:	2100      	movs	r1, #0
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fc61 	bl	8004f04 <TIM_CCxChannelCmd>
      break;
 8004642:	e016      	b.n	8004672 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2201      	movs	r2, #1
 800464a:	2104      	movs	r1, #4
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fc59 	bl	8004f04 <TIM_CCxChannelCmd>
      break;
 8004652:	e00e      	b.n	8004672 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2201      	movs	r2, #1
 800465a:	2100      	movs	r1, #0
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fc51 	bl	8004f04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2201      	movs	r2, #1
 8004668:	2104      	movs	r1, #4
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fc4a 	bl	8004f04 <TIM_CCxChannelCmd>
      break;
 8004670:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0201 	orr.w	r2, r2, #1
 8004680:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e0ae      	b.n	8004808 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b0c      	cmp	r3, #12
 80046b6:	f200 809f 	bhi.w	80047f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046ba:	a201      	add	r2, pc, #4	@ (adr r2, 80046c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c0:	080046f5 	.word	0x080046f5
 80046c4:	080047f9 	.word	0x080047f9
 80046c8:	080047f9 	.word	0x080047f9
 80046cc:	080047f9 	.word	0x080047f9
 80046d0:	08004735 	.word	0x08004735
 80046d4:	080047f9 	.word	0x080047f9
 80046d8:	080047f9 	.word	0x080047f9
 80046dc:	080047f9 	.word	0x080047f9
 80046e0:	08004777 	.word	0x08004777
 80046e4:	080047f9 	.word	0x080047f9
 80046e8:	080047f9 	.word	0x080047f9
 80046ec:	080047f9 	.word	0x080047f9
 80046f0:	080047b7 	.word	0x080047b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 f9dc 	bl	8004ab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0208 	orr.w	r2, r2, #8
 800470e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0204 	bic.w	r2, r2, #4
 800471e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6999      	ldr	r1, [r3, #24]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	691a      	ldr	r2, [r3, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	619a      	str	r2, [r3, #24]
      break;
 8004732:	e064      	b.n	80047fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68b9      	ldr	r1, [r7, #8]
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fa22 	bl	8004b84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800474e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800475e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6999      	ldr	r1, [r3, #24]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	021a      	lsls	r2, r3, #8
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	619a      	str	r2, [r3, #24]
      break;
 8004774:	e043      	b.n	80047fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fa6d 	bl	8004c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f042 0208 	orr.w	r2, r2, #8
 8004790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0204 	bic.w	r2, r2, #4
 80047a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69d9      	ldr	r1, [r3, #28]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	61da      	str	r2, [r3, #28]
      break;
 80047b4:	e023      	b.n	80047fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68b9      	ldr	r1, [r7, #8]
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fab7 	bl	8004d30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69d9      	ldr	r1, [r3, #28]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	021a      	lsls	r2, r3, #8
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	61da      	str	r2, [r3, #28]
      break;
 80047f6:	e002      	b.n	80047fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	75fb      	strb	r3, [r7, #23]
      break;
 80047fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004806:	7dfb      	ldrb	r3, [r7, #23]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <HAL_TIM_ConfigClockSource+0x1c>
 8004828:	2302      	movs	r3, #2
 800482a:	e0b4      	b.n	8004996 <HAL_TIM_ConfigClockSource+0x186>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800484a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004852:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004864:	d03e      	beq.n	80048e4 <HAL_TIM_ConfigClockSource+0xd4>
 8004866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800486a:	f200 8087 	bhi.w	800497c <HAL_TIM_ConfigClockSource+0x16c>
 800486e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004872:	f000 8086 	beq.w	8004982 <HAL_TIM_ConfigClockSource+0x172>
 8004876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800487a:	d87f      	bhi.n	800497c <HAL_TIM_ConfigClockSource+0x16c>
 800487c:	2b70      	cmp	r3, #112	@ 0x70
 800487e:	d01a      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0xa6>
 8004880:	2b70      	cmp	r3, #112	@ 0x70
 8004882:	d87b      	bhi.n	800497c <HAL_TIM_ConfigClockSource+0x16c>
 8004884:	2b60      	cmp	r3, #96	@ 0x60
 8004886:	d050      	beq.n	800492a <HAL_TIM_ConfigClockSource+0x11a>
 8004888:	2b60      	cmp	r3, #96	@ 0x60
 800488a:	d877      	bhi.n	800497c <HAL_TIM_ConfigClockSource+0x16c>
 800488c:	2b50      	cmp	r3, #80	@ 0x50
 800488e:	d03c      	beq.n	800490a <HAL_TIM_ConfigClockSource+0xfa>
 8004890:	2b50      	cmp	r3, #80	@ 0x50
 8004892:	d873      	bhi.n	800497c <HAL_TIM_ConfigClockSource+0x16c>
 8004894:	2b40      	cmp	r3, #64	@ 0x40
 8004896:	d058      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x13a>
 8004898:	2b40      	cmp	r3, #64	@ 0x40
 800489a:	d86f      	bhi.n	800497c <HAL_TIM_ConfigClockSource+0x16c>
 800489c:	2b30      	cmp	r3, #48	@ 0x30
 800489e:	d064      	beq.n	800496a <HAL_TIM_ConfigClockSource+0x15a>
 80048a0:	2b30      	cmp	r3, #48	@ 0x30
 80048a2:	d86b      	bhi.n	800497c <HAL_TIM_ConfigClockSource+0x16c>
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d060      	beq.n	800496a <HAL_TIM_ConfigClockSource+0x15a>
 80048a8:	2b20      	cmp	r3, #32
 80048aa:	d867      	bhi.n	800497c <HAL_TIM_ConfigClockSource+0x16c>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d05c      	beq.n	800496a <HAL_TIM_ConfigClockSource+0x15a>
 80048b0:	2b10      	cmp	r3, #16
 80048b2:	d05a      	beq.n	800496a <HAL_TIM_ConfigClockSource+0x15a>
 80048b4:	e062      	b.n	800497c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048c6:	f000 fafd 	bl	8004ec4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	609a      	str	r2, [r3, #8]
      break;
 80048e2:	e04f      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048f4:	f000 fae6 	bl	8004ec4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004906:	609a      	str	r2, [r3, #8]
      break;
 8004908:	e03c      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004916:	461a      	mov	r2, r3
 8004918:	f000 fa5a 	bl	8004dd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2150      	movs	r1, #80	@ 0x50
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fab3 	bl	8004e8e <TIM_ITRx_SetConfig>
      break;
 8004928:	e02c      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004936:	461a      	mov	r2, r3
 8004938:	f000 fa79 	bl	8004e2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2160      	movs	r1, #96	@ 0x60
 8004942:	4618      	mov	r0, r3
 8004944:	f000 faa3 	bl	8004e8e <TIM_ITRx_SetConfig>
      break;
 8004948:	e01c      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004956:	461a      	mov	r2, r3
 8004958:	f000 fa3a 	bl	8004dd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2140      	movs	r1, #64	@ 0x40
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fa93 	bl	8004e8e <TIM_ITRx_SetConfig>
      break;
 8004968:	e00c      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4619      	mov	r1, r3
 8004974:	4610      	mov	r0, r2
 8004976:	f000 fa8a 	bl	8004e8e <TIM_ITRx_SetConfig>
      break;
 800497a:	e003      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	73fb      	strb	r3, [r7, #15]
      break;
 8004980:	e000      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004982:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004994:	7bfb      	ldrb	r3, [r7, #15]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a3a      	ldr	r2, [pc, #232]	@ (8004a9c <TIM_Base_SetConfig+0xfc>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00f      	beq.n	80049d8 <TIM_Base_SetConfig+0x38>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049be:	d00b      	beq.n	80049d8 <TIM_Base_SetConfig+0x38>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a37      	ldr	r2, [pc, #220]	@ (8004aa0 <TIM_Base_SetConfig+0x100>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d007      	beq.n	80049d8 <TIM_Base_SetConfig+0x38>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a36      	ldr	r2, [pc, #216]	@ (8004aa4 <TIM_Base_SetConfig+0x104>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d003      	beq.n	80049d8 <TIM_Base_SetConfig+0x38>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a35      	ldr	r2, [pc, #212]	@ (8004aa8 <TIM_Base_SetConfig+0x108>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d108      	bne.n	80049ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a2b      	ldr	r2, [pc, #172]	@ (8004a9c <TIM_Base_SetConfig+0xfc>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d01b      	beq.n	8004a2a <TIM_Base_SetConfig+0x8a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f8:	d017      	beq.n	8004a2a <TIM_Base_SetConfig+0x8a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a28      	ldr	r2, [pc, #160]	@ (8004aa0 <TIM_Base_SetConfig+0x100>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d013      	beq.n	8004a2a <TIM_Base_SetConfig+0x8a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a27      	ldr	r2, [pc, #156]	@ (8004aa4 <TIM_Base_SetConfig+0x104>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00f      	beq.n	8004a2a <TIM_Base_SetConfig+0x8a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a26      	ldr	r2, [pc, #152]	@ (8004aa8 <TIM_Base_SetConfig+0x108>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00b      	beq.n	8004a2a <TIM_Base_SetConfig+0x8a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a25      	ldr	r2, [pc, #148]	@ (8004aac <TIM_Base_SetConfig+0x10c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d007      	beq.n	8004a2a <TIM_Base_SetConfig+0x8a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a24      	ldr	r2, [pc, #144]	@ (8004ab0 <TIM_Base_SetConfig+0x110>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d003      	beq.n	8004a2a <TIM_Base_SetConfig+0x8a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a23      	ldr	r2, [pc, #140]	@ (8004ab4 <TIM_Base_SetConfig+0x114>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d108      	bne.n	8004a3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a0e      	ldr	r2, [pc, #56]	@ (8004a9c <TIM_Base_SetConfig+0xfc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d103      	bne.n	8004a70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d105      	bne.n	8004a8e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f023 0201 	bic.w	r2, r3, #1
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	611a      	str	r2, [r3, #16]
  }
}
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40000c00 	.word	0x40000c00
 8004aac:	40014000 	.word	0x40014000
 8004ab0:	40014400 	.word	0x40014400
 8004ab4:	40014800 	.word	0x40014800

08004ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	f023 0201 	bic.w	r2, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 0303 	bic.w	r3, r3, #3
 8004aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f023 0302 	bic.w	r3, r3, #2
 8004b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8004b80 <TIM_OC1_SetConfig+0xc8>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d10c      	bne.n	8004b2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f023 0308 	bic.w	r3, r3, #8
 8004b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f023 0304 	bic.w	r3, r3, #4
 8004b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a13      	ldr	r2, [pc, #76]	@ (8004b80 <TIM_OC1_SetConfig+0xc8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d111      	bne.n	8004b5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	621a      	str	r2, [r3, #32]
}
 8004b74:	bf00      	nop
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	40010000 	.word	0x40010000

08004b84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	f023 0210 	bic.w	r2, r3, #16
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	021b      	lsls	r3, r3, #8
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f023 0320 	bic.w	r3, r3, #32
 8004bce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a1e      	ldr	r2, [pc, #120]	@ (8004c58 <TIM_OC2_SetConfig+0xd4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d10d      	bne.n	8004c00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a15      	ldr	r2, [pc, #84]	@ (8004c58 <TIM_OC2_SetConfig+0xd4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d113      	bne.n	8004c30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	621a      	str	r2, [r3, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40010000 	.word	0x40010000

08004c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0303 	bic.w	r3, r3, #3
 8004c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d2c <TIM_OC3_SetConfig+0xd0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d10d      	bne.n	8004cd6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a14      	ldr	r2, [pc, #80]	@ (8004d2c <TIM_OC3_SetConfig+0xd0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d113      	bne.n	8004d06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	621a      	str	r2, [r3, #32]
}
 8004d20:	bf00      	nop
 8004d22:	371c      	adds	r7, #28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	40010000 	.word	0x40010000

08004d30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	021b      	lsls	r3, r3, #8
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	031b      	lsls	r3, r3, #12
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a10      	ldr	r2, [pc, #64]	@ (8004dcc <TIM_OC4_SetConfig+0x9c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d109      	bne.n	8004da4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	019b      	lsls	r3, r3, #6
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	621a      	str	r2, [r3, #32]
}
 8004dbe:	bf00      	nop
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40010000 	.word	0x40010000

08004dd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	f023 0201 	bic.w	r2, r3, #1
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f023 030a 	bic.w	r3, r3, #10
 8004e0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	621a      	str	r2, [r3, #32]
}
 8004e22:	bf00      	nop
 8004e24:	371c      	adds	r7, #28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b087      	sub	sp, #28
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	f023 0210 	bic.w	r2, r3, #16
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	031b      	lsls	r3, r3, #12
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	621a      	str	r2, [r3, #32]
}
 8004e82:	bf00      	nop
 8004e84:	371c      	adds	r7, #28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b085      	sub	sp, #20
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f043 0307 	orr.w	r3, r3, #7
 8004eb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	609a      	str	r2, [r3, #8]
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ede:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	021a      	lsls	r2, r3, #8
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	609a      	str	r2, [r3, #8]
}
 8004ef8:	bf00      	nop
 8004efa:	371c      	adds	r7, #28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f003 031f 	and.w	r3, r3, #31
 8004f16:	2201      	movs	r2, #1
 8004f18:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a1a      	ldr	r2, [r3, #32]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	43db      	mvns	r3, r3
 8004f26:	401a      	ands	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a1a      	ldr	r2, [r3, #32]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 031f 	and.w	r3, r3, #31
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	621a      	str	r2, [r3, #32]
}
 8004f42:	bf00      	nop
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
	...

08004f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f64:	2302      	movs	r3, #2
 8004f66:	e050      	b.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8005018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d018      	beq.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fb4:	d013      	beq.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a18      	ldr	r2, [pc, #96]	@ (800501c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00e      	beq.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a16      	ldr	r2, [pc, #88]	@ (8005020 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d009      	beq.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a15      	ldr	r2, [pc, #84]	@ (8005024 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d004      	beq.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a13      	ldr	r2, [pc, #76]	@ (8005028 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d10c      	bne.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fe4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40010000 	.word	0x40010000
 800501c:	40000400 	.word	0x40000400
 8005020:	40000800 	.word	0x40000800
 8005024:	40000c00 	.word	0x40000c00
 8005028:	40014000 	.word	0x40014000

0800502c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e042      	b.n	80050c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d106      	bne.n	8005058 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fc febe 	bl	8001dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2224      	movs	r2, #36	@ 0x24
 800505c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800506e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fdbd 	bl	8005bf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005084:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695a      	ldr	r2, [r3, #20]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005094:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08a      	sub	sp, #40	@ 0x28
 80050d0:	af02      	add	r7, sp, #8
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	4613      	mov	r3, r2
 80050da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d175      	bne.n	80051d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <HAL_UART_Transmit+0x2c>
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e06e      	b.n	80051da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2221      	movs	r2, #33	@ 0x21
 8005106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800510a:	f7fd f855 	bl	80021b8 <HAL_GetTick>
 800510e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	88fa      	ldrh	r2, [r7, #6]
 8005114:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	88fa      	ldrh	r2, [r7, #6]
 800511a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005124:	d108      	bne.n	8005138 <HAL_UART_Transmit+0x6c>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d104      	bne.n	8005138 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	61bb      	str	r3, [r7, #24]
 8005136:	e003      	b.n	8005140 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800513c:	2300      	movs	r3, #0
 800513e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005140:	e02e      	b.n	80051a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2200      	movs	r2, #0
 800514a:	2180      	movs	r1, #128	@ 0x80
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 fb1f 	bl	8005790 <UART_WaitOnFlagUntilTimeout>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d005      	beq.n	8005164 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e03a      	b.n	80051da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10b      	bne.n	8005182 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005178:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	3302      	adds	r3, #2
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	e007      	b.n	8005192 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	781a      	ldrb	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	3301      	adds	r3, #1
 8005190:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1cb      	bne.n	8005142 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2200      	movs	r2, #0
 80051b2:	2140      	movs	r1, #64	@ 0x40
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 faeb 	bl	8005790 <UART_WaitOnFlagUntilTimeout>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d005      	beq.n	80051cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e006      	b.n	80051da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80051d4:	2300      	movs	r3, #0
 80051d6:	e000      	b.n	80051da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80051d8:	2302      	movs	r3, #2
  }
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3720      	adds	r7, #32
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	60f8      	str	r0, [r7, #12]
 80051ea:	60b9      	str	r1, [r7, #8]
 80051ec:	4613      	mov	r3, r2
 80051ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d112      	bne.n	8005222 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <HAL_UART_Receive_IT+0x26>
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e00b      	b.n	8005224 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005212:	88fb      	ldrh	r3, [r7, #6]
 8005214:	461a      	mov	r2, r3
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 fb12 	bl	8005842 <UART_Start_Receive_IT>
 800521e:	4603      	mov	r3, r0
 8005220:	e000      	b.n	8005224 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005222:	2302      	movs	r3, #2
  }
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b0ba      	sub	sp, #232	@ 0xe8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005252:	2300      	movs	r3, #0
 8005254:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005258:	2300      	movs	r3, #0
 800525a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800525e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800526a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10f      	bne.n	8005292 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <HAL_UART_IRQHandler+0x66>
 800527e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fbf2 	bl	8005a74 <UART_Receive_IT>
      return;
 8005290:	e25b      	b.n	800574a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005292:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 80de 	beq.w	8005458 <HAL_UART_IRQHandler+0x22c>
 800529c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d106      	bne.n	80052b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80d1 	beq.w	8005458 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00b      	beq.n	80052da <HAL_UART_IRQHandler+0xae>
 80052c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d2:	f043 0201 	orr.w	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00b      	beq.n	80052fe <HAL_UART_IRQHandler+0xd2>
 80052e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d005      	beq.n	80052fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f6:	f043 0202 	orr.w	r2, r3, #2
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00b      	beq.n	8005322 <HAL_UART_IRQHandler+0xf6>
 800530a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531a:	f043 0204 	orr.w	r2, r3, #4
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	2b00      	cmp	r3, #0
 800532c:	d011      	beq.n	8005352 <HAL_UART_IRQHandler+0x126>
 800532e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d105      	bne.n	8005346 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800533a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d005      	beq.n	8005352 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534a:	f043 0208 	orr.w	r2, r3, #8
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 81f2 	beq.w	8005740 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800535c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_UART_IRQHandler+0x14e>
 8005368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fb7d 	bl	8005a74 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005384:	2b40      	cmp	r3, #64	@ 0x40
 8005386:	bf0c      	ite	eq
 8005388:	2301      	moveq	r3, #1
 800538a:	2300      	movne	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d103      	bne.n	80053a6 <HAL_UART_IRQHandler+0x17a>
 800539e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d04f      	beq.n	8005446 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fa85 	bl	80058b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b6:	2b40      	cmp	r3, #64	@ 0x40
 80053b8:	d141      	bne.n	800543e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3314      	adds	r3, #20
 80053c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80053d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3314      	adds	r3, #20
 80053e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80053e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80053ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80053f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80053fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1d9      	bne.n	80053ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540a:	2b00      	cmp	r3, #0
 800540c:	d013      	beq.n	8005436 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005412:	4a7e      	ldr	r2, [pc, #504]	@ (800560c <HAL_UART_IRQHandler+0x3e0>)
 8005414:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541a:	4618      	mov	r0, r3
 800541c:	f7fd f87d 	bl	800251a <HAL_DMA_Abort_IT>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d016      	beq.n	8005454 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800542a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005430:	4610      	mov	r0, r2
 8005432:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005434:	e00e      	b.n	8005454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f994 	bl	8005764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543c:	e00a      	b.n	8005454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f990 	bl	8005764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005444:	e006      	b.n	8005454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f98c 	bl	8005764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005452:	e175      	b.n	8005740 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005454:	bf00      	nop
    return;
 8005456:	e173      	b.n	8005740 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545c:	2b01      	cmp	r3, #1
 800545e:	f040 814f 	bne.w	8005700 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 8148 	beq.w	8005700 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 8141 	beq.w	8005700 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800547e:	2300      	movs	r3, #0
 8005480:	60bb      	str	r3, [r7, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	60bb      	str	r3, [r7, #8]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800549e:	2b40      	cmp	r3, #64	@ 0x40
 80054a0:	f040 80b6 	bne.w	8005610 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 8145 	beq.w	8005744 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054c2:	429a      	cmp	r2, r3
 80054c4:	f080 813e 	bcs.w	8005744 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054da:	f000 8088 	beq.w	80055ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	330c      	adds	r3, #12
 80054e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80054f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	330c      	adds	r3, #12
 8005506:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800550a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800550e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005516:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005522:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1d9      	bne.n	80054de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3314      	adds	r3, #20
 8005530:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005532:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800553a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800553c:	f023 0301 	bic.w	r3, r3, #1
 8005540:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3314      	adds	r3, #20
 800554a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800554e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005552:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005554:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005556:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005560:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e1      	bne.n	800552a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3314      	adds	r3, #20
 800556c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005576:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005578:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800557c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3314      	adds	r3, #20
 8005586:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800558a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800558c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005590:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005598:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1e3      	bne.n	8005566 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	330c      	adds	r3, #12
 80055b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055be:	f023 0310 	bic.w	r3, r3, #16
 80055c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	330c      	adds	r3, #12
 80055cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80055d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80055d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e3      	bne.n	80055ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fc ff26 	bl	800243a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2202      	movs	r2, #2
 80055f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	b29b      	uxth	r3, r3
 8005602:	4619      	mov	r1, r3
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f8b7 	bl	8005778 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800560a:	e09b      	b.n	8005744 <HAL_UART_IRQHandler+0x518>
 800560c:	0800597d 	.word	0x0800597d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005618:	b29b      	uxth	r3, r3
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005624:	b29b      	uxth	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 808e 	beq.w	8005748 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800562c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 8089 	beq.w	8005748 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	330c      	adds	r3, #12
 800563c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005640:	e853 3f00 	ldrex	r3, [r3]
 8005644:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005648:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800564c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	330c      	adds	r3, #12
 8005656:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800565a:	647a      	str	r2, [r7, #68]	@ 0x44
 800565c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005660:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005662:	e841 2300 	strex	r3, r2, [r1]
 8005666:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1e3      	bne.n	8005636 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3314      	adds	r3, #20
 8005674:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	623b      	str	r3, [r7, #32]
   return(result);
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	f023 0301 	bic.w	r3, r3, #1
 8005684:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3314      	adds	r3, #20
 800568e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005692:	633a      	str	r2, [r7, #48]	@ 0x30
 8005694:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005696:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800569a:	e841 2300 	strex	r3, r2, [r1]
 800569e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1e3      	bne.n	800566e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	330c      	adds	r3, #12
 80056ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	e853 3f00 	ldrex	r3, [r3]
 80056c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0310 	bic.w	r3, r3, #16
 80056ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	330c      	adds	r3, #12
 80056d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80056d8:	61fa      	str	r2, [r7, #28]
 80056da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056dc:	69b9      	ldr	r1, [r7, #24]
 80056de:	69fa      	ldr	r2, [r7, #28]
 80056e0:	e841 2300 	strex	r3, r2, [r1]
 80056e4:	617b      	str	r3, [r7, #20]
   return(result);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e3      	bne.n	80056b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f83d 	bl	8005778 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056fe:	e023      	b.n	8005748 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005708:	2b00      	cmp	r3, #0
 800570a:	d009      	beq.n	8005720 <HAL_UART_IRQHandler+0x4f4>
 800570c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f943 	bl	80059a4 <UART_Transmit_IT>
    return;
 800571e:	e014      	b.n	800574a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00e      	beq.n	800574a <HAL_UART_IRQHandler+0x51e>
 800572c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005734:	2b00      	cmp	r3, #0
 8005736:	d008      	beq.n	800574a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f983 	bl	8005a44 <UART_EndTransmit_IT>
    return;
 800573e:	e004      	b.n	800574a <HAL_UART_IRQHandler+0x51e>
    return;
 8005740:	bf00      	nop
 8005742:	e002      	b.n	800574a <HAL_UART_IRQHandler+0x51e>
      return;
 8005744:	bf00      	nop
 8005746:	e000      	b.n	800574a <HAL_UART_IRQHandler+0x51e>
      return;
 8005748:	bf00      	nop
  }
}
 800574a:	37e8      	adds	r7, #232	@ 0xe8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	603b      	str	r3, [r7, #0]
 800579c:	4613      	mov	r3, r2
 800579e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057a0:	e03b      	b.n	800581a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a8:	d037      	beq.n	800581a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057aa:	f7fc fd05 	bl	80021b8 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	6a3a      	ldr	r2, [r7, #32]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d302      	bcc.n	80057c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e03a      	b.n	800583a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d023      	beq.n	800581a <UART_WaitOnFlagUntilTimeout+0x8a>
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b80      	cmp	r3, #128	@ 0x80
 80057d6:	d020      	beq.n	800581a <UART_WaitOnFlagUntilTimeout+0x8a>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b40      	cmp	r3, #64	@ 0x40
 80057dc:	d01d      	beq.n	800581a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d116      	bne.n	800581a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80057ec:	2300      	movs	r3, #0
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 f857 	bl	80058b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2208      	movs	r2, #8
 800580c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e00f      	b.n	800583a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4013      	ands	r3, r2
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	429a      	cmp	r2, r3
 8005828:	bf0c      	ite	eq
 800582a:	2301      	moveq	r3, #1
 800582c:	2300      	movne	r3, #0
 800582e:	b2db      	uxtb	r3, r3
 8005830:	461a      	mov	r2, r3
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	429a      	cmp	r2, r3
 8005836:	d0b4      	beq.n	80057a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005842:	b480      	push	{r7}
 8005844:	b085      	sub	sp, #20
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	4613      	mov	r3, r2
 800584e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	88fa      	ldrh	r2, [r7, #6]
 800585a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	88fa      	ldrh	r2, [r7, #6]
 8005860:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2222      	movs	r2, #34	@ 0x22
 800586c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d007      	beq.n	8005888 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005886:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695a      	ldr	r2, [r3, #20]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0201 	orr.w	r2, r2, #1
 8005896:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0220 	orr.w	r2, r2, #32
 80058a6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b095      	sub	sp, #84	@ 0x54
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	330c      	adds	r3, #12
 80058c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	330c      	adds	r3, #12
 80058dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058de:	643a      	str	r2, [r7, #64]	@ 0x40
 80058e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e5      	bne.n	80058be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3314      	adds	r3, #20
 80058f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	61fb      	str	r3, [r7, #28]
   return(result);
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	f023 0301 	bic.w	r3, r3, #1
 8005908:	64bb      	str	r3, [r7, #72]	@ 0x48
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3314      	adds	r3, #20
 8005910:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005912:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005914:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e5      	bne.n	80058f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592a:	2b01      	cmp	r3, #1
 800592c:	d119      	bne.n	8005962 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	330c      	adds	r3, #12
 8005934:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	e853 3f00 	ldrex	r3, [r3]
 800593c:	60bb      	str	r3, [r7, #8]
   return(result);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f023 0310 	bic.w	r3, r3, #16
 8005944:	647b      	str	r3, [r7, #68]	@ 0x44
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	330c      	adds	r3, #12
 800594c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800594e:	61ba      	str	r2, [r7, #24]
 8005950:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	6979      	ldr	r1, [r7, #20]
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	613b      	str	r3, [r7, #16]
   return(result);
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e5      	bne.n	800592e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2220      	movs	r2, #32
 8005966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005970:	bf00      	nop
 8005972:	3754      	adds	r7, #84	@ 0x54
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005988:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f7ff fee4 	bl	8005764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800599c:	bf00      	nop
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b21      	cmp	r3, #33	@ 0x21
 80059b6:	d13e      	bne.n	8005a36 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059c0:	d114      	bne.n	80059ec <UART_Transmit_IT+0x48>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d110      	bne.n	80059ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	461a      	mov	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	1c9a      	adds	r2, r3, #2
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	621a      	str	r2, [r3, #32]
 80059ea:	e008      	b.n	80059fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	1c59      	adds	r1, r3, #1
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6211      	str	r1, [r2, #32]
 80059f6:	781a      	ldrb	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10f      	bne.n	8005a32 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68da      	ldr	r2, [r3, #12]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a20:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a30:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	e000      	b.n	8005a38 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a36:	2302      	movs	r3, #2
  }
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a5a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff fe73 	bl	8005750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08c      	sub	sp, #48	@ 0x30
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b22      	cmp	r3, #34	@ 0x22
 8005a86:	f040 80ae 	bne.w	8005be6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a92:	d117      	bne.n	8005ac4 <UART_Receive_IT+0x50>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d113      	bne.n	8005ac4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005abc:	1c9a      	adds	r2, r3, #2
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ac2:	e026      	b.n	8005b12 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ad6:	d007      	beq.n	8005ae8 <UART_Receive_IT+0x74>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <UART_Receive_IT+0x82>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d106      	bne.n	8005af6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af2:	701a      	strb	r2, [r3, #0]
 8005af4:	e008      	b.n	8005b08 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b06:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	4619      	mov	r1, r3
 8005b20:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d15d      	bne.n	8005be2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0220 	bic.w	r2, r2, #32
 8005b34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68da      	ldr	r2, [r3, #12]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695a      	ldr	r2, [r3, #20]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 0201 	bic.w	r2, r2, #1
 8005b54:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d135      	bne.n	8005bd8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	330c      	adds	r3, #12
 8005b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	613b      	str	r3, [r7, #16]
   return(result);
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f023 0310 	bic.w	r3, r3, #16
 8005b88:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	330c      	adds	r3, #12
 8005b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b92:	623a      	str	r2, [r7, #32]
 8005b94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b96:	69f9      	ldr	r1, [r7, #28]
 8005b98:	6a3a      	ldr	r2, [r7, #32]
 8005b9a:	e841 2300 	strex	r3, r2, [r1]
 8005b9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1e5      	bne.n	8005b72 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0310 	and.w	r3, r3, #16
 8005bb0:	2b10      	cmp	r3, #16
 8005bb2:	d10a      	bne.n	8005bca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bce:	4619      	mov	r1, r3
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff fdd1 	bl	8005778 <HAL_UARTEx_RxEventCallback>
 8005bd6:	e002      	b.n	8005bde <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7fb ff15 	bl	8001a08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	e002      	b.n	8005be8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	e000      	b.n	8005be8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005be6:	2302      	movs	r3, #2
  }
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3730      	adds	r7, #48	@ 0x30
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bf4:	b0c0      	sub	sp, #256	@ 0x100
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c0c:	68d9      	ldr	r1, [r3, #12]
 8005c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	ea40 0301 	orr.w	r3, r0, r1
 8005c18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c48:	f021 010c 	bic.w	r1, r1, #12
 8005c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c56:	430b      	orrs	r3, r1
 8005c58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c6a:	6999      	ldr	r1, [r3, #24]
 8005c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	ea40 0301 	orr.w	r3, r0, r1
 8005c76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	4b8f      	ldr	r3, [pc, #572]	@ (8005ebc <UART_SetConfig+0x2cc>)
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d005      	beq.n	8005c90 <UART_SetConfig+0xa0>
 8005c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	4b8d      	ldr	r3, [pc, #564]	@ (8005ec0 <UART_SetConfig+0x2d0>)
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d104      	bne.n	8005c9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c90:	f7fe fa5c 	bl	800414c <HAL_RCC_GetPCLK2Freq>
 8005c94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c98:	e003      	b.n	8005ca2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c9a:	f7fe fa43 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8005c9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cac:	f040 810c 	bne.w	8005ec8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005cba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005cbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005cc2:	4622      	mov	r2, r4
 8005cc4:	462b      	mov	r3, r5
 8005cc6:	1891      	adds	r1, r2, r2
 8005cc8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005cca:	415b      	adcs	r3, r3
 8005ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	eb12 0801 	adds.w	r8, r2, r1
 8005cd8:	4629      	mov	r1, r5
 8005cda:	eb43 0901 	adc.w	r9, r3, r1
 8005cde:	f04f 0200 	mov.w	r2, #0
 8005ce2:	f04f 0300 	mov.w	r3, #0
 8005ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cf2:	4690      	mov	r8, r2
 8005cf4:	4699      	mov	r9, r3
 8005cf6:	4623      	mov	r3, r4
 8005cf8:	eb18 0303 	adds.w	r3, r8, r3
 8005cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d00:	462b      	mov	r3, r5
 8005d02:	eb49 0303 	adc.w	r3, r9, r3
 8005d06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005d1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d1e:	460b      	mov	r3, r1
 8005d20:	18db      	adds	r3, r3, r3
 8005d22:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d24:	4613      	mov	r3, r2
 8005d26:	eb42 0303 	adc.w	r3, r2, r3
 8005d2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d34:	f7fa ff90 	bl	8000c58 <__aeabi_uldivmod>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4b61      	ldr	r3, [pc, #388]	@ (8005ec4 <UART_SetConfig+0x2d4>)
 8005d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d42:	095b      	lsrs	r3, r3, #5
 8005d44:	011c      	lsls	r4, r3, #4
 8005d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005d54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005d58:	4642      	mov	r2, r8
 8005d5a:	464b      	mov	r3, r9
 8005d5c:	1891      	adds	r1, r2, r2
 8005d5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d60:	415b      	adcs	r3, r3
 8005d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d68:	4641      	mov	r1, r8
 8005d6a:	eb12 0a01 	adds.w	sl, r2, r1
 8005d6e:	4649      	mov	r1, r9
 8005d70:	eb43 0b01 	adc.w	fp, r3, r1
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	f04f 0300 	mov.w	r3, #0
 8005d7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d88:	4692      	mov	sl, r2
 8005d8a:	469b      	mov	fp, r3
 8005d8c:	4643      	mov	r3, r8
 8005d8e:	eb1a 0303 	adds.w	r3, sl, r3
 8005d92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d96:	464b      	mov	r3, r9
 8005d98:	eb4b 0303 	adc.w	r3, fp, r3
 8005d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005db0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005db4:	460b      	mov	r3, r1
 8005db6:	18db      	adds	r3, r3, r3
 8005db8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dba:	4613      	mov	r3, r2
 8005dbc:	eb42 0303 	adc.w	r3, r2, r3
 8005dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005dc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005dca:	f7fa ff45 	bl	8000c58 <__aeabi_uldivmod>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ec4 <UART_SetConfig+0x2d4>)
 8005dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8005dda:	095b      	lsrs	r3, r3, #5
 8005ddc:	2264      	movs	r2, #100	@ 0x64
 8005dde:	fb02 f303 	mul.w	r3, r2, r3
 8005de2:	1acb      	subs	r3, r1, r3
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005dea:	4b36      	ldr	r3, [pc, #216]	@ (8005ec4 <UART_SetConfig+0x2d4>)
 8005dec:	fba3 2302 	umull	r2, r3, r3, r2
 8005df0:	095b      	lsrs	r3, r3, #5
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005df8:	441c      	add	r4, r3
 8005dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005e08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	464b      	mov	r3, r9
 8005e10:	1891      	adds	r1, r2, r2
 8005e12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e14:	415b      	adcs	r3, r3
 8005e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e1c:	4641      	mov	r1, r8
 8005e1e:	1851      	adds	r1, r2, r1
 8005e20:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e22:	4649      	mov	r1, r9
 8005e24:	414b      	adcs	r3, r1
 8005e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e34:	4659      	mov	r1, fp
 8005e36:	00cb      	lsls	r3, r1, #3
 8005e38:	4651      	mov	r1, sl
 8005e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e3e:	4651      	mov	r1, sl
 8005e40:	00ca      	lsls	r2, r1, #3
 8005e42:	4610      	mov	r0, r2
 8005e44:	4619      	mov	r1, r3
 8005e46:	4603      	mov	r3, r0
 8005e48:	4642      	mov	r2, r8
 8005e4a:	189b      	adds	r3, r3, r2
 8005e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e50:	464b      	mov	r3, r9
 8005e52:	460a      	mov	r2, r1
 8005e54:	eb42 0303 	adc.w	r3, r2, r3
 8005e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e70:	460b      	mov	r3, r1
 8005e72:	18db      	adds	r3, r3, r3
 8005e74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e76:	4613      	mov	r3, r2
 8005e78:	eb42 0303 	adc.w	r3, r2, r3
 8005e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e86:	f7fa fee7 	bl	8000c58 <__aeabi_uldivmod>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ec4 <UART_SetConfig+0x2d4>)
 8005e90:	fba3 1302 	umull	r1, r3, r3, r2
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	2164      	movs	r1, #100	@ 0x64
 8005e98:	fb01 f303 	mul.w	r3, r1, r3
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	3332      	adds	r3, #50	@ 0x32
 8005ea2:	4a08      	ldr	r2, [pc, #32]	@ (8005ec4 <UART_SetConfig+0x2d4>)
 8005ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea8:	095b      	lsrs	r3, r3, #5
 8005eaa:	f003 0207 	and.w	r2, r3, #7
 8005eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4422      	add	r2, r4
 8005eb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005eb8:	e106      	b.n	80060c8 <UART_SetConfig+0x4d8>
 8005eba:	bf00      	nop
 8005ebc:	40011000 	.word	0x40011000
 8005ec0:	40011400 	.word	0x40011400
 8005ec4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ed2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005ed6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005eda:	4642      	mov	r2, r8
 8005edc:	464b      	mov	r3, r9
 8005ede:	1891      	adds	r1, r2, r2
 8005ee0:	6239      	str	r1, [r7, #32]
 8005ee2:	415b      	adcs	r3, r3
 8005ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005eea:	4641      	mov	r1, r8
 8005eec:	1854      	adds	r4, r2, r1
 8005eee:	4649      	mov	r1, r9
 8005ef0:	eb43 0501 	adc.w	r5, r3, r1
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	00eb      	lsls	r3, r5, #3
 8005efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f02:	00e2      	lsls	r2, r4, #3
 8005f04:	4614      	mov	r4, r2
 8005f06:	461d      	mov	r5, r3
 8005f08:	4643      	mov	r3, r8
 8005f0a:	18e3      	adds	r3, r4, r3
 8005f0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f10:	464b      	mov	r3, r9
 8005f12:	eb45 0303 	adc.w	r3, r5, r3
 8005f16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	f04f 0300 	mov.w	r3, #0
 8005f32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f36:	4629      	mov	r1, r5
 8005f38:	008b      	lsls	r3, r1, #2
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f40:	4621      	mov	r1, r4
 8005f42:	008a      	lsls	r2, r1, #2
 8005f44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f48:	f7fa fe86 	bl	8000c58 <__aeabi_uldivmod>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4b60      	ldr	r3, [pc, #384]	@ (80060d4 <UART_SetConfig+0x4e4>)
 8005f52:	fba3 2302 	umull	r2, r3, r3, r2
 8005f56:	095b      	lsrs	r3, r3, #5
 8005f58:	011c      	lsls	r4, r3, #4
 8005f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f6c:	4642      	mov	r2, r8
 8005f6e:	464b      	mov	r3, r9
 8005f70:	1891      	adds	r1, r2, r2
 8005f72:	61b9      	str	r1, [r7, #24]
 8005f74:	415b      	adcs	r3, r3
 8005f76:	61fb      	str	r3, [r7, #28]
 8005f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f7c:	4641      	mov	r1, r8
 8005f7e:	1851      	adds	r1, r2, r1
 8005f80:	6139      	str	r1, [r7, #16]
 8005f82:	4649      	mov	r1, r9
 8005f84:	414b      	adcs	r3, r1
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	f04f 0200 	mov.w	r2, #0
 8005f8c:	f04f 0300 	mov.w	r3, #0
 8005f90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f94:	4659      	mov	r1, fp
 8005f96:	00cb      	lsls	r3, r1, #3
 8005f98:	4651      	mov	r1, sl
 8005f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f9e:	4651      	mov	r1, sl
 8005fa0:	00ca      	lsls	r2, r1, #3
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	4642      	mov	r2, r8
 8005faa:	189b      	adds	r3, r3, r2
 8005fac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fb0:	464b      	mov	r3, r9
 8005fb2:	460a      	mov	r2, r1
 8005fb4:	eb42 0303 	adc.w	r3, r2, r3
 8005fb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005fc8:	f04f 0200 	mov.w	r2, #0
 8005fcc:	f04f 0300 	mov.w	r3, #0
 8005fd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005fd4:	4649      	mov	r1, r9
 8005fd6:	008b      	lsls	r3, r1, #2
 8005fd8:	4641      	mov	r1, r8
 8005fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fde:	4641      	mov	r1, r8
 8005fe0:	008a      	lsls	r2, r1, #2
 8005fe2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005fe6:	f7fa fe37 	bl	8000c58 <__aeabi_uldivmod>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4611      	mov	r1, r2
 8005ff0:	4b38      	ldr	r3, [pc, #224]	@ (80060d4 <UART_SetConfig+0x4e4>)
 8005ff2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	2264      	movs	r2, #100	@ 0x64
 8005ffa:	fb02 f303 	mul.w	r3, r2, r3
 8005ffe:	1acb      	subs	r3, r1, r3
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	3332      	adds	r3, #50	@ 0x32
 8006004:	4a33      	ldr	r2, [pc, #204]	@ (80060d4 <UART_SetConfig+0x4e4>)
 8006006:	fba2 2303 	umull	r2, r3, r2, r3
 800600a:	095b      	lsrs	r3, r3, #5
 800600c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006010:	441c      	add	r4, r3
 8006012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006016:	2200      	movs	r2, #0
 8006018:	673b      	str	r3, [r7, #112]	@ 0x70
 800601a:	677a      	str	r2, [r7, #116]	@ 0x74
 800601c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006020:	4642      	mov	r2, r8
 8006022:	464b      	mov	r3, r9
 8006024:	1891      	adds	r1, r2, r2
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	415b      	adcs	r3, r3
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006030:	4641      	mov	r1, r8
 8006032:	1851      	adds	r1, r2, r1
 8006034:	6039      	str	r1, [r7, #0]
 8006036:	4649      	mov	r1, r9
 8006038:	414b      	adcs	r3, r1
 800603a:	607b      	str	r3, [r7, #4]
 800603c:	f04f 0200 	mov.w	r2, #0
 8006040:	f04f 0300 	mov.w	r3, #0
 8006044:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006048:	4659      	mov	r1, fp
 800604a:	00cb      	lsls	r3, r1, #3
 800604c:	4651      	mov	r1, sl
 800604e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006052:	4651      	mov	r1, sl
 8006054:	00ca      	lsls	r2, r1, #3
 8006056:	4610      	mov	r0, r2
 8006058:	4619      	mov	r1, r3
 800605a:	4603      	mov	r3, r0
 800605c:	4642      	mov	r2, r8
 800605e:	189b      	adds	r3, r3, r2
 8006060:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006062:	464b      	mov	r3, r9
 8006064:	460a      	mov	r2, r1
 8006066:	eb42 0303 	adc.w	r3, r2, r3
 800606a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	663b      	str	r3, [r7, #96]	@ 0x60
 8006076:	667a      	str	r2, [r7, #100]	@ 0x64
 8006078:	f04f 0200 	mov.w	r2, #0
 800607c:	f04f 0300 	mov.w	r3, #0
 8006080:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006084:	4649      	mov	r1, r9
 8006086:	008b      	lsls	r3, r1, #2
 8006088:	4641      	mov	r1, r8
 800608a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800608e:	4641      	mov	r1, r8
 8006090:	008a      	lsls	r2, r1, #2
 8006092:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006096:	f7fa fddf 	bl	8000c58 <__aeabi_uldivmod>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	4b0d      	ldr	r3, [pc, #52]	@ (80060d4 <UART_SetConfig+0x4e4>)
 80060a0:	fba3 1302 	umull	r1, r3, r3, r2
 80060a4:	095b      	lsrs	r3, r3, #5
 80060a6:	2164      	movs	r1, #100	@ 0x64
 80060a8:	fb01 f303 	mul.w	r3, r1, r3
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	011b      	lsls	r3, r3, #4
 80060b0:	3332      	adds	r3, #50	@ 0x32
 80060b2:	4a08      	ldr	r2, [pc, #32]	@ (80060d4 <UART_SetConfig+0x4e4>)
 80060b4:	fba2 2303 	umull	r2, r3, r2, r3
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	f003 020f 	and.w	r2, r3, #15
 80060be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4422      	add	r2, r4
 80060c6:	609a      	str	r2, [r3, #8]
}
 80060c8:	bf00      	nop
 80060ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80060ce:	46bd      	mov	sp, r7
 80060d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060d4:	51eb851f 	.word	0x51eb851f

080060d8 <__cvt>:
 80060d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060dc:	ec57 6b10 	vmov	r6, r7, d0
 80060e0:	2f00      	cmp	r7, #0
 80060e2:	460c      	mov	r4, r1
 80060e4:	4619      	mov	r1, r3
 80060e6:	463b      	mov	r3, r7
 80060e8:	bfbb      	ittet	lt
 80060ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80060ee:	461f      	movlt	r7, r3
 80060f0:	2300      	movge	r3, #0
 80060f2:	232d      	movlt	r3, #45	@ 0x2d
 80060f4:	700b      	strb	r3, [r1, #0]
 80060f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80060fc:	4691      	mov	r9, r2
 80060fe:	f023 0820 	bic.w	r8, r3, #32
 8006102:	bfbc      	itt	lt
 8006104:	4632      	movlt	r2, r6
 8006106:	4616      	movlt	r6, r2
 8006108:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800610c:	d005      	beq.n	800611a <__cvt+0x42>
 800610e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006112:	d100      	bne.n	8006116 <__cvt+0x3e>
 8006114:	3401      	adds	r4, #1
 8006116:	2102      	movs	r1, #2
 8006118:	e000      	b.n	800611c <__cvt+0x44>
 800611a:	2103      	movs	r1, #3
 800611c:	ab03      	add	r3, sp, #12
 800611e:	9301      	str	r3, [sp, #4]
 8006120:	ab02      	add	r3, sp, #8
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	ec47 6b10 	vmov	d0, r6, r7
 8006128:	4653      	mov	r3, sl
 800612a:	4622      	mov	r2, r4
 800612c:	f000 fe70 	bl	8006e10 <_dtoa_r>
 8006130:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006134:	4605      	mov	r5, r0
 8006136:	d119      	bne.n	800616c <__cvt+0x94>
 8006138:	f019 0f01 	tst.w	r9, #1
 800613c:	d00e      	beq.n	800615c <__cvt+0x84>
 800613e:	eb00 0904 	add.w	r9, r0, r4
 8006142:	2200      	movs	r2, #0
 8006144:	2300      	movs	r3, #0
 8006146:	4630      	mov	r0, r6
 8006148:	4639      	mov	r1, r7
 800614a:	f7fa fcc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800614e:	b108      	cbz	r0, 8006154 <__cvt+0x7c>
 8006150:	f8cd 900c 	str.w	r9, [sp, #12]
 8006154:	2230      	movs	r2, #48	@ 0x30
 8006156:	9b03      	ldr	r3, [sp, #12]
 8006158:	454b      	cmp	r3, r9
 800615a:	d31e      	bcc.n	800619a <__cvt+0xc2>
 800615c:	9b03      	ldr	r3, [sp, #12]
 800615e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006160:	1b5b      	subs	r3, r3, r5
 8006162:	4628      	mov	r0, r5
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	b004      	add	sp, #16
 8006168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800616c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006170:	eb00 0904 	add.w	r9, r0, r4
 8006174:	d1e5      	bne.n	8006142 <__cvt+0x6a>
 8006176:	7803      	ldrb	r3, [r0, #0]
 8006178:	2b30      	cmp	r3, #48	@ 0x30
 800617a:	d10a      	bne.n	8006192 <__cvt+0xba>
 800617c:	2200      	movs	r2, #0
 800617e:	2300      	movs	r3, #0
 8006180:	4630      	mov	r0, r6
 8006182:	4639      	mov	r1, r7
 8006184:	f7fa fca8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006188:	b918      	cbnz	r0, 8006192 <__cvt+0xba>
 800618a:	f1c4 0401 	rsb	r4, r4, #1
 800618e:	f8ca 4000 	str.w	r4, [sl]
 8006192:	f8da 3000 	ldr.w	r3, [sl]
 8006196:	4499      	add	r9, r3
 8006198:	e7d3      	b.n	8006142 <__cvt+0x6a>
 800619a:	1c59      	adds	r1, r3, #1
 800619c:	9103      	str	r1, [sp, #12]
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	e7d9      	b.n	8006156 <__cvt+0x7e>

080061a2 <__exponent>:
 80061a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061a4:	2900      	cmp	r1, #0
 80061a6:	bfba      	itte	lt
 80061a8:	4249      	neglt	r1, r1
 80061aa:	232d      	movlt	r3, #45	@ 0x2d
 80061ac:	232b      	movge	r3, #43	@ 0x2b
 80061ae:	2909      	cmp	r1, #9
 80061b0:	7002      	strb	r2, [r0, #0]
 80061b2:	7043      	strb	r3, [r0, #1]
 80061b4:	dd29      	ble.n	800620a <__exponent+0x68>
 80061b6:	f10d 0307 	add.w	r3, sp, #7
 80061ba:	461d      	mov	r5, r3
 80061bc:	270a      	movs	r7, #10
 80061be:	461a      	mov	r2, r3
 80061c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80061c4:	fb07 1416 	mls	r4, r7, r6, r1
 80061c8:	3430      	adds	r4, #48	@ 0x30
 80061ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 80061ce:	460c      	mov	r4, r1
 80061d0:	2c63      	cmp	r4, #99	@ 0x63
 80061d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80061d6:	4631      	mov	r1, r6
 80061d8:	dcf1      	bgt.n	80061be <__exponent+0x1c>
 80061da:	3130      	adds	r1, #48	@ 0x30
 80061dc:	1e94      	subs	r4, r2, #2
 80061de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80061e2:	1c41      	adds	r1, r0, #1
 80061e4:	4623      	mov	r3, r4
 80061e6:	42ab      	cmp	r3, r5
 80061e8:	d30a      	bcc.n	8006200 <__exponent+0x5e>
 80061ea:	f10d 0309 	add.w	r3, sp, #9
 80061ee:	1a9b      	subs	r3, r3, r2
 80061f0:	42ac      	cmp	r4, r5
 80061f2:	bf88      	it	hi
 80061f4:	2300      	movhi	r3, #0
 80061f6:	3302      	adds	r3, #2
 80061f8:	4403      	add	r3, r0
 80061fa:	1a18      	subs	r0, r3, r0
 80061fc:	b003      	add	sp, #12
 80061fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006200:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006204:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006208:	e7ed      	b.n	80061e6 <__exponent+0x44>
 800620a:	2330      	movs	r3, #48	@ 0x30
 800620c:	3130      	adds	r1, #48	@ 0x30
 800620e:	7083      	strb	r3, [r0, #2]
 8006210:	70c1      	strb	r1, [r0, #3]
 8006212:	1d03      	adds	r3, r0, #4
 8006214:	e7f1      	b.n	80061fa <__exponent+0x58>
	...

08006218 <_printf_float>:
 8006218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621c:	b08d      	sub	sp, #52	@ 0x34
 800621e:	460c      	mov	r4, r1
 8006220:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006224:	4616      	mov	r6, r2
 8006226:	461f      	mov	r7, r3
 8006228:	4605      	mov	r5, r0
 800622a:	f000 fcef 	bl	8006c0c <_localeconv_r>
 800622e:	6803      	ldr	r3, [r0, #0]
 8006230:	9304      	str	r3, [sp, #16]
 8006232:	4618      	mov	r0, r3
 8006234:	f7fa f824 	bl	8000280 <strlen>
 8006238:	2300      	movs	r3, #0
 800623a:	930a      	str	r3, [sp, #40]	@ 0x28
 800623c:	f8d8 3000 	ldr.w	r3, [r8]
 8006240:	9005      	str	r0, [sp, #20]
 8006242:	3307      	adds	r3, #7
 8006244:	f023 0307 	bic.w	r3, r3, #7
 8006248:	f103 0208 	add.w	r2, r3, #8
 800624c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006250:	f8d4 b000 	ldr.w	fp, [r4]
 8006254:	f8c8 2000 	str.w	r2, [r8]
 8006258:	e9d3 8900 	ldrd	r8, r9, [r3]
 800625c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006260:	9307      	str	r3, [sp, #28]
 8006262:	f8cd 8018 	str.w	r8, [sp, #24]
 8006266:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800626a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800626e:	4b9c      	ldr	r3, [pc, #624]	@ (80064e0 <_printf_float+0x2c8>)
 8006270:	f04f 32ff 	mov.w	r2, #4294967295
 8006274:	f7fa fc62 	bl	8000b3c <__aeabi_dcmpun>
 8006278:	bb70      	cbnz	r0, 80062d8 <_printf_float+0xc0>
 800627a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800627e:	4b98      	ldr	r3, [pc, #608]	@ (80064e0 <_printf_float+0x2c8>)
 8006280:	f04f 32ff 	mov.w	r2, #4294967295
 8006284:	f7fa fc3c 	bl	8000b00 <__aeabi_dcmple>
 8006288:	bb30      	cbnz	r0, 80062d8 <_printf_float+0xc0>
 800628a:	2200      	movs	r2, #0
 800628c:	2300      	movs	r3, #0
 800628e:	4640      	mov	r0, r8
 8006290:	4649      	mov	r1, r9
 8006292:	f7fa fc2b 	bl	8000aec <__aeabi_dcmplt>
 8006296:	b110      	cbz	r0, 800629e <_printf_float+0x86>
 8006298:	232d      	movs	r3, #45	@ 0x2d
 800629a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800629e:	4a91      	ldr	r2, [pc, #580]	@ (80064e4 <_printf_float+0x2cc>)
 80062a0:	4b91      	ldr	r3, [pc, #580]	@ (80064e8 <_printf_float+0x2d0>)
 80062a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80062a6:	bf94      	ite	ls
 80062a8:	4690      	movls	r8, r2
 80062aa:	4698      	movhi	r8, r3
 80062ac:	2303      	movs	r3, #3
 80062ae:	6123      	str	r3, [r4, #16]
 80062b0:	f02b 0304 	bic.w	r3, fp, #4
 80062b4:	6023      	str	r3, [r4, #0]
 80062b6:	f04f 0900 	mov.w	r9, #0
 80062ba:	9700      	str	r7, [sp, #0]
 80062bc:	4633      	mov	r3, r6
 80062be:	aa0b      	add	r2, sp, #44	@ 0x2c
 80062c0:	4621      	mov	r1, r4
 80062c2:	4628      	mov	r0, r5
 80062c4:	f000 f9d2 	bl	800666c <_printf_common>
 80062c8:	3001      	adds	r0, #1
 80062ca:	f040 808d 	bne.w	80063e8 <_printf_float+0x1d0>
 80062ce:	f04f 30ff 	mov.w	r0, #4294967295
 80062d2:	b00d      	add	sp, #52	@ 0x34
 80062d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d8:	4642      	mov	r2, r8
 80062da:	464b      	mov	r3, r9
 80062dc:	4640      	mov	r0, r8
 80062de:	4649      	mov	r1, r9
 80062e0:	f7fa fc2c 	bl	8000b3c <__aeabi_dcmpun>
 80062e4:	b140      	cbz	r0, 80062f8 <_printf_float+0xe0>
 80062e6:	464b      	mov	r3, r9
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	bfbc      	itt	lt
 80062ec:	232d      	movlt	r3, #45	@ 0x2d
 80062ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80062f2:	4a7e      	ldr	r2, [pc, #504]	@ (80064ec <_printf_float+0x2d4>)
 80062f4:	4b7e      	ldr	r3, [pc, #504]	@ (80064f0 <_printf_float+0x2d8>)
 80062f6:	e7d4      	b.n	80062a2 <_printf_float+0x8a>
 80062f8:	6863      	ldr	r3, [r4, #4]
 80062fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80062fe:	9206      	str	r2, [sp, #24]
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	d13b      	bne.n	800637c <_printf_float+0x164>
 8006304:	2306      	movs	r3, #6
 8006306:	6063      	str	r3, [r4, #4]
 8006308:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800630c:	2300      	movs	r3, #0
 800630e:	6022      	str	r2, [r4, #0]
 8006310:	9303      	str	r3, [sp, #12]
 8006312:	ab0a      	add	r3, sp, #40	@ 0x28
 8006314:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006318:	ab09      	add	r3, sp, #36	@ 0x24
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	6861      	ldr	r1, [r4, #4]
 800631e:	ec49 8b10 	vmov	d0, r8, r9
 8006322:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006326:	4628      	mov	r0, r5
 8006328:	f7ff fed6 	bl	80060d8 <__cvt>
 800632c:	9b06      	ldr	r3, [sp, #24]
 800632e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006330:	2b47      	cmp	r3, #71	@ 0x47
 8006332:	4680      	mov	r8, r0
 8006334:	d129      	bne.n	800638a <_printf_float+0x172>
 8006336:	1cc8      	adds	r0, r1, #3
 8006338:	db02      	blt.n	8006340 <_printf_float+0x128>
 800633a:	6863      	ldr	r3, [r4, #4]
 800633c:	4299      	cmp	r1, r3
 800633e:	dd41      	ble.n	80063c4 <_printf_float+0x1ac>
 8006340:	f1aa 0a02 	sub.w	sl, sl, #2
 8006344:	fa5f fa8a 	uxtb.w	sl, sl
 8006348:	3901      	subs	r1, #1
 800634a:	4652      	mov	r2, sl
 800634c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006350:	9109      	str	r1, [sp, #36]	@ 0x24
 8006352:	f7ff ff26 	bl	80061a2 <__exponent>
 8006356:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006358:	1813      	adds	r3, r2, r0
 800635a:	2a01      	cmp	r2, #1
 800635c:	4681      	mov	r9, r0
 800635e:	6123      	str	r3, [r4, #16]
 8006360:	dc02      	bgt.n	8006368 <_printf_float+0x150>
 8006362:	6822      	ldr	r2, [r4, #0]
 8006364:	07d2      	lsls	r2, r2, #31
 8006366:	d501      	bpl.n	800636c <_printf_float+0x154>
 8006368:	3301      	adds	r3, #1
 800636a:	6123      	str	r3, [r4, #16]
 800636c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0a2      	beq.n	80062ba <_printf_float+0xa2>
 8006374:	232d      	movs	r3, #45	@ 0x2d
 8006376:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800637a:	e79e      	b.n	80062ba <_printf_float+0xa2>
 800637c:	9a06      	ldr	r2, [sp, #24]
 800637e:	2a47      	cmp	r2, #71	@ 0x47
 8006380:	d1c2      	bne.n	8006308 <_printf_float+0xf0>
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1c0      	bne.n	8006308 <_printf_float+0xf0>
 8006386:	2301      	movs	r3, #1
 8006388:	e7bd      	b.n	8006306 <_printf_float+0xee>
 800638a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800638e:	d9db      	bls.n	8006348 <_printf_float+0x130>
 8006390:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006394:	d118      	bne.n	80063c8 <_printf_float+0x1b0>
 8006396:	2900      	cmp	r1, #0
 8006398:	6863      	ldr	r3, [r4, #4]
 800639a:	dd0b      	ble.n	80063b4 <_printf_float+0x19c>
 800639c:	6121      	str	r1, [r4, #16]
 800639e:	b913      	cbnz	r3, 80063a6 <_printf_float+0x18e>
 80063a0:	6822      	ldr	r2, [r4, #0]
 80063a2:	07d0      	lsls	r0, r2, #31
 80063a4:	d502      	bpl.n	80063ac <_printf_float+0x194>
 80063a6:	3301      	adds	r3, #1
 80063a8:	440b      	add	r3, r1
 80063aa:	6123      	str	r3, [r4, #16]
 80063ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 80063ae:	f04f 0900 	mov.w	r9, #0
 80063b2:	e7db      	b.n	800636c <_printf_float+0x154>
 80063b4:	b913      	cbnz	r3, 80063bc <_printf_float+0x1a4>
 80063b6:	6822      	ldr	r2, [r4, #0]
 80063b8:	07d2      	lsls	r2, r2, #31
 80063ba:	d501      	bpl.n	80063c0 <_printf_float+0x1a8>
 80063bc:	3302      	adds	r3, #2
 80063be:	e7f4      	b.n	80063aa <_printf_float+0x192>
 80063c0:	2301      	movs	r3, #1
 80063c2:	e7f2      	b.n	80063aa <_printf_float+0x192>
 80063c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80063c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063ca:	4299      	cmp	r1, r3
 80063cc:	db05      	blt.n	80063da <_printf_float+0x1c2>
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	6121      	str	r1, [r4, #16]
 80063d2:	07d8      	lsls	r0, r3, #31
 80063d4:	d5ea      	bpl.n	80063ac <_printf_float+0x194>
 80063d6:	1c4b      	adds	r3, r1, #1
 80063d8:	e7e7      	b.n	80063aa <_printf_float+0x192>
 80063da:	2900      	cmp	r1, #0
 80063dc:	bfd4      	ite	le
 80063de:	f1c1 0202 	rsble	r2, r1, #2
 80063e2:	2201      	movgt	r2, #1
 80063e4:	4413      	add	r3, r2
 80063e6:	e7e0      	b.n	80063aa <_printf_float+0x192>
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	055a      	lsls	r2, r3, #21
 80063ec:	d407      	bmi.n	80063fe <_printf_float+0x1e6>
 80063ee:	6923      	ldr	r3, [r4, #16]
 80063f0:	4642      	mov	r2, r8
 80063f2:	4631      	mov	r1, r6
 80063f4:	4628      	mov	r0, r5
 80063f6:	47b8      	blx	r7
 80063f8:	3001      	adds	r0, #1
 80063fa:	d12b      	bne.n	8006454 <_printf_float+0x23c>
 80063fc:	e767      	b.n	80062ce <_printf_float+0xb6>
 80063fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006402:	f240 80dd 	bls.w	80065c0 <_printf_float+0x3a8>
 8006406:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800640a:	2200      	movs	r2, #0
 800640c:	2300      	movs	r3, #0
 800640e:	f7fa fb63 	bl	8000ad8 <__aeabi_dcmpeq>
 8006412:	2800      	cmp	r0, #0
 8006414:	d033      	beq.n	800647e <_printf_float+0x266>
 8006416:	4a37      	ldr	r2, [pc, #220]	@ (80064f4 <_printf_float+0x2dc>)
 8006418:	2301      	movs	r3, #1
 800641a:	4631      	mov	r1, r6
 800641c:	4628      	mov	r0, r5
 800641e:	47b8      	blx	r7
 8006420:	3001      	adds	r0, #1
 8006422:	f43f af54 	beq.w	80062ce <_printf_float+0xb6>
 8006426:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800642a:	4543      	cmp	r3, r8
 800642c:	db02      	blt.n	8006434 <_printf_float+0x21c>
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	07d8      	lsls	r0, r3, #31
 8006432:	d50f      	bpl.n	8006454 <_printf_float+0x23c>
 8006434:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006438:	4631      	mov	r1, r6
 800643a:	4628      	mov	r0, r5
 800643c:	47b8      	blx	r7
 800643e:	3001      	adds	r0, #1
 8006440:	f43f af45 	beq.w	80062ce <_printf_float+0xb6>
 8006444:	f04f 0900 	mov.w	r9, #0
 8006448:	f108 38ff 	add.w	r8, r8, #4294967295
 800644c:	f104 0a1a 	add.w	sl, r4, #26
 8006450:	45c8      	cmp	r8, r9
 8006452:	dc09      	bgt.n	8006468 <_printf_float+0x250>
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	079b      	lsls	r3, r3, #30
 8006458:	f100 8103 	bmi.w	8006662 <_printf_float+0x44a>
 800645c:	68e0      	ldr	r0, [r4, #12]
 800645e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006460:	4298      	cmp	r0, r3
 8006462:	bfb8      	it	lt
 8006464:	4618      	movlt	r0, r3
 8006466:	e734      	b.n	80062d2 <_printf_float+0xba>
 8006468:	2301      	movs	r3, #1
 800646a:	4652      	mov	r2, sl
 800646c:	4631      	mov	r1, r6
 800646e:	4628      	mov	r0, r5
 8006470:	47b8      	blx	r7
 8006472:	3001      	adds	r0, #1
 8006474:	f43f af2b 	beq.w	80062ce <_printf_float+0xb6>
 8006478:	f109 0901 	add.w	r9, r9, #1
 800647c:	e7e8      	b.n	8006450 <_printf_float+0x238>
 800647e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006480:	2b00      	cmp	r3, #0
 8006482:	dc39      	bgt.n	80064f8 <_printf_float+0x2e0>
 8006484:	4a1b      	ldr	r2, [pc, #108]	@ (80064f4 <_printf_float+0x2dc>)
 8006486:	2301      	movs	r3, #1
 8006488:	4631      	mov	r1, r6
 800648a:	4628      	mov	r0, r5
 800648c:	47b8      	blx	r7
 800648e:	3001      	adds	r0, #1
 8006490:	f43f af1d 	beq.w	80062ce <_printf_float+0xb6>
 8006494:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006498:	ea59 0303 	orrs.w	r3, r9, r3
 800649c:	d102      	bne.n	80064a4 <_printf_float+0x28c>
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	07d9      	lsls	r1, r3, #31
 80064a2:	d5d7      	bpl.n	8006454 <_printf_float+0x23c>
 80064a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064a8:	4631      	mov	r1, r6
 80064aa:	4628      	mov	r0, r5
 80064ac:	47b8      	blx	r7
 80064ae:	3001      	adds	r0, #1
 80064b0:	f43f af0d 	beq.w	80062ce <_printf_float+0xb6>
 80064b4:	f04f 0a00 	mov.w	sl, #0
 80064b8:	f104 0b1a 	add.w	fp, r4, #26
 80064bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064be:	425b      	negs	r3, r3
 80064c0:	4553      	cmp	r3, sl
 80064c2:	dc01      	bgt.n	80064c8 <_printf_float+0x2b0>
 80064c4:	464b      	mov	r3, r9
 80064c6:	e793      	b.n	80063f0 <_printf_float+0x1d8>
 80064c8:	2301      	movs	r3, #1
 80064ca:	465a      	mov	r2, fp
 80064cc:	4631      	mov	r1, r6
 80064ce:	4628      	mov	r0, r5
 80064d0:	47b8      	blx	r7
 80064d2:	3001      	adds	r0, #1
 80064d4:	f43f aefb 	beq.w	80062ce <_printf_float+0xb6>
 80064d8:	f10a 0a01 	add.w	sl, sl, #1
 80064dc:	e7ee      	b.n	80064bc <_printf_float+0x2a4>
 80064de:	bf00      	nop
 80064e0:	7fefffff 	.word	0x7fefffff
 80064e4:	08009300 	.word	0x08009300
 80064e8:	08009304 	.word	0x08009304
 80064ec:	08009308 	.word	0x08009308
 80064f0:	0800930c 	.word	0x0800930c
 80064f4:	08009310 	.word	0x08009310
 80064f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80064fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80064fe:	4553      	cmp	r3, sl
 8006500:	bfa8      	it	ge
 8006502:	4653      	movge	r3, sl
 8006504:	2b00      	cmp	r3, #0
 8006506:	4699      	mov	r9, r3
 8006508:	dc36      	bgt.n	8006578 <_printf_float+0x360>
 800650a:	f04f 0b00 	mov.w	fp, #0
 800650e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006512:	f104 021a 	add.w	r2, r4, #26
 8006516:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006518:	9306      	str	r3, [sp, #24]
 800651a:	eba3 0309 	sub.w	r3, r3, r9
 800651e:	455b      	cmp	r3, fp
 8006520:	dc31      	bgt.n	8006586 <_printf_float+0x36e>
 8006522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006524:	459a      	cmp	sl, r3
 8006526:	dc3a      	bgt.n	800659e <_printf_float+0x386>
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	07da      	lsls	r2, r3, #31
 800652c:	d437      	bmi.n	800659e <_printf_float+0x386>
 800652e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006530:	ebaa 0903 	sub.w	r9, sl, r3
 8006534:	9b06      	ldr	r3, [sp, #24]
 8006536:	ebaa 0303 	sub.w	r3, sl, r3
 800653a:	4599      	cmp	r9, r3
 800653c:	bfa8      	it	ge
 800653e:	4699      	movge	r9, r3
 8006540:	f1b9 0f00 	cmp.w	r9, #0
 8006544:	dc33      	bgt.n	80065ae <_printf_float+0x396>
 8006546:	f04f 0800 	mov.w	r8, #0
 800654a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800654e:	f104 0b1a 	add.w	fp, r4, #26
 8006552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006554:	ebaa 0303 	sub.w	r3, sl, r3
 8006558:	eba3 0309 	sub.w	r3, r3, r9
 800655c:	4543      	cmp	r3, r8
 800655e:	f77f af79 	ble.w	8006454 <_printf_float+0x23c>
 8006562:	2301      	movs	r3, #1
 8006564:	465a      	mov	r2, fp
 8006566:	4631      	mov	r1, r6
 8006568:	4628      	mov	r0, r5
 800656a:	47b8      	blx	r7
 800656c:	3001      	adds	r0, #1
 800656e:	f43f aeae 	beq.w	80062ce <_printf_float+0xb6>
 8006572:	f108 0801 	add.w	r8, r8, #1
 8006576:	e7ec      	b.n	8006552 <_printf_float+0x33a>
 8006578:	4642      	mov	r2, r8
 800657a:	4631      	mov	r1, r6
 800657c:	4628      	mov	r0, r5
 800657e:	47b8      	blx	r7
 8006580:	3001      	adds	r0, #1
 8006582:	d1c2      	bne.n	800650a <_printf_float+0x2f2>
 8006584:	e6a3      	b.n	80062ce <_printf_float+0xb6>
 8006586:	2301      	movs	r3, #1
 8006588:	4631      	mov	r1, r6
 800658a:	4628      	mov	r0, r5
 800658c:	9206      	str	r2, [sp, #24]
 800658e:	47b8      	blx	r7
 8006590:	3001      	adds	r0, #1
 8006592:	f43f ae9c 	beq.w	80062ce <_printf_float+0xb6>
 8006596:	9a06      	ldr	r2, [sp, #24]
 8006598:	f10b 0b01 	add.w	fp, fp, #1
 800659c:	e7bb      	b.n	8006516 <_printf_float+0x2fe>
 800659e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065a2:	4631      	mov	r1, r6
 80065a4:	4628      	mov	r0, r5
 80065a6:	47b8      	blx	r7
 80065a8:	3001      	adds	r0, #1
 80065aa:	d1c0      	bne.n	800652e <_printf_float+0x316>
 80065ac:	e68f      	b.n	80062ce <_printf_float+0xb6>
 80065ae:	9a06      	ldr	r2, [sp, #24]
 80065b0:	464b      	mov	r3, r9
 80065b2:	4442      	add	r2, r8
 80065b4:	4631      	mov	r1, r6
 80065b6:	4628      	mov	r0, r5
 80065b8:	47b8      	blx	r7
 80065ba:	3001      	adds	r0, #1
 80065bc:	d1c3      	bne.n	8006546 <_printf_float+0x32e>
 80065be:	e686      	b.n	80062ce <_printf_float+0xb6>
 80065c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80065c4:	f1ba 0f01 	cmp.w	sl, #1
 80065c8:	dc01      	bgt.n	80065ce <_printf_float+0x3b6>
 80065ca:	07db      	lsls	r3, r3, #31
 80065cc:	d536      	bpl.n	800663c <_printf_float+0x424>
 80065ce:	2301      	movs	r3, #1
 80065d0:	4642      	mov	r2, r8
 80065d2:	4631      	mov	r1, r6
 80065d4:	4628      	mov	r0, r5
 80065d6:	47b8      	blx	r7
 80065d8:	3001      	adds	r0, #1
 80065da:	f43f ae78 	beq.w	80062ce <_printf_float+0xb6>
 80065de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065e2:	4631      	mov	r1, r6
 80065e4:	4628      	mov	r0, r5
 80065e6:	47b8      	blx	r7
 80065e8:	3001      	adds	r0, #1
 80065ea:	f43f ae70 	beq.w	80062ce <_printf_float+0xb6>
 80065ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80065f2:	2200      	movs	r2, #0
 80065f4:	2300      	movs	r3, #0
 80065f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065fa:	f7fa fa6d 	bl	8000ad8 <__aeabi_dcmpeq>
 80065fe:	b9c0      	cbnz	r0, 8006632 <_printf_float+0x41a>
 8006600:	4653      	mov	r3, sl
 8006602:	f108 0201 	add.w	r2, r8, #1
 8006606:	4631      	mov	r1, r6
 8006608:	4628      	mov	r0, r5
 800660a:	47b8      	blx	r7
 800660c:	3001      	adds	r0, #1
 800660e:	d10c      	bne.n	800662a <_printf_float+0x412>
 8006610:	e65d      	b.n	80062ce <_printf_float+0xb6>
 8006612:	2301      	movs	r3, #1
 8006614:	465a      	mov	r2, fp
 8006616:	4631      	mov	r1, r6
 8006618:	4628      	mov	r0, r5
 800661a:	47b8      	blx	r7
 800661c:	3001      	adds	r0, #1
 800661e:	f43f ae56 	beq.w	80062ce <_printf_float+0xb6>
 8006622:	f108 0801 	add.w	r8, r8, #1
 8006626:	45d0      	cmp	r8, sl
 8006628:	dbf3      	blt.n	8006612 <_printf_float+0x3fa>
 800662a:	464b      	mov	r3, r9
 800662c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006630:	e6df      	b.n	80063f2 <_printf_float+0x1da>
 8006632:	f04f 0800 	mov.w	r8, #0
 8006636:	f104 0b1a 	add.w	fp, r4, #26
 800663a:	e7f4      	b.n	8006626 <_printf_float+0x40e>
 800663c:	2301      	movs	r3, #1
 800663e:	4642      	mov	r2, r8
 8006640:	e7e1      	b.n	8006606 <_printf_float+0x3ee>
 8006642:	2301      	movs	r3, #1
 8006644:	464a      	mov	r2, r9
 8006646:	4631      	mov	r1, r6
 8006648:	4628      	mov	r0, r5
 800664a:	47b8      	blx	r7
 800664c:	3001      	adds	r0, #1
 800664e:	f43f ae3e 	beq.w	80062ce <_printf_float+0xb6>
 8006652:	f108 0801 	add.w	r8, r8, #1
 8006656:	68e3      	ldr	r3, [r4, #12]
 8006658:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800665a:	1a5b      	subs	r3, r3, r1
 800665c:	4543      	cmp	r3, r8
 800665e:	dcf0      	bgt.n	8006642 <_printf_float+0x42a>
 8006660:	e6fc      	b.n	800645c <_printf_float+0x244>
 8006662:	f04f 0800 	mov.w	r8, #0
 8006666:	f104 0919 	add.w	r9, r4, #25
 800666a:	e7f4      	b.n	8006656 <_printf_float+0x43e>

0800666c <_printf_common>:
 800666c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006670:	4616      	mov	r6, r2
 8006672:	4698      	mov	r8, r3
 8006674:	688a      	ldr	r2, [r1, #8]
 8006676:	690b      	ldr	r3, [r1, #16]
 8006678:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800667c:	4293      	cmp	r3, r2
 800667e:	bfb8      	it	lt
 8006680:	4613      	movlt	r3, r2
 8006682:	6033      	str	r3, [r6, #0]
 8006684:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006688:	4607      	mov	r7, r0
 800668a:	460c      	mov	r4, r1
 800668c:	b10a      	cbz	r2, 8006692 <_printf_common+0x26>
 800668e:	3301      	adds	r3, #1
 8006690:	6033      	str	r3, [r6, #0]
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	0699      	lsls	r1, r3, #26
 8006696:	bf42      	ittt	mi
 8006698:	6833      	ldrmi	r3, [r6, #0]
 800669a:	3302      	addmi	r3, #2
 800669c:	6033      	strmi	r3, [r6, #0]
 800669e:	6825      	ldr	r5, [r4, #0]
 80066a0:	f015 0506 	ands.w	r5, r5, #6
 80066a4:	d106      	bne.n	80066b4 <_printf_common+0x48>
 80066a6:	f104 0a19 	add.w	sl, r4, #25
 80066aa:	68e3      	ldr	r3, [r4, #12]
 80066ac:	6832      	ldr	r2, [r6, #0]
 80066ae:	1a9b      	subs	r3, r3, r2
 80066b0:	42ab      	cmp	r3, r5
 80066b2:	dc26      	bgt.n	8006702 <_printf_common+0x96>
 80066b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80066b8:	6822      	ldr	r2, [r4, #0]
 80066ba:	3b00      	subs	r3, #0
 80066bc:	bf18      	it	ne
 80066be:	2301      	movne	r3, #1
 80066c0:	0692      	lsls	r2, r2, #26
 80066c2:	d42b      	bmi.n	800671c <_printf_common+0xb0>
 80066c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80066c8:	4641      	mov	r1, r8
 80066ca:	4638      	mov	r0, r7
 80066cc:	47c8      	blx	r9
 80066ce:	3001      	adds	r0, #1
 80066d0:	d01e      	beq.n	8006710 <_printf_common+0xa4>
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	6922      	ldr	r2, [r4, #16]
 80066d6:	f003 0306 	and.w	r3, r3, #6
 80066da:	2b04      	cmp	r3, #4
 80066dc:	bf02      	ittt	eq
 80066de:	68e5      	ldreq	r5, [r4, #12]
 80066e0:	6833      	ldreq	r3, [r6, #0]
 80066e2:	1aed      	subeq	r5, r5, r3
 80066e4:	68a3      	ldr	r3, [r4, #8]
 80066e6:	bf0c      	ite	eq
 80066e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066ec:	2500      	movne	r5, #0
 80066ee:	4293      	cmp	r3, r2
 80066f0:	bfc4      	itt	gt
 80066f2:	1a9b      	subgt	r3, r3, r2
 80066f4:	18ed      	addgt	r5, r5, r3
 80066f6:	2600      	movs	r6, #0
 80066f8:	341a      	adds	r4, #26
 80066fa:	42b5      	cmp	r5, r6
 80066fc:	d11a      	bne.n	8006734 <_printf_common+0xc8>
 80066fe:	2000      	movs	r0, #0
 8006700:	e008      	b.n	8006714 <_printf_common+0xa8>
 8006702:	2301      	movs	r3, #1
 8006704:	4652      	mov	r2, sl
 8006706:	4641      	mov	r1, r8
 8006708:	4638      	mov	r0, r7
 800670a:	47c8      	blx	r9
 800670c:	3001      	adds	r0, #1
 800670e:	d103      	bne.n	8006718 <_printf_common+0xac>
 8006710:	f04f 30ff 	mov.w	r0, #4294967295
 8006714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006718:	3501      	adds	r5, #1
 800671a:	e7c6      	b.n	80066aa <_printf_common+0x3e>
 800671c:	18e1      	adds	r1, r4, r3
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	2030      	movs	r0, #48	@ 0x30
 8006722:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006726:	4422      	add	r2, r4
 8006728:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800672c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006730:	3302      	adds	r3, #2
 8006732:	e7c7      	b.n	80066c4 <_printf_common+0x58>
 8006734:	2301      	movs	r3, #1
 8006736:	4622      	mov	r2, r4
 8006738:	4641      	mov	r1, r8
 800673a:	4638      	mov	r0, r7
 800673c:	47c8      	blx	r9
 800673e:	3001      	adds	r0, #1
 8006740:	d0e6      	beq.n	8006710 <_printf_common+0xa4>
 8006742:	3601      	adds	r6, #1
 8006744:	e7d9      	b.n	80066fa <_printf_common+0x8e>
	...

08006748 <_printf_i>:
 8006748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800674c:	7e0f      	ldrb	r7, [r1, #24]
 800674e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006750:	2f78      	cmp	r7, #120	@ 0x78
 8006752:	4691      	mov	r9, r2
 8006754:	4680      	mov	r8, r0
 8006756:	460c      	mov	r4, r1
 8006758:	469a      	mov	sl, r3
 800675a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800675e:	d807      	bhi.n	8006770 <_printf_i+0x28>
 8006760:	2f62      	cmp	r7, #98	@ 0x62
 8006762:	d80a      	bhi.n	800677a <_printf_i+0x32>
 8006764:	2f00      	cmp	r7, #0
 8006766:	f000 80d2 	beq.w	800690e <_printf_i+0x1c6>
 800676a:	2f58      	cmp	r7, #88	@ 0x58
 800676c:	f000 80b9 	beq.w	80068e2 <_printf_i+0x19a>
 8006770:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006774:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006778:	e03a      	b.n	80067f0 <_printf_i+0xa8>
 800677a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800677e:	2b15      	cmp	r3, #21
 8006780:	d8f6      	bhi.n	8006770 <_printf_i+0x28>
 8006782:	a101      	add	r1, pc, #4	@ (adr r1, 8006788 <_printf_i+0x40>)
 8006784:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006788:	080067e1 	.word	0x080067e1
 800678c:	080067f5 	.word	0x080067f5
 8006790:	08006771 	.word	0x08006771
 8006794:	08006771 	.word	0x08006771
 8006798:	08006771 	.word	0x08006771
 800679c:	08006771 	.word	0x08006771
 80067a0:	080067f5 	.word	0x080067f5
 80067a4:	08006771 	.word	0x08006771
 80067a8:	08006771 	.word	0x08006771
 80067ac:	08006771 	.word	0x08006771
 80067b0:	08006771 	.word	0x08006771
 80067b4:	080068f5 	.word	0x080068f5
 80067b8:	0800681f 	.word	0x0800681f
 80067bc:	080068af 	.word	0x080068af
 80067c0:	08006771 	.word	0x08006771
 80067c4:	08006771 	.word	0x08006771
 80067c8:	08006917 	.word	0x08006917
 80067cc:	08006771 	.word	0x08006771
 80067d0:	0800681f 	.word	0x0800681f
 80067d4:	08006771 	.word	0x08006771
 80067d8:	08006771 	.word	0x08006771
 80067dc:	080068b7 	.word	0x080068b7
 80067e0:	6833      	ldr	r3, [r6, #0]
 80067e2:	1d1a      	adds	r2, r3, #4
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6032      	str	r2, [r6, #0]
 80067e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067f0:	2301      	movs	r3, #1
 80067f2:	e09d      	b.n	8006930 <_printf_i+0x1e8>
 80067f4:	6833      	ldr	r3, [r6, #0]
 80067f6:	6820      	ldr	r0, [r4, #0]
 80067f8:	1d19      	adds	r1, r3, #4
 80067fa:	6031      	str	r1, [r6, #0]
 80067fc:	0606      	lsls	r6, r0, #24
 80067fe:	d501      	bpl.n	8006804 <_printf_i+0xbc>
 8006800:	681d      	ldr	r5, [r3, #0]
 8006802:	e003      	b.n	800680c <_printf_i+0xc4>
 8006804:	0645      	lsls	r5, r0, #25
 8006806:	d5fb      	bpl.n	8006800 <_printf_i+0xb8>
 8006808:	f9b3 5000 	ldrsh.w	r5, [r3]
 800680c:	2d00      	cmp	r5, #0
 800680e:	da03      	bge.n	8006818 <_printf_i+0xd0>
 8006810:	232d      	movs	r3, #45	@ 0x2d
 8006812:	426d      	negs	r5, r5
 8006814:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006818:	4859      	ldr	r0, [pc, #356]	@ (8006980 <_printf_i+0x238>)
 800681a:	230a      	movs	r3, #10
 800681c:	e011      	b.n	8006842 <_printf_i+0xfa>
 800681e:	6821      	ldr	r1, [r4, #0]
 8006820:	6833      	ldr	r3, [r6, #0]
 8006822:	0608      	lsls	r0, r1, #24
 8006824:	f853 5b04 	ldr.w	r5, [r3], #4
 8006828:	d402      	bmi.n	8006830 <_printf_i+0xe8>
 800682a:	0649      	lsls	r1, r1, #25
 800682c:	bf48      	it	mi
 800682e:	b2ad      	uxthmi	r5, r5
 8006830:	2f6f      	cmp	r7, #111	@ 0x6f
 8006832:	4853      	ldr	r0, [pc, #332]	@ (8006980 <_printf_i+0x238>)
 8006834:	6033      	str	r3, [r6, #0]
 8006836:	bf14      	ite	ne
 8006838:	230a      	movne	r3, #10
 800683a:	2308      	moveq	r3, #8
 800683c:	2100      	movs	r1, #0
 800683e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006842:	6866      	ldr	r6, [r4, #4]
 8006844:	60a6      	str	r6, [r4, #8]
 8006846:	2e00      	cmp	r6, #0
 8006848:	bfa2      	ittt	ge
 800684a:	6821      	ldrge	r1, [r4, #0]
 800684c:	f021 0104 	bicge.w	r1, r1, #4
 8006850:	6021      	strge	r1, [r4, #0]
 8006852:	b90d      	cbnz	r5, 8006858 <_printf_i+0x110>
 8006854:	2e00      	cmp	r6, #0
 8006856:	d04b      	beq.n	80068f0 <_printf_i+0x1a8>
 8006858:	4616      	mov	r6, r2
 800685a:	fbb5 f1f3 	udiv	r1, r5, r3
 800685e:	fb03 5711 	mls	r7, r3, r1, r5
 8006862:	5dc7      	ldrb	r7, [r0, r7]
 8006864:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006868:	462f      	mov	r7, r5
 800686a:	42bb      	cmp	r3, r7
 800686c:	460d      	mov	r5, r1
 800686e:	d9f4      	bls.n	800685a <_printf_i+0x112>
 8006870:	2b08      	cmp	r3, #8
 8006872:	d10b      	bne.n	800688c <_printf_i+0x144>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	07df      	lsls	r7, r3, #31
 8006878:	d508      	bpl.n	800688c <_printf_i+0x144>
 800687a:	6923      	ldr	r3, [r4, #16]
 800687c:	6861      	ldr	r1, [r4, #4]
 800687e:	4299      	cmp	r1, r3
 8006880:	bfde      	ittt	le
 8006882:	2330      	movle	r3, #48	@ 0x30
 8006884:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006888:	f106 36ff 	addle.w	r6, r6, #4294967295
 800688c:	1b92      	subs	r2, r2, r6
 800688e:	6122      	str	r2, [r4, #16]
 8006890:	f8cd a000 	str.w	sl, [sp]
 8006894:	464b      	mov	r3, r9
 8006896:	aa03      	add	r2, sp, #12
 8006898:	4621      	mov	r1, r4
 800689a:	4640      	mov	r0, r8
 800689c:	f7ff fee6 	bl	800666c <_printf_common>
 80068a0:	3001      	adds	r0, #1
 80068a2:	d14a      	bne.n	800693a <_printf_i+0x1f2>
 80068a4:	f04f 30ff 	mov.w	r0, #4294967295
 80068a8:	b004      	add	sp, #16
 80068aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	f043 0320 	orr.w	r3, r3, #32
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	4833      	ldr	r0, [pc, #204]	@ (8006984 <_printf_i+0x23c>)
 80068b8:	2778      	movs	r7, #120	@ 0x78
 80068ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	6831      	ldr	r1, [r6, #0]
 80068c2:	061f      	lsls	r7, r3, #24
 80068c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80068c8:	d402      	bmi.n	80068d0 <_printf_i+0x188>
 80068ca:	065f      	lsls	r7, r3, #25
 80068cc:	bf48      	it	mi
 80068ce:	b2ad      	uxthmi	r5, r5
 80068d0:	6031      	str	r1, [r6, #0]
 80068d2:	07d9      	lsls	r1, r3, #31
 80068d4:	bf44      	itt	mi
 80068d6:	f043 0320 	orrmi.w	r3, r3, #32
 80068da:	6023      	strmi	r3, [r4, #0]
 80068dc:	b11d      	cbz	r5, 80068e6 <_printf_i+0x19e>
 80068de:	2310      	movs	r3, #16
 80068e0:	e7ac      	b.n	800683c <_printf_i+0xf4>
 80068e2:	4827      	ldr	r0, [pc, #156]	@ (8006980 <_printf_i+0x238>)
 80068e4:	e7e9      	b.n	80068ba <_printf_i+0x172>
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	f023 0320 	bic.w	r3, r3, #32
 80068ec:	6023      	str	r3, [r4, #0]
 80068ee:	e7f6      	b.n	80068de <_printf_i+0x196>
 80068f0:	4616      	mov	r6, r2
 80068f2:	e7bd      	b.n	8006870 <_printf_i+0x128>
 80068f4:	6833      	ldr	r3, [r6, #0]
 80068f6:	6825      	ldr	r5, [r4, #0]
 80068f8:	6961      	ldr	r1, [r4, #20]
 80068fa:	1d18      	adds	r0, r3, #4
 80068fc:	6030      	str	r0, [r6, #0]
 80068fe:	062e      	lsls	r6, r5, #24
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	d501      	bpl.n	8006908 <_printf_i+0x1c0>
 8006904:	6019      	str	r1, [r3, #0]
 8006906:	e002      	b.n	800690e <_printf_i+0x1c6>
 8006908:	0668      	lsls	r0, r5, #25
 800690a:	d5fb      	bpl.n	8006904 <_printf_i+0x1bc>
 800690c:	8019      	strh	r1, [r3, #0]
 800690e:	2300      	movs	r3, #0
 8006910:	6123      	str	r3, [r4, #16]
 8006912:	4616      	mov	r6, r2
 8006914:	e7bc      	b.n	8006890 <_printf_i+0x148>
 8006916:	6833      	ldr	r3, [r6, #0]
 8006918:	1d1a      	adds	r2, r3, #4
 800691a:	6032      	str	r2, [r6, #0]
 800691c:	681e      	ldr	r6, [r3, #0]
 800691e:	6862      	ldr	r2, [r4, #4]
 8006920:	2100      	movs	r1, #0
 8006922:	4630      	mov	r0, r6
 8006924:	f7f9 fc5c 	bl	80001e0 <memchr>
 8006928:	b108      	cbz	r0, 800692e <_printf_i+0x1e6>
 800692a:	1b80      	subs	r0, r0, r6
 800692c:	6060      	str	r0, [r4, #4]
 800692e:	6863      	ldr	r3, [r4, #4]
 8006930:	6123      	str	r3, [r4, #16]
 8006932:	2300      	movs	r3, #0
 8006934:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006938:	e7aa      	b.n	8006890 <_printf_i+0x148>
 800693a:	6923      	ldr	r3, [r4, #16]
 800693c:	4632      	mov	r2, r6
 800693e:	4649      	mov	r1, r9
 8006940:	4640      	mov	r0, r8
 8006942:	47d0      	blx	sl
 8006944:	3001      	adds	r0, #1
 8006946:	d0ad      	beq.n	80068a4 <_printf_i+0x15c>
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	079b      	lsls	r3, r3, #30
 800694c:	d413      	bmi.n	8006976 <_printf_i+0x22e>
 800694e:	68e0      	ldr	r0, [r4, #12]
 8006950:	9b03      	ldr	r3, [sp, #12]
 8006952:	4298      	cmp	r0, r3
 8006954:	bfb8      	it	lt
 8006956:	4618      	movlt	r0, r3
 8006958:	e7a6      	b.n	80068a8 <_printf_i+0x160>
 800695a:	2301      	movs	r3, #1
 800695c:	4632      	mov	r2, r6
 800695e:	4649      	mov	r1, r9
 8006960:	4640      	mov	r0, r8
 8006962:	47d0      	blx	sl
 8006964:	3001      	adds	r0, #1
 8006966:	d09d      	beq.n	80068a4 <_printf_i+0x15c>
 8006968:	3501      	adds	r5, #1
 800696a:	68e3      	ldr	r3, [r4, #12]
 800696c:	9903      	ldr	r1, [sp, #12]
 800696e:	1a5b      	subs	r3, r3, r1
 8006970:	42ab      	cmp	r3, r5
 8006972:	dcf2      	bgt.n	800695a <_printf_i+0x212>
 8006974:	e7eb      	b.n	800694e <_printf_i+0x206>
 8006976:	2500      	movs	r5, #0
 8006978:	f104 0619 	add.w	r6, r4, #25
 800697c:	e7f5      	b.n	800696a <_printf_i+0x222>
 800697e:	bf00      	nop
 8006980:	08009312 	.word	0x08009312
 8006984:	08009323 	.word	0x08009323

08006988 <std>:
 8006988:	2300      	movs	r3, #0
 800698a:	b510      	push	{r4, lr}
 800698c:	4604      	mov	r4, r0
 800698e:	e9c0 3300 	strd	r3, r3, [r0]
 8006992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006996:	6083      	str	r3, [r0, #8]
 8006998:	8181      	strh	r1, [r0, #12]
 800699a:	6643      	str	r3, [r0, #100]	@ 0x64
 800699c:	81c2      	strh	r2, [r0, #14]
 800699e:	6183      	str	r3, [r0, #24]
 80069a0:	4619      	mov	r1, r3
 80069a2:	2208      	movs	r2, #8
 80069a4:	305c      	adds	r0, #92	@ 0x5c
 80069a6:	f000 f928 	bl	8006bfa <memset>
 80069aa:	4b0d      	ldr	r3, [pc, #52]	@ (80069e0 <std+0x58>)
 80069ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80069ae:	4b0d      	ldr	r3, [pc, #52]	@ (80069e4 <std+0x5c>)
 80069b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80069b2:	4b0d      	ldr	r3, [pc, #52]	@ (80069e8 <std+0x60>)
 80069b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80069b6:	4b0d      	ldr	r3, [pc, #52]	@ (80069ec <std+0x64>)
 80069b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80069ba:	4b0d      	ldr	r3, [pc, #52]	@ (80069f0 <std+0x68>)
 80069bc:	6224      	str	r4, [r4, #32]
 80069be:	429c      	cmp	r4, r3
 80069c0:	d006      	beq.n	80069d0 <std+0x48>
 80069c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80069c6:	4294      	cmp	r4, r2
 80069c8:	d002      	beq.n	80069d0 <std+0x48>
 80069ca:	33d0      	adds	r3, #208	@ 0xd0
 80069cc:	429c      	cmp	r4, r3
 80069ce:	d105      	bne.n	80069dc <std+0x54>
 80069d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80069d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069d8:	f000 b98c 	b.w	8006cf4 <__retarget_lock_init_recursive>
 80069dc:	bd10      	pop	{r4, pc}
 80069de:	bf00      	nop
 80069e0:	08006b75 	.word	0x08006b75
 80069e4:	08006b97 	.word	0x08006b97
 80069e8:	08006bcf 	.word	0x08006bcf
 80069ec:	08006bf3 	.word	0x08006bf3
 80069f0:	20000348 	.word	0x20000348

080069f4 <stdio_exit_handler>:
 80069f4:	4a02      	ldr	r2, [pc, #8]	@ (8006a00 <stdio_exit_handler+0xc>)
 80069f6:	4903      	ldr	r1, [pc, #12]	@ (8006a04 <stdio_exit_handler+0x10>)
 80069f8:	4803      	ldr	r0, [pc, #12]	@ (8006a08 <stdio_exit_handler+0x14>)
 80069fa:	f000 b869 	b.w	8006ad0 <_fwalk_sglue>
 80069fe:	bf00      	nop
 8006a00:	2000000c 	.word	0x2000000c
 8006a04:	08008655 	.word	0x08008655
 8006a08:	2000001c 	.word	0x2000001c

08006a0c <cleanup_stdio>:
 8006a0c:	6841      	ldr	r1, [r0, #4]
 8006a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8006a40 <cleanup_stdio+0x34>)
 8006a10:	4299      	cmp	r1, r3
 8006a12:	b510      	push	{r4, lr}
 8006a14:	4604      	mov	r4, r0
 8006a16:	d001      	beq.n	8006a1c <cleanup_stdio+0x10>
 8006a18:	f001 fe1c 	bl	8008654 <_fflush_r>
 8006a1c:	68a1      	ldr	r1, [r4, #8]
 8006a1e:	4b09      	ldr	r3, [pc, #36]	@ (8006a44 <cleanup_stdio+0x38>)
 8006a20:	4299      	cmp	r1, r3
 8006a22:	d002      	beq.n	8006a2a <cleanup_stdio+0x1e>
 8006a24:	4620      	mov	r0, r4
 8006a26:	f001 fe15 	bl	8008654 <_fflush_r>
 8006a2a:	68e1      	ldr	r1, [r4, #12]
 8006a2c:	4b06      	ldr	r3, [pc, #24]	@ (8006a48 <cleanup_stdio+0x3c>)
 8006a2e:	4299      	cmp	r1, r3
 8006a30:	d004      	beq.n	8006a3c <cleanup_stdio+0x30>
 8006a32:	4620      	mov	r0, r4
 8006a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a38:	f001 be0c 	b.w	8008654 <_fflush_r>
 8006a3c:	bd10      	pop	{r4, pc}
 8006a3e:	bf00      	nop
 8006a40:	20000348 	.word	0x20000348
 8006a44:	200003b0 	.word	0x200003b0
 8006a48:	20000418 	.word	0x20000418

08006a4c <global_stdio_init.part.0>:
 8006a4c:	b510      	push	{r4, lr}
 8006a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a7c <global_stdio_init.part.0+0x30>)
 8006a50:	4c0b      	ldr	r4, [pc, #44]	@ (8006a80 <global_stdio_init.part.0+0x34>)
 8006a52:	4a0c      	ldr	r2, [pc, #48]	@ (8006a84 <global_stdio_init.part.0+0x38>)
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	4620      	mov	r0, r4
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2104      	movs	r1, #4
 8006a5c:	f7ff ff94 	bl	8006988 <std>
 8006a60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a64:	2201      	movs	r2, #1
 8006a66:	2109      	movs	r1, #9
 8006a68:	f7ff ff8e 	bl	8006988 <std>
 8006a6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a70:	2202      	movs	r2, #2
 8006a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a76:	2112      	movs	r1, #18
 8006a78:	f7ff bf86 	b.w	8006988 <std>
 8006a7c:	20000480 	.word	0x20000480
 8006a80:	20000348 	.word	0x20000348
 8006a84:	080069f5 	.word	0x080069f5

08006a88 <__sfp_lock_acquire>:
 8006a88:	4801      	ldr	r0, [pc, #4]	@ (8006a90 <__sfp_lock_acquire+0x8>)
 8006a8a:	f000 b934 	b.w	8006cf6 <__retarget_lock_acquire_recursive>
 8006a8e:	bf00      	nop
 8006a90:	20000489 	.word	0x20000489

08006a94 <__sfp_lock_release>:
 8006a94:	4801      	ldr	r0, [pc, #4]	@ (8006a9c <__sfp_lock_release+0x8>)
 8006a96:	f000 b92f 	b.w	8006cf8 <__retarget_lock_release_recursive>
 8006a9a:	bf00      	nop
 8006a9c:	20000489 	.word	0x20000489

08006aa0 <__sinit>:
 8006aa0:	b510      	push	{r4, lr}
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	f7ff fff0 	bl	8006a88 <__sfp_lock_acquire>
 8006aa8:	6a23      	ldr	r3, [r4, #32]
 8006aaa:	b11b      	cbz	r3, 8006ab4 <__sinit+0x14>
 8006aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ab0:	f7ff bff0 	b.w	8006a94 <__sfp_lock_release>
 8006ab4:	4b04      	ldr	r3, [pc, #16]	@ (8006ac8 <__sinit+0x28>)
 8006ab6:	6223      	str	r3, [r4, #32]
 8006ab8:	4b04      	ldr	r3, [pc, #16]	@ (8006acc <__sinit+0x2c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1f5      	bne.n	8006aac <__sinit+0xc>
 8006ac0:	f7ff ffc4 	bl	8006a4c <global_stdio_init.part.0>
 8006ac4:	e7f2      	b.n	8006aac <__sinit+0xc>
 8006ac6:	bf00      	nop
 8006ac8:	08006a0d 	.word	0x08006a0d
 8006acc:	20000480 	.word	0x20000480

08006ad0 <_fwalk_sglue>:
 8006ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	4688      	mov	r8, r1
 8006ad8:	4614      	mov	r4, r2
 8006ada:	2600      	movs	r6, #0
 8006adc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ae0:	f1b9 0901 	subs.w	r9, r9, #1
 8006ae4:	d505      	bpl.n	8006af2 <_fwalk_sglue+0x22>
 8006ae6:	6824      	ldr	r4, [r4, #0]
 8006ae8:	2c00      	cmp	r4, #0
 8006aea:	d1f7      	bne.n	8006adc <_fwalk_sglue+0xc>
 8006aec:	4630      	mov	r0, r6
 8006aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006af2:	89ab      	ldrh	r3, [r5, #12]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d907      	bls.n	8006b08 <_fwalk_sglue+0x38>
 8006af8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006afc:	3301      	adds	r3, #1
 8006afe:	d003      	beq.n	8006b08 <_fwalk_sglue+0x38>
 8006b00:	4629      	mov	r1, r5
 8006b02:	4638      	mov	r0, r7
 8006b04:	47c0      	blx	r8
 8006b06:	4306      	orrs	r6, r0
 8006b08:	3568      	adds	r5, #104	@ 0x68
 8006b0a:	e7e9      	b.n	8006ae0 <_fwalk_sglue+0x10>

08006b0c <sniprintf>:
 8006b0c:	b40c      	push	{r2, r3}
 8006b0e:	b530      	push	{r4, r5, lr}
 8006b10:	4b17      	ldr	r3, [pc, #92]	@ (8006b70 <sniprintf+0x64>)
 8006b12:	1e0c      	subs	r4, r1, #0
 8006b14:	681d      	ldr	r5, [r3, #0]
 8006b16:	b09d      	sub	sp, #116	@ 0x74
 8006b18:	da08      	bge.n	8006b2c <sniprintf+0x20>
 8006b1a:	238b      	movs	r3, #139	@ 0x8b
 8006b1c:	602b      	str	r3, [r5, #0]
 8006b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b22:	b01d      	add	sp, #116	@ 0x74
 8006b24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b28:	b002      	add	sp, #8
 8006b2a:	4770      	bx	lr
 8006b2c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006b30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006b34:	bf14      	ite	ne
 8006b36:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006b3a:	4623      	moveq	r3, r4
 8006b3c:	9304      	str	r3, [sp, #16]
 8006b3e:	9307      	str	r3, [sp, #28]
 8006b40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006b44:	9002      	str	r0, [sp, #8]
 8006b46:	9006      	str	r0, [sp, #24]
 8006b48:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006b4c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006b4e:	ab21      	add	r3, sp, #132	@ 0x84
 8006b50:	a902      	add	r1, sp, #8
 8006b52:	4628      	mov	r0, r5
 8006b54:	9301      	str	r3, [sp, #4]
 8006b56:	f001 fbfd 	bl	8008354 <_svfiprintf_r>
 8006b5a:	1c43      	adds	r3, r0, #1
 8006b5c:	bfbc      	itt	lt
 8006b5e:	238b      	movlt	r3, #139	@ 0x8b
 8006b60:	602b      	strlt	r3, [r5, #0]
 8006b62:	2c00      	cmp	r4, #0
 8006b64:	d0dd      	beq.n	8006b22 <sniprintf+0x16>
 8006b66:	9b02      	ldr	r3, [sp, #8]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	701a      	strb	r2, [r3, #0]
 8006b6c:	e7d9      	b.n	8006b22 <sniprintf+0x16>
 8006b6e:	bf00      	nop
 8006b70:	20000018 	.word	0x20000018

08006b74 <__sread>:
 8006b74:	b510      	push	{r4, lr}
 8006b76:	460c      	mov	r4, r1
 8006b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b7c:	f000 f86c 	bl	8006c58 <_read_r>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	bfab      	itete	ge
 8006b84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b86:	89a3      	ldrhlt	r3, [r4, #12]
 8006b88:	181b      	addge	r3, r3, r0
 8006b8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b8e:	bfac      	ite	ge
 8006b90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b92:	81a3      	strhlt	r3, [r4, #12]
 8006b94:	bd10      	pop	{r4, pc}

08006b96 <__swrite>:
 8006b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b9a:	461f      	mov	r7, r3
 8006b9c:	898b      	ldrh	r3, [r1, #12]
 8006b9e:	05db      	lsls	r3, r3, #23
 8006ba0:	4605      	mov	r5, r0
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	4616      	mov	r6, r2
 8006ba6:	d505      	bpl.n	8006bb4 <__swrite+0x1e>
 8006ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bac:	2302      	movs	r3, #2
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f000 f840 	bl	8006c34 <_lseek_r>
 8006bb4:	89a3      	ldrh	r3, [r4, #12]
 8006bb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bbe:	81a3      	strh	r3, [r4, #12]
 8006bc0:	4632      	mov	r2, r6
 8006bc2:	463b      	mov	r3, r7
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bca:	f000 b857 	b.w	8006c7c <_write_r>

08006bce <__sseek>:
 8006bce:	b510      	push	{r4, lr}
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd6:	f000 f82d 	bl	8006c34 <_lseek_r>
 8006bda:	1c43      	adds	r3, r0, #1
 8006bdc:	89a3      	ldrh	r3, [r4, #12]
 8006bde:	bf15      	itete	ne
 8006be0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006be2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006be6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006bea:	81a3      	strheq	r3, [r4, #12]
 8006bec:	bf18      	it	ne
 8006bee:	81a3      	strhne	r3, [r4, #12]
 8006bf0:	bd10      	pop	{r4, pc}

08006bf2 <__sclose>:
 8006bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bf6:	f000 b80d 	b.w	8006c14 <_close_r>

08006bfa <memset>:
 8006bfa:	4402      	add	r2, r0
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d100      	bne.n	8006c04 <memset+0xa>
 8006c02:	4770      	bx	lr
 8006c04:	f803 1b01 	strb.w	r1, [r3], #1
 8006c08:	e7f9      	b.n	8006bfe <memset+0x4>
	...

08006c0c <_localeconv_r>:
 8006c0c:	4800      	ldr	r0, [pc, #0]	@ (8006c10 <_localeconv_r+0x4>)
 8006c0e:	4770      	bx	lr
 8006c10:	20000158 	.word	0x20000158

08006c14 <_close_r>:
 8006c14:	b538      	push	{r3, r4, r5, lr}
 8006c16:	4d06      	ldr	r5, [pc, #24]	@ (8006c30 <_close_r+0x1c>)
 8006c18:	2300      	movs	r3, #0
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	4608      	mov	r0, r1
 8006c1e:	602b      	str	r3, [r5, #0]
 8006c20:	f7fb f9be 	bl	8001fa0 <_close>
 8006c24:	1c43      	adds	r3, r0, #1
 8006c26:	d102      	bne.n	8006c2e <_close_r+0x1a>
 8006c28:	682b      	ldr	r3, [r5, #0]
 8006c2a:	b103      	cbz	r3, 8006c2e <_close_r+0x1a>
 8006c2c:	6023      	str	r3, [r4, #0]
 8006c2e:	bd38      	pop	{r3, r4, r5, pc}
 8006c30:	20000484 	.word	0x20000484

08006c34 <_lseek_r>:
 8006c34:	b538      	push	{r3, r4, r5, lr}
 8006c36:	4d07      	ldr	r5, [pc, #28]	@ (8006c54 <_lseek_r+0x20>)
 8006c38:	4604      	mov	r4, r0
 8006c3a:	4608      	mov	r0, r1
 8006c3c:	4611      	mov	r1, r2
 8006c3e:	2200      	movs	r2, #0
 8006c40:	602a      	str	r2, [r5, #0]
 8006c42:	461a      	mov	r2, r3
 8006c44:	f7fb f9d3 	bl	8001fee <_lseek>
 8006c48:	1c43      	adds	r3, r0, #1
 8006c4a:	d102      	bne.n	8006c52 <_lseek_r+0x1e>
 8006c4c:	682b      	ldr	r3, [r5, #0]
 8006c4e:	b103      	cbz	r3, 8006c52 <_lseek_r+0x1e>
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	bd38      	pop	{r3, r4, r5, pc}
 8006c54:	20000484 	.word	0x20000484

08006c58 <_read_r>:
 8006c58:	b538      	push	{r3, r4, r5, lr}
 8006c5a:	4d07      	ldr	r5, [pc, #28]	@ (8006c78 <_read_r+0x20>)
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	4608      	mov	r0, r1
 8006c60:	4611      	mov	r1, r2
 8006c62:	2200      	movs	r2, #0
 8006c64:	602a      	str	r2, [r5, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	f7fb f961 	bl	8001f2e <_read>
 8006c6c:	1c43      	adds	r3, r0, #1
 8006c6e:	d102      	bne.n	8006c76 <_read_r+0x1e>
 8006c70:	682b      	ldr	r3, [r5, #0]
 8006c72:	b103      	cbz	r3, 8006c76 <_read_r+0x1e>
 8006c74:	6023      	str	r3, [r4, #0]
 8006c76:	bd38      	pop	{r3, r4, r5, pc}
 8006c78:	20000484 	.word	0x20000484

08006c7c <_write_r>:
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	4d07      	ldr	r5, [pc, #28]	@ (8006c9c <_write_r+0x20>)
 8006c80:	4604      	mov	r4, r0
 8006c82:	4608      	mov	r0, r1
 8006c84:	4611      	mov	r1, r2
 8006c86:	2200      	movs	r2, #0
 8006c88:	602a      	str	r2, [r5, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f7fb f96c 	bl	8001f68 <_write>
 8006c90:	1c43      	adds	r3, r0, #1
 8006c92:	d102      	bne.n	8006c9a <_write_r+0x1e>
 8006c94:	682b      	ldr	r3, [r5, #0]
 8006c96:	b103      	cbz	r3, 8006c9a <_write_r+0x1e>
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	bd38      	pop	{r3, r4, r5, pc}
 8006c9c:	20000484 	.word	0x20000484

08006ca0 <__errno>:
 8006ca0:	4b01      	ldr	r3, [pc, #4]	@ (8006ca8 <__errno+0x8>)
 8006ca2:	6818      	ldr	r0, [r3, #0]
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	20000018 	.word	0x20000018

08006cac <__libc_init_array>:
 8006cac:	b570      	push	{r4, r5, r6, lr}
 8006cae:	4d0d      	ldr	r5, [pc, #52]	@ (8006ce4 <__libc_init_array+0x38>)
 8006cb0:	4c0d      	ldr	r4, [pc, #52]	@ (8006ce8 <__libc_init_array+0x3c>)
 8006cb2:	1b64      	subs	r4, r4, r5
 8006cb4:	10a4      	asrs	r4, r4, #2
 8006cb6:	2600      	movs	r6, #0
 8006cb8:	42a6      	cmp	r6, r4
 8006cba:	d109      	bne.n	8006cd0 <__libc_init_array+0x24>
 8006cbc:	4d0b      	ldr	r5, [pc, #44]	@ (8006cec <__libc_init_array+0x40>)
 8006cbe:	4c0c      	ldr	r4, [pc, #48]	@ (8006cf0 <__libc_init_array+0x44>)
 8006cc0:	f002 fad2 	bl	8009268 <_init>
 8006cc4:	1b64      	subs	r4, r4, r5
 8006cc6:	10a4      	asrs	r4, r4, #2
 8006cc8:	2600      	movs	r6, #0
 8006cca:	42a6      	cmp	r6, r4
 8006ccc:	d105      	bne.n	8006cda <__libc_init_array+0x2e>
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
 8006cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd4:	4798      	blx	r3
 8006cd6:	3601      	adds	r6, #1
 8006cd8:	e7ee      	b.n	8006cb8 <__libc_init_array+0xc>
 8006cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cde:	4798      	blx	r3
 8006ce0:	3601      	adds	r6, #1
 8006ce2:	e7f2      	b.n	8006cca <__libc_init_array+0x1e>
 8006ce4:	080096e8 	.word	0x080096e8
 8006ce8:	080096e8 	.word	0x080096e8
 8006cec:	080096e8 	.word	0x080096e8
 8006cf0:	080096ec 	.word	0x080096ec

08006cf4 <__retarget_lock_init_recursive>:
 8006cf4:	4770      	bx	lr

08006cf6 <__retarget_lock_acquire_recursive>:
 8006cf6:	4770      	bx	lr

08006cf8 <__retarget_lock_release_recursive>:
 8006cf8:	4770      	bx	lr

08006cfa <quorem>:
 8006cfa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfe:	6903      	ldr	r3, [r0, #16]
 8006d00:	690c      	ldr	r4, [r1, #16]
 8006d02:	42a3      	cmp	r3, r4
 8006d04:	4607      	mov	r7, r0
 8006d06:	db7e      	blt.n	8006e06 <quorem+0x10c>
 8006d08:	3c01      	subs	r4, #1
 8006d0a:	f101 0814 	add.w	r8, r1, #20
 8006d0e:	00a3      	lsls	r3, r4, #2
 8006d10:	f100 0514 	add.w	r5, r0, #20
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d1a:	9301      	str	r3, [sp, #4]
 8006d1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d24:	3301      	adds	r3, #1
 8006d26:	429a      	cmp	r2, r3
 8006d28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d30:	d32e      	bcc.n	8006d90 <quorem+0x96>
 8006d32:	f04f 0a00 	mov.w	sl, #0
 8006d36:	46c4      	mov	ip, r8
 8006d38:	46ae      	mov	lr, r5
 8006d3a:	46d3      	mov	fp, sl
 8006d3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d40:	b298      	uxth	r0, r3
 8006d42:	fb06 a000 	mla	r0, r6, r0, sl
 8006d46:	0c02      	lsrs	r2, r0, #16
 8006d48:	0c1b      	lsrs	r3, r3, #16
 8006d4a:	fb06 2303 	mla	r3, r6, r3, r2
 8006d4e:	f8de 2000 	ldr.w	r2, [lr]
 8006d52:	b280      	uxth	r0, r0
 8006d54:	b292      	uxth	r2, r2
 8006d56:	1a12      	subs	r2, r2, r0
 8006d58:	445a      	add	r2, fp
 8006d5a:	f8de 0000 	ldr.w	r0, [lr]
 8006d5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006d68:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006d6c:	b292      	uxth	r2, r2
 8006d6e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006d72:	45e1      	cmp	r9, ip
 8006d74:	f84e 2b04 	str.w	r2, [lr], #4
 8006d78:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006d7c:	d2de      	bcs.n	8006d3c <quorem+0x42>
 8006d7e:	9b00      	ldr	r3, [sp, #0]
 8006d80:	58eb      	ldr	r3, [r5, r3]
 8006d82:	b92b      	cbnz	r3, 8006d90 <quorem+0x96>
 8006d84:	9b01      	ldr	r3, [sp, #4]
 8006d86:	3b04      	subs	r3, #4
 8006d88:	429d      	cmp	r5, r3
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	d32f      	bcc.n	8006dee <quorem+0xf4>
 8006d8e:	613c      	str	r4, [r7, #16]
 8006d90:	4638      	mov	r0, r7
 8006d92:	f001 f97b 	bl	800808c <__mcmp>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	db25      	blt.n	8006de6 <quorem+0xec>
 8006d9a:	4629      	mov	r1, r5
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006da2:	f8d1 c000 	ldr.w	ip, [r1]
 8006da6:	fa1f fe82 	uxth.w	lr, r2
 8006daa:	fa1f f38c 	uxth.w	r3, ip
 8006dae:	eba3 030e 	sub.w	r3, r3, lr
 8006db2:	4403      	add	r3, r0
 8006db4:	0c12      	lsrs	r2, r2, #16
 8006db6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006dba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dc4:	45c1      	cmp	r9, r8
 8006dc6:	f841 3b04 	str.w	r3, [r1], #4
 8006dca:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006dce:	d2e6      	bcs.n	8006d9e <quorem+0xa4>
 8006dd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006dd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dd8:	b922      	cbnz	r2, 8006de4 <quorem+0xea>
 8006dda:	3b04      	subs	r3, #4
 8006ddc:	429d      	cmp	r5, r3
 8006dde:	461a      	mov	r2, r3
 8006de0:	d30b      	bcc.n	8006dfa <quorem+0x100>
 8006de2:	613c      	str	r4, [r7, #16]
 8006de4:	3601      	adds	r6, #1
 8006de6:	4630      	mov	r0, r6
 8006de8:	b003      	add	sp, #12
 8006dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dee:	6812      	ldr	r2, [r2, #0]
 8006df0:	3b04      	subs	r3, #4
 8006df2:	2a00      	cmp	r2, #0
 8006df4:	d1cb      	bne.n	8006d8e <quorem+0x94>
 8006df6:	3c01      	subs	r4, #1
 8006df8:	e7c6      	b.n	8006d88 <quorem+0x8e>
 8006dfa:	6812      	ldr	r2, [r2, #0]
 8006dfc:	3b04      	subs	r3, #4
 8006dfe:	2a00      	cmp	r2, #0
 8006e00:	d1ef      	bne.n	8006de2 <quorem+0xe8>
 8006e02:	3c01      	subs	r4, #1
 8006e04:	e7ea      	b.n	8006ddc <quorem+0xe2>
 8006e06:	2000      	movs	r0, #0
 8006e08:	e7ee      	b.n	8006de8 <quorem+0xee>
 8006e0a:	0000      	movs	r0, r0
 8006e0c:	0000      	movs	r0, r0
	...

08006e10 <_dtoa_r>:
 8006e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e14:	69c7      	ldr	r7, [r0, #28]
 8006e16:	b099      	sub	sp, #100	@ 0x64
 8006e18:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006e1c:	ec55 4b10 	vmov	r4, r5, d0
 8006e20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006e22:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e24:	4683      	mov	fp, r0
 8006e26:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e2a:	b97f      	cbnz	r7, 8006e4c <_dtoa_r+0x3c>
 8006e2c:	2010      	movs	r0, #16
 8006e2e:	f000 fdfd 	bl	8007a2c <malloc>
 8006e32:	4602      	mov	r2, r0
 8006e34:	f8cb 001c 	str.w	r0, [fp, #28]
 8006e38:	b920      	cbnz	r0, 8006e44 <_dtoa_r+0x34>
 8006e3a:	4ba7      	ldr	r3, [pc, #668]	@ (80070d8 <_dtoa_r+0x2c8>)
 8006e3c:	21ef      	movs	r1, #239	@ 0xef
 8006e3e:	48a7      	ldr	r0, [pc, #668]	@ (80070dc <_dtoa_r+0x2cc>)
 8006e40:	f001 fc68 	bl	8008714 <__assert_func>
 8006e44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006e48:	6007      	str	r7, [r0, #0]
 8006e4a:	60c7      	str	r7, [r0, #12]
 8006e4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e50:	6819      	ldr	r1, [r3, #0]
 8006e52:	b159      	cbz	r1, 8006e6c <_dtoa_r+0x5c>
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	604a      	str	r2, [r1, #4]
 8006e58:	2301      	movs	r3, #1
 8006e5a:	4093      	lsls	r3, r2
 8006e5c:	608b      	str	r3, [r1, #8]
 8006e5e:	4658      	mov	r0, fp
 8006e60:	f000 feda 	bl	8007c18 <_Bfree>
 8006e64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	1e2b      	subs	r3, r5, #0
 8006e6e:	bfb9      	ittee	lt
 8006e70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006e74:	9303      	strlt	r3, [sp, #12]
 8006e76:	2300      	movge	r3, #0
 8006e78:	6033      	strge	r3, [r6, #0]
 8006e7a:	9f03      	ldr	r7, [sp, #12]
 8006e7c:	4b98      	ldr	r3, [pc, #608]	@ (80070e0 <_dtoa_r+0x2d0>)
 8006e7e:	bfbc      	itt	lt
 8006e80:	2201      	movlt	r2, #1
 8006e82:	6032      	strlt	r2, [r6, #0]
 8006e84:	43bb      	bics	r3, r7
 8006e86:	d112      	bne.n	8006eae <_dtoa_r+0x9e>
 8006e88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006e8e:	6013      	str	r3, [r2, #0]
 8006e90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006e94:	4323      	orrs	r3, r4
 8006e96:	f000 854d 	beq.w	8007934 <_dtoa_r+0xb24>
 8006e9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80070f4 <_dtoa_r+0x2e4>
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 854f 	beq.w	8007944 <_dtoa_r+0xb34>
 8006ea6:	f10a 0303 	add.w	r3, sl, #3
 8006eaa:	f000 bd49 	b.w	8007940 <_dtoa_r+0xb30>
 8006eae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	ec51 0b17 	vmov	r0, r1, d7
 8006eb8:	2300      	movs	r3, #0
 8006eba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006ebe:	f7f9 fe0b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ec2:	4680      	mov	r8, r0
 8006ec4:	b158      	cbz	r0, 8006ede <_dtoa_r+0xce>
 8006ec6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ec8:	2301      	movs	r3, #1
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ece:	b113      	cbz	r3, 8006ed6 <_dtoa_r+0xc6>
 8006ed0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006ed2:	4b84      	ldr	r3, [pc, #528]	@ (80070e4 <_dtoa_r+0x2d4>)
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80070f8 <_dtoa_r+0x2e8>
 8006eda:	f000 bd33 	b.w	8007944 <_dtoa_r+0xb34>
 8006ede:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006ee2:	aa16      	add	r2, sp, #88	@ 0x58
 8006ee4:	a917      	add	r1, sp, #92	@ 0x5c
 8006ee6:	4658      	mov	r0, fp
 8006ee8:	f001 f980 	bl	80081ec <__d2b>
 8006eec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006ef0:	4681      	mov	r9, r0
 8006ef2:	2e00      	cmp	r6, #0
 8006ef4:	d077      	beq.n	8006fe6 <_dtoa_r+0x1d6>
 8006ef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ef8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006f10:	4619      	mov	r1, r3
 8006f12:	2200      	movs	r2, #0
 8006f14:	4b74      	ldr	r3, [pc, #464]	@ (80070e8 <_dtoa_r+0x2d8>)
 8006f16:	f7f9 f9bf 	bl	8000298 <__aeabi_dsub>
 8006f1a:	a369      	add	r3, pc, #420	@ (adr r3, 80070c0 <_dtoa_r+0x2b0>)
 8006f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f20:	f7f9 fb72 	bl	8000608 <__aeabi_dmul>
 8006f24:	a368      	add	r3, pc, #416	@ (adr r3, 80070c8 <_dtoa_r+0x2b8>)
 8006f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2a:	f7f9 f9b7 	bl	800029c <__adddf3>
 8006f2e:	4604      	mov	r4, r0
 8006f30:	4630      	mov	r0, r6
 8006f32:	460d      	mov	r5, r1
 8006f34:	f7f9 fafe 	bl	8000534 <__aeabi_i2d>
 8006f38:	a365      	add	r3, pc, #404	@ (adr r3, 80070d0 <_dtoa_r+0x2c0>)
 8006f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3e:	f7f9 fb63 	bl	8000608 <__aeabi_dmul>
 8006f42:	4602      	mov	r2, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	4620      	mov	r0, r4
 8006f48:	4629      	mov	r1, r5
 8006f4a:	f7f9 f9a7 	bl	800029c <__adddf3>
 8006f4e:	4604      	mov	r4, r0
 8006f50:	460d      	mov	r5, r1
 8006f52:	f7f9 fe09 	bl	8000b68 <__aeabi_d2iz>
 8006f56:	2200      	movs	r2, #0
 8006f58:	4607      	mov	r7, r0
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	4629      	mov	r1, r5
 8006f60:	f7f9 fdc4 	bl	8000aec <__aeabi_dcmplt>
 8006f64:	b140      	cbz	r0, 8006f78 <_dtoa_r+0x168>
 8006f66:	4638      	mov	r0, r7
 8006f68:	f7f9 fae4 	bl	8000534 <__aeabi_i2d>
 8006f6c:	4622      	mov	r2, r4
 8006f6e:	462b      	mov	r3, r5
 8006f70:	f7f9 fdb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f74:	b900      	cbnz	r0, 8006f78 <_dtoa_r+0x168>
 8006f76:	3f01      	subs	r7, #1
 8006f78:	2f16      	cmp	r7, #22
 8006f7a:	d851      	bhi.n	8007020 <_dtoa_r+0x210>
 8006f7c:	4b5b      	ldr	r3, [pc, #364]	@ (80070ec <_dtoa_r+0x2dc>)
 8006f7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f8a:	f7f9 fdaf 	bl	8000aec <__aeabi_dcmplt>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d048      	beq.n	8007024 <_dtoa_r+0x214>
 8006f92:	3f01      	subs	r7, #1
 8006f94:	2300      	movs	r3, #0
 8006f96:	9312      	str	r3, [sp, #72]	@ 0x48
 8006f98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006f9a:	1b9b      	subs	r3, r3, r6
 8006f9c:	1e5a      	subs	r2, r3, #1
 8006f9e:	bf44      	itt	mi
 8006fa0:	f1c3 0801 	rsbmi	r8, r3, #1
 8006fa4:	2300      	movmi	r3, #0
 8006fa6:	9208      	str	r2, [sp, #32]
 8006fa8:	bf54      	ite	pl
 8006faa:	f04f 0800 	movpl.w	r8, #0
 8006fae:	9308      	strmi	r3, [sp, #32]
 8006fb0:	2f00      	cmp	r7, #0
 8006fb2:	db39      	blt.n	8007028 <_dtoa_r+0x218>
 8006fb4:	9b08      	ldr	r3, [sp, #32]
 8006fb6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006fb8:	443b      	add	r3, r7
 8006fba:	9308      	str	r3, [sp, #32]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fc2:	2b09      	cmp	r3, #9
 8006fc4:	d864      	bhi.n	8007090 <_dtoa_r+0x280>
 8006fc6:	2b05      	cmp	r3, #5
 8006fc8:	bfc4      	itt	gt
 8006fca:	3b04      	subgt	r3, #4
 8006fcc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fd0:	f1a3 0302 	sub.w	r3, r3, #2
 8006fd4:	bfcc      	ite	gt
 8006fd6:	2400      	movgt	r4, #0
 8006fd8:	2401      	movle	r4, #1
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d863      	bhi.n	80070a6 <_dtoa_r+0x296>
 8006fde:	e8df f003 	tbb	[pc, r3]
 8006fe2:	372a      	.short	0x372a
 8006fe4:	5535      	.short	0x5535
 8006fe6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006fea:	441e      	add	r6, r3
 8006fec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006ff0:	2b20      	cmp	r3, #32
 8006ff2:	bfc1      	itttt	gt
 8006ff4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006ff8:	409f      	lslgt	r7, r3
 8006ffa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006ffe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007002:	bfd6      	itet	le
 8007004:	f1c3 0320 	rsble	r3, r3, #32
 8007008:	ea47 0003 	orrgt.w	r0, r7, r3
 800700c:	fa04 f003 	lslle.w	r0, r4, r3
 8007010:	f7f9 fa80 	bl	8000514 <__aeabi_ui2d>
 8007014:	2201      	movs	r2, #1
 8007016:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800701a:	3e01      	subs	r6, #1
 800701c:	9214      	str	r2, [sp, #80]	@ 0x50
 800701e:	e777      	b.n	8006f10 <_dtoa_r+0x100>
 8007020:	2301      	movs	r3, #1
 8007022:	e7b8      	b.n	8006f96 <_dtoa_r+0x186>
 8007024:	9012      	str	r0, [sp, #72]	@ 0x48
 8007026:	e7b7      	b.n	8006f98 <_dtoa_r+0x188>
 8007028:	427b      	negs	r3, r7
 800702a:	930a      	str	r3, [sp, #40]	@ 0x28
 800702c:	2300      	movs	r3, #0
 800702e:	eba8 0807 	sub.w	r8, r8, r7
 8007032:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007034:	e7c4      	b.n	8006fc0 <_dtoa_r+0x1b0>
 8007036:	2300      	movs	r3, #0
 8007038:	930b      	str	r3, [sp, #44]	@ 0x2c
 800703a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800703c:	2b00      	cmp	r3, #0
 800703e:	dc35      	bgt.n	80070ac <_dtoa_r+0x29c>
 8007040:	2301      	movs	r3, #1
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	9307      	str	r3, [sp, #28]
 8007046:	461a      	mov	r2, r3
 8007048:	920e      	str	r2, [sp, #56]	@ 0x38
 800704a:	e00b      	b.n	8007064 <_dtoa_r+0x254>
 800704c:	2301      	movs	r3, #1
 800704e:	e7f3      	b.n	8007038 <_dtoa_r+0x228>
 8007050:	2300      	movs	r3, #0
 8007052:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007054:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007056:	18fb      	adds	r3, r7, r3
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	3301      	adds	r3, #1
 800705c:	2b01      	cmp	r3, #1
 800705e:	9307      	str	r3, [sp, #28]
 8007060:	bfb8      	it	lt
 8007062:	2301      	movlt	r3, #1
 8007064:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007068:	2100      	movs	r1, #0
 800706a:	2204      	movs	r2, #4
 800706c:	f102 0514 	add.w	r5, r2, #20
 8007070:	429d      	cmp	r5, r3
 8007072:	d91f      	bls.n	80070b4 <_dtoa_r+0x2a4>
 8007074:	6041      	str	r1, [r0, #4]
 8007076:	4658      	mov	r0, fp
 8007078:	f000 fd8e 	bl	8007b98 <_Balloc>
 800707c:	4682      	mov	sl, r0
 800707e:	2800      	cmp	r0, #0
 8007080:	d13c      	bne.n	80070fc <_dtoa_r+0x2ec>
 8007082:	4b1b      	ldr	r3, [pc, #108]	@ (80070f0 <_dtoa_r+0x2e0>)
 8007084:	4602      	mov	r2, r0
 8007086:	f240 11af 	movw	r1, #431	@ 0x1af
 800708a:	e6d8      	b.n	8006e3e <_dtoa_r+0x2e>
 800708c:	2301      	movs	r3, #1
 800708e:	e7e0      	b.n	8007052 <_dtoa_r+0x242>
 8007090:	2401      	movs	r4, #1
 8007092:	2300      	movs	r3, #0
 8007094:	9309      	str	r3, [sp, #36]	@ 0x24
 8007096:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007098:	f04f 33ff 	mov.w	r3, #4294967295
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	9307      	str	r3, [sp, #28]
 80070a0:	2200      	movs	r2, #0
 80070a2:	2312      	movs	r3, #18
 80070a4:	e7d0      	b.n	8007048 <_dtoa_r+0x238>
 80070a6:	2301      	movs	r3, #1
 80070a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070aa:	e7f5      	b.n	8007098 <_dtoa_r+0x288>
 80070ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	9307      	str	r3, [sp, #28]
 80070b2:	e7d7      	b.n	8007064 <_dtoa_r+0x254>
 80070b4:	3101      	adds	r1, #1
 80070b6:	0052      	lsls	r2, r2, #1
 80070b8:	e7d8      	b.n	800706c <_dtoa_r+0x25c>
 80070ba:	bf00      	nop
 80070bc:	f3af 8000 	nop.w
 80070c0:	636f4361 	.word	0x636f4361
 80070c4:	3fd287a7 	.word	0x3fd287a7
 80070c8:	8b60c8b3 	.word	0x8b60c8b3
 80070cc:	3fc68a28 	.word	0x3fc68a28
 80070d0:	509f79fb 	.word	0x509f79fb
 80070d4:	3fd34413 	.word	0x3fd34413
 80070d8:	08009341 	.word	0x08009341
 80070dc:	08009358 	.word	0x08009358
 80070e0:	7ff00000 	.word	0x7ff00000
 80070e4:	08009311 	.word	0x08009311
 80070e8:	3ff80000 	.word	0x3ff80000
 80070ec:	08009450 	.word	0x08009450
 80070f0:	080093b0 	.word	0x080093b0
 80070f4:	0800933d 	.word	0x0800933d
 80070f8:	08009310 	.word	0x08009310
 80070fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007100:	6018      	str	r0, [r3, #0]
 8007102:	9b07      	ldr	r3, [sp, #28]
 8007104:	2b0e      	cmp	r3, #14
 8007106:	f200 80a4 	bhi.w	8007252 <_dtoa_r+0x442>
 800710a:	2c00      	cmp	r4, #0
 800710c:	f000 80a1 	beq.w	8007252 <_dtoa_r+0x442>
 8007110:	2f00      	cmp	r7, #0
 8007112:	dd33      	ble.n	800717c <_dtoa_r+0x36c>
 8007114:	4bad      	ldr	r3, [pc, #692]	@ (80073cc <_dtoa_r+0x5bc>)
 8007116:	f007 020f 	and.w	r2, r7, #15
 800711a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800711e:	ed93 7b00 	vldr	d7, [r3]
 8007122:	05f8      	lsls	r0, r7, #23
 8007124:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007128:	ea4f 1427 	mov.w	r4, r7, asr #4
 800712c:	d516      	bpl.n	800715c <_dtoa_r+0x34c>
 800712e:	4ba8      	ldr	r3, [pc, #672]	@ (80073d0 <_dtoa_r+0x5c0>)
 8007130:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007134:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007138:	f7f9 fb90 	bl	800085c <__aeabi_ddiv>
 800713c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007140:	f004 040f 	and.w	r4, r4, #15
 8007144:	2603      	movs	r6, #3
 8007146:	4da2      	ldr	r5, [pc, #648]	@ (80073d0 <_dtoa_r+0x5c0>)
 8007148:	b954      	cbnz	r4, 8007160 <_dtoa_r+0x350>
 800714a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800714e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007152:	f7f9 fb83 	bl	800085c <__aeabi_ddiv>
 8007156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800715a:	e028      	b.n	80071ae <_dtoa_r+0x39e>
 800715c:	2602      	movs	r6, #2
 800715e:	e7f2      	b.n	8007146 <_dtoa_r+0x336>
 8007160:	07e1      	lsls	r1, r4, #31
 8007162:	d508      	bpl.n	8007176 <_dtoa_r+0x366>
 8007164:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007168:	e9d5 2300 	ldrd	r2, r3, [r5]
 800716c:	f7f9 fa4c 	bl	8000608 <__aeabi_dmul>
 8007170:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007174:	3601      	adds	r6, #1
 8007176:	1064      	asrs	r4, r4, #1
 8007178:	3508      	adds	r5, #8
 800717a:	e7e5      	b.n	8007148 <_dtoa_r+0x338>
 800717c:	f000 80d2 	beq.w	8007324 <_dtoa_r+0x514>
 8007180:	427c      	negs	r4, r7
 8007182:	4b92      	ldr	r3, [pc, #584]	@ (80073cc <_dtoa_r+0x5bc>)
 8007184:	4d92      	ldr	r5, [pc, #584]	@ (80073d0 <_dtoa_r+0x5c0>)
 8007186:	f004 020f 	and.w	r2, r4, #15
 800718a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800718e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007192:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007196:	f7f9 fa37 	bl	8000608 <__aeabi_dmul>
 800719a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800719e:	1124      	asrs	r4, r4, #4
 80071a0:	2300      	movs	r3, #0
 80071a2:	2602      	movs	r6, #2
 80071a4:	2c00      	cmp	r4, #0
 80071a6:	f040 80b2 	bne.w	800730e <_dtoa_r+0x4fe>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1d3      	bne.n	8007156 <_dtoa_r+0x346>
 80071ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80071b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 80b7 	beq.w	8007328 <_dtoa_r+0x518>
 80071ba:	4b86      	ldr	r3, [pc, #536]	@ (80073d4 <_dtoa_r+0x5c4>)
 80071bc:	2200      	movs	r2, #0
 80071be:	4620      	mov	r0, r4
 80071c0:	4629      	mov	r1, r5
 80071c2:	f7f9 fc93 	bl	8000aec <__aeabi_dcmplt>
 80071c6:	2800      	cmp	r0, #0
 80071c8:	f000 80ae 	beq.w	8007328 <_dtoa_r+0x518>
 80071cc:	9b07      	ldr	r3, [sp, #28]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f000 80aa 	beq.w	8007328 <_dtoa_r+0x518>
 80071d4:	9b00      	ldr	r3, [sp, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	dd37      	ble.n	800724a <_dtoa_r+0x43a>
 80071da:	1e7b      	subs	r3, r7, #1
 80071dc:	9304      	str	r3, [sp, #16]
 80071de:	4620      	mov	r0, r4
 80071e0:	4b7d      	ldr	r3, [pc, #500]	@ (80073d8 <_dtoa_r+0x5c8>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	4629      	mov	r1, r5
 80071e6:	f7f9 fa0f 	bl	8000608 <__aeabi_dmul>
 80071ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071ee:	9c00      	ldr	r4, [sp, #0]
 80071f0:	3601      	adds	r6, #1
 80071f2:	4630      	mov	r0, r6
 80071f4:	f7f9 f99e 	bl	8000534 <__aeabi_i2d>
 80071f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071fc:	f7f9 fa04 	bl	8000608 <__aeabi_dmul>
 8007200:	4b76      	ldr	r3, [pc, #472]	@ (80073dc <_dtoa_r+0x5cc>)
 8007202:	2200      	movs	r2, #0
 8007204:	f7f9 f84a 	bl	800029c <__adddf3>
 8007208:	4605      	mov	r5, r0
 800720a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800720e:	2c00      	cmp	r4, #0
 8007210:	f040 808d 	bne.w	800732e <_dtoa_r+0x51e>
 8007214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007218:	4b71      	ldr	r3, [pc, #452]	@ (80073e0 <_dtoa_r+0x5d0>)
 800721a:	2200      	movs	r2, #0
 800721c:	f7f9 f83c 	bl	8000298 <__aeabi_dsub>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007228:	462a      	mov	r2, r5
 800722a:	4633      	mov	r3, r6
 800722c:	f7f9 fc7c 	bl	8000b28 <__aeabi_dcmpgt>
 8007230:	2800      	cmp	r0, #0
 8007232:	f040 828b 	bne.w	800774c <_dtoa_r+0x93c>
 8007236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800723a:	462a      	mov	r2, r5
 800723c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007240:	f7f9 fc54 	bl	8000aec <__aeabi_dcmplt>
 8007244:	2800      	cmp	r0, #0
 8007246:	f040 8128 	bne.w	800749a <_dtoa_r+0x68a>
 800724a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800724e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007252:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007254:	2b00      	cmp	r3, #0
 8007256:	f2c0 815a 	blt.w	800750e <_dtoa_r+0x6fe>
 800725a:	2f0e      	cmp	r7, #14
 800725c:	f300 8157 	bgt.w	800750e <_dtoa_r+0x6fe>
 8007260:	4b5a      	ldr	r3, [pc, #360]	@ (80073cc <_dtoa_r+0x5bc>)
 8007262:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007266:	ed93 7b00 	vldr	d7, [r3]
 800726a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800726c:	2b00      	cmp	r3, #0
 800726e:	ed8d 7b00 	vstr	d7, [sp]
 8007272:	da03      	bge.n	800727c <_dtoa_r+0x46c>
 8007274:	9b07      	ldr	r3, [sp, #28]
 8007276:	2b00      	cmp	r3, #0
 8007278:	f340 8101 	ble.w	800747e <_dtoa_r+0x66e>
 800727c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007280:	4656      	mov	r6, sl
 8007282:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007286:	4620      	mov	r0, r4
 8007288:	4629      	mov	r1, r5
 800728a:	f7f9 fae7 	bl	800085c <__aeabi_ddiv>
 800728e:	f7f9 fc6b 	bl	8000b68 <__aeabi_d2iz>
 8007292:	4680      	mov	r8, r0
 8007294:	f7f9 f94e 	bl	8000534 <__aeabi_i2d>
 8007298:	e9dd 2300 	ldrd	r2, r3, [sp]
 800729c:	f7f9 f9b4 	bl	8000608 <__aeabi_dmul>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4620      	mov	r0, r4
 80072a6:	4629      	mov	r1, r5
 80072a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80072ac:	f7f8 fff4 	bl	8000298 <__aeabi_dsub>
 80072b0:	f806 4b01 	strb.w	r4, [r6], #1
 80072b4:	9d07      	ldr	r5, [sp, #28]
 80072b6:	eba6 040a 	sub.w	r4, r6, sl
 80072ba:	42a5      	cmp	r5, r4
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	f040 8117 	bne.w	80074f2 <_dtoa_r+0x6e2>
 80072c4:	f7f8 ffea 	bl	800029c <__adddf3>
 80072c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072cc:	4604      	mov	r4, r0
 80072ce:	460d      	mov	r5, r1
 80072d0:	f7f9 fc2a 	bl	8000b28 <__aeabi_dcmpgt>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	f040 80f9 	bne.w	80074cc <_dtoa_r+0x6bc>
 80072da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072de:	4620      	mov	r0, r4
 80072e0:	4629      	mov	r1, r5
 80072e2:	f7f9 fbf9 	bl	8000ad8 <__aeabi_dcmpeq>
 80072e6:	b118      	cbz	r0, 80072f0 <_dtoa_r+0x4e0>
 80072e8:	f018 0f01 	tst.w	r8, #1
 80072ec:	f040 80ee 	bne.w	80074cc <_dtoa_r+0x6bc>
 80072f0:	4649      	mov	r1, r9
 80072f2:	4658      	mov	r0, fp
 80072f4:	f000 fc90 	bl	8007c18 <_Bfree>
 80072f8:	2300      	movs	r3, #0
 80072fa:	7033      	strb	r3, [r6, #0]
 80072fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80072fe:	3701      	adds	r7, #1
 8007300:	601f      	str	r7, [r3, #0]
 8007302:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 831d 	beq.w	8007944 <_dtoa_r+0xb34>
 800730a:	601e      	str	r6, [r3, #0]
 800730c:	e31a      	b.n	8007944 <_dtoa_r+0xb34>
 800730e:	07e2      	lsls	r2, r4, #31
 8007310:	d505      	bpl.n	800731e <_dtoa_r+0x50e>
 8007312:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007316:	f7f9 f977 	bl	8000608 <__aeabi_dmul>
 800731a:	3601      	adds	r6, #1
 800731c:	2301      	movs	r3, #1
 800731e:	1064      	asrs	r4, r4, #1
 8007320:	3508      	adds	r5, #8
 8007322:	e73f      	b.n	80071a4 <_dtoa_r+0x394>
 8007324:	2602      	movs	r6, #2
 8007326:	e742      	b.n	80071ae <_dtoa_r+0x39e>
 8007328:	9c07      	ldr	r4, [sp, #28]
 800732a:	9704      	str	r7, [sp, #16]
 800732c:	e761      	b.n	80071f2 <_dtoa_r+0x3e2>
 800732e:	4b27      	ldr	r3, [pc, #156]	@ (80073cc <_dtoa_r+0x5bc>)
 8007330:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007332:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007336:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800733a:	4454      	add	r4, sl
 800733c:	2900      	cmp	r1, #0
 800733e:	d053      	beq.n	80073e8 <_dtoa_r+0x5d8>
 8007340:	4928      	ldr	r1, [pc, #160]	@ (80073e4 <_dtoa_r+0x5d4>)
 8007342:	2000      	movs	r0, #0
 8007344:	f7f9 fa8a 	bl	800085c <__aeabi_ddiv>
 8007348:	4633      	mov	r3, r6
 800734a:	462a      	mov	r2, r5
 800734c:	f7f8 ffa4 	bl	8000298 <__aeabi_dsub>
 8007350:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007354:	4656      	mov	r6, sl
 8007356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800735a:	f7f9 fc05 	bl	8000b68 <__aeabi_d2iz>
 800735e:	4605      	mov	r5, r0
 8007360:	f7f9 f8e8 	bl	8000534 <__aeabi_i2d>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800736c:	f7f8 ff94 	bl	8000298 <__aeabi_dsub>
 8007370:	3530      	adds	r5, #48	@ 0x30
 8007372:	4602      	mov	r2, r0
 8007374:	460b      	mov	r3, r1
 8007376:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800737a:	f806 5b01 	strb.w	r5, [r6], #1
 800737e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007382:	f7f9 fbb3 	bl	8000aec <__aeabi_dcmplt>
 8007386:	2800      	cmp	r0, #0
 8007388:	d171      	bne.n	800746e <_dtoa_r+0x65e>
 800738a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800738e:	4911      	ldr	r1, [pc, #68]	@ (80073d4 <_dtoa_r+0x5c4>)
 8007390:	2000      	movs	r0, #0
 8007392:	f7f8 ff81 	bl	8000298 <__aeabi_dsub>
 8007396:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800739a:	f7f9 fba7 	bl	8000aec <__aeabi_dcmplt>
 800739e:	2800      	cmp	r0, #0
 80073a0:	f040 8095 	bne.w	80074ce <_dtoa_r+0x6be>
 80073a4:	42a6      	cmp	r6, r4
 80073a6:	f43f af50 	beq.w	800724a <_dtoa_r+0x43a>
 80073aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80073ae:	4b0a      	ldr	r3, [pc, #40]	@ (80073d8 <_dtoa_r+0x5c8>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	f7f9 f929 	bl	8000608 <__aeabi_dmul>
 80073b6:	4b08      	ldr	r3, [pc, #32]	@ (80073d8 <_dtoa_r+0x5c8>)
 80073b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073bc:	2200      	movs	r2, #0
 80073be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073c2:	f7f9 f921 	bl	8000608 <__aeabi_dmul>
 80073c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073ca:	e7c4      	b.n	8007356 <_dtoa_r+0x546>
 80073cc:	08009450 	.word	0x08009450
 80073d0:	08009428 	.word	0x08009428
 80073d4:	3ff00000 	.word	0x3ff00000
 80073d8:	40240000 	.word	0x40240000
 80073dc:	401c0000 	.word	0x401c0000
 80073e0:	40140000 	.word	0x40140000
 80073e4:	3fe00000 	.word	0x3fe00000
 80073e8:	4631      	mov	r1, r6
 80073ea:	4628      	mov	r0, r5
 80073ec:	f7f9 f90c 	bl	8000608 <__aeabi_dmul>
 80073f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80073f6:	4656      	mov	r6, sl
 80073f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073fc:	f7f9 fbb4 	bl	8000b68 <__aeabi_d2iz>
 8007400:	4605      	mov	r5, r0
 8007402:	f7f9 f897 	bl	8000534 <__aeabi_i2d>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800740e:	f7f8 ff43 	bl	8000298 <__aeabi_dsub>
 8007412:	3530      	adds	r5, #48	@ 0x30
 8007414:	f806 5b01 	strb.w	r5, [r6], #1
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	42a6      	cmp	r6, r4
 800741e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007422:	f04f 0200 	mov.w	r2, #0
 8007426:	d124      	bne.n	8007472 <_dtoa_r+0x662>
 8007428:	4bac      	ldr	r3, [pc, #688]	@ (80076dc <_dtoa_r+0x8cc>)
 800742a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800742e:	f7f8 ff35 	bl	800029c <__adddf3>
 8007432:	4602      	mov	r2, r0
 8007434:	460b      	mov	r3, r1
 8007436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800743a:	f7f9 fb75 	bl	8000b28 <__aeabi_dcmpgt>
 800743e:	2800      	cmp	r0, #0
 8007440:	d145      	bne.n	80074ce <_dtoa_r+0x6be>
 8007442:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007446:	49a5      	ldr	r1, [pc, #660]	@ (80076dc <_dtoa_r+0x8cc>)
 8007448:	2000      	movs	r0, #0
 800744a:	f7f8 ff25 	bl	8000298 <__aeabi_dsub>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007456:	f7f9 fb49 	bl	8000aec <__aeabi_dcmplt>
 800745a:	2800      	cmp	r0, #0
 800745c:	f43f aef5 	beq.w	800724a <_dtoa_r+0x43a>
 8007460:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007462:	1e73      	subs	r3, r6, #1
 8007464:	9315      	str	r3, [sp, #84]	@ 0x54
 8007466:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800746a:	2b30      	cmp	r3, #48	@ 0x30
 800746c:	d0f8      	beq.n	8007460 <_dtoa_r+0x650>
 800746e:	9f04      	ldr	r7, [sp, #16]
 8007470:	e73e      	b.n	80072f0 <_dtoa_r+0x4e0>
 8007472:	4b9b      	ldr	r3, [pc, #620]	@ (80076e0 <_dtoa_r+0x8d0>)
 8007474:	f7f9 f8c8 	bl	8000608 <__aeabi_dmul>
 8007478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800747c:	e7bc      	b.n	80073f8 <_dtoa_r+0x5e8>
 800747e:	d10c      	bne.n	800749a <_dtoa_r+0x68a>
 8007480:	4b98      	ldr	r3, [pc, #608]	@ (80076e4 <_dtoa_r+0x8d4>)
 8007482:	2200      	movs	r2, #0
 8007484:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007488:	f7f9 f8be 	bl	8000608 <__aeabi_dmul>
 800748c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007490:	f7f9 fb40 	bl	8000b14 <__aeabi_dcmpge>
 8007494:	2800      	cmp	r0, #0
 8007496:	f000 8157 	beq.w	8007748 <_dtoa_r+0x938>
 800749a:	2400      	movs	r4, #0
 800749c:	4625      	mov	r5, r4
 800749e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074a0:	43db      	mvns	r3, r3
 80074a2:	9304      	str	r3, [sp, #16]
 80074a4:	4656      	mov	r6, sl
 80074a6:	2700      	movs	r7, #0
 80074a8:	4621      	mov	r1, r4
 80074aa:	4658      	mov	r0, fp
 80074ac:	f000 fbb4 	bl	8007c18 <_Bfree>
 80074b0:	2d00      	cmp	r5, #0
 80074b2:	d0dc      	beq.n	800746e <_dtoa_r+0x65e>
 80074b4:	b12f      	cbz	r7, 80074c2 <_dtoa_r+0x6b2>
 80074b6:	42af      	cmp	r7, r5
 80074b8:	d003      	beq.n	80074c2 <_dtoa_r+0x6b2>
 80074ba:	4639      	mov	r1, r7
 80074bc:	4658      	mov	r0, fp
 80074be:	f000 fbab 	bl	8007c18 <_Bfree>
 80074c2:	4629      	mov	r1, r5
 80074c4:	4658      	mov	r0, fp
 80074c6:	f000 fba7 	bl	8007c18 <_Bfree>
 80074ca:	e7d0      	b.n	800746e <_dtoa_r+0x65e>
 80074cc:	9704      	str	r7, [sp, #16]
 80074ce:	4633      	mov	r3, r6
 80074d0:	461e      	mov	r6, r3
 80074d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074d6:	2a39      	cmp	r2, #57	@ 0x39
 80074d8:	d107      	bne.n	80074ea <_dtoa_r+0x6da>
 80074da:	459a      	cmp	sl, r3
 80074dc:	d1f8      	bne.n	80074d0 <_dtoa_r+0x6c0>
 80074de:	9a04      	ldr	r2, [sp, #16]
 80074e0:	3201      	adds	r2, #1
 80074e2:	9204      	str	r2, [sp, #16]
 80074e4:	2230      	movs	r2, #48	@ 0x30
 80074e6:	f88a 2000 	strb.w	r2, [sl]
 80074ea:	781a      	ldrb	r2, [r3, #0]
 80074ec:	3201      	adds	r2, #1
 80074ee:	701a      	strb	r2, [r3, #0]
 80074f0:	e7bd      	b.n	800746e <_dtoa_r+0x65e>
 80074f2:	4b7b      	ldr	r3, [pc, #492]	@ (80076e0 <_dtoa_r+0x8d0>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	f7f9 f887 	bl	8000608 <__aeabi_dmul>
 80074fa:	2200      	movs	r2, #0
 80074fc:	2300      	movs	r3, #0
 80074fe:	4604      	mov	r4, r0
 8007500:	460d      	mov	r5, r1
 8007502:	f7f9 fae9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007506:	2800      	cmp	r0, #0
 8007508:	f43f aebb 	beq.w	8007282 <_dtoa_r+0x472>
 800750c:	e6f0      	b.n	80072f0 <_dtoa_r+0x4e0>
 800750e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007510:	2a00      	cmp	r2, #0
 8007512:	f000 80db 	beq.w	80076cc <_dtoa_r+0x8bc>
 8007516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007518:	2a01      	cmp	r2, #1
 800751a:	f300 80bf 	bgt.w	800769c <_dtoa_r+0x88c>
 800751e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007520:	2a00      	cmp	r2, #0
 8007522:	f000 80b7 	beq.w	8007694 <_dtoa_r+0x884>
 8007526:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800752a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800752c:	4646      	mov	r6, r8
 800752e:	9a08      	ldr	r2, [sp, #32]
 8007530:	2101      	movs	r1, #1
 8007532:	441a      	add	r2, r3
 8007534:	4658      	mov	r0, fp
 8007536:	4498      	add	r8, r3
 8007538:	9208      	str	r2, [sp, #32]
 800753a:	f000 fc21 	bl	8007d80 <__i2b>
 800753e:	4605      	mov	r5, r0
 8007540:	b15e      	cbz	r6, 800755a <_dtoa_r+0x74a>
 8007542:	9b08      	ldr	r3, [sp, #32]
 8007544:	2b00      	cmp	r3, #0
 8007546:	dd08      	ble.n	800755a <_dtoa_r+0x74a>
 8007548:	42b3      	cmp	r3, r6
 800754a:	9a08      	ldr	r2, [sp, #32]
 800754c:	bfa8      	it	ge
 800754e:	4633      	movge	r3, r6
 8007550:	eba8 0803 	sub.w	r8, r8, r3
 8007554:	1af6      	subs	r6, r6, r3
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	9308      	str	r3, [sp, #32]
 800755a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800755c:	b1f3      	cbz	r3, 800759c <_dtoa_r+0x78c>
 800755e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 80b7 	beq.w	80076d4 <_dtoa_r+0x8c4>
 8007566:	b18c      	cbz	r4, 800758c <_dtoa_r+0x77c>
 8007568:	4629      	mov	r1, r5
 800756a:	4622      	mov	r2, r4
 800756c:	4658      	mov	r0, fp
 800756e:	f000 fcc7 	bl	8007f00 <__pow5mult>
 8007572:	464a      	mov	r2, r9
 8007574:	4601      	mov	r1, r0
 8007576:	4605      	mov	r5, r0
 8007578:	4658      	mov	r0, fp
 800757a:	f000 fc17 	bl	8007dac <__multiply>
 800757e:	4649      	mov	r1, r9
 8007580:	9004      	str	r0, [sp, #16]
 8007582:	4658      	mov	r0, fp
 8007584:	f000 fb48 	bl	8007c18 <_Bfree>
 8007588:	9b04      	ldr	r3, [sp, #16]
 800758a:	4699      	mov	r9, r3
 800758c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800758e:	1b1a      	subs	r2, r3, r4
 8007590:	d004      	beq.n	800759c <_dtoa_r+0x78c>
 8007592:	4649      	mov	r1, r9
 8007594:	4658      	mov	r0, fp
 8007596:	f000 fcb3 	bl	8007f00 <__pow5mult>
 800759a:	4681      	mov	r9, r0
 800759c:	2101      	movs	r1, #1
 800759e:	4658      	mov	r0, fp
 80075a0:	f000 fbee 	bl	8007d80 <__i2b>
 80075a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075a6:	4604      	mov	r4, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 81cf 	beq.w	800794c <_dtoa_r+0xb3c>
 80075ae:	461a      	mov	r2, r3
 80075b0:	4601      	mov	r1, r0
 80075b2:	4658      	mov	r0, fp
 80075b4:	f000 fca4 	bl	8007f00 <__pow5mult>
 80075b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	4604      	mov	r4, r0
 80075be:	f300 8095 	bgt.w	80076ec <_dtoa_r+0x8dc>
 80075c2:	9b02      	ldr	r3, [sp, #8]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f040 8087 	bne.w	80076d8 <_dtoa_r+0x8c8>
 80075ca:	9b03      	ldr	r3, [sp, #12]
 80075cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f040 8089 	bne.w	80076e8 <_dtoa_r+0x8d8>
 80075d6:	9b03      	ldr	r3, [sp, #12]
 80075d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075dc:	0d1b      	lsrs	r3, r3, #20
 80075de:	051b      	lsls	r3, r3, #20
 80075e0:	b12b      	cbz	r3, 80075ee <_dtoa_r+0x7de>
 80075e2:	9b08      	ldr	r3, [sp, #32]
 80075e4:	3301      	adds	r3, #1
 80075e6:	9308      	str	r3, [sp, #32]
 80075e8:	f108 0801 	add.w	r8, r8, #1
 80075ec:	2301      	movs	r3, #1
 80075ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80075f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 81b0 	beq.w	8007958 <_dtoa_r+0xb48>
 80075f8:	6923      	ldr	r3, [r4, #16]
 80075fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80075fe:	6918      	ldr	r0, [r3, #16]
 8007600:	f000 fb72 	bl	8007ce8 <__hi0bits>
 8007604:	f1c0 0020 	rsb	r0, r0, #32
 8007608:	9b08      	ldr	r3, [sp, #32]
 800760a:	4418      	add	r0, r3
 800760c:	f010 001f 	ands.w	r0, r0, #31
 8007610:	d077      	beq.n	8007702 <_dtoa_r+0x8f2>
 8007612:	f1c0 0320 	rsb	r3, r0, #32
 8007616:	2b04      	cmp	r3, #4
 8007618:	dd6b      	ble.n	80076f2 <_dtoa_r+0x8e2>
 800761a:	9b08      	ldr	r3, [sp, #32]
 800761c:	f1c0 001c 	rsb	r0, r0, #28
 8007620:	4403      	add	r3, r0
 8007622:	4480      	add	r8, r0
 8007624:	4406      	add	r6, r0
 8007626:	9308      	str	r3, [sp, #32]
 8007628:	f1b8 0f00 	cmp.w	r8, #0
 800762c:	dd05      	ble.n	800763a <_dtoa_r+0x82a>
 800762e:	4649      	mov	r1, r9
 8007630:	4642      	mov	r2, r8
 8007632:	4658      	mov	r0, fp
 8007634:	f000 fcbe 	bl	8007fb4 <__lshift>
 8007638:	4681      	mov	r9, r0
 800763a:	9b08      	ldr	r3, [sp, #32]
 800763c:	2b00      	cmp	r3, #0
 800763e:	dd05      	ble.n	800764c <_dtoa_r+0x83c>
 8007640:	4621      	mov	r1, r4
 8007642:	461a      	mov	r2, r3
 8007644:	4658      	mov	r0, fp
 8007646:	f000 fcb5 	bl	8007fb4 <__lshift>
 800764a:	4604      	mov	r4, r0
 800764c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800764e:	2b00      	cmp	r3, #0
 8007650:	d059      	beq.n	8007706 <_dtoa_r+0x8f6>
 8007652:	4621      	mov	r1, r4
 8007654:	4648      	mov	r0, r9
 8007656:	f000 fd19 	bl	800808c <__mcmp>
 800765a:	2800      	cmp	r0, #0
 800765c:	da53      	bge.n	8007706 <_dtoa_r+0x8f6>
 800765e:	1e7b      	subs	r3, r7, #1
 8007660:	9304      	str	r3, [sp, #16]
 8007662:	4649      	mov	r1, r9
 8007664:	2300      	movs	r3, #0
 8007666:	220a      	movs	r2, #10
 8007668:	4658      	mov	r0, fp
 800766a:	f000 faf7 	bl	8007c5c <__multadd>
 800766e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007670:	4681      	mov	r9, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 8172 	beq.w	800795c <_dtoa_r+0xb4c>
 8007678:	2300      	movs	r3, #0
 800767a:	4629      	mov	r1, r5
 800767c:	220a      	movs	r2, #10
 800767e:	4658      	mov	r0, fp
 8007680:	f000 faec 	bl	8007c5c <__multadd>
 8007684:	9b00      	ldr	r3, [sp, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	4605      	mov	r5, r0
 800768a:	dc67      	bgt.n	800775c <_dtoa_r+0x94c>
 800768c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800768e:	2b02      	cmp	r3, #2
 8007690:	dc41      	bgt.n	8007716 <_dtoa_r+0x906>
 8007692:	e063      	b.n	800775c <_dtoa_r+0x94c>
 8007694:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007696:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800769a:	e746      	b.n	800752a <_dtoa_r+0x71a>
 800769c:	9b07      	ldr	r3, [sp, #28]
 800769e:	1e5c      	subs	r4, r3, #1
 80076a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076a2:	42a3      	cmp	r3, r4
 80076a4:	bfbf      	itttt	lt
 80076a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80076a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80076aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80076ac:	1ae3      	sublt	r3, r4, r3
 80076ae:	bfb4      	ite	lt
 80076b0:	18d2      	addlt	r2, r2, r3
 80076b2:	1b1c      	subge	r4, r3, r4
 80076b4:	9b07      	ldr	r3, [sp, #28]
 80076b6:	bfbc      	itt	lt
 80076b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80076ba:	2400      	movlt	r4, #0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	bfb5      	itete	lt
 80076c0:	eba8 0603 	sublt.w	r6, r8, r3
 80076c4:	9b07      	ldrge	r3, [sp, #28]
 80076c6:	2300      	movlt	r3, #0
 80076c8:	4646      	movge	r6, r8
 80076ca:	e730      	b.n	800752e <_dtoa_r+0x71e>
 80076cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80076ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80076d0:	4646      	mov	r6, r8
 80076d2:	e735      	b.n	8007540 <_dtoa_r+0x730>
 80076d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076d6:	e75c      	b.n	8007592 <_dtoa_r+0x782>
 80076d8:	2300      	movs	r3, #0
 80076da:	e788      	b.n	80075ee <_dtoa_r+0x7de>
 80076dc:	3fe00000 	.word	0x3fe00000
 80076e0:	40240000 	.word	0x40240000
 80076e4:	40140000 	.word	0x40140000
 80076e8:	9b02      	ldr	r3, [sp, #8]
 80076ea:	e780      	b.n	80075ee <_dtoa_r+0x7de>
 80076ec:	2300      	movs	r3, #0
 80076ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80076f0:	e782      	b.n	80075f8 <_dtoa_r+0x7e8>
 80076f2:	d099      	beq.n	8007628 <_dtoa_r+0x818>
 80076f4:	9a08      	ldr	r2, [sp, #32]
 80076f6:	331c      	adds	r3, #28
 80076f8:	441a      	add	r2, r3
 80076fa:	4498      	add	r8, r3
 80076fc:	441e      	add	r6, r3
 80076fe:	9208      	str	r2, [sp, #32]
 8007700:	e792      	b.n	8007628 <_dtoa_r+0x818>
 8007702:	4603      	mov	r3, r0
 8007704:	e7f6      	b.n	80076f4 <_dtoa_r+0x8e4>
 8007706:	9b07      	ldr	r3, [sp, #28]
 8007708:	9704      	str	r7, [sp, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	dc20      	bgt.n	8007750 <_dtoa_r+0x940>
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007712:	2b02      	cmp	r3, #2
 8007714:	dd1e      	ble.n	8007754 <_dtoa_r+0x944>
 8007716:	9b00      	ldr	r3, [sp, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	f47f aec0 	bne.w	800749e <_dtoa_r+0x68e>
 800771e:	4621      	mov	r1, r4
 8007720:	2205      	movs	r2, #5
 8007722:	4658      	mov	r0, fp
 8007724:	f000 fa9a 	bl	8007c5c <__multadd>
 8007728:	4601      	mov	r1, r0
 800772a:	4604      	mov	r4, r0
 800772c:	4648      	mov	r0, r9
 800772e:	f000 fcad 	bl	800808c <__mcmp>
 8007732:	2800      	cmp	r0, #0
 8007734:	f77f aeb3 	ble.w	800749e <_dtoa_r+0x68e>
 8007738:	4656      	mov	r6, sl
 800773a:	2331      	movs	r3, #49	@ 0x31
 800773c:	f806 3b01 	strb.w	r3, [r6], #1
 8007740:	9b04      	ldr	r3, [sp, #16]
 8007742:	3301      	adds	r3, #1
 8007744:	9304      	str	r3, [sp, #16]
 8007746:	e6ae      	b.n	80074a6 <_dtoa_r+0x696>
 8007748:	9c07      	ldr	r4, [sp, #28]
 800774a:	9704      	str	r7, [sp, #16]
 800774c:	4625      	mov	r5, r4
 800774e:	e7f3      	b.n	8007738 <_dtoa_r+0x928>
 8007750:	9b07      	ldr	r3, [sp, #28]
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007756:	2b00      	cmp	r3, #0
 8007758:	f000 8104 	beq.w	8007964 <_dtoa_r+0xb54>
 800775c:	2e00      	cmp	r6, #0
 800775e:	dd05      	ble.n	800776c <_dtoa_r+0x95c>
 8007760:	4629      	mov	r1, r5
 8007762:	4632      	mov	r2, r6
 8007764:	4658      	mov	r0, fp
 8007766:	f000 fc25 	bl	8007fb4 <__lshift>
 800776a:	4605      	mov	r5, r0
 800776c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800776e:	2b00      	cmp	r3, #0
 8007770:	d05a      	beq.n	8007828 <_dtoa_r+0xa18>
 8007772:	6869      	ldr	r1, [r5, #4]
 8007774:	4658      	mov	r0, fp
 8007776:	f000 fa0f 	bl	8007b98 <_Balloc>
 800777a:	4606      	mov	r6, r0
 800777c:	b928      	cbnz	r0, 800778a <_dtoa_r+0x97a>
 800777e:	4b84      	ldr	r3, [pc, #528]	@ (8007990 <_dtoa_r+0xb80>)
 8007780:	4602      	mov	r2, r0
 8007782:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007786:	f7ff bb5a 	b.w	8006e3e <_dtoa_r+0x2e>
 800778a:	692a      	ldr	r2, [r5, #16]
 800778c:	3202      	adds	r2, #2
 800778e:	0092      	lsls	r2, r2, #2
 8007790:	f105 010c 	add.w	r1, r5, #12
 8007794:	300c      	adds	r0, #12
 8007796:	f000 ffaf 	bl	80086f8 <memcpy>
 800779a:	2201      	movs	r2, #1
 800779c:	4631      	mov	r1, r6
 800779e:	4658      	mov	r0, fp
 80077a0:	f000 fc08 	bl	8007fb4 <__lshift>
 80077a4:	f10a 0301 	add.w	r3, sl, #1
 80077a8:	9307      	str	r3, [sp, #28]
 80077aa:	9b00      	ldr	r3, [sp, #0]
 80077ac:	4453      	add	r3, sl
 80077ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077b0:	9b02      	ldr	r3, [sp, #8]
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	462f      	mov	r7, r5
 80077b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80077ba:	4605      	mov	r5, r0
 80077bc:	9b07      	ldr	r3, [sp, #28]
 80077be:	4621      	mov	r1, r4
 80077c0:	3b01      	subs	r3, #1
 80077c2:	4648      	mov	r0, r9
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	f7ff fa98 	bl	8006cfa <quorem>
 80077ca:	4639      	mov	r1, r7
 80077cc:	9002      	str	r0, [sp, #8]
 80077ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80077d2:	4648      	mov	r0, r9
 80077d4:	f000 fc5a 	bl	800808c <__mcmp>
 80077d8:	462a      	mov	r2, r5
 80077da:	9008      	str	r0, [sp, #32]
 80077dc:	4621      	mov	r1, r4
 80077de:	4658      	mov	r0, fp
 80077e0:	f000 fc70 	bl	80080c4 <__mdiff>
 80077e4:	68c2      	ldr	r2, [r0, #12]
 80077e6:	4606      	mov	r6, r0
 80077e8:	bb02      	cbnz	r2, 800782c <_dtoa_r+0xa1c>
 80077ea:	4601      	mov	r1, r0
 80077ec:	4648      	mov	r0, r9
 80077ee:	f000 fc4d 	bl	800808c <__mcmp>
 80077f2:	4602      	mov	r2, r0
 80077f4:	4631      	mov	r1, r6
 80077f6:	4658      	mov	r0, fp
 80077f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80077fa:	f000 fa0d 	bl	8007c18 <_Bfree>
 80077fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007800:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007802:	9e07      	ldr	r6, [sp, #28]
 8007804:	ea43 0102 	orr.w	r1, r3, r2
 8007808:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800780a:	4319      	orrs	r1, r3
 800780c:	d110      	bne.n	8007830 <_dtoa_r+0xa20>
 800780e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007812:	d029      	beq.n	8007868 <_dtoa_r+0xa58>
 8007814:	9b08      	ldr	r3, [sp, #32]
 8007816:	2b00      	cmp	r3, #0
 8007818:	dd02      	ble.n	8007820 <_dtoa_r+0xa10>
 800781a:	9b02      	ldr	r3, [sp, #8]
 800781c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007820:	9b00      	ldr	r3, [sp, #0]
 8007822:	f883 8000 	strb.w	r8, [r3]
 8007826:	e63f      	b.n	80074a8 <_dtoa_r+0x698>
 8007828:	4628      	mov	r0, r5
 800782a:	e7bb      	b.n	80077a4 <_dtoa_r+0x994>
 800782c:	2201      	movs	r2, #1
 800782e:	e7e1      	b.n	80077f4 <_dtoa_r+0x9e4>
 8007830:	9b08      	ldr	r3, [sp, #32]
 8007832:	2b00      	cmp	r3, #0
 8007834:	db04      	blt.n	8007840 <_dtoa_r+0xa30>
 8007836:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007838:	430b      	orrs	r3, r1
 800783a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800783c:	430b      	orrs	r3, r1
 800783e:	d120      	bne.n	8007882 <_dtoa_r+0xa72>
 8007840:	2a00      	cmp	r2, #0
 8007842:	dded      	ble.n	8007820 <_dtoa_r+0xa10>
 8007844:	4649      	mov	r1, r9
 8007846:	2201      	movs	r2, #1
 8007848:	4658      	mov	r0, fp
 800784a:	f000 fbb3 	bl	8007fb4 <__lshift>
 800784e:	4621      	mov	r1, r4
 8007850:	4681      	mov	r9, r0
 8007852:	f000 fc1b 	bl	800808c <__mcmp>
 8007856:	2800      	cmp	r0, #0
 8007858:	dc03      	bgt.n	8007862 <_dtoa_r+0xa52>
 800785a:	d1e1      	bne.n	8007820 <_dtoa_r+0xa10>
 800785c:	f018 0f01 	tst.w	r8, #1
 8007860:	d0de      	beq.n	8007820 <_dtoa_r+0xa10>
 8007862:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007866:	d1d8      	bne.n	800781a <_dtoa_r+0xa0a>
 8007868:	9a00      	ldr	r2, [sp, #0]
 800786a:	2339      	movs	r3, #57	@ 0x39
 800786c:	7013      	strb	r3, [r2, #0]
 800786e:	4633      	mov	r3, r6
 8007870:	461e      	mov	r6, r3
 8007872:	3b01      	subs	r3, #1
 8007874:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007878:	2a39      	cmp	r2, #57	@ 0x39
 800787a:	d052      	beq.n	8007922 <_dtoa_r+0xb12>
 800787c:	3201      	adds	r2, #1
 800787e:	701a      	strb	r2, [r3, #0]
 8007880:	e612      	b.n	80074a8 <_dtoa_r+0x698>
 8007882:	2a00      	cmp	r2, #0
 8007884:	dd07      	ble.n	8007896 <_dtoa_r+0xa86>
 8007886:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800788a:	d0ed      	beq.n	8007868 <_dtoa_r+0xa58>
 800788c:	9a00      	ldr	r2, [sp, #0]
 800788e:	f108 0301 	add.w	r3, r8, #1
 8007892:	7013      	strb	r3, [r2, #0]
 8007894:	e608      	b.n	80074a8 <_dtoa_r+0x698>
 8007896:	9b07      	ldr	r3, [sp, #28]
 8007898:	9a07      	ldr	r2, [sp, #28]
 800789a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800789e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d028      	beq.n	80078f6 <_dtoa_r+0xae6>
 80078a4:	4649      	mov	r1, r9
 80078a6:	2300      	movs	r3, #0
 80078a8:	220a      	movs	r2, #10
 80078aa:	4658      	mov	r0, fp
 80078ac:	f000 f9d6 	bl	8007c5c <__multadd>
 80078b0:	42af      	cmp	r7, r5
 80078b2:	4681      	mov	r9, r0
 80078b4:	f04f 0300 	mov.w	r3, #0
 80078b8:	f04f 020a 	mov.w	r2, #10
 80078bc:	4639      	mov	r1, r7
 80078be:	4658      	mov	r0, fp
 80078c0:	d107      	bne.n	80078d2 <_dtoa_r+0xac2>
 80078c2:	f000 f9cb 	bl	8007c5c <__multadd>
 80078c6:	4607      	mov	r7, r0
 80078c8:	4605      	mov	r5, r0
 80078ca:	9b07      	ldr	r3, [sp, #28]
 80078cc:	3301      	adds	r3, #1
 80078ce:	9307      	str	r3, [sp, #28]
 80078d0:	e774      	b.n	80077bc <_dtoa_r+0x9ac>
 80078d2:	f000 f9c3 	bl	8007c5c <__multadd>
 80078d6:	4629      	mov	r1, r5
 80078d8:	4607      	mov	r7, r0
 80078da:	2300      	movs	r3, #0
 80078dc:	220a      	movs	r2, #10
 80078de:	4658      	mov	r0, fp
 80078e0:	f000 f9bc 	bl	8007c5c <__multadd>
 80078e4:	4605      	mov	r5, r0
 80078e6:	e7f0      	b.n	80078ca <_dtoa_r+0xaba>
 80078e8:	9b00      	ldr	r3, [sp, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	bfcc      	ite	gt
 80078ee:	461e      	movgt	r6, r3
 80078f0:	2601      	movle	r6, #1
 80078f2:	4456      	add	r6, sl
 80078f4:	2700      	movs	r7, #0
 80078f6:	4649      	mov	r1, r9
 80078f8:	2201      	movs	r2, #1
 80078fa:	4658      	mov	r0, fp
 80078fc:	f000 fb5a 	bl	8007fb4 <__lshift>
 8007900:	4621      	mov	r1, r4
 8007902:	4681      	mov	r9, r0
 8007904:	f000 fbc2 	bl	800808c <__mcmp>
 8007908:	2800      	cmp	r0, #0
 800790a:	dcb0      	bgt.n	800786e <_dtoa_r+0xa5e>
 800790c:	d102      	bne.n	8007914 <_dtoa_r+0xb04>
 800790e:	f018 0f01 	tst.w	r8, #1
 8007912:	d1ac      	bne.n	800786e <_dtoa_r+0xa5e>
 8007914:	4633      	mov	r3, r6
 8007916:	461e      	mov	r6, r3
 8007918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800791c:	2a30      	cmp	r2, #48	@ 0x30
 800791e:	d0fa      	beq.n	8007916 <_dtoa_r+0xb06>
 8007920:	e5c2      	b.n	80074a8 <_dtoa_r+0x698>
 8007922:	459a      	cmp	sl, r3
 8007924:	d1a4      	bne.n	8007870 <_dtoa_r+0xa60>
 8007926:	9b04      	ldr	r3, [sp, #16]
 8007928:	3301      	adds	r3, #1
 800792a:	9304      	str	r3, [sp, #16]
 800792c:	2331      	movs	r3, #49	@ 0x31
 800792e:	f88a 3000 	strb.w	r3, [sl]
 8007932:	e5b9      	b.n	80074a8 <_dtoa_r+0x698>
 8007934:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007936:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007994 <_dtoa_r+0xb84>
 800793a:	b11b      	cbz	r3, 8007944 <_dtoa_r+0xb34>
 800793c:	f10a 0308 	add.w	r3, sl, #8
 8007940:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007942:	6013      	str	r3, [r2, #0]
 8007944:	4650      	mov	r0, sl
 8007946:	b019      	add	sp, #100	@ 0x64
 8007948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800794c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800794e:	2b01      	cmp	r3, #1
 8007950:	f77f ae37 	ble.w	80075c2 <_dtoa_r+0x7b2>
 8007954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007956:	930a      	str	r3, [sp, #40]	@ 0x28
 8007958:	2001      	movs	r0, #1
 800795a:	e655      	b.n	8007608 <_dtoa_r+0x7f8>
 800795c:	9b00      	ldr	r3, [sp, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	f77f aed6 	ble.w	8007710 <_dtoa_r+0x900>
 8007964:	4656      	mov	r6, sl
 8007966:	4621      	mov	r1, r4
 8007968:	4648      	mov	r0, r9
 800796a:	f7ff f9c6 	bl	8006cfa <quorem>
 800796e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007972:	f806 8b01 	strb.w	r8, [r6], #1
 8007976:	9b00      	ldr	r3, [sp, #0]
 8007978:	eba6 020a 	sub.w	r2, r6, sl
 800797c:	4293      	cmp	r3, r2
 800797e:	ddb3      	ble.n	80078e8 <_dtoa_r+0xad8>
 8007980:	4649      	mov	r1, r9
 8007982:	2300      	movs	r3, #0
 8007984:	220a      	movs	r2, #10
 8007986:	4658      	mov	r0, fp
 8007988:	f000 f968 	bl	8007c5c <__multadd>
 800798c:	4681      	mov	r9, r0
 800798e:	e7ea      	b.n	8007966 <_dtoa_r+0xb56>
 8007990:	080093b0 	.word	0x080093b0
 8007994:	08009334 	.word	0x08009334

08007998 <_free_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	4605      	mov	r5, r0
 800799c:	2900      	cmp	r1, #0
 800799e:	d041      	beq.n	8007a24 <_free_r+0x8c>
 80079a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079a4:	1f0c      	subs	r4, r1, #4
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	bfb8      	it	lt
 80079aa:	18e4      	addlt	r4, r4, r3
 80079ac:	f000 f8e8 	bl	8007b80 <__malloc_lock>
 80079b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007a28 <_free_r+0x90>)
 80079b2:	6813      	ldr	r3, [r2, #0]
 80079b4:	b933      	cbnz	r3, 80079c4 <_free_r+0x2c>
 80079b6:	6063      	str	r3, [r4, #4]
 80079b8:	6014      	str	r4, [r2, #0]
 80079ba:	4628      	mov	r0, r5
 80079bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079c0:	f000 b8e4 	b.w	8007b8c <__malloc_unlock>
 80079c4:	42a3      	cmp	r3, r4
 80079c6:	d908      	bls.n	80079da <_free_r+0x42>
 80079c8:	6820      	ldr	r0, [r4, #0]
 80079ca:	1821      	adds	r1, r4, r0
 80079cc:	428b      	cmp	r3, r1
 80079ce:	bf01      	itttt	eq
 80079d0:	6819      	ldreq	r1, [r3, #0]
 80079d2:	685b      	ldreq	r3, [r3, #4]
 80079d4:	1809      	addeq	r1, r1, r0
 80079d6:	6021      	streq	r1, [r4, #0]
 80079d8:	e7ed      	b.n	80079b6 <_free_r+0x1e>
 80079da:	461a      	mov	r2, r3
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	b10b      	cbz	r3, 80079e4 <_free_r+0x4c>
 80079e0:	42a3      	cmp	r3, r4
 80079e2:	d9fa      	bls.n	80079da <_free_r+0x42>
 80079e4:	6811      	ldr	r1, [r2, #0]
 80079e6:	1850      	adds	r0, r2, r1
 80079e8:	42a0      	cmp	r0, r4
 80079ea:	d10b      	bne.n	8007a04 <_free_r+0x6c>
 80079ec:	6820      	ldr	r0, [r4, #0]
 80079ee:	4401      	add	r1, r0
 80079f0:	1850      	adds	r0, r2, r1
 80079f2:	4283      	cmp	r3, r0
 80079f4:	6011      	str	r1, [r2, #0]
 80079f6:	d1e0      	bne.n	80079ba <_free_r+0x22>
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	6053      	str	r3, [r2, #4]
 80079fe:	4408      	add	r0, r1
 8007a00:	6010      	str	r0, [r2, #0]
 8007a02:	e7da      	b.n	80079ba <_free_r+0x22>
 8007a04:	d902      	bls.n	8007a0c <_free_r+0x74>
 8007a06:	230c      	movs	r3, #12
 8007a08:	602b      	str	r3, [r5, #0]
 8007a0a:	e7d6      	b.n	80079ba <_free_r+0x22>
 8007a0c:	6820      	ldr	r0, [r4, #0]
 8007a0e:	1821      	adds	r1, r4, r0
 8007a10:	428b      	cmp	r3, r1
 8007a12:	bf04      	itt	eq
 8007a14:	6819      	ldreq	r1, [r3, #0]
 8007a16:	685b      	ldreq	r3, [r3, #4]
 8007a18:	6063      	str	r3, [r4, #4]
 8007a1a:	bf04      	itt	eq
 8007a1c:	1809      	addeq	r1, r1, r0
 8007a1e:	6021      	streq	r1, [r4, #0]
 8007a20:	6054      	str	r4, [r2, #4]
 8007a22:	e7ca      	b.n	80079ba <_free_r+0x22>
 8007a24:	bd38      	pop	{r3, r4, r5, pc}
 8007a26:	bf00      	nop
 8007a28:	20000490 	.word	0x20000490

08007a2c <malloc>:
 8007a2c:	4b02      	ldr	r3, [pc, #8]	@ (8007a38 <malloc+0xc>)
 8007a2e:	4601      	mov	r1, r0
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	f000 b825 	b.w	8007a80 <_malloc_r>
 8007a36:	bf00      	nop
 8007a38:	20000018 	.word	0x20000018

08007a3c <sbrk_aligned>:
 8007a3c:	b570      	push	{r4, r5, r6, lr}
 8007a3e:	4e0f      	ldr	r6, [pc, #60]	@ (8007a7c <sbrk_aligned+0x40>)
 8007a40:	460c      	mov	r4, r1
 8007a42:	6831      	ldr	r1, [r6, #0]
 8007a44:	4605      	mov	r5, r0
 8007a46:	b911      	cbnz	r1, 8007a4e <sbrk_aligned+0x12>
 8007a48:	f000 fe46 	bl	80086d8 <_sbrk_r>
 8007a4c:	6030      	str	r0, [r6, #0]
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4628      	mov	r0, r5
 8007a52:	f000 fe41 	bl	80086d8 <_sbrk_r>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	d103      	bne.n	8007a62 <sbrk_aligned+0x26>
 8007a5a:	f04f 34ff 	mov.w	r4, #4294967295
 8007a5e:	4620      	mov	r0, r4
 8007a60:	bd70      	pop	{r4, r5, r6, pc}
 8007a62:	1cc4      	adds	r4, r0, #3
 8007a64:	f024 0403 	bic.w	r4, r4, #3
 8007a68:	42a0      	cmp	r0, r4
 8007a6a:	d0f8      	beq.n	8007a5e <sbrk_aligned+0x22>
 8007a6c:	1a21      	subs	r1, r4, r0
 8007a6e:	4628      	mov	r0, r5
 8007a70:	f000 fe32 	bl	80086d8 <_sbrk_r>
 8007a74:	3001      	adds	r0, #1
 8007a76:	d1f2      	bne.n	8007a5e <sbrk_aligned+0x22>
 8007a78:	e7ef      	b.n	8007a5a <sbrk_aligned+0x1e>
 8007a7a:	bf00      	nop
 8007a7c:	2000048c 	.word	0x2000048c

08007a80 <_malloc_r>:
 8007a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a84:	1ccd      	adds	r5, r1, #3
 8007a86:	f025 0503 	bic.w	r5, r5, #3
 8007a8a:	3508      	adds	r5, #8
 8007a8c:	2d0c      	cmp	r5, #12
 8007a8e:	bf38      	it	cc
 8007a90:	250c      	movcc	r5, #12
 8007a92:	2d00      	cmp	r5, #0
 8007a94:	4606      	mov	r6, r0
 8007a96:	db01      	blt.n	8007a9c <_malloc_r+0x1c>
 8007a98:	42a9      	cmp	r1, r5
 8007a9a:	d904      	bls.n	8007aa6 <_malloc_r+0x26>
 8007a9c:	230c      	movs	r3, #12
 8007a9e:	6033      	str	r3, [r6, #0]
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b7c <_malloc_r+0xfc>
 8007aaa:	f000 f869 	bl	8007b80 <__malloc_lock>
 8007aae:	f8d8 3000 	ldr.w	r3, [r8]
 8007ab2:	461c      	mov	r4, r3
 8007ab4:	bb44      	cbnz	r4, 8007b08 <_malloc_r+0x88>
 8007ab6:	4629      	mov	r1, r5
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f7ff ffbf 	bl	8007a3c <sbrk_aligned>
 8007abe:	1c43      	adds	r3, r0, #1
 8007ac0:	4604      	mov	r4, r0
 8007ac2:	d158      	bne.n	8007b76 <_malloc_r+0xf6>
 8007ac4:	f8d8 4000 	ldr.w	r4, [r8]
 8007ac8:	4627      	mov	r7, r4
 8007aca:	2f00      	cmp	r7, #0
 8007acc:	d143      	bne.n	8007b56 <_malloc_r+0xd6>
 8007ace:	2c00      	cmp	r4, #0
 8007ad0:	d04b      	beq.n	8007b6a <_malloc_r+0xea>
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	4639      	mov	r1, r7
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	eb04 0903 	add.w	r9, r4, r3
 8007adc:	f000 fdfc 	bl	80086d8 <_sbrk_r>
 8007ae0:	4581      	cmp	r9, r0
 8007ae2:	d142      	bne.n	8007b6a <_malloc_r+0xea>
 8007ae4:	6821      	ldr	r1, [r4, #0]
 8007ae6:	1a6d      	subs	r5, r5, r1
 8007ae8:	4629      	mov	r1, r5
 8007aea:	4630      	mov	r0, r6
 8007aec:	f7ff ffa6 	bl	8007a3c <sbrk_aligned>
 8007af0:	3001      	adds	r0, #1
 8007af2:	d03a      	beq.n	8007b6a <_malloc_r+0xea>
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	442b      	add	r3, r5
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	f8d8 3000 	ldr.w	r3, [r8]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	bb62      	cbnz	r2, 8007b5c <_malloc_r+0xdc>
 8007b02:	f8c8 7000 	str.w	r7, [r8]
 8007b06:	e00f      	b.n	8007b28 <_malloc_r+0xa8>
 8007b08:	6822      	ldr	r2, [r4, #0]
 8007b0a:	1b52      	subs	r2, r2, r5
 8007b0c:	d420      	bmi.n	8007b50 <_malloc_r+0xd0>
 8007b0e:	2a0b      	cmp	r2, #11
 8007b10:	d917      	bls.n	8007b42 <_malloc_r+0xc2>
 8007b12:	1961      	adds	r1, r4, r5
 8007b14:	42a3      	cmp	r3, r4
 8007b16:	6025      	str	r5, [r4, #0]
 8007b18:	bf18      	it	ne
 8007b1a:	6059      	strne	r1, [r3, #4]
 8007b1c:	6863      	ldr	r3, [r4, #4]
 8007b1e:	bf08      	it	eq
 8007b20:	f8c8 1000 	streq.w	r1, [r8]
 8007b24:	5162      	str	r2, [r4, r5]
 8007b26:	604b      	str	r3, [r1, #4]
 8007b28:	4630      	mov	r0, r6
 8007b2a:	f000 f82f 	bl	8007b8c <__malloc_unlock>
 8007b2e:	f104 000b 	add.w	r0, r4, #11
 8007b32:	1d23      	adds	r3, r4, #4
 8007b34:	f020 0007 	bic.w	r0, r0, #7
 8007b38:	1ac2      	subs	r2, r0, r3
 8007b3a:	bf1c      	itt	ne
 8007b3c:	1a1b      	subne	r3, r3, r0
 8007b3e:	50a3      	strne	r3, [r4, r2]
 8007b40:	e7af      	b.n	8007aa2 <_malloc_r+0x22>
 8007b42:	6862      	ldr	r2, [r4, #4]
 8007b44:	42a3      	cmp	r3, r4
 8007b46:	bf0c      	ite	eq
 8007b48:	f8c8 2000 	streq.w	r2, [r8]
 8007b4c:	605a      	strne	r2, [r3, #4]
 8007b4e:	e7eb      	b.n	8007b28 <_malloc_r+0xa8>
 8007b50:	4623      	mov	r3, r4
 8007b52:	6864      	ldr	r4, [r4, #4]
 8007b54:	e7ae      	b.n	8007ab4 <_malloc_r+0x34>
 8007b56:	463c      	mov	r4, r7
 8007b58:	687f      	ldr	r7, [r7, #4]
 8007b5a:	e7b6      	b.n	8007aca <_malloc_r+0x4a>
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	42a3      	cmp	r3, r4
 8007b62:	d1fb      	bne.n	8007b5c <_malloc_r+0xdc>
 8007b64:	2300      	movs	r3, #0
 8007b66:	6053      	str	r3, [r2, #4]
 8007b68:	e7de      	b.n	8007b28 <_malloc_r+0xa8>
 8007b6a:	230c      	movs	r3, #12
 8007b6c:	6033      	str	r3, [r6, #0]
 8007b6e:	4630      	mov	r0, r6
 8007b70:	f000 f80c 	bl	8007b8c <__malloc_unlock>
 8007b74:	e794      	b.n	8007aa0 <_malloc_r+0x20>
 8007b76:	6005      	str	r5, [r0, #0]
 8007b78:	e7d6      	b.n	8007b28 <_malloc_r+0xa8>
 8007b7a:	bf00      	nop
 8007b7c:	20000490 	.word	0x20000490

08007b80 <__malloc_lock>:
 8007b80:	4801      	ldr	r0, [pc, #4]	@ (8007b88 <__malloc_lock+0x8>)
 8007b82:	f7ff b8b8 	b.w	8006cf6 <__retarget_lock_acquire_recursive>
 8007b86:	bf00      	nop
 8007b88:	20000488 	.word	0x20000488

08007b8c <__malloc_unlock>:
 8007b8c:	4801      	ldr	r0, [pc, #4]	@ (8007b94 <__malloc_unlock+0x8>)
 8007b8e:	f7ff b8b3 	b.w	8006cf8 <__retarget_lock_release_recursive>
 8007b92:	bf00      	nop
 8007b94:	20000488 	.word	0x20000488

08007b98 <_Balloc>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	69c6      	ldr	r6, [r0, #28]
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	460d      	mov	r5, r1
 8007ba0:	b976      	cbnz	r6, 8007bc0 <_Balloc+0x28>
 8007ba2:	2010      	movs	r0, #16
 8007ba4:	f7ff ff42 	bl	8007a2c <malloc>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	61e0      	str	r0, [r4, #28]
 8007bac:	b920      	cbnz	r0, 8007bb8 <_Balloc+0x20>
 8007bae:	4b18      	ldr	r3, [pc, #96]	@ (8007c10 <_Balloc+0x78>)
 8007bb0:	4818      	ldr	r0, [pc, #96]	@ (8007c14 <_Balloc+0x7c>)
 8007bb2:	216b      	movs	r1, #107	@ 0x6b
 8007bb4:	f000 fdae 	bl	8008714 <__assert_func>
 8007bb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bbc:	6006      	str	r6, [r0, #0]
 8007bbe:	60c6      	str	r6, [r0, #12]
 8007bc0:	69e6      	ldr	r6, [r4, #28]
 8007bc2:	68f3      	ldr	r3, [r6, #12]
 8007bc4:	b183      	cbz	r3, 8007be8 <_Balloc+0x50>
 8007bc6:	69e3      	ldr	r3, [r4, #28]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007bce:	b9b8      	cbnz	r0, 8007c00 <_Balloc+0x68>
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	fa01 f605 	lsl.w	r6, r1, r5
 8007bd6:	1d72      	adds	r2, r6, #5
 8007bd8:	0092      	lsls	r2, r2, #2
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f000 fdb8 	bl	8008750 <_calloc_r>
 8007be0:	b160      	cbz	r0, 8007bfc <_Balloc+0x64>
 8007be2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007be6:	e00e      	b.n	8007c06 <_Balloc+0x6e>
 8007be8:	2221      	movs	r2, #33	@ 0x21
 8007bea:	2104      	movs	r1, #4
 8007bec:	4620      	mov	r0, r4
 8007bee:	f000 fdaf 	bl	8008750 <_calloc_r>
 8007bf2:	69e3      	ldr	r3, [r4, #28]
 8007bf4:	60f0      	str	r0, [r6, #12]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1e4      	bne.n	8007bc6 <_Balloc+0x2e>
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	bd70      	pop	{r4, r5, r6, pc}
 8007c00:	6802      	ldr	r2, [r0, #0]
 8007c02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c06:	2300      	movs	r3, #0
 8007c08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c0c:	e7f7      	b.n	8007bfe <_Balloc+0x66>
 8007c0e:	bf00      	nop
 8007c10:	08009341 	.word	0x08009341
 8007c14:	080093c1 	.word	0x080093c1

08007c18 <_Bfree>:
 8007c18:	b570      	push	{r4, r5, r6, lr}
 8007c1a:	69c6      	ldr	r6, [r0, #28]
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	460c      	mov	r4, r1
 8007c20:	b976      	cbnz	r6, 8007c40 <_Bfree+0x28>
 8007c22:	2010      	movs	r0, #16
 8007c24:	f7ff ff02 	bl	8007a2c <malloc>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	61e8      	str	r0, [r5, #28]
 8007c2c:	b920      	cbnz	r0, 8007c38 <_Bfree+0x20>
 8007c2e:	4b09      	ldr	r3, [pc, #36]	@ (8007c54 <_Bfree+0x3c>)
 8007c30:	4809      	ldr	r0, [pc, #36]	@ (8007c58 <_Bfree+0x40>)
 8007c32:	218f      	movs	r1, #143	@ 0x8f
 8007c34:	f000 fd6e 	bl	8008714 <__assert_func>
 8007c38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c3c:	6006      	str	r6, [r0, #0]
 8007c3e:	60c6      	str	r6, [r0, #12]
 8007c40:	b13c      	cbz	r4, 8007c52 <_Bfree+0x3a>
 8007c42:	69eb      	ldr	r3, [r5, #28]
 8007c44:	6862      	ldr	r2, [r4, #4]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c4c:	6021      	str	r1, [r4, #0]
 8007c4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c52:	bd70      	pop	{r4, r5, r6, pc}
 8007c54:	08009341 	.word	0x08009341
 8007c58:	080093c1 	.word	0x080093c1

08007c5c <__multadd>:
 8007c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c60:	690d      	ldr	r5, [r1, #16]
 8007c62:	4607      	mov	r7, r0
 8007c64:	460c      	mov	r4, r1
 8007c66:	461e      	mov	r6, r3
 8007c68:	f101 0c14 	add.w	ip, r1, #20
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	f8dc 3000 	ldr.w	r3, [ip]
 8007c72:	b299      	uxth	r1, r3
 8007c74:	fb02 6101 	mla	r1, r2, r1, r6
 8007c78:	0c1e      	lsrs	r6, r3, #16
 8007c7a:	0c0b      	lsrs	r3, r1, #16
 8007c7c:	fb02 3306 	mla	r3, r2, r6, r3
 8007c80:	b289      	uxth	r1, r1
 8007c82:	3001      	adds	r0, #1
 8007c84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c88:	4285      	cmp	r5, r0
 8007c8a:	f84c 1b04 	str.w	r1, [ip], #4
 8007c8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c92:	dcec      	bgt.n	8007c6e <__multadd+0x12>
 8007c94:	b30e      	cbz	r6, 8007cda <__multadd+0x7e>
 8007c96:	68a3      	ldr	r3, [r4, #8]
 8007c98:	42ab      	cmp	r3, r5
 8007c9a:	dc19      	bgt.n	8007cd0 <__multadd+0x74>
 8007c9c:	6861      	ldr	r1, [r4, #4]
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	3101      	adds	r1, #1
 8007ca2:	f7ff ff79 	bl	8007b98 <_Balloc>
 8007ca6:	4680      	mov	r8, r0
 8007ca8:	b928      	cbnz	r0, 8007cb6 <__multadd+0x5a>
 8007caa:	4602      	mov	r2, r0
 8007cac:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce0 <__multadd+0x84>)
 8007cae:	480d      	ldr	r0, [pc, #52]	@ (8007ce4 <__multadd+0x88>)
 8007cb0:	21ba      	movs	r1, #186	@ 0xba
 8007cb2:	f000 fd2f 	bl	8008714 <__assert_func>
 8007cb6:	6922      	ldr	r2, [r4, #16]
 8007cb8:	3202      	adds	r2, #2
 8007cba:	f104 010c 	add.w	r1, r4, #12
 8007cbe:	0092      	lsls	r2, r2, #2
 8007cc0:	300c      	adds	r0, #12
 8007cc2:	f000 fd19 	bl	80086f8 <memcpy>
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	4638      	mov	r0, r7
 8007cca:	f7ff ffa5 	bl	8007c18 <_Bfree>
 8007cce:	4644      	mov	r4, r8
 8007cd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007cd4:	3501      	adds	r5, #1
 8007cd6:	615e      	str	r6, [r3, #20]
 8007cd8:	6125      	str	r5, [r4, #16]
 8007cda:	4620      	mov	r0, r4
 8007cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ce0:	080093b0 	.word	0x080093b0
 8007ce4:	080093c1 	.word	0x080093c1

08007ce8 <__hi0bits>:
 8007ce8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007cec:	4603      	mov	r3, r0
 8007cee:	bf36      	itet	cc
 8007cf0:	0403      	lslcc	r3, r0, #16
 8007cf2:	2000      	movcs	r0, #0
 8007cf4:	2010      	movcc	r0, #16
 8007cf6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cfa:	bf3c      	itt	cc
 8007cfc:	021b      	lslcc	r3, r3, #8
 8007cfe:	3008      	addcc	r0, #8
 8007d00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d04:	bf3c      	itt	cc
 8007d06:	011b      	lslcc	r3, r3, #4
 8007d08:	3004      	addcc	r0, #4
 8007d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d0e:	bf3c      	itt	cc
 8007d10:	009b      	lslcc	r3, r3, #2
 8007d12:	3002      	addcc	r0, #2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	db05      	blt.n	8007d24 <__hi0bits+0x3c>
 8007d18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007d1c:	f100 0001 	add.w	r0, r0, #1
 8007d20:	bf08      	it	eq
 8007d22:	2020      	moveq	r0, #32
 8007d24:	4770      	bx	lr

08007d26 <__lo0bits>:
 8007d26:	6803      	ldr	r3, [r0, #0]
 8007d28:	4602      	mov	r2, r0
 8007d2a:	f013 0007 	ands.w	r0, r3, #7
 8007d2e:	d00b      	beq.n	8007d48 <__lo0bits+0x22>
 8007d30:	07d9      	lsls	r1, r3, #31
 8007d32:	d421      	bmi.n	8007d78 <__lo0bits+0x52>
 8007d34:	0798      	lsls	r0, r3, #30
 8007d36:	bf49      	itett	mi
 8007d38:	085b      	lsrmi	r3, r3, #1
 8007d3a:	089b      	lsrpl	r3, r3, #2
 8007d3c:	2001      	movmi	r0, #1
 8007d3e:	6013      	strmi	r3, [r2, #0]
 8007d40:	bf5c      	itt	pl
 8007d42:	6013      	strpl	r3, [r2, #0]
 8007d44:	2002      	movpl	r0, #2
 8007d46:	4770      	bx	lr
 8007d48:	b299      	uxth	r1, r3
 8007d4a:	b909      	cbnz	r1, 8007d50 <__lo0bits+0x2a>
 8007d4c:	0c1b      	lsrs	r3, r3, #16
 8007d4e:	2010      	movs	r0, #16
 8007d50:	b2d9      	uxtb	r1, r3
 8007d52:	b909      	cbnz	r1, 8007d58 <__lo0bits+0x32>
 8007d54:	3008      	adds	r0, #8
 8007d56:	0a1b      	lsrs	r3, r3, #8
 8007d58:	0719      	lsls	r1, r3, #28
 8007d5a:	bf04      	itt	eq
 8007d5c:	091b      	lsreq	r3, r3, #4
 8007d5e:	3004      	addeq	r0, #4
 8007d60:	0799      	lsls	r1, r3, #30
 8007d62:	bf04      	itt	eq
 8007d64:	089b      	lsreq	r3, r3, #2
 8007d66:	3002      	addeq	r0, #2
 8007d68:	07d9      	lsls	r1, r3, #31
 8007d6a:	d403      	bmi.n	8007d74 <__lo0bits+0x4e>
 8007d6c:	085b      	lsrs	r3, r3, #1
 8007d6e:	f100 0001 	add.w	r0, r0, #1
 8007d72:	d003      	beq.n	8007d7c <__lo0bits+0x56>
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	4770      	bx	lr
 8007d78:	2000      	movs	r0, #0
 8007d7a:	4770      	bx	lr
 8007d7c:	2020      	movs	r0, #32
 8007d7e:	4770      	bx	lr

08007d80 <__i2b>:
 8007d80:	b510      	push	{r4, lr}
 8007d82:	460c      	mov	r4, r1
 8007d84:	2101      	movs	r1, #1
 8007d86:	f7ff ff07 	bl	8007b98 <_Balloc>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	b928      	cbnz	r0, 8007d9a <__i2b+0x1a>
 8007d8e:	4b05      	ldr	r3, [pc, #20]	@ (8007da4 <__i2b+0x24>)
 8007d90:	4805      	ldr	r0, [pc, #20]	@ (8007da8 <__i2b+0x28>)
 8007d92:	f240 1145 	movw	r1, #325	@ 0x145
 8007d96:	f000 fcbd 	bl	8008714 <__assert_func>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	6144      	str	r4, [r0, #20]
 8007d9e:	6103      	str	r3, [r0, #16]
 8007da0:	bd10      	pop	{r4, pc}
 8007da2:	bf00      	nop
 8007da4:	080093b0 	.word	0x080093b0
 8007da8:	080093c1 	.word	0x080093c1

08007dac <__multiply>:
 8007dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db0:	4614      	mov	r4, r2
 8007db2:	690a      	ldr	r2, [r1, #16]
 8007db4:	6923      	ldr	r3, [r4, #16]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	bfa8      	it	ge
 8007dba:	4623      	movge	r3, r4
 8007dbc:	460f      	mov	r7, r1
 8007dbe:	bfa4      	itt	ge
 8007dc0:	460c      	movge	r4, r1
 8007dc2:	461f      	movge	r7, r3
 8007dc4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007dc8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007dcc:	68a3      	ldr	r3, [r4, #8]
 8007dce:	6861      	ldr	r1, [r4, #4]
 8007dd0:	eb0a 0609 	add.w	r6, sl, r9
 8007dd4:	42b3      	cmp	r3, r6
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	bfb8      	it	lt
 8007dda:	3101      	addlt	r1, #1
 8007ddc:	f7ff fedc 	bl	8007b98 <_Balloc>
 8007de0:	b930      	cbnz	r0, 8007df0 <__multiply+0x44>
 8007de2:	4602      	mov	r2, r0
 8007de4:	4b44      	ldr	r3, [pc, #272]	@ (8007ef8 <__multiply+0x14c>)
 8007de6:	4845      	ldr	r0, [pc, #276]	@ (8007efc <__multiply+0x150>)
 8007de8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007dec:	f000 fc92 	bl	8008714 <__assert_func>
 8007df0:	f100 0514 	add.w	r5, r0, #20
 8007df4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007df8:	462b      	mov	r3, r5
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	4543      	cmp	r3, r8
 8007dfe:	d321      	bcc.n	8007e44 <__multiply+0x98>
 8007e00:	f107 0114 	add.w	r1, r7, #20
 8007e04:	f104 0214 	add.w	r2, r4, #20
 8007e08:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007e0c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007e10:	9302      	str	r3, [sp, #8]
 8007e12:	1b13      	subs	r3, r2, r4
 8007e14:	3b15      	subs	r3, #21
 8007e16:	f023 0303 	bic.w	r3, r3, #3
 8007e1a:	3304      	adds	r3, #4
 8007e1c:	f104 0715 	add.w	r7, r4, #21
 8007e20:	42ba      	cmp	r2, r7
 8007e22:	bf38      	it	cc
 8007e24:	2304      	movcc	r3, #4
 8007e26:	9301      	str	r3, [sp, #4]
 8007e28:	9b02      	ldr	r3, [sp, #8]
 8007e2a:	9103      	str	r1, [sp, #12]
 8007e2c:	428b      	cmp	r3, r1
 8007e2e:	d80c      	bhi.n	8007e4a <__multiply+0x9e>
 8007e30:	2e00      	cmp	r6, #0
 8007e32:	dd03      	ble.n	8007e3c <__multiply+0x90>
 8007e34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d05b      	beq.n	8007ef4 <__multiply+0x148>
 8007e3c:	6106      	str	r6, [r0, #16]
 8007e3e:	b005      	add	sp, #20
 8007e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e44:	f843 2b04 	str.w	r2, [r3], #4
 8007e48:	e7d8      	b.n	8007dfc <__multiply+0x50>
 8007e4a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007e4e:	f1ba 0f00 	cmp.w	sl, #0
 8007e52:	d024      	beq.n	8007e9e <__multiply+0xf2>
 8007e54:	f104 0e14 	add.w	lr, r4, #20
 8007e58:	46a9      	mov	r9, r5
 8007e5a:	f04f 0c00 	mov.w	ip, #0
 8007e5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e62:	f8d9 3000 	ldr.w	r3, [r9]
 8007e66:	fa1f fb87 	uxth.w	fp, r7
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007e70:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007e74:	f8d9 7000 	ldr.w	r7, [r9]
 8007e78:	4463      	add	r3, ip
 8007e7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e7e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007e82:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e8c:	4572      	cmp	r2, lr
 8007e8e:	f849 3b04 	str.w	r3, [r9], #4
 8007e92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e96:	d8e2      	bhi.n	8007e5e <__multiply+0xb2>
 8007e98:	9b01      	ldr	r3, [sp, #4]
 8007e9a:	f845 c003 	str.w	ip, [r5, r3]
 8007e9e:	9b03      	ldr	r3, [sp, #12]
 8007ea0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007ea4:	3104      	adds	r1, #4
 8007ea6:	f1b9 0f00 	cmp.w	r9, #0
 8007eaa:	d021      	beq.n	8007ef0 <__multiply+0x144>
 8007eac:	682b      	ldr	r3, [r5, #0]
 8007eae:	f104 0c14 	add.w	ip, r4, #20
 8007eb2:	46ae      	mov	lr, r5
 8007eb4:	f04f 0a00 	mov.w	sl, #0
 8007eb8:	f8bc b000 	ldrh.w	fp, [ip]
 8007ebc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007ec0:	fb09 770b 	mla	r7, r9, fp, r7
 8007ec4:	4457      	add	r7, sl
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ecc:	f84e 3b04 	str.w	r3, [lr], #4
 8007ed0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ed4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ed8:	f8be 3000 	ldrh.w	r3, [lr]
 8007edc:	fb09 330a 	mla	r3, r9, sl, r3
 8007ee0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007ee4:	4562      	cmp	r2, ip
 8007ee6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007eea:	d8e5      	bhi.n	8007eb8 <__multiply+0x10c>
 8007eec:	9f01      	ldr	r7, [sp, #4]
 8007eee:	51eb      	str	r3, [r5, r7]
 8007ef0:	3504      	adds	r5, #4
 8007ef2:	e799      	b.n	8007e28 <__multiply+0x7c>
 8007ef4:	3e01      	subs	r6, #1
 8007ef6:	e79b      	b.n	8007e30 <__multiply+0x84>
 8007ef8:	080093b0 	.word	0x080093b0
 8007efc:	080093c1 	.word	0x080093c1

08007f00 <__pow5mult>:
 8007f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f04:	4615      	mov	r5, r2
 8007f06:	f012 0203 	ands.w	r2, r2, #3
 8007f0a:	4607      	mov	r7, r0
 8007f0c:	460e      	mov	r6, r1
 8007f0e:	d007      	beq.n	8007f20 <__pow5mult+0x20>
 8007f10:	4c25      	ldr	r4, [pc, #148]	@ (8007fa8 <__pow5mult+0xa8>)
 8007f12:	3a01      	subs	r2, #1
 8007f14:	2300      	movs	r3, #0
 8007f16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f1a:	f7ff fe9f 	bl	8007c5c <__multadd>
 8007f1e:	4606      	mov	r6, r0
 8007f20:	10ad      	asrs	r5, r5, #2
 8007f22:	d03d      	beq.n	8007fa0 <__pow5mult+0xa0>
 8007f24:	69fc      	ldr	r4, [r7, #28]
 8007f26:	b97c      	cbnz	r4, 8007f48 <__pow5mult+0x48>
 8007f28:	2010      	movs	r0, #16
 8007f2a:	f7ff fd7f 	bl	8007a2c <malloc>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	61f8      	str	r0, [r7, #28]
 8007f32:	b928      	cbnz	r0, 8007f40 <__pow5mult+0x40>
 8007f34:	4b1d      	ldr	r3, [pc, #116]	@ (8007fac <__pow5mult+0xac>)
 8007f36:	481e      	ldr	r0, [pc, #120]	@ (8007fb0 <__pow5mult+0xb0>)
 8007f38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007f3c:	f000 fbea 	bl	8008714 <__assert_func>
 8007f40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f44:	6004      	str	r4, [r0, #0]
 8007f46:	60c4      	str	r4, [r0, #12]
 8007f48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007f4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f50:	b94c      	cbnz	r4, 8007f66 <__pow5mult+0x66>
 8007f52:	f240 2171 	movw	r1, #625	@ 0x271
 8007f56:	4638      	mov	r0, r7
 8007f58:	f7ff ff12 	bl	8007d80 <__i2b>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f62:	4604      	mov	r4, r0
 8007f64:	6003      	str	r3, [r0, #0]
 8007f66:	f04f 0900 	mov.w	r9, #0
 8007f6a:	07eb      	lsls	r3, r5, #31
 8007f6c:	d50a      	bpl.n	8007f84 <__pow5mult+0x84>
 8007f6e:	4631      	mov	r1, r6
 8007f70:	4622      	mov	r2, r4
 8007f72:	4638      	mov	r0, r7
 8007f74:	f7ff ff1a 	bl	8007dac <__multiply>
 8007f78:	4631      	mov	r1, r6
 8007f7a:	4680      	mov	r8, r0
 8007f7c:	4638      	mov	r0, r7
 8007f7e:	f7ff fe4b 	bl	8007c18 <_Bfree>
 8007f82:	4646      	mov	r6, r8
 8007f84:	106d      	asrs	r5, r5, #1
 8007f86:	d00b      	beq.n	8007fa0 <__pow5mult+0xa0>
 8007f88:	6820      	ldr	r0, [r4, #0]
 8007f8a:	b938      	cbnz	r0, 8007f9c <__pow5mult+0x9c>
 8007f8c:	4622      	mov	r2, r4
 8007f8e:	4621      	mov	r1, r4
 8007f90:	4638      	mov	r0, r7
 8007f92:	f7ff ff0b 	bl	8007dac <__multiply>
 8007f96:	6020      	str	r0, [r4, #0]
 8007f98:	f8c0 9000 	str.w	r9, [r0]
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	e7e4      	b.n	8007f6a <__pow5mult+0x6a>
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa6:	bf00      	nop
 8007fa8:	0800941c 	.word	0x0800941c
 8007fac:	08009341 	.word	0x08009341
 8007fb0:	080093c1 	.word	0x080093c1

08007fb4 <__lshift>:
 8007fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb8:	460c      	mov	r4, r1
 8007fba:	6849      	ldr	r1, [r1, #4]
 8007fbc:	6923      	ldr	r3, [r4, #16]
 8007fbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007fc2:	68a3      	ldr	r3, [r4, #8]
 8007fc4:	4607      	mov	r7, r0
 8007fc6:	4691      	mov	r9, r2
 8007fc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007fcc:	f108 0601 	add.w	r6, r8, #1
 8007fd0:	42b3      	cmp	r3, r6
 8007fd2:	db0b      	blt.n	8007fec <__lshift+0x38>
 8007fd4:	4638      	mov	r0, r7
 8007fd6:	f7ff fddf 	bl	8007b98 <_Balloc>
 8007fda:	4605      	mov	r5, r0
 8007fdc:	b948      	cbnz	r0, 8007ff2 <__lshift+0x3e>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	4b28      	ldr	r3, [pc, #160]	@ (8008084 <__lshift+0xd0>)
 8007fe2:	4829      	ldr	r0, [pc, #164]	@ (8008088 <__lshift+0xd4>)
 8007fe4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007fe8:	f000 fb94 	bl	8008714 <__assert_func>
 8007fec:	3101      	adds	r1, #1
 8007fee:	005b      	lsls	r3, r3, #1
 8007ff0:	e7ee      	b.n	8007fd0 <__lshift+0x1c>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f100 0114 	add.w	r1, r0, #20
 8007ff8:	f100 0210 	add.w	r2, r0, #16
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	4553      	cmp	r3, sl
 8008000:	db33      	blt.n	800806a <__lshift+0xb6>
 8008002:	6920      	ldr	r0, [r4, #16]
 8008004:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008008:	f104 0314 	add.w	r3, r4, #20
 800800c:	f019 091f 	ands.w	r9, r9, #31
 8008010:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008014:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008018:	d02b      	beq.n	8008072 <__lshift+0xbe>
 800801a:	f1c9 0e20 	rsb	lr, r9, #32
 800801e:	468a      	mov	sl, r1
 8008020:	2200      	movs	r2, #0
 8008022:	6818      	ldr	r0, [r3, #0]
 8008024:	fa00 f009 	lsl.w	r0, r0, r9
 8008028:	4310      	orrs	r0, r2
 800802a:	f84a 0b04 	str.w	r0, [sl], #4
 800802e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008032:	459c      	cmp	ip, r3
 8008034:	fa22 f20e 	lsr.w	r2, r2, lr
 8008038:	d8f3      	bhi.n	8008022 <__lshift+0x6e>
 800803a:	ebac 0304 	sub.w	r3, ip, r4
 800803e:	3b15      	subs	r3, #21
 8008040:	f023 0303 	bic.w	r3, r3, #3
 8008044:	3304      	adds	r3, #4
 8008046:	f104 0015 	add.w	r0, r4, #21
 800804a:	4584      	cmp	ip, r0
 800804c:	bf38      	it	cc
 800804e:	2304      	movcc	r3, #4
 8008050:	50ca      	str	r2, [r1, r3]
 8008052:	b10a      	cbz	r2, 8008058 <__lshift+0xa4>
 8008054:	f108 0602 	add.w	r6, r8, #2
 8008058:	3e01      	subs	r6, #1
 800805a:	4638      	mov	r0, r7
 800805c:	612e      	str	r6, [r5, #16]
 800805e:	4621      	mov	r1, r4
 8008060:	f7ff fdda 	bl	8007c18 <_Bfree>
 8008064:	4628      	mov	r0, r5
 8008066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800806a:	f842 0f04 	str.w	r0, [r2, #4]!
 800806e:	3301      	adds	r3, #1
 8008070:	e7c5      	b.n	8007ffe <__lshift+0x4a>
 8008072:	3904      	subs	r1, #4
 8008074:	f853 2b04 	ldr.w	r2, [r3], #4
 8008078:	f841 2f04 	str.w	r2, [r1, #4]!
 800807c:	459c      	cmp	ip, r3
 800807e:	d8f9      	bhi.n	8008074 <__lshift+0xc0>
 8008080:	e7ea      	b.n	8008058 <__lshift+0xa4>
 8008082:	bf00      	nop
 8008084:	080093b0 	.word	0x080093b0
 8008088:	080093c1 	.word	0x080093c1

0800808c <__mcmp>:
 800808c:	690a      	ldr	r2, [r1, #16]
 800808e:	4603      	mov	r3, r0
 8008090:	6900      	ldr	r0, [r0, #16]
 8008092:	1a80      	subs	r0, r0, r2
 8008094:	b530      	push	{r4, r5, lr}
 8008096:	d10e      	bne.n	80080b6 <__mcmp+0x2a>
 8008098:	3314      	adds	r3, #20
 800809a:	3114      	adds	r1, #20
 800809c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80080a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80080a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80080a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80080ac:	4295      	cmp	r5, r2
 80080ae:	d003      	beq.n	80080b8 <__mcmp+0x2c>
 80080b0:	d205      	bcs.n	80080be <__mcmp+0x32>
 80080b2:	f04f 30ff 	mov.w	r0, #4294967295
 80080b6:	bd30      	pop	{r4, r5, pc}
 80080b8:	42a3      	cmp	r3, r4
 80080ba:	d3f3      	bcc.n	80080a4 <__mcmp+0x18>
 80080bc:	e7fb      	b.n	80080b6 <__mcmp+0x2a>
 80080be:	2001      	movs	r0, #1
 80080c0:	e7f9      	b.n	80080b6 <__mcmp+0x2a>
	...

080080c4 <__mdiff>:
 80080c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c8:	4689      	mov	r9, r1
 80080ca:	4606      	mov	r6, r0
 80080cc:	4611      	mov	r1, r2
 80080ce:	4648      	mov	r0, r9
 80080d0:	4614      	mov	r4, r2
 80080d2:	f7ff ffdb 	bl	800808c <__mcmp>
 80080d6:	1e05      	subs	r5, r0, #0
 80080d8:	d112      	bne.n	8008100 <__mdiff+0x3c>
 80080da:	4629      	mov	r1, r5
 80080dc:	4630      	mov	r0, r6
 80080de:	f7ff fd5b 	bl	8007b98 <_Balloc>
 80080e2:	4602      	mov	r2, r0
 80080e4:	b928      	cbnz	r0, 80080f2 <__mdiff+0x2e>
 80080e6:	4b3f      	ldr	r3, [pc, #252]	@ (80081e4 <__mdiff+0x120>)
 80080e8:	f240 2137 	movw	r1, #567	@ 0x237
 80080ec:	483e      	ldr	r0, [pc, #248]	@ (80081e8 <__mdiff+0x124>)
 80080ee:	f000 fb11 	bl	8008714 <__assert_func>
 80080f2:	2301      	movs	r3, #1
 80080f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080f8:	4610      	mov	r0, r2
 80080fa:	b003      	add	sp, #12
 80080fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008100:	bfbc      	itt	lt
 8008102:	464b      	movlt	r3, r9
 8008104:	46a1      	movlt	r9, r4
 8008106:	4630      	mov	r0, r6
 8008108:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800810c:	bfba      	itte	lt
 800810e:	461c      	movlt	r4, r3
 8008110:	2501      	movlt	r5, #1
 8008112:	2500      	movge	r5, #0
 8008114:	f7ff fd40 	bl	8007b98 <_Balloc>
 8008118:	4602      	mov	r2, r0
 800811a:	b918      	cbnz	r0, 8008124 <__mdiff+0x60>
 800811c:	4b31      	ldr	r3, [pc, #196]	@ (80081e4 <__mdiff+0x120>)
 800811e:	f240 2145 	movw	r1, #581	@ 0x245
 8008122:	e7e3      	b.n	80080ec <__mdiff+0x28>
 8008124:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008128:	6926      	ldr	r6, [r4, #16]
 800812a:	60c5      	str	r5, [r0, #12]
 800812c:	f109 0310 	add.w	r3, r9, #16
 8008130:	f109 0514 	add.w	r5, r9, #20
 8008134:	f104 0e14 	add.w	lr, r4, #20
 8008138:	f100 0b14 	add.w	fp, r0, #20
 800813c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008140:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008144:	9301      	str	r3, [sp, #4]
 8008146:	46d9      	mov	r9, fp
 8008148:	f04f 0c00 	mov.w	ip, #0
 800814c:	9b01      	ldr	r3, [sp, #4]
 800814e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008152:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008156:	9301      	str	r3, [sp, #4]
 8008158:	fa1f f38a 	uxth.w	r3, sl
 800815c:	4619      	mov	r1, r3
 800815e:	b283      	uxth	r3, r0
 8008160:	1acb      	subs	r3, r1, r3
 8008162:	0c00      	lsrs	r0, r0, #16
 8008164:	4463      	add	r3, ip
 8008166:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800816a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800816e:	b29b      	uxth	r3, r3
 8008170:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008174:	4576      	cmp	r6, lr
 8008176:	f849 3b04 	str.w	r3, [r9], #4
 800817a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800817e:	d8e5      	bhi.n	800814c <__mdiff+0x88>
 8008180:	1b33      	subs	r3, r6, r4
 8008182:	3b15      	subs	r3, #21
 8008184:	f023 0303 	bic.w	r3, r3, #3
 8008188:	3415      	adds	r4, #21
 800818a:	3304      	adds	r3, #4
 800818c:	42a6      	cmp	r6, r4
 800818e:	bf38      	it	cc
 8008190:	2304      	movcc	r3, #4
 8008192:	441d      	add	r5, r3
 8008194:	445b      	add	r3, fp
 8008196:	461e      	mov	r6, r3
 8008198:	462c      	mov	r4, r5
 800819a:	4544      	cmp	r4, r8
 800819c:	d30e      	bcc.n	80081bc <__mdiff+0xf8>
 800819e:	f108 0103 	add.w	r1, r8, #3
 80081a2:	1b49      	subs	r1, r1, r5
 80081a4:	f021 0103 	bic.w	r1, r1, #3
 80081a8:	3d03      	subs	r5, #3
 80081aa:	45a8      	cmp	r8, r5
 80081ac:	bf38      	it	cc
 80081ae:	2100      	movcc	r1, #0
 80081b0:	440b      	add	r3, r1
 80081b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80081b6:	b191      	cbz	r1, 80081de <__mdiff+0x11a>
 80081b8:	6117      	str	r7, [r2, #16]
 80081ba:	e79d      	b.n	80080f8 <__mdiff+0x34>
 80081bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80081c0:	46e6      	mov	lr, ip
 80081c2:	0c08      	lsrs	r0, r1, #16
 80081c4:	fa1c fc81 	uxtah	ip, ip, r1
 80081c8:	4471      	add	r1, lr
 80081ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80081ce:	b289      	uxth	r1, r1
 80081d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80081d4:	f846 1b04 	str.w	r1, [r6], #4
 80081d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80081dc:	e7dd      	b.n	800819a <__mdiff+0xd6>
 80081de:	3f01      	subs	r7, #1
 80081e0:	e7e7      	b.n	80081b2 <__mdiff+0xee>
 80081e2:	bf00      	nop
 80081e4:	080093b0 	.word	0x080093b0
 80081e8:	080093c1 	.word	0x080093c1

080081ec <__d2b>:
 80081ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80081f0:	460f      	mov	r7, r1
 80081f2:	2101      	movs	r1, #1
 80081f4:	ec59 8b10 	vmov	r8, r9, d0
 80081f8:	4616      	mov	r6, r2
 80081fa:	f7ff fccd 	bl	8007b98 <_Balloc>
 80081fe:	4604      	mov	r4, r0
 8008200:	b930      	cbnz	r0, 8008210 <__d2b+0x24>
 8008202:	4602      	mov	r2, r0
 8008204:	4b23      	ldr	r3, [pc, #140]	@ (8008294 <__d2b+0xa8>)
 8008206:	4824      	ldr	r0, [pc, #144]	@ (8008298 <__d2b+0xac>)
 8008208:	f240 310f 	movw	r1, #783	@ 0x30f
 800820c:	f000 fa82 	bl	8008714 <__assert_func>
 8008210:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008214:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008218:	b10d      	cbz	r5, 800821e <__d2b+0x32>
 800821a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800821e:	9301      	str	r3, [sp, #4]
 8008220:	f1b8 0300 	subs.w	r3, r8, #0
 8008224:	d023      	beq.n	800826e <__d2b+0x82>
 8008226:	4668      	mov	r0, sp
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	f7ff fd7c 	bl	8007d26 <__lo0bits>
 800822e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008232:	b1d0      	cbz	r0, 800826a <__d2b+0x7e>
 8008234:	f1c0 0320 	rsb	r3, r0, #32
 8008238:	fa02 f303 	lsl.w	r3, r2, r3
 800823c:	430b      	orrs	r3, r1
 800823e:	40c2      	lsrs	r2, r0
 8008240:	6163      	str	r3, [r4, #20]
 8008242:	9201      	str	r2, [sp, #4]
 8008244:	9b01      	ldr	r3, [sp, #4]
 8008246:	61a3      	str	r3, [r4, #24]
 8008248:	2b00      	cmp	r3, #0
 800824a:	bf0c      	ite	eq
 800824c:	2201      	moveq	r2, #1
 800824e:	2202      	movne	r2, #2
 8008250:	6122      	str	r2, [r4, #16]
 8008252:	b1a5      	cbz	r5, 800827e <__d2b+0x92>
 8008254:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008258:	4405      	add	r5, r0
 800825a:	603d      	str	r5, [r7, #0]
 800825c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008260:	6030      	str	r0, [r6, #0]
 8008262:	4620      	mov	r0, r4
 8008264:	b003      	add	sp, #12
 8008266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800826a:	6161      	str	r1, [r4, #20]
 800826c:	e7ea      	b.n	8008244 <__d2b+0x58>
 800826e:	a801      	add	r0, sp, #4
 8008270:	f7ff fd59 	bl	8007d26 <__lo0bits>
 8008274:	9b01      	ldr	r3, [sp, #4]
 8008276:	6163      	str	r3, [r4, #20]
 8008278:	3020      	adds	r0, #32
 800827a:	2201      	movs	r2, #1
 800827c:	e7e8      	b.n	8008250 <__d2b+0x64>
 800827e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008282:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008286:	6038      	str	r0, [r7, #0]
 8008288:	6918      	ldr	r0, [r3, #16]
 800828a:	f7ff fd2d 	bl	8007ce8 <__hi0bits>
 800828e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008292:	e7e5      	b.n	8008260 <__d2b+0x74>
 8008294:	080093b0 	.word	0x080093b0
 8008298:	080093c1 	.word	0x080093c1

0800829c <__ssputs_r>:
 800829c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082a0:	688e      	ldr	r6, [r1, #8]
 80082a2:	461f      	mov	r7, r3
 80082a4:	42be      	cmp	r6, r7
 80082a6:	680b      	ldr	r3, [r1, #0]
 80082a8:	4682      	mov	sl, r0
 80082aa:	460c      	mov	r4, r1
 80082ac:	4690      	mov	r8, r2
 80082ae:	d82d      	bhi.n	800830c <__ssputs_r+0x70>
 80082b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80082b8:	d026      	beq.n	8008308 <__ssputs_r+0x6c>
 80082ba:	6965      	ldr	r5, [r4, #20]
 80082bc:	6909      	ldr	r1, [r1, #16]
 80082be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082c2:	eba3 0901 	sub.w	r9, r3, r1
 80082c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082ca:	1c7b      	adds	r3, r7, #1
 80082cc:	444b      	add	r3, r9
 80082ce:	106d      	asrs	r5, r5, #1
 80082d0:	429d      	cmp	r5, r3
 80082d2:	bf38      	it	cc
 80082d4:	461d      	movcc	r5, r3
 80082d6:	0553      	lsls	r3, r2, #21
 80082d8:	d527      	bpl.n	800832a <__ssputs_r+0x8e>
 80082da:	4629      	mov	r1, r5
 80082dc:	f7ff fbd0 	bl	8007a80 <_malloc_r>
 80082e0:	4606      	mov	r6, r0
 80082e2:	b360      	cbz	r0, 800833e <__ssputs_r+0xa2>
 80082e4:	6921      	ldr	r1, [r4, #16]
 80082e6:	464a      	mov	r2, r9
 80082e8:	f000 fa06 	bl	80086f8 <memcpy>
 80082ec:	89a3      	ldrh	r3, [r4, #12]
 80082ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80082f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082f6:	81a3      	strh	r3, [r4, #12]
 80082f8:	6126      	str	r6, [r4, #16]
 80082fa:	6165      	str	r5, [r4, #20]
 80082fc:	444e      	add	r6, r9
 80082fe:	eba5 0509 	sub.w	r5, r5, r9
 8008302:	6026      	str	r6, [r4, #0]
 8008304:	60a5      	str	r5, [r4, #8]
 8008306:	463e      	mov	r6, r7
 8008308:	42be      	cmp	r6, r7
 800830a:	d900      	bls.n	800830e <__ssputs_r+0x72>
 800830c:	463e      	mov	r6, r7
 800830e:	6820      	ldr	r0, [r4, #0]
 8008310:	4632      	mov	r2, r6
 8008312:	4641      	mov	r1, r8
 8008314:	f000 f9c6 	bl	80086a4 <memmove>
 8008318:	68a3      	ldr	r3, [r4, #8]
 800831a:	1b9b      	subs	r3, r3, r6
 800831c:	60a3      	str	r3, [r4, #8]
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	4433      	add	r3, r6
 8008322:	6023      	str	r3, [r4, #0]
 8008324:	2000      	movs	r0, #0
 8008326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832a:	462a      	mov	r2, r5
 800832c:	f000 fa36 	bl	800879c <_realloc_r>
 8008330:	4606      	mov	r6, r0
 8008332:	2800      	cmp	r0, #0
 8008334:	d1e0      	bne.n	80082f8 <__ssputs_r+0x5c>
 8008336:	6921      	ldr	r1, [r4, #16]
 8008338:	4650      	mov	r0, sl
 800833a:	f7ff fb2d 	bl	8007998 <_free_r>
 800833e:	230c      	movs	r3, #12
 8008340:	f8ca 3000 	str.w	r3, [sl]
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800834a:	81a3      	strh	r3, [r4, #12]
 800834c:	f04f 30ff 	mov.w	r0, #4294967295
 8008350:	e7e9      	b.n	8008326 <__ssputs_r+0x8a>
	...

08008354 <_svfiprintf_r>:
 8008354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008358:	4698      	mov	r8, r3
 800835a:	898b      	ldrh	r3, [r1, #12]
 800835c:	061b      	lsls	r3, r3, #24
 800835e:	b09d      	sub	sp, #116	@ 0x74
 8008360:	4607      	mov	r7, r0
 8008362:	460d      	mov	r5, r1
 8008364:	4614      	mov	r4, r2
 8008366:	d510      	bpl.n	800838a <_svfiprintf_r+0x36>
 8008368:	690b      	ldr	r3, [r1, #16]
 800836a:	b973      	cbnz	r3, 800838a <_svfiprintf_r+0x36>
 800836c:	2140      	movs	r1, #64	@ 0x40
 800836e:	f7ff fb87 	bl	8007a80 <_malloc_r>
 8008372:	6028      	str	r0, [r5, #0]
 8008374:	6128      	str	r0, [r5, #16]
 8008376:	b930      	cbnz	r0, 8008386 <_svfiprintf_r+0x32>
 8008378:	230c      	movs	r3, #12
 800837a:	603b      	str	r3, [r7, #0]
 800837c:	f04f 30ff 	mov.w	r0, #4294967295
 8008380:	b01d      	add	sp, #116	@ 0x74
 8008382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008386:	2340      	movs	r3, #64	@ 0x40
 8008388:	616b      	str	r3, [r5, #20]
 800838a:	2300      	movs	r3, #0
 800838c:	9309      	str	r3, [sp, #36]	@ 0x24
 800838e:	2320      	movs	r3, #32
 8008390:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008394:	f8cd 800c 	str.w	r8, [sp, #12]
 8008398:	2330      	movs	r3, #48	@ 0x30
 800839a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008538 <_svfiprintf_r+0x1e4>
 800839e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083a2:	f04f 0901 	mov.w	r9, #1
 80083a6:	4623      	mov	r3, r4
 80083a8:	469a      	mov	sl, r3
 80083aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083ae:	b10a      	cbz	r2, 80083b4 <_svfiprintf_r+0x60>
 80083b0:	2a25      	cmp	r2, #37	@ 0x25
 80083b2:	d1f9      	bne.n	80083a8 <_svfiprintf_r+0x54>
 80083b4:	ebba 0b04 	subs.w	fp, sl, r4
 80083b8:	d00b      	beq.n	80083d2 <_svfiprintf_r+0x7e>
 80083ba:	465b      	mov	r3, fp
 80083bc:	4622      	mov	r2, r4
 80083be:	4629      	mov	r1, r5
 80083c0:	4638      	mov	r0, r7
 80083c2:	f7ff ff6b 	bl	800829c <__ssputs_r>
 80083c6:	3001      	adds	r0, #1
 80083c8:	f000 80a7 	beq.w	800851a <_svfiprintf_r+0x1c6>
 80083cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083ce:	445a      	add	r2, fp
 80083d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80083d2:	f89a 3000 	ldrb.w	r3, [sl]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f000 809f 	beq.w	800851a <_svfiprintf_r+0x1c6>
 80083dc:	2300      	movs	r3, #0
 80083de:	f04f 32ff 	mov.w	r2, #4294967295
 80083e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083e6:	f10a 0a01 	add.w	sl, sl, #1
 80083ea:	9304      	str	r3, [sp, #16]
 80083ec:	9307      	str	r3, [sp, #28]
 80083ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80083f4:	4654      	mov	r4, sl
 80083f6:	2205      	movs	r2, #5
 80083f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083fc:	484e      	ldr	r0, [pc, #312]	@ (8008538 <_svfiprintf_r+0x1e4>)
 80083fe:	f7f7 feef 	bl	80001e0 <memchr>
 8008402:	9a04      	ldr	r2, [sp, #16]
 8008404:	b9d8      	cbnz	r0, 800843e <_svfiprintf_r+0xea>
 8008406:	06d0      	lsls	r0, r2, #27
 8008408:	bf44      	itt	mi
 800840a:	2320      	movmi	r3, #32
 800840c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008410:	0711      	lsls	r1, r2, #28
 8008412:	bf44      	itt	mi
 8008414:	232b      	movmi	r3, #43	@ 0x2b
 8008416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800841a:	f89a 3000 	ldrb.w	r3, [sl]
 800841e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008420:	d015      	beq.n	800844e <_svfiprintf_r+0xfa>
 8008422:	9a07      	ldr	r2, [sp, #28]
 8008424:	4654      	mov	r4, sl
 8008426:	2000      	movs	r0, #0
 8008428:	f04f 0c0a 	mov.w	ip, #10
 800842c:	4621      	mov	r1, r4
 800842e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008432:	3b30      	subs	r3, #48	@ 0x30
 8008434:	2b09      	cmp	r3, #9
 8008436:	d94b      	bls.n	80084d0 <_svfiprintf_r+0x17c>
 8008438:	b1b0      	cbz	r0, 8008468 <_svfiprintf_r+0x114>
 800843a:	9207      	str	r2, [sp, #28]
 800843c:	e014      	b.n	8008468 <_svfiprintf_r+0x114>
 800843e:	eba0 0308 	sub.w	r3, r0, r8
 8008442:	fa09 f303 	lsl.w	r3, r9, r3
 8008446:	4313      	orrs	r3, r2
 8008448:	9304      	str	r3, [sp, #16]
 800844a:	46a2      	mov	sl, r4
 800844c:	e7d2      	b.n	80083f4 <_svfiprintf_r+0xa0>
 800844e:	9b03      	ldr	r3, [sp, #12]
 8008450:	1d19      	adds	r1, r3, #4
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	9103      	str	r1, [sp, #12]
 8008456:	2b00      	cmp	r3, #0
 8008458:	bfbb      	ittet	lt
 800845a:	425b      	neglt	r3, r3
 800845c:	f042 0202 	orrlt.w	r2, r2, #2
 8008460:	9307      	strge	r3, [sp, #28]
 8008462:	9307      	strlt	r3, [sp, #28]
 8008464:	bfb8      	it	lt
 8008466:	9204      	strlt	r2, [sp, #16]
 8008468:	7823      	ldrb	r3, [r4, #0]
 800846a:	2b2e      	cmp	r3, #46	@ 0x2e
 800846c:	d10a      	bne.n	8008484 <_svfiprintf_r+0x130>
 800846e:	7863      	ldrb	r3, [r4, #1]
 8008470:	2b2a      	cmp	r3, #42	@ 0x2a
 8008472:	d132      	bne.n	80084da <_svfiprintf_r+0x186>
 8008474:	9b03      	ldr	r3, [sp, #12]
 8008476:	1d1a      	adds	r2, r3, #4
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	9203      	str	r2, [sp, #12]
 800847c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008480:	3402      	adds	r4, #2
 8008482:	9305      	str	r3, [sp, #20]
 8008484:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008548 <_svfiprintf_r+0x1f4>
 8008488:	7821      	ldrb	r1, [r4, #0]
 800848a:	2203      	movs	r2, #3
 800848c:	4650      	mov	r0, sl
 800848e:	f7f7 fea7 	bl	80001e0 <memchr>
 8008492:	b138      	cbz	r0, 80084a4 <_svfiprintf_r+0x150>
 8008494:	9b04      	ldr	r3, [sp, #16]
 8008496:	eba0 000a 	sub.w	r0, r0, sl
 800849a:	2240      	movs	r2, #64	@ 0x40
 800849c:	4082      	lsls	r2, r0
 800849e:	4313      	orrs	r3, r2
 80084a0:	3401      	adds	r4, #1
 80084a2:	9304      	str	r3, [sp, #16]
 80084a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084a8:	4824      	ldr	r0, [pc, #144]	@ (800853c <_svfiprintf_r+0x1e8>)
 80084aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084ae:	2206      	movs	r2, #6
 80084b0:	f7f7 fe96 	bl	80001e0 <memchr>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	d036      	beq.n	8008526 <_svfiprintf_r+0x1d2>
 80084b8:	4b21      	ldr	r3, [pc, #132]	@ (8008540 <_svfiprintf_r+0x1ec>)
 80084ba:	bb1b      	cbnz	r3, 8008504 <_svfiprintf_r+0x1b0>
 80084bc:	9b03      	ldr	r3, [sp, #12]
 80084be:	3307      	adds	r3, #7
 80084c0:	f023 0307 	bic.w	r3, r3, #7
 80084c4:	3308      	adds	r3, #8
 80084c6:	9303      	str	r3, [sp, #12]
 80084c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ca:	4433      	add	r3, r6
 80084cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80084ce:	e76a      	b.n	80083a6 <_svfiprintf_r+0x52>
 80084d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80084d4:	460c      	mov	r4, r1
 80084d6:	2001      	movs	r0, #1
 80084d8:	e7a8      	b.n	800842c <_svfiprintf_r+0xd8>
 80084da:	2300      	movs	r3, #0
 80084dc:	3401      	adds	r4, #1
 80084de:	9305      	str	r3, [sp, #20]
 80084e0:	4619      	mov	r1, r3
 80084e2:	f04f 0c0a 	mov.w	ip, #10
 80084e6:	4620      	mov	r0, r4
 80084e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084ec:	3a30      	subs	r2, #48	@ 0x30
 80084ee:	2a09      	cmp	r2, #9
 80084f0:	d903      	bls.n	80084fa <_svfiprintf_r+0x1a6>
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d0c6      	beq.n	8008484 <_svfiprintf_r+0x130>
 80084f6:	9105      	str	r1, [sp, #20]
 80084f8:	e7c4      	b.n	8008484 <_svfiprintf_r+0x130>
 80084fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80084fe:	4604      	mov	r4, r0
 8008500:	2301      	movs	r3, #1
 8008502:	e7f0      	b.n	80084e6 <_svfiprintf_r+0x192>
 8008504:	ab03      	add	r3, sp, #12
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	462a      	mov	r2, r5
 800850a:	4b0e      	ldr	r3, [pc, #56]	@ (8008544 <_svfiprintf_r+0x1f0>)
 800850c:	a904      	add	r1, sp, #16
 800850e:	4638      	mov	r0, r7
 8008510:	f7fd fe82 	bl	8006218 <_printf_float>
 8008514:	1c42      	adds	r2, r0, #1
 8008516:	4606      	mov	r6, r0
 8008518:	d1d6      	bne.n	80084c8 <_svfiprintf_r+0x174>
 800851a:	89ab      	ldrh	r3, [r5, #12]
 800851c:	065b      	lsls	r3, r3, #25
 800851e:	f53f af2d 	bmi.w	800837c <_svfiprintf_r+0x28>
 8008522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008524:	e72c      	b.n	8008380 <_svfiprintf_r+0x2c>
 8008526:	ab03      	add	r3, sp, #12
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	462a      	mov	r2, r5
 800852c:	4b05      	ldr	r3, [pc, #20]	@ (8008544 <_svfiprintf_r+0x1f0>)
 800852e:	a904      	add	r1, sp, #16
 8008530:	4638      	mov	r0, r7
 8008532:	f7fe f909 	bl	8006748 <_printf_i>
 8008536:	e7ed      	b.n	8008514 <_svfiprintf_r+0x1c0>
 8008538:	08009518 	.word	0x08009518
 800853c:	08009522 	.word	0x08009522
 8008540:	08006219 	.word	0x08006219
 8008544:	0800829d 	.word	0x0800829d
 8008548:	0800951e 	.word	0x0800951e

0800854c <__sflush_r>:
 800854c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008554:	0716      	lsls	r6, r2, #28
 8008556:	4605      	mov	r5, r0
 8008558:	460c      	mov	r4, r1
 800855a:	d454      	bmi.n	8008606 <__sflush_r+0xba>
 800855c:	684b      	ldr	r3, [r1, #4]
 800855e:	2b00      	cmp	r3, #0
 8008560:	dc02      	bgt.n	8008568 <__sflush_r+0x1c>
 8008562:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008564:	2b00      	cmp	r3, #0
 8008566:	dd48      	ble.n	80085fa <__sflush_r+0xae>
 8008568:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800856a:	2e00      	cmp	r6, #0
 800856c:	d045      	beq.n	80085fa <__sflush_r+0xae>
 800856e:	2300      	movs	r3, #0
 8008570:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008574:	682f      	ldr	r7, [r5, #0]
 8008576:	6a21      	ldr	r1, [r4, #32]
 8008578:	602b      	str	r3, [r5, #0]
 800857a:	d030      	beq.n	80085de <__sflush_r+0x92>
 800857c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800857e:	89a3      	ldrh	r3, [r4, #12]
 8008580:	0759      	lsls	r1, r3, #29
 8008582:	d505      	bpl.n	8008590 <__sflush_r+0x44>
 8008584:	6863      	ldr	r3, [r4, #4]
 8008586:	1ad2      	subs	r2, r2, r3
 8008588:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800858a:	b10b      	cbz	r3, 8008590 <__sflush_r+0x44>
 800858c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800858e:	1ad2      	subs	r2, r2, r3
 8008590:	2300      	movs	r3, #0
 8008592:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008594:	6a21      	ldr	r1, [r4, #32]
 8008596:	4628      	mov	r0, r5
 8008598:	47b0      	blx	r6
 800859a:	1c43      	adds	r3, r0, #1
 800859c:	89a3      	ldrh	r3, [r4, #12]
 800859e:	d106      	bne.n	80085ae <__sflush_r+0x62>
 80085a0:	6829      	ldr	r1, [r5, #0]
 80085a2:	291d      	cmp	r1, #29
 80085a4:	d82b      	bhi.n	80085fe <__sflush_r+0xb2>
 80085a6:	4a2a      	ldr	r2, [pc, #168]	@ (8008650 <__sflush_r+0x104>)
 80085a8:	410a      	asrs	r2, r1
 80085aa:	07d6      	lsls	r6, r2, #31
 80085ac:	d427      	bmi.n	80085fe <__sflush_r+0xb2>
 80085ae:	2200      	movs	r2, #0
 80085b0:	6062      	str	r2, [r4, #4]
 80085b2:	04d9      	lsls	r1, r3, #19
 80085b4:	6922      	ldr	r2, [r4, #16]
 80085b6:	6022      	str	r2, [r4, #0]
 80085b8:	d504      	bpl.n	80085c4 <__sflush_r+0x78>
 80085ba:	1c42      	adds	r2, r0, #1
 80085bc:	d101      	bne.n	80085c2 <__sflush_r+0x76>
 80085be:	682b      	ldr	r3, [r5, #0]
 80085c0:	b903      	cbnz	r3, 80085c4 <__sflush_r+0x78>
 80085c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80085c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085c6:	602f      	str	r7, [r5, #0]
 80085c8:	b1b9      	cbz	r1, 80085fa <__sflush_r+0xae>
 80085ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085ce:	4299      	cmp	r1, r3
 80085d0:	d002      	beq.n	80085d8 <__sflush_r+0x8c>
 80085d2:	4628      	mov	r0, r5
 80085d4:	f7ff f9e0 	bl	8007998 <_free_r>
 80085d8:	2300      	movs	r3, #0
 80085da:	6363      	str	r3, [r4, #52]	@ 0x34
 80085dc:	e00d      	b.n	80085fa <__sflush_r+0xae>
 80085de:	2301      	movs	r3, #1
 80085e0:	4628      	mov	r0, r5
 80085e2:	47b0      	blx	r6
 80085e4:	4602      	mov	r2, r0
 80085e6:	1c50      	adds	r0, r2, #1
 80085e8:	d1c9      	bne.n	800857e <__sflush_r+0x32>
 80085ea:	682b      	ldr	r3, [r5, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d0c6      	beq.n	800857e <__sflush_r+0x32>
 80085f0:	2b1d      	cmp	r3, #29
 80085f2:	d001      	beq.n	80085f8 <__sflush_r+0xac>
 80085f4:	2b16      	cmp	r3, #22
 80085f6:	d11e      	bne.n	8008636 <__sflush_r+0xea>
 80085f8:	602f      	str	r7, [r5, #0]
 80085fa:	2000      	movs	r0, #0
 80085fc:	e022      	b.n	8008644 <__sflush_r+0xf8>
 80085fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008602:	b21b      	sxth	r3, r3
 8008604:	e01b      	b.n	800863e <__sflush_r+0xf2>
 8008606:	690f      	ldr	r7, [r1, #16]
 8008608:	2f00      	cmp	r7, #0
 800860a:	d0f6      	beq.n	80085fa <__sflush_r+0xae>
 800860c:	0793      	lsls	r3, r2, #30
 800860e:	680e      	ldr	r6, [r1, #0]
 8008610:	bf08      	it	eq
 8008612:	694b      	ldreq	r3, [r1, #20]
 8008614:	600f      	str	r7, [r1, #0]
 8008616:	bf18      	it	ne
 8008618:	2300      	movne	r3, #0
 800861a:	eba6 0807 	sub.w	r8, r6, r7
 800861e:	608b      	str	r3, [r1, #8]
 8008620:	f1b8 0f00 	cmp.w	r8, #0
 8008624:	dde9      	ble.n	80085fa <__sflush_r+0xae>
 8008626:	6a21      	ldr	r1, [r4, #32]
 8008628:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800862a:	4643      	mov	r3, r8
 800862c:	463a      	mov	r2, r7
 800862e:	4628      	mov	r0, r5
 8008630:	47b0      	blx	r6
 8008632:	2800      	cmp	r0, #0
 8008634:	dc08      	bgt.n	8008648 <__sflush_r+0xfc>
 8008636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800863a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800863e:	81a3      	strh	r3, [r4, #12]
 8008640:	f04f 30ff 	mov.w	r0, #4294967295
 8008644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008648:	4407      	add	r7, r0
 800864a:	eba8 0800 	sub.w	r8, r8, r0
 800864e:	e7e7      	b.n	8008620 <__sflush_r+0xd4>
 8008650:	dfbffffe 	.word	0xdfbffffe

08008654 <_fflush_r>:
 8008654:	b538      	push	{r3, r4, r5, lr}
 8008656:	690b      	ldr	r3, [r1, #16]
 8008658:	4605      	mov	r5, r0
 800865a:	460c      	mov	r4, r1
 800865c:	b913      	cbnz	r3, 8008664 <_fflush_r+0x10>
 800865e:	2500      	movs	r5, #0
 8008660:	4628      	mov	r0, r5
 8008662:	bd38      	pop	{r3, r4, r5, pc}
 8008664:	b118      	cbz	r0, 800866e <_fflush_r+0x1a>
 8008666:	6a03      	ldr	r3, [r0, #32]
 8008668:	b90b      	cbnz	r3, 800866e <_fflush_r+0x1a>
 800866a:	f7fe fa19 	bl	8006aa0 <__sinit>
 800866e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0f3      	beq.n	800865e <_fflush_r+0xa>
 8008676:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008678:	07d0      	lsls	r0, r2, #31
 800867a:	d404      	bmi.n	8008686 <_fflush_r+0x32>
 800867c:	0599      	lsls	r1, r3, #22
 800867e:	d402      	bmi.n	8008686 <_fflush_r+0x32>
 8008680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008682:	f7fe fb38 	bl	8006cf6 <__retarget_lock_acquire_recursive>
 8008686:	4628      	mov	r0, r5
 8008688:	4621      	mov	r1, r4
 800868a:	f7ff ff5f 	bl	800854c <__sflush_r>
 800868e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008690:	07da      	lsls	r2, r3, #31
 8008692:	4605      	mov	r5, r0
 8008694:	d4e4      	bmi.n	8008660 <_fflush_r+0xc>
 8008696:	89a3      	ldrh	r3, [r4, #12]
 8008698:	059b      	lsls	r3, r3, #22
 800869a:	d4e1      	bmi.n	8008660 <_fflush_r+0xc>
 800869c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800869e:	f7fe fb2b 	bl	8006cf8 <__retarget_lock_release_recursive>
 80086a2:	e7dd      	b.n	8008660 <_fflush_r+0xc>

080086a4 <memmove>:
 80086a4:	4288      	cmp	r0, r1
 80086a6:	b510      	push	{r4, lr}
 80086a8:	eb01 0402 	add.w	r4, r1, r2
 80086ac:	d902      	bls.n	80086b4 <memmove+0x10>
 80086ae:	4284      	cmp	r4, r0
 80086b0:	4623      	mov	r3, r4
 80086b2:	d807      	bhi.n	80086c4 <memmove+0x20>
 80086b4:	1e43      	subs	r3, r0, #1
 80086b6:	42a1      	cmp	r1, r4
 80086b8:	d008      	beq.n	80086cc <memmove+0x28>
 80086ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086c2:	e7f8      	b.n	80086b6 <memmove+0x12>
 80086c4:	4402      	add	r2, r0
 80086c6:	4601      	mov	r1, r0
 80086c8:	428a      	cmp	r2, r1
 80086ca:	d100      	bne.n	80086ce <memmove+0x2a>
 80086cc:	bd10      	pop	{r4, pc}
 80086ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086d6:	e7f7      	b.n	80086c8 <memmove+0x24>

080086d8 <_sbrk_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4d06      	ldr	r5, [pc, #24]	@ (80086f4 <_sbrk_r+0x1c>)
 80086dc:	2300      	movs	r3, #0
 80086de:	4604      	mov	r4, r0
 80086e0:	4608      	mov	r0, r1
 80086e2:	602b      	str	r3, [r5, #0]
 80086e4:	f7f9 fc90 	bl	8002008 <_sbrk>
 80086e8:	1c43      	adds	r3, r0, #1
 80086ea:	d102      	bne.n	80086f2 <_sbrk_r+0x1a>
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	b103      	cbz	r3, 80086f2 <_sbrk_r+0x1a>
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	20000484 	.word	0x20000484

080086f8 <memcpy>:
 80086f8:	440a      	add	r2, r1
 80086fa:	4291      	cmp	r1, r2
 80086fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008700:	d100      	bne.n	8008704 <memcpy+0xc>
 8008702:	4770      	bx	lr
 8008704:	b510      	push	{r4, lr}
 8008706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800870a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800870e:	4291      	cmp	r1, r2
 8008710:	d1f9      	bne.n	8008706 <memcpy+0xe>
 8008712:	bd10      	pop	{r4, pc}

08008714 <__assert_func>:
 8008714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008716:	4614      	mov	r4, r2
 8008718:	461a      	mov	r2, r3
 800871a:	4b09      	ldr	r3, [pc, #36]	@ (8008740 <__assert_func+0x2c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4605      	mov	r5, r0
 8008720:	68d8      	ldr	r0, [r3, #12]
 8008722:	b954      	cbnz	r4, 800873a <__assert_func+0x26>
 8008724:	4b07      	ldr	r3, [pc, #28]	@ (8008744 <__assert_func+0x30>)
 8008726:	461c      	mov	r4, r3
 8008728:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800872c:	9100      	str	r1, [sp, #0]
 800872e:	462b      	mov	r3, r5
 8008730:	4905      	ldr	r1, [pc, #20]	@ (8008748 <__assert_func+0x34>)
 8008732:	f000 f86f 	bl	8008814 <fiprintf>
 8008736:	f000 f87f 	bl	8008838 <abort>
 800873a:	4b04      	ldr	r3, [pc, #16]	@ (800874c <__assert_func+0x38>)
 800873c:	e7f4      	b.n	8008728 <__assert_func+0x14>
 800873e:	bf00      	nop
 8008740:	20000018 	.word	0x20000018
 8008744:	0800956e 	.word	0x0800956e
 8008748:	08009540 	.word	0x08009540
 800874c:	08009533 	.word	0x08009533

08008750 <_calloc_r>:
 8008750:	b570      	push	{r4, r5, r6, lr}
 8008752:	fba1 5402 	umull	r5, r4, r1, r2
 8008756:	b93c      	cbnz	r4, 8008768 <_calloc_r+0x18>
 8008758:	4629      	mov	r1, r5
 800875a:	f7ff f991 	bl	8007a80 <_malloc_r>
 800875e:	4606      	mov	r6, r0
 8008760:	b928      	cbnz	r0, 800876e <_calloc_r+0x1e>
 8008762:	2600      	movs	r6, #0
 8008764:	4630      	mov	r0, r6
 8008766:	bd70      	pop	{r4, r5, r6, pc}
 8008768:	220c      	movs	r2, #12
 800876a:	6002      	str	r2, [r0, #0]
 800876c:	e7f9      	b.n	8008762 <_calloc_r+0x12>
 800876e:	462a      	mov	r2, r5
 8008770:	4621      	mov	r1, r4
 8008772:	f7fe fa42 	bl	8006bfa <memset>
 8008776:	e7f5      	b.n	8008764 <_calloc_r+0x14>

08008778 <__ascii_mbtowc>:
 8008778:	b082      	sub	sp, #8
 800877a:	b901      	cbnz	r1, 800877e <__ascii_mbtowc+0x6>
 800877c:	a901      	add	r1, sp, #4
 800877e:	b142      	cbz	r2, 8008792 <__ascii_mbtowc+0x1a>
 8008780:	b14b      	cbz	r3, 8008796 <__ascii_mbtowc+0x1e>
 8008782:	7813      	ldrb	r3, [r2, #0]
 8008784:	600b      	str	r3, [r1, #0]
 8008786:	7812      	ldrb	r2, [r2, #0]
 8008788:	1e10      	subs	r0, r2, #0
 800878a:	bf18      	it	ne
 800878c:	2001      	movne	r0, #1
 800878e:	b002      	add	sp, #8
 8008790:	4770      	bx	lr
 8008792:	4610      	mov	r0, r2
 8008794:	e7fb      	b.n	800878e <__ascii_mbtowc+0x16>
 8008796:	f06f 0001 	mvn.w	r0, #1
 800879a:	e7f8      	b.n	800878e <__ascii_mbtowc+0x16>

0800879c <_realloc_r>:
 800879c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a0:	4680      	mov	r8, r0
 80087a2:	4615      	mov	r5, r2
 80087a4:	460c      	mov	r4, r1
 80087a6:	b921      	cbnz	r1, 80087b2 <_realloc_r+0x16>
 80087a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087ac:	4611      	mov	r1, r2
 80087ae:	f7ff b967 	b.w	8007a80 <_malloc_r>
 80087b2:	b92a      	cbnz	r2, 80087c0 <_realloc_r+0x24>
 80087b4:	f7ff f8f0 	bl	8007998 <_free_r>
 80087b8:	2400      	movs	r4, #0
 80087ba:	4620      	mov	r0, r4
 80087bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087c0:	f000 f841 	bl	8008846 <_malloc_usable_size_r>
 80087c4:	4285      	cmp	r5, r0
 80087c6:	4606      	mov	r6, r0
 80087c8:	d802      	bhi.n	80087d0 <_realloc_r+0x34>
 80087ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80087ce:	d8f4      	bhi.n	80087ba <_realloc_r+0x1e>
 80087d0:	4629      	mov	r1, r5
 80087d2:	4640      	mov	r0, r8
 80087d4:	f7ff f954 	bl	8007a80 <_malloc_r>
 80087d8:	4607      	mov	r7, r0
 80087da:	2800      	cmp	r0, #0
 80087dc:	d0ec      	beq.n	80087b8 <_realloc_r+0x1c>
 80087de:	42b5      	cmp	r5, r6
 80087e0:	462a      	mov	r2, r5
 80087e2:	4621      	mov	r1, r4
 80087e4:	bf28      	it	cs
 80087e6:	4632      	movcs	r2, r6
 80087e8:	f7ff ff86 	bl	80086f8 <memcpy>
 80087ec:	4621      	mov	r1, r4
 80087ee:	4640      	mov	r0, r8
 80087f0:	f7ff f8d2 	bl	8007998 <_free_r>
 80087f4:	463c      	mov	r4, r7
 80087f6:	e7e0      	b.n	80087ba <_realloc_r+0x1e>

080087f8 <__ascii_wctomb>:
 80087f8:	4603      	mov	r3, r0
 80087fa:	4608      	mov	r0, r1
 80087fc:	b141      	cbz	r1, 8008810 <__ascii_wctomb+0x18>
 80087fe:	2aff      	cmp	r2, #255	@ 0xff
 8008800:	d904      	bls.n	800880c <__ascii_wctomb+0x14>
 8008802:	228a      	movs	r2, #138	@ 0x8a
 8008804:	601a      	str	r2, [r3, #0]
 8008806:	f04f 30ff 	mov.w	r0, #4294967295
 800880a:	4770      	bx	lr
 800880c:	700a      	strb	r2, [r1, #0]
 800880e:	2001      	movs	r0, #1
 8008810:	4770      	bx	lr
	...

08008814 <fiprintf>:
 8008814:	b40e      	push	{r1, r2, r3}
 8008816:	b503      	push	{r0, r1, lr}
 8008818:	4601      	mov	r1, r0
 800881a:	ab03      	add	r3, sp, #12
 800881c:	4805      	ldr	r0, [pc, #20]	@ (8008834 <fiprintf+0x20>)
 800881e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008822:	6800      	ldr	r0, [r0, #0]
 8008824:	9301      	str	r3, [sp, #4]
 8008826:	f000 f83f 	bl	80088a8 <_vfiprintf_r>
 800882a:	b002      	add	sp, #8
 800882c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008830:	b003      	add	sp, #12
 8008832:	4770      	bx	lr
 8008834:	20000018 	.word	0x20000018

08008838 <abort>:
 8008838:	b508      	push	{r3, lr}
 800883a:	2006      	movs	r0, #6
 800883c:	f000 fa08 	bl	8008c50 <raise>
 8008840:	2001      	movs	r0, #1
 8008842:	f7f9 fb69 	bl	8001f18 <_exit>

08008846 <_malloc_usable_size_r>:
 8008846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800884a:	1f18      	subs	r0, r3, #4
 800884c:	2b00      	cmp	r3, #0
 800884e:	bfbc      	itt	lt
 8008850:	580b      	ldrlt	r3, [r1, r0]
 8008852:	18c0      	addlt	r0, r0, r3
 8008854:	4770      	bx	lr

08008856 <__sfputc_r>:
 8008856:	6893      	ldr	r3, [r2, #8]
 8008858:	3b01      	subs	r3, #1
 800885a:	2b00      	cmp	r3, #0
 800885c:	b410      	push	{r4}
 800885e:	6093      	str	r3, [r2, #8]
 8008860:	da08      	bge.n	8008874 <__sfputc_r+0x1e>
 8008862:	6994      	ldr	r4, [r2, #24]
 8008864:	42a3      	cmp	r3, r4
 8008866:	db01      	blt.n	800886c <__sfputc_r+0x16>
 8008868:	290a      	cmp	r1, #10
 800886a:	d103      	bne.n	8008874 <__sfputc_r+0x1e>
 800886c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008870:	f000 b932 	b.w	8008ad8 <__swbuf_r>
 8008874:	6813      	ldr	r3, [r2, #0]
 8008876:	1c58      	adds	r0, r3, #1
 8008878:	6010      	str	r0, [r2, #0]
 800887a:	7019      	strb	r1, [r3, #0]
 800887c:	4608      	mov	r0, r1
 800887e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008882:	4770      	bx	lr

08008884 <__sfputs_r>:
 8008884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008886:	4606      	mov	r6, r0
 8008888:	460f      	mov	r7, r1
 800888a:	4614      	mov	r4, r2
 800888c:	18d5      	adds	r5, r2, r3
 800888e:	42ac      	cmp	r4, r5
 8008890:	d101      	bne.n	8008896 <__sfputs_r+0x12>
 8008892:	2000      	movs	r0, #0
 8008894:	e007      	b.n	80088a6 <__sfputs_r+0x22>
 8008896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800889a:	463a      	mov	r2, r7
 800889c:	4630      	mov	r0, r6
 800889e:	f7ff ffda 	bl	8008856 <__sfputc_r>
 80088a2:	1c43      	adds	r3, r0, #1
 80088a4:	d1f3      	bne.n	800888e <__sfputs_r+0xa>
 80088a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080088a8 <_vfiprintf_r>:
 80088a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	460d      	mov	r5, r1
 80088ae:	b09d      	sub	sp, #116	@ 0x74
 80088b0:	4614      	mov	r4, r2
 80088b2:	4698      	mov	r8, r3
 80088b4:	4606      	mov	r6, r0
 80088b6:	b118      	cbz	r0, 80088c0 <_vfiprintf_r+0x18>
 80088b8:	6a03      	ldr	r3, [r0, #32]
 80088ba:	b90b      	cbnz	r3, 80088c0 <_vfiprintf_r+0x18>
 80088bc:	f7fe f8f0 	bl	8006aa0 <__sinit>
 80088c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088c2:	07d9      	lsls	r1, r3, #31
 80088c4:	d405      	bmi.n	80088d2 <_vfiprintf_r+0x2a>
 80088c6:	89ab      	ldrh	r3, [r5, #12]
 80088c8:	059a      	lsls	r2, r3, #22
 80088ca:	d402      	bmi.n	80088d2 <_vfiprintf_r+0x2a>
 80088cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088ce:	f7fe fa12 	bl	8006cf6 <__retarget_lock_acquire_recursive>
 80088d2:	89ab      	ldrh	r3, [r5, #12]
 80088d4:	071b      	lsls	r3, r3, #28
 80088d6:	d501      	bpl.n	80088dc <_vfiprintf_r+0x34>
 80088d8:	692b      	ldr	r3, [r5, #16]
 80088da:	b99b      	cbnz	r3, 8008904 <_vfiprintf_r+0x5c>
 80088dc:	4629      	mov	r1, r5
 80088de:	4630      	mov	r0, r6
 80088e0:	f000 f938 	bl	8008b54 <__swsetup_r>
 80088e4:	b170      	cbz	r0, 8008904 <_vfiprintf_r+0x5c>
 80088e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088e8:	07dc      	lsls	r4, r3, #31
 80088ea:	d504      	bpl.n	80088f6 <_vfiprintf_r+0x4e>
 80088ec:	f04f 30ff 	mov.w	r0, #4294967295
 80088f0:	b01d      	add	sp, #116	@ 0x74
 80088f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f6:	89ab      	ldrh	r3, [r5, #12]
 80088f8:	0598      	lsls	r0, r3, #22
 80088fa:	d4f7      	bmi.n	80088ec <_vfiprintf_r+0x44>
 80088fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088fe:	f7fe f9fb 	bl	8006cf8 <__retarget_lock_release_recursive>
 8008902:	e7f3      	b.n	80088ec <_vfiprintf_r+0x44>
 8008904:	2300      	movs	r3, #0
 8008906:	9309      	str	r3, [sp, #36]	@ 0x24
 8008908:	2320      	movs	r3, #32
 800890a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800890e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008912:	2330      	movs	r3, #48	@ 0x30
 8008914:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ac4 <_vfiprintf_r+0x21c>
 8008918:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800891c:	f04f 0901 	mov.w	r9, #1
 8008920:	4623      	mov	r3, r4
 8008922:	469a      	mov	sl, r3
 8008924:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008928:	b10a      	cbz	r2, 800892e <_vfiprintf_r+0x86>
 800892a:	2a25      	cmp	r2, #37	@ 0x25
 800892c:	d1f9      	bne.n	8008922 <_vfiprintf_r+0x7a>
 800892e:	ebba 0b04 	subs.w	fp, sl, r4
 8008932:	d00b      	beq.n	800894c <_vfiprintf_r+0xa4>
 8008934:	465b      	mov	r3, fp
 8008936:	4622      	mov	r2, r4
 8008938:	4629      	mov	r1, r5
 800893a:	4630      	mov	r0, r6
 800893c:	f7ff ffa2 	bl	8008884 <__sfputs_r>
 8008940:	3001      	adds	r0, #1
 8008942:	f000 80a7 	beq.w	8008a94 <_vfiprintf_r+0x1ec>
 8008946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008948:	445a      	add	r2, fp
 800894a:	9209      	str	r2, [sp, #36]	@ 0x24
 800894c:	f89a 3000 	ldrb.w	r3, [sl]
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 809f 	beq.w	8008a94 <_vfiprintf_r+0x1ec>
 8008956:	2300      	movs	r3, #0
 8008958:	f04f 32ff 	mov.w	r2, #4294967295
 800895c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008960:	f10a 0a01 	add.w	sl, sl, #1
 8008964:	9304      	str	r3, [sp, #16]
 8008966:	9307      	str	r3, [sp, #28]
 8008968:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800896c:	931a      	str	r3, [sp, #104]	@ 0x68
 800896e:	4654      	mov	r4, sl
 8008970:	2205      	movs	r2, #5
 8008972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008976:	4853      	ldr	r0, [pc, #332]	@ (8008ac4 <_vfiprintf_r+0x21c>)
 8008978:	f7f7 fc32 	bl	80001e0 <memchr>
 800897c:	9a04      	ldr	r2, [sp, #16]
 800897e:	b9d8      	cbnz	r0, 80089b8 <_vfiprintf_r+0x110>
 8008980:	06d1      	lsls	r1, r2, #27
 8008982:	bf44      	itt	mi
 8008984:	2320      	movmi	r3, #32
 8008986:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800898a:	0713      	lsls	r3, r2, #28
 800898c:	bf44      	itt	mi
 800898e:	232b      	movmi	r3, #43	@ 0x2b
 8008990:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008994:	f89a 3000 	ldrb.w	r3, [sl]
 8008998:	2b2a      	cmp	r3, #42	@ 0x2a
 800899a:	d015      	beq.n	80089c8 <_vfiprintf_r+0x120>
 800899c:	9a07      	ldr	r2, [sp, #28]
 800899e:	4654      	mov	r4, sl
 80089a0:	2000      	movs	r0, #0
 80089a2:	f04f 0c0a 	mov.w	ip, #10
 80089a6:	4621      	mov	r1, r4
 80089a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ac:	3b30      	subs	r3, #48	@ 0x30
 80089ae:	2b09      	cmp	r3, #9
 80089b0:	d94b      	bls.n	8008a4a <_vfiprintf_r+0x1a2>
 80089b2:	b1b0      	cbz	r0, 80089e2 <_vfiprintf_r+0x13a>
 80089b4:	9207      	str	r2, [sp, #28]
 80089b6:	e014      	b.n	80089e2 <_vfiprintf_r+0x13a>
 80089b8:	eba0 0308 	sub.w	r3, r0, r8
 80089bc:	fa09 f303 	lsl.w	r3, r9, r3
 80089c0:	4313      	orrs	r3, r2
 80089c2:	9304      	str	r3, [sp, #16]
 80089c4:	46a2      	mov	sl, r4
 80089c6:	e7d2      	b.n	800896e <_vfiprintf_r+0xc6>
 80089c8:	9b03      	ldr	r3, [sp, #12]
 80089ca:	1d19      	adds	r1, r3, #4
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	9103      	str	r1, [sp, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bfbb      	ittet	lt
 80089d4:	425b      	neglt	r3, r3
 80089d6:	f042 0202 	orrlt.w	r2, r2, #2
 80089da:	9307      	strge	r3, [sp, #28]
 80089dc:	9307      	strlt	r3, [sp, #28]
 80089de:	bfb8      	it	lt
 80089e0:	9204      	strlt	r2, [sp, #16]
 80089e2:	7823      	ldrb	r3, [r4, #0]
 80089e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80089e6:	d10a      	bne.n	80089fe <_vfiprintf_r+0x156>
 80089e8:	7863      	ldrb	r3, [r4, #1]
 80089ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80089ec:	d132      	bne.n	8008a54 <_vfiprintf_r+0x1ac>
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	1d1a      	adds	r2, r3, #4
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	9203      	str	r2, [sp, #12]
 80089f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089fa:	3402      	adds	r4, #2
 80089fc:	9305      	str	r3, [sp, #20]
 80089fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ad4 <_vfiprintf_r+0x22c>
 8008a02:	7821      	ldrb	r1, [r4, #0]
 8008a04:	2203      	movs	r2, #3
 8008a06:	4650      	mov	r0, sl
 8008a08:	f7f7 fbea 	bl	80001e0 <memchr>
 8008a0c:	b138      	cbz	r0, 8008a1e <_vfiprintf_r+0x176>
 8008a0e:	9b04      	ldr	r3, [sp, #16]
 8008a10:	eba0 000a 	sub.w	r0, r0, sl
 8008a14:	2240      	movs	r2, #64	@ 0x40
 8008a16:	4082      	lsls	r2, r0
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	3401      	adds	r4, #1
 8008a1c:	9304      	str	r3, [sp, #16]
 8008a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a22:	4829      	ldr	r0, [pc, #164]	@ (8008ac8 <_vfiprintf_r+0x220>)
 8008a24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a28:	2206      	movs	r2, #6
 8008a2a:	f7f7 fbd9 	bl	80001e0 <memchr>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d03f      	beq.n	8008ab2 <_vfiprintf_r+0x20a>
 8008a32:	4b26      	ldr	r3, [pc, #152]	@ (8008acc <_vfiprintf_r+0x224>)
 8008a34:	bb1b      	cbnz	r3, 8008a7e <_vfiprintf_r+0x1d6>
 8008a36:	9b03      	ldr	r3, [sp, #12]
 8008a38:	3307      	adds	r3, #7
 8008a3a:	f023 0307 	bic.w	r3, r3, #7
 8008a3e:	3308      	adds	r3, #8
 8008a40:	9303      	str	r3, [sp, #12]
 8008a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a44:	443b      	add	r3, r7
 8008a46:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a48:	e76a      	b.n	8008920 <_vfiprintf_r+0x78>
 8008a4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a4e:	460c      	mov	r4, r1
 8008a50:	2001      	movs	r0, #1
 8008a52:	e7a8      	b.n	80089a6 <_vfiprintf_r+0xfe>
 8008a54:	2300      	movs	r3, #0
 8008a56:	3401      	adds	r4, #1
 8008a58:	9305      	str	r3, [sp, #20]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	f04f 0c0a 	mov.w	ip, #10
 8008a60:	4620      	mov	r0, r4
 8008a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a66:	3a30      	subs	r2, #48	@ 0x30
 8008a68:	2a09      	cmp	r2, #9
 8008a6a:	d903      	bls.n	8008a74 <_vfiprintf_r+0x1cc>
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d0c6      	beq.n	80089fe <_vfiprintf_r+0x156>
 8008a70:	9105      	str	r1, [sp, #20]
 8008a72:	e7c4      	b.n	80089fe <_vfiprintf_r+0x156>
 8008a74:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a78:	4604      	mov	r4, r0
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e7f0      	b.n	8008a60 <_vfiprintf_r+0x1b8>
 8008a7e:	ab03      	add	r3, sp, #12
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	462a      	mov	r2, r5
 8008a84:	4b12      	ldr	r3, [pc, #72]	@ (8008ad0 <_vfiprintf_r+0x228>)
 8008a86:	a904      	add	r1, sp, #16
 8008a88:	4630      	mov	r0, r6
 8008a8a:	f7fd fbc5 	bl	8006218 <_printf_float>
 8008a8e:	4607      	mov	r7, r0
 8008a90:	1c78      	adds	r0, r7, #1
 8008a92:	d1d6      	bne.n	8008a42 <_vfiprintf_r+0x19a>
 8008a94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a96:	07d9      	lsls	r1, r3, #31
 8008a98:	d405      	bmi.n	8008aa6 <_vfiprintf_r+0x1fe>
 8008a9a:	89ab      	ldrh	r3, [r5, #12]
 8008a9c:	059a      	lsls	r2, r3, #22
 8008a9e:	d402      	bmi.n	8008aa6 <_vfiprintf_r+0x1fe>
 8008aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008aa2:	f7fe f929 	bl	8006cf8 <__retarget_lock_release_recursive>
 8008aa6:	89ab      	ldrh	r3, [r5, #12]
 8008aa8:	065b      	lsls	r3, r3, #25
 8008aaa:	f53f af1f 	bmi.w	80088ec <_vfiprintf_r+0x44>
 8008aae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ab0:	e71e      	b.n	80088f0 <_vfiprintf_r+0x48>
 8008ab2:	ab03      	add	r3, sp, #12
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	462a      	mov	r2, r5
 8008ab8:	4b05      	ldr	r3, [pc, #20]	@ (8008ad0 <_vfiprintf_r+0x228>)
 8008aba:	a904      	add	r1, sp, #16
 8008abc:	4630      	mov	r0, r6
 8008abe:	f7fd fe43 	bl	8006748 <_printf_i>
 8008ac2:	e7e4      	b.n	8008a8e <_vfiprintf_r+0x1e6>
 8008ac4:	08009518 	.word	0x08009518
 8008ac8:	08009522 	.word	0x08009522
 8008acc:	08006219 	.word	0x08006219
 8008ad0:	08008885 	.word	0x08008885
 8008ad4:	0800951e 	.word	0x0800951e

08008ad8 <__swbuf_r>:
 8008ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ada:	460e      	mov	r6, r1
 8008adc:	4614      	mov	r4, r2
 8008ade:	4605      	mov	r5, r0
 8008ae0:	b118      	cbz	r0, 8008aea <__swbuf_r+0x12>
 8008ae2:	6a03      	ldr	r3, [r0, #32]
 8008ae4:	b90b      	cbnz	r3, 8008aea <__swbuf_r+0x12>
 8008ae6:	f7fd ffdb 	bl	8006aa0 <__sinit>
 8008aea:	69a3      	ldr	r3, [r4, #24]
 8008aec:	60a3      	str	r3, [r4, #8]
 8008aee:	89a3      	ldrh	r3, [r4, #12]
 8008af0:	071a      	lsls	r2, r3, #28
 8008af2:	d501      	bpl.n	8008af8 <__swbuf_r+0x20>
 8008af4:	6923      	ldr	r3, [r4, #16]
 8008af6:	b943      	cbnz	r3, 8008b0a <__swbuf_r+0x32>
 8008af8:	4621      	mov	r1, r4
 8008afa:	4628      	mov	r0, r5
 8008afc:	f000 f82a 	bl	8008b54 <__swsetup_r>
 8008b00:	b118      	cbz	r0, 8008b0a <__swbuf_r+0x32>
 8008b02:	f04f 37ff 	mov.w	r7, #4294967295
 8008b06:	4638      	mov	r0, r7
 8008b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	6922      	ldr	r2, [r4, #16]
 8008b0e:	1a98      	subs	r0, r3, r2
 8008b10:	6963      	ldr	r3, [r4, #20]
 8008b12:	b2f6      	uxtb	r6, r6
 8008b14:	4283      	cmp	r3, r0
 8008b16:	4637      	mov	r7, r6
 8008b18:	dc05      	bgt.n	8008b26 <__swbuf_r+0x4e>
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	f7ff fd99 	bl	8008654 <_fflush_r>
 8008b22:	2800      	cmp	r0, #0
 8008b24:	d1ed      	bne.n	8008b02 <__swbuf_r+0x2a>
 8008b26:	68a3      	ldr	r3, [r4, #8]
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	60a3      	str	r3, [r4, #8]
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	1c5a      	adds	r2, r3, #1
 8008b30:	6022      	str	r2, [r4, #0]
 8008b32:	701e      	strb	r6, [r3, #0]
 8008b34:	6962      	ldr	r2, [r4, #20]
 8008b36:	1c43      	adds	r3, r0, #1
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d004      	beq.n	8008b46 <__swbuf_r+0x6e>
 8008b3c:	89a3      	ldrh	r3, [r4, #12]
 8008b3e:	07db      	lsls	r3, r3, #31
 8008b40:	d5e1      	bpl.n	8008b06 <__swbuf_r+0x2e>
 8008b42:	2e0a      	cmp	r6, #10
 8008b44:	d1df      	bne.n	8008b06 <__swbuf_r+0x2e>
 8008b46:	4621      	mov	r1, r4
 8008b48:	4628      	mov	r0, r5
 8008b4a:	f7ff fd83 	bl	8008654 <_fflush_r>
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	d0d9      	beq.n	8008b06 <__swbuf_r+0x2e>
 8008b52:	e7d6      	b.n	8008b02 <__swbuf_r+0x2a>

08008b54 <__swsetup_r>:
 8008b54:	b538      	push	{r3, r4, r5, lr}
 8008b56:	4b29      	ldr	r3, [pc, #164]	@ (8008bfc <__swsetup_r+0xa8>)
 8008b58:	4605      	mov	r5, r0
 8008b5a:	6818      	ldr	r0, [r3, #0]
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	b118      	cbz	r0, 8008b68 <__swsetup_r+0x14>
 8008b60:	6a03      	ldr	r3, [r0, #32]
 8008b62:	b90b      	cbnz	r3, 8008b68 <__swsetup_r+0x14>
 8008b64:	f7fd ff9c 	bl	8006aa0 <__sinit>
 8008b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b6c:	0719      	lsls	r1, r3, #28
 8008b6e:	d422      	bmi.n	8008bb6 <__swsetup_r+0x62>
 8008b70:	06da      	lsls	r2, r3, #27
 8008b72:	d407      	bmi.n	8008b84 <__swsetup_r+0x30>
 8008b74:	2209      	movs	r2, #9
 8008b76:	602a      	str	r2, [r5, #0]
 8008b78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b7c:	81a3      	strh	r3, [r4, #12]
 8008b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b82:	e033      	b.n	8008bec <__swsetup_r+0x98>
 8008b84:	0758      	lsls	r0, r3, #29
 8008b86:	d512      	bpl.n	8008bae <__swsetup_r+0x5a>
 8008b88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b8a:	b141      	cbz	r1, 8008b9e <__swsetup_r+0x4a>
 8008b8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b90:	4299      	cmp	r1, r3
 8008b92:	d002      	beq.n	8008b9a <__swsetup_r+0x46>
 8008b94:	4628      	mov	r0, r5
 8008b96:	f7fe feff 	bl	8007998 <_free_r>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b9e:	89a3      	ldrh	r3, [r4, #12]
 8008ba0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ba4:	81a3      	strh	r3, [r4, #12]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	6063      	str	r3, [r4, #4]
 8008baa:	6923      	ldr	r3, [r4, #16]
 8008bac:	6023      	str	r3, [r4, #0]
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	f043 0308 	orr.w	r3, r3, #8
 8008bb4:	81a3      	strh	r3, [r4, #12]
 8008bb6:	6923      	ldr	r3, [r4, #16]
 8008bb8:	b94b      	cbnz	r3, 8008bce <__swsetup_r+0x7a>
 8008bba:	89a3      	ldrh	r3, [r4, #12]
 8008bbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bc4:	d003      	beq.n	8008bce <__swsetup_r+0x7a>
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	4628      	mov	r0, r5
 8008bca:	f000 f883 	bl	8008cd4 <__smakebuf_r>
 8008bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bd2:	f013 0201 	ands.w	r2, r3, #1
 8008bd6:	d00a      	beq.n	8008bee <__swsetup_r+0x9a>
 8008bd8:	2200      	movs	r2, #0
 8008bda:	60a2      	str	r2, [r4, #8]
 8008bdc:	6962      	ldr	r2, [r4, #20]
 8008bde:	4252      	negs	r2, r2
 8008be0:	61a2      	str	r2, [r4, #24]
 8008be2:	6922      	ldr	r2, [r4, #16]
 8008be4:	b942      	cbnz	r2, 8008bf8 <__swsetup_r+0xa4>
 8008be6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008bea:	d1c5      	bne.n	8008b78 <__swsetup_r+0x24>
 8008bec:	bd38      	pop	{r3, r4, r5, pc}
 8008bee:	0799      	lsls	r1, r3, #30
 8008bf0:	bf58      	it	pl
 8008bf2:	6962      	ldrpl	r2, [r4, #20]
 8008bf4:	60a2      	str	r2, [r4, #8]
 8008bf6:	e7f4      	b.n	8008be2 <__swsetup_r+0x8e>
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	e7f7      	b.n	8008bec <__swsetup_r+0x98>
 8008bfc:	20000018 	.word	0x20000018

08008c00 <_raise_r>:
 8008c00:	291f      	cmp	r1, #31
 8008c02:	b538      	push	{r3, r4, r5, lr}
 8008c04:	4605      	mov	r5, r0
 8008c06:	460c      	mov	r4, r1
 8008c08:	d904      	bls.n	8008c14 <_raise_r+0x14>
 8008c0a:	2316      	movs	r3, #22
 8008c0c:	6003      	str	r3, [r0, #0]
 8008c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c12:	bd38      	pop	{r3, r4, r5, pc}
 8008c14:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c16:	b112      	cbz	r2, 8008c1e <_raise_r+0x1e>
 8008c18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c1c:	b94b      	cbnz	r3, 8008c32 <_raise_r+0x32>
 8008c1e:	4628      	mov	r0, r5
 8008c20:	f000 f830 	bl	8008c84 <_getpid_r>
 8008c24:	4622      	mov	r2, r4
 8008c26:	4601      	mov	r1, r0
 8008c28:	4628      	mov	r0, r5
 8008c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c2e:	f000 b817 	b.w	8008c60 <_kill_r>
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d00a      	beq.n	8008c4c <_raise_r+0x4c>
 8008c36:	1c59      	adds	r1, r3, #1
 8008c38:	d103      	bne.n	8008c42 <_raise_r+0x42>
 8008c3a:	2316      	movs	r3, #22
 8008c3c:	6003      	str	r3, [r0, #0]
 8008c3e:	2001      	movs	r0, #1
 8008c40:	e7e7      	b.n	8008c12 <_raise_r+0x12>
 8008c42:	2100      	movs	r1, #0
 8008c44:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008c48:	4620      	mov	r0, r4
 8008c4a:	4798      	blx	r3
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	e7e0      	b.n	8008c12 <_raise_r+0x12>

08008c50 <raise>:
 8008c50:	4b02      	ldr	r3, [pc, #8]	@ (8008c5c <raise+0xc>)
 8008c52:	4601      	mov	r1, r0
 8008c54:	6818      	ldr	r0, [r3, #0]
 8008c56:	f7ff bfd3 	b.w	8008c00 <_raise_r>
 8008c5a:	bf00      	nop
 8008c5c:	20000018 	.word	0x20000018

08008c60 <_kill_r>:
 8008c60:	b538      	push	{r3, r4, r5, lr}
 8008c62:	4d07      	ldr	r5, [pc, #28]	@ (8008c80 <_kill_r+0x20>)
 8008c64:	2300      	movs	r3, #0
 8008c66:	4604      	mov	r4, r0
 8008c68:	4608      	mov	r0, r1
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	602b      	str	r3, [r5, #0]
 8008c6e:	f7f9 f943 	bl	8001ef8 <_kill>
 8008c72:	1c43      	adds	r3, r0, #1
 8008c74:	d102      	bne.n	8008c7c <_kill_r+0x1c>
 8008c76:	682b      	ldr	r3, [r5, #0]
 8008c78:	b103      	cbz	r3, 8008c7c <_kill_r+0x1c>
 8008c7a:	6023      	str	r3, [r4, #0]
 8008c7c:	bd38      	pop	{r3, r4, r5, pc}
 8008c7e:	bf00      	nop
 8008c80:	20000484 	.word	0x20000484

08008c84 <_getpid_r>:
 8008c84:	f7f9 b930 	b.w	8001ee8 <_getpid>

08008c88 <__swhatbuf_r>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c90:	2900      	cmp	r1, #0
 8008c92:	b096      	sub	sp, #88	@ 0x58
 8008c94:	4615      	mov	r5, r2
 8008c96:	461e      	mov	r6, r3
 8008c98:	da0d      	bge.n	8008cb6 <__swhatbuf_r+0x2e>
 8008c9a:	89a3      	ldrh	r3, [r4, #12]
 8008c9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ca0:	f04f 0100 	mov.w	r1, #0
 8008ca4:	bf14      	ite	ne
 8008ca6:	2340      	movne	r3, #64	@ 0x40
 8008ca8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008cac:	2000      	movs	r0, #0
 8008cae:	6031      	str	r1, [r6, #0]
 8008cb0:	602b      	str	r3, [r5, #0]
 8008cb2:	b016      	add	sp, #88	@ 0x58
 8008cb4:	bd70      	pop	{r4, r5, r6, pc}
 8008cb6:	466a      	mov	r2, sp
 8008cb8:	f000 f848 	bl	8008d4c <_fstat_r>
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	dbec      	blt.n	8008c9a <__swhatbuf_r+0x12>
 8008cc0:	9901      	ldr	r1, [sp, #4]
 8008cc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008cc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008cca:	4259      	negs	r1, r3
 8008ccc:	4159      	adcs	r1, r3
 8008cce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cd2:	e7eb      	b.n	8008cac <__swhatbuf_r+0x24>

08008cd4 <__smakebuf_r>:
 8008cd4:	898b      	ldrh	r3, [r1, #12]
 8008cd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cd8:	079d      	lsls	r5, r3, #30
 8008cda:	4606      	mov	r6, r0
 8008cdc:	460c      	mov	r4, r1
 8008cde:	d507      	bpl.n	8008cf0 <__smakebuf_r+0x1c>
 8008ce0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ce4:	6023      	str	r3, [r4, #0]
 8008ce6:	6123      	str	r3, [r4, #16]
 8008ce8:	2301      	movs	r3, #1
 8008cea:	6163      	str	r3, [r4, #20]
 8008cec:	b003      	add	sp, #12
 8008cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cf0:	ab01      	add	r3, sp, #4
 8008cf2:	466a      	mov	r2, sp
 8008cf4:	f7ff ffc8 	bl	8008c88 <__swhatbuf_r>
 8008cf8:	9f00      	ldr	r7, [sp, #0]
 8008cfa:	4605      	mov	r5, r0
 8008cfc:	4639      	mov	r1, r7
 8008cfe:	4630      	mov	r0, r6
 8008d00:	f7fe febe 	bl	8007a80 <_malloc_r>
 8008d04:	b948      	cbnz	r0, 8008d1a <__smakebuf_r+0x46>
 8008d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d0a:	059a      	lsls	r2, r3, #22
 8008d0c:	d4ee      	bmi.n	8008cec <__smakebuf_r+0x18>
 8008d0e:	f023 0303 	bic.w	r3, r3, #3
 8008d12:	f043 0302 	orr.w	r3, r3, #2
 8008d16:	81a3      	strh	r3, [r4, #12]
 8008d18:	e7e2      	b.n	8008ce0 <__smakebuf_r+0xc>
 8008d1a:	89a3      	ldrh	r3, [r4, #12]
 8008d1c:	6020      	str	r0, [r4, #0]
 8008d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d22:	81a3      	strh	r3, [r4, #12]
 8008d24:	9b01      	ldr	r3, [sp, #4]
 8008d26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d2a:	b15b      	cbz	r3, 8008d44 <__smakebuf_r+0x70>
 8008d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d30:	4630      	mov	r0, r6
 8008d32:	f000 f81d 	bl	8008d70 <_isatty_r>
 8008d36:	b128      	cbz	r0, 8008d44 <__smakebuf_r+0x70>
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	f023 0303 	bic.w	r3, r3, #3
 8008d3e:	f043 0301 	orr.w	r3, r3, #1
 8008d42:	81a3      	strh	r3, [r4, #12]
 8008d44:	89a3      	ldrh	r3, [r4, #12]
 8008d46:	431d      	orrs	r5, r3
 8008d48:	81a5      	strh	r5, [r4, #12]
 8008d4a:	e7cf      	b.n	8008cec <__smakebuf_r+0x18>

08008d4c <_fstat_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	4d07      	ldr	r5, [pc, #28]	@ (8008d6c <_fstat_r+0x20>)
 8008d50:	2300      	movs	r3, #0
 8008d52:	4604      	mov	r4, r0
 8008d54:	4608      	mov	r0, r1
 8008d56:	4611      	mov	r1, r2
 8008d58:	602b      	str	r3, [r5, #0]
 8008d5a:	f7f9 f92d 	bl	8001fb8 <_fstat>
 8008d5e:	1c43      	adds	r3, r0, #1
 8008d60:	d102      	bne.n	8008d68 <_fstat_r+0x1c>
 8008d62:	682b      	ldr	r3, [r5, #0]
 8008d64:	b103      	cbz	r3, 8008d68 <_fstat_r+0x1c>
 8008d66:	6023      	str	r3, [r4, #0]
 8008d68:	bd38      	pop	{r3, r4, r5, pc}
 8008d6a:	bf00      	nop
 8008d6c:	20000484 	.word	0x20000484

08008d70 <_isatty_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4d06      	ldr	r5, [pc, #24]	@ (8008d8c <_isatty_r+0x1c>)
 8008d74:	2300      	movs	r3, #0
 8008d76:	4604      	mov	r4, r0
 8008d78:	4608      	mov	r0, r1
 8008d7a:	602b      	str	r3, [r5, #0]
 8008d7c:	f7f9 f92c 	bl	8001fd8 <_isatty>
 8008d80:	1c43      	adds	r3, r0, #1
 8008d82:	d102      	bne.n	8008d8a <_isatty_r+0x1a>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	b103      	cbz	r3, 8008d8a <_isatty_r+0x1a>
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	bd38      	pop	{r3, r4, r5, pc}
 8008d8c:	20000484 	.word	0x20000484

08008d90 <atan2>:
 8008d90:	f000 b802 	b.w	8008d98 <__ieee754_atan2>
 8008d94:	0000      	movs	r0, r0
	...

08008d98 <__ieee754_atan2>:
 8008d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d9c:	ec57 6b11 	vmov	r6, r7, d1
 8008da0:	4273      	negs	r3, r6
 8008da2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8008f20 <__ieee754_atan2+0x188>
 8008da6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8008daa:	4333      	orrs	r3, r6
 8008dac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008db0:	4543      	cmp	r3, r8
 8008db2:	ec51 0b10 	vmov	r0, r1, d0
 8008db6:	4635      	mov	r5, r6
 8008db8:	d809      	bhi.n	8008dce <__ieee754_atan2+0x36>
 8008dba:	4244      	negs	r4, r0
 8008dbc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008dc0:	4304      	orrs	r4, r0
 8008dc2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008dc6:	4544      	cmp	r4, r8
 8008dc8:	468e      	mov	lr, r1
 8008dca:	4681      	mov	r9, r0
 8008dcc:	d907      	bls.n	8008dde <__ieee754_atan2+0x46>
 8008dce:	4632      	mov	r2, r6
 8008dd0:	463b      	mov	r3, r7
 8008dd2:	f7f7 fa63 	bl	800029c <__adddf3>
 8008dd6:	ec41 0b10 	vmov	d0, r0, r1
 8008dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dde:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8008de2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8008de6:	4334      	orrs	r4, r6
 8008de8:	d103      	bne.n	8008df2 <__ieee754_atan2+0x5a>
 8008dea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dee:	f000 b89b 	b.w	8008f28 <atan>
 8008df2:	17bc      	asrs	r4, r7, #30
 8008df4:	f004 0402 	and.w	r4, r4, #2
 8008df8:	ea53 0909 	orrs.w	r9, r3, r9
 8008dfc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008e00:	d107      	bne.n	8008e12 <__ieee754_atan2+0x7a>
 8008e02:	2c02      	cmp	r4, #2
 8008e04:	d05f      	beq.n	8008ec6 <__ieee754_atan2+0x12e>
 8008e06:	2c03      	cmp	r4, #3
 8008e08:	d1e5      	bne.n	8008dd6 <__ieee754_atan2+0x3e>
 8008e0a:	a141      	add	r1, pc, #260	@ (adr r1, 8008f10 <__ieee754_atan2+0x178>)
 8008e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e10:	e7e1      	b.n	8008dd6 <__ieee754_atan2+0x3e>
 8008e12:	4315      	orrs	r5, r2
 8008e14:	d106      	bne.n	8008e24 <__ieee754_atan2+0x8c>
 8008e16:	f1be 0f00 	cmp.w	lr, #0
 8008e1a:	da5f      	bge.n	8008edc <__ieee754_atan2+0x144>
 8008e1c:	a13e      	add	r1, pc, #248	@ (adr r1, 8008f18 <__ieee754_atan2+0x180>)
 8008e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e22:	e7d8      	b.n	8008dd6 <__ieee754_atan2+0x3e>
 8008e24:	4542      	cmp	r2, r8
 8008e26:	d10f      	bne.n	8008e48 <__ieee754_atan2+0xb0>
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	f104 34ff 	add.w	r4, r4, #4294967295
 8008e2e:	d107      	bne.n	8008e40 <__ieee754_atan2+0xa8>
 8008e30:	2c02      	cmp	r4, #2
 8008e32:	d84c      	bhi.n	8008ece <__ieee754_atan2+0x136>
 8008e34:	4b34      	ldr	r3, [pc, #208]	@ (8008f08 <__ieee754_atan2+0x170>)
 8008e36:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e3e:	e7ca      	b.n	8008dd6 <__ieee754_atan2+0x3e>
 8008e40:	2c02      	cmp	r4, #2
 8008e42:	d848      	bhi.n	8008ed6 <__ieee754_atan2+0x13e>
 8008e44:	4b31      	ldr	r3, [pc, #196]	@ (8008f0c <__ieee754_atan2+0x174>)
 8008e46:	e7f6      	b.n	8008e36 <__ieee754_atan2+0x9e>
 8008e48:	4543      	cmp	r3, r8
 8008e4a:	d0e4      	beq.n	8008e16 <__ieee754_atan2+0x7e>
 8008e4c:	1a9b      	subs	r3, r3, r2
 8008e4e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8008e52:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008e56:	da1e      	bge.n	8008e96 <__ieee754_atan2+0xfe>
 8008e58:	2f00      	cmp	r7, #0
 8008e5a:	da01      	bge.n	8008e60 <__ieee754_atan2+0xc8>
 8008e5c:	323c      	adds	r2, #60	@ 0x3c
 8008e5e:	db1e      	blt.n	8008e9e <__ieee754_atan2+0x106>
 8008e60:	4632      	mov	r2, r6
 8008e62:	463b      	mov	r3, r7
 8008e64:	f7f7 fcfa 	bl	800085c <__aeabi_ddiv>
 8008e68:	ec41 0b10 	vmov	d0, r0, r1
 8008e6c:	f000 f9f4 	bl	8009258 <fabs>
 8008e70:	f000 f85a 	bl	8008f28 <atan>
 8008e74:	ec51 0b10 	vmov	r0, r1, d0
 8008e78:	2c01      	cmp	r4, #1
 8008e7a:	d013      	beq.n	8008ea4 <__ieee754_atan2+0x10c>
 8008e7c:	2c02      	cmp	r4, #2
 8008e7e:	d015      	beq.n	8008eac <__ieee754_atan2+0x114>
 8008e80:	2c00      	cmp	r4, #0
 8008e82:	d0a8      	beq.n	8008dd6 <__ieee754_atan2+0x3e>
 8008e84:	a318      	add	r3, pc, #96	@ (adr r3, 8008ee8 <__ieee754_atan2+0x150>)
 8008e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8a:	f7f7 fa05 	bl	8000298 <__aeabi_dsub>
 8008e8e:	a318      	add	r3, pc, #96	@ (adr r3, 8008ef0 <__ieee754_atan2+0x158>)
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	e014      	b.n	8008ec0 <__ieee754_atan2+0x128>
 8008e96:	a118      	add	r1, pc, #96	@ (adr r1, 8008ef8 <__ieee754_atan2+0x160>)
 8008e98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e9c:	e7ec      	b.n	8008e78 <__ieee754_atan2+0xe0>
 8008e9e:	2000      	movs	r0, #0
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	e7e9      	b.n	8008e78 <__ieee754_atan2+0xe0>
 8008ea4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	e794      	b.n	8008dd6 <__ieee754_atan2+0x3e>
 8008eac:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ee8 <__ieee754_atan2+0x150>)
 8008eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb2:	f7f7 f9f1 	bl	8000298 <__aeabi_dsub>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	460b      	mov	r3, r1
 8008eba:	a10d      	add	r1, pc, #52	@ (adr r1, 8008ef0 <__ieee754_atan2+0x158>)
 8008ebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ec0:	f7f7 f9ea 	bl	8000298 <__aeabi_dsub>
 8008ec4:	e787      	b.n	8008dd6 <__ieee754_atan2+0x3e>
 8008ec6:	a10a      	add	r1, pc, #40	@ (adr r1, 8008ef0 <__ieee754_atan2+0x158>)
 8008ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ecc:	e783      	b.n	8008dd6 <__ieee754_atan2+0x3e>
 8008ece:	a10c      	add	r1, pc, #48	@ (adr r1, 8008f00 <__ieee754_atan2+0x168>)
 8008ed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ed4:	e77f      	b.n	8008dd6 <__ieee754_atan2+0x3e>
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	2100      	movs	r1, #0
 8008eda:	e77c      	b.n	8008dd6 <__ieee754_atan2+0x3e>
 8008edc:	a106      	add	r1, pc, #24	@ (adr r1, 8008ef8 <__ieee754_atan2+0x160>)
 8008ede:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ee2:	e778      	b.n	8008dd6 <__ieee754_atan2+0x3e>
 8008ee4:	f3af 8000 	nop.w
 8008ee8:	33145c07 	.word	0x33145c07
 8008eec:	3ca1a626 	.word	0x3ca1a626
 8008ef0:	54442d18 	.word	0x54442d18
 8008ef4:	400921fb 	.word	0x400921fb
 8008ef8:	54442d18 	.word	0x54442d18
 8008efc:	3ff921fb 	.word	0x3ff921fb
 8008f00:	54442d18 	.word	0x54442d18
 8008f04:	3fe921fb 	.word	0x3fe921fb
 8008f08:	08009688 	.word	0x08009688
 8008f0c:	08009670 	.word	0x08009670
 8008f10:	54442d18 	.word	0x54442d18
 8008f14:	c00921fb 	.word	0xc00921fb
 8008f18:	54442d18 	.word	0x54442d18
 8008f1c:	bff921fb 	.word	0xbff921fb
 8008f20:	7ff00000 	.word	0x7ff00000
 8008f24:	00000000 	.word	0x00000000

08008f28 <atan>:
 8008f28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2c:	ec55 4b10 	vmov	r4, r5, d0
 8008f30:	4bbf      	ldr	r3, [pc, #764]	@ (8009230 <atan+0x308>)
 8008f32:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8008f36:	429e      	cmp	r6, r3
 8008f38:	46ab      	mov	fp, r5
 8008f3a:	d918      	bls.n	8008f6e <atan+0x46>
 8008f3c:	4bbd      	ldr	r3, [pc, #756]	@ (8009234 <atan+0x30c>)
 8008f3e:	429e      	cmp	r6, r3
 8008f40:	d801      	bhi.n	8008f46 <atan+0x1e>
 8008f42:	d109      	bne.n	8008f58 <atan+0x30>
 8008f44:	b144      	cbz	r4, 8008f58 <atan+0x30>
 8008f46:	4622      	mov	r2, r4
 8008f48:	462b      	mov	r3, r5
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	f7f7 f9a5 	bl	800029c <__adddf3>
 8008f52:	4604      	mov	r4, r0
 8008f54:	460d      	mov	r5, r1
 8008f56:	e006      	b.n	8008f66 <atan+0x3e>
 8008f58:	f1bb 0f00 	cmp.w	fp, #0
 8008f5c:	f340 812b 	ble.w	80091b6 <atan+0x28e>
 8008f60:	a597      	add	r5, pc, #604	@ (adr r5, 80091c0 <atan+0x298>)
 8008f62:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008f66:	ec45 4b10 	vmov	d0, r4, r5
 8008f6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f6e:	4bb2      	ldr	r3, [pc, #712]	@ (8009238 <atan+0x310>)
 8008f70:	429e      	cmp	r6, r3
 8008f72:	d813      	bhi.n	8008f9c <atan+0x74>
 8008f74:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8008f78:	429e      	cmp	r6, r3
 8008f7a:	d80c      	bhi.n	8008f96 <atan+0x6e>
 8008f7c:	a392      	add	r3, pc, #584	@ (adr r3, 80091c8 <atan+0x2a0>)
 8008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f82:	4620      	mov	r0, r4
 8008f84:	4629      	mov	r1, r5
 8008f86:	f7f7 f989 	bl	800029c <__adddf3>
 8008f8a:	4bac      	ldr	r3, [pc, #688]	@ (800923c <atan+0x314>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f7f7 fdcb 	bl	8000b28 <__aeabi_dcmpgt>
 8008f92:	2800      	cmp	r0, #0
 8008f94:	d1e7      	bne.n	8008f66 <atan+0x3e>
 8008f96:	f04f 3aff 	mov.w	sl, #4294967295
 8008f9a:	e029      	b.n	8008ff0 <atan+0xc8>
 8008f9c:	f000 f95c 	bl	8009258 <fabs>
 8008fa0:	4ba7      	ldr	r3, [pc, #668]	@ (8009240 <atan+0x318>)
 8008fa2:	429e      	cmp	r6, r3
 8008fa4:	ec55 4b10 	vmov	r4, r5, d0
 8008fa8:	f200 80bc 	bhi.w	8009124 <atan+0x1fc>
 8008fac:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8008fb0:	429e      	cmp	r6, r3
 8008fb2:	f200 809e 	bhi.w	80090f2 <atan+0x1ca>
 8008fb6:	4622      	mov	r2, r4
 8008fb8:	462b      	mov	r3, r5
 8008fba:	4620      	mov	r0, r4
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	f7f7 f96d 	bl	800029c <__adddf3>
 8008fc2:	4b9e      	ldr	r3, [pc, #632]	@ (800923c <atan+0x314>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f7f7 f967 	bl	8000298 <__aeabi_dsub>
 8008fca:	2200      	movs	r2, #0
 8008fcc:	4606      	mov	r6, r0
 8008fce:	460f      	mov	r7, r1
 8008fd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	f7f7 f960 	bl	800029c <__adddf3>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	4639      	mov	r1, r7
 8008fe4:	f7f7 fc3a 	bl	800085c <__aeabi_ddiv>
 8008fe8:	f04f 0a00 	mov.w	sl, #0
 8008fec:	4604      	mov	r4, r0
 8008fee:	460d      	mov	r5, r1
 8008ff0:	4622      	mov	r2, r4
 8008ff2:	462b      	mov	r3, r5
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	f7f7 fb06 	bl	8000608 <__aeabi_dmul>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	460b      	mov	r3, r1
 8009000:	4680      	mov	r8, r0
 8009002:	4689      	mov	r9, r1
 8009004:	f7f7 fb00 	bl	8000608 <__aeabi_dmul>
 8009008:	a371      	add	r3, pc, #452	@ (adr r3, 80091d0 <atan+0x2a8>)
 800900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900e:	4606      	mov	r6, r0
 8009010:	460f      	mov	r7, r1
 8009012:	f7f7 faf9 	bl	8000608 <__aeabi_dmul>
 8009016:	a370      	add	r3, pc, #448	@ (adr r3, 80091d8 <atan+0x2b0>)
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	f7f7 f93e 	bl	800029c <__adddf3>
 8009020:	4632      	mov	r2, r6
 8009022:	463b      	mov	r3, r7
 8009024:	f7f7 faf0 	bl	8000608 <__aeabi_dmul>
 8009028:	a36d      	add	r3, pc, #436	@ (adr r3, 80091e0 <atan+0x2b8>)
 800902a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902e:	f7f7 f935 	bl	800029c <__adddf3>
 8009032:	4632      	mov	r2, r6
 8009034:	463b      	mov	r3, r7
 8009036:	f7f7 fae7 	bl	8000608 <__aeabi_dmul>
 800903a:	a36b      	add	r3, pc, #428	@ (adr r3, 80091e8 <atan+0x2c0>)
 800903c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009040:	f7f7 f92c 	bl	800029c <__adddf3>
 8009044:	4632      	mov	r2, r6
 8009046:	463b      	mov	r3, r7
 8009048:	f7f7 fade 	bl	8000608 <__aeabi_dmul>
 800904c:	a368      	add	r3, pc, #416	@ (adr r3, 80091f0 <atan+0x2c8>)
 800904e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009052:	f7f7 f923 	bl	800029c <__adddf3>
 8009056:	4632      	mov	r2, r6
 8009058:	463b      	mov	r3, r7
 800905a:	f7f7 fad5 	bl	8000608 <__aeabi_dmul>
 800905e:	a366      	add	r3, pc, #408	@ (adr r3, 80091f8 <atan+0x2d0>)
 8009060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009064:	f7f7 f91a 	bl	800029c <__adddf3>
 8009068:	4642      	mov	r2, r8
 800906a:	464b      	mov	r3, r9
 800906c:	f7f7 facc 	bl	8000608 <__aeabi_dmul>
 8009070:	a363      	add	r3, pc, #396	@ (adr r3, 8009200 <atan+0x2d8>)
 8009072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009076:	4680      	mov	r8, r0
 8009078:	4689      	mov	r9, r1
 800907a:	4630      	mov	r0, r6
 800907c:	4639      	mov	r1, r7
 800907e:	f7f7 fac3 	bl	8000608 <__aeabi_dmul>
 8009082:	a361      	add	r3, pc, #388	@ (adr r3, 8009208 <atan+0x2e0>)
 8009084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009088:	f7f7 f906 	bl	8000298 <__aeabi_dsub>
 800908c:	4632      	mov	r2, r6
 800908e:	463b      	mov	r3, r7
 8009090:	f7f7 faba 	bl	8000608 <__aeabi_dmul>
 8009094:	a35e      	add	r3, pc, #376	@ (adr r3, 8009210 <atan+0x2e8>)
 8009096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909a:	f7f7 f8fd 	bl	8000298 <__aeabi_dsub>
 800909e:	4632      	mov	r2, r6
 80090a0:	463b      	mov	r3, r7
 80090a2:	f7f7 fab1 	bl	8000608 <__aeabi_dmul>
 80090a6:	a35c      	add	r3, pc, #368	@ (adr r3, 8009218 <atan+0x2f0>)
 80090a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ac:	f7f7 f8f4 	bl	8000298 <__aeabi_dsub>
 80090b0:	4632      	mov	r2, r6
 80090b2:	463b      	mov	r3, r7
 80090b4:	f7f7 faa8 	bl	8000608 <__aeabi_dmul>
 80090b8:	a359      	add	r3, pc, #356	@ (adr r3, 8009220 <atan+0x2f8>)
 80090ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090be:	f7f7 f8eb 	bl	8000298 <__aeabi_dsub>
 80090c2:	4632      	mov	r2, r6
 80090c4:	463b      	mov	r3, r7
 80090c6:	f7f7 fa9f 	bl	8000608 <__aeabi_dmul>
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	4640      	mov	r0, r8
 80090d0:	4649      	mov	r1, r9
 80090d2:	f7f7 f8e3 	bl	800029c <__adddf3>
 80090d6:	4622      	mov	r2, r4
 80090d8:	462b      	mov	r3, r5
 80090da:	f7f7 fa95 	bl	8000608 <__aeabi_dmul>
 80090de:	f1ba 3fff 	cmp.w	sl, #4294967295
 80090e2:	4602      	mov	r2, r0
 80090e4:	460b      	mov	r3, r1
 80090e6:	d148      	bne.n	800917a <atan+0x252>
 80090e8:	4620      	mov	r0, r4
 80090ea:	4629      	mov	r1, r5
 80090ec:	f7f7 f8d4 	bl	8000298 <__aeabi_dsub>
 80090f0:	e72f      	b.n	8008f52 <atan+0x2a>
 80090f2:	4b52      	ldr	r3, [pc, #328]	@ (800923c <atan+0x314>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	4620      	mov	r0, r4
 80090f8:	4629      	mov	r1, r5
 80090fa:	f7f7 f8cd 	bl	8000298 <__aeabi_dsub>
 80090fe:	4b4f      	ldr	r3, [pc, #316]	@ (800923c <atan+0x314>)
 8009100:	4606      	mov	r6, r0
 8009102:	460f      	mov	r7, r1
 8009104:	2200      	movs	r2, #0
 8009106:	4620      	mov	r0, r4
 8009108:	4629      	mov	r1, r5
 800910a:	f7f7 f8c7 	bl	800029c <__adddf3>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	4630      	mov	r0, r6
 8009114:	4639      	mov	r1, r7
 8009116:	f7f7 fba1 	bl	800085c <__aeabi_ddiv>
 800911a:	f04f 0a01 	mov.w	sl, #1
 800911e:	4604      	mov	r4, r0
 8009120:	460d      	mov	r5, r1
 8009122:	e765      	b.n	8008ff0 <atan+0xc8>
 8009124:	4b47      	ldr	r3, [pc, #284]	@ (8009244 <atan+0x31c>)
 8009126:	429e      	cmp	r6, r3
 8009128:	d21c      	bcs.n	8009164 <atan+0x23c>
 800912a:	4b47      	ldr	r3, [pc, #284]	@ (8009248 <atan+0x320>)
 800912c:	2200      	movs	r2, #0
 800912e:	4620      	mov	r0, r4
 8009130:	4629      	mov	r1, r5
 8009132:	f7f7 f8b1 	bl	8000298 <__aeabi_dsub>
 8009136:	4b44      	ldr	r3, [pc, #272]	@ (8009248 <atan+0x320>)
 8009138:	4606      	mov	r6, r0
 800913a:	460f      	mov	r7, r1
 800913c:	2200      	movs	r2, #0
 800913e:	4620      	mov	r0, r4
 8009140:	4629      	mov	r1, r5
 8009142:	f7f7 fa61 	bl	8000608 <__aeabi_dmul>
 8009146:	4b3d      	ldr	r3, [pc, #244]	@ (800923c <atan+0x314>)
 8009148:	2200      	movs	r2, #0
 800914a:	f7f7 f8a7 	bl	800029c <__adddf3>
 800914e:	4602      	mov	r2, r0
 8009150:	460b      	mov	r3, r1
 8009152:	4630      	mov	r0, r6
 8009154:	4639      	mov	r1, r7
 8009156:	f7f7 fb81 	bl	800085c <__aeabi_ddiv>
 800915a:	f04f 0a02 	mov.w	sl, #2
 800915e:	4604      	mov	r4, r0
 8009160:	460d      	mov	r5, r1
 8009162:	e745      	b.n	8008ff0 <atan+0xc8>
 8009164:	4622      	mov	r2, r4
 8009166:	462b      	mov	r3, r5
 8009168:	4938      	ldr	r1, [pc, #224]	@ (800924c <atan+0x324>)
 800916a:	2000      	movs	r0, #0
 800916c:	f7f7 fb76 	bl	800085c <__aeabi_ddiv>
 8009170:	f04f 0a03 	mov.w	sl, #3
 8009174:	4604      	mov	r4, r0
 8009176:	460d      	mov	r5, r1
 8009178:	e73a      	b.n	8008ff0 <atan+0xc8>
 800917a:	4b35      	ldr	r3, [pc, #212]	@ (8009250 <atan+0x328>)
 800917c:	4e35      	ldr	r6, [pc, #212]	@ (8009254 <atan+0x32c>)
 800917e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009186:	f7f7 f887 	bl	8000298 <__aeabi_dsub>
 800918a:	4622      	mov	r2, r4
 800918c:	462b      	mov	r3, r5
 800918e:	f7f7 f883 	bl	8000298 <__aeabi_dsub>
 8009192:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800919e:	f7f7 f87b 	bl	8000298 <__aeabi_dsub>
 80091a2:	f1bb 0f00 	cmp.w	fp, #0
 80091a6:	4604      	mov	r4, r0
 80091a8:	460d      	mov	r5, r1
 80091aa:	f6bf aedc 	bge.w	8008f66 <atan+0x3e>
 80091ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80091b2:	461d      	mov	r5, r3
 80091b4:	e6d7      	b.n	8008f66 <atan+0x3e>
 80091b6:	a51c      	add	r5, pc, #112	@ (adr r5, 8009228 <atan+0x300>)
 80091b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80091bc:	e6d3      	b.n	8008f66 <atan+0x3e>
 80091be:	bf00      	nop
 80091c0:	54442d18 	.word	0x54442d18
 80091c4:	3ff921fb 	.word	0x3ff921fb
 80091c8:	8800759c 	.word	0x8800759c
 80091cc:	7e37e43c 	.word	0x7e37e43c
 80091d0:	e322da11 	.word	0xe322da11
 80091d4:	3f90ad3a 	.word	0x3f90ad3a
 80091d8:	24760deb 	.word	0x24760deb
 80091dc:	3fa97b4b 	.word	0x3fa97b4b
 80091e0:	a0d03d51 	.word	0xa0d03d51
 80091e4:	3fb10d66 	.word	0x3fb10d66
 80091e8:	c54c206e 	.word	0xc54c206e
 80091ec:	3fb745cd 	.word	0x3fb745cd
 80091f0:	920083ff 	.word	0x920083ff
 80091f4:	3fc24924 	.word	0x3fc24924
 80091f8:	5555550d 	.word	0x5555550d
 80091fc:	3fd55555 	.word	0x3fd55555
 8009200:	2c6a6c2f 	.word	0x2c6a6c2f
 8009204:	bfa2b444 	.word	0xbfa2b444
 8009208:	52defd9a 	.word	0x52defd9a
 800920c:	3fadde2d 	.word	0x3fadde2d
 8009210:	af749a6d 	.word	0xaf749a6d
 8009214:	3fb3b0f2 	.word	0x3fb3b0f2
 8009218:	fe231671 	.word	0xfe231671
 800921c:	3fbc71c6 	.word	0x3fbc71c6
 8009220:	9998ebc4 	.word	0x9998ebc4
 8009224:	3fc99999 	.word	0x3fc99999
 8009228:	54442d18 	.word	0x54442d18
 800922c:	bff921fb 	.word	0xbff921fb
 8009230:	440fffff 	.word	0x440fffff
 8009234:	7ff00000 	.word	0x7ff00000
 8009238:	3fdbffff 	.word	0x3fdbffff
 800923c:	3ff00000 	.word	0x3ff00000
 8009240:	3ff2ffff 	.word	0x3ff2ffff
 8009244:	40038000 	.word	0x40038000
 8009248:	3ff80000 	.word	0x3ff80000
 800924c:	bff00000 	.word	0xbff00000
 8009250:	080096a0 	.word	0x080096a0
 8009254:	080096c0 	.word	0x080096c0

08009258 <fabs>:
 8009258:	ec51 0b10 	vmov	r0, r1, d0
 800925c:	4602      	mov	r2, r0
 800925e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009262:	ec43 2b10 	vmov	d0, r2, r3
 8009266:	4770      	bx	lr

08009268 <_init>:
 8009268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926a:	bf00      	nop
 800926c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800926e:	bc08      	pop	{r3}
 8009270:	469e      	mov	lr, r3
 8009272:	4770      	bx	lr

08009274 <_fini>:
 8009274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009276:	bf00      	nop
 8009278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800927a:	bc08      	pop	{r3}
 800927c:	469e      	mov	lr, r3
 800927e:	4770      	bx	lr
