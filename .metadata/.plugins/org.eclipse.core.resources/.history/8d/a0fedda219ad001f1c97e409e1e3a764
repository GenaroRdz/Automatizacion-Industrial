/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h>
#include <string.h>
#include <stdio.h>
#include <math.h>
#include <usbd_cdc_if.h>

// Definición de direcciones I2C
#define MPU6050_ADDR 0x68 << 1
#define QMC5883L_ADDR 0x0D << 1

// Registros relevantes
#define MPU6050_PWR_MGMT_1 0x6B
#define MPU6050_GYRO_XOUT_H 0x43

#define QMC5883L_CTRL1 0x09
#define QMC5883L_XOUT_L 0x00
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
// Variables globales
float yaw_angle = 0.0f;  // Ángulo de yaw fusionado
float gyro_yaw_rate = 0.0f;
float mag_yaw_angle = 0.0f;
float dt = 0.01;  // Intervalo de tiempo (ajustar según tu temporización)
int16_t mag_x_min = 32767, mag_x_max = -32768;
int16_t mag_y_min = 32767, mag_y_max = -32768;
float gyro_z_offset = 0.0;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Calibrate_Magnetometer(void) {
    uint8_t data[6];
    int16_t raw_x, raw_y;

    for (int i = 0; i < 1000; i++) {
        HAL_I2C_Mem_Read(&hi2c1, QMC5883L_ADDR, QMC5883L_XOUT_L, 1, data, 6, HAL_MAX_DELAY);
        raw_x = (data[1] << 8) | data[0];
        raw_y = (data[3] << 8) | data[2];

        if (raw_x < mag_x_min) mag_x_min = raw_x;
        if (raw_x > mag_x_max) mag_x_max = raw_x;

        if (raw_y < mag_y_min) mag_y_min = raw_y;
        if (raw_y > mag_y_max) mag_y_max = raw_y;

        HAL_Delay(10);  // Breve pausa entre lecturas
    }
}
float Read_Mag_Yaw_Calibrated(void) {
    uint8_t data[6];
    int16_t raw_x, raw_y;

    HAL_I2C_Mem_Read(&hi2c1, QMC5883L_ADDR, QMC5883L_XOUT_L, 1, data, 6, HAL_MAX_DELAY);
    raw_x = (data[1] << 8) | data[0];
    raw_y = (data[3] << 8) | data[2];

    // Calibrar usando los valores de offset y escala
    float calibrated_x = (float)(raw_x - (mag_x_min + mag_x_max) / 2);
    float calibrated_y = (float)(raw_y - (mag_y_min + mag_y_max) / 2);

    // Ángulo en grados
    return atan2(calibrated_y, calibrated_x) * 180.0f / M_PI;
}
// Inicialización del MPU6050
void MPU6050_Init(void) {
    uint8_t data = 0x00;  // Configurar el PWR_MGMT_1
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY);
}

// Inicialización del QMC5883L
void QMC5883L_Init(void) {
    uint8_t config[2] = {0x01, 0x40};  // Modo continuo, 200 Hz
    HAL_I2C_Mem_Write(&hi2c1, QMC5883L_ADDR, QMC5883L_CTRL1, 1, config, 2, HAL_MAX_DELAY);
}

// Leer la tasa de giro en Z del giroscopio
float Read_Gyro_Z(void) {
    uint8_t data[2];
    int16_t raw_gyro_z;

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_XOUT_H, 1, data, 2, HAL_MAX_DELAY);
    raw_gyro_z = (data[0] << 8) | data[1];

    return raw_gyro_z / 131.0f;  // Sensibilidad del giroscopio (ajustar según configuración)
}

// Leer el ángulo de yaw del magnetómetro
float Read_Mag_Yaw(void) {
    uint8_t data[6];
    int16_t raw_x, raw_y;

    HAL_I2C_Mem_Read(&hi2c1, QMC5883L_ADDR, QMC5883L_XOUT_L, 1, data, 6, HAL_MAX_DELAY);
    raw_x = (data[1] << 8) | data[0];
    raw_y = (data[3] << 8) | data[2];

    return atan2((float)raw_y, (float)raw_x) * 180.0f / M_PI;  // Convertir a grados
}
void Calibrate_Gyro(void) {
    int32_t sum = 0;
    uint8_t data[2];
    int16_t raw_gyro_z;
    int samples = 1000;  // Número de muestras para la calibración

    for (int i = 0; i < samples; i++) {
        HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_XOUT_H, 1, data, 2, HAL_MAX_DELAY);
        raw_gyro_z = (data[0] << 8) | data[1];
        sum += raw_gyro_z;
        HAL_Delay(1);  // Breve pausa entre lecturas
    }

    gyro_z_offset = (float)sum / samples;  // Promedio del sesgo
}

float Read_Gyro_Z_Calibrated(void) {
    uint8_t data[2];
    int16_t raw_gyro_z;

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_XOUT_H, 1, data, 2, HAL_MAX_DELAY);
    raw_gyro_z = (data[0] << 8) | data[1];

    return (raw_gyro_z - gyro_z_offset) / 131.0f;  // Sensibilidad ajustada
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval intv
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
  QMC5883L_Init();

  // Calibración
  Calibrate_Gyro();
  Calibrate_Magnetometer();

  char buffer[50];
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      // Leer datos calibrados
      gyro_yaw_rate = Read_Gyro_Z_Calibrated();
      mag_yaw_angle = Read_Mag_Yaw_Calibrated();

      // Fusión de los datos
      yaw_angle = 0.98 * (yaw_angle + gyro_yaw_rate * dt) + 0.02 * mag_yaw_angle;

      // Enviar resultados por USB
      int len = sprintf(buffer, "Yaw: %.2f\r\n", yaw_angle);
      CDC_Transmit_FS((uint8_t *)buffer, len);

      HAL_Delay(10);
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 144;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
