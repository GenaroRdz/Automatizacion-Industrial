
Bluethoot_Funciona.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e788  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800e928  0800e928  0000f928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edc8  0800edc8  000102d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800edc8  0800edc8  0000fdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edd0  0800edd0  000102d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edd0  0800edd0  0000fdd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800edd4  0800edd4  0000fdd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  0800edd8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e94  200002d4  0800f0ac  000102d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002168  0800f0ac  00011168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001affd  00000000  00000000  00010304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e4e  00000000  00000000  0002b301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  0002f150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012d6  00000000  00000000  00030988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c07a  00000000  00000000  00031c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f214  00000000  00000000  0004dcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2ed3  00000000  00000000  0006ceec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010fdbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007984  00000000  00000000  0010fe04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00117788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d4 	.word	0x200002d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e910 	.word	0x0800e910

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d8 	.word	0x200002d8
 80001dc:	0800e910 	.word	0x0800e910

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <QMC5883L_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Función para inicializar el sensor QMC5883L
void QMC5883L_Init() {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af02      	add	r7, sp, #8
    uint8_t data[2];
    data[0] = 0x0B; // Registro de configuración 2
 8000f8e:	230b      	movs	r3, #11
 8000f90:	713b      	strb	r3, [r7, #4]
    data[1] = 0x01; // Reinicio de software
 8000f92:	2301      	movs	r3, #1
 8000f94:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c2, QMC5883L_ADDR, data, 2, 100);
 8000f96:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <QMC5883L_Init+0x48>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	1d3a      	adds	r2, r7, #4
 8000f9e:	2364      	movs	r3, #100	@ 0x64
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	480b      	ldr	r0, [pc, #44]	@ (8000fd4 <QMC5883L_Init+0x4c>)
 8000fa6:	f001 ffcb 	bl	8002f40 <HAL_I2C_Master_Transmit>

    data[0] = 0x09; // Registro de control
 8000faa:	2309      	movs	r3, #9
 8000fac:	713b      	strb	r3, [r7, #4]
    data[1] = 0x1D; // Configuración (ODR = 50Hz, RNG = 2G, OSR = 512)
 8000fae:	231d      	movs	r3, #29
 8000fb0:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c2, QMC5883L_ADDR, data, 2, 100);
 8000fb2:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <QMC5883L_Init+0x48>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	1d3a      	adds	r2, r7, #4
 8000fba:	2364      	movs	r3, #100	@ 0x64
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	4804      	ldr	r0, [pc, #16]	@ (8000fd4 <QMC5883L_Init+0x4c>)
 8000fc2:	f001 ffbd 	bl	8002f40 <HAL_I2C_Master_Transmit>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000344 	.word	0x20000344

08000fd8 <QMC5883L_Read>:
// Función para leer los datos de los ejes X, Y, Z
void QMC5883L_Read(int16_t *x, int16_t *y, int16_t *z, float *angulo) {
 8000fd8:	b5b0      	push	{r4, r5, r7, lr}
 8000fda:	b08a      	sub	sp, #40	@ 0x28
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	603b      	str	r3, [r7, #0]
    uint8_t data[6];
    HAL_I2C_Mem_Read(&hi2c2, QMC5883L_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, data, 6, 100);
 8000fe6:	4b42      	ldr	r3, [pc, #264]	@ (80010f0 <QMC5883L_Read+0x118>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	4619      	mov	r1, r3
 8000fec:	2364      	movs	r3, #100	@ 0x64
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	2306      	movs	r3, #6
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	483d      	ldr	r0, [pc, #244]	@ (80010f4 <QMC5883L_Read+0x11c>)
 8001000:	f002 f89c 	bl	800313c <HAL_I2C_Mem_Read>

    *x = (int16_t)((data[1] << 8) | data[0]) - x_offset;
 8001004:	7c7b      	ldrb	r3, [r7, #17]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b21a      	sxth	r2, r3
 800100a:	7c3b      	ldrb	r3, [r7, #16]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21b      	sxth	r3, r3
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b38      	ldr	r3, [pc, #224]	@ (80010f8 <QMC5883L_Read+0x120>)
 8001016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101a:	b29b      	uxth	r3, r3
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	b29b      	uxth	r3, r3
 8001020:	b21a      	sxth	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((data[3] << 8) | data[2]) - y_offset;
 8001026:	7cfb      	ldrb	r3, [r7, #19]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	b21a      	sxth	r2, r3
 800102c:	7cbb      	ldrb	r3, [r7, #18]
 800102e:	b21b      	sxth	r3, r3
 8001030:	4313      	orrs	r3, r2
 8001032:	b21b      	sxth	r3, r3
 8001034:	b29a      	uxth	r2, r3
 8001036:	4b31      	ldr	r3, [pc, #196]	@ (80010fc <QMC5883L_Read+0x124>)
 8001038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103c:	b29b      	uxth	r3, r3
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	b29b      	uxth	r3, r3
 8001042:	b21a      	sxth	r2, r3
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((data[5] << 8) | data[4]);
 8001048:	7d7b      	ldrb	r3, [r7, #21]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
 800104e:	7d3b      	ldrb	r3, [r7, #20]
 8001050:	b21b      	sxth	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	b21a      	sxth	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	801a      	strh	r2, [r3, #0]

    // Calcular el ángulo en grados
    *angulo = atan2((float)*y, (float)*x) * (180.0 / M_PI);
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001068:	ee17 0a90 	vmov	r0, s15
 800106c:	f7ff fa74 	bl	8000558 <__aeabi_f2d>
 8001070:	4604      	mov	r4, r0
 8001072:	460d      	mov	r5, r1
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800107a:	ee07 3a90 	vmov	s15, r3
 800107e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001082:	ee17 0a90 	vmov	r0, s15
 8001086:	f7ff fa67 	bl	8000558 <__aeabi_f2d>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	ec43 2b11 	vmov	d1, r2, r3
 8001092:	ec45 4b10 	vmov	d0, r4, r5
 8001096:	f00d f9cf 	bl	800e438 <atan2>
 800109a:	ec51 0b10 	vmov	r0, r1, d0
 800109e:	a312      	add	r3, pc, #72	@ (adr r3, 80010e8 <QMC5883L_Read+0x110>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	f7ff fab0 	bl	8000608 <__aeabi_dmul>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4610      	mov	r0, r2
 80010ae:	4619      	mov	r1, r3
 80010b0:	f7ff fda2 	bl	8000bf8 <__aeabi_d2f>
 80010b4:	4602      	mov	r2, r0
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	601a      	str	r2, [r3, #0]
    if (*angulo < 0) {
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	edd3 7a00 	vldr	s15, [r3]
 80010c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c8:	d400      	bmi.n	80010cc <QMC5883L_Read+0xf4>
        *angulo += 360.0;  // Ajuste para obtener el ángulo en [0, 360] grados
    }
}
 80010ca:	e009      	b.n	80010e0 <QMC5883L_Read+0x108>
        *angulo += 360.0;  // Ajuste para obtener el ángulo en [0, 360] grados
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	edd3 7a00 	vldr	s15, [r3]
 80010d2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001100 <QMC5883L_Read+0x128>
 80010d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	edc3 7a00 	vstr	s15, [r3]
}
 80010e0:	bf00      	nop
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bdb0      	pop	{r4, r5, r7, pc}
 80010e8:	1a63c1f8 	.word	0x1a63c1f8
 80010ec:	404ca5dc 	.word	0x404ca5dc
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000344 	.word	0x20000344
 80010f8:	200002f0 	.word	0x200002f0
 80010fc:	200002f2 	.word	0x200002f2
 8001100:	43b40000 	.word	0x43b40000

08001104 <Calibrate_Sensor>:
void Calibrate_Sensor() {
 8001104:	b580      	push	{r7, lr}
 8001106:	b094      	sub	sp, #80	@ 0x50
 8001108:	af00      	add	r7, sp, #0
    int16_t x_min = 32767, x_max = -32768;
 800110a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800110e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001116:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    int16_t y_min = 32767, y_max = -32768;
 800111a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800111e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001126:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    uint32_t calibration_duration = HAL_GetTick() + 10000; // 10 segundos de calibración
 800112a:	f000 ffe1 	bl	80020f0 <HAL_GetTick>
 800112e:	4603      	mov	r3, r0
 8001130:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8001134:	3310      	adds	r3, #16
 8001136:	647b      	str	r3, [r7, #68]	@ 0x44
    char buffer[64];

    snprintf(buffer, sizeof(buffer), "Calibrando... Gire el sensor 360 grados\r\n");
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	4a46      	ldr	r2, [pc, #280]	@ (8001254 <Calibrate_Sensor+0x150>)
 800113c:	2140      	movs	r1, #64	@ 0x40
 800113e:	4618      	mov	r0, r3
 8001140:	f00b f83a 	bl	800c1b8 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f89a 	bl	8000280 <strlen>
 800114c:	4603      	mov	r3, r0
 800114e:	b29a      	uxth	r2, r3
 8001150:	1d39      	adds	r1, r7, #4
 8001152:	2364      	movs	r3, #100	@ 0x64
 8001154:	4840      	ldr	r0, [pc, #256]	@ (8001258 <Calibrate_Sensor+0x154>)
 8001156:	f005 fae5 	bl	8006724 <HAL_UART_Transmit>
    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f88f 	bl	8000280 <strlen>
 8001162:	4603      	mov	r3, r0
 8001164:	b29a      	uxth	r2, r3
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	4611      	mov	r1, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f009 feb8 	bl	800aee0 <CDC_Transmit_FS>

    while (HAL_GetTick() < calibration_duration) {
 8001170:	e034      	b.n	80011dc <Calibrate_Sensor+0xd8>
    	QMC5883L_Read(&x, &y, &z, NULL);
 8001172:	2300      	movs	r3, #0
 8001174:	4a39      	ldr	r2, [pc, #228]	@ (800125c <Calibrate_Sensor+0x158>)
 8001176:	493a      	ldr	r1, [pc, #232]	@ (8001260 <Calibrate_Sensor+0x15c>)
 8001178:	483a      	ldr	r0, [pc, #232]	@ (8001264 <Calibrate_Sensor+0x160>)
 800117a:	f7ff ff2d 	bl	8000fd8 <QMC5883L_Read>

        if (x < x_min) x_min = x;
 800117e:	4b39      	ldr	r3, [pc, #228]	@ (8001264 <Calibrate_Sensor+0x160>)
 8001180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001184:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 8001188:	429a      	cmp	r2, r3
 800118a:	dd03      	ble.n	8001194 <Calibrate_Sensor+0x90>
 800118c:	4b35      	ldr	r3, [pc, #212]	@ (8001264 <Calibrate_Sensor+0x160>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
        if (x > x_max) x_max = x;
 8001194:	4b33      	ldr	r3, [pc, #204]	@ (8001264 <Calibrate_Sensor+0x160>)
 8001196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119a:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 800119e:	429a      	cmp	r2, r3
 80011a0:	da03      	bge.n	80011aa <Calibrate_Sensor+0xa6>
 80011a2:	4b30      	ldr	r3, [pc, #192]	@ (8001264 <Calibrate_Sensor+0x160>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
        if (y < y_min) y_min = y;
 80011aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <Calibrate_Sensor+0x15c>)
 80011ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b0:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 80011b4:	429a      	cmp	r2, r3
 80011b6:	dd03      	ble.n	80011c0 <Calibrate_Sensor+0xbc>
 80011b8:	4b29      	ldr	r3, [pc, #164]	@ (8001260 <Calibrate_Sensor+0x15c>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        if (y > y_max) y_max = y;
 80011c0:	4b27      	ldr	r3, [pc, #156]	@ (8001260 <Calibrate_Sensor+0x15c>)
 80011c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c6:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 80011ca:	429a      	cmp	r2, r3
 80011cc:	da03      	bge.n	80011d6 <Calibrate_Sensor+0xd2>
 80011ce:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <Calibrate_Sensor+0x15c>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

        HAL_Delay(100); // Esperar antes de la siguiente lectura
 80011d6:	2064      	movs	r0, #100	@ 0x64
 80011d8:	f000 ff96 	bl	8002108 <HAL_Delay>
    while (HAL_GetTick() < calibration_duration) {
 80011dc:	f000 ff88 	bl	80020f0 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d8c4      	bhi.n	8001172 <Calibrate_Sensor+0x6e>
    }

    // Calcular los offsets para centrar en cero
    x_offset = (x_max + x_min) / 2;
 80011e8:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 80011ec:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80011f0:	4413      	add	r3, r2
 80011f2:	0fda      	lsrs	r2, r3, #31
 80011f4:	4413      	add	r3, r2
 80011f6:	105b      	asrs	r3, r3, #1
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <Calibrate_Sensor+0x164>)
 80011fc:	801a      	strh	r2, [r3, #0]
    y_offset = (y_max + y_min) / 2;
 80011fe:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8001202:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001206:	4413      	add	r3, r2
 8001208:	0fda      	lsrs	r2, r3, #31
 800120a:	4413      	add	r3, r2
 800120c:	105b      	asrs	r3, r3, #1
 800120e:	b21a      	sxth	r2, r3
 8001210:	4b16      	ldr	r3, [pc, #88]	@ (800126c <Calibrate_Sensor+0x168>)
 8001212:	801a      	strh	r2, [r3, #0]

    snprintf(buffer, sizeof(buffer), "Calibracion completa.\r\n");
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	4a16      	ldr	r2, [pc, #88]	@ (8001270 <Calibrate_Sensor+0x16c>)
 8001218:	2140      	movs	r1, #64	@ 0x40
 800121a:	4618      	mov	r0, r3
 800121c:	f00a ffcc 	bl	800c1b8 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f82c 	bl	8000280 <strlen>
 8001228:	4603      	mov	r3, r0
 800122a:	b29a      	uxth	r2, r3
 800122c:	1d39      	adds	r1, r7, #4
 800122e:	2364      	movs	r3, #100	@ 0x64
 8001230:	4809      	ldr	r0, [pc, #36]	@ (8001258 <Calibrate_Sensor+0x154>)
 8001232:	f005 fa77 	bl	8006724 <HAL_UART_Transmit>
    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f821 	bl	8000280 <strlen>
 800123e:	4603      	mov	r3, r0
 8001240:	b29a      	uxth	r2, r3
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	4611      	mov	r1, r2
 8001246:	4618      	mov	r0, r3
 8001248:	f009 fe4a 	bl	800aee0 <CDC_Transmit_FS>
}
 800124c:	bf00      	nop
 800124e:	3750      	adds	r7, #80	@ 0x50
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	0800e928 	.word	0x0800e928
 8001258:	200003e0 	.word	0x200003e0
 800125c:	200002f8 	.word	0x200002f8
 8001260:	200002f6 	.word	0x200002f6
 8001264:	200002f4 	.word	0x200002f4
 8001268:	200002f0 	.word	0x200002f0
 800126c:	200002f2 	.word	0x200002f2
 8001270:	0800e954 	.word	0x0800e954

08001274 <stop>:
void movebackward(){
    // Dirección hacia adelante
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
}
void stop(){
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
    // Dirección hacia adelante
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2120      	movs	r1, #32
 800127c:	4804      	ldr	r0, [pc, #16]	@ (8001290 <stop+0x1c>)
 800127e:	f001 fd01 	bl	8002c84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2110      	movs	r1, #16
 8001286:	4802      	ldr	r0, [pc, #8]	@ (8001290 <stop+0x1c>)
 8001288:	f001 fcfc 	bl	8002c84 <HAL_GPIO_WritePin>
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40020400 	.word	0x40020400

08001294 <mover_servo>:

    // Establece el duty cycle
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse);
}
// Función para mover el servo (ajusta con tu temporizador configurado)
void mover_servo(uint32_t pwm_duty) {
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_duty);
 800129c:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <mover_servo+0x1c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	20000398 	.word	0x20000398
 80012b4:	00000000 	.word	0x00000000

080012b8 <loop>:

void loop(){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b09a      	sub	sp, #104	@ 0x68
 80012bc:	af02      	add	r7, sp, #8
	int16_t x, y, z;
	float angulo;
	char buffer[64];
	QMC5883L_Read(&x, &y, &z, &angulo);
 80012be:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80012c2:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 80012c6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80012ca:	f107 004e 	add.w	r0, r7, #78	@ 0x4e
 80012ce:	f7ff fe83 	bl	8000fd8 <QMC5883L_Read>

	snprintf(buffer, sizeof(buffer), "angulo: %.2f grados\r\n", angulo);
 80012d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f93f 	bl	8000558 <__aeabi_f2d>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	1d38      	adds	r0, r7, #4
 80012e0:	e9cd 2300 	strd	r2, r3, [sp]
 80012e4:	4a3e      	ldr	r2, [pc, #248]	@ (80013e0 <loop+0x128>)
 80012e6:	2140      	movs	r1, #64	@ 0x40
 80012e8:	f00a ff66 	bl	800c1b8 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7fe ffc6 	bl	8000280 <strlen>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	1d39      	adds	r1, r7, #4
 80012fa:	2364      	movs	r3, #100	@ 0x64
 80012fc:	4839      	ldr	r0, [pc, #228]	@ (80013e4 <loop+0x12c>)
 80012fe:	f005 fa11 	bl	8006724 <HAL_UART_Transmit>
	CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4618      	mov	r0, r3
 8001306:	f7fe ffbb 	bl	8000280 <strlen>
 800130a:	4603      	mov	r3, r0
 800130c:	b29a      	uxth	r2, r3
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f009 fde4 	bl	800aee0 <CDC_Transmit_FS>

	HAL_Delay(500);
 8001318:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800131c:	f000 fef4 	bl	8002108 <HAL_Delay>

    // Leer ángulo del magnetómetro
    float current_angle = angulo;
 8001320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001322:	65bb      	str	r3, [r7, #88]	@ 0x58

    // Calcular error
    float error = setpoint - current_angle;
 8001324:	4b30      	ldr	r3, [pc, #192]	@ (80013e8 <loop+0x130>)
 8001326:	ed93 7a00 	vldr	s14, [r3]
 800132a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800132e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001332:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Calcular salida proporcional
    float output = Kp * error;
 8001336:	4b2d      	ldr	r3, [pc, #180]	@ (80013ec <loop+0x134>)
 8001338:	edd3 7a00 	vldr	s15, [r3]
 800133c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001344:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

    // Limitar la salida al rango permitido (-10° a 10°)
    if (output > 15) output = 15;
 8001348:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800134c:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001358:	dd01      	ble.n	800135e <loop+0xa6>
 800135a:	4b25      	ldr	r3, [pc, #148]	@ (80013f0 <loop+0x138>)
 800135c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (output < -15) output = -15;
 800135e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001362:	eeba 7a0e 	vmov.f32	s14, #174	@ 0xc1700000 -15.0
 8001366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800136a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136e:	d501      	bpl.n	8001374 <loop+0xbc>
 8001370:	4b20      	ldr	r3, [pc, #128]	@ (80013f4 <loop+0x13c>)
 8001372:	65fb      	str	r3, [r7, #92]	@ 0x5c

    // Convertir el ángulo a ciclo de trabajo del PWM
    uint32_t pwm_duty = ((output + 15) / 30.0) * (MAX_PWM - MIN_PWM) + MIN_PWM;
 8001374:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001378:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800137c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001380:	ee17 0a90 	vmov	r0, s15
 8001384:	f7ff f8e8 	bl	8000558 <__aeabi_f2d>
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <loop+0x140>)
 800138e:	f7ff fa65 	bl	800085c <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	4b17      	ldr	r3, [pc, #92]	@ (80013fc <loop+0x144>)
 80013a0:	f7ff f932 	bl	8000608 <__aeabi_dmul>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	a30a      	add	r3, pc, #40	@ (adr r3, 80013d8 <loop+0x120>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f7fe ff73 	bl	800029c <__adddf3>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff fbfb 	bl	8000bb8 <__aeabi_d2uiz>
 80013c2:	4603      	mov	r3, r0
 80013c4:	653b      	str	r3, [r7, #80]	@ 0x50

    // Controlar el servo
    mover_servo(pwm_duty);
 80013c6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80013c8:	f7ff ff64 	bl	8001294 <mover_servo>

}
 80013cc:	bf00      	nop
 80013ce:	3760      	adds	r7, #96	@ 0x60
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	f3af 8000 	nop.w
 80013d8:	00000000 	.word	0x00000000
 80013dc:	4074a000 	.word	0x4074a000
 80013e0:	0800e96c 	.word	0x0800e96c
 80013e4:	200003e0 	.word	0x200003e0
 80013e8:	2000000c 	.word	0x2000000c
 80013ec:	20000008 	.word	0x20000008
 80013f0:	41700000 	.word	0x41700000
 80013f4:	c1700000 	.word	0xc1700000
 80013f8:	403e0000 	.word	0x403e0000
 80013fc:	40754000 	.word	0x40754000

08001400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001404:	f000 fe0e 	bl	8002024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001408:	f000 f832 	bl	8001470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140c:	f000 f9d4 	bl	80017b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001410:	f000 f9a8 	bl	8001764 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001414:	f000 f894 	bl	8001540 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001418:	f000 f912 	bl	8001640 <MX_TIM2_Init>
  MX_I2C2_Init();
 800141c:	f000 f8e2 	bl	80015e4 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8001420:	f009 fca0 	bl	800ad64 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive
 8001424:	2201      	movs	r2, #1
 8001426:	490f      	ldr	r1, [pc, #60]	@ (8001464 <main+0x64>)
 8001428:	480f      	ldr	r0, [pc, #60]	@ (8001468 <main+0x68>)
 800142a:	f005 fa06 	bl	800683a <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800142e:	2100      	movs	r1, #0
 8001430:	480e      	ldr	r0, [pc, #56]	@ (800146c <main+0x6c>)
 8001432:	f004 fba7 	bl	8005b84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001436:	2104      	movs	r1, #4
 8001438:	480c      	ldr	r0, [pc, #48]	@ (800146c <main+0x6c>)
 800143a:	f004 fba3 	bl	8005b84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800143e:	2108      	movs	r1, #8
 8001440:	480a      	ldr	r0, [pc, #40]	@ (800146c <main+0x6c>)
 8001442:	f004 fb9f 	bl	8005b84 <HAL_TIM_PWM_Start>
  // Inicializa el motor
  htim2.Instance -> CCR1 = 500;
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <main+0x6c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800144e:	635a      	str	r2, [r3, #52]	@ 0x34
  stop();
 8001450:	f7ff ff10 	bl	8001274 <stop>
  QMC5883L_Init();
 8001454:	f7ff fd98 	bl	8000f88 <QMC5883L_Init>
  Calibrate_Sensor(); // Llamar a la función de calibración al inicio
 8001458:	f7ff fe54 	bl	8001104 <Calibrate_Sensor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  loop();
 800145c:	f7ff ff2c 	bl	80012b8 <loop>
 8001460:	e7fc      	b.n	800145c <main+0x5c>
 8001462:	bf00      	nop
 8001464:	20000428 	.word	0x20000428
 8001468:	200003e0 	.word	0x200003e0
 800146c:	20000398 	.word	0x20000398

08001470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b094      	sub	sp, #80	@ 0x50
 8001474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001476:	f107 0320 	add.w	r3, r7, #32
 800147a:	2230      	movs	r2, #48	@ 0x30
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f00a ff11 	bl	800c2a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	4b27      	ldr	r3, [pc, #156]	@ (8001538 <SystemClock_Config+0xc8>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149c:	4a26      	ldr	r2, [pc, #152]	@ (8001538 <SystemClock_Config+0xc8>)
 800149e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a4:	4b24      	ldr	r3, [pc, #144]	@ (8001538 <SystemClock_Config+0xc8>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b0:	2300      	movs	r3, #0
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	4b21      	ldr	r3, [pc, #132]	@ (800153c <SystemClock_Config+0xcc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a20      	ldr	r2, [pc, #128]	@ (800153c <SystemClock_Config+0xcc>)
 80014ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <SystemClock_Config+0xcc>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014cc:	2301      	movs	r3, #1
 80014ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d6:	2302      	movs	r3, #2
 80014d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014e0:	2319      	movs	r3, #25
 80014e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80014e4:	2390      	movs	r3, #144	@ 0x90
 80014e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014e8:	2302      	movs	r3, #2
 80014ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80014ec:	2303      	movs	r3, #3
 80014ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f0:	f107 0320 	add.w	r3, r7, #32
 80014f4:	4618      	mov	r0, r3
 80014f6:	f003 fe45 	bl	8005184 <HAL_RCC_OscConfig>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001500:	f000 fab6 	bl	8001a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001504:	230f      	movs	r3, #15
 8001506:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001508:	2302      	movs	r3, #2
 800150a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001510:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001514:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	2102      	movs	r1, #2
 8001520:	4618      	mov	r0, r3
 8001522:	f004 f8a7 	bl	8005674 <HAL_RCC_ClockConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800152c:	f000 faa0 	bl	8001a70 <Error_Handler>
  }
}
 8001530:	bf00      	nop
 8001532:	3750      	adds	r7, #80	@ 0x50
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800
 800153c:	40007000 	.word	0x40007000

08001540 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001546:	463b      	mov	r3, r7
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001552:	4b21      	ldr	r3, [pc, #132]	@ (80015d8 <MX_ADC1_Init+0x98>)
 8001554:	4a21      	ldr	r2, [pc, #132]	@ (80015dc <MX_ADC1_Init+0x9c>)
 8001556:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001558:	4b1f      	ldr	r3, [pc, #124]	@ (80015d8 <MX_ADC1_Init+0x98>)
 800155a:	2200      	movs	r2, #0
 800155c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800155e:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <MX_ADC1_Init+0x98>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001564:	4b1c      	ldr	r3, [pc, #112]	@ (80015d8 <MX_ADC1_Init+0x98>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800156a:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <MX_ADC1_Init+0x98>)
 800156c:	2200      	movs	r2, #0
 800156e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001570:	4b19      	ldr	r3, [pc, #100]	@ (80015d8 <MX_ADC1_Init+0x98>)
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001578:	4b17      	ldr	r3, [pc, #92]	@ (80015d8 <MX_ADC1_Init+0x98>)
 800157a:	2200      	movs	r2, #0
 800157c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800157e:	4b16      	ldr	r3, [pc, #88]	@ (80015d8 <MX_ADC1_Init+0x98>)
 8001580:	4a17      	ldr	r2, [pc, #92]	@ (80015e0 <MX_ADC1_Init+0xa0>)
 8001582:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001584:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <MX_ADC1_Init+0x98>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800158a:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <MX_ADC1_Init+0x98>)
 800158c:	2201      	movs	r2, #1
 800158e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001590:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <MX_ADC1_Init+0x98>)
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <MX_ADC1_Init+0x98>)
 800159a:	2201      	movs	r2, #1
 800159c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800159e:	480e      	ldr	r0, [pc, #56]	@ (80015d8 <MX_ADC1_Init+0x98>)
 80015a0:	f000 fdd6 	bl	8002150 <HAL_ADC_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80015aa:	f000 fa61 	bl	8001a70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015ae:	2301      	movs	r3, #1
 80015b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015b2:	2301      	movs	r3, #1
 80015b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ba:	463b      	mov	r3, r7
 80015bc:	4619      	mov	r1, r3
 80015be:	4806      	ldr	r0, [pc, #24]	@ (80015d8 <MX_ADC1_Init+0x98>)
 80015c0:	f000 fe0a 	bl	80021d8 <HAL_ADC_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80015ca:	f000 fa51 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200002fc 	.word	0x200002fc
 80015dc:	40012000 	.word	0x40012000
 80015e0:	0f000001 	.word	0x0f000001

080015e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015e8:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <MX_I2C2_Init+0x50>)
 80015ea:	4a13      	ldr	r2, [pc, #76]	@ (8001638 <MX_I2C2_Init+0x54>)
 80015ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <MX_I2C2_Init+0x50>)
 80015f0:	4a12      	ldr	r2, [pc, #72]	@ (800163c <MX_I2C2_Init+0x58>)
 80015f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <MX_I2C2_Init+0x50>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <MX_I2C2_Init+0x50>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001600:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <MX_I2C2_Init+0x50>)
 8001602:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001606:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001608:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <MX_I2C2_Init+0x50>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800160e:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <MX_I2C2_Init+0x50>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001614:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <MX_I2C2_Init+0x50>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <MX_I2C2_Init+0x50>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001620:	4804      	ldr	r0, [pc, #16]	@ (8001634 <MX_I2C2_Init+0x50>)
 8001622:	f001 fb49 	bl	8002cb8 <HAL_I2C_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800162c:	f000 fa20 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000344 	.word	0x20000344
 8001638:	40005800 	.word	0x40005800
 800163c:	000186a0 	.word	0x000186a0

08001640 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08e      	sub	sp, #56	@ 0x38
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001646:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001654:	f107 0320 	add.w	r3, r7, #32
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
 800166c:	615a      	str	r2, [r3, #20]
 800166e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001670:	4b3b      	ldr	r3, [pc, #236]	@ (8001760 <MX_TIM2_Init+0x120>)
 8001672:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001676:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001678:	4b39      	ldr	r3, [pc, #228]	@ (8001760 <MX_TIM2_Init+0x120>)
 800167a:	2247      	movs	r2, #71	@ 0x47
 800167c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167e:	4b38      	ldr	r3, [pc, #224]	@ (8001760 <MX_TIM2_Init+0x120>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001684:	4b36      	ldr	r3, [pc, #216]	@ (8001760 <MX_TIM2_Init+0x120>)
 8001686:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800168a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168c:	4b34      	ldr	r3, [pc, #208]	@ (8001760 <MX_TIM2_Init+0x120>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001692:	4b33      	ldr	r3, [pc, #204]	@ (8001760 <MX_TIM2_Init+0x120>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001698:	4831      	ldr	r0, [pc, #196]	@ (8001760 <MX_TIM2_Init+0x120>)
 800169a:	f004 f9cb 	bl	8005a34 <HAL_TIM_Base_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80016a4:	f000 f9e4 	bl	8001a70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016b2:	4619      	mov	r1, r3
 80016b4:	482a      	ldr	r0, [pc, #168]	@ (8001760 <MX_TIM2_Init+0x120>)
 80016b6:	f004 fbd7 	bl	8005e68 <HAL_TIM_ConfigClockSource>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80016c0:	f000 f9d6 	bl	8001a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016c4:	4826      	ldr	r0, [pc, #152]	@ (8001760 <MX_TIM2_Init+0x120>)
 80016c6:	f004 fa04 	bl	8005ad2 <HAL_TIM_PWM_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80016d0:	f000 f9ce 	bl	8001a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016dc:	f107 0320 	add.w	r3, r7, #32
 80016e0:	4619      	mov	r1, r3
 80016e2:	481f      	ldr	r0, [pc, #124]	@ (8001760 <MX_TIM2_Init+0x120>)
 80016e4:	f004 ff60 	bl	80065a8 <HAL_TIMEx_MasterConfigSynchronization>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80016ee:	f000 f9bf 	bl	8001a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f2:	2360      	movs	r3, #96	@ 0x60
 80016f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80016f6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80016fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2200      	movs	r2, #0
 8001708:	4619      	mov	r1, r3
 800170a:	4815      	ldr	r0, [pc, #84]	@ (8001760 <MX_TIM2_Init+0x120>)
 800170c:	f004 faea 	bl	8005ce4 <HAL_TIM_PWM_ConfigChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001716:	f000 f9ab 	bl	8001a70 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2204      	movs	r2, #4
 8001722:	4619      	mov	r1, r3
 8001724:	480e      	ldr	r0, [pc, #56]	@ (8001760 <MX_TIM2_Init+0x120>)
 8001726:	f004 fadd 	bl	8005ce4 <HAL_TIM_PWM_ConfigChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8001730:	f000 f99e 	bl	8001a70 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8001734:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001738:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	2208      	movs	r2, #8
 800173e:	4619      	mov	r1, r3
 8001740:	4807      	ldr	r0, [pc, #28]	@ (8001760 <MX_TIM2_Init+0x120>)
 8001742:	f004 facf 	bl	8005ce4 <HAL_TIM_PWM_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 800174c:	f000 f990 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001750:	4803      	ldr	r0, [pc, #12]	@ (8001760 <MX_TIM2_Init+0x120>)
 8001752:	f000 fa79 	bl	8001c48 <HAL_TIM_MspPostInit>

}
 8001756:	bf00      	nop
 8001758:	3738      	adds	r7, #56	@ 0x38
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000398 	.word	0x20000398

08001764 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 800176a:	4a12      	ldr	r2, [pc, #72]	@ (80017b4 <MX_USART1_UART_Init+0x50>)
 800176c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001770:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001776:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001788:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 800178a:	220c      	movs	r2, #12
 800178c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178e:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 800179c:	f004 ff72 	bl	8006684 <HAL_UART_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017a6:	f000 f963 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200003e0 	.word	0x200003e0
 80017b4:	40011000 	.word	0x40011000

080017b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001850 <MX_GPIO_Init+0x98>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001850 <MX_GPIO_Init+0x98>)
 80017d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b1c      	ldr	r3, [pc, #112]	@ (8001850 <MX_GPIO_Init+0x98>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <MX_GPIO_Init+0x98>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a17      	ldr	r2, [pc, #92]	@ (8001850 <MX_GPIO_Init+0x98>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <MX_GPIO_Init+0x98>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <MX_GPIO_Init+0x98>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a10      	ldr	r2, [pc, #64]	@ (8001850 <MX_GPIO_Init+0x98>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <MX_GPIO_Init+0x98>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	2130      	movs	r1, #48	@ 0x30
 8001826:	480b      	ldr	r0, [pc, #44]	@ (8001854 <MX_GPIO_Init+0x9c>)
 8001828:	f001 fa2c 	bl	8002c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800182c:	2330      	movs	r3, #48	@ 0x30
 800182e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	4619      	mov	r1, r3
 8001842:	4804      	ldr	r0, [pc, #16]	@ (8001854 <MX_GPIO_Init+0x9c>)
 8001844:	f001 f89a 	bl	800297c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001848:	bf00      	nop
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40023800 	.word	0x40023800
 8001854:	40020400 	.word	0x40020400

08001858 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a7a      	ldr	r2, [pc, #488]	@ (8001a50 <HAL_UART_RxCpltCallback+0x1f8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	f040 80e9 	bne.w	8001a3e <HAL_UART_RxCpltCallback+0x1e6>
  {
    if(rxData==78) // Ascii value of 'N' is 78 (N for NO)
 800186c:	4b79      	ldr	r3, [pc, #484]	@ (8001a54 <HAL_UART_RxCpltCallback+0x1fc>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b4e      	cmp	r3, #78	@ 0x4e
 8001872:	d10a      	bne.n	800188a <HAL_UART_RxCpltCallback+0x32>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001874:	2201      	movs	r2, #1
 8001876:	2120      	movs	r1, #32
 8001878:	4877      	ldr	r0, [pc, #476]	@ (8001a58 <HAL_UART_RxCpltCallback+0x200>)
 800187a:	f001 fa03 	bl	8002c84 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2110      	movs	r1, #16
 8001882:	4875      	ldr	r0, [pc, #468]	@ (8001a58 <HAL_UART_RxCpltCallback+0x200>)
 8001884:	f001 f9fe 	bl	8002c84 <HAL_GPIO_WritePin>
 8001888:	e0d4      	b.n	8001a34 <HAL_UART_RxCpltCallback+0x1dc>

    }
    else if (rxData==89) // Ascii value of 'Y' is 89 (Y for YES)
 800188a:	4b72      	ldr	r3, [pc, #456]	@ (8001a54 <HAL_UART_RxCpltCallback+0x1fc>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b59      	cmp	r3, #89	@ 0x59
 8001890:	d10a      	bne.n	80018a8 <HAL_UART_RxCpltCallback+0x50>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2120      	movs	r1, #32
 8001896:	4870      	ldr	r0, [pc, #448]	@ (8001a58 <HAL_UART_RxCpltCallback+0x200>)
 8001898:	f001 f9f4 	bl	8002c84 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800189c:	2201      	movs	r2, #1
 800189e:	2110      	movs	r1, #16
 80018a0:	486d      	ldr	r0, [pc, #436]	@ (8001a58 <HAL_UART_RxCpltCallback+0x200>)
 80018a2:	f001 f9ef 	bl	8002c84 <HAL_GPIO_WritePin>
 80018a6:	e0c5      	b.n	8001a34 <HAL_UART_RxCpltCallback+0x1dc>

    }
    else if (rxData==69) // Ascii value of 'E' is 89 (E for EXIT)
 80018a8:	4b6a      	ldr	r3, [pc, #424]	@ (8001a54 <HAL_UART_RxCpltCallback+0x1fc>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b45      	cmp	r3, #69	@ 0x45
 80018ae:	d10a      	bne.n	80018c6 <HAL_UART_RxCpltCallback+0x6e>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2120      	movs	r1, #32
 80018b4:	4868      	ldr	r0, [pc, #416]	@ (8001a58 <HAL_UART_RxCpltCallback+0x200>)
 80018b6:	f001 f9e5 	bl	8002c84 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2110      	movs	r1, #16
 80018be:	4866      	ldr	r0, [pc, #408]	@ (8001a58 <HAL_UART_RxCpltCallback+0x200>)
 80018c0:	f001 f9e0 	bl	8002c84 <HAL_GPIO_WritePin>
 80018c4:	e0b6      	b.n	8001a34 <HAL_UART_RxCpltCallback+0x1dc>

    }
    else if (rxData ==65) //Ascii value of "A" is 65 (A for Servo)
 80018c6:	4b63      	ldr	r3, [pc, #396]	@ (8001a54 <HAL_UART_RxCpltCallback+0x1fc>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b41      	cmp	r3, #65	@ 0x41
 80018cc:	d155      	bne.n	800197a <HAL_UART_RxCpltCallback+0x122>
    {
    	// Este condicional sirve para aumentar un grado hasta el maximo de 9 grados en el servo
    	if (rot > lim_serv){
 80018ce:	4b63      	ldr	r3, [pc, #396]	@ (8001a5c <HAL_UART_RxCpltCallback+0x204>)
 80018d0:	f993 3000 	ldrsb.w	r3, [r3]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b62      	ldr	r3, [pc, #392]	@ (8001a60 <HAL_UART_RxCpltCallback+0x208>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	dd24      	ble.n	8001928 <HAL_UART_RxCpltCallback+0xd0>
    		rot = lim_serv;
 80018de:	4b60      	ldr	r3, [pc, #384]	@ (8001a60 <HAL_UART_RxCpltCallback+0x208>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	b25a      	sxtb	r2, r3
 80018e4:	4b5d      	ldr	r3, [pc, #372]	@ (8001a5c <HAL_UART_RxCpltCallback+0x204>)
 80018e6:	701a      	strb	r2, [r3, #0]
    		grad = (rot + 45)/0.09;
 80018e8:	4b5c      	ldr	r3, [pc, #368]	@ (8001a5c <HAL_UART_RxCpltCallback+0x204>)
 80018ea:	f993 3000 	ldrsb.w	r3, [r3]
 80018ee:	332d      	adds	r3, #45	@ 0x2d
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe1f 	bl	8000534 <__aeabi_i2d>
 80018f6:	a354      	add	r3, pc, #336	@ (adr r3, 8001a48 <HAL_UART_RxCpltCallback+0x1f0>)
 80018f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fc:	f7fe ffae 	bl	800085c <__aeabi_ddiv>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f976 	bl	8000bf8 <__aeabi_d2f>
 800190c:	4603      	mov	r3, r0
 800190e:	4a55      	ldr	r2, [pc, #340]	@ (8001a64 <HAL_UART_RxCpltCallback+0x20c>)
 8001910:	6013      	str	r3, [r2, #0]
    		htim2.Instance -> CCR1 = grad; //10 grados
 8001912:	4b54      	ldr	r3, [pc, #336]	@ (8001a64 <HAL_UART_RxCpltCallback+0x20c>)
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	4b53      	ldr	r3, [pc, #332]	@ (8001a68 <HAL_UART_RxCpltCallback+0x210>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001920:	ee17 2a90 	vmov	r2, s15
 8001924:	635a      	str	r2, [r3, #52]	@ 0x34
 8001926:	e085      	b.n	8001a34 <HAL_UART_RxCpltCallback+0x1dc>
    	}
    	else {
    		rot = rot + 1;
 8001928:	4b4c      	ldr	r3, [pc, #304]	@ (8001a5c <HAL_UART_RxCpltCallback+0x204>)
 800192a:	f993 3000 	ldrsb.w	r3, [r3]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	3301      	adds	r3, #1
 8001932:	b2db      	uxtb	r3, r3
 8001934:	b25a      	sxtb	r2, r3
 8001936:	4b49      	ldr	r3, [pc, #292]	@ (8001a5c <HAL_UART_RxCpltCallback+0x204>)
 8001938:	701a      	strb	r2, [r3, #0]
    		grad = (rot + 45)/0.09;
 800193a:	4b48      	ldr	r3, [pc, #288]	@ (8001a5c <HAL_UART_RxCpltCallback+0x204>)
 800193c:	f993 3000 	ldrsb.w	r3, [r3]
 8001940:	332d      	adds	r3, #45	@ 0x2d
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fdf6 	bl	8000534 <__aeabi_i2d>
 8001948:	a33f      	add	r3, pc, #252	@ (adr r3, 8001a48 <HAL_UART_RxCpltCallback+0x1f0>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe ff85 	bl	800085c <__aeabi_ddiv>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	f7ff f94d 	bl	8000bf8 <__aeabi_d2f>
 800195e:	4603      	mov	r3, r0
 8001960:	4a40      	ldr	r2, [pc, #256]	@ (8001a64 <HAL_UART_RxCpltCallback+0x20c>)
 8001962:	6013      	str	r3, [r2, #0]
    		htim2.Instance -> CCR1 = grad; // aumenta 1
 8001964:	4b3f      	ldr	r3, [pc, #252]	@ (8001a64 <HAL_UART_RxCpltCallback+0x20c>)
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a68 <HAL_UART_RxCpltCallback+0x210>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001972:	ee17 2a90 	vmov	r2, s15
 8001976:	635a      	str	r2, [r3, #52]	@ 0x34
 8001978:	e05c      	b.n	8001a34 <HAL_UART_RxCpltCallback+0x1dc>
    	}

    }
    else if (rxData ==66) //Ascii value of "B" is 65 (B for Servo)
 800197a:	4b36      	ldr	r3, [pc, #216]	@ (8001a54 <HAL_UART_RxCpltCallback+0x1fc>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b42      	cmp	r3, #66	@ 0x42
 8001980:	d158      	bne.n	8001a34 <HAL_UART_RxCpltCallback+0x1dc>
    {
    	// Este condicional sirve para disminur un grado hasta el minimo de -9 grados en el servo
    	if (rot < -lim_serv){
 8001982:	4b36      	ldr	r3, [pc, #216]	@ (8001a5c <HAL_UART_RxCpltCallback+0x204>)
 8001984:	f993 3000 	ldrsb.w	r3, [r3]
 8001988:	461a      	mov	r2, r3
 800198a:	4b35      	ldr	r3, [pc, #212]	@ (8001a60 <HAL_UART_RxCpltCallback+0x208>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	425b      	negs	r3, r3
 8001990:	429a      	cmp	r2, r3
 8001992:	da27      	bge.n	80019e4 <HAL_UART_RxCpltCallback+0x18c>
    		rot = -lim_serv;
 8001994:	4b32      	ldr	r3, [pc, #200]	@ (8001a60 <HAL_UART_RxCpltCallback+0x208>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	425b      	negs	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	b25a      	sxtb	r2, r3
 80019a0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a5c <HAL_UART_RxCpltCallback+0x204>)
 80019a2:	701a      	strb	r2, [r3, #0]
    		grad = (rot + 45)/0.09;
 80019a4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a5c <HAL_UART_RxCpltCallback+0x204>)
 80019a6:	f993 3000 	ldrsb.w	r3, [r3]
 80019aa:	332d      	adds	r3, #45	@ 0x2d
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdc1 	bl	8000534 <__aeabi_i2d>
 80019b2:	a325      	add	r3, pc, #148	@ (adr r3, 8001a48 <HAL_UART_RxCpltCallback+0x1f0>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7fe ff50 	bl	800085c <__aeabi_ddiv>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7ff f918 	bl	8000bf8 <__aeabi_d2f>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a26      	ldr	r2, [pc, #152]	@ (8001a64 <HAL_UART_RxCpltCallback+0x20c>)
 80019cc:	6013      	str	r3, [r2, #0]
    		htim2.Instance -> CCR1 = grad; //10 grados
 80019ce:	4b25      	ldr	r3, [pc, #148]	@ (8001a64 <HAL_UART_RxCpltCallback+0x20c>)
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	4b24      	ldr	r3, [pc, #144]	@ (8001a68 <HAL_UART_RxCpltCallback+0x210>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019dc:	ee17 2a90 	vmov	r2, s15
 80019e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80019e2:	e027      	b.n	8001a34 <HAL_UART_RxCpltCallback+0x1dc>
    	}
    	else {
    		rot = rot - 1;
 80019e4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a5c <HAL_UART_RxCpltCallback+0x204>)
 80019e6:	f993 3000 	ldrsb.w	r3, [r3]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	b25a      	sxtb	r2, r3
 80019f2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <HAL_UART_RxCpltCallback+0x204>)
 80019f4:	701a      	strb	r2, [r3, #0]
    		grad = (rot + 45)/0.09;
 80019f6:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <HAL_UART_RxCpltCallback+0x204>)
 80019f8:	f993 3000 	ldrsb.w	r3, [r3]
 80019fc:	332d      	adds	r3, #45	@ 0x2d
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fd98 	bl	8000534 <__aeabi_i2d>
 8001a04:	a310      	add	r3, pc, #64	@ (adr r3, 8001a48 <HAL_UART_RxCpltCallback+0x1f0>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	f7fe ff27 	bl	800085c <__aeabi_ddiv>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f7ff f8ef 	bl	8000bf8 <__aeabi_d2f>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4a11      	ldr	r2, [pc, #68]	@ (8001a64 <HAL_UART_RxCpltCallback+0x20c>)
 8001a1e:	6013      	str	r3, [r2, #0]
    		htim2.Instance -> CCR1 = grad; // aumenta 1
 8001a20:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <HAL_UART_RxCpltCallback+0x20c>)
 8001a22:	edd3 7a00 	vldr	s15, [r3]
 8001a26:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <HAL_UART_RxCpltCallback+0x210>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a2e:	ee17 2a90 	vmov	r2, s15
 8001a32:	635a      	str	r2, [r3, #52]	@ 0x34
    	}

    }
    HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 8001a34:	2201      	movs	r2, #1
 8001a36:	4907      	ldr	r1, [pc, #28]	@ (8001a54 <HAL_UART_RxCpltCallback+0x1fc>)
 8001a38:	480c      	ldr	r0, [pc, #48]	@ (8001a6c <HAL_UART_RxCpltCallback+0x214>)
 8001a3a:	f004 fefe 	bl	800683a <HAL_UART_Receive_IT>
  }
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	70a3d70a 	.word	0x70a3d70a
 8001a4c:	3fb70a3d 	.word	0x3fb70a3d
 8001a50:	40011000 	.word	0x40011000
 8001a54:	20000428 	.word	0x20000428
 8001a58:	40020400 	.word	0x40020400
 8001a5c:	20000429 	.word	0x20000429
 8001a60:	20000004 	.word	0x20000004
 8001a64:	2000042c 	.word	0x2000042c
 8001a68:	20000398 	.word	0x20000398
 8001a6c:	200003e0 	.word	0x200003e0

08001a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a74:	b672      	cpsid	i
}
 8001a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <Error_Handler+0x8>

08001a7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <HAL_MspInit+0x4c>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac8 <HAL_MspInit+0x4c>)
 8001a8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <HAL_MspInit+0x4c>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <HAL_MspInit+0x4c>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	4a08      	ldr	r2, [pc, #32]	@ (8001ac8 <HAL_MspInit+0x4c>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_MspInit+0x4c>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	@ 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a17      	ldr	r2, [pc, #92]	@ (8001b48 <HAL_ADC_MspInit+0x7c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d127      	bne.n	8001b3e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b16      	ldr	r3, [pc, #88]	@ (8001b4c <HAL_ADC_MspInit+0x80>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af6:	4a15      	ldr	r2, [pc, #84]	@ (8001b4c <HAL_ADC_MspInit+0x80>)
 8001af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001afe:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <HAL_ADC_MspInit+0x80>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b4c <HAL_ADC_MspInit+0x80>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	4a0e      	ldr	r2, [pc, #56]	@ (8001b4c <HAL_ADC_MspInit+0x80>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <HAL_ADC_MspInit+0x80>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b26:	2302      	movs	r3, #2
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	@ (8001b50 <HAL_ADC_MspInit+0x84>)
 8001b3a:	f000 ff1f 	bl	800297c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b3e:	bf00      	nop
 8001b40:	3728      	adds	r7, #40	@ 0x28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40012000 	.word	0x40012000
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020000 	.word	0x40020000

08001b54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	@ 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a22      	ldr	r2, [pc, #136]	@ (8001bfc <HAL_I2C_MspInit+0xa8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d13d      	bne.n	8001bf2 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b21      	ldr	r3, [pc, #132]	@ (8001c00 <HAL_I2C_MspInit+0xac>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	4a20      	ldr	r2, [pc, #128]	@ (8001c00 <HAL_I2C_MspInit+0xac>)
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b86:	4b1e      	ldr	r3, [pc, #120]	@ (8001c00 <HAL_I2C_MspInit+0xac>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b98:	2312      	movs	r3, #18
 8001b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4619      	mov	r1, r3
 8001bae:	4815      	ldr	r0, [pc, #84]	@ (8001c04 <HAL_I2C_MspInit+0xb0>)
 8001bb0:	f000 fee4 	bl	800297c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bba:	2312      	movs	r3, #18
 8001bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001bc6:	2309      	movs	r3, #9
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480c      	ldr	r0, [pc, #48]	@ (8001c04 <HAL_I2C_MspInit+0xb0>)
 8001bd2:	f000 fed3 	bl	800297c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <HAL_I2C_MspInit+0xac>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	4a08      	ldr	r2, [pc, #32]	@ (8001c00 <HAL_I2C_MspInit+0xac>)
 8001be0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be6:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <HAL_I2C_MspInit+0xac>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001bf2:	bf00      	nop
 8001bf4:	3728      	adds	r7, #40	@ 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40005800 	.word	0x40005800
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40020400 	.word	0x40020400

08001c08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c18:	d10d      	bne.n	8001c36 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <HAL_TIM_Base_MspInit+0x3c>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	4a08      	ldr	r2, [pc, #32]	@ (8001c44 <HAL_TIM_Base_MspInit+0x3c>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c2a:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <HAL_TIM_Base_MspInit+0x3c>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800

08001c48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	@ 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c68:	d13b      	bne.n	8001ce2 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cec <HAL_TIM_MspPostInit+0xa4>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	4a1e      	ldr	r2, [pc, #120]	@ (8001cec <HAL_TIM_MspPostInit+0xa4>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cec <HAL_TIM_MspPostInit+0xa4>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	4b18      	ldr	r3, [pc, #96]	@ (8001cec <HAL_TIM_MspPostInit+0xa4>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	4a17      	ldr	r2, [pc, #92]	@ (8001cec <HAL_TIM_MspPostInit+0xa4>)
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c96:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <HAL_TIM_MspPostInit+0xa4>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001ca2:	2305      	movs	r3, #5
 8001ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480c      	ldr	r0, [pc, #48]	@ (8001cf0 <HAL_TIM_MspPostInit+0xa8>)
 8001cbe:	f000 fe5d 	bl	800297c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cc2:	2308      	movs	r3, #8
 8001cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4805      	ldr	r0, [pc, #20]	@ (8001cf4 <HAL_TIM_MspPostInit+0xac>)
 8001cde:	f000 fe4d 	bl	800297c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ce2:	bf00      	nop
 8001ce4:	3728      	adds	r7, #40	@ 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	40020400 	.word	0x40020400

08001cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	@ 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1d      	ldr	r2, [pc, #116]	@ (8001d8c <HAL_UART_MspInit+0x94>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d134      	bne.n	8001d84 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d90 <HAL_UART_MspInit+0x98>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	4a1b      	ldr	r2, [pc, #108]	@ (8001d90 <HAL_UART_MspInit+0x98>)
 8001d24:	f043 0310 	orr.w	r3, r3, #16
 8001d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2a:	4b19      	ldr	r3, [pc, #100]	@ (8001d90 <HAL_UART_MspInit+0x98>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <HAL_UART_MspInit+0x98>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a14      	ldr	r2, [pc, #80]	@ (8001d90 <HAL_UART_MspInit+0x98>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b12      	ldr	r3, [pc, #72]	@ (8001d90 <HAL_UART_MspInit+0x98>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d52:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d64:	2307      	movs	r3, #7
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4809      	ldr	r0, [pc, #36]	@ (8001d94 <HAL_UART_MspInit+0x9c>)
 8001d70:	f000 fe04 	bl	800297c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2100      	movs	r1, #0
 8001d78:	2025      	movs	r0, #37	@ 0x25
 8001d7a:	f000 fd36 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d7e:	2025      	movs	r0, #37	@ 0x25
 8001d80:	f000 fd4f 	bl	8002822 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d84:	bf00      	nop
 8001d86:	3728      	adds	r7, #40	@ 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40011000 	.word	0x40011000
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020000 	.word	0x40020000

08001d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <NMI_Handler+0x4>

08001da0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <HardFault_Handler+0x4>

08001da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <MemManage_Handler+0x4>

08001db0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <BusFault_Handler+0x4>

08001db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <UsageFault_Handler+0x4>

08001dc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dee:	f000 f96b 	bl	80020c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dfc:	4802      	ldr	r0, [pc, #8]	@ (8001e08 <USART1_IRQHandler+0x10>)
 8001dfe:	f004 fd41 	bl	8006884 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200003e0 	.word	0x200003e0

08001e0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e10:	4802      	ldr	r0, [pc, #8]	@ (8001e1c <OTG_FS_IRQHandler+0x10>)
 8001e12:	f002 f8a9 	bl	8003f68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20001918 	.word	0x20001918

08001e20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return 1;
 8001e24:	2301      	movs	r3, #1
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <_kill>:

int _kill(int pid, int sig)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e3a:	f00a fa87 	bl	800c34c <__errno>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2216      	movs	r2, #22
 8001e42:	601a      	str	r2, [r3, #0]
  return -1;
 8001e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <_exit>:

void _exit (int status)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e58:	f04f 31ff 	mov.w	r1, #4294967295
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ffe7 	bl	8001e30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e62:	bf00      	nop
 8001e64:	e7fd      	b.n	8001e62 <_exit+0x12>

08001e66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	e00a      	b.n	8001e8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e78:	f3af 8000 	nop.w
 8001e7c:	4601      	mov	r1, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	60ba      	str	r2, [r7, #8]
 8001e84:	b2ca      	uxtb	r2, r1
 8001e86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	dbf0      	blt.n	8001e78 <_read+0x12>
  }

  return len;
 8001e96:	687b      	ldr	r3, [r7, #4]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	e009      	b.n	8001ec6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	60ba      	str	r2, [r7, #8]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	dbf1      	blt.n	8001eb2 <_write+0x12>
  }
  return len;
 8001ece:	687b      	ldr	r3, [r7, #4]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <_close>:

int _close(int file)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ee0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f00:	605a      	str	r2, [r3, #4]
  return 0;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <_isatty>:

int _isatty(int file)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f18:	2301      	movs	r3, #1
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b085      	sub	sp, #20
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f48:	4a14      	ldr	r2, [pc, #80]	@ (8001f9c <_sbrk+0x5c>)
 8001f4a:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <_sbrk+0x60>)
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f54:	4b13      	ldr	r3, [pc, #76]	@ (8001fa4 <_sbrk+0x64>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d102      	bne.n	8001f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	@ (8001fa4 <_sbrk+0x64>)
 8001f5e:	4a12      	ldr	r2, [pc, #72]	@ (8001fa8 <_sbrk+0x68>)
 8001f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f62:	4b10      	ldr	r3, [pc, #64]	@ (8001fa4 <_sbrk+0x64>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d207      	bcs.n	8001f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f70:	f00a f9ec 	bl	800c34c <__errno>
 8001f74:	4603      	mov	r3, r0
 8001f76:	220c      	movs	r2, #12
 8001f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7e:	e009      	b.n	8001f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f80:	4b08      	ldr	r3, [pc, #32]	@ (8001fa4 <_sbrk+0x64>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f86:	4b07      	ldr	r3, [pc, #28]	@ (8001fa4 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	4a05      	ldr	r2, [pc, #20]	@ (8001fa4 <_sbrk+0x64>)
 8001f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f92:	68fb      	ldr	r3, [r7, #12]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20020000 	.word	0x20020000
 8001fa0:	00000400 	.word	0x00000400
 8001fa4:	20000430 	.word	0x20000430
 8001fa8:	20002168 	.word	0x20002168

08001fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb0:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <SystemInit+0x20>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fb6:	4a05      	ldr	r2, [pc, #20]	@ (8001fcc <SystemInit+0x20>)
 8001fb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002008 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fd4:	f7ff ffea 	bl	8001fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd8:	480c      	ldr	r0, [pc, #48]	@ (800200c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fda:	490d      	ldr	r1, [pc, #52]	@ (8002010 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002014 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe0:	e002      	b.n	8001fe8 <LoopCopyDataInit>

08001fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe6:	3304      	adds	r3, #4

08001fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fec:	d3f9      	bcc.n	8001fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fee:	4a0a      	ldr	r2, [pc, #40]	@ (8002018 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ff0:	4c0a      	ldr	r4, [pc, #40]	@ (800201c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff4:	e001      	b.n	8001ffa <LoopFillZerobss>

08001ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff8:	3204      	adds	r2, #4

08001ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ffc:	d3fb      	bcc.n	8001ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ffe:	f00a f9ab 	bl	800c358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002002:	f7ff f9fd 	bl	8001400 <main>
  bx  lr    
 8002006:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002008:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800200c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002010:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8002014:	0800edd8 	.word	0x0800edd8
  ldr r2, =_sbss
 8002018:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 800201c:	20002168 	.word	0x20002168

08002020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002020:	e7fe      	b.n	8002020 <ADC_IRQHandler>
	...

08002024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002028:	4b0e      	ldr	r3, [pc, #56]	@ (8002064 <HAL_Init+0x40>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0d      	ldr	r2, [pc, #52]	@ (8002064 <HAL_Init+0x40>)
 800202e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002034:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <HAL_Init+0x40>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0a      	ldr	r2, [pc, #40]	@ (8002064 <HAL_Init+0x40>)
 800203a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800203e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002040:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <HAL_Init+0x40>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a07      	ldr	r2, [pc, #28]	@ (8002064 <HAL_Init+0x40>)
 8002046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800204a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800204c:	2003      	movs	r0, #3
 800204e:	f000 fbc1 	bl	80027d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002052:	200f      	movs	r0, #15
 8002054:	f000 f808 	bl	8002068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002058:	f7ff fd10 	bl	8001a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40023c00 	.word	0x40023c00

08002068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002070:	4b12      	ldr	r3, [pc, #72]	@ (80020bc <HAL_InitTick+0x54>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b12      	ldr	r3, [pc, #72]	@ (80020c0 <HAL_InitTick+0x58>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4619      	mov	r1, r3
 800207a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800207e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	4618      	mov	r0, r3
 8002088:	f000 fbd9 	bl	800283e <HAL_SYSTICK_Config>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e00e      	b.n	80020b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b0f      	cmp	r3, #15
 800209a:	d80a      	bhi.n	80020b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800209c:	2200      	movs	r2, #0
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	f000 fba1 	bl	80027ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a8:	4a06      	ldr	r2, [pc, #24]	@ (80020c4 <HAL_InitTick+0x5c>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e000      	b.n	80020b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000010 	.word	0x20000010
 80020c0:	20000018 	.word	0x20000018
 80020c4:	20000014 	.word	0x20000014

080020c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020cc:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <HAL_IncTick+0x20>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <HAL_IncTick+0x24>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	4a04      	ldr	r2, [pc, #16]	@ (80020ec <HAL_IncTick+0x24>)
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000018 	.word	0x20000018
 80020ec:	20000434 	.word	0x20000434

080020f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return uwTick;
 80020f4:	4b03      	ldr	r3, [pc, #12]	@ (8002104 <HAL_GetTick+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20000434 	.word	0x20000434

08002108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002110:	f7ff ffee 	bl	80020f0 <HAL_GetTick>
 8002114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d005      	beq.n	800212e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002122:	4b0a      	ldr	r3, [pc, #40]	@ (800214c <HAL_Delay+0x44>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4413      	add	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800212e:	bf00      	nop
 8002130:	f7ff ffde 	bl	80020f0 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	429a      	cmp	r2, r3
 800213e:	d8f7      	bhi.n	8002130 <HAL_Delay+0x28>
  {
  }
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000018 	.word	0x20000018

08002150 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e033      	b.n	80021ce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff fcac 	bl	8001acc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	2b00      	cmp	r3, #0
 800218c:	d118      	bne.n	80021c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002196:	f023 0302 	bic.w	r3, r3, #2
 800219a:	f043 0202 	orr.w	r2, r3, #2
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f94a 	bl	800243c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	f023 0303 	bic.w	r3, r3, #3
 80021b6:	f043 0201 	orr.w	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80021be:	e001      	b.n	80021c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x1c>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e113      	b.n	800241c <HAL_ADC_ConfigChannel+0x244>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b09      	cmp	r3, #9
 8002202:	d925      	bls.n	8002250 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68d9      	ldr	r1, [r3, #12]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	4613      	mov	r3, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	4413      	add	r3, r2
 8002218:	3b1e      	subs	r3, #30
 800221a:	2207      	movs	r2, #7
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43da      	mvns	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	400a      	ands	r2, r1
 8002228:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68d9      	ldr	r1, [r3, #12]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	b29b      	uxth	r3, r3
 800223a:	4618      	mov	r0, r3
 800223c:	4603      	mov	r3, r0
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4403      	add	r3, r0
 8002242:	3b1e      	subs	r3, #30
 8002244:	409a      	lsls	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	e022      	b.n	8002296 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6919      	ldr	r1, [r3, #16]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	2207      	movs	r2, #7
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43da      	mvns	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	400a      	ands	r2, r1
 8002272:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6919      	ldr	r1, [r3, #16]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	4618      	mov	r0, r3
 8002286:	4603      	mov	r3, r0
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4403      	add	r3, r0
 800228c:	409a      	lsls	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b06      	cmp	r3, #6
 800229c:	d824      	bhi.n	80022e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	3b05      	subs	r3, #5
 80022b0:	221f      	movs	r2, #31
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43da      	mvns	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	400a      	ands	r2, r1
 80022be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	4618      	mov	r0, r3
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	3b05      	subs	r3, #5
 80022da:	fa00 f203 	lsl.w	r2, r0, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80022e6:	e04c      	b.n	8002382 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b0c      	cmp	r3, #12
 80022ee:	d824      	bhi.n	800233a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	3b23      	subs	r3, #35	@ 0x23
 8002302:	221f      	movs	r2, #31
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43da      	mvns	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	400a      	ands	r2, r1
 8002310:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	b29b      	uxth	r3, r3
 800231e:	4618      	mov	r0, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	3b23      	subs	r3, #35	@ 0x23
 800232c:	fa00 f203 	lsl.w	r2, r0, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	631a      	str	r2, [r3, #48]	@ 0x30
 8002338:	e023      	b.n	8002382 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	3b41      	subs	r3, #65	@ 0x41
 800234c:	221f      	movs	r2, #31
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43da      	mvns	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	400a      	ands	r2, r1
 800235a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	4618      	mov	r0, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	3b41      	subs	r3, #65	@ 0x41
 8002376:	fa00 f203 	lsl.w	r2, r0, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002382:	4b29      	ldr	r3, [pc, #164]	@ (8002428 <HAL_ADC_ConfigChannel+0x250>)
 8002384:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a28      	ldr	r2, [pc, #160]	@ (800242c <HAL_ADC_ConfigChannel+0x254>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d10f      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x1d8>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b12      	cmp	r3, #18
 8002396:	d10b      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1d      	ldr	r2, [pc, #116]	@ (800242c <HAL_ADC_ConfigChannel+0x254>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d12b      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x23a>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1c      	ldr	r2, [pc, #112]	@ (8002430 <HAL_ADC_ConfigChannel+0x258>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d003      	beq.n	80023cc <HAL_ADC_ConfigChannel+0x1f4>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b11      	cmp	r3, #17
 80023ca:	d122      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a11      	ldr	r2, [pc, #68]	@ (8002430 <HAL_ADC_ConfigChannel+0x258>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d111      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ee:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <HAL_ADC_ConfigChannel+0x25c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a11      	ldr	r2, [pc, #68]	@ (8002438 <HAL_ADC_ConfigChannel+0x260>)
 80023f4:	fba2 2303 	umull	r2, r3, r2, r3
 80023f8:	0c9a      	lsrs	r2, r3, #18
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002404:	e002      	b.n	800240c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	3b01      	subs	r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f9      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	40012300 	.word	0x40012300
 800242c:	40012000 	.word	0x40012000
 8002430:	10000012 	.word	0x10000012
 8002434:	20000010 	.word	0x20000010
 8002438:	431bde83 	.word	0x431bde83

0800243c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002444:	4b79      	ldr	r3, [pc, #484]	@ (800262c <ADC_Init+0x1f0>)
 8002446:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	431a      	orrs	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002470:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	021a      	lsls	r2, r3, #8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002494:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6899      	ldr	r1, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ce:	4a58      	ldr	r2, [pc, #352]	@ (8002630 <ADC_Init+0x1f4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d022      	beq.n	800251a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6899      	ldr	r1, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002504:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6899      	ldr	r1, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	e00f      	b.n	800253a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002528:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002538:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0202 	bic.w	r2, r2, #2
 8002548:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6899      	ldr	r1, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7e1b      	ldrb	r3, [r3, #24]
 8002554:	005a      	lsls	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01b      	beq.n	80025a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002576:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002586:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6859      	ldr	r1, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	3b01      	subs	r3, #1
 8002594:	035a      	lsls	r2, r3, #13
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	e007      	b.n	80025b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80025be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	051a      	lsls	r2, r3, #20
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80025e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6899      	ldr	r1, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025f2:	025a      	lsls	r2, r3, #9
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800260a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6899      	ldr	r1, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	029a      	lsls	r2, r3, #10
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	609a      	str	r2, [r3, #8]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	40012300 	.word	0x40012300
 8002630:	0f000001 	.word	0x0f000001

08002634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002644:	4b0c      	ldr	r3, [pc, #48]	@ (8002678 <__NVIC_SetPriorityGrouping+0x44>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002650:	4013      	ands	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800265c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002666:	4a04      	ldr	r2, [pc, #16]	@ (8002678 <__NVIC_SetPriorityGrouping+0x44>)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	60d3      	str	r3, [r2, #12]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002680:	4b04      	ldr	r3, [pc, #16]	@ (8002694 <__NVIC_GetPriorityGrouping+0x18>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	0a1b      	lsrs	r3, r3, #8
 8002686:	f003 0307 	and.w	r3, r3, #7
}
 800268a:	4618      	mov	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	db0b      	blt.n	80026c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	f003 021f 	and.w	r2, r3, #31
 80026b0:	4907      	ldr	r1, [pc, #28]	@ (80026d0 <__NVIC_EnableIRQ+0x38>)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	2001      	movs	r0, #1
 80026ba:	fa00 f202 	lsl.w	r2, r0, r2
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	e000e100 	.word	0xe000e100

080026d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	6039      	str	r1, [r7, #0]
 80026de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	db0a      	blt.n	80026fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	490c      	ldr	r1, [pc, #48]	@ (8002720 <__NVIC_SetPriority+0x4c>)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	0112      	lsls	r2, r2, #4
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	440b      	add	r3, r1
 80026f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026fc:	e00a      	b.n	8002714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	b2da      	uxtb	r2, r3
 8002702:	4908      	ldr	r1, [pc, #32]	@ (8002724 <__NVIC_SetPriority+0x50>)
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	3b04      	subs	r3, #4
 800270c:	0112      	lsls	r2, r2, #4
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	440b      	add	r3, r1
 8002712:	761a      	strb	r2, [r3, #24]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000e100 	.word	0xe000e100
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002728:	b480      	push	{r7}
 800272a:	b089      	sub	sp, #36	@ 0x24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f1c3 0307 	rsb	r3, r3, #7
 8002742:	2b04      	cmp	r3, #4
 8002744:	bf28      	it	cs
 8002746:	2304      	movcs	r3, #4
 8002748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3304      	adds	r3, #4
 800274e:	2b06      	cmp	r3, #6
 8002750:	d902      	bls.n	8002758 <NVIC_EncodePriority+0x30>
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3b03      	subs	r3, #3
 8002756:	e000      	b.n	800275a <NVIC_EncodePriority+0x32>
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	f04f 32ff 	mov.w	r2, #4294967295
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43da      	mvns	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	401a      	ands	r2, r3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002770:	f04f 31ff 	mov.w	r1, #4294967295
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	fa01 f303 	lsl.w	r3, r1, r3
 800277a:	43d9      	mvns	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002780:	4313      	orrs	r3, r2
         );
}
 8002782:	4618      	mov	r0, r3
 8002784:	3724      	adds	r7, #36	@ 0x24
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
	...

08002790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3b01      	subs	r3, #1
 800279c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027a0:	d301      	bcc.n	80027a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00f      	b.n	80027c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027a6:	4a0a      	ldr	r2, [pc, #40]	@ (80027d0 <SysTick_Config+0x40>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ae:	210f      	movs	r1, #15
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295
 80027b4:	f7ff ff8e 	bl	80026d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b8:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <SysTick_Config+0x40>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027be:	4b04      	ldr	r3, [pc, #16]	@ (80027d0 <SysTick_Config+0x40>)
 80027c0:	2207      	movs	r2, #7
 80027c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	e000e010 	.word	0xe000e010

080027d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ff29 	bl	8002634 <__NVIC_SetPriorityGrouping>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	4603      	mov	r3, r0
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027fc:	f7ff ff3e 	bl	800267c <__NVIC_GetPriorityGrouping>
 8002800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	6978      	ldr	r0, [r7, #20]
 8002808:	f7ff ff8e 	bl	8002728 <NVIC_EncodePriority>
 800280c:	4602      	mov	r2, r0
 800280e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff5d 	bl	80026d4 <__NVIC_SetPriority>
}
 800281a:	bf00      	nop
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800282c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff31 	bl	8002698 <__NVIC_EnableIRQ>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff ffa2 	bl	8002790 <SysTick_Config>
 800284c:	4603      	mov	r3, r0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002862:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002864:	f7ff fc44 	bl	80020f0 <HAL_GetTick>
 8002868:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d008      	beq.n	8002888 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2280      	movs	r2, #128	@ 0x80
 800287a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e052      	b.n	800292e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0216 	bic.w	r2, r2, #22
 8002896:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d103      	bne.n	80028b8 <HAL_DMA_Abort+0x62>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d007      	beq.n	80028c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0208 	bic.w	r2, r2, #8
 80028c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d8:	e013      	b.n	8002902 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028da:	f7ff fc09 	bl	80020f0 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b05      	cmp	r3, #5
 80028e6:	d90c      	bls.n	8002902 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2220      	movs	r2, #32
 80028ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2203      	movs	r2, #3
 80028f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e015      	b.n	800292e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1e4      	bne.n	80028da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002914:	223f      	movs	r2, #63	@ 0x3f
 8002916:	409a      	lsls	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d004      	beq.n	8002954 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2280      	movs	r2, #128	@ 0x80
 800294e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e00c      	b.n	800296e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2205      	movs	r2, #5
 8002958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0201 	bic.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800297c:	b480      	push	{r7}
 800297e:	b089      	sub	sp, #36	@ 0x24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	e159      	b.n	8002c4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002998:	2201      	movs	r2, #1
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	f040 8148 	bne.w	8002c46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d005      	beq.n	80029ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d130      	bne.n	8002a30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	2203      	movs	r2, #3
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a04:	2201      	movs	r2, #1
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	f003 0201 	and.w	r2, r3, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d017      	beq.n	8002a6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d123      	bne.n	8002ac0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	08da      	lsrs	r2, r3, #3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3208      	adds	r2, #8
 8002a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	220f      	movs	r2, #15
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	08da      	lsrs	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3208      	adds	r2, #8
 8002aba:	69b9      	ldr	r1, [r7, #24]
 8002abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0203 	and.w	r2, r3, #3
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80a2 	beq.w	8002c46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	4b57      	ldr	r3, [pc, #348]	@ (8002c64 <HAL_GPIO_Init+0x2e8>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0a:	4a56      	ldr	r2, [pc, #344]	@ (8002c64 <HAL_GPIO_Init+0x2e8>)
 8002b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b12:	4b54      	ldr	r3, [pc, #336]	@ (8002c64 <HAL_GPIO_Init+0x2e8>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b1e:	4a52      	ldr	r2, [pc, #328]	@ (8002c68 <HAL_GPIO_Init+0x2ec>)
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	089b      	lsrs	r3, r3, #2
 8002b24:	3302      	adds	r3, #2
 8002b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	220f      	movs	r2, #15
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a49      	ldr	r2, [pc, #292]	@ (8002c6c <HAL_GPIO_Init+0x2f0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d019      	beq.n	8002b7e <HAL_GPIO_Init+0x202>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a48      	ldr	r2, [pc, #288]	@ (8002c70 <HAL_GPIO_Init+0x2f4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d013      	beq.n	8002b7a <HAL_GPIO_Init+0x1fe>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a47      	ldr	r2, [pc, #284]	@ (8002c74 <HAL_GPIO_Init+0x2f8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00d      	beq.n	8002b76 <HAL_GPIO_Init+0x1fa>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a46      	ldr	r2, [pc, #280]	@ (8002c78 <HAL_GPIO_Init+0x2fc>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d007      	beq.n	8002b72 <HAL_GPIO_Init+0x1f6>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a45      	ldr	r2, [pc, #276]	@ (8002c7c <HAL_GPIO_Init+0x300>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d101      	bne.n	8002b6e <HAL_GPIO_Init+0x1f2>
 8002b6a:	2304      	movs	r3, #4
 8002b6c:	e008      	b.n	8002b80 <HAL_GPIO_Init+0x204>
 8002b6e:	2307      	movs	r3, #7
 8002b70:	e006      	b.n	8002b80 <HAL_GPIO_Init+0x204>
 8002b72:	2303      	movs	r3, #3
 8002b74:	e004      	b.n	8002b80 <HAL_GPIO_Init+0x204>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e002      	b.n	8002b80 <HAL_GPIO_Init+0x204>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <HAL_GPIO_Init+0x204>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	f002 0203 	and.w	r2, r2, #3
 8002b86:	0092      	lsls	r2, r2, #2
 8002b88:	4093      	lsls	r3, r2
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b90:	4935      	ldr	r1, [pc, #212]	@ (8002c68 <HAL_GPIO_Init+0x2ec>)
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	089b      	lsrs	r3, r3, #2
 8002b96:	3302      	adds	r3, #2
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b9e:	4b38      	ldr	r3, [pc, #224]	@ (8002c80 <HAL_GPIO_Init+0x304>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bc2:	4a2f      	ldr	r2, [pc, #188]	@ (8002c80 <HAL_GPIO_Init+0x304>)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c80 <HAL_GPIO_Init+0x304>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bec:	4a24      	ldr	r2, [pc, #144]	@ (8002c80 <HAL_GPIO_Init+0x304>)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bf2:	4b23      	ldr	r3, [pc, #140]	@ (8002c80 <HAL_GPIO_Init+0x304>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c16:	4a1a      	ldr	r2, [pc, #104]	@ (8002c80 <HAL_GPIO_Init+0x304>)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c1c:	4b18      	ldr	r3, [pc, #96]	@ (8002c80 <HAL_GPIO_Init+0x304>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c40:	4a0f      	ldr	r2, [pc, #60]	@ (8002c80 <HAL_GPIO_Init+0x304>)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	61fb      	str	r3, [r7, #28]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	2b0f      	cmp	r3, #15
 8002c50:	f67f aea2 	bls.w	8002998 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	3724      	adds	r7, #36	@ 0x24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40013800 	.word	0x40013800
 8002c6c:	40020000 	.word	0x40020000
 8002c70:	40020400 	.word	0x40020400
 8002c74:	40020800 	.word	0x40020800
 8002c78:	40020c00 	.word	0x40020c00
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40013c00 	.word	0x40013c00

08002c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	807b      	strh	r3, [r7, #2]
 8002c90:	4613      	mov	r3, r2
 8002c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c94:	787b      	ldrb	r3, [r7, #1]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c9a:	887a      	ldrh	r2, [r7, #2]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ca0:	e003      	b.n	8002caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ca2:	887b      	ldrh	r3, [r7, #2]
 8002ca4:	041a      	lsls	r2, r3, #16
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	619a      	str	r2, [r3, #24]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e12b      	b.n	8002f22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fe ff38 	bl	8001b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2224      	movs	r2, #36	@ 0x24
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0201 	bic.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d1c:	f002 fe62 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 8002d20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4a81      	ldr	r2, [pc, #516]	@ (8002f2c <HAL_I2C_Init+0x274>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d807      	bhi.n	8002d3c <HAL_I2C_Init+0x84>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4a80      	ldr	r2, [pc, #512]	@ (8002f30 <HAL_I2C_Init+0x278>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	bf94      	ite	ls
 8002d34:	2301      	movls	r3, #1
 8002d36:	2300      	movhi	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	e006      	b.n	8002d4a <HAL_I2C_Init+0x92>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4a7d      	ldr	r2, [pc, #500]	@ (8002f34 <HAL_I2C_Init+0x27c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	bf94      	ite	ls
 8002d44:	2301      	movls	r3, #1
 8002d46:	2300      	movhi	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e0e7      	b.n	8002f22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4a78      	ldr	r2, [pc, #480]	@ (8002f38 <HAL_I2C_Init+0x280>)
 8002d56:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5a:	0c9b      	lsrs	r3, r3, #18
 8002d5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4a6a      	ldr	r2, [pc, #424]	@ (8002f2c <HAL_I2C_Init+0x274>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d802      	bhi.n	8002d8c <HAL_I2C_Init+0xd4>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	e009      	b.n	8002da0 <HAL_I2C_Init+0xe8>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d92:	fb02 f303 	mul.w	r3, r2, r3
 8002d96:	4a69      	ldr	r2, [pc, #420]	@ (8002f3c <HAL_I2C_Init+0x284>)
 8002d98:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9c:	099b      	lsrs	r3, r3, #6
 8002d9e:	3301      	adds	r3, #1
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	430b      	orrs	r3, r1
 8002da6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002db2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	495c      	ldr	r1, [pc, #368]	@ (8002f2c <HAL_I2C_Init+0x274>)
 8002dbc:	428b      	cmp	r3, r1
 8002dbe:	d819      	bhi.n	8002df4 <HAL_I2C_Init+0x13c>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1e59      	subs	r1, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dce:	1c59      	adds	r1, r3, #1
 8002dd0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002dd4:	400b      	ands	r3, r1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_I2C_Init+0x138>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1e59      	subs	r1, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dee:	e051      	b.n	8002e94 <HAL_I2C_Init+0x1dc>
 8002df0:	2304      	movs	r3, #4
 8002df2:	e04f      	b.n	8002e94 <HAL_I2C_Init+0x1dc>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d111      	bne.n	8002e20 <HAL_I2C_Init+0x168>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1e58      	subs	r0, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	440b      	add	r3, r1
 8002e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bf0c      	ite	eq
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	2300      	movne	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	e012      	b.n	8002e46 <HAL_I2C_Init+0x18e>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	1e58      	subs	r0, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	0099      	lsls	r1, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e36:	3301      	adds	r3, #1
 8002e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Init+0x196>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e022      	b.n	8002e94 <HAL_I2C_Init+0x1dc>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10e      	bne.n	8002e74 <HAL_I2C_Init+0x1bc>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1e58      	subs	r0, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6859      	ldr	r1, [r3, #4]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	440b      	add	r3, r1
 8002e64:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e68:	3301      	adds	r3, #1
 8002e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e72:	e00f      	b.n	8002e94 <HAL_I2C_Init+0x1dc>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1e58      	subs	r0, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	0099      	lsls	r1, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	6809      	ldr	r1, [r1, #0]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69da      	ldr	r2, [r3, #28]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ec2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6911      	ldr	r1, [r2, #16]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	68d2      	ldr	r2, [r2, #12]
 8002ece:	4311      	orrs	r1, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	000186a0 	.word	0x000186a0
 8002f30:	001e847f 	.word	0x001e847f
 8002f34:	003d08ff 	.word	0x003d08ff
 8002f38:	431bde83 	.word	0x431bde83
 8002f3c:	10624dd3 	.word	0x10624dd3

08002f40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	817b      	strh	r3, [r7, #10]
 8002f50:	4613      	mov	r3, r2
 8002f52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f54:	f7ff f8cc 	bl	80020f0 <HAL_GetTick>
 8002f58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	f040 80e0 	bne.w	8003128 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	2319      	movs	r3, #25
 8002f6e:	2201      	movs	r2, #1
 8002f70:	4970      	ldr	r1, [pc, #448]	@ (8003134 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fc7e 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e0d3      	b.n	800312a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_I2C_Master_Transmit+0x50>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e0cc      	b.n	800312a <HAL_I2C_Master_Transmit+0x1ea>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d007      	beq.n	8002fb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2221      	movs	r2, #33	@ 0x21
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2210      	movs	r2, #16
 8002fd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	893a      	ldrh	r2, [r7, #8]
 8002fe6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4a50      	ldr	r2, [pc, #320]	@ (8003138 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ff6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ff8:	8979      	ldrh	r1, [r7, #10]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	6a3a      	ldr	r2, [r7, #32]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 face 	bl	80035a0 <I2C_MasterRequestWrite>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e08d      	b.n	800312a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003024:	e066      	b.n	80030f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	6a39      	ldr	r1, [r7, #32]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 fd3c 	bl	8003aa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00d      	beq.n	8003052 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	2b04      	cmp	r3, #4
 800303c:	d107      	bne.n	800304e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800304c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e06b      	b.n	800312a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003056:	781a      	ldrb	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b04      	cmp	r3, #4
 800308e:	d11b      	bne.n	80030c8 <HAL_I2C_Master_Transmit+0x188>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003094:	2b00      	cmp	r3, #0
 8003096:	d017      	beq.n	80030c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309c:	781a      	ldrb	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	6a39      	ldr	r1, [r7, #32]
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 fd33 	bl	8003b38 <I2C_WaitOnBTFFlagUntilTimeout>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00d      	beq.n	80030f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d107      	bne.n	80030f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e01a      	b.n	800312a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d194      	bne.n	8003026 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800310a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	e000      	b.n	800312a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003128:	2302      	movs	r3, #2
  }
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	00100002 	.word	0x00100002
 8003138:	ffff0000 	.word	0xffff0000

0800313c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08c      	sub	sp, #48	@ 0x30
 8003140:	af02      	add	r7, sp, #8
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	4608      	mov	r0, r1
 8003146:	4611      	mov	r1, r2
 8003148:	461a      	mov	r2, r3
 800314a:	4603      	mov	r3, r0
 800314c:	817b      	strh	r3, [r7, #10]
 800314e:	460b      	mov	r3, r1
 8003150:	813b      	strh	r3, [r7, #8]
 8003152:	4613      	mov	r3, r2
 8003154:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003156:	f7fe ffcb 	bl	80020f0 <HAL_GetTick>
 800315a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b20      	cmp	r3, #32
 8003166:	f040 8214 	bne.w	8003592 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	2319      	movs	r3, #25
 8003170:	2201      	movs	r2, #1
 8003172:	497b      	ldr	r1, [pc, #492]	@ (8003360 <HAL_I2C_Mem_Read+0x224>)
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 fb7d 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003180:	2302      	movs	r3, #2
 8003182:	e207      	b.n	8003594 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_I2C_Mem_Read+0x56>
 800318e:	2302      	movs	r3, #2
 8003190:	e200      	b.n	8003594 <HAL_I2C_Mem_Read+0x458>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d007      	beq.n	80031b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2222      	movs	r2, #34	@ 0x22
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2240      	movs	r2, #64	@ 0x40
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80031e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003364 <HAL_I2C_Mem_Read+0x228>)
 80031f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031fa:	88f8      	ldrh	r0, [r7, #6]
 80031fc:	893a      	ldrh	r2, [r7, #8]
 80031fe:	8979      	ldrh	r1, [r7, #10]
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	4603      	mov	r3, r0
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 fa4a 	bl	80036a4 <I2C_RequestMemoryRead>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e1bc      	b.n	8003594 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800321e:	2b00      	cmp	r3, #0
 8003220:	d113      	bne.n	800324a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003222:	2300      	movs	r3, #0
 8003224:	623b      	str	r3, [r7, #32]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	623b      	str	r3, [r7, #32]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	623b      	str	r3, [r7, #32]
 8003236:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	e190      	b.n	800356c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800324e:	2b01      	cmp	r3, #1
 8003250:	d11b      	bne.n	800328a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003260:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	61fb      	str	r3, [r7, #28]
 8003276:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	e170      	b.n	800356c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328e:	2b02      	cmp	r3, #2
 8003290:	d11b      	bne.n	80032ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b2:	2300      	movs	r3, #0
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	e150      	b.n	800356c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80032e0:	e144      	b.n	800356c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	f200 80f1 	bhi.w	80034ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d123      	bne.n	800333c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 fc65 	bl	8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e145      	b.n	8003594 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800333a:	e117      	b.n	800356c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003340:	2b02      	cmp	r3, #2
 8003342:	d14e      	bne.n	80033e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800334a:	2200      	movs	r2, #0
 800334c:	4906      	ldr	r1, [pc, #24]	@ (8003368 <HAL_I2C_Mem_Read+0x22c>)
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fa90 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d008      	beq.n	800336c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e11a      	b.n	8003594 <HAL_I2C_Mem_Read+0x458>
 800335e:	bf00      	nop
 8003360:	00100002 	.word	0x00100002
 8003364:	ffff0000 	.word	0xffff0000
 8003368:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800337a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033e0:	e0c4      	b.n	800356c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e8:	2200      	movs	r2, #0
 80033ea:	496c      	ldr	r1, [pc, #432]	@ (800359c <HAL_I2C_Mem_Read+0x460>)
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fa41 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0cb      	b.n	8003594 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800340a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003444:	2200      	movs	r2, #0
 8003446:	4955      	ldr	r1, [pc, #340]	@ (800359c <HAL_I2C_Mem_Read+0x460>)
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 fa13 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e09d      	b.n	8003594 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003466:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034cc:	e04e      	b.n	800356c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 fb78 	bl	8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e058      	b.n	8003594 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b04      	cmp	r3, #4
 8003520:	d124      	bne.n	800356c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003526:	2b03      	cmp	r3, #3
 8003528:	d107      	bne.n	800353a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003538:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003570:	2b00      	cmp	r3, #0
 8003572:	f47f aeb6 	bne.w	80032e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	e000      	b.n	8003594 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003592:	2302      	movs	r3, #2
  }
}
 8003594:	4618      	mov	r0, r3
 8003596:	3728      	adds	r7, #40	@ 0x28
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	00010004 	.word	0x00010004

080035a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	460b      	mov	r3, r1
 80035ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d006      	beq.n	80035ca <I2C_MasterRequestWrite+0x2a>
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d003      	beq.n	80035ca <I2C_MasterRequestWrite+0x2a>
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035c8:	d108      	bne.n	80035dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	e00b      	b.n	80035f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e0:	2b12      	cmp	r3, #18
 80035e2:	d107      	bne.n	80035f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f937 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00d      	beq.n	8003628 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800361a:	d103      	bne.n	8003624 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003622:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e035      	b.n	8003694 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003630:	d108      	bne.n	8003644 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003632:	897b      	ldrh	r3, [r7, #10]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003640:	611a      	str	r2, [r3, #16]
 8003642:	e01b      	b.n	800367c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003644:	897b      	ldrh	r3, [r7, #10]
 8003646:	11db      	asrs	r3, r3, #7
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f003 0306 	and.w	r3, r3, #6
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f063 030f 	orn	r3, r3, #15
 8003654:	b2da      	uxtb	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	490e      	ldr	r1, [pc, #56]	@ (800369c <I2C_MasterRequestWrite+0xfc>)
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f980 	bl	8003968 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e010      	b.n	8003694 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003672:	897b      	ldrh	r3, [r7, #10]
 8003674:	b2da      	uxtb	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	4907      	ldr	r1, [pc, #28]	@ (80036a0 <I2C_MasterRequestWrite+0x100>)
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f970 	bl	8003968 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	00010008 	.word	0x00010008
 80036a0:	00010002 	.word	0x00010002

080036a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	4608      	mov	r0, r1
 80036ae:	4611      	mov	r1, r2
 80036b0:	461a      	mov	r2, r3
 80036b2:	4603      	mov	r3, r0
 80036b4:	817b      	strh	r3, [r7, #10]
 80036b6:	460b      	mov	r3, r1
 80036b8:	813b      	strh	r3, [r7, #8]
 80036ba:	4613      	mov	r3, r2
 80036bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f8c2 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00d      	beq.n	8003712 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003700:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003704:	d103      	bne.n	800370e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800370c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e0aa      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003712:	897b      	ldrh	r3, [r7, #10]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	461a      	mov	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003720:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003724:	6a3a      	ldr	r2, [r7, #32]
 8003726:	4952      	ldr	r1, [pc, #328]	@ (8003870 <I2C_RequestMemoryRead+0x1cc>)
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f91d 	bl	8003968 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e097      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800374e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003750:	6a39      	ldr	r1, [r7, #32]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f9a8 	bl	8003aa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00d      	beq.n	800377a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	2b04      	cmp	r3, #4
 8003764:	d107      	bne.n	8003776 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003774:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e076      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d105      	bne.n	800378c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003780:	893b      	ldrh	r3, [r7, #8]
 8003782:	b2da      	uxtb	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	611a      	str	r2, [r3, #16]
 800378a:	e021      	b.n	80037d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800378c:	893b      	ldrh	r3, [r7, #8]
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	b29b      	uxth	r3, r3
 8003792:	b2da      	uxtb	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800379a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800379c:	6a39      	ldr	r1, [r7, #32]
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f982 	bl	8003aa8 <I2C_WaitOnTXEFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00d      	beq.n	80037c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d107      	bne.n	80037c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e050      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037c6:	893b      	ldrh	r3, [r7, #8]
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d2:	6a39      	ldr	r1, [r7, #32]
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f967 	bl	8003aa8 <I2C_WaitOnTXEFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00d      	beq.n	80037fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d107      	bne.n	80037f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e035      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800380a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800380c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	2200      	movs	r2, #0
 8003814:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f82b 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00d      	beq.n	8003840 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800382e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003832:	d103      	bne.n	800383c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800383a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e013      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003840:	897b      	ldrh	r3, [r7, #10]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	b2da      	uxtb	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003852:	6a3a      	ldr	r2, [r7, #32]
 8003854:	4906      	ldr	r1, [pc, #24]	@ (8003870 <I2C_RequestMemoryRead+0x1cc>)
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f886 	bl	8003968 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	00010002 	.word	0x00010002

08003874 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003884:	e048      	b.n	8003918 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388c:	d044      	beq.n	8003918 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388e:	f7fe fc2f 	bl	80020f0 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d302      	bcc.n	80038a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d139      	bne.n	8003918 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	0c1b      	lsrs	r3, r3, #16
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d10d      	bne.n	80038ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	43da      	mvns	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	4013      	ands	r3, r2
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf0c      	ite	eq
 80038c0:	2301      	moveq	r3, #1
 80038c2:	2300      	movne	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	461a      	mov	r2, r3
 80038c8:	e00c      	b.n	80038e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	43da      	mvns	r2, r3
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	4013      	ands	r3, r2
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	bf0c      	ite	eq
 80038dc:	2301      	moveq	r3, #1
 80038de:	2300      	movne	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d116      	bne.n	8003918 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003904:	f043 0220 	orr.w	r2, r3, #32
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e023      	b.n	8003960 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	0c1b      	lsrs	r3, r3, #16
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b01      	cmp	r3, #1
 8003920:	d10d      	bne.n	800393e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	43da      	mvns	r2, r3
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	4013      	ands	r3, r2
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	bf0c      	ite	eq
 8003934:	2301      	moveq	r3, #1
 8003936:	2300      	movne	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	461a      	mov	r2, r3
 800393c:	e00c      	b.n	8003958 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	43da      	mvns	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	4013      	ands	r3, r2
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	bf0c      	ite	eq
 8003950:	2301      	moveq	r3, #1
 8003952:	2300      	movne	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	461a      	mov	r2, r3
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	429a      	cmp	r2, r3
 800395c:	d093      	beq.n	8003886 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003976:	e071      	b.n	8003a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003982:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003986:	d123      	bne.n	80039d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003996:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039bc:	f043 0204 	orr.w	r2, r3, #4
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e067      	b.n	8003aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d6:	d041      	beq.n	8003a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d8:	f7fe fb8a 	bl	80020f0 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d302      	bcc.n	80039ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d136      	bne.n	8003a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	0c1b      	lsrs	r3, r3, #16
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d10c      	bne.n	8003a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	43da      	mvns	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4013      	ands	r3, r2
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	bf14      	ite	ne
 8003a0a:	2301      	movne	r3, #1
 8003a0c:	2300      	moveq	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	e00b      	b.n	8003a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	43da      	mvns	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bf14      	ite	ne
 8003a24:	2301      	movne	r3, #1
 8003a26:	2300      	moveq	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d016      	beq.n	8003a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a48:	f043 0220 	orr.w	r2, r3, #32
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e021      	b.n	8003aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	0c1b      	lsrs	r3, r3, #16
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d10c      	bne.n	8003a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	43da      	mvns	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	4013      	ands	r3, r2
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	bf14      	ite	ne
 8003a78:	2301      	movne	r3, #1
 8003a7a:	2300      	moveq	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	e00b      	b.n	8003a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	43da      	mvns	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bf14      	ite	ne
 8003a92:	2301      	movne	r3, #1
 8003a94:	2300      	moveq	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f47f af6d 	bne.w	8003978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ab4:	e034      	b.n	8003b20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f8e3 	bl	8003c82 <I2C_IsAcknowledgeFailed>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e034      	b.n	8003b30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003acc:	d028      	beq.n	8003b20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ace:	f7fe fb0f 	bl	80020f0 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d302      	bcc.n	8003ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d11d      	bne.n	8003b20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aee:	2b80      	cmp	r3, #128	@ 0x80
 8003af0:	d016      	beq.n	8003b20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	f043 0220 	orr.w	r2, r3, #32
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e007      	b.n	8003b30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2a:	2b80      	cmp	r3, #128	@ 0x80
 8003b2c:	d1c3      	bne.n	8003ab6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b44:	e034      	b.n	8003bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f89b 	bl	8003c82 <I2C_IsAcknowledgeFailed>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e034      	b.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5c:	d028      	beq.n	8003bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5e:	f7fe fac7 	bl	80020f0 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d302      	bcc.n	8003b74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d11d      	bne.n	8003bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d016      	beq.n	8003bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9c:	f043 0220 	orr.w	r2, r3, #32
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e007      	b.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d1c3      	bne.n	8003b46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bd4:	e049      	b.n	8003c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b10      	cmp	r3, #16
 8003be2:	d119      	bne.n	8003c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0210 	mvn.w	r2, #16
 8003bec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e030      	b.n	8003c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c18:	f7fe fa6a 	bl	80020f0 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d302      	bcc.n	8003c2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d11d      	bne.n	8003c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c38:	2b40      	cmp	r3, #64	@ 0x40
 8003c3a:	d016      	beq.n	8003c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	f043 0220 	orr.w	r2, r3, #32
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e007      	b.n	8003c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c74:	2b40      	cmp	r3, #64	@ 0x40
 8003c76:	d1ae      	bne.n	8003bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c98:	d11b      	bne.n	8003cd2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ca2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	f043 0204 	orr.w	r2, r3, #4
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e101      	b.n	8003ef6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d106      	bne.n	8003d12 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f007 fa2f 	bl	800b170 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2203      	movs	r2, #3
 8003d16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d20:	d102      	bne.n	8003d28 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f003 fe16 	bl	800795e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	7c1a      	ldrb	r2, [r3, #16]
 8003d3a:	f88d 2000 	strb.w	r2, [sp]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d42:	f003 fcf5 	bl	8007730 <USB_CoreInit>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0ce      	b.n	8003ef6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f003 fe0e 	bl	8007980 <USB_SetCurrentMode>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e0bf      	b.n	8003ef6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d76:	2300      	movs	r3, #0
 8003d78:	73fb      	strb	r3, [r7, #15]
 8003d7a:	e04a      	b.n	8003e12 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d7c:	7bfa      	ldrb	r2, [r7, #15]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	3315      	adds	r3, #21
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d90:	7bfa      	ldrb	r2, [r7, #15]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	3314      	adds	r3, #20
 8003da0:	7bfa      	ldrb	r2, [r7, #15]
 8003da2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003da4:	7bfa      	ldrb	r2, [r7, #15]
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	b298      	uxth	r0, r3
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	332e      	adds	r3, #46	@ 0x2e
 8003db8:	4602      	mov	r2, r0
 8003dba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003dbc:	7bfa      	ldrb	r2, [r7, #15]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	3318      	adds	r3, #24
 8003dcc:	2200      	movs	r2, #0
 8003dce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003dd0:	7bfa      	ldrb	r2, [r7, #15]
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	4413      	add	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	331c      	adds	r3, #28
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003de4:	7bfa      	ldrb	r2, [r7, #15]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	3320      	adds	r3, #32
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003df8:	7bfa      	ldrb	r2, [r7, #15]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	3324      	adds	r3, #36	@ 0x24
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	791b      	ldrb	r3, [r3, #4]
 8003e16:	7bfa      	ldrb	r2, [r7, #15]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d3af      	bcc.n	8003d7c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	73fb      	strb	r3, [r7, #15]
 8003e20:	e044      	b.n	8003eac <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e22:	7bfa      	ldrb	r2, [r7, #15]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e38:	7bfa      	ldrb	r2, [r7, #15]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003e4a:	7bfa      	ldrb	r2, [r7, #15]
 8003e4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e4e:	7bfa      	ldrb	r2, [r7, #15]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003e60:	2200      	movs	r2, #0
 8003e62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e64:	7bfa      	ldrb	r2, [r7, #15]
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e7a:	7bfa      	ldrb	r2, [r7, #15]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e90:	7bfa      	ldrb	r2, [r7, #15]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	791b      	ldrb	r3, [r3, #4]
 8003eb0:	7bfa      	ldrb	r2, [r7, #15]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d3b5      	bcc.n	8003e22 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	7c1a      	ldrb	r2, [r3, #16]
 8003ebe:	f88d 2000 	strb.w	r2, [sp]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ec6:	f003 fda7 	bl	8007a18 <USB_DevInit>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e00c      	b.n	8003ef6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f004 fdf1 	bl	8008ad6 <USB_DevDisconnect>

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_PCD_Start+0x1c>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e022      	b.n	8003f60 <HAL_PCD_Start+0x62>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d105      	bne.n	8003f42 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f003 fcf8 	bl	800793c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f004 fd9f 	bl	8008a94 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f68:	b590      	push	{r4, r7, lr}
 8003f6a:	b08d      	sub	sp, #52	@ 0x34
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f004 fe5d 	bl	8008c3e <USB_GetMode>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f040 848c 	bne.w	80048a4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f004 fdc1 	bl	8008b18 <USB_ReadInterrupts>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8482 	beq.w	80048a2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	0a1b      	lsrs	r3, r3, #8
 8003fa8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f004 fdae 	bl	8008b18 <USB_ReadInterrupts>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d107      	bne.n	8003fd6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f002 0202 	and.w	r2, r2, #2
 8003fd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f004 fd9c 	bl	8008b18 <USB_ReadInterrupts>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	2b10      	cmp	r3, #16
 8003fe8:	d161      	bne.n	80040ae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699a      	ldr	r2, [r3, #24]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0210 	bic.w	r2, r2, #16
 8003ff8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	f003 020f 	and.w	r2, r3, #15
 8004006:	4613      	mov	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	4413      	add	r3, r2
 8004016:	3304      	adds	r3, #4
 8004018:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	0c5b      	lsrs	r3, r3, #17
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	2b02      	cmp	r3, #2
 8004024:	d124      	bne.n	8004070 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800402c:	4013      	ands	r3, r2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d035      	beq.n	800409e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800403c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004040:	b29b      	uxth	r3, r3
 8004042:	461a      	mov	r2, r3
 8004044:	6a38      	ldr	r0, [r7, #32]
 8004046:	f004 fbd3 	bl	80087f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004056:	441a      	add	r2, r3
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	695a      	ldr	r2, [r3, #20]
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	091b      	lsrs	r3, r3, #4
 8004064:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004068:	441a      	add	r2, r3
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	615a      	str	r2, [r3, #20]
 800406e:	e016      	b.n	800409e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	0c5b      	lsrs	r3, r3, #17
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	2b06      	cmp	r3, #6
 800407a:	d110      	bne.n	800409e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004082:	2208      	movs	r2, #8
 8004084:	4619      	mov	r1, r3
 8004086:	6a38      	ldr	r0, [r7, #32]
 8004088:	f004 fbb2 	bl	80087f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	695a      	ldr	r2, [r3, #20]
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	091b      	lsrs	r3, r3, #4
 8004094:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004098:	441a      	add	r2, r3
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699a      	ldr	r2, [r3, #24]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0210 	orr.w	r2, r2, #16
 80040ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f004 fd30 	bl	8008b18 <USB_ReadInterrupts>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040c2:	f040 80a7 	bne.w	8004214 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f004 fd35 	bl	8008b3e <USB_ReadDevAllOutEpInterrupt>
 80040d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80040d6:	e099      	b.n	800420c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80040d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 808e 	beq.w	8004200 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	4611      	mov	r1, r2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f004 fd59 	bl	8008ba6 <USB_ReadDevOutEPInterrupt>
 80040f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00c      	beq.n	800411a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800410c:	461a      	mov	r2, r3
 800410e:	2301      	movs	r3, #1
 8004110:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004112:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 fea3 	bl	8004e60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00c      	beq.n	800413e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004130:	461a      	mov	r2, r3
 8004132:	2308      	movs	r3, #8
 8004134:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004136:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 ff79 	bl	8005030 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004154:	461a      	mov	r2, r3
 8004156:	2310      	movs	r3, #16
 8004158:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d030      	beq.n	80041c6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416c:	2b80      	cmp	r3, #128	@ 0x80
 800416e:	d109      	bne.n	8004184 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	69fa      	ldr	r2, [r7, #28]
 800417a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800417e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004182:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004186:	4613      	mov	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	4413      	add	r3, r2
 8004196:	3304      	adds	r3, #4
 8004198:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	78db      	ldrb	r3, [r3, #3]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d108      	bne.n	80041b4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2200      	movs	r2, #0
 80041a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	4619      	mov	r1, r3
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f007 f8da 	bl	800b368 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80041b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c0:	461a      	mov	r2, r3
 80041c2:	2302      	movs	r3, #2
 80041c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041dc:	461a      	mov	r2, r3
 80041de:	2320      	movs	r3, #32
 80041e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d009      	beq.n	8004200 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80041ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f8:	461a      	mov	r2, r3
 80041fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004202:	3301      	adds	r3, #1
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004208:	085b      	lsrs	r3, r3, #1
 800420a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800420c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420e:	2b00      	cmp	r3, #0
 8004210:	f47f af62 	bne.w	80040d8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f004 fc7d 	bl	8008b18 <USB_ReadInterrupts>
 800421e:	4603      	mov	r3, r0
 8004220:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004224:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004228:	f040 80db 	bne.w	80043e2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f004 fc9e 	bl	8008b72 <USB_ReadDevAllInEpInterrupt>
 8004236:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800423c:	e0cd      	b.n	80043da <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800423e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 80c2 	beq.w	80043ce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	4611      	mov	r1, r2
 8004254:	4618      	mov	r0, r3
 8004256:	f004 fcc4 	bl	8008be2 <USB_ReadDevInEPInterrupt>
 800425a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d057      	beq.n	8004316 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	2201      	movs	r2, #1
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800427a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	43db      	mvns	r3, r3
 8004280:	69f9      	ldr	r1, [r7, #28]
 8004282:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004286:	4013      	ands	r3, r2
 8004288:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004296:	461a      	mov	r2, r3
 8004298:	2301      	movs	r3, #1
 800429a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	799b      	ldrb	r3, [r3, #6]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d132      	bne.n	800430a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a8:	4613      	mov	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	3320      	adds	r3, #32
 80042b4:	6819      	ldr	r1, [r3, #0]
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ba:	4613      	mov	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4403      	add	r3, r0
 80042c4:	331c      	adds	r3, #28
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4419      	add	r1, r3
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ce:	4613      	mov	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4403      	add	r3, r0
 80042d8:	3320      	adds	r3, #32
 80042da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80042dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d113      	bne.n	800430a <HAL_PCD_IRQHandler+0x3a2>
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e6:	4613      	mov	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	3324      	adds	r3, #36	@ 0x24
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d108      	bne.n	800430a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6818      	ldr	r0, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004302:	461a      	mov	r2, r3
 8004304:	2101      	movs	r1, #1
 8004306:	f004 fccb 	bl	8008ca0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	b2db      	uxtb	r3, r3
 800430e:	4619      	mov	r1, r3
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f006 ffae 	bl	800b272 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800432c:	461a      	mov	r2, r3
 800432e:	2308      	movs	r3, #8
 8004330:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800433c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004348:	461a      	mov	r2, r3
 800434a:	2310      	movs	r3, #16
 800434c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004354:	2b00      	cmp	r3, #0
 8004356:	d008      	beq.n	800436a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004364:	461a      	mov	r2, r3
 8004366:	2340      	movs	r3, #64	@ 0x40
 8004368:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d023      	beq.n	80043bc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004374:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004376:	6a38      	ldr	r0, [r7, #32]
 8004378:	f003 fcb2 	bl	8007ce0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800437c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800437e:	4613      	mov	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	3310      	adds	r3, #16
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	4413      	add	r3, r2
 800438c:	3304      	adds	r3, #4
 800438e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	78db      	ldrb	r3, [r3, #3]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d108      	bne.n	80043aa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2200      	movs	r2, #0
 800439c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	4619      	mov	r1, r3
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f006 fff1 	bl	800b38c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043b6:	461a      	mov	r2, r3
 80043b8:	2302      	movs	r3, #2
 80043ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80043c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 fcbd 	bl	8004d48 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80043ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d0:	3301      	adds	r3, #1
 80043d2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80043d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d6:	085b      	lsrs	r3, r3, #1
 80043d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80043da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f47f af2e 	bne.w	800423e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f004 fb96 	bl	8008b18 <USB_ReadInterrupts>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043f6:	d122      	bne.n	800443e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004412:	2b01      	cmp	r3, #1
 8004414:	d108      	bne.n	8004428 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800441e:	2100      	movs	r1, #0
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fea3 	bl	800516c <HAL_PCDEx_LPM_Callback>
 8004426:	e002      	b.n	800442e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f006 ff8f 	bl	800b34c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695a      	ldr	r2, [r3, #20]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800443c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f004 fb68 	bl	8008b18 <USB_ReadInterrupts>
 8004448:	4603      	mov	r3, r0
 800444a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800444e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004452:	d112      	bne.n	800447a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b01      	cmp	r3, #1
 8004462:	d102      	bne.n	800446a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f006 ff4b 	bl	800b300 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695a      	ldr	r2, [r3, #20]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004478:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f004 fb4a 	bl	8008b18 <USB_ReadInterrupts>
 8004484:	4603      	mov	r3, r0
 8004486:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800448a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800448e:	f040 80b7 	bne.w	8004600 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044a0:	f023 0301 	bic.w	r3, r3, #1
 80044a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2110      	movs	r1, #16
 80044ac:	4618      	mov	r0, r3
 80044ae:	f003 fc17 	bl	8007ce0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044b2:	2300      	movs	r3, #0
 80044b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044b6:	e046      	b.n	8004546 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80044b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044c4:	461a      	mov	r2, r3
 80044c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80044ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80044cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044dc:	0151      	lsls	r1, r2, #5
 80044de:	69fa      	ldr	r2, [r7, #28]
 80044e0:	440a      	add	r2, r1
 80044e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80044ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80044ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f8:	461a      	mov	r2, r3
 80044fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80044fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004510:	0151      	lsls	r1, r2, #5
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	440a      	add	r2, r1
 8004516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800451a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800451e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004530:	0151      	lsls	r1, r2, #5
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	440a      	add	r2, r1
 8004536:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800453a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800453e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004542:	3301      	adds	r3, #1
 8004544:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	791b      	ldrb	r3, [r3, #4]
 800454a:	461a      	mov	r2, r3
 800454c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454e:	4293      	cmp	r3, r2
 8004550:	d3b2      	bcc.n	80044b8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	69fa      	ldr	r2, [r7, #28]
 800455c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004560:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004564:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	7bdb      	ldrb	r3, [r3, #15]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d016      	beq.n	800459c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800457e:	f043 030b 	orr.w	r3, r3, #11
 8004582:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800458c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004594:	f043 030b 	orr.w	r3, r3, #11
 8004598:	6453      	str	r3, [r2, #68]	@ 0x44
 800459a:	e015      	b.n	80045c8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80045ae:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80045b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	69fa      	ldr	r2, [r7, #28]
 80045be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045c2:	f043 030b 	orr.w	r3, r3, #11
 80045c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80045da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80045ea:	461a      	mov	r2, r3
 80045ec:	f004 fb58 	bl	8008ca0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695a      	ldr	r2, [r3, #20]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80045fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f004 fa87 	bl	8008b18 <USB_ReadInterrupts>
 800460a:	4603      	mov	r3, r0
 800460c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004614:	d123      	bne.n	800465e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f004 fb1d 	bl	8008c5a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f003 fbd4 	bl	8007dd2 <USB_GetDevSpeed>
 800462a:	4603      	mov	r3, r0
 800462c:	461a      	mov	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681c      	ldr	r4, [r3, #0]
 8004636:	f001 f9c9 	bl	80059cc <HAL_RCC_GetHCLKFreq>
 800463a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004640:	461a      	mov	r2, r3
 8004642:	4620      	mov	r0, r4
 8004644:	f003 f8d8 	bl	80077f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f006 fe3a 	bl	800b2c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695a      	ldr	r2, [r3, #20]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800465c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f004 fa58 	bl	8008b18 <USB_ReadInterrupts>
 8004668:	4603      	mov	r3, r0
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b08      	cmp	r3, #8
 8004670:	d10a      	bne.n	8004688 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f006 fe17 	bl	800b2a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695a      	ldr	r2, [r3, #20]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f002 0208 	and.w	r2, r2, #8
 8004686:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f004 fa43 	bl	8008b18 <USB_ReadInterrupts>
 8004692:	4603      	mov	r3, r0
 8004694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004698:	2b80      	cmp	r3, #128	@ 0x80
 800469a:	d123      	bne.n	80046e4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046a8:	2301      	movs	r3, #1
 80046aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ac:	e014      	b.n	80046d8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b2:	4613      	mov	r3, r2
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d105      	bne.n	80046d2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80046c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	4619      	mov	r1, r3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fb0a 	bl	8004ce6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	3301      	adds	r3, #1
 80046d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	791b      	ldrb	r3, [r3, #4]
 80046dc:	461a      	mov	r2, r3
 80046de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d3e4      	bcc.n	80046ae <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f004 fa15 	bl	8008b18 <USB_ReadInterrupts>
 80046ee:	4603      	mov	r3, r0
 80046f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046f8:	d13c      	bne.n	8004774 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046fa:	2301      	movs	r3, #1
 80046fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80046fe:	e02b      	b.n	8004758 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004714:	4613      	mov	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	3318      	adds	r3, #24
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d115      	bne.n	8004752 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004726:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004728:	2b00      	cmp	r3, #0
 800472a:	da12      	bge.n	8004752 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004730:	4613      	mov	r3, r2
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	4413      	add	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	3317      	adds	r3, #23
 800473c:	2201      	movs	r2, #1
 800473e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004742:	b2db      	uxtb	r3, r3
 8004744:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004748:	b2db      	uxtb	r3, r3
 800474a:	4619      	mov	r1, r3
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 faca 	bl	8004ce6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004754:	3301      	adds	r3, #1
 8004756:	627b      	str	r3, [r7, #36]	@ 0x24
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	791b      	ldrb	r3, [r3, #4]
 800475c:	461a      	mov	r2, r3
 800475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004760:	4293      	cmp	r3, r2
 8004762:	d3cd      	bcc.n	8004700 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695a      	ldr	r2, [r3, #20]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004772:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f004 f9cd 	bl	8008b18 <USB_ReadInterrupts>
 800477e:	4603      	mov	r3, r0
 8004780:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004784:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004788:	d156      	bne.n	8004838 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800478a:	2301      	movs	r3, #1
 800478c:	627b      	str	r3, [r7, #36]	@ 0x24
 800478e:	e045      	b.n	800481c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a4:	4613      	mov	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d12e      	bne.n	8004816 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80047b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	da2b      	bge.n	8004816 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80047ca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d121      	bne.n	8004816 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d6:	4613      	mov	r3, r2
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80047e4:	2201      	movs	r2, #1
 80047e6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10a      	bne.n	8004816 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800480e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004812:	6053      	str	r3, [r2, #4]
            break;
 8004814:	e008      	b.n	8004828 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004818:	3301      	adds	r3, #1
 800481a:	627b      	str	r3, [r7, #36]	@ 0x24
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	791b      	ldrb	r3, [r3, #4]
 8004820:	461a      	mov	r2, r3
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	4293      	cmp	r3, r2
 8004826:	d3b3      	bcc.n	8004790 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695a      	ldr	r2, [r3, #20]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004836:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f004 f96b 	bl	8008b18 <USB_ReadInterrupts>
 8004842:	4603      	mov	r3, r0
 8004844:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800484c:	d10a      	bne.n	8004864 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f006 fdae 	bl	800b3b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f004 f955 	bl	8008b18 <USB_ReadInterrupts>
 800486e:	4603      	mov	r3, r0
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b04      	cmp	r3, #4
 8004876:	d115      	bne.n	80048a4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f006 fd9e 	bl	800b3cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6859      	ldr	r1, [r3, #4]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	430a      	orrs	r2, r1
 800489e:	605a      	str	r2, [r3, #4]
 80048a0:	e000      	b.n	80048a4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80048a2:	bf00      	nop
    }
  }
}
 80048a4:	3734      	adds	r7, #52	@ 0x34
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd90      	pop	{r4, r7, pc}

080048aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b082      	sub	sp, #8
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	460b      	mov	r3, r1
 80048b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_PCD_SetAddress+0x1a>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e012      	b.n	80048ea <HAL_PCD_SetAddress+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	78fa      	ldrb	r2, [r7, #3]
 80048d0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	78fa      	ldrb	r2, [r7, #3]
 80048d8:	4611      	mov	r1, r2
 80048da:	4618      	mov	r0, r3
 80048dc:	f004 f8b4 	bl	8008a48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	4608      	mov	r0, r1
 80048fc:	4611      	mov	r1, r2
 80048fe:	461a      	mov	r2, r3
 8004900:	4603      	mov	r3, r0
 8004902:	70fb      	strb	r3, [r7, #3]
 8004904:	460b      	mov	r3, r1
 8004906:	803b      	strh	r3, [r7, #0]
 8004908:	4613      	mov	r3, r2
 800490a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004910:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004914:	2b00      	cmp	r3, #0
 8004916:	da0f      	bge.n	8004938 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	f003 020f 	and.w	r2, r3, #15
 800491e:	4613      	mov	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	4413      	add	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	3310      	adds	r3, #16
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	4413      	add	r3, r2
 800492c:	3304      	adds	r3, #4
 800492e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2201      	movs	r2, #1
 8004934:	705a      	strb	r2, [r3, #1]
 8004936:	e00f      	b.n	8004958 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	f003 020f 	and.w	r2, r3, #15
 800493e:	4613      	mov	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	4413      	add	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	4413      	add	r3, r2
 800494e:	3304      	adds	r3, #4
 8004950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	b2da      	uxtb	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004964:	883b      	ldrh	r3, [r7, #0]
 8004966:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	78ba      	ldrb	r2, [r7, #2]
 8004972:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	785b      	ldrb	r3, [r3, #1]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d004      	beq.n	8004986 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004986:	78bb      	ldrb	r3, [r7, #2]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d102      	bne.n	8004992 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_PCD_EP_Open+0xae>
 800499c:	2302      	movs	r3, #2
 800499e:	e00e      	b.n	80049be <HAL_PCD_EP_Open+0xcc>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68f9      	ldr	r1, [r7, #12]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f003 fa34 	bl	8007e1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80049bc:	7afb      	ldrb	r3, [r7, #11]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	460b      	mov	r3, r1
 80049d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	da0f      	bge.n	80049fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	f003 020f 	and.w	r2, r3, #15
 80049e0:	4613      	mov	r3, r2
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	4413      	add	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	3310      	adds	r3, #16
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	4413      	add	r3, r2
 80049ee:	3304      	adds	r3, #4
 80049f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2201      	movs	r2, #1
 80049f6:	705a      	strb	r2, [r3, #1]
 80049f8:	e00f      	b.n	8004a1a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	f003 020f 	and.w	r2, r3, #15
 8004a00:	4613      	mov	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	4413      	add	r3, r2
 8004a10:	3304      	adds	r3, #4
 8004a12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_PCD_EP_Close+0x6e>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e00e      	b.n	8004a52 <HAL_PCD_EP_Close+0x8c>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68f9      	ldr	r1, [r7, #12]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f003 fa72 	bl	8007f2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b086      	sub	sp, #24
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	60f8      	str	r0, [r7, #12]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
 8004a66:	460b      	mov	r3, r1
 8004a68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a6a:	7afb      	ldrb	r3, [r7, #11]
 8004a6c:	f003 020f 	and.w	r2, r3, #15
 8004a70:	4613      	mov	r3, r2
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	3304      	adds	r3, #4
 8004a82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2200      	movs	r2, #0
 8004a94:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a9c:	7afb      	ldrb	r3, [r7, #11]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	799b      	ldrb	r3, [r3, #6]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d102      	bne.n	8004ab6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	799b      	ldrb	r3, [r3, #6]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	6979      	ldr	r1, [r7, #20]
 8004ac2:	f003 fb0f 	bl	80080e4 <USB_EPStartXfer>

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	f003 020f 	and.w	r2, r3, #15
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	4413      	add	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004af2:	681b      	ldr	r3, [r3, #0]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b10:	7afb      	ldrb	r3, [r7, #11]
 8004b12:	f003 020f 	and.w	r2, r3, #15
 8004b16:	4613      	mov	r3, r2
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	3310      	adds	r3, #16
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4413      	add	r3, r2
 8004b24:	3304      	adds	r3, #4
 8004b26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2200      	movs	r2, #0
 8004b38:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b40:	7afb      	ldrb	r3, [r7, #11]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	799b      	ldrb	r3, [r3, #6]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d102      	bne.n	8004b5a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6818      	ldr	r0, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	799b      	ldrb	r3, [r3, #6]
 8004b62:	461a      	mov	r2, r3
 8004b64:	6979      	ldr	r1, [r7, #20]
 8004b66:	f003 fabd 	bl	80080e4 <USB_EPStartXfer>

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	7912      	ldrb	r2, [r2, #4]
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d901      	bls.n	8004b92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e04f      	b.n	8004c32 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	da0f      	bge.n	8004bba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	f003 020f 	and.w	r2, r3, #15
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	3310      	adds	r3, #16
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	4413      	add	r3, r2
 8004bae:	3304      	adds	r3, #4
 8004bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	705a      	strb	r2, [r3, #1]
 8004bb8:	e00d      	b.n	8004bd6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004bba:	78fa      	ldrb	r2, [r7, #3]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	4413      	add	r3, r2
 8004bcc:	3304      	adds	r3, #4
 8004bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_PCD_EP_SetStall+0x82>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e01d      	b.n	8004c32 <HAL_PCD_EP_SetStall+0xbe>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68f9      	ldr	r1, [r7, #12]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f003 fe4b 	bl	80088a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	f003 030f 	and.w	r3, r3, #15
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d109      	bne.n	8004c28 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	7999      	ldrb	r1, [r3, #6]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c22:	461a      	mov	r2, r3
 8004c24:	f004 f83c 	bl	8008ca0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	460b      	mov	r3, r1
 8004c44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	7912      	ldrb	r2, [r2, #4]
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d901      	bls.n	8004c58 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e042      	b.n	8004cde <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	da0f      	bge.n	8004c80 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	f003 020f 	and.w	r2, r3, #15
 8004c66:	4613      	mov	r3, r2
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	3310      	adds	r3, #16
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	4413      	add	r3, r2
 8004c74:	3304      	adds	r3, #4
 8004c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	705a      	strb	r2, [r3, #1]
 8004c7e:	e00f      	b.n	8004ca0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	f003 020f 	and.w	r2, r3, #15
 8004c86:	4613      	mov	r3, r2
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	4413      	add	r3, r2
 8004c96:	3304      	adds	r3, #4
 8004c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ca6:	78fb      	ldrb	r3, [r7, #3]
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_PCD_EP_ClrStall+0x86>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e00e      	b.n	8004cde <HAL_PCD_EP_ClrStall+0xa4>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68f9      	ldr	r1, [r7, #12]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f003 fe54 	bl	800897c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004cf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	da0c      	bge.n	8004d14 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cfa:	78fb      	ldrb	r3, [r7, #3]
 8004cfc:	f003 020f 	and.w	r2, r3, #15
 8004d00:	4613      	mov	r3, r2
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	3310      	adds	r3, #16
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	3304      	adds	r3, #4
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	e00c      	b.n	8004d2e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	f003 020f 	and.w	r2, r3, #15
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	4413      	add	r3, r2
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68f9      	ldr	r1, [r7, #12]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f003 fc73 	bl	8008620 <USB_EPStopXfer>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004d3e:	7afb      	ldrb	r3, [r7, #11]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08a      	sub	sp, #40	@ 0x28
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	4413      	add	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	3310      	adds	r3, #16
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	695a      	ldr	r2, [r3, #20]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d901      	bls.n	8004d80 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e06b      	b.n	8004e58 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d902      	bls.n	8004d9c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	3303      	adds	r3, #3
 8004da0:	089b      	lsrs	r3, r3, #2
 8004da2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004da4:	e02a      	b.n	8004dfc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	69fa      	ldr	r2, [r7, #28]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d902      	bls.n	8004dc2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	3303      	adds	r3, #3
 8004dc6:	089b      	lsrs	r3, r3, #2
 8004dc8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	68d9      	ldr	r1, [r3, #12]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	4603      	mov	r3, r0
 8004dde:	6978      	ldr	r0, [r7, #20]
 8004de0:	f003 fcc8 	bl	8008774 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	441a      	add	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	695a      	ldr	r2, [r3, #20]
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	441a      	add	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d809      	bhi.n	8004e26 <PCD_WriteEmptyTxFifo+0xde>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	695a      	ldr	r2, [r3, #20]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d203      	bcs.n	8004e26 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1bf      	bne.n	8004da6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	691a      	ldr	r2, [r3, #16]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d811      	bhi.n	8004e56 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	2201      	movs	r2, #1
 8004e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	6939      	ldr	r1, [r7, #16]
 8004e4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e52:	4013      	ands	r3, r2
 8004e54:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3720      	adds	r7, #32
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	333c      	adds	r3, #60	@ 0x3c
 8004e78:	3304      	adds	r3, #4
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	799b      	ldrb	r3, [r3, #6]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d17b      	bne.n	8004f8e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d015      	beq.n	8004ecc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	4a61      	ldr	r2, [pc, #388]	@ (8005028 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	f240 80b9 	bls.w	800501c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 80b3 	beq.w	800501c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ec8:	6093      	str	r3, [r2, #8]
 8004eca:	e0a7      	b.n	800501c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d009      	beq.n	8004eea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	2320      	movs	r3, #32
 8004ee6:	6093      	str	r3, [r2, #8]
 8004ee8:	e098      	b.n	800501c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f040 8093 	bne.w	800501c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	4a4b      	ldr	r2, [pc, #300]	@ (8005028 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d90f      	bls.n	8004f1e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f14:	461a      	mov	r2, r3
 8004f16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f1a:	6093      	str	r3, [r2, #8]
 8004f1c:	e07e      	b.n	800501c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	4613      	mov	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	4413      	add	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	4413      	add	r3, r2
 8004f30:	3304      	adds	r3, #4
 8004f32:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a1a      	ldr	r2, [r3, #32]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	0159      	lsls	r1, r3, #5
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	440b      	add	r3, r1
 8004f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f4a:	1ad2      	subs	r2, r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d114      	bne.n	8004f80 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d109      	bne.n	8004f72 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f68:	461a      	mov	r2, r3
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	f003 fe98 	bl	8008ca0 <USB_EP0_OutStart>
 8004f70:	e006      	b.n	8004f80 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	441a      	add	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	4619      	mov	r1, r3
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f006 f958 	bl	800b23c <HAL_PCD_DataOutStageCallback>
 8004f8c:	e046      	b.n	800501c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	4a26      	ldr	r2, [pc, #152]	@ (800502c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d124      	bne.n	8004fe0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fac:	461a      	mov	r2, r3
 8004fae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fb2:	6093      	str	r3, [r2, #8]
 8004fb4:	e032      	b.n	800501c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d008      	beq.n	8004fd2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fcc:	461a      	mov	r2, r3
 8004fce:	2320      	movs	r3, #32
 8004fd0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f006 f92f 	bl	800b23c <HAL_PCD_DataOutStageCallback>
 8004fde:	e01d      	b.n	800501c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d114      	bne.n	8005010 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	4613      	mov	r3, r2
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d108      	bne.n	8005010 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005008:	461a      	mov	r2, r3
 800500a:	2100      	movs	r1, #0
 800500c:	f003 fe48 	bl	8008ca0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	4619      	mov	r1, r3
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f006 f910 	bl	800b23c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3720      	adds	r7, #32
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	4f54300a 	.word	0x4f54300a
 800502c:	4f54310a 	.word	0x4f54310a

08005030 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	333c      	adds	r3, #60	@ 0x3c
 8005048:	3304      	adds	r3, #4
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4a15      	ldr	r2, [pc, #84]	@ (80050b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d90e      	bls.n	8005084 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800506c:	2b00      	cmp	r3, #0
 800506e:	d009      	beq.n	8005084 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800507c:	461a      	mov	r2, r3
 800507e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005082:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f006 f8c7 	bl	800b218 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4a0a      	ldr	r2, [pc, #40]	@ (80050b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d90c      	bls.n	80050ac <PCD_EP_OutSetupPacket_int+0x7c>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	799b      	ldrb	r3, [r3, #6]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d108      	bne.n	80050ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80050a4:	461a      	mov	r2, r3
 80050a6:	2101      	movs	r1, #1
 80050a8:	f003 fdfa 	bl	8008ca0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	4f54300a 	.word	0x4f54300a

080050bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	70fb      	strb	r3, [r7, #3]
 80050c8:	4613      	mov	r3, r2
 80050ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80050d4:	78fb      	ldrb	r3, [r7, #3]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d107      	bne.n	80050ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80050da:	883b      	ldrh	r3, [r7, #0]
 80050dc:	0419      	lsls	r1, r3, #16
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80050e8:	e028      	b.n	800513c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f0:	0c1b      	lsrs	r3, r3, #16
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	4413      	add	r3, r2
 80050f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80050f8:	2300      	movs	r3, #0
 80050fa:	73fb      	strb	r3, [r7, #15]
 80050fc:	e00d      	b.n	800511a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	7bfb      	ldrb	r3, [r7, #15]
 8005104:	3340      	adds	r3, #64	@ 0x40
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	0c1b      	lsrs	r3, r3, #16
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	4413      	add	r3, r2
 8005112:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	3301      	adds	r3, #1
 8005118:	73fb      	strb	r3, [r7, #15]
 800511a:	7bfa      	ldrb	r2, [r7, #15]
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	3b01      	subs	r3, #1
 8005120:	429a      	cmp	r2, r3
 8005122:	d3ec      	bcc.n	80050fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005124:	883b      	ldrh	r3, [r7, #0]
 8005126:	0418      	lsls	r0, r3, #16
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6819      	ldr	r1, [r3, #0]
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	3b01      	subs	r3, #1
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	4302      	orrs	r2, r0
 8005134:	3340      	adds	r3, #64	@ 0x40
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	460b      	mov	r3, r1
 8005154:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	887a      	ldrh	r2, [r7, #2]
 800515c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	460b      	mov	r3, r1
 8005176:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e267      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d075      	beq.n	800528e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80051a2:	4b88      	ldr	r3, [pc, #544]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 030c 	and.w	r3, r3, #12
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d00c      	beq.n	80051c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051ae:	4b85      	ldr	r3, [pc, #532]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d112      	bne.n	80051e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051ba:	4b82      	ldr	r3, [pc, #520]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051c6:	d10b      	bne.n	80051e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c8:	4b7e      	ldr	r3, [pc, #504]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d05b      	beq.n	800528c <HAL_RCC_OscConfig+0x108>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d157      	bne.n	800528c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e242      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051e8:	d106      	bne.n	80051f8 <HAL_RCC_OscConfig+0x74>
 80051ea:	4b76      	ldr	r3, [pc, #472]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a75      	ldr	r2, [pc, #468]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80051f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	e01d      	b.n	8005234 <HAL_RCC_OscConfig+0xb0>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005200:	d10c      	bne.n	800521c <HAL_RCC_OscConfig+0x98>
 8005202:	4b70      	ldr	r3, [pc, #448]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a6f      	ldr	r2, [pc, #444]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	4b6d      	ldr	r3, [pc, #436]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a6c      	ldr	r2, [pc, #432]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e00b      	b.n	8005234 <HAL_RCC_OscConfig+0xb0>
 800521c:	4b69      	ldr	r3, [pc, #420]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a68      	ldr	r2, [pc, #416]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	4b66      	ldr	r3, [pc, #408]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a65      	ldr	r2, [pc, #404]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 800522e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d013      	beq.n	8005264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523c:	f7fc ff58 	bl	80020f0 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005244:	f7fc ff54 	bl	80020f0 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b64      	cmp	r3, #100	@ 0x64
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e207      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005256:	4b5b      	ldr	r3, [pc, #364]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f0      	beq.n	8005244 <HAL_RCC_OscConfig+0xc0>
 8005262:	e014      	b.n	800528e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005264:	f7fc ff44 	bl	80020f0 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800526c:	f7fc ff40 	bl	80020f0 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b64      	cmp	r3, #100	@ 0x64
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e1f3      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800527e:	4b51      	ldr	r3, [pc, #324]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1f0      	bne.n	800526c <HAL_RCC_OscConfig+0xe8>
 800528a:	e000      	b.n	800528e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800528c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d063      	beq.n	8005362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800529a:	4b4a      	ldr	r3, [pc, #296]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00b      	beq.n	80052be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052a6:	4b47      	ldr	r3, [pc, #284]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d11c      	bne.n	80052ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052b2:	4b44      	ldr	r3, [pc, #272]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d116      	bne.n	80052ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052be:	4b41      	ldr	r3, [pc, #260]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d005      	beq.n	80052d6 <HAL_RCC_OscConfig+0x152>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d001      	beq.n	80052d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e1c7      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d6:	4b3b      	ldr	r3, [pc, #236]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	4937      	ldr	r1, [pc, #220]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ea:	e03a      	b.n	8005362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d020      	beq.n	8005336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052f4:	4b34      	ldr	r3, [pc, #208]	@ (80053c8 <HAL_RCC_OscConfig+0x244>)
 80052f6:	2201      	movs	r2, #1
 80052f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fa:	f7fc fef9 	bl	80020f0 <HAL_GetTick>
 80052fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005300:	e008      	b.n	8005314 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005302:	f7fc fef5 	bl	80020f0 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e1a8      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005314:	4b2b      	ldr	r3, [pc, #172]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0f0      	beq.n	8005302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005320:	4b28      	ldr	r3, [pc, #160]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	4925      	ldr	r1, [pc, #148]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005330:	4313      	orrs	r3, r2
 8005332:	600b      	str	r3, [r1, #0]
 8005334:	e015      	b.n	8005362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005336:	4b24      	ldr	r3, [pc, #144]	@ (80053c8 <HAL_RCC_OscConfig+0x244>)
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533c:	f7fc fed8 	bl	80020f0 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005344:	f7fc fed4 	bl	80020f0 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e187      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005356:	4b1b      	ldr	r3, [pc, #108]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f0      	bne.n	8005344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0308 	and.w	r3, r3, #8
 800536a:	2b00      	cmp	r3, #0
 800536c:	d036      	beq.n	80053dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d016      	beq.n	80053a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005376:	4b15      	ldr	r3, [pc, #84]	@ (80053cc <HAL_RCC_OscConfig+0x248>)
 8005378:	2201      	movs	r2, #1
 800537a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537c:	f7fc feb8 	bl	80020f0 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005384:	f7fc feb4 	bl	80020f0 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e167      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005396:	4b0b      	ldr	r3, [pc, #44]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0f0      	beq.n	8005384 <HAL_RCC_OscConfig+0x200>
 80053a2:	e01b      	b.n	80053dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053a4:	4b09      	ldr	r3, [pc, #36]	@ (80053cc <HAL_RCC_OscConfig+0x248>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053aa:	f7fc fea1 	bl	80020f0 <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053b0:	e00e      	b.n	80053d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053b2:	f7fc fe9d 	bl	80020f0 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d907      	bls.n	80053d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e150      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
 80053c4:	40023800 	.word	0x40023800
 80053c8:	42470000 	.word	0x42470000
 80053cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053d0:	4b88      	ldr	r3, [pc, #544]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80053d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1ea      	bne.n	80053b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 8097 	beq.w	8005518 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053ea:	2300      	movs	r3, #0
 80053ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ee:	4b81      	ldr	r3, [pc, #516]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80053f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10f      	bne.n	800541a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053fa:	2300      	movs	r3, #0
 80053fc:	60bb      	str	r3, [r7, #8]
 80053fe:	4b7d      	ldr	r3, [pc, #500]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005402:	4a7c      	ldr	r2, [pc, #496]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005408:	6413      	str	r3, [r2, #64]	@ 0x40
 800540a:	4b7a      	ldr	r3, [pc, #488]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005412:	60bb      	str	r3, [r7, #8]
 8005414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005416:	2301      	movs	r3, #1
 8005418:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800541a:	4b77      	ldr	r3, [pc, #476]	@ (80055f8 <HAL_RCC_OscConfig+0x474>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005422:	2b00      	cmp	r3, #0
 8005424:	d118      	bne.n	8005458 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005426:	4b74      	ldr	r3, [pc, #464]	@ (80055f8 <HAL_RCC_OscConfig+0x474>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a73      	ldr	r2, [pc, #460]	@ (80055f8 <HAL_RCC_OscConfig+0x474>)
 800542c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005432:	f7fc fe5d 	bl	80020f0 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800543a:	f7fc fe59 	bl	80020f0 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e10c      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800544c:	4b6a      	ldr	r3, [pc, #424]	@ (80055f8 <HAL_RCC_OscConfig+0x474>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0f0      	beq.n	800543a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d106      	bne.n	800546e <HAL_RCC_OscConfig+0x2ea>
 8005460:	4b64      	ldr	r3, [pc, #400]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005464:	4a63      	ldr	r2, [pc, #396]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005466:	f043 0301 	orr.w	r3, r3, #1
 800546a:	6713      	str	r3, [r2, #112]	@ 0x70
 800546c:	e01c      	b.n	80054a8 <HAL_RCC_OscConfig+0x324>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	2b05      	cmp	r3, #5
 8005474:	d10c      	bne.n	8005490 <HAL_RCC_OscConfig+0x30c>
 8005476:	4b5f      	ldr	r3, [pc, #380]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800547a:	4a5e      	ldr	r2, [pc, #376]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 800547c:	f043 0304 	orr.w	r3, r3, #4
 8005480:	6713      	str	r3, [r2, #112]	@ 0x70
 8005482:	4b5c      	ldr	r3, [pc, #368]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005486:	4a5b      	ldr	r2, [pc, #364]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005488:	f043 0301 	orr.w	r3, r3, #1
 800548c:	6713      	str	r3, [r2, #112]	@ 0x70
 800548e:	e00b      	b.n	80054a8 <HAL_RCC_OscConfig+0x324>
 8005490:	4b58      	ldr	r3, [pc, #352]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005494:	4a57      	ldr	r2, [pc, #348]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005496:	f023 0301 	bic.w	r3, r3, #1
 800549a:	6713      	str	r3, [r2, #112]	@ 0x70
 800549c:	4b55      	ldr	r3, [pc, #340]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 800549e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a0:	4a54      	ldr	r2, [pc, #336]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80054a2:	f023 0304 	bic.w	r3, r3, #4
 80054a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d015      	beq.n	80054dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b0:	f7fc fe1e 	bl	80020f0 <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b6:	e00a      	b.n	80054ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b8:	f7fc fe1a 	bl	80020f0 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e0cb      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ce:	4b49      	ldr	r3, [pc, #292]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80054d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0ee      	beq.n	80054b8 <HAL_RCC_OscConfig+0x334>
 80054da:	e014      	b.n	8005506 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054dc:	f7fc fe08 	bl	80020f0 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054e2:	e00a      	b.n	80054fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e4:	f7fc fe04 	bl	80020f0 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e0b5      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054fa:	4b3e      	ldr	r3, [pc, #248]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80054fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1ee      	bne.n	80054e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005506:	7dfb      	ldrb	r3, [r7, #23]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d105      	bne.n	8005518 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800550c:	4b39      	ldr	r3, [pc, #228]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 800550e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005510:	4a38      	ldr	r2, [pc, #224]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005516:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 80a1 	beq.w	8005664 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005522:	4b34      	ldr	r3, [pc, #208]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 030c 	and.w	r3, r3, #12
 800552a:	2b08      	cmp	r3, #8
 800552c:	d05c      	beq.n	80055e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	2b02      	cmp	r3, #2
 8005534:	d141      	bne.n	80055ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005536:	4b31      	ldr	r3, [pc, #196]	@ (80055fc <HAL_RCC_OscConfig+0x478>)
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553c:	f7fc fdd8 	bl	80020f0 <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005544:	f7fc fdd4 	bl	80020f0 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e087      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005556:	4b27      	ldr	r3, [pc, #156]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f0      	bne.n	8005544 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69da      	ldr	r2, [r3, #28]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005570:	019b      	lsls	r3, r3, #6
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005578:	085b      	lsrs	r3, r3, #1
 800557a:	3b01      	subs	r3, #1
 800557c:	041b      	lsls	r3, r3, #16
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005584:	061b      	lsls	r3, r3, #24
 8005586:	491b      	ldr	r1, [pc, #108]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005588:	4313      	orrs	r3, r2
 800558a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800558c:	4b1b      	ldr	r3, [pc, #108]	@ (80055fc <HAL_RCC_OscConfig+0x478>)
 800558e:	2201      	movs	r2, #1
 8005590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005592:	f7fc fdad 	bl	80020f0 <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005598:	e008      	b.n	80055ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800559a:	f7fc fda9 	bl	80020f0 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e05c      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ac:	4b11      	ldr	r3, [pc, #68]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0f0      	beq.n	800559a <HAL_RCC_OscConfig+0x416>
 80055b8:	e054      	b.n	8005664 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ba:	4b10      	ldr	r3, [pc, #64]	@ (80055fc <HAL_RCC_OscConfig+0x478>)
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c0:	f7fc fd96 	bl	80020f0 <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055c8:	f7fc fd92 	bl	80020f0 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e045      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055da:	4b06      	ldr	r3, [pc, #24]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1f0      	bne.n	80055c8 <HAL_RCC_OscConfig+0x444>
 80055e6:	e03d      	b.n	8005664 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d107      	bne.n	8005600 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e038      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
 80055f4:	40023800 	.word	0x40023800
 80055f8:	40007000 	.word	0x40007000
 80055fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005600:	4b1b      	ldr	r3, [pc, #108]	@ (8005670 <HAL_RCC_OscConfig+0x4ec>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d028      	beq.n	8005660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005618:	429a      	cmp	r2, r3
 800561a:	d121      	bne.n	8005660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005626:	429a      	cmp	r2, r3
 8005628:	d11a      	bne.n	8005660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005630:	4013      	ands	r3, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005638:	4293      	cmp	r3, r2
 800563a:	d111      	bne.n	8005660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005646:	085b      	lsrs	r3, r3, #1
 8005648:	3b01      	subs	r3, #1
 800564a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800564c:	429a      	cmp	r2, r3
 800564e:	d107      	bne.n	8005660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800565c:	429a      	cmp	r2, r3
 800565e:	d001      	beq.n	8005664 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e000      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40023800 	.word	0x40023800

08005674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e0cc      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005688:	4b68      	ldr	r3, [pc, #416]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d90c      	bls.n	80056b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005696:	4b65      	ldr	r3, [pc, #404]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800569e:	4b63      	ldr	r3, [pc, #396]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d001      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e0b8      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d020      	beq.n	80056fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d005      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056c8:	4b59      	ldr	r3, [pc, #356]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	4a58      	ldr	r2, [pc, #352]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80056d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056e0:	4b53      	ldr	r3, [pc, #332]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	4a52      	ldr	r2, [pc, #328]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80056ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056ec:	4b50      	ldr	r3, [pc, #320]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	494d      	ldr	r1, [pc, #308]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d044      	beq.n	8005794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d107      	bne.n	8005722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005712:	4b47      	ldr	r3, [pc, #284]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d119      	bne.n	8005752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e07f      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b02      	cmp	r3, #2
 8005728:	d003      	beq.n	8005732 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800572e:	2b03      	cmp	r3, #3
 8005730:	d107      	bne.n	8005742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005732:	4b3f      	ldr	r3, [pc, #252]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d109      	bne.n	8005752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e06f      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005742:	4b3b      	ldr	r3, [pc, #236]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e067      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005752:	4b37      	ldr	r3, [pc, #220]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f023 0203 	bic.w	r2, r3, #3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	4934      	ldr	r1, [pc, #208]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005760:	4313      	orrs	r3, r2
 8005762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005764:	f7fc fcc4 	bl	80020f0 <HAL_GetTick>
 8005768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800576a:	e00a      	b.n	8005782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800576c:	f7fc fcc0 	bl	80020f0 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800577a:	4293      	cmp	r3, r2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e04f      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005782:	4b2b      	ldr	r3, [pc, #172]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 020c 	and.w	r2, r3, #12
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	429a      	cmp	r2, r3
 8005792:	d1eb      	bne.n	800576c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005794:	4b25      	ldr	r3, [pc, #148]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d20c      	bcs.n	80057bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057a2:	4b22      	ldr	r3, [pc, #136]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057aa:	4b20      	ldr	r3, [pc, #128]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0307 	and.w	r3, r3, #7
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d001      	beq.n	80057bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e032      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057c8:	4b19      	ldr	r3, [pc, #100]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	4916      	ldr	r1, [pc, #88]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d009      	beq.n	80057fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057e6:	4b12      	ldr	r3, [pc, #72]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	490e      	ldr	r1, [pc, #56]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057fa:	f000 f821 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 80057fe:	4602      	mov	r2, r0
 8005800:	4b0b      	ldr	r3, [pc, #44]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	091b      	lsrs	r3, r3, #4
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	490a      	ldr	r1, [pc, #40]	@ (8005834 <HAL_RCC_ClockConfig+0x1c0>)
 800580c:	5ccb      	ldrb	r3, [r1, r3]
 800580e:	fa22 f303 	lsr.w	r3, r2, r3
 8005812:	4a09      	ldr	r2, [pc, #36]	@ (8005838 <HAL_RCC_ClockConfig+0x1c4>)
 8005814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005816:	4b09      	ldr	r3, [pc, #36]	@ (800583c <HAL_RCC_ClockConfig+0x1c8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f7fc fc24 	bl	8002068 <HAL_InitTick>

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	40023c00 	.word	0x40023c00
 8005830:	40023800 	.word	0x40023800
 8005834:	0800e9cc 	.word	0x0800e9cc
 8005838:	20000010 	.word	0x20000010
 800583c:	20000014 	.word	0x20000014

08005840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005844:	b090      	sub	sp, #64	@ 0x40
 8005846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005858:	4b59      	ldr	r3, [pc, #356]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 030c 	and.w	r3, r3, #12
 8005860:	2b08      	cmp	r3, #8
 8005862:	d00d      	beq.n	8005880 <HAL_RCC_GetSysClockFreq+0x40>
 8005864:	2b08      	cmp	r3, #8
 8005866:	f200 80a1 	bhi.w	80059ac <HAL_RCC_GetSysClockFreq+0x16c>
 800586a:	2b00      	cmp	r3, #0
 800586c:	d002      	beq.n	8005874 <HAL_RCC_GetSysClockFreq+0x34>
 800586e:	2b04      	cmp	r3, #4
 8005870:	d003      	beq.n	800587a <HAL_RCC_GetSysClockFreq+0x3a>
 8005872:	e09b      	b.n	80059ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005874:	4b53      	ldr	r3, [pc, #332]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005876:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005878:	e09b      	b.n	80059b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800587a:	4b53      	ldr	r3, [pc, #332]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800587c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800587e:	e098      	b.n	80059b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005880:	4b4f      	ldr	r3, [pc, #316]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005888:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800588a:	4b4d      	ldr	r3, [pc, #308]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d028      	beq.n	80058e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005896:	4b4a      	ldr	r3, [pc, #296]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	099b      	lsrs	r3, r3, #6
 800589c:	2200      	movs	r2, #0
 800589e:	623b      	str	r3, [r7, #32]
 80058a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80058a8:	2100      	movs	r1, #0
 80058aa:	4b47      	ldr	r3, [pc, #284]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80058ac:	fb03 f201 	mul.w	r2, r3, r1
 80058b0:	2300      	movs	r3, #0
 80058b2:	fb00 f303 	mul.w	r3, r0, r3
 80058b6:	4413      	add	r3, r2
 80058b8:	4a43      	ldr	r2, [pc, #268]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80058ba:	fba0 1202 	umull	r1, r2, r0, r2
 80058be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058c0:	460a      	mov	r2, r1
 80058c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80058c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058c6:	4413      	add	r3, r2
 80058c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058cc:	2200      	movs	r2, #0
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	61fa      	str	r2, [r7, #28]
 80058d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80058da:	f7fb f9dd 	bl	8000c98 <__aeabi_uldivmod>
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	4613      	mov	r3, r2
 80058e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058e6:	e053      	b.n	8005990 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058e8:	4b35      	ldr	r3, [pc, #212]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	099b      	lsrs	r3, r3, #6
 80058ee:	2200      	movs	r2, #0
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	617a      	str	r2, [r7, #20]
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80058fa:	f04f 0b00 	mov.w	fp, #0
 80058fe:	4652      	mov	r2, sl
 8005900:	465b      	mov	r3, fp
 8005902:	f04f 0000 	mov.w	r0, #0
 8005906:	f04f 0100 	mov.w	r1, #0
 800590a:	0159      	lsls	r1, r3, #5
 800590c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005910:	0150      	lsls	r0, r2, #5
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	ebb2 080a 	subs.w	r8, r2, sl
 800591a:	eb63 090b 	sbc.w	r9, r3, fp
 800591e:	f04f 0200 	mov.w	r2, #0
 8005922:	f04f 0300 	mov.w	r3, #0
 8005926:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800592a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800592e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005932:	ebb2 0408 	subs.w	r4, r2, r8
 8005936:	eb63 0509 	sbc.w	r5, r3, r9
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	f04f 0300 	mov.w	r3, #0
 8005942:	00eb      	lsls	r3, r5, #3
 8005944:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005948:	00e2      	lsls	r2, r4, #3
 800594a:	4614      	mov	r4, r2
 800594c:	461d      	mov	r5, r3
 800594e:	eb14 030a 	adds.w	r3, r4, sl
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	eb45 030b 	adc.w	r3, r5, fp
 8005958:	607b      	str	r3, [r7, #4]
 800595a:	f04f 0200 	mov.w	r2, #0
 800595e:	f04f 0300 	mov.w	r3, #0
 8005962:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005966:	4629      	mov	r1, r5
 8005968:	028b      	lsls	r3, r1, #10
 800596a:	4621      	mov	r1, r4
 800596c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005970:	4621      	mov	r1, r4
 8005972:	028a      	lsls	r2, r1, #10
 8005974:	4610      	mov	r0, r2
 8005976:	4619      	mov	r1, r3
 8005978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800597a:	2200      	movs	r2, #0
 800597c:	60bb      	str	r3, [r7, #8]
 800597e:	60fa      	str	r2, [r7, #12]
 8005980:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005984:	f7fb f988 	bl	8000c98 <__aeabi_uldivmod>
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	4613      	mov	r3, r2
 800598e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005990:	4b0b      	ldr	r3, [pc, #44]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	0c1b      	lsrs	r3, r3, #16
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	3301      	adds	r3, #1
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80059a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80059aa:	e002      	b.n	80059b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059ac:	4b05      	ldr	r3, [pc, #20]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80059ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80059b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3740      	adds	r7, #64	@ 0x40
 80059b8:	46bd      	mov	sp, r7
 80059ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059be:	bf00      	nop
 80059c0:	40023800 	.word	0x40023800
 80059c4:	00f42400 	.word	0x00f42400
 80059c8:	017d7840 	.word	0x017d7840

080059cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059d0:	4b03      	ldr	r3, [pc, #12]	@ (80059e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80059d2:	681b      	ldr	r3, [r3, #0]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	20000010 	.word	0x20000010

080059e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059e8:	f7ff fff0 	bl	80059cc <HAL_RCC_GetHCLKFreq>
 80059ec:	4602      	mov	r2, r0
 80059ee:	4b05      	ldr	r3, [pc, #20]	@ (8005a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	0a9b      	lsrs	r3, r3, #10
 80059f4:	f003 0307 	and.w	r3, r3, #7
 80059f8:	4903      	ldr	r1, [pc, #12]	@ (8005a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059fa:	5ccb      	ldrb	r3, [r1, r3]
 80059fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	40023800 	.word	0x40023800
 8005a08:	0800e9dc 	.word	0x0800e9dc

08005a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a10:	f7ff ffdc 	bl	80059cc <HAL_RCC_GetHCLKFreq>
 8005a14:	4602      	mov	r2, r0
 8005a16:	4b05      	ldr	r3, [pc, #20]	@ (8005a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	0b5b      	lsrs	r3, r3, #13
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	4903      	ldr	r1, [pc, #12]	@ (8005a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a22:	5ccb      	ldrb	r3, [r1, r3]
 8005a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	0800e9dc 	.word	0x0800e9dc

08005a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e041      	b.n	8005aca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fc f8d4 	bl	8001c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3304      	adds	r3, #4
 8005a70:	4619      	mov	r1, r3
 8005a72:	4610      	mov	r0, r2
 8005a74:	f000 fac0 	bl	8005ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e041      	b.n	8005b68 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d106      	bne.n	8005afe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f839 	bl	8005b70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2202      	movs	r2, #2
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	4619      	mov	r1, r3
 8005b10:	4610      	mov	r0, r2
 8005b12:	f000 fa71 	bl	8005ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d109      	bne.n	8005ba8 <HAL_TIM_PWM_Start+0x24>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	bf14      	ite	ne
 8005ba0:	2301      	movne	r3, #1
 8005ba2:	2300      	moveq	r3, #0
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	e022      	b.n	8005bee <HAL_TIM_PWM_Start+0x6a>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d109      	bne.n	8005bc2 <HAL_TIM_PWM_Start+0x3e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	bf14      	ite	ne
 8005bba:	2301      	movne	r3, #1
 8005bbc:	2300      	moveq	r3, #0
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	e015      	b.n	8005bee <HAL_TIM_PWM_Start+0x6a>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d109      	bne.n	8005bdc <HAL_TIM_PWM_Start+0x58>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	bf14      	ite	ne
 8005bd4:	2301      	movne	r3, #1
 8005bd6:	2300      	moveq	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	e008      	b.n	8005bee <HAL_TIM_PWM_Start+0x6a>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	bf14      	ite	ne
 8005be8:	2301      	movne	r3, #1
 8005bea:	2300      	moveq	r3, #0
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e068      	b.n	8005cc8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d104      	bne.n	8005c06 <HAL_TIM_PWM_Start+0x82>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c04:	e013      	b.n	8005c2e <HAL_TIM_PWM_Start+0xaa>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d104      	bne.n	8005c16 <HAL_TIM_PWM_Start+0x92>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c14:	e00b      	b.n	8005c2e <HAL_TIM_PWM_Start+0xaa>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d104      	bne.n	8005c26 <HAL_TIM_PWM_Start+0xa2>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c24:	e003      	b.n	8005c2e <HAL_TIM_PWM_Start+0xaa>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2201      	movs	r2, #1
 8005c34:	6839      	ldr	r1, [r7, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 fc90 	bl	800655c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a23      	ldr	r2, [pc, #140]	@ (8005cd0 <HAL_TIM_PWM_Start+0x14c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d107      	bne.n	8005c56 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a1d      	ldr	r2, [pc, #116]	@ (8005cd0 <HAL_TIM_PWM_Start+0x14c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d018      	beq.n	8005c92 <HAL_TIM_PWM_Start+0x10e>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c68:	d013      	beq.n	8005c92 <HAL_TIM_PWM_Start+0x10e>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a19      	ldr	r2, [pc, #100]	@ (8005cd4 <HAL_TIM_PWM_Start+0x150>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00e      	beq.n	8005c92 <HAL_TIM_PWM_Start+0x10e>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a17      	ldr	r2, [pc, #92]	@ (8005cd8 <HAL_TIM_PWM_Start+0x154>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d009      	beq.n	8005c92 <HAL_TIM_PWM_Start+0x10e>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a16      	ldr	r2, [pc, #88]	@ (8005cdc <HAL_TIM_PWM_Start+0x158>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d004      	beq.n	8005c92 <HAL_TIM_PWM_Start+0x10e>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a14      	ldr	r2, [pc, #80]	@ (8005ce0 <HAL_TIM_PWM_Start+0x15c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d111      	bne.n	8005cb6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b06      	cmp	r3, #6
 8005ca2:	d010      	beq.n	8005cc6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 0201 	orr.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb4:	e007      	b.n	8005cc6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f042 0201 	orr.w	r2, r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	40010000 	.word	0x40010000
 8005cd4:	40000400 	.word	0x40000400
 8005cd8:	40000800 	.word	0x40000800
 8005cdc:	40000c00 	.word	0x40000c00
 8005ce0:	40014000 	.word	0x40014000

08005ce4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e0ae      	b.n	8005e60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b0c      	cmp	r3, #12
 8005d0e:	f200 809f 	bhi.w	8005e50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d12:	a201      	add	r2, pc, #4	@ (adr r2, 8005d18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d18:	08005d4d 	.word	0x08005d4d
 8005d1c:	08005e51 	.word	0x08005e51
 8005d20:	08005e51 	.word	0x08005e51
 8005d24:	08005e51 	.word	0x08005e51
 8005d28:	08005d8d 	.word	0x08005d8d
 8005d2c:	08005e51 	.word	0x08005e51
 8005d30:	08005e51 	.word	0x08005e51
 8005d34:	08005e51 	.word	0x08005e51
 8005d38:	08005dcf 	.word	0x08005dcf
 8005d3c:	08005e51 	.word	0x08005e51
 8005d40:	08005e51 	.word	0x08005e51
 8005d44:	08005e51 	.word	0x08005e51
 8005d48:	08005e0f 	.word	0x08005e0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68b9      	ldr	r1, [r7, #8]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 f9dc 	bl	8006110 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0208 	orr.w	r2, r2, #8
 8005d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0204 	bic.w	r2, r2, #4
 8005d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6999      	ldr	r1, [r3, #24]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	691a      	ldr	r2, [r3, #16]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	619a      	str	r2, [r3, #24]
      break;
 8005d8a:	e064      	b.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68b9      	ldr	r1, [r7, #8]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 fa22 	bl	80061dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6999      	ldr	r1, [r3, #24]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	021a      	lsls	r2, r3, #8
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	619a      	str	r2, [r3, #24]
      break;
 8005dcc:	e043      	b.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68b9      	ldr	r1, [r7, #8]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 fa6d 	bl	80062b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69da      	ldr	r2, [r3, #28]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f042 0208 	orr.w	r2, r2, #8
 8005de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69da      	ldr	r2, [r3, #28]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0204 	bic.w	r2, r2, #4
 8005df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69d9      	ldr	r1, [r3, #28]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	691a      	ldr	r2, [r3, #16]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	61da      	str	r2, [r3, #28]
      break;
 8005e0c:	e023      	b.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68b9      	ldr	r1, [r7, #8]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 fab7 	bl	8006388 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69da      	ldr	r2, [r3, #28]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69da      	ldr	r2, [r3, #28]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69d9      	ldr	r1, [r3, #28]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	021a      	lsls	r2, r3, #8
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	61da      	str	r2, [r3, #28]
      break;
 8005e4e:	e002      	b.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	75fb      	strb	r3, [r7, #23]
      break;
 8005e54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3718      	adds	r7, #24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d101      	bne.n	8005e84 <HAL_TIM_ConfigClockSource+0x1c>
 8005e80:	2302      	movs	r3, #2
 8005e82:	e0b4      	b.n	8005fee <HAL_TIM_ConfigClockSource+0x186>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ebc:	d03e      	beq.n	8005f3c <HAL_TIM_ConfigClockSource+0xd4>
 8005ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ec2:	f200 8087 	bhi.w	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eca:	f000 8086 	beq.w	8005fda <HAL_TIM_ConfigClockSource+0x172>
 8005ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed2:	d87f      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed4:	2b70      	cmp	r3, #112	@ 0x70
 8005ed6:	d01a      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0xa6>
 8005ed8:	2b70      	cmp	r3, #112	@ 0x70
 8005eda:	d87b      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005edc:	2b60      	cmp	r3, #96	@ 0x60
 8005ede:	d050      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x11a>
 8005ee0:	2b60      	cmp	r3, #96	@ 0x60
 8005ee2:	d877      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee4:	2b50      	cmp	r3, #80	@ 0x50
 8005ee6:	d03c      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0xfa>
 8005ee8:	2b50      	cmp	r3, #80	@ 0x50
 8005eea:	d873      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005eec:	2b40      	cmp	r3, #64	@ 0x40
 8005eee:	d058      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x13a>
 8005ef0:	2b40      	cmp	r3, #64	@ 0x40
 8005ef2:	d86f      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef4:	2b30      	cmp	r3, #48	@ 0x30
 8005ef6:	d064      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ef8:	2b30      	cmp	r3, #48	@ 0x30
 8005efa:	d86b      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d060      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d867      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d05c      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f08:	2b10      	cmp	r3, #16
 8005f0a:	d05a      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f0c:	e062      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f1e:	f000 fafd 	bl	800651c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	609a      	str	r2, [r3, #8]
      break;
 8005f3a:	e04f      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f4c:	f000 fae6 	bl	800651c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f5e:	609a      	str	r2, [r3, #8]
      break;
 8005f60:	e03c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f000 fa5a 	bl	8006428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2150      	movs	r1, #80	@ 0x50
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 fab3 	bl	80064e6 <TIM_ITRx_SetConfig>
      break;
 8005f80:	e02c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f000 fa79 	bl	8006486 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2160      	movs	r1, #96	@ 0x60
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 faa3 	bl	80064e6 <TIM_ITRx_SetConfig>
      break;
 8005fa0:	e01c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fae:	461a      	mov	r2, r3
 8005fb0:	f000 fa3a 	bl	8006428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2140      	movs	r1, #64	@ 0x40
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fa93 	bl	80064e6 <TIM_ITRx_SetConfig>
      break;
 8005fc0:	e00c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4610      	mov	r0, r2
 8005fce:	f000 fa8a 	bl	80064e6 <TIM_ITRx_SetConfig>
      break;
 8005fd2:	e003      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd8:	e000      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a3a      	ldr	r2, [pc, #232]	@ (80060f4 <TIM_Base_SetConfig+0xfc>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d00f      	beq.n	8006030 <TIM_Base_SetConfig+0x38>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006016:	d00b      	beq.n	8006030 <TIM_Base_SetConfig+0x38>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a37      	ldr	r2, [pc, #220]	@ (80060f8 <TIM_Base_SetConfig+0x100>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d007      	beq.n	8006030 <TIM_Base_SetConfig+0x38>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a36      	ldr	r2, [pc, #216]	@ (80060fc <TIM_Base_SetConfig+0x104>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <TIM_Base_SetConfig+0x38>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a35      	ldr	r2, [pc, #212]	@ (8006100 <TIM_Base_SetConfig+0x108>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d108      	bne.n	8006042 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a2b      	ldr	r2, [pc, #172]	@ (80060f4 <TIM_Base_SetConfig+0xfc>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d01b      	beq.n	8006082 <TIM_Base_SetConfig+0x8a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006050:	d017      	beq.n	8006082 <TIM_Base_SetConfig+0x8a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a28      	ldr	r2, [pc, #160]	@ (80060f8 <TIM_Base_SetConfig+0x100>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d013      	beq.n	8006082 <TIM_Base_SetConfig+0x8a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a27      	ldr	r2, [pc, #156]	@ (80060fc <TIM_Base_SetConfig+0x104>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00f      	beq.n	8006082 <TIM_Base_SetConfig+0x8a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a26      	ldr	r2, [pc, #152]	@ (8006100 <TIM_Base_SetConfig+0x108>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00b      	beq.n	8006082 <TIM_Base_SetConfig+0x8a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a25      	ldr	r2, [pc, #148]	@ (8006104 <TIM_Base_SetConfig+0x10c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d007      	beq.n	8006082 <TIM_Base_SetConfig+0x8a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a24      	ldr	r2, [pc, #144]	@ (8006108 <TIM_Base_SetConfig+0x110>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d003      	beq.n	8006082 <TIM_Base_SetConfig+0x8a>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a23      	ldr	r2, [pc, #140]	@ (800610c <TIM_Base_SetConfig+0x114>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d108      	bne.n	8006094 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4313      	orrs	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a0e      	ldr	r2, [pc, #56]	@ (80060f4 <TIM_Base_SetConfig+0xfc>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d103      	bne.n	80060c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	691a      	ldr	r2, [r3, #16]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d105      	bne.n	80060e6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f023 0201 	bic.w	r2, r3, #1
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	611a      	str	r2, [r3, #16]
  }
}
 80060e6:	bf00      	nop
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40010000 	.word	0x40010000
 80060f8:	40000400 	.word	0x40000400
 80060fc:	40000800 	.word	0x40000800
 8006100:	40000c00 	.word	0x40000c00
 8006104:	40014000 	.word	0x40014000
 8006108:	40014400 	.word	0x40014400
 800610c:	40014800 	.word	0x40014800

08006110 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	f023 0201 	bic.w	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800613e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0303 	bic.w	r3, r3, #3
 8006146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f023 0302 	bic.w	r3, r3, #2
 8006158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4313      	orrs	r3, r2
 8006162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a1c      	ldr	r2, [pc, #112]	@ (80061d8 <TIM_OC1_SetConfig+0xc8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d10c      	bne.n	8006186 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f023 0308 	bic.w	r3, r3, #8
 8006172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f023 0304 	bic.w	r3, r3, #4
 8006184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a13      	ldr	r2, [pc, #76]	@ (80061d8 <TIM_OC1_SetConfig+0xc8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d111      	bne.n	80061b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800619c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	621a      	str	r2, [r3, #32]
}
 80061cc:	bf00      	nop
 80061ce:	371c      	adds	r7, #28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	40010000 	.word	0x40010000

080061dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	f023 0210 	bic.w	r2, r3, #16
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800620a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	021b      	lsls	r3, r3, #8
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f023 0320 	bic.w	r3, r3, #32
 8006226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a1e      	ldr	r2, [pc, #120]	@ (80062b0 <TIM_OC2_SetConfig+0xd4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d10d      	bne.n	8006258 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	4313      	orrs	r3, r2
 800624e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006256:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a15      	ldr	r2, [pc, #84]	@ (80062b0 <TIM_OC2_SetConfig+0xd4>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d113      	bne.n	8006288 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006266:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800626e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	621a      	str	r2, [r3, #32]
}
 80062a2:	bf00      	nop
 80062a4:	371c      	adds	r7, #28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	40010000 	.word	0x40010000

080062b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0303 	bic.w	r3, r3, #3
 80062ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	4313      	orrs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a1d      	ldr	r2, [pc, #116]	@ (8006384 <TIM_OC3_SetConfig+0xd0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d10d      	bne.n	800632e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	021b      	lsls	r3, r3, #8
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800632c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a14      	ldr	r2, [pc, #80]	@ (8006384 <TIM_OC3_SetConfig+0xd0>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d113      	bne.n	800635e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800633c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	4313      	orrs	r3, r2
 800635c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	621a      	str	r2, [r3, #32]
}
 8006378:	bf00      	nop
 800637a:	371c      	adds	r7, #28
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	40010000 	.word	0x40010000

08006388 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	021b      	lsls	r3, r3, #8
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	031b      	lsls	r3, r3, #12
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a10      	ldr	r2, [pc, #64]	@ (8006424 <TIM_OC4_SetConfig+0x9c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d109      	bne.n	80063fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	019b      	lsls	r3, r3, #6
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	621a      	str	r2, [r3, #32]
}
 8006416:	bf00      	nop
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	40010000 	.word	0x40010000

08006428 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	f023 0201 	bic.w	r2, r3, #1
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	011b      	lsls	r3, r3, #4
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4313      	orrs	r3, r2
 800645c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f023 030a 	bic.w	r3, r3, #10
 8006464:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4313      	orrs	r3, r2
 800646c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	621a      	str	r2, [r3, #32]
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006486:	b480      	push	{r7}
 8006488:	b087      	sub	sp, #28
 800648a:	af00      	add	r7, sp, #0
 800648c:	60f8      	str	r0, [r7, #12]
 800648e:	60b9      	str	r1, [r7, #8]
 8006490:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	f023 0210 	bic.w	r2, r3, #16
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	031b      	lsls	r3, r3, #12
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	621a      	str	r2, [r3, #32]
}
 80064da:	bf00      	nop
 80064dc:	371c      	adds	r7, #28
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b085      	sub	sp, #20
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4313      	orrs	r3, r2
 8006504:	f043 0307 	orr.w	r3, r3, #7
 8006508:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	609a      	str	r2, [r3, #8]
}
 8006510:	bf00      	nop
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
 8006528:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006536:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	021a      	lsls	r2, r3, #8
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	431a      	orrs	r2, r3
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4313      	orrs	r3, r2
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	4313      	orrs	r3, r2
 8006548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	609a      	str	r2, [r3, #8]
}
 8006550:	bf00      	nop
 8006552:	371c      	adds	r7, #28
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f003 031f 	and.w	r3, r3, #31
 800656e:	2201      	movs	r2, #1
 8006570:	fa02 f303 	lsl.w	r3, r2, r3
 8006574:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6a1a      	ldr	r2, [r3, #32]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	43db      	mvns	r3, r3
 800657e:	401a      	ands	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6a1a      	ldr	r2, [r3, #32]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f003 031f 	and.w	r3, r3, #31
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	fa01 f303 	lsl.w	r3, r1, r3
 8006594:	431a      	orrs	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	621a      	str	r2, [r3, #32]
}
 800659a:	bf00      	nop
 800659c:	371c      	adds	r7, #28
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
	...

080065a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065bc:	2302      	movs	r3, #2
 80065be:	e050      	b.n	8006662 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2202      	movs	r2, #2
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006670 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d018      	beq.n	8006636 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800660c:	d013      	beq.n	8006636 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a18      	ldr	r2, [pc, #96]	@ (8006674 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d00e      	beq.n	8006636 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a16      	ldr	r2, [pc, #88]	@ (8006678 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d009      	beq.n	8006636 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a15      	ldr	r2, [pc, #84]	@ (800667c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d004      	beq.n	8006636 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a13      	ldr	r2, [pc, #76]	@ (8006680 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d10c      	bne.n	8006650 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800663c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	4313      	orrs	r3, r2
 8006646:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	40010000 	.word	0x40010000
 8006674:	40000400 	.word	0x40000400
 8006678:	40000800 	.word	0x40000800
 800667c:	40000c00 	.word	0x40000c00
 8006680:	40014000 	.word	0x40014000

08006684 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e042      	b.n	800671c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d106      	bne.n	80066b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7fb fb24 	bl	8001cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2224      	movs	r2, #36	@ 0x24
 80066b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fdbd 	bl	8007248 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	691a      	ldr	r2, [r3, #16]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	695a      	ldr	r2, [r3, #20]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2220      	movs	r2, #32
 8006708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2220      	movs	r2, #32
 8006710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b08a      	sub	sp, #40	@ 0x28
 8006728:	af02      	add	r7, sp, #8
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	4613      	mov	r3, r2
 8006732:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b20      	cmp	r3, #32
 8006742:	d175      	bne.n	8006830 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <HAL_UART_Transmit+0x2c>
 800674a:	88fb      	ldrh	r3, [r7, #6]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e06e      	b.n	8006832 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2221      	movs	r2, #33	@ 0x21
 800675e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006762:	f7fb fcc5 	bl	80020f0 <HAL_GetTick>
 8006766:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	88fa      	ldrh	r2, [r7, #6]
 800676c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	88fa      	ldrh	r2, [r7, #6]
 8006772:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800677c:	d108      	bne.n	8006790 <HAL_UART_Transmit+0x6c>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d104      	bne.n	8006790 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006786:	2300      	movs	r3, #0
 8006788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	61bb      	str	r3, [r7, #24]
 800678e:	e003      	b.n	8006798 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006794:	2300      	movs	r3, #0
 8006796:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006798:	e02e      	b.n	80067f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2200      	movs	r2, #0
 80067a2:	2180      	movs	r1, #128	@ 0x80
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 fb1f 	bl	8006de8 <UART_WaitOnFlagUntilTimeout>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d005      	beq.n	80067bc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e03a      	b.n	8006832 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10b      	bne.n	80067da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	3302      	adds	r3, #2
 80067d6:	61bb      	str	r3, [r7, #24]
 80067d8:	e007      	b.n	80067ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	781a      	ldrb	r2, [r3, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	3301      	adds	r3, #1
 80067e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1cb      	bne.n	800679a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2200      	movs	r2, #0
 800680a:	2140      	movs	r1, #64	@ 0x40
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f000 faeb 	bl	8006de8 <UART_WaitOnFlagUntilTimeout>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d005      	beq.n	8006824 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2220      	movs	r2, #32
 800681c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e006      	b.n	8006832 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2220      	movs	r2, #32
 8006828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800682c:	2300      	movs	r3, #0
 800682e:	e000      	b.n	8006832 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006830:	2302      	movs	r3, #2
  }
}
 8006832:	4618      	mov	r0, r3
 8006834:	3720      	adds	r7, #32
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	60f8      	str	r0, [r7, #12]
 8006842:	60b9      	str	r1, [r7, #8]
 8006844:	4613      	mov	r3, r2
 8006846:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b20      	cmp	r3, #32
 8006852:	d112      	bne.n	800687a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <HAL_UART_Receive_IT+0x26>
 800685a:	88fb      	ldrh	r3, [r7, #6]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e00b      	b.n	800687c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800686a:	88fb      	ldrh	r3, [r7, #6]
 800686c:	461a      	mov	r2, r3
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 fb12 	bl	8006e9a <UART_Start_Receive_IT>
 8006876:	4603      	mov	r3, r0
 8006878:	e000      	b.n	800687c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800687a:	2302      	movs	r3, #2
  }
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b0ba      	sub	sp, #232	@ 0xe8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ba:	f003 030f 	and.w	r3, r3, #15
 80068be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80068c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10f      	bne.n	80068ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ce:	f003 0320 	and.w	r3, r3, #32
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d009      	beq.n	80068ea <HAL_UART_IRQHandler+0x66>
 80068d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fbf2 	bl	80070cc <UART_Receive_IT>
      return;
 80068e8:	e25b      	b.n	8006da2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 80de 	beq.w	8006ab0 <HAL_UART_IRQHandler+0x22c>
 80068f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d106      	bne.n	800690e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006904:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 80d1 	beq.w	8006ab0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800690e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00b      	beq.n	8006932 <HAL_UART_IRQHandler+0xae>
 800691a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800691e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006922:	2b00      	cmp	r3, #0
 8006924:	d005      	beq.n	8006932 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800692a:	f043 0201 	orr.w	r2, r3, #1
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006936:	f003 0304 	and.w	r3, r3, #4
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <HAL_UART_IRQHandler+0xd2>
 800693e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d005      	beq.n	8006956 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800694e:	f043 0202 	orr.w	r2, r3, #2
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800695a:	f003 0302 	and.w	r3, r3, #2
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00b      	beq.n	800697a <HAL_UART_IRQHandler+0xf6>
 8006962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d005      	beq.n	800697a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006972:	f043 0204 	orr.w	r2, r3, #4
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800697a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800697e:	f003 0308 	and.w	r3, r3, #8
 8006982:	2b00      	cmp	r3, #0
 8006984:	d011      	beq.n	80069aa <HAL_UART_IRQHandler+0x126>
 8006986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800698a:	f003 0320 	and.w	r3, r3, #32
 800698e:	2b00      	cmp	r3, #0
 8006990:	d105      	bne.n	800699e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d005      	beq.n	80069aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069a2:	f043 0208 	orr.w	r2, r3, #8
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 81f2 	beq.w	8006d98 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069b8:	f003 0320 	and.w	r3, r3, #32
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d008      	beq.n	80069d2 <HAL_UART_IRQHandler+0x14e>
 80069c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069c4:	f003 0320 	and.w	r3, r3, #32
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fb7d 	bl	80070cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069dc:	2b40      	cmp	r3, #64	@ 0x40
 80069de:	bf0c      	ite	eq
 80069e0:	2301      	moveq	r3, #1
 80069e2:	2300      	movne	r3, #0
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d103      	bne.n	80069fe <HAL_UART_IRQHandler+0x17a>
 80069f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d04f      	beq.n	8006a9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fa85 	bl	8006f0e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a0e:	2b40      	cmp	r3, #64	@ 0x40
 8006a10:	d141      	bne.n	8006a96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3314      	adds	r3, #20
 8006a18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a20:	e853 3f00 	ldrex	r3, [r3]
 8006a24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3314      	adds	r3, #20
 8006a3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a4e:	e841 2300 	strex	r3, r2, [r1]
 8006a52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1d9      	bne.n	8006a12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d013      	beq.n	8006a8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a6a:	4a7e      	ldr	r2, [pc, #504]	@ (8006c64 <HAL_UART_IRQHandler+0x3e0>)
 8006a6c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fb ff5f 	bl	8002936 <HAL_DMA_Abort_IT>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d016      	beq.n	8006aac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a88:	4610      	mov	r0, r2
 8006a8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8c:	e00e      	b.n	8006aac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f994 	bl	8006dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a94:	e00a      	b.n	8006aac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f990 	bl	8006dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a9c:	e006      	b.n	8006aac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f98c 	bl	8006dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006aaa:	e175      	b.n	8006d98 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aac:	bf00      	nop
    return;
 8006aae:	e173      	b.n	8006d98 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	f040 814f 	bne.w	8006d58 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006abe:	f003 0310 	and.w	r3, r3, #16
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 8148 	beq.w	8006d58 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006acc:	f003 0310 	and.w	r3, r3, #16
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 8141 	beq.w	8006d58 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60bb      	str	r3, [r7, #8]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	60bb      	str	r3, [r7, #8]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	60bb      	str	r3, [r7, #8]
 8006aea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af6:	2b40      	cmp	r3, #64	@ 0x40
 8006af8:	f040 80b6 	bne.w	8006c68 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 8145 	beq.w	8006d9c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	f080 813e 	bcs.w	8006d9c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b32:	f000 8088 	beq.w	8006c46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	330c      	adds	r3, #12
 8006b3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	330c      	adds	r3, #12
 8006b5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006b62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1d9      	bne.n	8006b36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3314      	adds	r3, #20
 8006b88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b8c:	e853 3f00 	ldrex	r3, [r3]
 8006b90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b94:	f023 0301 	bic.w	r3, r3, #1
 8006b98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3314      	adds	r3, #20
 8006ba2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006ba6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006baa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006bae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006bb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e1      	bne.n	8006b82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3314      	adds	r3, #20
 8006bc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006bc8:	e853 3f00 	ldrex	r3, [r3]
 8006bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006bce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3314      	adds	r3, #20
 8006bde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006be2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006be4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006be8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006bf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e3      	bne.n	8006bbe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	330c      	adds	r3, #12
 8006c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c16:	f023 0310 	bic.w	r3, r3, #16
 8006c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	330c      	adds	r3, #12
 8006c24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006c28:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c2a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c30:	e841 2300 	strex	r3, r2, [r1]
 8006c34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e3      	bne.n	8006c04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fb fe08 	bl	8002856 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2202      	movs	r2, #2
 8006c4a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f8b7 	bl	8006dd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c62:	e09b      	b.n	8006d9c <HAL_UART_IRQHandler+0x518>
 8006c64:	08006fd5 	.word	0x08006fd5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 808e 	beq.w	8006da0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 8089 	beq.w	8006da0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	330c      	adds	r3, #12
 8006c94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c98:	e853 3f00 	ldrex	r3, [r3]
 8006c9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ca4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	330c      	adds	r3, #12
 8006cae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006cb2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006cb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cba:	e841 2300 	strex	r3, r2, [r1]
 8006cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e3      	bne.n	8006c8e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3314      	adds	r3, #20
 8006ccc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	623b      	str	r3, [r7, #32]
   return(result);
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	f023 0301 	bic.w	r3, r3, #1
 8006cdc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3314      	adds	r3, #20
 8006ce6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006cea:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e3      	bne.n	8006cc6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	330c      	adds	r3, #12
 8006d12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	e853 3f00 	ldrex	r3, [r3]
 8006d1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0310 	bic.w	r3, r3, #16
 8006d22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	330c      	adds	r3, #12
 8006d2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006d30:	61fa      	str	r2, [r7, #28]
 8006d32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d34:	69b9      	ldr	r1, [r7, #24]
 8006d36:	69fa      	ldr	r2, [r7, #28]
 8006d38:	e841 2300 	strex	r3, r2, [r1]
 8006d3c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1e3      	bne.n	8006d0c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f83d 	bl	8006dd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d56:	e023      	b.n	8006da0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d009      	beq.n	8006d78 <HAL_UART_IRQHandler+0x4f4>
 8006d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d003      	beq.n	8006d78 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f943 	bl	8006ffc <UART_Transmit_IT>
    return;
 8006d76:	e014      	b.n	8006da2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00e      	beq.n	8006da2 <HAL_UART_IRQHandler+0x51e>
 8006d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d008      	beq.n	8006da2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f983 	bl	800709c <UART_EndTransmit_IT>
    return;
 8006d96:	e004      	b.n	8006da2 <HAL_UART_IRQHandler+0x51e>
    return;
 8006d98:	bf00      	nop
 8006d9a:	e002      	b.n	8006da2 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d9c:	bf00      	nop
 8006d9e:	e000      	b.n	8006da2 <HAL_UART_IRQHandler+0x51e>
      return;
 8006da0:	bf00      	nop
  }
}
 8006da2:	37e8      	adds	r7, #232	@ 0xe8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	4613      	mov	r3, r2
 8006df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df8:	e03b      	b.n	8006e72 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e00:	d037      	beq.n	8006e72 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e02:	f7fb f975 	bl	80020f0 <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	6a3a      	ldr	r2, [r7, #32]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d302      	bcc.n	8006e18 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e12:	6a3b      	ldr	r3, [r7, #32]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e03a      	b.n	8006e92 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f003 0304 	and.w	r3, r3, #4
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d023      	beq.n	8006e72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b80      	cmp	r3, #128	@ 0x80
 8006e2e:	d020      	beq.n	8006e72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2b40      	cmp	r3, #64	@ 0x40
 8006e34:	d01d      	beq.n	8006e72 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	d116      	bne.n	8006e72 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006e44:	2300      	movs	r3, #0
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	617b      	str	r3, [r7, #20]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 f857 	bl	8006f0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2208      	movs	r2, #8
 8006e64:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e00f      	b.n	8006e92 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	bf0c      	ite	eq
 8006e82:	2301      	moveq	r3, #1
 8006e84:	2300      	movne	r3, #0
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	461a      	mov	r2, r3
 8006e8a:	79fb      	ldrb	r3, [r7, #7]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d0b4      	beq.n	8006dfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b085      	sub	sp, #20
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	60f8      	str	r0, [r7, #12]
 8006ea2:	60b9      	str	r1, [r7, #8]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	88fa      	ldrh	r2, [r7, #6]
 8006eb2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	88fa      	ldrh	r2, [r7, #6]
 8006eb8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2222      	movs	r2, #34	@ 0x22
 8006ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d007      	beq.n	8006ee0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68da      	ldr	r2, [r3, #12]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ede:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	695a      	ldr	r2, [r3, #20]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f042 0201 	orr.w	r2, r2, #1
 8006eee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f042 0220 	orr.w	r2, r2, #32
 8006efe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b095      	sub	sp, #84	@ 0x54
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	330c      	adds	r3, #12
 8006f1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f20:	e853 3f00 	ldrex	r3, [r3]
 8006f24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	330c      	adds	r3, #12
 8006f34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f36:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f3e:	e841 2300 	strex	r3, r2, [r1]
 8006f42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1e5      	bne.n	8006f16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	3314      	adds	r3, #20
 8006f50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	f023 0301 	bic.w	r3, r3, #1
 8006f60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	3314      	adds	r3, #20
 8006f68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e5      	bne.n	8006f4a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d119      	bne.n	8006fba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	330c      	adds	r3, #12
 8006f8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	f023 0310 	bic.w	r3, r3, #16
 8006f9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	330c      	adds	r3, #12
 8006fa4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fa6:	61ba      	str	r2, [r7, #24]
 8006fa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006faa:	6979      	ldr	r1, [r7, #20]
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1e5      	bne.n	8006f86 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006fc8:	bf00      	nop
 8006fca:	3754      	adds	r7, #84	@ 0x54
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f7ff fee4 	bl	8006dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ff4:	bf00      	nop
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b21      	cmp	r3, #33	@ 0x21
 800700e:	d13e      	bne.n	800708e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007018:	d114      	bne.n	8007044 <UART_Transmit_IT+0x48>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d110      	bne.n	8007044 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	461a      	mov	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007036:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	1c9a      	adds	r2, r3, #2
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	621a      	str	r2, [r3, #32]
 8007042:	e008      	b.n	8007056 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	1c59      	adds	r1, r3, #1
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	6211      	str	r1, [r2, #32]
 800704e:	781a      	ldrb	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800705a:	b29b      	uxth	r3, r3
 800705c:	3b01      	subs	r3, #1
 800705e:	b29b      	uxth	r3, r3
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	4619      	mov	r1, r3
 8007064:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10f      	bne.n	800708a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68da      	ldr	r2, [r3, #12]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007078:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007088:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	e000      	b.n	8007090 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800708e:	2302      	movs	r3, #2
  }
}
 8007090:	4618      	mov	r0, r3
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2220      	movs	r2, #32
 80070b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7ff fe73 	bl	8006da8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08c      	sub	sp, #48	@ 0x30
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b22      	cmp	r3, #34	@ 0x22
 80070de:	f040 80ae 	bne.w	800723e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070ea:	d117      	bne.n	800711c <UART_Receive_IT+0x50>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d113      	bne.n	800711c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070f4:	2300      	movs	r3, #0
 80070f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	b29b      	uxth	r3, r3
 8007106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800710a:	b29a      	uxth	r2, r3
 800710c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007114:	1c9a      	adds	r2, r3, #2
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	629a      	str	r2, [r3, #40]	@ 0x28
 800711a:	e026      	b.n	800716a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007120:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007122:	2300      	movs	r3, #0
 8007124:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800712e:	d007      	beq.n	8007140 <UART_Receive_IT+0x74>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10a      	bne.n	800714e <UART_Receive_IT+0x82>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d106      	bne.n	800714e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	b2da      	uxtb	r2, r3
 8007148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714a:	701a      	strb	r2, [r3, #0]
 800714c:	e008      	b.n	8007160 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	b2db      	uxtb	r3, r3
 8007156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800715a:	b2da      	uxtb	r2, r3
 800715c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800715e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007164:	1c5a      	adds	r2, r3, #1
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800716e:	b29b      	uxth	r3, r3
 8007170:	3b01      	subs	r3, #1
 8007172:	b29b      	uxth	r3, r3
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	4619      	mov	r1, r3
 8007178:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800717a:	2b00      	cmp	r3, #0
 800717c:	d15d      	bne.n	800723a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68da      	ldr	r2, [r3, #12]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 0220 	bic.w	r2, r2, #32
 800718c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68da      	ldr	r2, [r3, #12]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800719c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	695a      	ldr	r2, [r3, #20]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 0201 	bic.w	r2, r2, #1
 80071ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2220      	movs	r2, #32
 80071b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d135      	bne.n	8007230 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	330c      	adds	r3, #12
 80071d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	613b      	str	r3, [r7, #16]
   return(result);
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f023 0310 	bic.w	r3, r3, #16
 80071e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	330c      	adds	r3, #12
 80071e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ea:	623a      	str	r2, [r7, #32]
 80071ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	69f9      	ldr	r1, [r7, #28]
 80071f0:	6a3a      	ldr	r2, [r7, #32]
 80071f2:	e841 2300 	strex	r3, r2, [r1]
 80071f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1e5      	bne.n	80071ca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0310 	and.w	r3, r3, #16
 8007208:	2b10      	cmp	r3, #16
 800720a:	d10a      	bne.n	8007222 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800720c:	2300      	movs	r3, #0
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	60fb      	str	r3, [r7, #12]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7ff fdd1 	bl	8006dd0 <HAL_UARTEx_RxEventCallback>
 800722e:	e002      	b.n	8007236 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7fa fb11 	bl	8001858 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	e002      	b.n	8007240 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	e000      	b.n	8007240 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800723e:	2302      	movs	r3, #2
  }
}
 8007240:	4618      	mov	r0, r3
 8007242:	3730      	adds	r7, #48	@ 0x30
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800724c:	b0c0      	sub	sp, #256	@ 0x100
 800724e:	af00      	add	r7, sp, #0
 8007250:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007264:	68d9      	ldr	r1, [r3, #12]
 8007266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	ea40 0301 	orr.w	r3, r0, r1
 8007270:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007276:	689a      	ldr	r2, [r3, #8]
 8007278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	431a      	orrs	r2, r3
 8007280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	431a      	orrs	r2, r3
 8007288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	4313      	orrs	r3, r2
 8007290:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80072a0:	f021 010c 	bic.w	r1, r1, #12
 80072a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80072ae:	430b      	orrs	r3, r1
 80072b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80072be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072c2:	6999      	ldr	r1, [r3, #24]
 80072c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	ea40 0301 	orr.w	r3, r0, r1
 80072ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	4b8f      	ldr	r3, [pc, #572]	@ (8007514 <UART_SetConfig+0x2cc>)
 80072d8:	429a      	cmp	r2, r3
 80072da:	d005      	beq.n	80072e8 <UART_SetConfig+0xa0>
 80072dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	4b8d      	ldr	r3, [pc, #564]	@ (8007518 <UART_SetConfig+0x2d0>)
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d104      	bne.n	80072f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072e8:	f7fe fb90 	bl	8005a0c <HAL_RCC_GetPCLK2Freq>
 80072ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80072f0:	e003      	b.n	80072fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072f2:	f7fe fb77 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 80072f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007304:	f040 810c 	bne.w	8007520 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800730c:	2200      	movs	r2, #0
 800730e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007312:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007316:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800731a:	4622      	mov	r2, r4
 800731c:	462b      	mov	r3, r5
 800731e:	1891      	adds	r1, r2, r2
 8007320:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007322:	415b      	adcs	r3, r3
 8007324:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007326:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800732a:	4621      	mov	r1, r4
 800732c:	eb12 0801 	adds.w	r8, r2, r1
 8007330:	4629      	mov	r1, r5
 8007332:	eb43 0901 	adc.w	r9, r3, r1
 8007336:	f04f 0200 	mov.w	r2, #0
 800733a:	f04f 0300 	mov.w	r3, #0
 800733e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800734a:	4690      	mov	r8, r2
 800734c:	4699      	mov	r9, r3
 800734e:	4623      	mov	r3, r4
 8007350:	eb18 0303 	adds.w	r3, r8, r3
 8007354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007358:	462b      	mov	r3, r5
 800735a:	eb49 0303 	adc.w	r3, r9, r3
 800735e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800736e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007372:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007376:	460b      	mov	r3, r1
 8007378:	18db      	adds	r3, r3, r3
 800737a:	653b      	str	r3, [r7, #80]	@ 0x50
 800737c:	4613      	mov	r3, r2
 800737e:	eb42 0303 	adc.w	r3, r2, r3
 8007382:	657b      	str	r3, [r7, #84]	@ 0x54
 8007384:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007388:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800738c:	f7f9 fc84 	bl	8000c98 <__aeabi_uldivmod>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	4b61      	ldr	r3, [pc, #388]	@ (800751c <UART_SetConfig+0x2d4>)
 8007396:	fba3 2302 	umull	r2, r3, r3, r2
 800739a:	095b      	lsrs	r3, r3, #5
 800739c:	011c      	lsls	r4, r3, #4
 800739e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073a2:	2200      	movs	r2, #0
 80073a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80073ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80073b0:	4642      	mov	r2, r8
 80073b2:	464b      	mov	r3, r9
 80073b4:	1891      	adds	r1, r2, r2
 80073b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80073b8:	415b      	adcs	r3, r3
 80073ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80073c0:	4641      	mov	r1, r8
 80073c2:	eb12 0a01 	adds.w	sl, r2, r1
 80073c6:	4649      	mov	r1, r9
 80073c8:	eb43 0b01 	adc.w	fp, r3, r1
 80073cc:	f04f 0200 	mov.w	r2, #0
 80073d0:	f04f 0300 	mov.w	r3, #0
 80073d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073e0:	4692      	mov	sl, r2
 80073e2:	469b      	mov	fp, r3
 80073e4:	4643      	mov	r3, r8
 80073e6:	eb1a 0303 	adds.w	r3, sl, r3
 80073ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073ee:	464b      	mov	r3, r9
 80073f0:	eb4b 0303 	adc.w	r3, fp, r3
 80073f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007404:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007408:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800740c:	460b      	mov	r3, r1
 800740e:	18db      	adds	r3, r3, r3
 8007410:	643b      	str	r3, [r7, #64]	@ 0x40
 8007412:	4613      	mov	r3, r2
 8007414:	eb42 0303 	adc.w	r3, r2, r3
 8007418:	647b      	str	r3, [r7, #68]	@ 0x44
 800741a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800741e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007422:	f7f9 fc39 	bl	8000c98 <__aeabi_uldivmod>
 8007426:	4602      	mov	r2, r0
 8007428:	460b      	mov	r3, r1
 800742a:	4611      	mov	r1, r2
 800742c:	4b3b      	ldr	r3, [pc, #236]	@ (800751c <UART_SetConfig+0x2d4>)
 800742e:	fba3 2301 	umull	r2, r3, r3, r1
 8007432:	095b      	lsrs	r3, r3, #5
 8007434:	2264      	movs	r2, #100	@ 0x64
 8007436:	fb02 f303 	mul.w	r3, r2, r3
 800743a:	1acb      	subs	r3, r1, r3
 800743c:	00db      	lsls	r3, r3, #3
 800743e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007442:	4b36      	ldr	r3, [pc, #216]	@ (800751c <UART_SetConfig+0x2d4>)
 8007444:	fba3 2302 	umull	r2, r3, r3, r2
 8007448:	095b      	lsrs	r3, r3, #5
 800744a:	005b      	lsls	r3, r3, #1
 800744c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007450:	441c      	add	r4, r3
 8007452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007456:	2200      	movs	r2, #0
 8007458:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800745c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007460:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007464:	4642      	mov	r2, r8
 8007466:	464b      	mov	r3, r9
 8007468:	1891      	adds	r1, r2, r2
 800746a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800746c:	415b      	adcs	r3, r3
 800746e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007470:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007474:	4641      	mov	r1, r8
 8007476:	1851      	adds	r1, r2, r1
 8007478:	6339      	str	r1, [r7, #48]	@ 0x30
 800747a:	4649      	mov	r1, r9
 800747c:	414b      	adcs	r3, r1
 800747e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007480:	f04f 0200 	mov.w	r2, #0
 8007484:	f04f 0300 	mov.w	r3, #0
 8007488:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800748c:	4659      	mov	r1, fp
 800748e:	00cb      	lsls	r3, r1, #3
 8007490:	4651      	mov	r1, sl
 8007492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007496:	4651      	mov	r1, sl
 8007498:	00ca      	lsls	r2, r1, #3
 800749a:	4610      	mov	r0, r2
 800749c:	4619      	mov	r1, r3
 800749e:	4603      	mov	r3, r0
 80074a0:	4642      	mov	r2, r8
 80074a2:	189b      	adds	r3, r3, r2
 80074a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074a8:	464b      	mov	r3, r9
 80074aa:	460a      	mov	r2, r1
 80074ac:	eb42 0303 	adc.w	r3, r2, r3
 80074b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80074c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80074c8:	460b      	mov	r3, r1
 80074ca:	18db      	adds	r3, r3, r3
 80074cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074ce:	4613      	mov	r3, r2
 80074d0:	eb42 0303 	adc.w	r3, r2, r3
 80074d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80074da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80074de:	f7f9 fbdb 	bl	8000c98 <__aeabi_uldivmod>
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	4b0d      	ldr	r3, [pc, #52]	@ (800751c <UART_SetConfig+0x2d4>)
 80074e8:	fba3 1302 	umull	r1, r3, r3, r2
 80074ec:	095b      	lsrs	r3, r3, #5
 80074ee:	2164      	movs	r1, #100	@ 0x64
 80074f0:	fb01 f303 	mul.w	r3, r1, r3
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	00db      	lsls	r3, r3, #3
 80074f8:	3332      	adds	r3, #50	@ 0x32
 80074fa:	4a08      	ldr	r2, [pc, #32]	@ (800751c <UART_SetConfig+0x2d4>)
 80074fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007500:	095b      	lsrs	r3, r3, #5
 8007502:	f003 0207 	and.w	r2, r3, #7
 8007506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4422      	add	r2, r4
 800750e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007510:	e106      	b.n	8007720 <UART_SetConfig+0x4d8>
 8007512:	bf00      	nop
 8007514:	40011000 	.word	0x40011000
 8007518:	40011400 	.word	0x40011400
 800751c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007524:	2200      	movs	r2, #0
 8007526:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800752a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800752e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007532:	4642      	mov	r2, r8
 8007534:	464b      	mov	r3, r9
 8007536:	1891      	adds	r1, r2, r2
 8007538:	6239      	str	r1, [r7, #32]
 800753a:	415b      	adcs	r3, r3
 800753c:	627b      	str	r3, [r7, #36]	@ 0x24
 800753e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007542:	4641      	mov	r1, r8
 8007544:	1854      	adds	r4, r2, r1
 8007546:	4649      	mov	r1, r9
 8007548:	eb43 0501 	adc.w	r5, r3, r1
 800754c:	f04f 0200 	mov.w	r2, #0
 8007550:	f04f 0300 	mov.w	r3, #0
 8007554:	00eb      	lsls	r3, r5, #3
 8007556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800755a:	00e2      	lsls	r2, r4, #3
 800755c:	4614      	mov	r4, r2
 800755e:	461d      	mov	r5, r3
 8007560:	4643      	mov	r3, r8
 8007562:	18e3      	adds	r3, r4, r3
 8007564:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007568:	464b      	mov	r3, r9
 800756a:	eb45 0303 	adc.w	r3, r5, r3
 800756e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800757e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	f04f 0300 	mov.w	r3, #0
 800758a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800758e:	4629      	mov	r1, r5
 8007590:	008b      	lsls	r3, r1, #2
 8007592:	4621      	mov	r1, r4
 8007594:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007598:	4621      	mov	r1, r4
 800759a:	008a      	lsls	r2, r1, #2
 800759c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80075a0:	f7f9 fb7a 	bl	8000c98 <__aeabi_uldivmod>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	4b60      	ldr	r3, [pc, #384]	@ (800772c <UART_SetConfig+0x4e4>)
 80075aa:	fba3 2302 	umull	r2, r3, r3, r2
 80075ae:	095b      	lsrs	r3, r3, #5
 80075b0:	011c      	lsls	r4, r3, #4
 80075b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075b6:	2200      	movs	r2, #0
 80075b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80075bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80075c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80075c4:	4642      	mov	r2, r8
 80075c6:	464b      	mov	r3, r9
 80075c8:	1891      	adds	r1, r2, r2
 80075ca:	61b9      	str	r1, [r7, #24]
 80075cc:	415b      	adcs	r3, r3
 80075ce:	61fb      	str	r3, [r7, #28]
 80075d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075d4:	4641      	mov	r1, r8
 80075d6:	1851      	adds	r1, r2, r1
 80075d8:	6139      	str	r1, [r7, #16]
 80075da:	4649      	mov	r1, r9
 80075dc:	414b      	adcs	r3, r1
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	f04f 0200 	mov.w	r2, #0
 80075e4:	f04f 0300 	mov.w	r3, #0
 80075e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075ec:	4659      	mov	r1, fp
 80075ee:	00cb      	lsls	r3, r1, #3
 80075f0:	4651      	mov	r1, sl
 80075f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075f6:	4651      	mov	r1, sl
 80075f8:	00ca      	lsls	r2, r1, #3
 80075fa:	4610      	mov	r0, r2
 80075fc:	4619      	mov	r1, r3
 80075fe:	4603      	mov	r3, r0
 8007600:	4642      	mov	r2, r8
 8007602:	189b      	adds	r3, r3, r2
 8007604:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007608:	464b      	mov	r3, r9
 800760a:	460a      	mov	r2, r1
 800760c:	eb42 0303 	adc.w	r3, r2, r3
 8007610:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800761e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007620:	f04f 0200 	mov.w	r2, #0
 8007624:	f04f 0300 	mov.w	r3, #0
 8007628:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800762c:	4649      	mov	r1, r9
 800762e:	008b      	lsls	r3, r1, #2
 8007630:	4641      	mov	r1, r8
 8007632:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007636:	4641      	mov	r1, r8
 8007638:	008a      	lsls	r2, r1, #2
 800763a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800763e:	f7f9 fb2b 	bl	8000c98 <__aeabi_uldivmod>
 8007642:	4602      	mov	r2, r0
 8007644:	460b      	mov	r3, r1
 8007646:	4611      	mov	r1, r2
 8007648:	4b38      	ldr	r3, [pc, #224]	@ (800772c <UART_SetConfig+0x4e4>)
 800764a:	fba3 2301 	umull	r2, r3, r3, r1
 800764e:	095b      	lsrs	r3, r3, #5
 8007650:	2264      	movs	r2, #100	@ 0x64
 8007652:	fb02 f303 	mul.w	r3, r2, r3
 8007656:	1acb      	subs	r3, r1, r3
 8007658:	011b      	lsls	r3, r3, #4
 800765a:	3332      	adds	r3, #50	@ 0x32
 800765c:	4a33      	ldr	r2, [pc, #204]	@ (800772c <UART_SetConfig+0x4e4>)
 800765e:	fba2 2303 	umull	r2, r3, r2, r3
 8007662:	095b      	lsrs	r3, r3, #5
 8007664:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007668:	441c      	add	r4, r3
 800766a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800766e:	2200      	movs	r2, #0
 8007670:	673b      	str	r3, [r7, #112]	@ 0x70
 8007672:	677a      	str	r2, [r7, #116]	@ 0x74
 8007674:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007678:	4642      	mov	r2, r8
 800767a:	464b      	mov	r3, r9
 800767c:	1891      	adds	r1, r2, r2
 800767e:	60b9      	str	r1, [r7, #8]
 8007680:	415b      	adcs	r3, r3
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007688:	4641      	mov	r1, r8
 800768a:	1851      	adds	r1, r2, r1
 800768c:	6039      	str	r1, [r7, #0]
 800768e:	4649      	mov	r1, r9
 8007690:	414b      	adcs	r3, r1
 8007692:	607b      	str	r3, [r7, #4]
 8007694:	f04f 0200 	mov.w	r2, #0
 8007698:	f04f 0300 	mov.w	r3, #0
 800769c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076a0:	4659      	mov	r1, fp
 80076a2:	00cb      	lsls	r3, r1, #3
 80076a4:	4651      	mov	r1, sl
 80076a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076aa:	4651      	mov	r1, sl
 80076ac:	00ca      	lsls	r2, r1, #3
 80076ae:	4610      	mov	r0, r2
 80076b0:	4619      	mov	r1, r3
 80076b2:	4603      	mov	r3, r0
 80076b4:	4642      	mov	r2, r8
 80076b6:	189b      	adds	r3, r3, r2
 80076b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076ba:	464b      	mov	r3, r9
 80076bc:	460a      	mov	r2, r1
 80076be:	eb42 0303 	adc.w	r3, r2, r3
 80076c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80076ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80076d0:	f04f 0200 	mov.w	r2, #0
 80076d4:	f04f 0300 	mov.w	r3, #0
 80076d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80076dc:	4649      	mov	r1, r9
 80076de:	008b      	lsls	r3, r1, #2
 80076e0:	4641      	mov	r1, r8
 80076e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076e6:	4641      	mov	r1, r8
 80076e8:	008a      	lsls	r2, r1, #2
 80076ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80076ee:	f7f9 fad3 	bl	8000c98 <__aeabi_uldivmod>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	4b0d      	ldr	r3, [pc, #52]	@ (800772c <UART_SetConfig+0x4e4>)
 80076f8:	fba3 1302 	umull	r1, r3, r3, r2
 80076fc:	095b      	lsrs	r3, r3, #5
 80076fe:	2164      	movs	r1, #100	@ 0x64
 8007700:	fb01 f303 	mul.w	r3, r1, r3
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	011b      	lsls	r3, r3, #4
 8007708:	3332      	adds	r3, #50	@ 0x32
 800770a:	4a08      	ldr	r2, [pc, #32]	@ (800772c <UART_SetConfig+0x4e4>)
 800770c:	fba2 2303 	umull	r2, r3, r2, r3
 8007710:	095b      	lsrs	r3, r3, #5
 8007712:	f003 020f 	and.w	r2, r3, #15
 8007716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4422      	add	r2, r4
 800771e:	609a      	str	r2, [r3, #8]
}
 8007720:	bf00      	nop
 8007722:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007726:	46bd      	mov	sp, r7
 8007728:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800772c:	51eb851f 	.word	0x51eb851f

08007730 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007730:	b084      	sub	sp, #16
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	f107 001c 	add.w	r0, r7, #28
 800773e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007742:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007746:	2b01      	cmp	r3, #1
 8007748:	d123      	bne.n	8007792 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800774e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800775e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007772:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007776:	2b01      	cmp	r3, #1
 8007778:	d105      	bne.n	8007786 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f001 fae8 	bl	8008d5c <USB_CoreReset>
 800778c:	4603      	mov	r3, r0
 800778e:	73fb      	strb	r3, [r7, #15]
 8007790:	e01b      	b.n	80077ca <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f001 fadc 	bl	8008d5c <USB_CoreReset>
 80077a4:	4603      	mov	r3, r0
 80077a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80077a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d106      	bne.n	80077be <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80077bc:	e005      	b.n	80077ca <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80077ca:	7fbb      	ldrb	r3, [r7, #30]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d10b      	bne.n	80077e8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f043 0206 	orr.w	r2, r3, #6
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f043 0220 	orr.w	r2, r3, #32
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077f4:	b004      	add	sp, #16
 80077f6:	4770      	bx	lr

080077f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b087      	sub	sp, #28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	4613      	mov	r3, r2
 8007804:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007806:	79fb      	ldrb	r3, [r7, #7]
 8007808:	2b02      	cmp	r3, #2
 800780a:	d165      	bne.n	80078d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	4a41      	ldr	r2, [pc, #260]	@ (8007914 <USB_SetTurnaroundTime+0x11c>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d906      	bls.n	8007822 <USB_SetTurnaroundTime+0x2a>
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	4a40      	ldr	r2, [pc, #256]	@ (8007918 <USB_SetTurnaroundTime+0x120>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d202      	bcs.n	8007822 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800781c:	230f      	movs	r3, #15
 800781e:	617b      	str	r3, [r7, #20]
 8007820:	e062      	b.n	80078e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	4a3c      	ldr	r2, [pc, #240]	@ (8007918 <USB_SetTurnaroundTime+0x120>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d306      	bcc.n	8007838 <USB_SetTurnaroundTime+0x40>
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	4a3b      	ldr	r2, [pc, #236]	@ (800791c <USB_SetTurnaroundTime+0x124>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d202      	bcs.n	8007838 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007832:	230e      	movs	r3, #14
 8007834:	617b      	str	r3, [r7, #20]
 8007836:	e057      	b.n	80078e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	4a38      	ldr	r2, [pc, #224]	@ (800791c <USB_SetTurnaroundTime+0x124>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d306      	bcc.n	800784e <USB_SetTurnaroundTime+0x56>
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	4a37      	ldr	r2, [pc, #220]	@ (8007920 <USB_SetTurnaroundTime+0x128>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d202      	bcs.n	800784e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007848:	230d      	movs	r3, #13
 800784a:	617b      	str	r3, [r7, #20]
 800784c:	e04c      	b.n	80078e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	4a33      	ldr	r2, [pc, #204]	@ (8007920 <USB_SetTurnaroundTime+0x128>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d306      	bcc.n	8007864 <USB_SetTurnaroundTime+0x6c>
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	4a32      	ldr	r2, [pc, #200]	@ (8007924 <USB_SetTurnaroundTime+0x12c>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d802      	bhi.n	8007864 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800785e:	230c      	movs	r3, #12
 8007860:	617b      	str	r3, [r7, #20]
 8007862:	e041      	b.n	80078e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	4a2f      	ldr	r2, [pc, #188]	@ (8007924 <USB_SetTurnaroundTime+0x12c>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d906      	bls.n	800787a <USB_SetTurnaroundTime+0x82>
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	4a2e      	ldr	r2, [pc, #184]	@ (8007928 <USB_SetTurnaroundTime+0x130>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d802      	bhi.n	800787a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007874:	230b      	movs	r3, #11
 8007876:	617b      	str	r3, [r7, #20]
 8007878:	e036      	b.n	80078e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	4a2a      	ldr	r2, [pc, #168]	@ (8007928 <USB_SetTurnaroundTime+0x130>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d906      	bls.n	8007890 <USB_SetTurnaroundTime+0x98>
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	4a29      	ldr	r2, [pc, #164]	@ (800792c <USB_SetTurnaroundTime+0x134>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d802      	bhi.n	8007890 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800788a:	230a      	movs	r3, #10
 800788c:	617b      	str	r3, [r7, #20]
 800788e:	e02b      	b.n	80078e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	4a26      	ldr	r2, [pc, #152]	@ (800792c <USB_SetTurnaroundTime+0x134>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d906      	bls.n	80078a6 <USB_SetTurnaroundTime+0xae>
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4a25      	ldr	r2, [pc, #148]	@ (8007930 <USB_SetTurnaroundTime+0x138>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d202      	bcs.n	80078a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80078a0:	2309      	movs	r3, #9
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	e020      	b.n	80078e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	4a21      	ldr	r2, [pc, #132]	@ (8007930 <USB_SetTurnaroundTime+0x138>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d306      	bcc.n	80078bc <USB_SetTurnaroundTime+0xc4>
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	4a20      	ldr	r2, [pc, #128]	@ (8007934 <USB_SetTurnaroundTime+0x13c>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d802      	bhi.n	80078bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80078b6:	2308      	movs	r3, #8
 80078b8:	617b      	str	r3, [r7, #20]
 80078ba:	e015      	b.n	80078e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	4a1d      	ldr	r2, [pc, #116]	@ (8007934 <USB_SetTurnaroundTime+0x13c>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d906      	bls.n	80078d2 <USB_SetTurnaroundTime+0xda>
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	4a1c      	ldr	r2, [pc, #112]	@ (8007938 <USB_SetTurnaroundTime+0x140>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d202      	bcs.n	80078d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80078cc:	2307      	movs	r3, #7
 80078ce:	617b      	str	r3, [r7, #20]
 80078d0:	e00a      	b.n	80078e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80078d2:	2306      	movs	r3, #6
 80078d4:	617b      	str	r3, [r7, #20]
 80078d6:	e007      	b.n	80078e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80078d8:	79fb      	ldrb	r3, [r7, #7]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d102      	bne.n	80078e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80078de:	2309      	movs	r3, #9
 80078e0:	617b      	str	r3, [r7, #20]
 80078e2:	e001      	b.n	80078e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80078e4:	2309      	movs	r3, #9
 80078e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	029b      	lsls	r3, r3, #10
 80078fc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007900:	431a      	orrs	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	371c      	adds	r7, #28
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr
 8007914:	00d8acbf 	.word	0x00d8acbf
 8007918:	00e4e1c0 	.word	0x00e4e1c0
 800791c:	00f42400 	.word	0x00f42400
 8007920:	01067380 	.word	0x01067380
 8007924:	011a499f 	.word	0x011a499f
 8007928:	01312cff 	.word	0x01312cff
 800792c:	014ca43f 	.word	0x014ca43f
 8007930:	016e3600 	.word	0x016e3600
 8007934:	01a6ab1f 	.word	0x01a6ab1f
 8007938:	01e84800 	.word	0x01e84800

0800793c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f043 0201 	orr.w	r2, r3, #1
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f023 0201 	bic.w	r2, r3, #1
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	460b      	mov	r3, r1
 800798a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800799c:	78fb      	ldrb	r3, [r7, #3]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d115      	bne.n	80079ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80079ae:	200a      	movs	r0, #10
 80079b0:	f7fa fbaa 	bl	8002108 <HAL_Delay>
      ms += 10U;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	330a      	adds	r3, #10
 80079b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f001 f93f 	bl	8008c3e <USB_GetMode>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d01e      	beq.n	8007a04 <USB_SetCurrentMode+0x84>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80079ca:	d9f0      	bls.n	80079ae <USB_SetCurrentMode+0x2e>
 80079cc:	e01a      	b.n	8007a04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80079ce:	78fb      	ldrb	r3, [r7, #3]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d115      	bne.n	8007a00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80079e0:	200a      	movs	r0, #10
 80079e2:	f7fa fb91 	bl	8002108 <HAL_Delay>
      ms += 10U;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	330a      	adds	r3, #10
 80079ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f001 f926 	bl	8008c3e <USB_GetMode>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d005      	beq.n	8007a04 <USB_SetCurrentMode+0x84>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80079fc:	d9f0      	bls.n	80079e0 <USB_SetCurrentMode+0x60>
 80079fe:	e001      	b.n	8007a04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e005      	b.n	8007a10 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2bc8      	cmp	r3, #200	@ 0xc8
 8007a08:	d101      	bne.n	8007a0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e000      	b.n	8007a10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a18:	b084      	sub	sp, #16
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b086      	sub	sp, #24
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007a26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a32:	2300      	movs	r3, #0
 8007a34:	613b      	str	r3, [r7, #16]
 8007a36:	e009      	b.n	8007a4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	3340      	adds	r3, #64	@ 0x40
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	2200      	movs	r2, #0
 8007a44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	613b      	str	r3, [r7, #16]
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	2b0e      	cmp	r3, #14
 8007a50:	d9f2      	bls.n	8007a38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a52:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d11c      	bne.n	8007a94 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a68:	f043 0302 	orr.w	r3, r3, #2
 8007a6c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a72:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a7e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a8a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	639a      	str	r2, [r3, #56]	@ 0x38
 8007a92:	e00b      	b.n	8007aac <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a98:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ab8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d10d      	bne.n	8007adc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d104      	bne.n	8007ad2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ac8:	2100      	movs	r1, #0
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f968 	bl	8007da0 <USB_SetDevSpeed>
 8007ad0:	e008      	b.n	8007ae4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f963 	bl	8007da0 <USB_SetDevSpeed>
 8007ada:	e003      	b.n	8007ae4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007adc:	2103      	movs	r1, #3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f95e 	bl	8007da0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ae4:	2110      	movs	r1, #16
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f8fa 	bl	8007ce0 <USB_FlushTxFifo>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f924 	bl	8007d44 <USB_FlushRxFifo>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	2300      	movs	r3, #0
 8007b10:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b18:	461a      	mov	r2, r3
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b24:	461a      	mov	r2, r3
 8007b26:	2300      	movs	r3, #0
 8007b28:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	613b      	str	r3, [r7, #16]
 8007b2e:	e043      	b.n	8007bb8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b46:	d118      	bne.n	8007b7a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10a      	bne.n	8007b64 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007b60:	6013      	str	r3, [r2, #0]
 8007b62:	e013      	b.n	8007b8c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b70:	461a      	mov	r2, r3
 8007b72:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	e008      	b.n	8007b8c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b86:	461a      	mov	r2, r3
 8007b88:	2300      	movs	r3, #0
 8007b8a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b98:	461a      	mov	r2, r3
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007baa:	461a      	mov	r2, r3
 8007bac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007bb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	613b      	str	r3, [r7, #16]
 8007bb8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d3b5      	bcc.n	8007b30 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	613b      	str	r3, [r7, #16]
 8007bc8:	e043      	b.n	8007c52 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007be0:	d118      	bne.n	8007c14 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10a      	bne.n	8007bfe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007bfa:	6013      	str	r3, [r2, #0]
 8007bfc:	e013      	b.n	8007c26 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007c10:	6013      	str	r3, [r2, #0]
 8007c12:	e008      	b.n	8007c26 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c20:	461a      	mov	r2, r3
 8007c22:	2300      	movs	r3, #0
 8007c24:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c32:	461a      	mov	r2, r3
 8007c34:	2300      	movs	r3, #0
 8007c36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c44:	461a      	mov	r2, r3
 8007c46:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007c4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	613b      	str	r3, [r7, #16]
 8007c52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007c56:	461a      	mov	r2, r3
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d3b5      	bcc.n	8007bca <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c70:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007c7e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d105      	bne.n	8007c94 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	f043 0210 	orr.w	r2, r3, #16
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	699a      	ldr	r2, [r3, #24]
 8007c98:	4b10      	ldr	r3, [pc, #64]	@ (8007cdc <USB_DevInit+0x2c4>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ca0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d005      	beq.n	8007cb4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	f043 0208 	orr.w	r2, r3, #8
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007cb4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d107      	bne.n	8007ccc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007cc4:	f043 0304 	orr.w	r3, r3, #4
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3718      	adds	r7, #24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cd8:	b004      	add	sp, #16
 8007cda:	4770      	bx	lr
 8007cdc:	803c3800 	.word	0x803c3800

08007ce0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007cfa:	d901      	bls.n	8007d00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e01b      	b.n	8007d38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	daf2      	bge.n	8007cee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	019b      	lsls	r3, r3, #6
 8007d10:	f043 0220 	orr.w	r2, r3, #32
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d24:	d901      	bls.n	8007d2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e006      	b.n	8007d38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	f003 0320 	and.w	r3, r3, #32
 8007d32:	2b20      	cmp	r3, #32
 8007d34:	d0f0      	beq.n	8007d18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3301      	adds	r3, #1
 8007d54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d5c:	d901      	bls.n	8007d62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e018      	b.n	8007d94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	daf2      	bge.n	8007d50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2210      	movs	r2, #16
 8007d72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	3301      	adds	r3, #1
 8007d78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d80:	d901      	bls.n	8007d86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e006      	b.n	8007d94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	f003 0310 	and.w	r3, r3, #16
 8007d8e:	2b10      	cmp	r3, #16
 8007d90:	d0f0      	beq.n	8007d74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	78fb      	ldrb	r3, [r7, #3]
 8007dba:	68f9      	ldr	r1, [r7, #12]
 8007dbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b087      	sub	sp, #28
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f003 0306 	and.w	r3, r3, #6
 8007dea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d102      	bne.n	8007df8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007df2:	2300      	movs	r3, #0
 8007df4:	75fb      	strb	r3, [r7, #23]
 8007df6:	e00a      	b.n	8007e0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d002      	beq.n	8007e04 <USB_GetDevSpeed+0x32>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2b06      	cmp	r3, #6
 8007e02:	d102      	bne.n	8007e0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007e04:	2302      	movs	r3, #2
 8007e06:	75fb      	strb	r3, [r7, #23]
 8007e08:	e001      	b.n	8007e0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007e0a:	230f      	movs	r3, #15
 8007e0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	371c      	adds	r7, #28
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	785b      	ldrb	r3, [r3, #1]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d13a      	bne.n	8007eae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e3e:	69da      	ldr	r2, [r3, #28]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	f003 030f 	and.w	r3, r3, #15
 8007e48:	2101      	movs	r1, #1
 8007e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	68f9      	ldr	r1, [r7, #12]
 8007e52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e56:	4313      	orrs	r3, r2
 8007e58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	015a      	lsls	r2, r3, #5
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d155      	bne.n	8007f1c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	791b      	ldrb	r3, [r3, #4]
 8007e8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	059b      	lsls	r3, r3, #22
 8007e92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e94:	4313      	orrs	r3, r2
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	0151      	lsls	r1, r2, #5
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	440a      	add	r2, r1
 8007e9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eaa:	6013      	str	r3, [r2, #0]
 8007eac:	e036      	b.n	8007f1c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eb4:	69da      	ldr	r2, [r3, #28]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	f003 030f 	and.w	r3, r3, #15
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec4:	041b      	lsls	r3, r3, #16
 8007ec6:	68f9      	ldr	r1, [r7, #12]
 8007ec8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	015a      	lsls	r2, r3, #5
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d11a      	bne.n	8007f1c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	015a      	lsls	r2, r3, #5
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	4413      	add	r3, r2
 8007eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	791b      	ldrb	r3, [r3, #4]
 8007f00:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f02:	430b      	orrs	r3, r1
 8007f04:	4313      	orrs	r3, r2
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	0151      	lsls	r1, r2, #5
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	440a      	add	r2, r1
 8007f0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f1a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3714      	adds	r7, #20
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
	...

08007f2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	785b      	ldrb	r3, [r3, #1]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d161      	bne.n	800800c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f5e:	d11f      	bne.n	8007fa0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	0151      	lsls	r1, r2, #5
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	440a      	add	r2, r1
 8007f76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f7a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f7e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	0151      	lsls	r1, r2, #5
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	440a      	add	r2, r1
 8007f96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	f003 030f 	and.w	r3, r3, #15
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	43db      	mvns	r3, r3
 8007fba:	68f9      	ldr	r1, [r7, #12]
 8007fbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fca:	69da      	ldr	r2, [r3, #28]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	f003 030f 	and.w	r3, r3, #15
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	43db      	mvns	r3, r3
 8007fde:	68f9      	ldr	r1, [r7, #12]
 8007fe0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	0159      	lsls	r1, r3, #5
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	440b      	add	r3, r1
 8007ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008002:	4619      	mov	r1, r3
 8008004:	4b35      	ldr	r3, [pc, #212]	@ (80080dc <USB_DeactivateEndpoint+0x1b0>)
 8008006:	4013      	ands	r3, r2
 8008008:	600b      	str	r3, [r1, #0]
 800800a:	e060      	b.n	80080ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	015a      	lsls	r2, r3, #5
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	4413      	add	r3, r2
 8008014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800801e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008022:	d11f      	bne.n	8008064 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	0151      	lsls	r1, r2, #5
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	440a      	add	r2, r1
 800803a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800803e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008042:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4413      	add	r3, r2
 800804c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	0151      	lsls	r1, r2, #5
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	440a      	add	r2, r1
 800805a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800805e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008062:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800806a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	f003 030f 	and.w	r3, r3, #15
 8008074:	2101      	movs	r1, #1
 8008076:	fa01 f303 	lsl.w	r3, r1, r3
 800807a:	041b      	lsls	r3, r3, #16
 800807c:	43db      	mvns	r3, r3
 800807e:	68f9      	ldr	r1, [r7, #12]
 8008080:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008084:	4013      	ands	r3, r2
 8008086:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800808e:	69da      	ldr	r2, [r3, #28]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	f003 030f 	and.w	r3, r3, #15
 8008098:	2101      	movs	r1, #1
 800809a:	fa01 f303 	lsl.w	r3, r1, r3
 800809e:	041b      	lsls	r3, r3, #16
 80080a0:	43db      	mvns	r3, r3
 80080a2:	68f9      	ldr	r1, [r7, #12]
 80080a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080a8:	4013      	ands	r3, r2
 80080aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	0159      	lsls	r1, r3, #5
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	440b      	add	r3, r1
 80080c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080c6:	4619      	mov	r1, r3
 80080c8:	4b05      	ldr	r3, [pc, #20]	@ (80080e0 <USB_DeactivateEndpoint+0x1b4>)
 80080ca:	4013      	ands	r3, r2
 80080cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3714      	adds	r7, #20
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	ec337800 	.word	0xec337800
 80080e0:	eff37800 	.word	0xeff37800

080080e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b08a      	sub	sp, #40	@ 0x28
 80080e8:	af02      	add	r7, sp, #8
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	4613      	mov	r3, r2
 80080f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	785b      	ldrb	r3, [r3, #1]
 8008100:	2b01      	cmp	r3, #1
 8008102:	f040 817f 	bne.w	8008404 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d132      	bne.n	8008174 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	015a      	lsls	r2, r3, #5
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	4413      	add	r3, r2
 8008116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	69ba      	ldr	r2, [r7, #24]
 800811e:	0151      	lsls	r1, r2, #5
 8008120:	69fa      	ldr	r2, [r7, #28]
 8008122:	440a      	add	r2, r1
 8008124:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008128:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800812c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008130:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	4413      	add	r3, r2
 800813a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	69ba      	ldr	r2, [r7, #24]
 8008142:	0151      	lsls	r1, r2, #5
 8008144:	69fa      	ldr	r2, [r7, #28]
 8008146:	440a      	add	r2, r1
 8008148:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800814c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008150:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	015a      	lsls	r2, r3, #5
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	4413      	add	r3, r2
 800815a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	69ba      	ldr	r2, [r7, #24]
 8008162:	0151      	lsls	r1, r2, #5
 8008164:	69fa      	ldr	r2, [r7, #28]
 8008166:	440a      	add	r2, r1
 8008168:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800816c:	0cdb      	lsrs	r3, r3, #19
 800816e:	04db      	lsls	r3, r3, #19
 8008170:	6113      	str	r3, [r2, #16]
 8008172:	e097      	b.n	80082a4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	015a      	lsls	r2, r3, #5
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	4413      	add	r3, r2
 800817c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	0151      	lsls	r1, r2, #5
 8008186:	69fa      	ldr	r2, [r7, #28]
 8008188:	440a      	add	r2, r1
 800818a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800818e:	0cdb      	lsrs	r3, r3, #19
 8008190:	04db      	lsls	r3, r3, #19
 8008192:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	4413      	add	r3, r2
 800819c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	69ba      	ldr	r2, [r7, #24]
 80081a4:	0151      	lsls	r1, r2, #5
 80081a6:	69fa      	ldr	r2, [r7, #28]
 80081a8:	440a      	add	r2, r1
 80081aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081ae:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80081b2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80081b6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d11a      	bne.n	80081f4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	691a      	ldr	r2, [r3, #16]
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d903      	bls.n	80081d2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	689a      	ldr	r2, [r3, #8]
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	69ba      	ldr	r2, [r7, #24]
 80081e2:	0151      	lsls	r1, r2, #5
 80081e4:	69fa      	ldr	r2, [r7, #28]
 80081e6:	440a      	add	r2, r1
 80081e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80081f0:	6113      	str	r3, [r2, #16]
 80081f2:	e044      	b.n	800827e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	691a      	ldr	r2, [r3, #16]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	4413      	add	r3, r2
 80081fe:	1e5a      	subs	r2, r3, #1
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	fbb2 f3f3 	udiv	r3, r2, r3
 8008208:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	015a      	lsls	r2, r3, #5
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	4413      	add	r3, r2
 8008212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008216:	691a      	ldr	r2, [r3, #16]
 8008218:	8afb      	ldrh	r3, [r7, #22]
 800821a:	04d9      	lsls	r1, r3, #19
 800821c:	4ba4      	ldr	r3, [pc, #656]	@ (80084b0 <USB_EPStartXfer+0x3cc>)
 800821e:	400b      	ands	r3, r1
 8008220:	69b9      	ldr	r1, [r7, #24]
 8008222:	0148      	lsls	r0, r1, #5
 8008224:	69f9      	ldr	r1, [r7, #28]
 8008226:	4401      	add	r1, r0
 8008228:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800822c:	4313      	orrs	r3, r2
 800822e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	791b      	ldrb	r3, [r3, #4]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d122      	bne.n	800827e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	4413      	add	r3, r2
 8008240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	69ba      	ldr	r2, [r7, #24]
 8008248:	0151      	lsls	r1, r2, #5
 800824a:	69fa      	ldr	r2, [r7, #28]
 800824c:	440a      	add	r2, r1
 800824e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008252:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008256:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	4413      	add	r3, r2
 8008260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008264:	691a      	ldr	r2, [r3, #16]
 8008266:	8afb      	ldrh	r3, [r7, #22]
 8008268:	075b      	lsls	r3, r3, #29
 800826a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800826e:	69b9      	ldr	r1, [r7, #24]
 8008270:	0148      	lsls	r0, r1, #5
 8008272:	69f9      	ldr	r1, [r7, #28]
 8008274:	4401      	add	r1, r0
 8008276:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800827a:	4313      	orrs	r3, r2
 800827c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	015a      	lsls	r2, r3, #5
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	4413      	add	r3, r2
 8008286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800828a:	691a      	ldr	r2, [r3, #16]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008294:	69b9      	ldr	r1, [r7, #24]
 8008296:	0148      	lsls	r0, r1, #5
 8008298:	69f9      	ldr	r1, [r7, #28]
 800829a:	4401      	add	r1, r0
 800829c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80082a0:	4313      	orrs	r3, r2
 80082a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80082a4:	79fb      	ldrb	r3, [r7, #7]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d14b      	bne.n	8008342 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d009      	beq.n	80082c6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082be:	461a      	mov	r2, r3
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	69db      	ldr	r3, [r3, #28]
 80082c4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	791b      	ldrb	r3, [r3, #4]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d128      	bne.n	8008320 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d110      	bne.n	8008300 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	015a      	lsls	r2, r3, #5
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	4413      	add	r3, r2
 80082e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	69ba      	ldr	r2, [r7, #24]
 80082ee:	0151      	lsls	r1, r2, #5
 80082f0:	69fa      	ldr	r2, [r7, #28]
 80082f2:	440a      	add	r2, r1
 80082f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80082fc:	6013      	str	r3, [r2, #0]
 80082fe:	e00f      	b.n	8008320 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	015a      	lsls	r2, r3, #5
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	4413      	add	r3, r2
 8008308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	69ba      	ldr	r2, [r7, #24]
 8008310:	0151      	lsls	r1, r2, #5
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	440a      	add	r2, r1
 8008316:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800831a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800831e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	4413      	add	r3, r2
 8008328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	0151      	lsls	r1, r2, #5
 8008332:	69fa      	ldr	r2, [r7, #28]
 8008334:	440a      	add	r2, r1
 8008336:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800833a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800833e:	6013      	str	r3, [r2, #0]
 8008340:	e166      	b.n	8008610 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	015a      	lsls	r2, r3, #5
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	4413      	add	r3, r2
 800834a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	69ba      	ldr	r2, [r7, #24]
 8008352:	0151      	lsls	r1, r2, #5
 8008354:	69fa      	ldr	r2, [r7, #28]
 8008356:	440a      	add	r2, r1
 8008358:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800835c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008360:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	791b      	ldrb	r3, [r3, #4]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d015      	beq.n	8008396 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 814e 	beq.w	8008610 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800837a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	f003 030f 	and.w	r3, r3, #15
 8008384:	2101      	movs	r1, #1
 8008386:	fa01 f303 	lsl.w	r3, r1, r3
 800838a:	69f9      	ldr	r1, [r7, #28]
 800838c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008390:	4313      	orrs	r3, r2
 8008392:	634b      	str	r3, [r1, #52]	@ 0x34
 8008394:	e13c      	b.n	8008610 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d110      	bne.n	80083c8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	015a      	lsls	r2, r3, #5
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	4413      	add	r3, r2
 80083ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	0151      	lsls	r1, r2, #5
 80083b8:	69fa      	ldr	r2, [r7, #28]
 80083ba:	440a      	add	r2, r1
 80083bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	e00f      	b.n	80083e8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	69ba      	ldr	r2, [r7, #24]
 80083d8:	0151      	lsls	r1, r2, #5
 80083da:	69fa      	ldr	r2, [r7, #28]
 80083dc:	440a      	add	r2, r1
 80083de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083e6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	68d9      	ldr	r1, [r3, #12]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	781a      	ldrb	r2, [r3, #0]
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	b298      	uxth	r0, r3
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	4603      	mov	r3, r0
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 f9b9 	bl	8008774 <USB_WritePacket>
 8008402:	e105      	b.n	8008610 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	015a      	lsls	r2, r3, #5
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	4413      	add	r3, r2
 800840c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	69ba      	ldr	r2, [r7, #24]
 8008414:	0151      	lsls	r1, r2, #5
 8008416:	69fa      	ldr	r2, [r7, #28]
 8008418:	440a      	add	r2, r1
 800841a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800841e:	0cdb      	lsrs	r3, r3, #19
 8008420:	04db      	lsls	r3, r3, #19
 8008422:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	69ba      	ldr	r2, [r7, #24]
 8008434:	0151      	lsls	r1, r2, #5
 8008436:	69fa      	ldr	r2, [r7, #28]
 8008438:	440a      	add	r2, r1
 800843a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800843e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008442:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008446:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d132      	bne.n	80084b4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d003      	beq.n	800845e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	689a      	ldr	r2, [r3, #8]
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	689a      	ldr	r2, [r3, #8]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	015a      	lsls	r2, r3, #5
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	4413      	add	r3, r2
 800846e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008472:	691a      	ldr	r2, [r3, #16]
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	6a1b      	ldr	r3, [r3, #32]
 8008478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800847c:	69b9      	ldr	r1, [r7, #24]
 800847e:	0148      	lsls	r0, r1, #5
 8008480:	69f9      	ldr	r1, [r7, #28]
 8008482:	4401      	add	r1, r0
 8008484:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008488:	4313      	orrs	r3, r2
 800848a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	4413      	add	r3, r2
 8008494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	69ba      	ldr	r2, [r7, #24]
 800849c:	0151      	lsls	r1, r2, #5
 800849e:	69fa      	ldr	r2, [r7, #28]
 80084a0:	440a      	add	r2, r1
 80084a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80084aa:	6113      	str	r3, [r2, #16]
 80084ac:	e062      	b.n	8008574 <USB_EPStartXfer+0x490>
 80084ae:	bf00      	nop
 80084b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d123      	bne.n	8008504 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084c8:	691a      	ldr	r2, [r3, #16]
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084d2:	69b9      	ldr	r1, [r7, #24]
 80084d4:	0148      	lsls	r0, r1, #5
 80084d6:	69f9      	ldr	r1, [r7, #28]
 80084d8:	4401      	add	r1, r0
 80084da:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80084de:	4313      	orrs	r3, r2
 80084e0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	015a      	lsls	r2, r3, #5
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	4413      	add	r3, r2
 80084ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	69ba      	ldr	r2, [r7, #24]
 80084f2:	0151      	lsls	r1, r2, #5
 80084f4:	69fa      	ldr	r2, [r7, #28]
 80084f6:	440a      	add	r2, r1
 80084f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008500:	6113      	str	r3, [r2, #16]
 8008502:	e037      	b.n	8008574 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	691a      	ldr	r2, [r3, #16]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	4413      	add	r3, r2
 800850e:	1e5a      	subs	r2, r3, #1
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	fbb2 f3f3 	udiv	r3, r2, r3
 8008518:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	8afa      	ldrh	r2, [r7, #22]
 8008520:	fb03 f202 	mul.w	r2, r3, r2
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	4413      	add	r3, r2
 8008530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008534:	691a      	ldr	r2, [r3, #16]
 8008536:	8afb      	ldrh	r3, [r7, #22]
 8008538:	04d9      	lsls	r1, r3, #19
 800853a:	4b38      	ldr	r3, [pc, #224]	@ (800861c <USB_EPStartXfer+0x538>)
 800853c:	400b      	ands	r3, r1
 800853e:	69b9      	ldr	r1, [r7, #24]
 8008540:	0148      	lsls	r0, r1, #5
 8008542:	69f9      	ldr	r1, [r7, #28]
 8008544:	4401      	add	r1, r0
 8008546:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800854a:	4313      	orrs	r3, r2
 800854c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	4413      	add	r3, r2
 8008556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800855a:	691a      	ldr	r2, [r3, #16]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008564:	69b9      	ldr	r1, [r7, #24]
 8008566:	0148      	lsls	r0, r1, #5
 8008568:	69f9      	ldr	r1, [r7, #28]
 800856a:	4401      	add	r1, r0
 800856c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008570:	4313      	orrs	r3, r2
 8008572:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008574:	79fb      	ldrb	r3, [r7, #7]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d10d      	bne.n	8008596 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d009      	beq.n	8008596 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	68d9      	ldr	r1, [r3, #12]
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	015a      	lsls	r2, r3, #5
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	4413      	add	r3, r2
 800858e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008592:	460a      	mov	r2, r1
 8008594:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	791b      	ldrb	r3, [r3, #4]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d128      	bne.n	80085f0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d110      	bne.n	80085d0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	015a      	lsls	r2, r3, #5
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	69ba      	ldr	r2, [r7, #24]
 80085be:	0151      	lsls	r1, r2, #5
 80085c0:	69fa      	ldr	r2, [r7, #28]
 80085c2:	440a      	add	r2, r1
 80085c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80085cc:	6013      	str	r3, [r2, #0]
 80085ce:	e00f      	b.n	80085f0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	69ba      	ldr	r2, [r7, #24]
 80085e0:	0151      	lsls	r1, r2, #5
 80085e2:	69fa      	ldr	r2, [r7, #28]
 80085e4:	440a      	add	r2, r1
 80085e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	0151      	lsls	r1, r2, #5
 8008602:	69fa      	ldr	r2, [r7, #28]
 8008604:	440a      	add	r2, r1
 8008606:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800860a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800860e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3720      	adds	r7, #32
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	1ff80000 	.word	0x1ff80000

08008620 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800862a:	2300      	movs	r3, #0
 800862c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	785b      	ldrb	r3, [r3, #1]
 800863a:	2b01      	cmp	r3, #1
 800863c:	d14a      	bne.n	80086d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	015a      	lsls	r2, r3, #5
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	4413      	add	r3, r2
 8008648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008652:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008656:	f040 8086 	bne.w	8008766 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	015a      	lsls	r2, r3, #5
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	4413      	add	r3, r2
 8008664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	7812      	ldrb	r2, [r2, #0]
 800866e:	0151      	lsls	r1, r2, #5
 8008670:	693a      	ldr	r2, [r7, #16]
 8008672:	440a      	add	r2, r1
 8008674:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008678:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800867c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	4413      	add	r3, r2
 8008688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	7812      	ldrb	r2, [r2, #0]
 8008692:	0151      	lsls	r1, r2, #5
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	440a      	add	r2, r1
 8008698:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800869c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80086a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	3301      	adds	r3, #1
 80086a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d902      	bls.n	80086b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	75fb      	strb	r3, [r7, #23]
          break;
 80086b6:	e056      	b.n	8008766 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	015a      	lsls	r2, r3, #5
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	4413      	add	r3, r2
 80086c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086d0:	d0e7      	beq.n	80086a2 <USB_EPStopXfer+0x82>
 80086d2:	e048      	b.n	8008766 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	015a      	lsls	r2, r3, #5
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	4413      	add	r3, r2
 80086de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086ec:	d13b      	bne.n	8008766 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	7812      	ldrb	r2, [r2, #0]
 8008702:	0151      	lsls	r1, r2, #5
 8008704:	693a      	ldr	r2, [r7, #16]
 8008706:	440a      	add	r2, r1
 8008708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800870c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008710:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	4413      	add	r3, r2
 800871c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	7812      	ldrb	r2, [r2, #0]
 8008726:	0151      	lsls	r1, r2, #5
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	440a      	add	r2, r1
 800872c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008730:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008734:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	3301      	adds	r3, #1
 800873a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008742:	4293      	cmp	r3, r2
 8008744:	d902      	bls.n	800874c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	75fb      	strb	r3, [r7, #23]
          break;
 800874a:	e00c      	b.n	8008766 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	4413      	add	r3, r2
 8008756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008760:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008764:	d0e7      	beq.n	8008736 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008766:	7dfb      	ldrb	r3, [r7, #23]
}
 8008768:	4618      	mov	r0, r3
 800876a:	371c      	adds	r7, #28
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008774:	b480      	push	{r7}
 8008776:	b089      	sub	sp, #36	@ 0x24
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	4611      	mov	r1, r2
 8008780:	461a      	mov	r2, r3
 8008782:	460b      	mov	r3, r1
 8008784:	71fb      	strb	r3, [r7, #7]
 8008786:	4613      	mov	r3, r2
 8008788:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008792:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008796:	2b00      	cmp	r3, #0
 8008798:	d123      	bne.n	80087e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800879a:	88bb      	ldrh	r3, [r7, #4]
 800879c:	3303      	adds	r3, #3
 800879e:	089b      	lsrs	r3, r3, #2
 80087a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80087a2:	2300      	movs	r3, #0
 80087a4:	61bb      	str	r3, [r7, #24]
 80087a6:	e018      	b.n	80087da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80087a8:	79fb      	ldrb	r3, [r7, #7]
 80087aa:	031a      	lsls	r2, r3, #12
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	4413      	add	r3, r2
 80087b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087b4:	461a      	mov	r2, r3
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	3301      	adds	r3, #1
 80087c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	3301      	adds	r3, #1
 80087c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	3301      	adds	r3, #1
 80087cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	3301      	adds	r3, #1
 80087d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	3301      	adds	r3, #1
 80087d8:	61bb      	str	r3, [r7, #24]
 80087da:	69ba      	ldr	r2, [r7, #24]
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d3e2      	bcc.n	80087a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3724      	adds	r7, #36	@ 0x24
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b08b      	sub	sp, #44	@ 0x2c
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	4613      	mov	r3, r2
 80087fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008806:	88fb      	ldrh	r3, [r7, #6]
 8008808:	089b      	lsrs	r3, r3, #2
 800880a:	b29b      	uxth	r3, r3
 800880c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800880e:	88fb      	ldrh	r3, [r7, #6]
 8008810:	f003 0303 	and.w	r3, r3, #3
 8008814:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008816:	2300      	movs	r3, #0
 8008818:	623b      	str	r3, [r7, #32]
 800881a:	e014      	b.n	8008846 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008826:	601a      	str	r2, [r3, #0]
    pDest++;
 8008828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882a:	3301      	adds	r3, #1
 800882c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800882e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008830:	3301      	adds	r3, #1
 8008832:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008836:	3301      	adds	r3, #1
 8008838:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800883a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883c:	3301      	adds	r3, #1
 800883e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	3301      	adds	r3, #1
 8008844:	623b      	str	r3, [r7, #32]
 8008846:	6a3a      	ldr	r2, [r7, #32]
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	429a      	cmp	r2, r3
 800884c:	d3e6      	bcc.n	800881c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800884e:	8bfb      	ldrh	r3, [r7, #30]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d01e      	beq.n	8008892 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008854:	2300      	movs	r3, #0
 8008856:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800885e:	461a      	mov	r2, r3
 8008860:	f107 0310 	add.w	r3, r7, #16
 8008864:	6812      	ldr	r2, [r2, #0]
 8008866:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	b2db      	uxtb	r3, r3
 800886e:	00db      	lsls	r3, r3, #3
 8008870:	fa22 f303 	lsr.w	r3, r2, r3
 8008874:	b2da      	uxtb	r2, r3
 8008876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008878:	701a      	strb	r2, [r3, #0]
      i++;
 800887a:	6a3b      	ldr	r3, [r7, #32]
 800887c:	3301      	adds	r3, #1
 800887e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008882:	3301      	adds	r3, #1
 8008884:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008886:	8bfb      	ldrh	r3, [r7, #30]
 8008888:	3b01      	subs	r3, #1
 800888a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800888c:	8bfb      	ldrh	r3, [r7, #30]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1ea      	bne.n	8008868 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008894:	4618      	mov	r0, r3
 8008896:	372c      	adds	r7, #44	@ 0x2c
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	785b      	ldrb	r3, [r3, #1]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d12c      	bne.n	8008916 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	015a      	lsls	r2, r3, #5
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4413      	add	r3, r2
 80088c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	db12      	blt.n	80088f4 <USB_EPSetStall+0x54>
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00f      	beq.n	80088f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	0151      	lsls	r1, r2, #5
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	440a      	add	r2, r1
 80088ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80088f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	0151      	lsls	r1, r2, #5
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	440a      	add	r2, r1
 800890a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800890e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	e02b      	b.n	800896e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	015a      	lsls	r2, r3, #5
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	4413      	add	r3, r2
 800891e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	db12      	blt.n	800894e <USB_EPSetStall+0xae>
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00f      	beq.n	800894e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	015a      	lsls	r2, r3, #5
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	4413      	add	r3, r2
 8008936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	0151      	lsls	r1, r2, #5
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	440a      	add	r2, r1
 8008944:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008948:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800894c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	4413      	add	r3, r2
 8008956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	0151      	lsls	r1, r2, #5
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	440a      	add	r2, r1
 8008964:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008968:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800896c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	785b      	ldrb	r3, [r3, #1]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d128      	bne.n	80089ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	015a      	lsls	r2, r3, #5
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4413      	add	r3, r2
 80089a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	0151      	lsls	r1, r2, #5
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	440a      	add	r2, r1
 80089ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80089b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	791b      	ldrb	r3, [r3, #4]
 80089bc:	2b03      	cmp	r3, #3
 80089be:	d003      	beq.n	80089c8 <USB_EPClearStall+0x4c>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	791b      	ldrb	r3, [r3, #4]
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d138      	bne.n	8008a3a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	015a      	lsls	r2, r3, #5
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	4413      	add	r3, r2
 80089d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68ba      	ldr	r2, [r7, #8]
 80089d8:	0151      	lsls	r1, r2, #5
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	440a      	add	r2, r1
 80089de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	e027      	b.n	8008a3a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	015a      	lsls	r2, r3, #5
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	4413      	add	r3, r2
 80089f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	0151      	lsls	r1, r2, #5
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	440a      	add	r2, r1
 8008a00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a04:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008a08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	791b      	ldrb	r3, [r3, #4]
 8008a0e:	2b03      	cmp	r3, #3
 8008a10:	d003      	beq.n	8008a1a <USB_EPClearStall+0x9e>
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	791b      	ldrb	r3, [r3, #4]
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d10f      	bne.n	8008a3a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	015a      	lsls	r2, r3, #5
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	4413      	add	r3, r2
 8008a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	0151      	lsls	r1, r2, #5
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	440a      	add	r2, r1
 8008a30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a38:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a66:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008a6a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	78fb      	ldrb	r3, [r7, #3]
 8008a76:	011b      	lsls	r3, r3, #4
 8008a78:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008a7c:	68f9      	ldr	r1, [r7, #12]
 8008a7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a82:	4313      	orrs	r3, r2
 8008a84:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008aae:	f023 0303 	bic.w	r3, r3, #3
 8008ab2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ac2:	f023 0302 	bic.w	r3, r3, #2
 8008ac6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3714      	adds	r7, #20
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b085      	sub	sp, #20
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008af0:	f023 0303 	bic.w	r3, r3, #3
 8008af4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b04:	f043 0302 	orr.w	r3, r3, #2
 8008b08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	695b      	ldr	r3, [r3, #20]
 8008b24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008b30:	68fb      	ldr	r3, [r7, #12]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3714      	adds	r7, #20
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b085      	sub	sp, #20
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b5a:	69db      	ldr	r3, [r3, #28]
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	4013      	ands	r3, r2
 8008b60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	0c1b      	lsrs	r3, r3, #16
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b085      	sub	sp, #20
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b8e:	69db      	ldr	r3, [r3, #28]
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	4013      	ands	r3, r2
 8008b94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	b29b      	uxth	r3, r3
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3714      	adds	r7, #20
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b085      	sub	sp, #20
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	460b      	mov	r3, r1
 8008bb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008bb6:	78fb      	ldrb	r3, [r7, #3]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008bd4:	68bb      	ldr	r3, [r7, #8]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b087      	sub	sp, #28
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	460b      	mov	r3, r1
 8008bec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c04:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008c06:	78fb      	ldrb	r3, [r7, #3]
 8008c08:	f003 030f 	and.w	r3, r3, #15
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c12:	01db      	lsls	r3, r3, #7
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008c1c:	78fb      	ldrb	r3, [r7, #3]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c30:	68bb      	ldr	r3, [r7, #8]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	371c      	adds	r7, #28
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b083      	sub	sp, #12
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	f003 0301 	and.w	r3, r3, #1
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b085      	sub	sp, #20
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c74:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008c78:	f023 0307 	bic.w	r3, r3, #7
 8008c7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b087      	sub	sp, #28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	607a      	str	r2, [r7, #4]
 8008cac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	333c      	adds	r3, #60	@ 0x3c
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	4a26      	ldr	r2, [pc, #152]	@ (8008d58 <USB_EP0_OutStart+0xb8>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d90a      	bls.n	8008cda <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cd4:	d101      	bne.n	8008cda <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	e037      	b.n	8008d4a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008cf4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008cf8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d08:	f043 0318 	orr.w	r3, r3, #24
 8008d0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d1c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008d20:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008d22:	7afb      	ldrb	r3, [r7, #11]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d10f      	bne.n	8008d48 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d2e:	461a      	mov	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d42:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008d46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	371c      	adds	r7, #28
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	4f54300a 	.word	0x4f54300a

08008d5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d64:	2300      	movs	r3, #0
 8008d66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008d74:	d901      	bls.n	8008d7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e01b      	b.n	8008db2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	daf2      	bge.n	8008d68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d82:	2300      	movs	r3, #0
 8008d84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	f043 0201 	orr.w	r2, r3, #1
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	3301      	adds	r3, #1
 8008d96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008d9e:	d901      	bls.n	8008da4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e006      	b.n	8008db2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d0f0      	beq.n	8008d92 <USB_CoreReset+0x36>

  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3714      	adds	r7, #20
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
	...

08008dc0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	460b      	mov	r3, r1
 8008dca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008dcc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008dd0:	f002 fc94 	bl	800b6fc <USBD_static_malloc>
 8008dd4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d109      	bne.n	8008df0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	32b0      	adds	r2, #176	@ 0xb0
 8008de6:	2100      	movs	r1, #0
 8008de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008dec:	2302      	movs	r3, #2
 8008dee:	e0d4      	b.n	8008f9a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008df0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008df4:	2100      	movs	r1, #0
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f003 fa55 	bl	800c2a6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	32b0      	adds	r2, #176	@ 0xb0
 8008e06:	68f9      	ldr	r1, [r7, #12]
 8008e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	32b0      	adds	r2, #176	@ 0xb0
 8008e16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	7c1b      	ldrb	r3, [r3, #16]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d138      	bne.n	8008e9a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008e28:	4b5e      	ldr	r3, [pc, #376]	@ (8008fa4 <USBD_CDC_Init+0x1e4>)
 8008e2a:	7819      	ldrb	r1, [r3, #0]
 8008e2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e30:	2202      	movs	r2, #2
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f002 fb3f 	bl	800b4b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008e38:	4b5a      	ldr	r3, [pc, #360]	@ (8008fa4 <USBD_CDC_Init+0x1e4>)
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	f003 020f 	and.w	r2, r3, #15
 8008e40:	6879      	ldr	r1, [r7, #4]
 8008e42:	4613      	mov	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	440b      	add	r3, r1
 8008e4c:	3324      	adds	r3, #36	@ 0x24
 8008e4e:	2201      	movs	r2, #1
 8008e50:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008e52:	4b55      	ldr	r3, [pc, #340]	@ (8008fa8 <USBD_CDC_Init+0x1e8>)
 8008e54:	7819      	ldrb	r1, [r3, #0]
 8008e56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f002 fb2a 	bl	800b4b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008e62:	4b51      	ldr	r3, [pc, #324]	@ (8008fa8 <USBD_CDC_Init+0x1e8>)
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	f003 020f 	and.w	r2, r3, #15
 8008e6a:	6879      	ldr	r1, [r7, #4]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4413      	add	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	440b      	add	r3, r1
 8008e76:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008e7e:	4b4b      	ldr	r3, [pc, #300]	@ (8008fac <USBD_CDC_Init+0x1ec>)
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	f003 020f 	and.w	r2, r3, #15
 8008e86:	6879      	ldr	r1, [r7, #4]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	440b      	add	r3, r1
 8008e92:	3326      	adds	r3, #38	@ 0x26
 8008e94:	2210      	movs	r2, #16
 8008e96:	801a      	strh	r2, [r3, #0]
 8008e98:	e035      	b.n	8008f06 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008e9a:	4b42      	ldr	r3, [pc, #264]	@ (8008fa4 <USBD_CDC_Init+0x1e4>)
 8008e9c:	7819      	ldrb	r1, [r3, #0]
 8008e9e:	2340      	movs	r3, #64	@ 0x40
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f002 fb07 	bl	800b4b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008ea8:	4b3e      	ldr	r3, [pc, #248]	@ (8008fa4 <USBD_CDC_Init+0x1e4>)
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	f003 020f 	and.w	r2, r3, #15
 8008eb0:	6879      	ldr	r1, [r7, #4]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	440b      	add	r3, r1
 8008ebc:	3324      	adds	r3, #36	@ 0x24
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008ec2:	4b39      	ldr	r3, [pc, #228]	@ (8008fa8 <USBD_CDC_Init+0x1e8>)
 8008ec4:	7819      	ldrb	r1, [r3, #0]
 8008ec6:	2340      	movs	r3, #64	@ 0x40
 8008ec8:	2202      	movs	r2, #2
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f002 faf3 	bl	800b4b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008ed0:	4b35      	ldr	r3, [pc, #212]	@ (8008fa8 <USBD_CDC_Init+0x1e8>)
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	f003 020f 	and.w	r2, r3, #15
 8008ed8:	6879      	ldr	r1, [r7, #4]
 8008eda:	4613      	mov	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4413      	add	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	440b      	add	r3, r1
 8008ee4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008ee8:	2201      	movs	r2, #1
 8008eea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008eec:	4b2f      	ldr	r3, [pc, #188]	@ (8008fac <USBD_CDC_Init+0x1ec>)
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	f003 020f 	and.w	r2, r3, #15
 8008ef4:	6879      	ldr	r1, [r7, #4]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	440b      	add	r3, r1
 8008f00:	3326      	adds	r3, #38	@ 0x26
 8008f02:	2210      	movs	r2, #16
 8008f04:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008f06:	4b29      	ldr	r3, [pc, #164]	@ (8008fac <USBD_CDC_Init+0x1ec>)
 8008f08:	7819      	ldrb	r1, [r3, #0]
 8008f0a:	2308      	movs	r3, #8
 8008f0c:	2203      	movs	r2, #3
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f002 fad1 	bl	800b4b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008f14:	4b25      	ldr	r3, [pc, #148]	@ (8008fac <USBD_CDC_Init+0x1ec>)
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	f003 020f 	and.w	r2, r3, #15
 8008f1c:	6879      	ldr	r1, [r7, #4]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	4413      	add	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	440b      	add	r3, r1
 8008f28:	3324      	adds	r3, #36	@ 0x24
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	33b0      	adds	r3, #176	@ 0xb0
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4413      	add	r3, r2
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d101      	bne.n	8008f68 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008f64:	2302      	movs	r3, #2
 8008f66:	e018      	b.n	8008f9a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	7c1b      	ldrb	r3, [r3, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d10a      	bne.n	8008f86 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f70:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa8 <USBD_CDC_Init+0x1e8>)
 8008f72:	7819      	ldrb	r1, [r3, #0]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f002 fb88 	bl	800b694 <USBD_LL_PrepareReceive>
 8008f84:	e008      	b.n	8008f98 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f86:	4b08      	ldr	r3, [pc, #32]	@ (8008fa8 <USBD_CDC_Init+0x1e8>)
 8008f88:	7819      	ldrb	r1, [r3, #0]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f90:	2340      	movs	r3, #64	@ 0x40
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f002 fb7e 	bl	800b694 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	200000a3 	.word	0x200000a3
 8008fa8:	200000a4 	.word	0x200000a4
 8008fac:	200000a5 	.word	0x200000a5

08008fb0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008fbc:	4b3a      	ldr	r3, [pc, #232]	@ (80090a8 <USBD_CDC_DeInit+0xf8>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f002 fa9d 	bl	800b502 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008fc8:	4b37      	ldr	r3, [pc, #220]	@ (80090a8 <USBD_CDC_DeInit+0xf8>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	f003 020f 	and.w	r2, r3, #15
 8008fd0:	6879      	ldr	r1, [r7, #4]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	440b      	add	r3, r1
 8008fdc:	3324      	adds	r3, #36	@ 0x24
 8008fde:	2200      	movs	r2, #0
 8008fe0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008fe2:	4b32      	ldr	r3, [pc, #200]	@ (80090ac <USBD_CDC_DeInit+0xfc>)
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f002 fa8a 	bl	800b502 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008fee:	4b2f      	ldr	r3, [pc, #188]	@ (80090ac <USBD_CDC_DeInit+0xfc>)
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	f003 020f 	and.w	r2, r3, #15
 8008ff6:	6879      	ldr	r1, [r7, #4]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4413      	add	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	440b      	add	r3, r1
 8009002:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009006:	2200      	movs	r2, #0
 8009008:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800900a:	4b29      	ldr	r3, [pc, #164]	@ (80090b0 <USBD_CDC_DeInit+0x100>)
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f002 fa76 	bl	800b502 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009016:	4b26      	ldr	r3, [pc, #152]	@ (80090b0 <USBD_CDC_DeInit+0x100>)
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	f003 020f 	and.w	r2, r3, #15
 800901e:	6879      	ldr	r1, [r7, #4]
 8009020:	4613      	mov	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	4413      	add	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	440b      	add	r3, r1
 800902a:	3324      	adds	r3, #36	@ 0x24
 800902c:	2200      	movs	r2, #0
 800902e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009030:	4b1f      	ldr	r3, [pc, #124]	@ (80090b0 <USBD_CDC_DeInit+0x100>)
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	f003 020f 	and.w	r2, r3, #15
 8009038:	6879      	ldr	r1, [r7, #4]
 800903a:	4613      	mov	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4413      	add	r3, r2
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	440b      	add	r3, r1
 8009044:	3326      	adds	r3, #38	@ 0x26
 8009046:	2200      	movs	r2, #0
 8009048:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	32b0      	adds	r2, #176	@ 0xb0
 8009054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d01f      	beq.n	800909c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	33b0      	adds	r3, #176	@ 0xb0
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	4413      	add	r3, r2
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	32b0      	adds	r2, #176	@ 0xb0
 800907a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800907e:	4618      	mov	r0, r3
 8009080:	f002 fb4a 	bl	800b718 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	32b0      	adds	r2, #176	@ 0xb0
 800908e:	2100      	movs	r1, #0
 8009090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	200000a3 	.word	0x200000a3
 80090ac:	200000a4 	.word	0x200000a4
 80090b0:	200000a5 	.word	0x200000a5

080090b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	32b0      	adds	r2, #176	@ 0xb0
 80090c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80090ce:	2300      	movs	r3, #0
 80090d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80090d2:	2300      	movs	r3, #0
 80090d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80090d6:	2300      	movs	r3, #0
 80090d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d101      	bne.n	80090e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e0bf      	b.n	8009264 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d050      	beq.n	8009192 <USBD_CDC_Setup+0xde>
 80090f0:	2b20      	cmp	r3, #32
 80090f2:	f040 80af 	bne.w	8009254 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	88db      	ldrh	r3, [r3, #6]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d03a      	beq.n	8009174 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	b25b      	sxtb	r3, r3
 8009104:	2b00      	cmp	r3, #0
 8009106:	da1b      	bge.n	8009140 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	33b0      	adds	r3, #176	@ 0xb0
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800911e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	88d2      	ldrh	r2, [r2, #6]
 8009124:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	88db      	ldrh	r3, [r3, #6]
 800912a:	2b07      	cmp	r3, #7
 800912c:	bf28      	it	cs
 800912e:	2307      	movcs	r3, #7
 8009130:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	89fa      	ldrh	r2, [r7, #14]
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f001 fd93 	bl	800ac64 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800913e:	e090      	b.n	8009262 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	785a      	ldrb	r2, [r3, #1]
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	88db      	ldrh	r3, [r3, #6]
 800914e:	2b3f      	cmp	r3, #63	@ 0x3f
 8009150:	d803      	bhi.n	800915a <USBD_CDC_Setup+0xa6>
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	88db      	ldrh	r3, [r3, #6]
 8009156:	b2da      	uxtb	r2, r3
 8009158:	e000      	b.n	800915c <USBD_CDC_Setup+0xa8>
 800915a:	2240      	movs	r2, #64	@ 0x40
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009162:	6939      	ldr	r1, [r7, #16]
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800916a:	461a      	mov	r2, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f001 fda5 	bl	800acbc <USBD_CtlPrepareRx>
      break;
 8009172:	e076      	b.n	8009262 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	33b0      	adds	r3, #176	@ 0xb0
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4413      	add	r3, r2
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	7850      	ldrb	r0, [r2, #1]
 800918a:	2200      	movs	r2, #0
 800918c:	6839      	ldr	r1, [r7, #0]
 800918e:	4798      	blx	r3
      break;
 8009190:	e067      	b.n	8009262 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	785b      	ldrb	r3, [r3, #1]
 8009196:	2b0b      	cmp	r3, #11
 8009198:	d851      	bhi.n	800923e <USBD_CDC_Setup+0x18a>
 800919a:	a201      	add	r2, pc, #4	@ (adr r2, 80091a0 <USBD_CDC_Setup+0xec>)
 800919c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a0:	080091d1 	.word	0x080091d1
 80091a4:	0800924d 	.word	0x0800924d
 80091a8:	0800923f 	.word	0x0800923f
 80091ac:	0800923f 	.word	0x0800923f
 80091b0:	0800923f 	.word	0x0800923f
 80091b4:	0800923f 	.word	0x0800923f
 80091b8:	0800923f 	.word	0x0800923f
 80091bc:	0800923f 	.word	0x0800923f
 80091c0:	0800923f 	.word	0x0800923f
 80091c4:	0800923f 	.word	0x0800923f
 80091c8:	080091fb 	.word	0x080091fb
 80091cc:	08009225 	.word	0x08009225
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	2b03      	cmp	r3, #3
 80091da:	d107      	bne.n	80091ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80091dc:	f107 030a 	add.w	r3, r7, #10
 80091e0:	2202      	movs	r2, #2
 80091e2:	4619      	mov	r1, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f001 fd3d 	bl	800ac64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091ea:	e032      	b.n	8009252 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f001 fcbb 	bl	800ab6a <USBD_CtlError>
            ret = USBD_FAIL;
 80091f4:	2303      	movs	r3, #3
 80091f6:	75fb      	strb	r3, [r7, #23]
          break;
 80091f8:	e02b      	b.n	8009252 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009200:	b2db      	uxtb	r3, r3
 8009202:	2b03      	cmp	r3, #3
 8009204:	d107      	bne.n	8009216 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009206:	f107 030d 	add.w	r3, r7, #13
 800920a:	2201      	movs	r2, #1
 800920c:	4619      	mov	r1, r3
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f001 fd28 	bl	800ac64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009214:	e01d      	b.n	8009252 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f001 fca6 	bl	800ab6a <USBD_CtlError>
            ret = USBD_FAIL;
 800921e:	2303      	movs	r3, #3
 8009220:	75fb      	strb	r3, [r7, #23]
          break;
 8009222:	e016      	b.n	8009252 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800922a:	b2db      	uxtb	r3, r3
 800922c:	2b03      	cmp	r3, #3
 800922e:	d00f      	beq.n	8009250 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f001 fc99 	bl	800ab6a <USBD_CtlError>
            ret = USBD_FAIL;
 8009238:	2303      	movs	r3, #3
 800923a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800923c:	e008      	b.n	8009250 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800923e:	6839      	ldr	r1, [r7, #0]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f001 fc92 	bl	800ab6a <USBD_CtlError>
          ret = USBD_FAIL;
 8009246:	2303      	movs	r3, #3
 8009248:	75fb      	strb	r3, [r7, #23]
          break;
 800924a:	e002      	b.n	8009252 <USBD_CDC_Setup+0x19e>
          break;
 800924c:	bf00      	nop
 800924e:	e008      	b.n	8009262 <USBD_CDC_Setup+0x1ae>
          break;
 8009250:	bf00      	nop
      }
      break;
 8009252:	e006      	b.n	8009262 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f001 fc87 	bl	800ab6a <USBD_CtlError>
      ret = USBD_FAIL;
 800925c:	2303      	movs	r3, #3
 800925e:	75fb      	strb	r3, [r7, #23]
      break;
 8009260:	bf00      	nop
  }

  return (uint8_t)ret;
 8009262:	7dfb      	ldrb	r3, [r7, #23]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3718      	adds	r7, #24
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	460b      	mov	r3, r1
 8009276:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800927e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	32b0      	adds	r2, #176	@ 0xb0
 800928a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d101      	bne.n	8009296 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009292:	2303      	movs	r3, #3
 8009294:	e065      	b.n	8009362 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	32b0      	adds	r2, #176	@ 0xb0
 80092a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80092a6:	78fb      	ldrb	r3, [r7, #3]
 80092a8:	f003 020f 	and.w	r2, r3, #15
 80092ac:	6879      	ldr	r1, [r7, #4]
 80092ae:	4613      	mov	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4413      	add	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	440b      	add	r3, r1
 80092b8:	3318      	adds	r3, #24
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d02f      	beq.n	8009320 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	f003 020f 	and.w	r2, r3, #15
 80092c6:	6879      	ldr	r1, [r7, #4]
 80092c8:	4613      	mov	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4413      	add	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	440b      	add	r3, r1
 80092d2:	3318      	adds	r3, #24
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	78fb      	ldrb	r3, [r7, #3]
 80092d8:	f003 010f 	and.w	r1, r3, #15
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	460b      	mov	r3, r1
 80092e0:	00db      	lsls	r3, r3, #3
 80092e2:	440b      	add	r3, r1
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4403      	add	r3, r0
 80092e8:	331c      	adds	r3, #28
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80092f0:	fb01 f303 	mul.w	r3, r1, r3
 80092f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d112      	bne.n	8009320 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80092fa:	78fb      	ldrb	r3, [r7, #3]
 80092fc:	f003 020f 	and.w	r2, r3, #15
 8009300:	6879      	ldr	r1, [r7, #4]
 8009302:	4613      	mov	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4413      	add	r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	440b      	add	r3, r1
 800930c:	3318      	adds	r3, #24
 800930e:	2200      	movs	r2, #0
 8009310:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009312:	78f9      	ldrb	r1, [r7, #3]
 8009314:	2300      	movs	r3, #0
 8009316:	2200      	movs	r2, #0
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f002 f99a 	bl	800b652 <USBD_LL_Transmit>
 800931e:	e01f      	b.n	8009360 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	2200      	movs	r2, #0
 8009324:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	33b0      	adds	r3, #176	@ 0xb0
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d010      	beq.n	8009360 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	33b0      	adds	r3, #176	@ 0xb0
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4413      	add	r3, r2
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800935c:	78fa      	ldrb	r2, [r7, #3]
 800935e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b084      	sub	sp, #16
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	460b      	mov	r3, r1
 8009374:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	32b0      	adds	r2, #176	@ 0xb0
 8009380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009384:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	32b0      	adds	r2, #176	@ 0xb0
 8009390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d101      	bne.n	800939c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009398:	2303      	movs	r3, #3
 800939a:	e01a      	b.n	80093d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800939c:	78fb      	ldrb	r3, [r7, #3]
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f002 f998 	bl	800b6d6 <USBD_LL_GetRxDataSize>
 80093a6:	4602      	mov	r2, r0
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	33b0      	adds	r3, #176	@ 0xb0
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80093cc:	4611      	mov	r1, r2
 80093ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	32b0      	adds	r2, #176	@ 0xb0
 80093ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d101      	bne.n	80093fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80093f8:	2303      	movs	r3, #3
 80093fa:	e024      	b.n	8009446 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	33b0      	adds	r3, #176	@ 0xb0
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	4413      	add	r3, r2
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d019      	beq.n	8009444 <USBD_CDC_EP0_RxReady+0x6a>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009416:	2bff      	cmp	r3, #255	@ 0xff
 8009418:	d014      	beq.n	8009444 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	33b0      	adds	r3, #176	@ 0xb0
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4413      	add	r3, r2
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009432:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800943a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	22ff      	movs	r2, #255	@ 0xff
 8009440:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
	...

08009450 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009458:	2182      	movs	r1, #130	@ 0x82
 800945a:	4818      	ldr	r0, [pc, #96]	@ (80094bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800945c:	f000 fd4f 	bl	8009efe <USBD_GetEpDesc>
 8009460:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009462:	2101      	movs	r1, #1
 8009464:	4815      	ldr	r0, [pc, #84]	@ (80094bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009466:	f000 fd4a 	bl	8009efe <USBD_GetEpDesc>
 800946a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800946c:	2181      	movs	r1, #129	@ 0x81
 800946e:	4813      	ldr	r0, [pc, #76]	@ (80094bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009470:	f000 fd45 	bl	8009efe <USBD_GetEpDesc>
 8009474:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d002      	beq.n	8009482 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	2210      	movs	r2, #16
 8009480:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d006      	beq.n	8009496 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	2200      	movs	r2, #0
 800948c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009490:	711a      	strb	r2, [r3, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d006      	beq.n	80094aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80094a4:	711a      	strb	r2, [r3, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2243      	movs	r2, #67	@ 0x43
 80094ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80094b0:	4b02      	ldr	r3, [pc, #8]	@ (80094bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	20000060 	.word	0x20000060

080094c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80094c8:	2182      	movs	r1, #130	@ 0x82
 80094ca:	4818      	ldr	r0, [pc, #96]	@ (800952c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80094cc:	f000 fd17 	bl	8009efe <USBD_GetEpDesc>
 80094d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80094d2:	2101      	movs	r1, #1
 80094d4:	4815      	ldr	r0, [pc, #84]	@ (800952c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80094d6:	f000 fd12 	bl	8009efe <USBD_GetEpDesc>
 80094da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80094dc:	2181      	movs	r1, #129	@ 0x81
 80094de:	4813      	ldr	r0, [pc, #76]	@ (800952c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80094e0:	f000 fd0d 	bl	8009efe <USBD_GetEpDesc>
 80094e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d002      	beq.n	80094f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2210      	movs	r2, #16
 80094f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d006      	beq.n	8009506 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	2200      	movs	r2, #0
 80094fc:	711a      	strb	r2, [r3, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	f042 0202 	orr.w	r2, r2, #2
 8009504:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d006      	beq.n	800951a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	711a      	strb	r2, [r3, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	f042 0202 	orr.w	r2, r2, #2
 8009518:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2243      	movs	r2, #67	@ 0x43
 800951e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009520:	4b02      	ldr	r3, [pc, #8]	@ (800952c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009522:	4618      	mov	r0, r3
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	20000060 	.word	0x20000060

08009530 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009538:	2182      	movs	r1, #130	@ 0x82
 800953a:	4818      	ldr	r0, [pc, #96]	@ (800959c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800953c:	f000 fcdf 	bl	8009efe <USBD_GetEpDesc>
 8009540:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009542:	2101      	movs	r1, #1
 8009544:	4815      	ldr	r0, [pc, #84]	@ (800959c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009546:	f000 fcda 	bl	8009efe <USBD_GetEpDesc>
 800954a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800954c:	2181      	movs	r1, #129	@ 0x81
 800954e:	4813      	ldr	r0, [pc, #76]	@ (800959c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009550:	f000 fcd5 	bl	8009efe <USBD_GetEpDesc>
 8009554:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d002      	beq.n	8009562 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	2210      	movs	r2, #16
 8009560:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d006      	beq.n	8009576 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	2200      	movs	r2, #0
 800956c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009570:	711a      	strb	r2, [r3, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d006      	beq.n	800958a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009584:	711a      	strb	r2, [r3, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2243      	movs	r2, #67	@ 0x43
 800958e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009590:	4b02      	ldr	r3, [pc, #8]	@ (800959c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009592:	4618      	mov	r0, r3
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	20000060 	.word	0x20000060

080095a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	220a      	movs	r2, #10
 80095ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80095ae:	4b03      	ldr	r3, [pc, #12]	@ (80095bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	2000001c 	.word	0x2000001c

080095c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d101      	bne.n	80095d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e009      	b.n	80095e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	33b0      	adds	r3, #176	@ 0xb0
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	32b0      	adds	r2, #176	@ 0xb0
 800960a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800960e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d101      	bne.n	800961a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009616:	2303      	movs	r3, #3
 8009618:	e008      	b.n	800962c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	68ba      	ldr	r2, [r7, #8]
 800961e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	371c      	adds	r7, #28
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	32b0      	adds	r2, #176	@ 0xb0
 800964c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009650:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d101      	bne.n	800965c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009658:	2303      	movs	r3, #3
 800965a:	e004      	b.n	8009666 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3714      	adds	r7, #20
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr
	...

08009674 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	32b0      	adds	r2, #176	@ 0xb0
 8009686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800968a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800968c:	2301      	movs	r3, #1
 800968e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d101      	bne.n	800969a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009696:	2303      	movs	r3, #3
 8009698:	e025      	b.n	80096e6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d11f      	bne.n	80096e4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80096ac:	4b10      	ldr	r3, [pc, #64]	@ (80096f0 <USBD_CDC_TransmitPacket+0x7c>)
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	f003 020f 	and.w	r2, r3, #15
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	4613      	mov	r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4413      	add	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4403      	add	r3, r0
 80096c6:	3318      	adds	r3, #24
 80096c8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80096ca:	4b09      	ldr	r3, [pc, #36]	@ (80096f0 <USBD_CDC_TransmitPacket+0x7c>)
 80096cc:	7819      	ldrb	r1, [r3, #0]
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f001 ffb9 	bl	800b652 <USBD_LL_Transmit>

    ret = USBD_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80096e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	200000a3 	.word	0x200000a3

080096f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	32b0      	adds	r2, #176	@ 0xb0
 8009706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	32b0      	adds	r2, #176	@ 0xb0
 8009716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d101      	bne.n	8009722 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800971e:	2303      	movs	r3, #3
 8009720:	e018      	b.n	8009754 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	7c1b      	ldrb	r3, [r3, #16]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10a      	bne.n	8009740 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800972a:	4b0c      	ldr	r3, [pc, #48]	@ (800975c <USBD_CDC_ReceivePacket+0x68>)
 800972c:	7819      	ldrb	r1, [r3, #0]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009734:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f001 ffab 	bl	800b694 <USBD_LL_PrepareReceive>
 800973e:	e008      	b.n	8009752 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009740:	4b06      	ldr	r3, [pc, #24]	@ (800975c <USBD_CDC_ReceivePacket+0x68>)
 8009742:	7819      	ldrb	r1, [r3, #0]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800974a:	2340      	movs	r3, #64	@ 0x40
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f001 ffa1 	bl	800b694 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	200000a4 	.word	0x200000a4

08009760 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	4613      	mov	r3, r2
 800976c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d101      	bne.n	8009778 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009774:	2303      	movs	r3, #3
 8009776:	e01f      	b.n	80097b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2200      	movs	r2, #0
 800977c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d003      	beq.n	800979e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	68ba      	ldr	r2, [r7, #8]
 800979a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	79fa      	ldrb	r2, [r7, #7]
 80097aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f001 fe1b 	bl	800b3e8 <USBD_LL_Init>
 80097b2:	4603      	mov	r3, r0
 80097b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3718      	adds	r7, #24
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80097ca:	2300      	movs	r3, #0
 80097cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d101      	bne.n	80097d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e025      	b.n	8009824 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	32ae      	adds	r2, #174	@ 0xae
 80097ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00f      	beq.n	8009814 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	32ae      	adds	r2, #174	@ 0xae
 80097fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009804:	f107 020e 	add.w	r2, r7, #14
 8009808:	4610      	mov	r0, r2
 800980a:	4798      	blx	r3
 800980c:	4602      	mov	r2, r0
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800981a:	1c5a      	adds	r2, r3, #1
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f001 fe23 	bl	800b480 <USBD_LL_Start>
 800983a:	4603      	mov	r3, r0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800984c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800984e:	4618      	mov	r0, r3
 8009850:	370c      	adds	r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b084      	sub	sp, #16
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	460b      	mov	r3, r1
 8009864:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009870:	2b00      	cmp	r3, #0
 8009872:	d009      	beq.n	8009888 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	78fa      	ldrb	r2, [r7, #3]
 800987e:	4611      	mov	r1, r2
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	4798      	blx	r3
 8009884:	4603      	mov	r3, r0
 8009886:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009888:	7bfb      	ldrb	r3, [r7, #15]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	460b      	mov	r3, r1
 800989c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	78fa      	ldrb	r2, [r7, #3]
 80098ac:	4611      	mov	r1, r2
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	4798      	blx	r3
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80098b8:	2303      	movs	r3, #3
 80098ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b084      	sub	sp, #16
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80098d6:	6839      	ldr	r1, [r7, #0]
 80098d8:	4618      	mov	r0, r3
 80098da:	f001 f90c 	bl	800aaf6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80098ec:	461a      	mov	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80098fa:	f003 031f 	and.w	r3, r3, #31
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d01a      	beq.n	8009938 <USBD_LL_SetupStage+0x72>
 8009902:	2b02      	cmp	r3, #2
 8009904:	d822      	bhi.n	800994c <USBD_LL_SetupStage+0x86>
 8009906:	2b00      	cmp	r3, #0
 8009908:	d002      	beq.n	8009910 <USBD_LL_SetupStage+0x4a>
 800990a:	2b01      	cmp	r3, #1
 800990c:	d00a      	beq.n	8009924 <USBD_LL_SetupStage+0x5e>
 800990e:	e01d      	b.n	800994c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009916:	4619      	mov	r1, r3
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fb63 	bl	8009fe4 <USBD_StdDevReq>
 800991e:	4603      	mov	r3, r0
 8009920:	73fb      	strb	r3, [r7, #15]
      break;
 8009922:	e020      	b.n	8009966 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800992a:	4619      	mov	r1, r3
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fbcb 	bl	800a0c8 <USBD_StdItfReq>
 8009932:	4603      	mov	r3, r0
 8009934:	73fb      	strb	r3, [r7, #15]
      break;
 8009936:	e016      	b.n	8009966 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800993e:	4619      	mov	r1, r3
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fc2d 	bl	800a1a0 <USBD_StdEPReq>
 8009946:	4603      	mov	r3, r0
 8009948:	73fb      	strb	r3, [r7, #15]
      break;
 800994a:	e00c      	b.n	8009966 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009952:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009956:	b2db      	uxtb	r3, r3
 8009958:	4619      	mov	r1, r3
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f001 fdf0 	bl	800b540 <USBD_LL_StallEP>
 8009960:	4603      	mov	r3, r0
 8009962:	73fb      	strb	r3, [r7, #15]
      break;
 8009964:	bf00      	nop
  }

  return ret;
 8009966:	7bfb      	ldrb	r3, [r7, #15]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b086      	sub	sp, #24
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	460b      	mov	r3, r1
 800997a:	607a      	str	r2, [r7, #4]
 800997c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009982:	7afb      	ldrb	r3, [r7, #11]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d16e      	bne.n	8009a66 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800998e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009996:	2b03      	cmp	r3, #3
 8009998:	f040 8098 	bne.w	8009acc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	689a      	ldr	r2, [r3, #8]
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d913      	bls.n	80099d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	689a      	ldr	r2, [r3, #8]
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	1ad2      	subs	r2, r2, r3
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	68da      	ldr	r2, [r3, #12]
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	4293      	cmp	r3, r2
 80099c0:	bf28      	it	cs
 80099c2:	4613      	movcs	r3, r2
 80099c4:	461a      	mov	r2, r3
 80099c6:	6879      	ldr	r1, [r7, #4]
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f001 f994 	bl	800acf6 <USBD_CtlContinueRx>
 80099ce:	e07d      	b.n	8009acc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80099d6:	f003 031f 	and.w	r3, r3, #31
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d014      	beq.n	8009a08 <USBD_LL_DataOutStage+0x98>
 80099de:	2b02      	cmp	r3, #2
 80099e0:	d81d      	bhi.n	8009a1e <USBD_LL_DataOutStage+0xae>
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d002      	beq.n	80099ec <USBD_LL_DataOutStage+0x7c>
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d003      	beq.n	80099f2 <USBD_LL_DataOutStage+0x82>
 80099ea:	e018      	b.n	8009a1e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80099ec:	2300      	movs	r3, #0
 80099ee:	75bb      	strb	r3, [r7, #22]
            break;
 80099f0:	e018      	b.n	8009a24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	4619      	mov	r1, r3
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f000 fa64 	bl	8009eca <USBD_CoreFindIF>
 8009a02:	4603      	mov	r3, r0
 8009a04:	75bb      	strb	r3, [r7, #22]
            break;
 8009a06:	e00d      	b.n	8009a24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	4619      	mov	r1, r3
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f000 fa66 	bl	8009ee4 <USBD_CoreFindEP>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	75bb      	strb	r3, [r7, #22]
            break;
 8009a1c:	e002      	b.n	8009a24 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	75bb      	strb	r3, [r7, #22]
            break;
 8009a22:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009a24:	7dbb      	ldrb	r3, [r7, #22]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d119      	bne.n	8009a5e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b03      	cmp	r3, #3
 8009a34:	d113      	bne.n	8009a5e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009a36:	7dba      	ldrb	r2, [r7, #22]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	32ae      	adds	r2, #174	@ 0xae
 8009a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00b      	beq.n	8009a5e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009a46:	7dba      	ldrb	r2, [r7, #22]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009a4e:	7dba      	ldrb	r2, [r7, #22]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	32ae      	adds	r2, #174	@ 0xae
 8009a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f001 f95a 	bl	800ad18 <USBD_CtlSendStatus>
 8009a64:	e032      	b.n	8009acc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009a66:	7afb      	ldrb	r3, [r7, #11]
 8009a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	4619      	mov	r1, r3
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f000 fa37 	bl	8009ee4 <USBD_CoreFindEP>
 8009a76:	4603      	mov	r3, r0
 8009a78:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a7a:	7dbb      	ldrb	r3, [r7, #22]
 8009a7c:	2bff      	cmp	r3, #255	@ 0xff
 8009a7e:	d025      	beq.n	8009acc <USBD_LL_DataOutStage+0x15c>
 8009a80:	7dbb      	ldrb	r3, [r7, #22]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d122      	bne.n	8009acc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	d117      	bne.n	8009ac2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009a92:	7dba      	ldrb	r2, [r7, #22]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	32ae      	adds	r2, #174	@ 0xae
 8009a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00f      	beq.n	8009ac2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009aa2:	7dba      	ldrb	r2, [r7, #22]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009aaa:	7dba      	ldrb	r2, [r7, #22]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	32ae      	adds	r2, #174	@ 0xae
 8009ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab4:	699b      	ldr	r3, [r3, #24]
 8009ab6:	7afa      	ldrb	r2, [r7, #11]
 8009ab8:	4611      	mov	r1, r2
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	4798      	blx	r3
 8009abe:	4603      	mov	r3, r0
 8009ac0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009ac2:	7dfb      	ldrb	r3, [r7, #23]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009ac8:	7dfb      	ldrb	r3, [r7, #23]
 8009aca:	e000      	b.n	8009ace <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3718      	adds	r7, #24
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b086      	sub	sp, #24
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	60f8      	str	r0, [r7, #12]
 8009ade:	460b      	mov	r3, r1
 8009ae0:	607a      	str	r2, [r7, #4]
 8009ae2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009ae4:	7afb      	ldrb	r3, [r7, #11]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d16f      	bne.n	8009bca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	3314      	adds	r3, #20
 8009aee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d15a      	bne.n	8009bb0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	689a      	ldr	r2, [r3, #8]
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d914      	bls.n	8009b30 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	689a      	ldr	r2, [r3, #8]
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	1ad2      	subs	r2, r2, r3
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	461a      	mov	r2, r3
 8009b1a:	6879      	ldr	r1, [r7, #4]
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f001 f8bc 	bl	800ac9a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b22:	2300      	movs	r3, #0
 8009b24:	2200      	movs	r2, #0
 8009b26:	2100      	movs	r1, #0
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f001 fdb3 	bl	800b694 <USBD_LL_PrepareReceive>
 8009b2e:	e03f      	b.n	8009bb0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	68da      	ldr	r2, [r3, #12]
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d11c      	bne.n	8009b76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d316      	bcc.n	8009b76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	685a      	ldr	r2, [r3, #4]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d20f      	bcs.n	8009b76 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009b56:	2200      	movs	r2, #0
 8009b58:	2100      	movs	r1, #0
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f001 f89d 	bl	800ac9a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b68:	2300      	movs	r3, #0
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f001 fd90 	bl	800b694 <USBD_LL_PrepareReceive>
 8009b74:	e01c      	b.n	8009bb0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	d10f      	bne.n	8009ba2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d009      	beq.n	8009ba2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2200      	movs	r2, #0
 8009b92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ba2:	2180      	movs	r1, #128	@ 0x80
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f001 fccb 	bl	800b540 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f001 f8c7 	bl	800ad3e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d03a      	beq.n	8009c30 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f7ff fe42 	bl	8009844 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009bc8:	e032      	b.n	8009c30 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009bca:	7afb      	ldrb	r3, [r7, #11]
 8009bcc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f000 f985 	bl	8009ee4 <USBD_CoreFindEP>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bde:	7dfb      	ldrb	r3, [r7, #23]
 8009be0:	2bff      	cmp	r3, #255	@ 0xff
 8009be2:	d025      	beq.n	8009c30 <USBD_LL_DataInStage+0x15a>
 8009be4:	7dfb      	ldrb	r3, [r7, #23]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d122      	bne.n	8009c30 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	d11c      	bne.n	8009c30 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009bf6:	7dfa      	ldrb	r2, [r7, #23]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	32ae      	adds	r2, #174	@ 0xae
 8009bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d014      	beq.n	8009c30 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009c06:	7dfa      	ldrb	r2, [r7, #23]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009c0e:	7dfa      	ldrb	r2, [r7, #23]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	32ae      	adds	r2, #174	@ 0xae
 8009c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c18:	695b      	ldr	r3, [r3, #20]
 8009c1a:	7afa      	ldrb	r2, [r7, #11]
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	4798      	blx	r3
 8009c22:	4603      	mov	r3, r0
 8009c24:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009c26:	7dbb      	ldrb	r3, [r7, #22]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d001      	beq.n	8009c30 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009c2c:	7dbb      	ldrb	r3, [r7, #22]
 8009c2e:	e000      	b.n	8009c32 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009c30:	2300      	movs	r3, #0
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3718      	adds	r7, #24
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b084      	sub	sp, #16
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d014      	beq.n	8009ca0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00e      	beq.n	8009ca0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	6852      	ldr	r2, [r2, #4]
 8009c8e:	b2d2      	uxtb	r2, r2
 8009c90:	4611      	mov	r1, r2
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	4798      	blx	r3
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d001      	beq.n	8009ca0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ca0:	2340      	movs	r3, #64	@ 0x40
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f001 fc05 	bl	800b4b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2240      	movs	r2, #64	@ 0x40
 8009cb8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009cbc:	2340      	movs	r3, #64	@ 0x40
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	2180      	movs	r1, #128	@ 0x80
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f001 fbf7 	bl	800b4b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2240      	movs	r2, #64	@ 0x40
 8009cd2:	621a      	str	r2, [r3, #32]

  return ret;
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b083      	sub	sp, #12
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	78fa      	ldrb	r2, [r7, #3]
 8009cee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	370c      	adds	r7, #12
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr

08009cfe <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009cfe:	b480      	push	{r7}
 8009d00:	b083      	sub	sp, #12
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	2b04      	cmp	r3, #4
 8009d10:	d006      	beq.n	8009d20 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d18:	b2da      	uxtb	r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2204      	movs	r2, #4
 8009d24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	370c      	adds	r7, #12
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr

08009d36 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b083      	sub	sp, #12
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	2b04      	cmp	r3, #4
 8009d48:	d106      	bne.n	8009d58 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b082      	sub	sp, #8
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	2b03      	cmp	r3, #3
 8009d78:	d110      	bne.n	8009d9c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00b      	beq.n	8009d9c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d8a:	69db      	ldr	r3, [r3, #28]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d005      	beq.n	8009d9c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d96:	69db      	ldr	r3, [r3, #28]
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b082      	sub	sp, #8
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	460b      	mov	r3, r1
 8009db0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	32ae      	adds	r2, #174	@ 0xae
 8009dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d101      	bne.n	8009dc8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e01c      	b.n	8009e02 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	2b03      	cmp	r3, #3
 8009dd2:	d115      	bne.n	8009e00 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	32ae      	adds	r2, #174	@ 0xae
 8009dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009de2:	6a1b      	ldr	r3, [r3, #32]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00b      	beq.n	8009e00 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	32ae      	adds	r2, #174	@ 0xae
 8009df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df6:	6a1b      	ldr	r3, [r3, #32]
 8009df8:	78fa      	ldrb	r2, [r7, #3]
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3708      	adds	r7, #8
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b082      	sub	sp, #8
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
 8009e12:	460b      	mov	r3, r1
 8009e14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	32ae      	adds	r2, #174	@ 0xae
 8009e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d101      	bne.n	8009e2c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	e01c      	b.n	8009e66 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	2b03      	cmp	r3, #3
 8009e36:	d115      	bne.n	8009e64 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	32ae      	adds	r2, #174	@ 0xae
 8009e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00b      	beq.n	8009e64 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	32ae      	adds	r2, #174	@ 0xae
 8009e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e5c:	78fa      	ldrb	r2, [r7, #3]
 8009e5e:	4611      	mov	r1, r2
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b083      	sub	sp, #12
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00e      	beq.n	8009ec0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	6852      	ldr	r2, [r2, #4]
 8009eae:	b2d2      	uxtb	r2, r2
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	4798      	blx	r3
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d001      	beq.n	8009ec0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b083      	sub	sp, #12
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009ed6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	460b      	mov	r3, r1
 8009eee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009ef0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	370c      	adds	r7, #12
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr

08009efe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b086      	sub	sp, #24
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	460b      	mov	r3, r1
 8009f08:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009f12:	2300      	movs	r3, #0
 8009f14:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	885b      	ldrh	r3, [r3, #2]
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	7812      	ldrb	r2, [r2, #0]
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d91f      	bls.n	8009f64 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009f2a:	e013      	b.n	8009f54 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009f2c:	f107 030a 	add.w	r3, r7, #10
 8009f30:	4619      	mov	r1, r3
 8009f32:	6978      	ldr	r0, [r7, #20]
 8009f34:	f000 f81b 	bl	8009f6e <USBD_GetNextDesc>
 8009f38:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	785b      	ldrb	r3, [r3, #1]
 8009f3e:	2b05      	cmp	r3, #5
 8009f40:	d108      	bne.n	8009f54 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	789b      	ldrb	r3, [r3, #2]
 8009f4a:	78fa      	ldrb	r2, [r7, #3]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d008      	beq.n	8009f62 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009f50:	2300      	movs	r3, #0
 8009f52:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	885b      	ldrh	r3, [r3, #2]
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	897b      	ldrh	r3, [r7, #10]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d8e5      	bhi.n	8009f2c <USBD_GetEpDesc+0x2e>
 8009f60:	e000      	b.n	8009f64 <USBD_GetEpDesc+0x66>
          break;
 8009f62:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009f64:	693b      	ldr	r3, [r7, #16]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3718      	adds	r7, #24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009f6e:	b480      	push	{r7}
 8009f70:	b085      	sub	sp, #20
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
 8009f76:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	7812      	ldrb	r2, [r2, #0]
 8009f84:	4413      	add	r3, r2
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	461a      	mov	r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4413      	add	r3, r2
 8009f96:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009f98:	68fb      	ldr	r3, [r7, #12]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3714      	adds	r7, #20
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b087      	sub	sp, #28
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009fc4:	8a3b      	ldrh	r3, [r7, #16]
 8009fc6:	021b      	lsls	r3, r3, #8
 8009fc8:	b21a      	sxth	r2, r3
 8009fca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	b21b      	sxth	r3, r3
 8009fd2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009fd4:	89fb      	ldrh	r3, [r7, #14]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	371c      	adds	r7, #28
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
	...

08009fe4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ffa:	2b40      	cmp	r3, #64	@ 0x40
 8009ffc:	d005      	beq.n	800a00a <USBD_StdDevReq+0x26>
 8009ffe:	2b40      	cmp	r3, #64	@ 0x40
 800a000:	d857      	bhi.n	800a0b2 <USBD_StdDevReq+0xce>
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00f      	beq.n	800a026 <USBD_StdDevReq+0x42>
 800a006:	2b20      	cmp	r3, #32
 800a008:	d153      	bne.n	800a0b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	32ae      	adds	r2, #174	@ 0xae
 800a014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	6839      	ldr	r1, [r7, #0]
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	4798      	blx	r3
 800a020:	4603      	mov	r3, r0
 800a022:	73fb      	strb	r3, [r7, #15]
      break;
 800a024:	e04a      	b.n	800a0bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	785b      	ldrb	r3, [r3, #1]
 800a02a:	2b09      	cmp	r3, #9
 800a02c:	d83b      	bhi.n	800a0a6 <USBD_StdDevReq+0xc2>
 800a02e:	a201      	add	r2, pc, #4	@ (adr r2, 800a034 <USBD_StdDevReq+0x50>)
 800a030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a034:	0800a089 	.word	0x0800a089
 800a038:	0800a09d 	.word	0x0800a09d
 800a03c:	0800a0a7 	.word	0x0800a0a7
 800a040:	0800a093 	.word	0x0800a093
 800a044:	0800a0a7 	.word	0x0800a0a7
 800a048:	0800a067 	.word	0x0800a067
 800a04c:	0800a05d 	.word	0x0800a05d
 800a050:	0800a0a7 	.word	0x0800a0a7
 800a054:	0800a07f 	.word	0x0800a07f
 800a058:	0800a071 	.word	0x0800a071
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a05c:	6839      	ldr	r1, [r7, #0]
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 fa3c 	bl	800a4dc <USBD_GetDescriptor>
          break;
 800a064:	e024      	b.n	800a0b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a066:	6839      	ldr	r1, [r7, #0]
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 fba1 	bl	800a7b0 <USBD_SetAddress>
          break;
 800a06e:	e01f      	b.n	800a0b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fbe0 	bl	800a838 <USBD_SetConfig>
 800a078:	4603      	mov	r3, r0
 800a07a:	73fb      	strb	r3, [r7, #15]
          break;
 800a07c:	e018      	b.n	800a0b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a07e:	6839      	ldr	r1, [r7, #0]
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fc83 	bl	800a98c <USBD_GetConfig>
          break;
 800a086:	e013      	b.n	800a0b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a088:	6839      	ldr	r1, [r7, #0]
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fcb4 	bl	800a9f8 <USBD_GetStatus>
          break;
 800a090:	e00e      	b.n	800a0b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a092:	6839      	ldr	r1, [r7, #0]
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fce3 	bl	800aa60 <USBD_SetFeature>
          break;
 800a09a:	e009      	b.n	800a0b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fd07 	bl	800aab2 <USBD_ClrFeature>
          break;
 800a0a4:	e004      	b.n	800a0b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a0a6:	6839      	ldr	r1, [r7, #0]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fd5e 	bl	800ab6a <USBD_CtlError>
          break;
 800a0ae:	bf00      	nop
      }
      break;
 800a0b0:	e004      	b.n	800a0bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a0b2:	6839      	ldr	r1, [r7, #0]
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fd58 	bl	800ab6a <USBD_CtlError>
      break;
 800a0ba:	bf00      	nop
  }

  return ret;
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop

0800a0c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a0de:	2b40      	cmp	r3, #64	@ 0x40
 800a0e0:	d005      	beq.n	800a0ee <USBD_StdItfReq+0x26>
 800a0e2:	2b40      	cmp	r3, #64	@ 0x40
 800a0e4:	d852      	bhi.n	800a18c <USBD_StdItfReq+0xc4>
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d001      	beq.n	800a0ee <USBD_StdItfReq+0x26>
 800a0ea:	2b20      	cmp	r3, #32
 800a0ec:	d14e      	bne.n	800a18c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d840      	bhi.n	800a17e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	889b      	ldrh	r3, [r3, #4]
 800a100:	b2db      	uxtb	r3, r3
 800a102:	2b01      	cmp	r3, #1
 800a104:	d836      	bhi.n	800a174 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	889b      	ldrh	r3, [r3, #4]
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	4619      	mov	r1, r3
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f7ff fedb 	bl	8009eca <USBD_CoreFindIF>
 800a114:	4603      	mov	r3, r0
 800a116:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a118:	7bbb      	ldrb	r3, [r7, #14]
 800a11a:	2bff      	cmp	r3, #255	@ 0xff
 800a11c:	d01d      	beq.n	800a15a <USBD_StdItfReq+0x92>
 800a11e:	7bbb      	ldrb	r3, [r7, #14]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d11a      	bne.n	800a15a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a124:	7bba      	ldrb	r2, [r7, #14]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	32ae      	adds	r2, #174	@ 0xae
 800a12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00f      	beq.n	800a154 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a134:	7bba      	ldrb	r2, [r7, #14]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a13c:	7bba      	ldrb	r2, [r7, #14]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	32ae      	adds	r2, #174	@ 0xae
 800a142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	4798      	blx	r3
 800a14e:	4603      	mov	r3, r0
 800a150:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a152:	e004      	b.n	800a15e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a154:	2303      	movs	r3, #3
 800a156:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a158:	e001      	b.n	800a15e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a15a:	2303      	movs	r3, #3
 800a15c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	88db      	ldrh	r3, [r3, #6]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d110      	bne.n	800a188 <USBD_StdItfReq+0xc0>
 800a166:	7bfb      	ldrb	r3, [r7, #15]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10d      	bne.n	800a188 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 fdd3 	bl	800ad18 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a172:	e009      	b.n	800a188 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a174:	6839      	ldr	r1, [r7, #0]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fcf7 	bl	800ab6a <USBD_CtlError>
          break;
 800a17c:	e004      	b.n	800a188 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a17e:	6839      	ldr	r1, [r7, #0]
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 fcf2 	bl	800ab6a <USBD_CtlError>
          break;
 800a186:	e000      	b.n	800a18a <USBD_StdItfReq+0xc2>
          break;
 800a188:	bf00      	nop
      }
      break;
 800a18a:	e004      	b.n	800a196 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a18c:	6839      	ldr	r1, [r7, #0]
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 fceb 	bl	800ab6a <USBD_CtlError>
      break;
 800a194:	bf00      	nop
  }

  return ret;
 800a196:	7bfb      	ldrb	r3, [r7, #15]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	889b      	ldrh	r3, [r3, #4]
 800a1b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a1bc:	2b40      	cmp	r3, #64	@ 0x40
 800a1be:	d007      	beq.n	800a1d0 <USBD_StdEPReq+0x30>
 800a1c0:	2b40      	cmp	r3, #64	@ 0x40
 800a1c2:	f200 817f 	bhi.w	800a4c4 <USBD_StdEPReq+0x324>
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d02a      	beq.n	800a220 <USBD_StdEPReq+0x80>
 800a1ca:	2b20      	cmp	r3, #32
 800a1cc:	f040 817a 	bne.w	800a4c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a1d0:	7bbb      	ldrb	r3, [r7, #14]
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f7ff fe85 	bl	8009ee4 <USBD_CoreFindEP>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1de:	7b7b      	ldrb	r3, [r7, #13]
 800a1e0:	2bff      	cmp	r3, #255	@ 0xff
 800a1e2:	f000 8174 	beq.w	800a4ce <USBD_StdEPReq+0x32e>
 800a1e6:	7b7b      	ldrb	r3, [r7, #13]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f040 8170 	bne.w	800a4ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a1ee:	7b7a      	ldrb	r2, [r7, #13]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a1f6:	7b7a      	ldrb	r2, [r7, #13]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	32ae      	adds	r2, #174	@ 0xae
 800a1fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	2b00      	cmp	r3, #0
 800a204:	f000 8163 	beq.w	800a4ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a208:	7b7a      	ldrb	r2, [r7, #13]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	32ae      	adds	r2, #174	@ 0xae
 800a20e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	6839      	ldr	r1, [r7, #0]
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	4798      	blx	r3
 800a21a:	4603      	mov	r3, r0
 800a21c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a21e:	e156      	b.n	800a4ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	785b      	ldrb	r3, [r3, #1]
 800a224:	2b03      	cmp	r3, #3
 800a226:	d008      	beq.n	800a23a <USBD_StdEPReq+0x9a>
 800a228:	2b03      	cmp	r3, #3
 800a22a:	f300 8145 	bgt.w	800a4b8 <USBD_StdEPReq+0x318>
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f000 809b 	beq.w	800a36a <USBD_StdEPReq+0x1ca>
 800a234:	2b01      	cmp	r3, #1
 800a236:	d03c      	beq.n	800a2b2 <USBD_StdEPReq+0x112>
 800a238:	e13e      	b.n	800a4b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a240:	b2db      	uxtb	r3, r3
 800a242:	2b02      	cmp	r3, #2
 800a244:	d002      	beq.n	800a24c <USBD_StdEPReq+0xac>
 800a246:	2b03      	cmp	r3, #3
 800a248:	d016      	beq.n	800a278 <USBD_StdEPReq+0xd8>
 800a24a:	e02c      	b.n	800a2a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a24c:	7bbb      	ldrb	r3, [r7, #14]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00d      	beq.n	800a26e <USBD_StdEPReq+0xce>
 800a252:	7bbb      	ldrb	r3, [r7, #14]
 800a254:	2b80      	cmp	r3, #128	@ 0x80
 800a256:	d00a      	beq.n	800a26e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a258:	7bbb      	ldrb	r3, [r7, #14]
 800a25a:	4619      	mov	r1, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f001 f96f 	bl	800b540 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a262:	2180      	movs	r1, #128	@ 0x80
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f001 f96b 	bl	800b540 <USBD_LL_StallEP>
 800a26a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a26c:	e020      	b.n	800a2b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a26e:	6839      	ldr	r1, [r7, #0]
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 fc7a 	bl	800ab6a <USBD_CtlError>
              break;
 800a276:	e01b      	b.n	800a2b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	885b      	ldrh	r3, [r3, #2]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d10e      	bne.n	800a29e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a280:	7bbb      	ldrb	r3, [r7, #14]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00b      	beq.n	800a29e <USBD_StdEPReq+0xfe>
 800a286:	7bbb      	ldrb	r3, [r7, #14]
 800a288:	2b80      	cmp	r3, #128	@ 0x80
 800a28a:	d008      	beq.n	800a29e <USBD_StdEPReq+0xfe>
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	88db      	ldrh	r3, [r3, #6]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d104      	bne.n	800a29e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a294:	7bbb      	ldrb	r3, [r7, #14]
 800a296:	4619      	mov	r1, r3
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f001 f951 	bl	800b540 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 fd3a 	bl	800ad18 <USBD_CtlSendStatus>

              break;
 800a2a4:	e004      	b.n	800a2b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a2a6:	6839      	ldr	r1, [r7, #0]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fc5e 	bl	800ab6a <USBD_CtlError>
              break;
 800a2ae:	bf00      	nop
          }
          break;
 800a2b0:	e107      	b.n	800a4c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	2b02      	cmp	r3, #2
 800a2bc:	d002      	beq.n	800a2c4 <USBD_StdEPReq+0x124>
 800a2be:	2b03      	cmp	r3, #3
 800a2c0:	d016      	beq.n	800a2f0 <USBD_StdEPReq+0x150>
 800a2c2:	e04b      	b.n	800a35c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2c4:	7bbb      	ldrb	r3, [r7, #14]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00d      	beq.n	800a2e6 <USBD_StdEPReq+0x146>
 800a2ca:	7bbb      	ldrb	r3, [r7, #14]
 800a2cc:	2b80      	cmp	r3, #128	@ 0x80
 800a2ce:	d00a      	beq.n	800a2e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a2d0:	7bbb      	ldrb	r3, [r7, #14]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f001 f933 	bl	800b540 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2da:	2180      	movs	r1, #128	@ 0x80
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f001 f92f 	bl	800b540 <USBD_LL_StallEP>
 800a2e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a2e4:	e040      	b.n	800a368 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a2e6:	6839      	ldr	r1, [r7, #0]
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 fc3e 	bl	800ab6a <USBD_CtlError>
              break;
 800a2ee:	e03b      	b.n	800a368 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	885b      	ldrh	r3, [r3, #2]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d136      	bne.n	800a366 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a2f8:	7bbb      	ldrb	r3, [r7, #14]
 800a2fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d004      	beq.n	800a30c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a302:	7bbb      	ldrb	r3, [r7, #14]
 800a304:	4619      	mov	r1, r3
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f001 f939 	bl	800b57e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 fd03 	bl	800ad18 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a312:	7bbb      	ldrb	r3, [r7, #14]
 800a314:	4619      	mov	r1, r3
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7ff fde4 	bl	8009ee4 <USBD_CoreFindEP>
 800a31c:	4603      	mov	r3, r0
 800a31e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a320:	7b7b      	ldrb	r3, [r7, #13]
 800a322:	2bff      	cmp	r3, #255	@ 0xff
 800a324:	d01f      	beq.n	800a366 <USBD_StdEPReq+0x1c6>
 800a326:	7b7b      	ldrb	r3, [r7, #13]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d11c      	bne.n	800a366 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a32c:	7b7a      	ldrb	r2, [r7, #13]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a334:	7b7a      	ldrb	r2, [r7, #13]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	32ae      	adds	r2, #174	@ 0xae
 800a33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d010      	beq.n	800a366 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a344:	7b7a      	ldrb	r2, [r7, #13]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	32ae      	adds	r2, #174	@ 0xae
 800a34a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	6839      	ldr	r1, [r7, #0]
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	4798      	blx	r3
 800a356:	4603      	mov	r3, r0
 800a358:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a35a:	e004      	b.n	800a366 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a35c:	6839      	ldr	r1, [r7, #0]
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fc03 	bl	800ab6a <USBD_CtlError>
              break;
 800a364:	e000      	b.n	800a368 <USBD_StdEPReq+0x1c8>
              break;
 800a366:	bf00      	nop
          }
          break;
 800a368:	e0ab      	b.n	800a4c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a370:	b2db      	uxtb	r3, r3
 800a372:	2b02      	cmp	r3, #2
 800a374:	d002      	beq.n	800a37c <USBD_StdEPReq+0x1dc>
 800a376:	2b03      	cmp	r3, #3
 800a378:	d032      	beq.n	800a3e0 <USBD_StdEPReq+0x240>
 800a37a:	e097      	b.n	800a4ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a37c:	7bbb      	ldrb	r3, [r7, #14]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d007      	beq.n	800a392 <USBD_StdEPReq+0x1f2>
 800a382:	7bbb      	ldrb	r3, [r7, #14]
 800a384:	2b80      	cmp	r3, #128	@ 0x80
 800a386:	d004      	beq.n	800a392 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a388:	6839      	ldr	r1, [r7, #0]
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 fbed 	bl	800ab6a <USBD_CtlError>
                break;
 800a390:	e091      	b.n	800a4b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a392:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a396:	2b00      	cmp	r3, #0
 800a398:	da0b      	bge.n	800a3b2 <USBD_StdEPReq+0x212>
 800a39a:	7bbb      	ldrb	r3, [r7, #14]
 800a39c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	4413      	add	r3, r2
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	3310      	adds	r3, #16
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	3304      	adds	r3, #4
 800a3b0:	e00b      	b.n	800a3ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a3b2:	7bbb      	ldrb	r3, [r7, #14]
 800a3b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	4413      	add	r3, r2
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	3304      	adds	r3, #4
 800a3ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	2202      	movs	r2, #2
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fc43 	bl	800ac64 <USBD_CtlSendData>
              break;
 800a3de:	e06a      	b.n	800a4b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a3e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	da11      	bge.n	800a40c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a3e8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ea:	f003 020f 	and.w	r2, r3, #15
 800a3ee:	6879      	ldr	r1, [r7, #4]
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	4413      	add	r3, r2
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	440b      	add	r3, r1
 800a3fa:	3324      	adds	r3, #36	@ 0x24
 800a3fc:	881b      	ldrh	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d117      	bne.n	800a432 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a402:	6839      	ldr	r1, [r7, #0]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 fbb0 	bl	800ab6a <USBD_CtlError>
                  break;
 800a40a:	e054      	b.n	800a4b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a40c:	7bbb      	ldrb	r3, [r7, #14]
 800a40e:	f003 020f 	and.w	r2, r3, #15
 800a412:	6879      	ldr	r1, [r7, #4]
 800a414:	4613      	mov	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	4413      	add	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	440b      	add	r3, r1
 800a41e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a422:	881b      	ldrh	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d104      	bne.n	800a432 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a428:	6839      	ldr	r1, [r7, #0]
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 fb9d 	bl	800ab6a <USBD_CtlError>
                  break;
 800a430:	e041      	b.n	800a4b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a432:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a436:	2b00      	cmp	r3, #0
 800a438:	da0b      	bge.n	800a452 <USBD_StdEPReq+0x2b2>
 800a43a:	7bbb      	ldrb	r3, [r7, #14]
 800a43c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a440:	4613      	mov	r3, r2
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	4413      	add	r3, r2
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	3310      	adds	r3, #16
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	4413      	add	r3, r2
 800a44e:	3304      	adds	r3, #4
 800a450:	e00b      	b.n	800a46a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a452:	7bbb      	ldrb	r3, [r7, #14]
 800a454:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a458:	4613      	mov	r3, r2
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	4413      	add	r3, r2
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	4413      	add	r3, r2
 800a468:	3304      	adds	r3, #4
 800a46a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a46c:	7bbb      	ldrb	r3, [r7, #14]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d002      	beq.n	800a478 <USBD_StdEPReq+0x2d8>
 800a472:	7bbb      	ldrb	r3, [r7, #14]
 800a474:	2b80      	cmp	r3, #128	@ 0x80
 800a476:	d103      	bne.n	800a480 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	2200      	movs	r2, #0
 800a47c:	601a      	str	r2, [r3, #0]
 800a47e:	e00e      	b.n	800a49e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a480:	7bbb      	ldrb	r3, [r7, #14]
 800a482:	4619      	mov	r1, r3
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f001 f899 	bl	800b5bc <USBD_LL_IsStallEP>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d003      	beq.n	800a498 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	2201      	movs	r2, #1
 800a494:	601a      	str	r2, [r3, #0]
 800a496:	e002      	b.n	800a49e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	2200      	movs	r2, #0
 800a49c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	2202      	movs	r2, #2
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fbdd 	bl	800ac64 <USBD_CtlSendData>
              break;
 800a4aa:	e004      	b.n	800a4b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 fb5b 	bl	800ab6a <USBD_CtlError>
              break;
 800a4b4:	bf00      	nop
          }
          break;
 800a4b6:	e004      	b.n	800a4c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a4b8:	6839      	ldr	r1, [r7, #0]
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 fb55 	bl	800ab6a <USBD_CtlError>
          break;
 800a4c0:	bf00      	nop
      }
      break;
 800a4c2:	e005      	b.n	800a4d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a4c4:	6839      	ldr	r1, [r7, #0]
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 fb4f 	bl	800ab6a <USBD_CtlError>
      break;
 800a4cc:	e000      	b.n	800a4d0 <USBD_StdEPReq+0x330>
      break;
 800a4ce:	bf00      	nop
  }

  return ret;
 800a4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
	...

0800a4dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	885b      	ldrh	r3, [r3, #2]
 800a4f6:	0a1b      	lsrs	r3, r3, #8
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	2b06      	cmp	r3, #6
 800a4fe:	f200 8128 	bhi.w	800a752 <USBD_GetDescriptor+0x276>
 800a502:	a201      	add	r2, pc, #4	@ (adr r2, 800a508 <USBD_GetDescriptor+0x2c>)
 800a504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a508:	0800a525 	.word	0x0800a525
 800a50c:	0800a53d 	.word	0x0800a53d
 800a510:	0800a57d 	.word	0x0800a57d
 800a514:	0800a753 	.word	0x0800a753
 800a518:	0800a753 	.word	0x0800a753
 800a51c:	0800a6f3 	.word	0x0800a6f3
 800a520:	0800a71f 	.word	0x0800a71f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	7c12      	ldrb	r2, [r2, #16]
 800a530:	f107 0108 	add.w	r1, r7, #8
 800a534:	4610      	mov	r0, r2
 800a536:	4798      	blx	r3
 800a538:	60f8      	str	r0, [r7, #12]
      break;
 800a53a:	e112      	b.n	800a762 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	7c1b      	ldrb	r3, [r3, #16]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10d      	bne.n	800a560 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a54c:	f107 0208 	add.w	r2, r7, #8
 800a550:	4610      	mov	r0, r2
 800a552:	4798      	blx	r3
 800a554:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	3301      	adds	r3, #1
 800a55a:	2202      	movs	r2, #2
 800a55c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a55e:	e100      	b.n	800a762 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a568:	f107 0208 	add.w	r2, r7, #8
 800a56c:	4610      	mov	r0, r2
 800a56e:	4798      	blx	r3
 800a570:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	3301      	adds	r3, #1
 800a576:	2202      	movs	r2, #2
 800a578:	701a      	strb	r2, [r3, #0]
      break;
 800a57a:	e0f2      	b.n	800a762 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	885b      	ldrh	r3, [r3, #2]
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b05      	cmp	r3, #5
 800a584:	f200 80ac 	bhi.w	800a6e0 <USBD_GetDescriptor+0x204>
 800a588:	a201      	add	r2, pc, #4	@ (adr r2, 800a590 <USBD_GetDescriptor+0xb4>)
 800a58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58e:	bf00      	nop
 800a590:	0800a5a9 	.word	0x0800a5a9
 800a594:	0800a5dd 	.word	0x0800a5dd
 800a598:	0800a611 	.word	0x0800a611
 800a59c:	0800a645 	.word	0x0800a645
 800a5a0:	0800a679 	.word	0x0800a679
 800a5a4:	0800a6ad 	.word	0x0800a6ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00b      	beq.n	800a5cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	7c12      	ldrb	r2, [r2, #16]
 800a5c0:	f107 0108 	add.w	r1, r7, #8
 800a5c4:	4610      	mov	r0, r2
 800a5c6:	4798      	blx	r3
 800a5c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5ca:	e091      	b.n	800a6f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5cc:	6839      	ldr	r1, [r7, #0]
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 facb 	bl	800ab6a <USBD_CtlError>
            err++;
 800a5d4:	7afb      	ldrb	r3, [r7, #11]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a5da:	e089      	b.n	800a6f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00b      	beq.n	800a600 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	7c12      	ldrb	r2, [r2, #16]
 800a5f4:	f107 0108 	add.w	r1, r7, #8
 800a5f8:	4610      	mov	r0, r2
 800a5fa:	4798      	blx	r3
 800a5fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5fe:	e077      	b.n	800a6f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a600:	6839      	ldr	r1, [r7, #0]
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 fab1 	bl	800ab6a <USBD_CtlError>
            err++;
 800a608:	7afb      	ldrb	r3, [r7, #11]
 800a60a:	3301      	adds	r3, #1
 800a60c:	72fb      	strb	r3, [r7, #11]
          break;
 800a60e:	e06f      	b.n	800a6f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00b      	beq.n	800a634 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	7c12      	ldrb	r2, [r2, #16]
 800a628:	f107 0108 	add.w	r1, r7, #8
 800a62c:	4610      	mov	r0, r2
 800a62e:	4798      	blx	r3
 800a630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a632:	e05d      	b.n	800a6f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a634:	6839      	ldr	r1, [r7, #0]
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 fa97 	bl	800ab6a <USBD_CtlError>
            err++;
 800a63c:	7afb      	ldrb	r3, [r7, #11]
 800a63e:	3301      	adds	r3, #1
 800a640:	72fb      	strb	r3, [r7, #11]
          break;
 800a642:	e055      	b.n	800a6f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d00b      	beq.n	800a668 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	7c12      	ldrb	r2, [r2, #16]
 800a65c:	f107 0108 	add.w	r1, r7, #8
 800a660:	4610      	mov	r0, r2
 800a662:	4798      	blx	r3
 800a664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a666:	e043      	b.n	800a6f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a668:	6839      	ldr	r1, [r7, #0]
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 fa7d 	bl	800ab6a <USBD_CtlError>
            err++;
 800a670:	7afb      	ldrb	r3, [r7, #11]
 800a672:	3301      	adds	r3, #1
 800a674:	72fb      	strb	r3, [r7, #11]
          break;
 800a676:	e03b      	b.n	800a6f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a67e:	695b      	ldr	r3, [r3, #20]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00b      	beq.n	800a69c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a68a:	695b      	ldr	r3, [r3, #20]
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	7c12      	ldrb	r2, [r2, #16]
 800a690:	f107 0108 	add.w	r1, r7, #8
 800a694:	4610      	mov	r0, r2
 800a696:	4798      	blx	r3
 800a698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a69a:	e029      	b.n	800a6f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a69c:	6839      	ldr	r1, [r7, #0]
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 fa63 	bl	800ab6a <USBD_CtlError>
            err++;
 800a6a4:	7afb      	ldrb	r3, [r7, #11]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	72fb      	strb	r3, [r7, #11]
          break;
 800a6aa:	e021      	b.n	800a6f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00b      	beq.n	800a6d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	7c12      	ldrb	r2, [r2, #16]
 800a6c4:	f107 0108 	add.w	r1, r7, #8
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	4798      	blx	r3
 800a6cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6ce:	e00f      	b.n	800a6f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6d0:	6839      	ldr	r1, [r7, #0]
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 fa49 	bl	800ab6a <USBD_CtlError>
            err++;
 800a6d8:	7afb      	ldrb	r3, [r7, #11]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a6de:	e007      	b.n	800a6f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a6e0:	6839      	ldr	r1, [r7, #0]
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fa41 	bl	800ab6a <USBD_CtlError>
          err++;
 800a6e8:	7afb      	ldrb	r3, [r7, #11]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a6ee:	bf00      	nop
      }
      break;
 800a6f0:	e037      	b.n	800a762 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	7c1b      	ldrb	r3, [r3, #16]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d109      	bne.n	800a70e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a702:	f107 0208 	add.w	r2, r7, #8
 800a706:	4610      	mov	r0, r2
 800a708:	4798      	blx	r3
 800a70a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a70c:	e029      	b.n	800a762 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a70e:	6839      	ldr	r1, [r7, #0]
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 fa2a 	bl	800ab6a <USBD_CtlError>
        err++;
 800a716:	7afb      	ldrb	r3, [r7, #11]
 800a718:	3301      	adds	r3, #1
 800a71a:	72fb      	strb	r3, [r7, #11]
      break;
 800a71c:	e021      	b.n	800a762 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	7c1b      	ldrb	r3, [r3, #16]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10d      	bne.n	800a742 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a72c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a72e:	f107 0208 	add.w	r2, r7, #8
 800a732:	4610      	mov	r0, r2
 800a734:	4798      	blx	r3
 800a736:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	3301      	adds	r3, #1
 800a73c:	2207      	movs	r2, #7
 800a73e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a740:	e00f      	b.n	800a762 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a742:	6839      	ldr	r1, [r7, #0]
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 fa10 	bl	800ab6a <USBD_CtlError>
        err++;
 800a74a:	7afb      	ldrb	r3, [r7, #11]
 800a74c:	3301      	adds	r3, #1
 800a74e:	72fb      	strb	r3, [r7, #11]
      break;
 800a750:	e007      	b.n	800a762 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a752:	6839      	ldr	r1, [r7, #0]
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 fa08 	bl	800ab6a <USBD_CtlError>
      err++;
 800a75a:	7afb      	ldrb	r3, [r7, #11]
 800a75c:	3301      	adds	r3, #1
 800a75e:	72fb      	strb	r3, [r7, #11]
      break;
 800a760:	bf00      	nop
  }

  if (err != 0U)
 800a762:	7afb      	ldrb	r3, [r7, #11]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d11e      	bne.n	800a7a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	88db      	ldrh	r3, [r3, #6]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d016      	beq.n	800a79e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a770:	893b      	ldrh	r3, [r7, #8]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00e      	beq.n	800a794 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	88da      	ldrh	r2, [r3, #6]
 800a77a:	893b      	ldrh	r3, [r7, #8]
 800a77c:	4293      	cmp	r3, r2
 800a77e:	bf28      	it	cs
 800a780:	4613      	movcs	r3, r2
 800a782:	b29b      	uxth	r3, r3
 800a784:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a786:	893b      	ldrh	r3, [r7, #8]
 800a788:	461a      	mov	r2, r3
 800a78a:	68f9      	ldr	r1, [r7, #12]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 fa69 	bl	800ac64 <USBD_CtlSendData>
 800a792:	e009      	b.n	800a7a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a794:	6839      	ldr	r1, [r7, #0]
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 f9e7 	bl	800ab6a <USBD_CtlError>
 800a79c:	e004      	b.n	800a7a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 faba 	bl	800ad18 <USBD_CtlSendStatus>
 800a7a4:	e000      	b.n	800a7a8 <USBD_GetDescriptor+0x2cc>
    return;
 800a7a6:	bf00      	nop
  }
}
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop

0800a7b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	889b      	ldrh	r3, [r3, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d131      	bne.n	800a826 <USBD_SetAddress+0x76>
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	88db      	ldrh	r3, [r3, #6]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d12d      	bne.n	800a826 <USBD_SetAddress+0x76>
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	885b      	ldrh	r3, [r3, #2]
 800a7ce:	2b7f      	cmp	r3, #127	@ 0x7f
 800a7d0:	d829      	bhi.n	800a826 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	885b      	ldrh	r3, [r3, #2]
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	2b03      	cmp	r3, #3
 800a7e8:	d104      	bne.n	800a7f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f9bc 	bl	800ab6a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7f2:	e01d      	b.n	800a830 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	7bfa      	ldrb	r2, [r7, #15]
 800a7f8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
 800a7fe:	4619      	mov	r1, r3
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 ff07 	bl	800b614 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 fa86 	bl	800ad18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a80c:	7bfb      	ldrb	r3, [r7, #15]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d004      	beq.n	800a81c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2202      	movs	r2, #2
 800a816:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a81a:	e009      	b.n	800a830 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a824:	e004      	b.n	800a830 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a826:	6839      	ldr	r1, [r7, #0]
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 f99e 	bl	800ab6a <USBD_CtlError>
  }
}
 800a82e:	bf00      	nop
 800a830:	bf00      	nop
 800a832:	3710      	adds	r7, #16
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a842:	2300      	movs	r3, #0
 800a844:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	885b      	ldrh	r3, [r3, #2]
 800a84a:	b2da      	uxtb	r2, r3
 800a84c:	4b4e      	ldr	r3, [pc, #312]	@ (800a988 <USBD_SetConfig+0x150>)
 800a84e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a850:	4b4d      	ldr	r3, [pc, #308]	@ (800a988 <USBD_SetConfig+0x150>)
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d905      	bls.n	800a864 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f985 	bl	800ab6a <USBD_CtlError>
    return USBD_FAIL;
 800a860:	2303      	movs	r3, #3
 800a862:	e08c      	b.n	800a97e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	d002      	beq.n	800a876 <USBD_SetConfig+0x3e>
 800a870:	2b03      	cmp	r3, #3
 800a872:	d029      	beq.n	800a8c8 <USBD_SetConfig+0x90>
 800a874:	e075      	b.n	800a962 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a876:	4b44      	ldr	r3, [pc, #272]	@ (800a988 <USBD_SetConfig+0x150>)
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d020      	beq.n	800a8c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a87e:	4b42      	ldr	r3, [pc, #264]	@ (800a988 <USBD_SetConfig+0x150>)
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	461a      	mov	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a888:	4b3f      	ldr	r3, [pc, #252]	@ (800a988 <USBD_SetConfig+0x150>)
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	4619      	mov	r1, r3
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f7fe ffe3 	bl	800985a <USBD_SetClassConfig>
 800a894:	4603      	mov	r3, r0
 800a896:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a898:	7bfb      	ldrb	r3, [r7, #15]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d008      	beq.n	800a8b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a89e:	6839      	ldr	r1, [r7, #0]
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 f962 	bl	800ab6a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2202      	movs	r2, #2
 800a8aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a8ae:	e065      	b.n	800a97c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 fa31 	bl	800ad18 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2203      	movs	r2, #3
 800a8ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a8be:	e05d      	b.n	800a97c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 fa29 	bl	800ad18 <USBD_CtlSendStatus>
      break;
 800a8c6:	e059      	b.n	800a97c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a8c8:	4b2f      	ldr	r3, [pc, #188]	@ (800a988 <USBD_SetConfig+0x150>)
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d112      	bne.n	800a8f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2202      	movs	r2, #2
 800a8d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a8d8:	4b2b      	ldr	r3, [pc, #172]	@ (800a988 <USBD_SetConfig+0x150>)
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	461a      	mov	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a8e2:	4b29      	ldr	r3, [pc, #164]	@ (800a988 <USBD_SetConfig+0x150>)
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f7fe ffd2 	bl	8009892 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 fa12 	bl	800ad18 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a8f4:	e042      	b.n	800a97c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a8f6:	4b24      	ldr	r3, [pc, #144]	@ (800a988 <USBD_SetConfig+0x150>)
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	429a      	cmp	r2, r3
 800a902:	d02a      	beq.n	800a95a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	4619      	mov	r1, r3
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7fe ffc0 	bl	8009892 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a912:	4b1d      	ldr	r3, [pc, #116]	@ (800a988 <USBD_SetConfig+0x150>)
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a91c:	4b1a      	ldr	r3, [pc, #104]	@ (800a988 <USBD_SetConfig+0x150>)
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	4619      	mov	r1, r3
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f7fe ff99 	bl	800985a <USBD_SetClassConfig>
 800a928:	4603      	mov	r3, r0
 800a92a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a92c:	7bfb      	ldrb	r3, [r7, #15]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00f      	beq.n	800a952 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a932:	6839      	ldr	r1, [r7, #0]
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 f918 	bl	800ab6a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	4619      	mov	r1, r3
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f7fe ffa5 	bl	8009892 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2202      	movs	r2, #2
 800a94c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a950:	e014      	b.n	800a97c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 f9e0 	bl	800ad18 <USBD_CtlSendStatus>
      break;
 800a958:	e010      	b.n	800a97c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f9dc 	bl	800ad18 <USBD_CtlSendStatus>
      break;
 800a960:	e00c      	b.n	800a97c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a962:	6839      	ldr	r1, [r7, #0]
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 f900 	bl	800ab6a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a96a:	4b07      	ldr	r3, [pc, #28]	@ (800a988 <USBD_SetConfig+0x150>)
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	4619      	mov	r1, r3
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f7fe ff8e 	bl	8009892 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a976:	2303      	movs	r3, #3
 800a978:	73fb      	strb	r3, [r7, #15]
      break;
 800a97a:	bf00      	nop
  }

  return ret;
 800a97c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	20000438 	.word	0x20000438

0800a98c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	88db      	ldrh	r3, [r3, #6]
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d004      	beq.n	800a9a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a99e:	6839      	ldr	r1, [r7, #0]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 f8e2 	bl	800ab6a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a9a6:	e023      	b.n	800a9f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	dc02      	bgt.n	800a9ba <USBD_GetConfig+0x2e>
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	dc03      	bgt.n	800a9c0 <USBD_GetConfig+0x34>
 800a9b8:	e015      	b.n	800a9e6 <USBD_GetConfig+0x5a>
 800a9ba:	2b03      	cmp	r3, #3
 800a9bc:	d00b      	beq.n	800a9d6 <USBD_GetConfig+0x4a>
 800a9be:	e012      	b.n	800a9e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	3308      	adds	r3, #8
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f948 	bl	800ac64 <USBD_CtlSendData>
        break;
 800a9d4:	e00c      	b.n	800a9f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	3304      	adds	r3, #4
 800a9da:	2201      	movs	r2, #1
 800a9dc:	4619      	mov	r1, r3
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 f940 	bl	800ac64 <USBD_CtlSendData>
        break;
 800a9e4:	e004      	b.n	800a9f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a9e6:	6839      	ldr	r1, [r7, #0]
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 f8be 	bl	800ab6a <USBD_CtlError>
        break;
 800a9ee:	bf00      	nop
}
 800a9f0:	bf00      	nop
 800a9f2:	3708      	adds	r7, #8
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	d81e      	bhi.n	800aa4e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	88db      	ldrh	r3, [r3, #6]
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d004      	beq.n	800aa22 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800aa18:	6839      	ldr	r1, [r7, #0]
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 f8a5 	bl	800ab6a <USBD_CtlError>
        break;
 800aa20:	e01a      	b.n	800aa58 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2201      	movs	r2, #1
 800aa26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d005      	beq.n	800aa3e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	f043 0202 	orr.w	r2, r3, #2
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	330c      	adds	r3, #12
 800aa42:	2202      	movs	r2, #2
 800aa44:	4619      	mov	r1, r3
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 f90c 	bl	800ac64 <USBD_CtlSendData>
      break;
 800aa4c:	e004      	b.n	800aa58 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800aa4e:	6839      	ldr	r1, [r7, #0]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 f88a 	bl	800ab6a <USBD_CtlError>
      break;
 800aa56:	bf00      	nop
  }
}
 800aa58:	bf00      	nop
 800aa5a:	3708      	adds	r7, #8
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	885b      	ldrh	r3, [r3, #2]
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d107      	bne.n	800aa82 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2201      	movs	r2, #1
 800aa76:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 f94c 	bl	800ad18 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800aa80:	e013      	b.n	800aaaa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	885b      	ldrh	r3, [r3, #2]
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d10b      	bne.n	800aaa2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	889b      	ldrh	r3, [r3, #4]
 800aa8e:	0a1b      	lsrs	r3, r3, #8
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	b2da      	uxtb	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 f93c 	bl	800ad18 <USBD_CtlSendStatus>
}
 800aaa0:	e003      	b.n	800aaaa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800aaa2:	6839      	ldr	r1, [r7, #0]
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 f860 	bl	800ab6a <USBD_CtlError>
}
 800aaaa:	bf00      	nop
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b082      	sub	sp, #8
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
 800aaba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	3b01      	subs	r3, #1
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	d80b      	bhi.n	800aae2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	885b      	ldrh	r3, [r3, #2]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d10c      	bne.n	800aaec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 f91c 	bl	800ad18 <USBD_CtlSendStatus>
      }
      break;
 800aae0:	e004      	b.n	800aaec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aae2:	6839      	ldr	r1, [r7, #0]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f840 	bl	800ab6a <USBD_CtlError>
      break;
 800aaea:	e000      	b.n	800aaee <USBD_ClrFeature+0x3c>
      break;
 800aaec:	bf00      	nop
  }
}
 800aaee:	bf00      	nop
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b084      	sub	sp, #16
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
 800aafe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	781a      	ldrb	r2, [r3, #0]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	781a      	ldrb	r2, [r3, #0]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	f7ff fa40 	bl	8009fa6 <SWAPBYTE>
 800ab26:	4603      	mov	r3, r0
 800ab28:	461a      	mov	r2, r3
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	3301      	adds	r3, #1
 800ab32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	3301      	adds	r3, #1
 800ab38:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	f7ff fa33 	bl	8009fa6 <SWAPBYTE>
 800ab40:	4603      	mov	r3, r0
 800ab42:	461a      	mov	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	3301      	adds	r3, #1
 800ab52:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f7ff fa26 	bl	8009fa6 <SWAPBYTE>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	80da      	strh	r2, [r3, #6]
}
 800ab62:	bf00      	nop
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b082      	sub	sp, #8
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
 800ab72:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab74:	2180      	movs	r1, #128	@ 0x80
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fce2 	bl	800b540 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 fcde 	bl	800b540 <USBD_LL_StallEP>
}
 800ab84:	bf00      	nop
 800ab86:	3708      	adds	r7, #8
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b086      	sub	sp, #24
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d042      	beq.n	800ac28 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800aba6:	6938      	ldr	r0, [r7, #16]
 800aba8:	f000 f842 	bl	800ac30 <USBD_GetLen>
 800abac:	4603      	mov	r3, r0
 800abae:	3301      	adds	r3, #1
 800abb0:	005b      	lsls	r3, r3, #1
 800abb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abb6:	d808      	bhi.n	800abca <USBD_GetString+0x3e>
 800abb8:	6938      	ldr	r0, [r7, #16]
 800abba:	f000 f839 	bl	800ac30 <USBD_GetLen>
 800abbe:	4603      	mov	r3, r0
 800abc0:	3301      	adds	r3, #1
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	005b      	lsls	r3, r3, #1
 800abc6:	b29a      	uxth	r2, r3
 800abc8:	e001      	b.n	800abce <USBD_GetString+0x42>
 800abca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800abd2:	7dfb      	ldrb	r3, [r7, #23]
 800abd4:	68ba      	ldr	r2, [r7, #8]
 800abd6:	4413      	add	r3, r2
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	7812      	ldrb	r2, [r2, #0]
 800abdc:	701a      	strb	r2, [r3, #0]
  idx++;
 800abde:	7dfb      	ldrb	r3, [r7, #23]
 800abe0:	3301      	adds	r3, #1
 800abe2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800abe4:	7dfb      	ldrb	r3, [r7, #23]
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	4413      	add	r3, r2
 800abea:	2203      	movs	r2, #3
 800abec:	701a      	strb	r2, [r3, #0]
  idx++;
 800abee:	7dfb      	ldrb	r3, [r7, #23]
 800abf0:	3301      	adds	r3, #1
 800abf2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800abf4:	e013      	b.n	800ac1e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800abf6:	7dfb      	ldrb	r3, [r7, #23]
 800abf8:	68ba      	ldr	r2, [r7, #8]
 800abfa:	4413      	add	r3, r2
 800abfc:	693a      	ldr	r2, [r7, #16]
 800abfe:	7812      	ldrb	r2, [r2, #0]
 800ac00:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	3301      	adds	r3, #1
 800ac06:	613b      	str	r3, [r7, #16]
    idx++;
 800ac08:	7dfb      	ldrb	r3, [r7, #23]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ac0e:	7dfb      	ldrb	r3, [r7, #23]
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	4413      	add	r3, r2
 800ac14:	2200      	movs	r2, #0
 800ac16:	701a      	strb	r2, [r3, #0]
    idx++;
 800ac18:	7dfb      	ldrb	r3, [r7, #23]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1e7      	bne.n	800abf6 <USBD_GetString+0x6a>
 800ac26:	e000      	b.n	800ac2a <USBD_GetString+0x9e>
    return;
 800ac28:	bf00      	nop
  }
}
 800ac2a:	3718      	adds	r7, #24
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b085      	sub	sp, #20
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ac40:	e005      	b.n	800ac4e <USBD_GetLen+0x1e>
  {
    len++;
 800ac42:	7bfb      	ldrb	r3, [r7, #15]
 800ac44:	3301      	adds	r3, #1
 800ac46:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d1f5      	bne.n	800ac42 <USBD_GetLen+0x12>
  }

  return len;
 800ac56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3714      	adds	r7, #20
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2202      	movs	r2, #2
 800ac74:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	68ba      	ldr	r2, [r7, #8]
 800ac88:	2100      	movs	r1, #0
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f000 fce1 	bl	800b652 <USBD_LL_Transmit>

  return USBD_OK;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b084      	sub	sp, #16
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	60f8      	str	r0, [r7, #12]
 800aca2:	60b9      	str	r1, [r7, #8]
 800aca4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	68ba      	ldr	r2, [r7, #8]
 800acaa:	2100      	movs	r1, #0
 800acac:	68f8      	ldr	r0, [r7, #12]
 800acae:	f000 fcd0 	bl	800b652 <USBD_LL_Transmit>

  return USBD_OK;
 800acb2:	2300      	movs	r3, #0
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2203      	movs	r2, #3
 800accc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	68ba      	ldr	r2, [r7, #8]
 800ace4:	2100      	movs	r1, #0
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f000 fcd4 	bl	800b694 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acec:	2300      	movs	r3, #0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b084      	sub	sp, #16
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	60f8      	str	r0, [r7, #12]
 800acfe:	60b9      	str	r1, [r7, #8]
 800ad00:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	68ba      	ldr	r2, [r7, #8]
 800ad06:	2100      	movs	r1, #0
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	f000 fcc3 	bl	800b694 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2204      	movs	r2, #4
 800ad24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ad28:	2300      	movs	r3, #0
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	2100      	movs	r1, #0
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 fc8f 	bl	800b652 <USBD_LL_Transmit>

  return USBD_OK;
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3708      	adds	r7, #8
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b082      	sub	sp, #8
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2205      	movs	r2, #5
 800ad4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad4e:	2300      	movs	r3, #0
 800ad50:	2200      	movs	r2, #0
 800ad52:	2100      	movs	r1, #0
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 fc9d 	bl	800b694 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ad68:	2200      	movs	r2, #0
 800ad6a:	4912      	ldr	r1, [pc, #72]	@ (800adb4 <MX_USB_DEVICE_Init+0x50>)
 800ad6c:	4812      	ldr	r0, [pc, #72]	@ (800adb8 <MX_USB_DEVICE_Init+0x54>)
 800ad6e:	f7fe fcf7 	bl	8009760 <USBD_Init>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d001      	beq.n	800ad7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ad78:	f7f6 fe7a 	bl	8001a70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ad7c:	490f      	ldr	r1, [pc, #60]	@ (800adbc <MX_USB_DEVICE_Init+0x58>)
 800ad7e:	480e      	ldr	r0, [pc, #56]	@ (800adb8 <MX_USB_DEVICE_Init+0x54>)
 800ad80:	f7fe fd1e 	bl	80097c0 <USBD_RegisterClass>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ad8a:	f7f6 fe71 	bl	8001a70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ad8e:	490c      	ldr	r1, [pc, #48]	@ (800adc0 <MX_USB_DEVICE_Init+0x5c>)
 800ad90:	4809      	ldr	r0, [pc, #36]	@ (800adb8 <MX_USB_DEVICE_Init+0x54>)
 800ad92:	f7fe fc15 	bl	80095c0 <USBD_CDC_RegisterInterface>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d001      	beq.n	800ada0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ad9c:	f7f6 fe68 	bl	8001a70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ada0:	4805      	ldr	r0, [pc, #20]	@ (800adb8 <MX_USB_DEVICE_Init+0x54>)
 800ada2:	f7fe fd43 	bl	800982c <USBD_Start>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d001      	beq.n	800adb0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800adac:	f7f6 fe60 	bl	8001a70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800adb0:	bf00      	nop
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	200000bc 	.word	0x200000bc
 800adb8:	2000043c 	.word	0x2000043c
 800adbc:	20000028 	.word	0x20000028
 800adc0:	200000a8 	.word	0x200000a8

0800adc4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800adc8:	2200      	movs	r2, #0
 800adca:	4905      	ldr	r1, [pc, #20]	@ (800ade0 <CDC_Init_FS+0x1c>)
 800adcc:	4805      	ldr	r0, [pc, #20]	@ (800ade4 <CDC_Init_FS+0x20>)
 800adce:	f7fe fc11 	bl	80095f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800add2:	4905      	ldr	r1, [pc, #20]	@ (800ade8 <CDC_Init_FS+0x24>)
 800add4:	4803      	ldr	r0, [pc, #12]	@ (800ade4 <CDC_Init_FS+0x20>)
 800add6:	f7fe fc2f 	bl	8009638 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800adda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800addc:	4618      	mov	r0, r3
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	20000f18 	.word	0x20000f18
 800ade4:	2000043c 	.word	0x2000043c
 800ade8:	20000718 	.word	0x20000718

0800adec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800adec:	b480      	push	{r7}
 800adee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800adf0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	4603      	mov	r3, r0
 800ae04:	6039      	str	r1, [r7, #0]
 800ae06:	71fb      	strb	r3, [r7, #7]
 800ae08:	4613      	mov	r3, r2
 800ae0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ae0c:	79fb      	ldrb	r3, [r7, #7]
 800ae0e:	2b23      	cmp	r3, #35	@ 0x23
 800ae10:	d84a      	bhi.n	800aea8 <CDC_Control_FS+0xac>
 800ae12:	a201      	add	r2, pc, #4	@ (adr r2, 800ae18 <CDC_Control_FS+0x1c>)
 800ae14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae18:	0800aea9 	.word	0x0800aea9
 800ae1c:	0800aea9 	.word	0x0800aea9
 800ae20:	0800aea9 	.word	0x0800aea9
 800ae24:	0800aea9 	.word	0x0800aea9
 800ae28:	0800aea9 	.word	0x0800aea9
 800ae2c:	0800aea9 	.word	0x0800aea9
 800ae30:	0800aea9 	.word	0x0800aea9
 800ae34:	0800aea9 	.word	0x0800aea9
 800ae38:	0800aea9 	.word	0x0800aea9
 800ae3c:	0800aea9 	.word	0x0800aea9
 800ae40:	0800aea9 	.word	0x0800aea9
 800ae44:	0800aea9 	.word	0x0800aea9
 800ae48:	0800aea9 	.word	0x0800aea9
 800ae4c:	0800aea9 	.word	0x0800aea9
 800ae50:	0800aea9 	.word	0x0800aea9
 800ae54:	0800aea9 	.word	0x0800aea9
 800ae58:	0800aea9 	.word	0x0800aea9
 800ae5c:	0800aea9 	.word	0x0800aea9
 800ae60:	0800aea9 	.word	0x0800aea9
 800ae64:	0800aea9 	.word	0x0800aea9
 800ae68:	0800aea9 	.word	0x0800aea9
 800ae6c:	0800aea9 	.word	0x0800aea9
 800ae70:	0800aea9 	.word	0x0800aea9
 800ae74:	0800aea9 	.word	0x0800aea9
 800ae78:	0800aea9 	.word	0x0800aea9
 800ae7c:	0800aea9 	.word	0x0800aea9
 800ae80:	0800aea9 	.word	0x0800aea9
 800ae84:	0800aea9 	.word	0x0800aea9
 800ae88:	0800aea9 	.word	0x0800aea9
 800ae8c:	0800aea9 	.word	0x0800aea9
 800ae90:	0800aea9 	.word	0x0800aea9
 800ae94:	0800aea9 	.word	0x0800aea9
 800ae98:	0800aea9 	.word	0x0800aea9
 800ae9c:	0800aea9 	.word	0x0800aea9
 800aea0:	0800aea9 	.word	0x0800aea9
 800aea4:	0800aea9 	.word	0x0800aea9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aea8:	bf00      	nop
  }

  return (USBD_OK);
 800aeaa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aec2:	6879      	ldr	r1, [r7, #4]
 800aec4:	4805      	ldr	r0, [pc, #20]	@ (800aedc <CDC_Receive_FS+0x24>)
 800aec6:	f7fe fbb7 	bl	8009638 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aeca:	4804      	ldr	r0, [pc, #16]	@ (800aedc <CDC_Receive_FS+0x24>)
 800aecc:	f7fe fc12 	bl	80096f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aed0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	2000043c 	.word	0x2000043c

0800aee0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	460b      	mov	r3, r1
 800aeea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aeec:	2300      	movs	r3, #0
 800aeee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aef0:	4b0d      	ldr	r3, [pc, #52]	@ (800af28 <CDC_Transmit_FS+0x48>)
 800aef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aef6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d001      	beq.n	800af06 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800af02:	2301      	movs	r3, #1
 800af04:	e00b      	b.n	800af1e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800af06:	887b      	ldrh	r3, [r7, #2]
 800af08:	461a      	mov	r2, r3
 800af0a:	6879      	ldr	r1, [r7, #4]
 800af0c:	4806      	ldr	r0, [pc, #24]	@ (800af28 <CDC_Transmit_FS+0x48>)
 800af0e:	f7fe fb71 	bl	80095f4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800af12:	4805      	ldr	r0, [pc, #20]	@ (800af28 <CDC_Transmit_FS+0x48>)
 800af14:	f7fe fbae 	bl	8009674 <USBD_CDC_TransmitPacket>
 800af18:	4603      	mov	r3, r0
 800af1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800af1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	2000043c 	.word	0x2000043c

0800af2c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b087      	sub	sp, #28
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	4613      	mov	r3, r2
 800af38:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800af3a:	2300      	movs	r3, #0
 800af3c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800af3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af42:	4618      	mov	r0, r3
 800af44:	371c      	adds	r7, #28
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr
	...

0800af50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	4603      	mov	r3, r0
 800af58:	6039      	str	r1, [r7, #0]
 800af5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	2212      	movs	r2, #18
 800af60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800af62:	4b03      	ldr	r3, [pc, #12]	@ (800af70 <USBD_FS_DeviceDescriptor+0x20>)
}
 800af64:	4618      	mov	r0, r3
 800af66:	370c      	adds	r7, #12
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr
 800af70:	200000d8 	.word	0x200000d8

0800af74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	4603      	mov	r3, r0
 800af7c:	6039      	str	r1, [r7, #0]
 800af7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	2204      	movs	r2, #4
 800af84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800af86:	4b03      	ldr	r3, [pc, #12]	@ (800af94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800af88:	4618      	mov	r0, r3
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr
 800af94:	200000ec 	.word	0x200000ec

0800af98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	4603      	mov	r3, r0
 800afa0:	6039      	str	r1, [r7, #0]
 800afa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800afa4:	79fb      	ldrb	r3, [r7, #7]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d105      	bne.n	800afb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800afaa:	683a      	ldr	r2, [r7, #0]
 800afac:	4907      	ldr	r1, [pc, #28]	@ (800afcc <USBD_FS_ProductStrDescriptor+0x34>)
 800afae:	4808      	ldr	r0, [pc, #32]	@ (800afd0 <USBD_FS_ProductStrDescriptor+0x38>)
 800afb0:	f7ff fdec 	bl	800ab8c <USBD_GetString>
 800afb4:	e004      	b.n	800afc0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	4904      	ldr	r1, [pc, #16]	@ (800afcc <USBD_FS_ProductStrDescriptor+0x34>)
 800afba:	4805      	ldr	r0, [pc, #20]	@ (800afd0 <USBD_FS_ProductStrDescriptor+0x38>)
 800afbc:	f7ff fde6 	bl	800ab8c <USBD_GetString>
  }
  return USBD_StrDesc;
 800afc0:	4b02      	ldr	r3, [pc, #8]	@ (800afcc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3708      	adds	r7, #8
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	20001718 	.word	0x20001718
 800afd0:	0800e984 	.word	0x0800e984

0800afd4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	4603      	mov	r3, r0
 800afdc:	6039      	str	r1, [r7, #0]
 800afde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800afe0:	683a      	ldr	r2, [r7, #0]
 800afe2:	4904      	ldr	r1, [pc, #16]	@ (800aff4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800afe4:	4804      	ldr	r0, [pc, #16]	@ (800aff8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800afe6:	f7ff fdd1 	bl	800ab8c <USBD_GetString>
  return USBD_StrDesc;
 800afea:	4b02      	ldr	r3, [pc, #8]	@ (800aff4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800afec:	4618      	mov	r0, r3
 800afee:	3708      	adds	r7, #8
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	20001718 	.word	0x20001718
 800aff8:	0800e99c 	.word	0x0800e99c

0800affc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	4603      	mov	r3, r0
 800b004:	6039      	str	r1, [r7, #0]
 800b006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	221a      	movs	r2, #26
 800b00c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b00e:	f000 f843 	bl	800b098 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b012:	4b02      	ldr	r3, [pc, #8]	@ (800b01c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b014:	4618      	mov	r0, r3
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	200000f0 	.word	0x200000f0

0800b020 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	4603      	mov	r3, r0
 800b028:	6039      	str	r1, [r7, #0]
 800b02a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b02c:	79fb      	ldrb	r3, [r7, #7]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d105      	bne.n	800b03e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b032:	683a      	ldr	r2, [r7, #0]
 800b034:	4907      	ldr	r1, [pc, #28]	@ (800b054 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b036:	4808      	ldr	r0, [pc, #32]	@ (800b058 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b038:	f7ff fda8 	bl	800ab8c <USBD_GetString>
 800b03c:	e004      	b.n	800b048 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b03e:	683a      	ldr	r2, [r7, #0]
 800b040:	4904      	ldr	r1, [pc, #16]	@ (800b054 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b042:	4805      	ldr	r0, [pc, #20]	@ (800b058 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b044:	f7ff fda2 	bl	800ab8c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b048:	4b02      	ldr	r3, [pc, #8]	@ (800b054 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	20001718 	.word	0x20001718
 800b058:	0800e9b0 	.word	0x0800e9b0

0800b05c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
 800b062:	4603      	mov	r3, r0
 800b064:	6039      	str	r1, [r7, #0]
 800b066:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b068:	79fb      	ldrb	r3, [r7, #7]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d105      	bne.n	800b07a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b06e:	683a      	ldr	r2, [r7, #0]
 800b070:	4907      	ldr	r1, [pc, #28]	@ (800b090 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b072:	4808      	ldr	r0, [pc, #32]	@ (800b094 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b074:	f7ff fd8a 	bl	800ab8c <USBD_GetString>
 800b078:	e004      	b.n	800b084 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	4904      	ldr	r1, [pc, #16]	@ (800b090 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b07e:	4805      	ldr	r0, [pc, #20]	@ (800b094 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b080:	f7ff fd84 	bl	800ab8c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b084:	4b02      	ldr	r3, [pc, #8]	@ (800b090 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b086:	4618      	mov	r0, r3
 800b088:	3708      	adds	r7, #8
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	20001718 	.word	0x20001718
 800b094:	0800e9bc 	.word	0x0800e9bc

0800b098 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b09e:	4b0f      	ldr	r3, [pc, #60]	@ (800b0dc <Get_SerialNum+0x44>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b0a4:	4b0e      	ldr	r3, [pc, #56]	@ (800b0e0 <Get_SerialNum+0x48>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b0aa:	4b0e      	ldr	r3, [pc, #56]	@ (800b0e4 <Get_SerialNum+0x4c>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d009      	beq.n	800b0d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b0be:	2208      	movs	r2, #8
 800b0c0:	4909      	ldr	r1, [pc, #36]	@ (800b0e8 <Get_SerialNum+0x50>)
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f000 f814 	bl	800b0f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b0c8:	2204      	movs	r2, #4
 800b0ca:	4908      	ldr	r1, [pc, #32]	@ (800b0ec <Get_SerialNum+0x54>)
 800b0cc:	68b8      	ldr	r0, [r7, #8]
 800b0ce:	f000 f80f 	bl	800b0f0 <IntToUnicode>
  }
}
 800b0d2:	bf00      	nop
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	1fff7a10 	.word	0x1fff7a10
 800b0e0:	1fff7a14 	.word	0x1fff7a14
 800b0e4:	1fff7a18 	.word	0x1fff7a18
 800b0e8:	200000f2 	.word	0x200000f2
 800b0ec:	20000102 	.word	0x20000102

0800b0f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b087      	sub	sp, #28
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b0fe:	2300      	movs	r3, #0
 800b100:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b102:	2300      	movs	r3, #0
 800b104:	75fb      	strb	r3, [r7, #23]
 800b106:	e027      	b.n	800b158 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	0f1b      	lsrs	r3, r3, #28
 800b10c:	2b09      	cmp	r3, #9
 800b10e:	d80b      	bhi.n	800b128 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	0f1b      	lsrs	r3, r3, #28
 800b114:	b2da      	uxtb	r2, r3
 800b116:	7dfb      	ldrb	r3, [r7, #23]
 800b118:	005b      	lsls	r3, r3, #1
 800b11a:	4619      	mov	r1, r3
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	440b      	add	r3, r1
 800b120:	3230      	adds	r2, #48	@ 0x30
 800b122:	b2d2      	uxtb	r2, r2
 800b124:	701a      	strb	r2, [r3, #0]
 800b126:	e00a      	b.n	800b13e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	0f1b      	lsrs	r3, r3, #28
 800b12c:	b2da      	uxtb	r2, r3
 800b12e:	7dfb      	ldrb	r3, [r7, #23]
 800b130:	005b      	lsls	r3, r3, #1
 800b132:	4619      	mov	r1, r3
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	440b      	add	r3, r1
 800b138:	3237      	adds	r2, #55	@ 0x37
 800b13a:	b2d2      	uxtb	r2, r2
 800b13c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	011b      	lsls	r3, r3, #4
 800b142:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b144:	7dfb      	ldrb	r3, [r7, #23]
 800b146:	005b      	lsls	r3, r3, #1
 800b148:	3301      	adds	r3, #1
 800b14a:	68ba      	ldr	r2, [r7, #8]
 800b14c:	4413      	add	r3, r2
 800b14e:	2200      	movs	r2, #0
 800b150:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b152:	7dfb      	ldrb	r3, [r7, #23]
 800b154:	3301      	adds	r3, #1
 800b156:	75fb      	strb	r3, [r7, #23]
 800b158:	7dfa      	ldrb	r2, [r7, #23]
 800b15a:	79fb      	ldrb	r3, [r7, #7]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d3d3      	bcc.n	800b108 <IntToUnicode+0x18>
  }
}
 800b160:	bf00      	nop
 800b162:	bf00      	nop
 800b164:	371c      	adds	r7, #28
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr
	...

0800b170 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b08a      	sub	sp, #40	@ 0x28
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b178:	f107 0314 	add.w	r3, r7, #20
 800b17c:	2200      	movs	r2, #0
 800b17e:	601a      	str	r2, [r3, #0]
 800b180:	605a      	str	r2, [r3, #4]
 800b182:	609a      	str	r2, [r3, #8]
 800b184:	60da      	str	r2, [r3, #12]
 800b186:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b190:	d13a      	bne.n	800b208 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b192:	2300      	movs	r3, #0
 800b194:	613b      	str	r3, [r7, #16]
 800b196:	4b1e      	ldr	r3, [pc, #120]	@ (800b210 <HAL_PCD_MspInit+0xa0>)
 800b198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b19a:	4a1d      	ldr	r2, [pc, #116]	@ (800b210 <HAL_PCD_MspInit+0xa0>)
 800b19c:	f043 0301 	orr.w	r3, r3, #1
 800b1a0:	6313      	str	r3, [r2, #48]	@ 0x30
 800b1a2:	4b1b      	ldr	r3, [pc, #108]	@ (800b210 <HAL_PCD_MspInit+0xa0>)
 800b1a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1a6:	f003 0301 	and.w	r3, r3, #1
 800b1aa:	613b      	str	r3, [r7, #16]
 800b1ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b1ae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b1b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1b4:	2302      	movs	r3, #2
 800b1b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1bc:	2303      	movs	r3, #3
 800b1be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b1c0:	230a      	movs	r3, #10
 800b1c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1c4:	f107 0314 	add.w	r3, r7, #20
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	4812      	ldr	r0, [pc, #72]	@ (800b214 <HAL_PCD_MspInit+0xa4>)
 800b1cc:	f7f7 fbd6 	bl	800297c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b1d0:	4b0f      	ldr	r3, [pc, #60]	@ (800b210 <HAL_PCD_MspInit+0xa0>)
 800b1d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1d4:	4a0e      	ldr	r2, [pc, #56]	@ (800b210 <HAL_PCD_MspInit+0xa0>)
 800b1d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1da:	6353      	str	r3, [r2, #52]	@ 0x34
 800b1dc:	2300      	movs	r3, #0
 800b1de:	60fb      	str	r3, [r7, #12]
 800b1e0:	4b0b      	ldr	r3, [pc, #44]	@ (800b210 <HAL_PCD_MspInit+0xa0>)
 800b1e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1e4:	4a0a      	ldr	r2, [pc, #40]	@ (800b210 <HAL_PCD_MspInit+0xa0>)
 800b1e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b1ea:	6453      	str	r3, [r2, #68]	@ 0x44
 800b1ec:	4b08      	ldr	r3, [pc, #32]	@ (800b210 <HAL_PCD_MspInit+0xa0>)
 800b1ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b1f4:	60fb      	str	r3, [r7, #12]
 800b1f6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	2043      	movs	r0, #67	@ 0x43
 800b1fe:	f7f7 faf4 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b202:	2043      	movs	r0, #67	@ 0x43
 800b204:	f7f7 fb0d 	bl	8002822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b208:	bf00      	nop
 800b20a:	3728      	adds	r7, #40	@ 0x28
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	40023800 	.word	0x40023800
 800b214:	40020000 	.word	0x40020000

0800b218 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b22c:	4619      	mov	r1, r3
 800b22e:	4610      	mov	r0, r2
 800b230:	f7fe fb49 	bl	80098c6 <USBD_LL_SetupStage>
}
 800b234:	bf00      	nop
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b24e:	78fa      	ldrb	r2, [r7, #3]
 800b250:	6879      	ldr	r1, [r7, #4]
 800b252:	4613      	mov	r3, r2
 800b254:	00db      	lsls	r3, r3, #3
 800b256:	4413      	add	r3, r2
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	440b      	add	r3, r1
 800b25c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	78fb      	ldrb	r3, [r7, #3]
 800b264:	4619      	mov	r1, r3
 800b266:	f7fe fb83 	bl	8009970 <USBD_LL_DataOutStage>
}
 800b26a:	bf00      	nop
 800b26c:	3708      	adds	r7, #8
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b082      	sub	sp, #8
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	460b      	mov	r3, r1
 800b27c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b284:	78fa      	ldrb	r2, [r7, #3]
 800b286:	6879      	ldr	r1, [r7, #4]
 800b288:	4613      	mov	r3, r2
 800b28a:	00db      	lsls	r3, r3, #3
 800b28c:	4413      	add	r3, r2
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	440b      	add	r3, r1
 800b292:	3320      	adds	r3, #32
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	78fb      	ldrb	r3, [r7, #3]
 800b298:	4619      	mov	r1, r3
 800b29a:	f7fe fc1c 	bl	8009ad6 <USBD_LL_DataInStage>
}
 800b29e:	bf00      	nop
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b082      	sub	sp, #8
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7fe fd56 	bl	8009d66 <USBD_LL_SOF>
}
 800b2ba:	bf00      	nop
 800b2bc:	3708      	adds	r7, #8
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}

0800b2c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b084      	sub	sp, #16
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	79db      	ldrb	r3, [r3, #7]
 800b2d2:	2b02      	cmp	r3, #2
 800b2d4:	d001      	beq.n	800b2da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b2d6:	f7f6 fbcb 	bl	8001a70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b2e0:	7bfa      	ldrb	r2, [r7, #15]
 800b2e2:	4611      	mov	r1, r2
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7fe fcfa 	bl	8009cde <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7fe fca2 	bl	8009c3a <USBD_LL_Reset>
}
 800b2f6:	bf00      	nop
 800b2f8:	3710      	adds	r7, #16
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
	...

0800b300 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fe fcf5 	bl	8009cfe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	6812      	ldr	r2, [r2, #0]
 800b322:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b326:	f043 0301 	orr.w	r3, r3, #1
 800b32a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	7adb      	ldrb	r3, [r3, #11]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d005      	beq.n	800b340 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b334:	4b04      	ldr	r3, [pc, #16]	@ (800b348 <HAL_PCD_SuspendCallback+0x48>)
 800b336:	691b      	ldr	r3, [r3, #16]
 800b338:	4a03      	ldr	r2, [pc, #12]	@ (800b348 <HAL_PCD_SuspendCallback+0x48>)
 800b33a:	f043 0306 	orr.w	r3, r3, #6
 800b33e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b340:	bf00      	nop
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	e000ed00 	.word	0xe000ed00

0800b34c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fe fceb 	bl	8009d36 <USBD_LL_Resume>
}
 800b360:	bf00      	nop
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	460b      	mov	r3, r1
 800b372:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b37a:	78fa      	ldrb	r2, [r7, #3]
 800b37c:	4611      	mov	r1, r2
 800b37e:	4618      	mov	r0, r3
 800b380:	f7fe fd43 	bl	8009e0a <USBD_LL_IsoOUTIncomplete>
}
 800b384:	bf00      	nop
 800b386:	3708      	adds	r7, #8
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	460b      	mov	r3, r1
 800b396:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b39e:	78fa      	ldrb	r2, [r7, #3]
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fe fcff 	bl	8009da6 <USBD_LL_IsoINIncomplete>
}
 800b3a8:	bf00      	nop
 800b3aa:	3708      	adds	r7, #8
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7fe fd55 	bl	8009e6e <USBD_LL_DevConnected>
}
 800b3c4:	bf00      	nop
 800b3c6:	3708      	adds	r7, #8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7fe fd52 	bl	8009e84 <USBD_LL_DevDisconnected>
}
 800b3e0:	bf00      	nop
 800b3e2:	3708      	adds	r7, #8
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d13c      	bne.n	800b472 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b3f8:	4a20      	ldr	r2, [pc, #128]	@ (800b47c <USBD_LL_Init+0x94>)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4a1e      	ldr	r2, [pc, #120]	@ (800b47c <USBD_LL_Init+0x94>)
 800b404:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b408:	4b1c      	ldr	r3, [pc, #112]	@ (800b47c <USBD_LL_Init+0x94>)
 800b40a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b40e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b410:	4b1a      	ldr	r3, [pc, #104]	@ (800b47c <USBD_LL_Init+0x94>)
 800b412:	2204      	movs	r2, #4
 800b414:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b416:	4b19      	ldr	r3, [pc, #100]	@ (800b47c <USBD_LL_Init+0x94>)
 800b418:	2202      	movs	r2, #2
 800b41a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b41c:	4b17      	ldr	r3, [pc, #92]	@ (800b47c <USBD_LL_Init+0x94>)
 800b41e:	2200      	movs	r2, #0
 800b420:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b422:	4b16      	ldr	r3, [pc, #88]	@ (800b47c <USBD_LL_Init+0x94>)
 800b424:	2202      	movs	r2, #2
 800b426:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b428:	4b14      	ldr	r3, [pc, #80]	@ (800b47c <USBD_LL_Init+0x94>)
 800b42a:	2200      	movs	r2, #0
 800b42c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b42e:	4b13      	ldr	r3, [pc, #76]	@ (800b47c <USBD_LL_Init+0x94>)
 800b430:	2200      	movs	r2, #0
 800b432:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b434:	4b11      	ldr	r3, [pc, #68]	@ (800b47c <USBD_LL_Init+0x94>)
 800b436:	2200      	movs	r2, #0
 800b438:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b43a:	4b10      	ldr	r3, [pc, #64]	@ (800b47c <USBD_LL_Init+0x94>)
 800b43c:	2200      	movs	r2, #0
 800b43e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b440:	4b0e      	ldr	r3, [pc, #56]	@ (800b47c <USBD_LL_Init+0x94>)
 800b442:	2200      	movs	r2, #0
 800b444:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b446:	480d      	ldr	r0, [pc, #52]	@ (800b47c <USBD_LL_Init+0x94>)
 800b448:	f7f8 fc4a 	bl	8003ce0 <HAL_PCD_Init>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d001      	beq.n	800b456 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b452:	f7f6 fb0d 	bl	8001a70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b456:	2180      	movs	r1, #128	@ 0x80
 800b458:	4808      	ldr	r0, [pc, #32]	@ (800b47c <USBD_LL_Init+0x94>)
 800b45a:	f7f9 fe76 	bl	800514a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b45e:	2240      	movs	r2, #64	@ 0x40
 800b460:	2100      	movs	r1, #0
 800b462:	4806      	ldr	r0, [pc, #24]	@ (800b47c <USBD_LL_Init+0x94>)
 800b464:	f7f9 fe2a 	bl	80050bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b468:	2280      	movs	r2, #128	@ 0x80
 800b46a:	2101      	movs	r1, #1
 800b46c:	4803      	ldr	r0, [pc, #12]	@ (800b47c <USBD_LL_Init+0x94>)
 800b46e:	f7f9 fe25 	bl	80050bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b472:	2300      	movs	r3, #0
}
 800b474:	4618      	mov	r0, r3
 800b476:	3708      	adds	r7, #8
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	20001918 	.word	0x20001918

0800b480 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b48c:	2300      	movs	r3, #0
 800b48e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b496:	4618      	mov	r0, r3
 800b498:	f7f8 fd31 	bl	8003efe <HAL_PCD_Start>
 800b49c:	4603      	mov	r3, r0
 800b49e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4a0:	7bfb      	ldrb	r3, [r7, #15]
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f000 f942 	bl	800b72c <USBD_Get_USB_Status>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}

0800b4b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b084      	sub	sp, #16
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
 800b4be:	4608      	mov	r0, r1
 800b4c0:	4611      	mov	r1, r2
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	70fb      	strb	r3, [r7, #3]
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	70bb      	strb	r3, [r7, #2]
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b4de:	78bb      	ldrb	r3, [r7, #2]
 800b4e0:	883a      	ldrh	r2, [r7, #0]
 800b4e2:	78f9      	ldrb	r1, [r7, #3]
 800b4e4:	f7f9 fa05 	bl	80048f2 <HAL_PCD_EP_Open>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f000 f91c 	bl	800b72c <USBD_Get_USB_Status>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3710      	adds	r7, #16
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}

0800b502 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b502:	b580      	push	{r7, lr}
 800b504:	b084      	sub	sp, #16
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	460b      	mov	r3, r1
 800b50c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b50e:	2300      	movs	r3, #0
 800b510:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b512:	2300      	movs	r3, #0
 800b514:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b51c:	78fa      	ldrb	r2, [r7, #3]
 800b51e:	4611      	mov	r1, r2
 800b520:	4618      	mov	r0, r3
 800b522:	f7f9 fa50 	bl	80049c6 <HAL_PCD_EP_Close>
 800b526:	4603      	mov	r3, r0
 800b528:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b52a:	7bfb      	ldrb	r3, [r7, #15]
 800b52c:	4618      	mov	r0, r3
 800b52e:	f000 f8fd 	bl	800b72c <USBD_Get_USB_Status>
 800b532:	4603      	mov	r3, r0
 800b534:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b536:	7bbb      	ldrb	r3, [r7, #14]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	460b      	mov	r3, r1
 800b54a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b54c:	2300      	movs	r3, #0
 800b54e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b550:	2300      	movs	r3, #0
 800b552:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b55a:	78fa      	ldrb	r2, [r7, #3]
 800b55c:	4611      	mov	r1, r2
 800b55e:	4618      	mov	r0, r3
 800b560:	f7f9 fb08 	bl	8004b74 <HAL_PCD_EP_SetStall>
 800b564:	4603      	mov	r3, r0
 800b566:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b568:	7bfb      	ldrb	r3, [r7, #15]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f000 f8de 	bl	800b72c <USBD_Get_USB_Status>
 800b570:	4603      	mov	r3, r0
 800b572:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b574:	7bbb      	ldrb	r3, [r7, #14]
}
 800b576:	4618      	mov	r0, r3
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b084      	sub	sp, #16
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
 800b586:	460b      	mov	r3, r1
 800b588:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b58a:	2300      	movs	r3, #0
 800b58c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b58e:	2300      	movs	r3, #0
 800b590:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b598:	78fa      	ldrb	r2, [r7, #3]
 800b59a:	4611      	mov	r1, r2
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7f9 fb4c 	bl	8004c3a <HAL_PCD_EP_ClrStall>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5a6:	7bfb      	ldrb	r3, [r7, #15]
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f000 f8bf 	bl	800b72c <USBD_Get_USB_Status>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b085      	sub	sp, #20
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b5ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b5d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	da0b      	bge.n	800b5f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b5d8:	78fb      	ldrb	r3, [r7, #3]
 800b5da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b5de:	68f9      	ldr	r1, [r7, #12]
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	00db      	lsls	r3, r3, #3
 800b5e4:	4413      	add	r3, r2
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	440b      	add	r3, r1
 800b5ea:	3316      	adds	r3, #22
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	e00b      	b.n	800b608 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b5f0:	78fb      	ldrb	r3, [r7, #3]
 800b5f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b5f6:	68f9      	ldr	r1, [r7, #12]
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	00db      	lsls	r3, r3, #3
 800b5fc:	4413      	add	r3, r2
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	440b      	add	r3, r1
 800b602:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b606:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3714      	adds	r7, #20
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	460b      	mov	r3, r1
 800b61e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b620:	2300      	movs	r3, #0
 800b622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b624:	2300      	movs	r3, #0
 800b626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b62e:	78fa      	ldrb	r2, [r7, #3]
 800b630:	4611      	mov	r1, r2
 800b632:	4618      	mov	r0, r3
 800b634:	f7f9 f939 	bl	80048aa <HAL_PCD_SetAddress>
 800b638:	4603      	mov	r3, r0
 800b63a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
 800b63e:	4618      	mov	r0, r3
 800b640:	f000 f874 	bl	800b72c <USBD_Get_USB_Status>
 800b644:	4603      	mov	r3, r0
 800b646:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b648:	7bbb      	ldrb	r3, [r7, #14]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b086      	sub	sp, #24
 800b656:	af00      	add	r7, sp, #0
 800b658:	60f8      	str	r0, [r7, #12]
 800b65a:	607a      	str	r2, [r7, #4]
 800b65c:	603b      	str	r3, [r7, #0]
 800b65e:	460b      	mov	r3, r1
 800b660:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b662:	2300      	movs	r3, #0
 800b664:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b666:	2300      	movs	r3, #0
 800b668:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b670:	7af9      	ldrb	r1, [r7, #11]
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	f7f9 fa43 	bl	8004b00 <HAL_PCD_EP_Transmit>
 800b67a:	4603      	mov	r3, r0
 800b67c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b67e:	7dfb      	ldrb	r3, [r7, #23]
 800b680:	4618      	mov	r0, r3
 800b682:	f000 f853 	bl	800b72c <USBD_Get_USB_Status>
 800b686:	4603      	mov	r3, r0
 800b688:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b68a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3718      	adds	r7, #24
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b086      	sub	sp, #24
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	607a      	str	r2, [r7, #4]
 800b69e:	603b      	str	r3, [r7, #0]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b6b2:	7af9      	ldrb	r1, [r7, #11]
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	f7f9 f9cf 	bl	8004a5a <HAL_PCD_EP_Receive>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6c0:	7dfb      	ldrb	r3, [r7, #23]
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f000 f832 	bl	800b72c <USBD_Get_USB_Status>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b6cc:	7dbb      	ldrb	r3, [r7, #22]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3718      	adds	r7, #24
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b082      	sub	sp, #8
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	460b      	mov	r3, r1
 800b6e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b6e8:	78fa      	ldrb	r2, [r7, #3]
 800b6ea:	4611      	mov	r1, r2
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7f9 f9ef 	bl	8004ad0 <HAL_PCD_EP_GetRxCount>
 800b6f2:	4603      	mov	r3, r0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b704:	4b03      	ldr	r3, [pc, #12]	@ (800b714 <USBD_static_malloc+0x18>)
}
 800b706:	4618      	mov	r0, r3
 800b708:	370c      	adds	r7, #12
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr
 800b712:	bf00      	nop
 800b714:	20001dfc 	.word	0x20001dfc

0800b718 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]

}
 800b720:	bf00      	nop
 800b722:	370c      	adds	r7, #12
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr

0800b72c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b085      	sub	sp, #20
 800b730:	af00      	add	r7, sp, #0
 800b732:	4603      	mov	r3, r0
 800b734:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b736:	2300      	movs	r3, #0
 800b738:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b73a:	79fb      	ldrb	r3, [r7, #7]
 800b73c:	2b03      	cmp	r3, #3
 800b73e:	d817      	bhi.n	800b770 <USBD_Get_USB_Status+0x44>
 800b740:	a201      	add	r2, pc, #4	@ (adr r2, 800b748 <USBD_Get_USB_Status+0x1c>)
 800b742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b746:	bf00      	nop
 800b748:	0800b759 	.word	0x0800b759
 800b74c:	0800b75f 	.word	0x0800b75f
 800b750:	0800b765 	.word	0x0800b765
 800b754:	0800b76b 	.word	0x0800b76b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b758:	2300      	movs	r3, #0
 800b75a:	73fb      	strb	r3, [r7, #15]
    break;
 800b75c:	e00b      	b.n	800b776 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b75e:	2303      	movs	r3, #3
 800b760:	73fb      	strb	r3, [r7, #15]
    break;
 800b762:	e008      	b.n	800b776 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b764:	2301      	movs	r3, #1
 800b766:	73fb      	strb	r3, [r7, #15]
    break;
 800b768:	e005      	b.n	800b776 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b76a:	2303      	movs	r3, #3
 800b76c:	73fb      	strb	r3, [r7, #15]
    break;
 800b76e:	e002      	b.n	800b776 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b770:	2303      	movs	r3, #3
 800b772:	73fb      	strb	r3, [r7, #15]
    break;
 800b774:	bf00      	nop
  }
  return usb_status;
 800b776:	7bfb      	ldrb	r3, [r7, #15]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3714      	adds	r7, #20
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <__cvt>:
 800b784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b788:	ec57 6b10 	vmov	r6, r7, d0
 800b78c:	2f00      	cmp	r7, #0
 800b78e:	460c      	mov	r4, r1
 800b790:	4619      	mov	r1, r3
 800b792:	463b      	mov	r3, r7
 800b794:	bfbb      	ittet	lt
 800b796:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b79a:	461f      	movlt	r7, r3
 800b79c:	2300      	movge	r3, #0
 800b79e:	232d      	movlt	r3, #45	@ 0x2d
 800b7a0:	700b      	strb	r3, [r1, #0]
 800b7a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b7a8:	4691      	mov	r9, r2
 800b7aa:	f023 0820 	bic.w	r8, r3, #32
 800b7ae:	bfbc      	itt	lt
 800b7b0:	4632      	movlt	r2, r6
 800b7b2:	4616      	movlt	r6, r2
 800b7b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b7b8:	d005      	beq.n	800b7c6 <__cvt+0x42>
 800b7ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b7be:	d100      	bne.n	800b7c2 <__cvt+0x3e>
 800b7c0:	3401      	adds	r4, #1
 800b7c2:	2102      	movs	r1, #2
 800b7c4:	e000      	b.n	800b7c8 <__cvt+0x44>
 800b7c6:	2103      	movs	r1, #3
 800b7c8:	ab03      	add	r3, sp, #12
 800b7ca:	9301      	str	r3, [sp, #4]
 800b7cc:	ab02      	add	r3, sp, #8
 800b7ce:	9300      	str	r3, [sp, #0]
 800b7d0:	ec47 6b10 	vmov	d0, r6, r7
 800b7d4:	4653      	mov	r3, sl
 800b7d6:	4622      	mov	r2, r4
 800b7d8:	f000 fe6e 	bl	800c4b8 <_dtoa_r>
 800b7dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b7e0:	4605      	mov	r5, r0
 800b7e2:	d119      	bne.n	800b818 <__cvt+0x94>
 800b7e4:	f019 0f01 	tst.w	r9, #1
 800b7e8:	d00e      	beq.n	800b808 <__cvt+0x84>
 800b7ea:	eb00 0904 	add.w	r9, r0, r4
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	4639      	mov	r1, r7
 800b7f6:	f7f5 f96f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b7fa:	b108      	cbz	r0, 800b800 <__cvt+0x7c>
 800b7fc:	f8cd 900c 	str.w	r9, [sp, #12]
 800b800:	2230      	movs	r2, #48	@ 0x30
 800b802:	9b03      	ldr	r3, [sp, #12]
 800b804:	454b      	cmp	r3, r9
 800b806:	d31e      	bcc.n	800b846 <__cvt+0xc2>
 800b808:	9b03      	ldr	r3, [sp, #12]
 800b80a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b80c:	1b5b      	subs	r3, r3, r5
 800b80e:	4628      	mov	r0, r5
 800b810:	6013      	str	r3, [r2, #0]
 800b812:	b004      	add	sp, #16
 800b814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b818:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b81c:	eb00 0904 	add.w	r9, r0, r4
 800b820:	d1e5      	bne.n	800b7ee <__cvt+0x6a>
 800b822:	7803      	ldrb	r3, [r0, #0]
 800b824:	2b30      	cmp	r3, #48	@ 0x30
 800b826:	d10a      	bne.n	800b83e <__cvt+0xba>
 800b828:	2200      	movs	r2, #0
 800b82a:	2300      	movs	r3, #0
 800b82c:	4630      	mov	r0, r6
 800b82e:	4639      	mov	r1, r7
 800b830:	f7f5 f952 	bl	8000ad8 <__aeabi_dcmpeq>
 800b834:	b918      	cbnz	r0, 800b83e <__cvt+0xba>
 800b836:	f1c4 0401 	rsb	r4, r4, #1
 800b83a:	f8ca 4000 	str.w	r4, [sl]
 800b83e:	f8da 3000 	ldr.w	r3, [sl]
 800b842:	4499      	add	r9, r3
 800b844:	e7d3      	b.n	800b7ee <__cvt+0x6a>
 800b846:	1c59      	adds	r1, r3, #1
 800b848:	9103      	str	r1, [sp, #12]
 800b84a:	701a      	strb	r2, [r3, #0]
 800b84c:	e7d9      	b.n	800b802 <__cvt+0x7e>

0800b84e <__exponent>:
 800b84e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b850:	2900      	cmp	r1, #0
 800b852:	bfba      	itte	lt
 800b854:	4249      	neglt	r1, r1
 800b856:	232d      	movlt	r3, #45	@ 0x2d
 800b858:	232b      	movge	r3, #43	@ 0x2b
 800b85a:	2909      	cmp	r1, #9
 800b85c:	7002      	strb	r2, [r0, #0]
 800b85e:	7043      	strb	r3, [r0, #1]
 800b860:	dd29      	ble.n	800b8b6 <__exponent+0x68>
 800b862:	f10d 0307 	add.w	r3, sp, #7
 800b866:	461d      	mov	r5, r3
 800b868:	270a      	movs	r7, #10
 800b86a:	461a      	mov	r2, r3
 800b86c:	fbb1 f6f7 	udiv	r6, r1, r7
 800b870:	fb07 1416 	mls	r4, r7, r6, r1
 800b874:	3430      	adds	r4, #48	@ 0x30
 800b876:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b87a:	460c      	mov	r4, r1
 800b87c:	2c63      	cmp	r4, #99	@ 0x63
 800b87e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b882:	4631      	mov	r1, r6
 800b884:	dcf1      	bgt.n	800b86a <__exponent+0x1c>
 800b886:	3130      	adds	r1, #48	@ 0x30
 800b888:	1e94      	subs	r4, r2, #2
 800b88a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b88e:	1c41      	adds	r1, r0, #1
 800b890:	4623      	mov	r3, r4
 800b892:	42ab      	cmp	r3, r5
 800b894:	d30a      	bcc.n	800b8ac <__exponent+0x5e>
 800b896:	f10d 0309 	add.w	r3, sp, #9
 800b89a:	1a9b      	subs	r3, r3, r2
 800b89c:	42ac      	cmp	r4, r5
 800b89e:	bf88      	it	hi
 800b8a0:	2300      	movhi	r3, #0
 800b8a2:	3302      	adds	r3, #2
 800b8a4:	4403      	add	r3, r0
 800b8a6:	1a18      	subs	r0, r3, r0
 800b8a8:	b003      	add	sp, #12
 800b8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b8b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b8b4:	e7ed      	b.n	800b892 <__exponent+0x44>
 800b8b6:	2330      	movs	r3, #48	@ 0x30
 800b8b8:	3130      	adds	r1, #48	@ 0x30
 800b8ba:	7083      	strb	r3, [r0, #2]
 800b8bc:	70c1      	strb	r1, [r0, #3]
 800b8be:	1d03      	adds	r3, r0, #4
 800b8c0:	e7f1      	b.n	800b8a6 <__exponent+0x58>
	...

0800b8c4 <_printf_float>:
 800b8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c8:	b08d      	sub	sp, #52	@ 0x34
 800b8ca:	460c      	mov	r4, r1
 800b8cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b8d0:	4616      	mov	r6, r2
 800b8d2:	461f      	mov	r7, r3
 800b8d4:	4605      	mov	r5, r0
 800b8d6:	f000 fcef 	bl	800c2b8 <_localeconv_r>
 800b8da:	6803      	ldr	r3, [r0, #0]
 800b8dc:	9304      	str	r3, [sp, #16]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7f4 fcce 	bl	8000280 <strlen>
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8e8:	f8d8 3000 	ldr.w	r3, [r8]
 800b8ec:	9005      	str	r0, [sp, #20]
 800b8ee:	3307      	adds	r3, #7
 800b8f0:	f023 0307 	bic.w	r3, r3, #7
 800b8f4:	f103 0208 	add.w	r2, r3, #8
 800b8f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b8fc:	f8d4 b000 	ldr.w	fp, [r4]
 800b900:	f8c8 2000 	str.w	r2, [r8]
 800b904:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b908:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b90c:	9307      	str	r3, [sp, #28]
 800b90e:	f8cd 8018 	str.w	r8, [sp, #24]
 800b912:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b916:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b91a:	4b9c      	ldr	r3, [pc, #624]	@ (800bb8c <_printf_float+0x2c8>)
 800b91c:	f04f 32ff 	mov.w	r2, #4294967295
 800b920:	f7f5 f90c 	bl	8000b3c <__aeabi_dcmpun>
 800b924:	bb70      	cbnz	r0, 800b984 <_printf_float+0xc0>
 800b926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b92a:	4b98      	ldr	r3, [pc, #608]	@ (800bb8c <_printf_float+0x2c8>)
 800b92c:	f04f 32ff 	mov.w	r2, #4294967295
 800b930:	f7f5 f8e6 	bl	8000b00 <__aeabi_dcmple>
 800b934:	bb30      	cbnz	r0, 800b984 <_printf_float+0xc0>
 800b936:	2200      	movs	r2, #0
 800b938:	2300      	movs	r3, #0
 800b93a:	4640      	mov	r0, r8
 800b93c:	4649      	mov	r1, r9
 800b93e:	f7f5 f8d5 	bl	8000aec <__aeabi_dcmplt>
 800b942:	b110      	cbz	r0, 800b94a <_printf_float+0x86>
 800b944:	232d      	movs	r3, #45	@ 0x2d
 800b946:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b94a:	4a91      	ldr	r2, [pc, #580]	@ (800bb90 <_printf_float+0x2cc>)
 800b94c:	4b91      	ldr	r3, [pc, #580]	@ (800bb94 <_printf_float+0x2d0>)
 800b94e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b952:	bf94      	ite	ls
 800b954:	4690      	movls	r8, r2
 800b956:	4698      	movhi	r8, r3
 800b958:	2303      	movs	r3, #3
 800b95a:	6123      	str	r3, [r4, #16]
 800b95c:	f02b 0304 	bic.w	r3, fp, #4
 800b960:	6023      	str	r3, [r4, #0]
 800b962:	f04f 0900 	mov.w	r9, #0
 800b966:	9700      	str	r7, [sp, #0]
 800b968:	4633      	mov	r3, r6
 800b96a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b96c:	4621      	mov	r1, r4
 800b96e:	4628      	mov	r0, r5
 800b970:	f000 f9d2 	bl	800bd18 <_printf_common>
 800b974:	3001      	adds	r0, #1
 800b976:	f040 808d 	bne.w	800ba94 <_printf_float+0x1d0>
 800b97a:	f04f 30ff 	mov.w	r0, #4294967295
 800b97e:	b00d      	add	sp, #52	@ 0x34
 800b980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b984:	4642      	mov	r2, r8
 800b986:	464b      	mov	r3, r9
 800b988:	4640      	mov	r0, r8
 800b98a:	4649      	mov	r1, r9
 800b98c:	f7f5 f8d6 	bl	8000b3c <__aeabi_dcmpun>
 800b990:	b140      	cbz	r0, 800b9a4 <_printf_float+0xe0>
 800b992:	464b      	mov	r3, r9
 800b994:	2b00      	cmp	r3, #0
 800b996:	bfbc      	itt	lt
 800b998:	232d      	movlt	r3, #45	@ 0x2d
 800b99a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b99e:	4a7e      	ldr	r2, [pc, #504]	@ (800bb98 <_printf_float+0x2d4>)
 800b9a0:	4b7e      	ldr	r3, [pc, #504]	@ (800bb9c <_printf_float+0x2d8>)
 800b9a2:	e7d4      	b.n	800b94e <_printf_float+0x8a>
 800b9a4:	6863      	ldr	r3, [r4, #4]
 800b9a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b9aa:	9206      	str	r2, [sp, #24]
 800b9ac:	1c5a      	adds	r2, r3, #1
 800b9ae:	d13b      	bne.n	800ba28 <_printf_float+0x164>
 800b9b0:	2306      	movs	r3, #6
 800b9b2:	6063      	str	r3, [r4, #4]
 800b9b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	6022      	str	r2, [r4, #0]
 800b9bc:	9303      	str	r3, [sp, #12]
 800b9be:	ab0a      	add	r3, sp, #40	@ 0x28
 800b9c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b9c4:	ab09      	add	r3, sp, #36	@ 0x24
 800b9c6:	9300      	str	r3, [sp, #0]
 800b9c8:	6861      	ldr	r1, [r4, #4]
 800b9ca:	ec49 8b10 	vmov	d0, r8, r9
 800b9ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	f7ff fed6 	bl	800b784 <__cvt>
 800b9d8:	9b06      	ldr	r3, [sp, #24]
 800b9da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b9dc:	2b47      	cmp	r3, #71	@ 0x47
 800b9de:	4680      	mov	r8, r0
 800b9e0:	d129      	bne.n	800ba36 <_printf_float+0x172>
 800b9e2:	1cc8      	adds	r0, r1, #3
 800b9e4:	db02      	blt.n	800b9ec <_printf_float+0x128>
 800b9e6:	6863      	ldr	r3, [r4, #4]
 800b9e8:	4299      	cmp	r1, r3
 800b9ea:	dd41      	ble.n	800ba70 <_printf_float+0x1ac>
 800b9ec:	f1aa 0a02 	sub.w	sl, sl, #2
 800b9f0:	fa5f fa8a 	uxtb.w	sl, sl
 800b9f4:	3901      	subs	r1, #1
 800b9f6:	4652      	mov	r2, sl
 800b9f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b9fc:	9109      	str	r1, [sp, #36]	@ 0x24
 800b9fe:	f7ff ff26 	bl	800b84e <__exponent>
 800ba02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba04:	1813      	adds	r3, r2, r0
 800ba06:	2a01      	cmp	r2, #1
 800ba08:	4681      	mov	r9, r0
 800ba0a:	6123      	str	r3, [r4, #16]
 800ba0c:	dc02      	bgt.n	800ba14 <_printf_float+0x150>
 800ba0e:	6822      	ldr	r2, [r4, #0]
 800ba10:	07d2      	lsls	r2, r2, #31
 800ba12:	d501      	bpl.n	800ba18 <_printf_float+0x154>
 800ba14:	3301      	adds	r3, #1
 800ba16:	6123      	str	r3, [r4, #16]
 800ba18:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d0a2      	beq.n	800b966 <_printf_float+0xa2>
 800ba20:	232d      	movs	r3, #45	@ 0x2d
 800ba22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba26:	e79e      	b.n	800b966 <_printf_float+0xa2>
 800ba28:	9a06      	ldr	r2, [sp, #24]
 800ba2a:	2a47      	cmp	r2, #71	@ 0x47
 800ba2c:	d1c2      	bne.n	800b9b4 <_printf_float+0xf0>
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1c0      	bne.n	800b9b4 <_printf_float+0xf0>
 800ba32:	2301      	movs	r3, #1
 800ba34:	e7bd      	b.n	800b9b2 <_printf_float+0xee>
 800ba36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ba3a:	d9db      	bls.n	800b9f4 <_printf_float+0x130>
 800ba3c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ba40:	d118      	bne.n	800ba74 <_printf_float+0x1b0>
 800ba42:	2900      	cmp	r1, #0
 800ba44:	6863      	ldr	r3, [r4, #4]
 800ba46:	dd0b      	ble.n	800ba60 <_printf_float+0x19c>
 800ba48:	6121      	str	r1, [r4, #16]
 800ba4a:	b913      	cbnz	r3, 800ba52 <_printf_float+0x18e>
 800ba4c:	6822      	ldr	r2, [r4, #0]
 800ba4e:	07d0      	lsls	r0, r2, #31
 800ba50:	d502      	bpl.n	800ba58 <_printf_float+0x194>
 800ba52:	3301      	adds	r3, #1
 800ba54:	440b      	add	r3, r1
 800ba56:	6123      	str	r3, [r4, #16]
 800ba58:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ba5a:	f04f 0900 	mov.w	r9, #0
 800ba5e:	e7db      	b.n	800ba18 <_printf_float+0x154>
 800ba60:	b913      	cbnz	r3, 800ba68 <_printf_float+0x1a4>
 800ba62:	6822      	ldr	r2, [r4, #0]
 800ba64:	07d2      	lsls	r2, r2, #31
 800ba66:	d501      	bpl.n	800ba6c <_printf_float+0x1a8>
 800ba68:	3302      	adds	r3, #2
 800ba6a:	e7f4      	b.n	800ba56 <_printf_float+0x192>
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e7f2      	b.n	800ba56 <_printf_float+0x192>
 800ba70:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ba74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba76:	4299      	cmp	r1, r3
 800ba78:	db05      	blt.n	800ba86 <_printf_float+0x1c2>
 800ba7a:	6823      	ldr	r3, [r4, #0]
 800ba7c:	6121      	str	r1, [r4, #16]
 800ba7e:	07d8      	lsls	r0, r3, #31
 800ba80:	d5ea      	bpl.n	800ba58 <_printf_float+0x194>
 800ba82:	1c4b      	adds	r3, r1, #1
 800ba84:	e7e7      	b.n	800ba56 <_printf_float+0x192>
 800ba86:	2900      	cmp	r1, #0
 800ba88:	bfd4      	ite	le
 800ba8a:	f1c1 0202 	rsble	r2, r1, #2
 800ba8e:	2201      	movgt	r2, #1
 800ba90:	4413      	add	r3, r2
 800ba92:	e7e0      	b.n	800ba56 <_printf_float+0x192>
 800ba94:	6823      	ldr	r3, [r4, #0]
 800ba96:	055a      	lsls	r2, r3, #21
 800ba98:	d407      	bmi.n	800baaa <_printf_float+0x1e6>
 800ba9a:	6923      	ldr	r3, [r4, #16]
 800ba9c:	4642      	mov	r2, r8
 800ba9e:	4631      	mov	r1, r6
 800baa0:	4628      	mov	r0, r5
 800baa2:	47b8      	blx	r7
 800baa4:	3001      	adds	r0, #1
 800baa6:	d12b      	bne.n	800bb00 <_printf_float+0x23c>
 800baa8:	e767      	b.n	800b97a <_printf_float+0xb6>
 800baaa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800baae:	f240 80dd 	bls.w	800bc6c <_printf_float+0x3a8>
 800bab2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bab6:	2200      	movs	r2, #0
 800bab8:	2300      	movs	r3, #0
 800baba:	f7f5 f80d 	bl	8000ad8 <__aeabi_dcmpeq>
 800babe:	2800      	cmp	r0, #0
 800bac0:	d033      	beq.n	800bb2a <_printf_float+0x266>
 800bac2:	4a37      	ldr	r2, [pc, #220]	@ (800bba0 <_printf_float+0x2dc>)
 800bac4:	2301      	movs	r3, #1
 800bac6:	4631      	mov	r1, r6
 800bac8:	4628      	mov	r0, r5
 800baca:	47b8      	blx	r7
 800bacc:	3001      	adds	r0, #1
 800bace:	f43f af54 	beq.w	800b97a <_printf_float+0xb6>
 800bad2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bad6:	4543      	cmp	r3, r8
 800bad8:	db02      	blt.n	800bae0 <_printf_float+0x21c>
 800bada:	6823      	ldr	r3, [r4, #0]
 800badc:	07d8      	lsls	r0, r3, #31
 800bade:	d50f      	bpl.n	800bb00 <_printf_float+0x23c>
 800bae0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bae4:	4631      	mov	r1, r6
 800bae6:	4628      	mov	r0, r5
 800bae8:	47b8      	blx	r7
 800baea:	3001      	adds	r0, #1
 800baec:	f43f af45 	beq.w	800b97a <_printf_float+0xb6>
 800baf0:	f04f 0900 	mov.w	r9, #0
 800baf4:	f108 38ff 	add.w	r8, r8, #4294967295
 800baf8:	f104 0a1a 	add.w	sl, r4, #26
 800bafc:	45c8      	cmp	r8, r9
 800bafe:	dc09      	bgt.n	800bb14 <_printf_float+0x250>
 800bb00:	6823      	ldr	r3, [r4, #0]
 800bb02:	079b      	lsls	r3, r3, #30
 800bb04:	f100 8103 	bmi.w	800bd0e <_printf_float+0x44a>
 800bb08:	68e0      	ldr	r0, [r4, #12]
 800bb0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb0c:	4298      	cmp	r0, r3
 800bb0e:	bfb8      	it	lt
 800bb10:	4618      	movlt	r0, r3
 800bb12:	e734      	b.n	800b97e <_printf_float+0xba>
 800bb14:	2301      	movs	r3, #1
 800bb16:	4652      	mov	r2, sl
 800bb18:	4631      	mov	r1, r6
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	47b8      	blx	r7
 800bb1e:	3001      	adds	r0, #1
 800bb20:	f43f af2b 	beq.w	800b97a <_printf_float+0xb6>
 800bb24:	f109 0901 	add.w	r9, r9, #1
 800bb28:	e7e8      	b.n	800bafc <_printf_float+0x238>
 800bb2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	dc39      	bgt.n	800bba4 <_printf_float+0x2e0>
 800bb30:	4a1b      	ldr	r2, [pc, #108]	@ (800bba0 <_printf_float+0x2dc>)
 800bb32:	2301      	movs	r3, #1
 800bb34:	4631      	mov	r1, r6
 800bb36:	4628      	mov	r0, r5
 800bb38:	47b8      	blx	r7
 800bb3a:	3001      	adds	r0, #1
 800bb3c:	f43f af1d 	beq.w	800b97a <_printf_float+0xb6>
 800bb40:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bb44:	ea59 0303 	orrs.w	r3, r9, r3
 800bb48:	d102      	bne.n	800bb50 <_printf_float+0x28c>
 800bb4a:	6823      	ldr	r3, [r4, #0]
 800bb4c:	07d9      	lsls	r1, r3, #31
 800bb4e:	d5d7      	bpl.n	800bb00 <_printf_float+0x23c>
 800bb50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb54:	4631      	mov	r1, r6
 800bb56:	4628      	mov	r0, r5
 800bb58:	47b8      	blx	r7
 800bb5a:	3001      	adds	r0, #1
 800bb5c:	f43f af0d 	beq.w	800b97a <_printf_float+0xb6>
 800bb60:	f04f 0a00 	mov.w	sl, #0
 800bb64:	f104 0b1a 	add.w	fp, r4, #26
 800bb68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb6a:	425b      	negs	r3, r3
 800bb6c:	4553      	cmp	r3, sl
 800bb6e:	dc01      	bgt.n	800bb74 <_printf_float+0x2b0>
 800bb70:	464b      	mov	r3, r9
 800bb72:	e793      	b.n	800ba9c <_printf_float+0x1d8>
 800bb74:	2301      	movs	r3, #1
 800bb76:	465a      	mov	r2, fp
 800bb78:	4631      	mov	r1, r6
 800bb7a:	4628      	mov	r0, r5
 800bb7c:	47b8      	blx	r7
 800bb7e:	3001      	adds	r0, #1
 800bb80:	f43f aefb 	beq.w	800b97a <_printf_float+0xb6>
 800bb84:	f10a 0a01 	add.w	sl, sl, #1
 800bb88:	e7ee      	b.n	800bb68 <_printf_float+0x2a4>
 800bb8a:	bf00      	nop
 800bb8c:	7fefffff 	.word	0x7fefffff
 800bb90:	0800e9e4 	.word	0x0800e9e4
 800bb94:	0800e9e8 	.word	0x0800e9e8
 800bb98:	0800e9ec 	.word	0x0800e9ec
 800bb9c:	0800e9f0 	.word	0x0800e9f0
 800bba0:	0800e9f4 	.word	0x0800e9f4
 800bba4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bba6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bbaa:	4553      	cmp	r3, sl
 800bbac:	bfa8      	it	ge
 800bbae:	4653      	movge	r3, sl
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	4699      	mov	r9, r3
 800bbb4:	dc36      	bgt.n	800bc24 <_printf_float+0x360>
 800bbb6:	f04f 0b00 	mov.w	fp, #0
 800bbba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbbe:	f104 021a 	add.w	r2, r4, #26
 800bbc2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bbc4:	9306      	str	r3, [sp, #24]
 800bbc6:	eba3 0309 	sub.w	r3, r3, r9
 800bbca:	455b      	cmp	r3, fp
 800bbcc:	dc31      	bgt.n	800bc32 <_printf_float+0x36e>
 800bbce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbd0:	459a      	cmp	sl, r3
 800bbd2:	dc3a      	bgt.n	800bc4a <_printf_float+0x386>
 800bbd4:	6823      	ldr	r3, [r4, #0]
 800bbd6:	07da      	lsls	r2, r3, #31
 800bbd8:	d437      	bmi.n	800bc4a <_printf_float+0x386>
 800bbda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbdc:	ebaa 0903 	sub.w	r9, sl, r3
 800bbe0:	9b06      	ldr	r3, [sp, #24]
 800bbe2:	ebaa 0303 	sub.w	r3, sl, r3
 800bbe6:	4599      	cmp	r9, r3
 800bbe8:	bfa8      	it	ge
 800bbea:	4699      	movge	r9, r3
 800bbec:	f1b9 0f00 	cmp.w	r9, #0
 800bbf0:	dc33      	bgt.n	800bc5a <_printf_float+0x396>
 800bbf2:	f04f 0800 	mov.w	r8, #0
 800bbf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbfa:	f104 0b1a 	add.w	fp, r4, #26
 800bbfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc00:	ebaa 0303 	sub.w	r3, sl, r3
 800bc04:	eba3 0309 	sub.w	r3, r3, r9
 800bc08:	4543      	cmp	r3, r8
 800bc0a:	f77f af79 	ble.w	800bb00 <_printf_float+0x23c>
 800bc0e:	2301      	movs	r3, #1
 800bc10:	465a      	mov	r2, fp
 800bc12:	4631      	mov	r1, r6
 800bc14:	4628      	mov	r0, r5
 800bc16:	47b8      	blx	r7
 800bc18:	3001      	adds	r0, #1
 800bc1a:	f43f aeae 	beq.w	800b97a <_printf_float+0xb6>
 800bc1e:	f108 0801 	add.w	r8, r8, #1
 800bc22:	e7ec      	b.n	800bbfe <_printf_float+0x33a>
 800bc24:	4642      	mov	r2, r8
 800bc26:	4631      	mov	r1, r6
 800bc28:	4628      	mov	r0, r5
 800bc2a:	47b8      	blx	r7
 800bc2c:	3001      	adds	r0, #1
 800bc2e:	d1c2      	bne.n	800bbb6 <_printf_float+0x2f2>
 800bc30:	e6a3      	b.n	800b97a <_printf_float+0xb6>
 800bc32:	2301      	movs	r3, #1
 800bc34:	4631      	mov	r1, r6
 800bc36:	4628      	mov	r0, r5
 800bc38:	9206      	str	r2, [sp, #24]
 800bc3a:	47b8      	blx	r7
 800bc3c:	3001      	adds	r0, #1
 800bc3e:	f43f ae9c 	beq.w	800b97a <_printf_float+0xb6>
 800bc42:	9a06      	ldr	r2, [sp, #24]
 800bc44:	f10b 0b01 	add.w	fp, fp, #1
 800bc48:	e7bb      	b.n	800bbc2 <_printf_float+0x2fe>
 800bc4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc4e:	4631      	mov	r1, r6
 800bc50:	4628      	mov	r0, r5
 800bc52:	47b8      	blx	r7
 800bc54:	3001      	adds	r0, #1
 800bc56:	d1c0      	bne.n	800bbda <_printf_float+0x316>
 800bc58:	e68f      	b.n	800b97a <_printf_float+0xb6>
 800bc5a:	9a06      	ldr	r2, [sp, #24]
 800bc5c:	464b      	mov	r3, r9
 800bc5e:	4442      	add	r2, r8
 800bc60:	4631      	mov	r1, r6
 800bc62:	4628      	mov	r0, r5
 800bc64:	47b8      	blx	r7
 800bc66:	3001      	adds	r0, #1
 800bc68:	d1c3      	bne.n	800bbf2 <_printf_float+0x32e>
 800bc6a:	e686      	b.n	800b97a <_printf_float+0xb6>
 800bc6c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bc70:	f1ba 0f01 	cmp.w	sl, #1
 800bc74:	dc01      	bgt.n	800bc7a <_printf_float+0x3b6>
 800bc76:	07db      	lsls	r3, r3, #31
 800bc78:	d536      	bpl.n	800bce8 <_printf_float+0x424>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	4642      	mov	r2, r8
 800bc7e:	4631      	mov	r1, r6
 800bc80:	4628      	mov	r0, r5
 800bc82:	47b8      	blx	r7
 800bc84:	3001      	adds	r0, #1
 800bc86:	f43f ae78 	beq.w	800b97a <_printf_float+0xb6>
 800bc8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc8e:	4631      	mov	r1, r6
 800bc90:	4628      	mov	r0, r5
 800bc92:	47b8      	blx	r7
 800bc94:	3001      	adds	r0, #1
 800bc96:	f43f ae70 	beq.w	800b97a <_printf_float+0xb6>
 800bc9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bc9e:	2200      	movs	r2, #0
 800bca0:	2300      	movs	r3, #0
 800bca2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bca6:	f7f4 ff17 	bl	8000ad8 <__aeabi_dcmpeq>
 800bcaa:	b9c0      	cbnz	r0, 800bcde <_printf_float+0x41a>
 800bcac:	4653      	mov	r3, sl
 800bcae:	f108 0201 	add.w	r2, r8, #1
 800bcb2:	4631      	mov	r1, r6
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	47b8      	blx	r7
 800bcb8:	3001      	adds	r0, #1
 800bcba:	d10c      	bne.n	800bcd6 <_printf_float+0x412>
 800bcbc:	e65d      	b.n	800b97a <_printf_float+0xb6>
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	465a      	mov	r2, fp
 800bcc2:	4631      	mov	r1, r6
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	47b8      	blx	r7
 800bcc8:	3001      	adds	r0, #1
 800bcca:	f43f ae56 	beq.w	800b97a <_printf_float+0xb6>
 800bcce:	f108 0801 	add.w	r8, r8, #1
 800bcd2:	45d0      	cmp	r8, sl
 800bcd4:	dbf3      	blt.n	800bcbe <_printf_float+0x3fa>
 800bcd6:	464b      	mov	r3, r9
 800bcd8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bcdc:	e6df      	b.n	800ba9e <_printf_float+0x1da>
 800bcde:	f04f 0800 	mov.w	r8, #0
 800bce2:	f104 0b1a 	add.w	fp, r4, #26
 800bce6:	e7f4      	b.n	800bcd2 <_printf_float+0x40e>
 800bce8:	2301      	movs	r3, #1
 800bcea:	4642      	mov	r2, r8
 800bcec:	e7e1      	b.n	800bcb2 <_printf_float+0x3ee>
 800bcee:	2301      	movs	r3, #1
 800bcf0:	464a      	mov	r2, r9
 800bcf2:	4631      	mov	r1, r6
 800bcf4:	4628      	mov	r0, r5
 800bcf6:	47b8      	blx	r7
 800bcf8:	3001      	adds	r0, #1
 800bcfa:	f43f ae3e 	beq.w	800b97a <_printf_float+0xb6>
 800bcfe:	f108 0801 	add.w	r8, r8, #1
 800bd02:	68e3      	ldr	r3, [r4, #12]
 800bd04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd06:	1a5b      	subs	r3, r3, r1
 800bd08:	4543      	cmp	r3, r8
 800bd0a:	dcf0      	bgt.n	800bcee <_printf_float+0x42a>
 800bd0c:	e6fc      	b.n	800bb08 <_printf_float+0x244>
 800bd0e:	f04f 0800 	mov.w	r8, #0
 800bd12:	f104 0919 	add.w	r9, r4, #25
 800bd16:	e7f4      	b.n	800bd02 <_printf_float+0x43e>

0800bd18 <_printf_common>:
 800bd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd1c:	4616      	mov	r6, r2
 800bd1e:	4698      	mov	r8, r3
 800bd20:	688a      	ldr	r2, [r1, #8]
 800bd22:	690b      	ldr	r3, [r1, #16]
 800bd24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	bfb8      	it	lt
 800bd2c:	4613      	movlt	r3, r2
 800bd2e:	6033      	str	r3, [r6, #0]
 800bd30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bd34:	4607      	mov	r7, r0
 800bd36:	460c      	mov	r4, r1
 800bd38:	b10a      	cbz	r2, 800bd3e <_printf_common+0x26>
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	6033      	str	r3, [r6, #0]
 800bd3e:	6823      	ldr	r3, [r4, #0]
 800bd40:	0699      	lsls	r1, r3, #26
 800bd42:	bf42      	ittt	mi
 800bd44:	6833      	ldrmi	r3, [r6, #0]
 800bd46:	3302      	addmi	r3, #2
 800bd48:	6033      	strmi	r3, [r6, #0]
 800bd4a:	6825      	ldr	r5, [r4, #0]
 800bd4c:	f015 0506 	ands.w	r5, r5, #6
 800bd50:	d106      	bne.n	800bd60 <_printf_common+0x48>
 800bd52:	f104 0a19 	add.w	sl, r4, #25
 800bd56:	68e3      	ldr	r3, [r4, #12]
 800bd58:	6832      	ldr	r2, [r6, #0]
 800bd5a:	1a9b      	subs	r3, r3, r2
 800bd5c:	42ab      	cmp	r3, r5
 800bd5e:	dc26      	bgt.n	800bdae <_printf_common+0x96>
 800bd60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bd64:	6822      	ldr	r2, [r4, #0]
 800bd66:	3b00      	subs	r3, #0
 800bd68:	bf18      	it	ne
 800bd6a:	2301      	movne	r3, #1
 800bd6c:	0692      	lsls	r2, r2, #26
 800bd6e:	d42b      	bmi.n	800bdc8 <_printf_common+0xb0>
 800bd70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bd74:	4641      	mov	r1, r8
 800bd76:	4638      	mov	r0, r7
 800bd78:	47c8      	blx	r9
 800bd7a:	3001      	adds	r0, #1
 800bd7c:	d01e      	beq.n	800bdbc <_printf_common+0xa4>
 800bd7e:	6823      	ldr	r3, [r4, #0]
 800bd80:	6922      	ldr	r2, [r4, #16]
 800bd82:	f003 0306 	and.w	r3, r3, #6
 800bd86:	2b04      	cmp	r3, #4
 800bd88:	bf02      	ittt	eq
 800bd8a:	68e5      	ldreq	r5, [r4, #12]
 800bd8c:	6833      	ldreq	r3, [r6, #0]
 800bd8e:	1aed      	subeq	r5, r5, r3
 800bd90:	68a3      	ldr	r3, [r4, #8]
 800bd92:	bf0c      	ite	eq
 800bd94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd98:	2500      	movne	r5, #0
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	bfc4      	itt	gt
 800bd9e:	1a9b      	subgt	r3, r3, r2
 800bda0:	18ed      	addgt	r5, r5, r3
 800bda2:	2600      	movs	r6, #0
 800bda4:	341a      	adds	r4, #26
 800bda6:	42b5      	cmp	r5, r6
 800bda8:	d11a      	bne.n	800bde0 <_printf_common+0xc8>
 800bdaa:	2000      	movs	r0, #0
 800bdac:	e008      	b.n	800bdc0 <_printf_common+0xa8>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	4652      	mov	r2, sl
 800bdb2:	4641      	mov	r1, r8
 800bdb4:	4638      	mov	r0, r7
 800bdb6:	47c8      	blx	r9
 800bdb8:	3001      	adds	r0, #1
 800bdba:	d103      	bne.n	800bdc4 <_printf_common+0xac>
 800bdbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdc4:	3501      	adds	r5, #1
 800bdc6:	e7c6      	b.n	800bd56 <_printf_common+0x3e>
 800bdc8:	18e1      	adds	r1, r4, r3
 800bdca:	1c5a      	adds	r2, r3, #1
 800bdcc:	2030      	movs	r0, #48	@ 0x30
 800bdce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bdd2:	4422      	add	r2, r4
 800bdd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bdd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bddc:	3302      	adds	r3, #2
 800bdde:	e7c7      	b.n	800bd70 <_printf_common+0x58>
 800bde0:	2301      	movs	r3, #1
 800bde2:	4622      	mov	r2, r4
 800bde4:	4641      	mov	r1, r8
 800bde6:	4638      	mov	r0, r7
 800bde8:	47c8      	blx	r9
 800bdea:	3001      	adds	r0, #1
 800bdec:	d0e6      	beq.n	800bdbc <_printf_common+0xa4>
 800bdee:	3601      	adds	r6, #1
 800bdf0:	e7d9      	b.n	800bda6 <_printf_common+0x8e>
	...

0800bdf4 <_printf_i>:
 800bdf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdf8:	7e0f      	ldrb	r7, [r1, #24]
 800bdfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bdfc:	2f78      	cmp	r7, #120	@ 0x78
 800bdfe:	4691      	mov	r9, r2
 800be00:	4680      	mov	r8, r0
 800be02:	460c      	mov	r4, r1
 800be04:	469a      	mov	sl, r3
 800be06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800be0a:	d807      	bhi.n	800be1c <_printf_i+0x28>
 800be0c:	2f62      	cmp	r7, #98	@ 0x62
 800be0e:	d80a      	bhi.n	800be26 <_printf_i+0x32>
 800be10:	2f00      	cmp	r7, #0
 800be12:	f000 80d2 	beq.w	800bfba <_printf_i+0x1c6>
 800be16:	2f58      	cmp	r7, #88	@ 0x58
 800be18:	f000 80b9 	beq.w	800bf8e <_printf_i+0x19a>
 800be1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800be24:	e03a      	b.n	800be9c <_printf_i+0xa8>
 800be26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800be2a:	2b15      	cmp	r3, #21
 800be2c:	d8f6      	bhi.n	800be1c <_printf_i+0x28>
 800be2e:	a101      	add	r1, pc, #4	@ (adr r1, 800be34 <_printf_i+0x40>)
 800be30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be34:	0800be8d 	.word	0x0800be8d
 800be38:	0800bea1 	.word	0x0800bea1
 800be3c:	0800be1d 	.word	0x0800be1d
 800be40:	0800be1d 	.word	0x0800be1d
 800be44:	0800be1d 	.word	0x0800be1d
 800be48:	0800be1d 	.word	0x0800be1d
 800be4c:	0800bea1 	.word	0x0800bea1
 800be50:	0800be1d 	.word	0x0800be1d
 800be54:	0800be1d 	.word	0x0800be1d
 800be58:	0800be1d 	.word	0x0800be1d
 800be5c:	0800be1d 	.word	0x0800be1d
 800be60:	0800bfa1 	.word	0x0800bfa1
 800be64:	0800becb 	.word	0x0800becb
 800be68:	0800bf5b 	.word	0x0800bf5b
 800be6c:	0800be1d 	.word	0x0800be1d
 800be70:	0800be1d 	.word	0x0800be1d
 800be74:	0800bfc3 	.word	0x0800bfc3
 800be78:	0800be1d 	.word	0x0800be1d
 800be7c:	0800becb 	.word	0x0800becb
 800be80:	0800be1d 	.word	0x0800be1d
 800be84:	0800be1d 	.word	0x0800be1d
 800be88:	0800bf63 	.word	0x0800bf63
 800be8c:	6833      	ldr	r3, [r6, #0]
 800be8e:	1d1a      	adds	r2, r3, #4
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	6032      	str	r2, [r6, #0]
 800be94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800be9c:	2301      	movs	r3, #1
 800be9e:	e09d      	b.n	800bfdc <_printf_i+0x1e8>
 800bea0:	6833      	ldr	r3, [r6, #0]
 800bea2:	6820      	ldr	r0, [r4, #0]
 800bea4:	1d19      	adds	r1, r3, #4
 800bea6:	6031      	str	r1, [r6, #0]
 800bea8:	0606      	lsls	r6, r0, #24
 800beaa:	d501      	bpl.n	800beb0 <_printf_i+0xbc>
 800beac:	681d      	ldr	r5, [r3, #0]
 800beae:	e003      	b.n	800beb8 <_printf_i+0xc4>
 800beb0:	0645      	lsls	r5, r0, #25
 800beb2:	d5fb      	bpl.n	800beac <_printf_i+0xb8>
 800beb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800beb8:	2d00      	cmp	r5, #0
 800beba:	da03      	bge.n	800bec4 <_printf_i+0xd0>
 800bebc:	232d      	movs	r3, #45	@ 0x2d
 800bebe:	426d      	negs	r5, r5
 800bec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bec4:	4859      	ldr	r0, [pc, #356]	@ (800c02c <_printf_i+0x238>)
 800bec6:	230a      	movs	r3, #10
 800bec8:	e011      	b.n	800beee <_printf_i+0xfa>
 800beca:	6821      	ldr	r1, [r4, #0]
 800becc:	6833      	ldr	r3, [r6, #0]
 800bece:	0608      	lsls	r0, r1, #24
 800bed0:	f853 5b04 	ldr.w	r5, [r3], #4
 800bed4:	d402      	bmi.n	800bedc <_printf_i+0xe8>
 800bed6:	0649      	lsls	r1, r1, #25
 800bed8:	bf48      	it	mi
 800beda:	b2ad      	uxthmi	r5, r5
 800bedc:	2f6f      	cmp	r7, #111	@ 0x6f
 800bede:	4853      	ldr	r0, [pc, #332]	@ (800c02c <_printf_i+0x238>)
 800bee0:	6033      	str	r3, [r6, #0]
 800bee2:	bf14      	ite	ne
 800bee4:	230a      	movne	r3, #10
 800bee6:	2308      	moveq	r3, #8
 800bee8:	2100      	movs	r1, #0
 800beea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800beee:	6866      	ldr	r6, [r4, #4]
 800bef0:	60a6      	str	r6, [r4, #8]
 800bef2:	2e00      	cmp	r6, #0
 800bef4:	bfa2      	ittt	ge
 800bef6:	6821      	ldrge	r1, [r4, #0]
 800bef8:	f021 0104 	bicge.w	r1, r1, #4
 800befc:	6021      	strge	r1, [r4, #0]
 800befe:	b90d      	cbnz	r5, 800bf04 <_printf_i+0x110>
 800bf00:	2e00      	cmp	r6, #0
 800bf02:	d04b      	beq.n	800bf9c <_printf_i+0x1a8>
 800bf04:	4616      	mov	r6, r2
 800bf06:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf0a:	fb03 5711 	mls	r7, r3, r1, r5
 800bf0e:	5dc7      	ldrb	r7, [r0, r7]
 800bf10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf14:	462f      	mov	r7, r5
 800bf16:	42bb      	cmp	r3, r7
 800bf18:	460d      	mov	r5, r1
 800bf1a:	d9f4      	bls.n	800bf06 <_printf_i+0x112>
 800bf1c:	2b08      	cmp	r3, #8
 800bf1e:	d10b      	bne.n	800bf38 <_printf_i+0x144>
 800bf20:	6823      	ldr	r3, [r4, #0]
 800bf22:	07df      	lsls	r7, r3, #31
 800bf24:	d508      	bpl.n	800bf38 <_printf_i+0x144>
 800bf26:	6923      	ldr	r3, [r4, #16]
 800bf28:	6861      	ldr	r1, [r4, #4]
 800bf2a:	4299      	cmp	r1, r3
 800bf2c:	bfde      	ittt	le
 800bf2e:	2330      	movle	r3, #48	@ 0x30
 800bf30:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf34:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf38:	1b92      	subs	r2, r2, r6
 800bf3a:	6122      	str	r2, [r4, #16]
 800bf3c:	f8cd a000 	str.w	sl, [sp]
 800bf40:	464b      	mov	r3, r9
 800bf42:	aa03      	add	r2, sp, #12
 800bf44:	4621      	mov	r1, r4
 800bf46:	4640      	mov	r0, r8
 800bf48:	f7ff fee6 	bl	800bd18 <_printf_common>
 800bf4c:	3001      	adds	r0, #1
 800bf4e:	d14a      	bne.n	800bfe6 <_printf_i+0x1f2>
 800bf50:	f04f 30ff 	mov.w	r0, #4294967295
 800bf54:	b004      	add	sp, #16
 800bf56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf5a:	6823      	ldr	r3, [r4, #0]
 800bf5c:	f043 0320 	orr.w	r3, r3, #32
 800bf60:	6023      	str	r3, [r4, #0]
 800bf62:	4833      	ldr	r0, [pc, #204]	@ (800c030 <_printf_i+0x23c>)
 800bf64:	2778      	movs	r7, #120	@ 0x78
 800bf66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bf6a:	6823      	ldr	r3, [r4, #0]
 800bf6c:	6831      	ldr	r1, [r6, #0]
 800bf6e:	061f      	lsls	r7, r3, #24
 800bf70:	f851 5b04 	ldr.w	r5, [r1], #4
 800bf74:	d402      	bmi.n	800bf7c <_printf_i+0x188>
 800bf76:	065f      	lsls	r7, r3, #25
 800bf78:	bf48      	it	mi
 800bf7a:	b2ad      	uxthmi	r5, r5
 800bf7c:	6031      	str	r1, [r6, #0]
 800bf7e:	07d9      	lsls	r1, r3, #31
 800bf80:	bf44      	itt	mi
 800bf82:	f043 0320 	orrmi.w	r3, r3, #32
 800bf86:	6023      	strmi	r3, [r4, #0]
 800bf88:	b11d      	cbz	r5, 800bf92 <_printf_i+0x19e>
 800bf8a:	2310      	movs	r3, #16
 800bf8c:	e7ac      	b.n	800bee8 <_printf_i+0xf4>
 800bf8e:	4827      	ldr	r0, [pc, #156]	@ (800c02c <_printf_i+0x238>)
 800bf90:	e7e9      	b.n	800bf66 <_printf_i+0x172>
 800bf92:	6823      	ldr	r3, [r4, #0]
 800bf94:	f023 0320 	bic.w	r3, r3, #32
 800bf98:	6023      	str	r3, [r4, #0]
 800bf9a:	e7f6      	b.n	800bf8a <_printf_i+0x196>
 800bf9c:	4616      	mov	r6, r2
 800bf9e:	e7bd      	b.n	800bf1c <_printf_i+0x128>
 800bfa0:	6833      	ldr	r3, [r6, #0]
 800bfa2:	6825      	ldr	r5, [r4, #0]
 800bfa4:	6961      	ldr	r1, [r4, #20]
 800bfa6:	1d18      	adds	r0, r3, #4
 800bfa8:	6030      	str	r0, [r6, #0]
 800bfaa:	062e      	lsls	r6, r5, #24
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	d501      	bpl.n	800bfb4 <_printf_i+0x1c0>
 800bfb0:	6019      	str	r1, [r3, #0]
 800bfb2:	e002      	b.n	800bfba <_printf_i+0x1c6>
 800bfb4:	0668      	lsls	r0, r5, #25
 800bfb6:	d5fb      	bpl.n	800bfb0 <_printf_i+0x1bc>
 800bfb8:	8019      	strh	r1, [r3, #0]
 800bfba:	2300      	movs	r3, #0
 800bfbc:	6123      	str	r3, [r4, #16]
 800bfbe:	4616      	mov	r6, r2
 800bfc0:	e7bc      	b.n	800bf3c <_printf_i+0x148>
 800bfc2:	6833      	ldr	r3, [r6, #0]
 800bfc4:	1d1a      	adds	r2, r3, #4
 800bfc6:	6032      	str	r2, [r6, #0]
 800bfc8:	681e      	ldr	r6, [r3, #0]
 800bfca:	6862      	ldr	r2, [r4, #4]
 800bfcc:	2100      	movs	r1, #0
 800bfce:	4630      	mov	r0, r6
 800bfd0:	f7f4 f906 	bl	80001e0 <memchr>
 800bfd4:	b108      	cbz	r0, 800bfda <_printf_i+0x1e6>
 800bfd6:	1b80      	subs	r0, r0, r6
 800bfd8:	6060      	str	r0, [r4, #4]
 800bfda:	6863      	ldr	r3, [r4, #4]
 800bfdc:	6123      	str	r3, [r4, #16]
 800bfde:	2300      	movs	r3, #0
 800bfe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfe4:	e7aa      	b.n	800bf3c <_printf_i+0x148>
 800bfe6:	6923      	ldr	r3, [r4, #16]
 800bfe8:	4632      	mov	r2, r6
 800bfea:	4649      	mov	r1, r9
 800bfec:	4640      	mov	r0, r8
 800bfee:	47d0      	blx	sl
 800bff0:	3001      	adds	r0, #1
 800bff2:	d0ad      	beq.n	800bf50 <_printf_i+0x15c>
 800bff4:	6823      	ldr	r3, [r4, #0]
 800bff6:	079b      	lsls	r3, r3, #30
 800bff8:	d413      	bmi.n	800c022 <_printf_i+0x22e>
 800bffa:	68e0      	ldr	r0, [r4, #12]
 800bffc:	9b03      	ldr	r3, [sp, #12]
 800bffe:	4298      	cmp	r0, r3
 800c000:	bfb8      	it	lt
 800c002:	4618      	movlt	r0, r3
 800c004:	e7a6      	b.n	800bf54 <_printf_i+0x160>
 800c006:	2301      	movs	r3, #1
 800c008:	4632      	mov	r2, r6
 800c00a:	4649      	mov	r1, r9
 800c00c:	4640      	mov	r0, r8
 800c00e:	47d0      	blx	sl
 800c010:	3001      	adds	r0, #1
 800c012:	d09d      	beq.n	800bf50 <_printf_i+0x15c>
 800c014:	3501      	adds	r5, #1
 800c016:	68e3      	ldr	r3, [r4, #12]
 800c018:	9903      	ldr	r1, [sp, #12]
 800c01a:	1a5b      	subs	r3, r3, r1
 800c01c:	42ab      	cmp	r3, r5
 800c01e:	dcf2      	bgt.n	800c006 <_printf_i+0x212>
 800c020:	e7eb      	b.n	800bffa <_printf_i+0x206>
 800c022:	2500      	movs	r5, #0
 800c024:	f104 0619 	add.w	r6, r4, #25
 800c028:	e7f5      	b.n	800c016 <_printf_i+0x222>
 800c02a:	bf00      	nop
 800c02c:	0800e9f6 	.word	0x0800e9f6
 800c030:	0800ea07 	.word	0x0800ea07

0800c034 <std>:
 800c034:	2300      	movs	r3, #0
 800c036:	b510      	push	{r4, lr}
 800c038:	4604      	mov	r4, r0
 800c03a:	e9c0 3300 	strd	r3, r3, [r0]
 800c03e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c042:	6083      	str	r3, [r0, #8]
 800c044:	8181      	strh	r1, [r0, #12]
 800c046:	6643      	str	r3, [r0, #100]	@ 0x64
 800c048:	81c2      	strh	r2, [r0, #14]
 800c04a:	6183      	str	r3, [r0, #24]
 800c04c:	4619      	mov	r1, r3
 800c04e:	2208      	movs	r2, #8
 800c050:	305c      	adds	r0, #92	@ 0x5c
 800c052:	f000 f928 	bl	800c2a6 <memset>
 800c056:	4b0d      	ldr	r3, [pc, #52]	@ (800c08c <std+0x58>)
 800c058:	6263      	str	r3, [r4, #36]	@ 0x24
 800c05a:	4b0d      	ldr	r3, [pc, #52]	@ (800c090 <std+0x5c>)
 800c05c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c05e:	4b0d      	ldr	r3, [pc, #52]	@ (800c094 <std+0x60>)
 800c060:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c062:	4b0d      	ldr	r3, [pc, #52]	@ (800c098 <std+0x64>)
 800c064:	6323      	str	r3, [r4, #48]	@ 0x30
 800c066:	4b0d      	ldr	r3, [pc, #52]	@ (800c09c <std+0x68>)
 800c068:	6224      	str	r4, [r4, #32]
 800c06a:	429c      	cmp	r4, r3
 800c06c:	d006      	beq.n	800c07c <std+0x48>
 800c06e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c072:	4294      	cmp	r4, r2
 800c074:	d002      	beq.n	800c07c <std+0x48>
 800c076:	33d0      	adds	r3, #208	@ 0xd0
 800c078:	429c      	cmp	r4, r3
 800c07a:	d105      	bne.n	800c088 <std+0x54>
 800c07c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c084:	f000 b98c 	b.w	800c3a0 <__retarget_lock_init_recursive>
 800c088:	bd10      	pop	{r4, pc}
 800c08a:	bf00      	nop
 800c08c:	0800c221 	.word	0x0800c221
 800c090:	0800c243 	.word	0x0800c243
 800c094:	0800c27b 	.word	0x0800c27b
 800c098:	0800c29f 	.word	0x0800c29f
 800c09c:	2000201c 	.word	0x2000201c

0800c0a0 <stdio_exit_handler>:
 800c0a0:	4a02      	ldr	r2, [pc, #8]	@ (800c0ac <stdio_exit_handler+0xc>)
 800c0a2:	4903      	ldr	r1, [pc, #12]	@ (800c0b0 <stdio_exit_handler+0x10>)
 800c0a4:	4803      	ldr	r0, [pc, #12]	@ (800c0b4 <stdio_exit_handler+0x14>)
 800c0a6:	f000 b869 	b.w	800c17c <_fwalk_sglue>
 800c0aa:	bf00      	nop
 800c0ac:	2000010c 	.word	0x2000010c
 800c0b0:	0800dcfd 	.word	0x0800dcfd
 800c0b4:	2000011c 	.word	0x2000011c

0800c0b8 <cleanup_stdio>:
 800c0b8:	6841      	ldr	r1, [r0, #4]
 800c0ba:	4b0c      	ldr	r3, [pc, #48]	@ (800c0ec <cleanup_stdio+0x34>)
 800c0bc:	4299      	cmp	r1, r3
 800c0be:	b510      	push	{r4, lr}
 800c0c0:	4604      	mov	r4, r0
 800c0c2:	d001      	beq.n	800c0c8 <cleanup_stdio+0x10>
 800c0c4:	f001 fe1a 	bl	800dcfc <_fflush_r>
 800c0c8:	68a1      	ldr	r1, [r4, #8]
 800c0ca:	4b09      	ldr	r3, [pc, #36]	@ (800c0f0 <cleanup_stdio+0x38>)
 800c0cc:	4299      	cmp	r1, r3
 800c0ce:	d002      	beq.n	800c0d6 <cleanup_stdio+0x1e>
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	f001 fe13 	bl	800dcfc <_fflush_r>
 800c0d6:	68e1      	ldr	r1, [r4, #12]
 800c0d8:	4b06      	ldr	r3, [pc, #24]	@ (800c0f4 <cleanup_stdio+0x3c>)
 800c0da:	4299      	cmp	r1, r3
 800c0dc:	d004      	beq.n	800c0e8 <cleanup_stdio+0x30>
 800c0de:	4620      	mov	r0, r4
 800c0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0e4:	f001 be0a 	b.w	800dcfc <_fflush_r>
 800c0e8:	bd10      	pop	{r4, pc}
 800c0ea:	bf00      	nop
 800c0ec:	2000201c 	.word	0x2000201c
 800c0f0:	20002084 	.word	0x20002084
 800c0f4:	200020ec 	.word	0x200020ec

0800c0f8 <global_stdio_init.part.0>:
 800c0f8:	b510      	push	{r4, lr}
 800c0fa:	4b0b      	ldr	r3, [pc, #44]	@ (800c128 <global_stdio_init.part.0+0x30>)
 800c0fc:	4c0b      	ldr	r4, [pc, #44]	@ (800c12c <global_stdio_init.part.0+0x34>)
 800c0fe:	4a0c      	ldr	r2, [pc, #48]	@ (800c130 <global_stdio_init.part.0+0x38>)
 800c100:	601a      	str	r2, [r3, #0]
 800c102:	4620      	mov	r0, r4
 800c104:	2200      	movs	r2, #0
 800c106:	2104      	movs	r1, #4
 800c108:	f7ff ff94 	bl	800c034 <std>
 800c10c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c110:	2201      	movs	r2, #1
 800c112:	2109      	movs	r1, #9
 800c114:	f7ff ff8e 	bl	800c034 <std>
 800c118:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c11c:	2202      	movs	r2, #2
 800c11e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c122:	2112      	movs	r1, #18
 800c124:	f7ff bf86 	b.w	800c034 <std>
 800c128:	20002154 	.word	0x20002154
 800c12c:	2000201c 	.word	0x2000201c
 800c130:	0800c0a1 	.word	0x0800c0a1

0800c134 <__sfp_lock_acquire>:
 800c134:	4801      	ldr	r0, [pc, #4]	@ (800c13c <__sfp_lock_acquire+0x8>)
 800c136:	f000 b934 	b.w	800c3a2 <__retarget_lock_acquire_recursive>
 800c13a:	bf00      	nop
 800c13c:	2000215d 	.word	0x2000215d

0800c140 <__sfp_lock_release>:
 800c140:	4801      	ldr	r0, [pc, #4]	@ (800c148 <__sfp_lock_release+0x8>)
 800c142:	f000 b92f 	b.w	800c3a4 <__retarget_lock_release_recursive>
 800c146:	bf00      	nop
 800c148:	2000215d 	.word	0x2000215d

0800c14c <__sinit>:
 800c14c:	b510      	push	{r4, lr}
 800c14e:	4604      	mov	r4, r0
 800c150:	f7ff fff0 	bl	800c134 <__sfp_lock_acquire>
 800c154:	6a23      	ldr	r3, [r4, #32]
 800c156:	b11b      	cbz	r3, 800c160 <__sinit+0x14>
 800c158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c15c:	f7ff bff0 	b.w	800c140 <__sfp_lock_release>
 800c160:	4b04      	ldr	r3, [pc, #16]	@ (800c174 <__sinit+0x28>)
 800c162:	6223      	str	r3, [r4, #32]
 800c164:	4b04      	ldr	r3, [pc, #16]	@ (800c178 <__sinit+0x2c>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1f5      	bne.n	800c158 <__sinit+0xc>
 800c16c:	f7ff ffc4 	bl	800c0f8 <global_stdio_init.part.0>
 800c170:	e7f2      	b.n	800c158 <__sinit+0xc>
 800c172:	bf00      	nop
 800c174:	0800c0b9 	.word	0x0800c0b9
 800c178:	20002154 	.word	0x20002154

0800c17c <_fwalk_sglue>:
 800c17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c180:	4607      	mov	r7, r0
 800c182:	4688      	mov	r8, r1
 800c184:	4614      	mov	r4, r2
 800c186:	2600      	movs	r6, #0
 800c188:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c18c:	f1b9 0901 	subs.w	r9, r9, #1
 800c190:	d505      	bpl.n	800c19e <_fwalk_sglue+0x22>
 800c192:	6824      	ldr	r4, [r4, #0]
 800c194:	2c00      	cmp	r4, #0
 800c196:	d1f7      	bne.n	800c188 <_fwalk_sglue+0xc>
 800c198:	4630      	mov	r0, r6
 800c19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c19e:	89ab      	ldrh	r3, [r5, #12]
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d907      	bls.n	800c1b4 <_fwalk_sglue+0x38>
 800c1a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	d003      	beq.n	800c1b4 <_fwalk_sglue+0x38>
 800c1ac:	4629      	mov	r1, r5
 800c1ae:	4638      	mov	r0, r7
 800c1b0:	47c0      	blx	r8
 800c1b2:	4306      	orrs	r6, r0
 800c1b4:	3568      	adds	r5, #104	@ 0x68
 800c1b6:	e7e9      	b.n	800c18c <_fwalk_sglue+0x10>

0800c1b8 <sniprintf>:
 800c1b8:	b40c      	push	{r2, r3}
 800c1ba:	b530      	push	{r4, r5, lr}
 800c1bc:	4b17      	ldr	r3, [pc, #92]	@ (800c21c <sniprintf+0x64>)
 800c1be:	1e0c      	subs	r4, r1, #0
 800c1c0:	681d      	ldr	r5, [r3, #0]
 800c1c2:	b09d      	sub	sp, #116	@ 0x74
 800c1c4:	da08      	bge.n	800c1d8 <sniprintf+0x20>
 800c1c6:	238b      	movs	r3, #139	@ 0x8b
 800c1c8:	602b      	str	r3, [r5, #0]
 800c1ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ce:	b01d      	add	sp, #116	@ 0x74
 800c1d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1d4:	b002      	add	sp, #8
 800c1d6:	4770      	bx	lr
 800c1d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c1dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c1e0:	bf14      	ite	ne
 800c1e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c1e6:	4623      	moveq	r3, r4
 800c1e8:	9304      	str	r3, [sp, #16]
 800c1ea:	9307      	str	r3, [sp, #28]
 800c1ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c1f0:	9002      	str	r0, [sp, #8]
 800c1f2:	9006      	str	r0, [sp, #24]
 800c1f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c1f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c1fa:	ab21      	add	r3, sp, #132	@ 0x84
 800c1fc:	a902      	add	r1, sp, #8
 800c1fe:	4628      	mov	r0, r5
 800c200:	9301      	str	r3, [sp, #4]
 800c202:	f001 fbfb 	bl	800d9fc <_svfiprintf_r>
 800c206:	1c43      	adds	r3, r0, #1
 800c208:	bfbc      	itt	lt
 800c20a:	238b      	movlt	r3, #139	@ 0x8b
 800c20c:	602b      	strlt	r3, [r5, #0]
 800c20e:	2c00      	cmp	r4, #0
 800c210:	d0dd      	beq.n	800c1ce <sniprintf+0x16>
 800c212:	9b02      	ldr	r3, [sp, #8]
 800c214:	2200      	movs	r2, #0
 800c216:	701a      	strb	r2, [r3, #0]
 800c218:	e7d9      	b.n	800c1ce <sniprintf+0x16>
 800c21a:	bf00      	nop
 800c21c:	20000118 	.word	0x20000118

0800c220 <__sread>:
 800c220:	b510      	push	{r4, lr}
 800c222:	460c      	mov	r4, r1
 800c224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c228:	f000 f86c 	bl	800c304 <_read_r>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	bfab      	itete	ge
 800c230:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c232:	89a3      	ldrhlt	r3, [r4, #12]
 800c234:	181b      	addge	r3, r3, r0
 800c236:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c23a:	bfac      	ite	ge
 800c23c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c23e:	81a3      	strhlt	r3, [r4, #12]
 800c240:	bd10      	pop	{r4, pc}

0800c242 <__swrite>:
 800c242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c246:	461f      	mov	r7, r3
 800c248:	898b      	ldrh	r3, [r1, #12]
 800c24a:	05db      	lsls	r3, r3, #23
 800c24c:	4605      	mov	r5, r0
 800c24e:	460c      	mov	r4, r1
 800c250:	4616      	mov	r6, r2
 800c252:	d505      	bpl.n	800c260 <__swrite+0x1e>
 800c254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c258:	2302      	movs	r3, #2
 800c25a:	2200      	movs	r2, #0
 800c25c:	f000 f840 	bl	800c2e0 <_lseek_r>
 800c260:	89a3      	ldrh	r3, [r4, #12]
 800c262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c266:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c26a:	81a3      	strh	r3, [r4, #12]
 800c26c:	4632      	mov	r2, r6
 800c26e:	463b      	mov	r3, r7
 800c270:	4628      	mov	r0, r5
 800c272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c276:	f000 b857 	b.w	800c328 <_write_r>

0800c27a <__sseek>:
 800c27a:	b510      	push	{r4, lr}
 800c27c:	460c      	mov	r4, r1
 800c27e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c282:	f000 f82d 	bl	800c2e0 <_lseek_r>
 800c286:	1c43      	adds	r3, r0, #1
 800c288:	89a3      	ldrh	r3, [r4, #12]
 800c28a:	bf15      	itete	ne
 800c28c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c28e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c292:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c296:	81a3      	strheq	r3, [r4, #12]
 800c298:	bf18      	it	ne
 800c29a:	81a3      	strhne	r3, [r4, #12]
 800c29c:	bd10      	pop	{r4, pc}

0800c29e <__sclose>:
 800c29e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2a2:	f000 b80d 	b.w	800c2c0 <_close_r>

0800c2a6 <memset>:
 800c2a6:	4402      	add	r2, r0
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d100      	bne.n	800c2b0 <memset+0xa>
 800c2ae:	4770      	bx	lr
 800c2b0:	f803 1b01 	strb.w	r1, [r3], #1
 800c2b4:	e7f9      	b.n	800c2aa <memset+0x4>
	...

0800c2b8 <_localeconv_r>:
 800c2b8:	4800      	ldr	r0, [pc, #0]	@ (800c2bc <_localeconv_r+0x4>)
 800c2ba:	4770      	bx	lr
 800c2bc:	20000258 	.word	0x20000258

0800c2c0 <_close_r>:
 800c2c0:	b538      	push	{r3, r4, r5, lr}
 800c2c2:	4d06      	ldr	r5, [pc, #24]	@ (800c2dc <_close_r+0x1c>)
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	4608      	mov	r0, r1
 800c2ca:	602b      	str	r3, [r5, #0]
 800c2cc:	f7f5 fe04 	bl	8001ed8 <_close>
 800c2d0:	1c43      	adds	r3, r0, #1
 800c2d2:	d102      	bne.n	800c2da <_close_r+0x1a>
 800c2d4:	682b      	ldr	r3, [r5, #0]
 800c2d6:	b103      	cbz	r3, 800c2da <_close_r+0x1a>
 800c2d8:	6023      	str	r3, [r4, #0]
 800c2da:	bd38      	pop	{r3, r4, r5, pc}
 800c2dc:	20002158 	.word	0x20002158

0800c2e0 <_lseek_r>:
 800c2e0:	b538      	push	{r3, r4, r5, lr}
 800c2e2:	4d07      	ldr	r5, [pc, #28]	@ (800c300 <_lseek_r+0x20>)
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	4608      	mov	r0, r1
 800c2e8:	4611      	mov	r1, r2
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	602a      	str	r2, [r5, #0]
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	f7f5 fe19 	bl	8001f26 <_lseek>
 800c2f4:	1c43      	adds	r3, r0, #1
 800c2f6:	d102      	bne.n	800c2fe <_lseek_r+0x1e>
 800c2f8:	682b      	ldr	r3, [r5, #0]
 800c2fa:	b103      	cbz	r3, 800c2fe <_lseek_r+0x1e>
 800c2fc:	6023      	str	r3, [r4, #0]
 800c2fe:	bd38      	pop	{r3, r4, r5, pc}
 800c300:	20002158 	.word	0x20002158

0800c304 <_read_r>:
 800c304:	b538      	push	{r3, r4, r5, lr}
 800c306:	4d07      	ldr	r5, [pc, #28]	@ (800c324 <_read_r+0x20>)
 800c308:	4604      	mov	r4, r0
 800c30a:	4608      	mov	r0, r1
 800c30c:	4611      	mov	r1, r2
 800c30e:	2200      	movs	r2, #0
 800c310:	602a      	str	r2, [r5, #0]
 800c312:	461a      	mov	r2, r3
 800c314:	f7f5 fda7 	bl	8001e66 <_read>
 800c318:	1c43      	adds	r3, r0, #1
 800c31a:	d102      	bne.n	800c322 <_read_r+0x1e>
 800c31c:	682b      	ldr	r3, [r5, #0]
 800c31e:	b103      	cbz	r3, 800c322 <_read_r+0x1e>
 800c320:	6023      	str	r3, [r4, #0]
 800c322:	bd38      	pop	{r3, r4, r5, pc}
 800c324:	20002158 	.word	0x20002158

0800c328 <_write_r>:
 800c328:	b538      	push	{r3, r4, r5, lr}
 800c32a:	4d07      	ldr	r5, [pc, #28]	@ (800c348 <_write_r+0x20>)
 800c32c:	4604      	mov	r4, r0
 800c32e:	4608      	mov	r0, r1
 800c330:	4611      	mov	r1, r2
 800c332:	2200      	movs	r2, #0
 800c334:	602a      	str	r2, [r5, #0]
 800c336:	461a      	mov	r2, r3
 800c338:	f7f5 fdb2 	bl	8001ea0 <_write>
 800c33c:	1c43      	adds	r3, r0, #1
 800c33e:	d102      	bne.n	800c346 <_write_r+0x1e>
 800c340:	682b      	ldr	r3, [r5, #0]
 800c342:	b103      	cbz	r3, 800c346 <_write_r+0x1e>
 800c344:	6023      	str	r3, [r4, #0]
 800c346:	bd38      	pop	{r3, r4, r5, pc}
 800c348:	20002158 	.word	0x20002158

0800c34c <__errno>:
 800c34c:	4b01      	ldr	r3, [pc, #4]	@ (800c354 <__errno+0x8>)
 800c34e:	6818      	ldr	r0, [r3, #0]
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop
 800c354:	20000118 	.word	0x20000118

0800c358 <__libc_init_array>:
 800c358:	b570      	push	{r4, r5, r6, lr}
 800c35a:	4d0d      	ldr	r5, [pc, #52]	@ (800c390 <__libc_init_array+0x38>)
 800c35c:	4c0d      	ldr	r4, [pc, #52]	@ (800c394 <__libc_init_array+0x3c>)
 800c35e:	1b64      	subs	r4, r4, r5
 800c360:	10a4      	asrs	r4, r4, #2
 800c362:	2600      	movs	r6, #0
 800c364:	42a6      	cmp	r6, r4
 800c366:	d109      	bne.n	800c37c <__libc_init_array+0x24>
 800c368:	4d0b      	ldr	r5, [pc, #44]	@ (800c398 <__libc_init_array+0x40>)
 800c36a:	4c0c      	ldr	r4, [pc, #48]	@ (800c39c <__libc_init_array+0x44>)
 800c36c:	f002 fad0 	bl	800e910 <_init>
 800c370:	1b64      	subs	r4, r4, r5
 800c372:	10a4      	asrs	r4, r4, #2
 800c374:	2600      	movs	r6, #0
 800c376:	42a6      	cmp	r6, r4
 800c378:	d105      	bne.n	800c386 <__libc_init_array+0x2e>
 800c37a:	bd70      	pop	{r4, r5, r6, pc}
 800c37c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c380:	4798      	blx	r3
 800c382:	3601      	adds	r6, #1
 800c384:	e7ee      	b.n	800c364 <__libc_init_array+0xc>
 800c386:	f855 3b04 	ldr.w	r3, [r5], #4
 800c38a:	4798      	blx	r3
 800c38c:	3601      	adds	r6, #1
 800c38e:	e7f2      	b.n	800c376 <__libc_init_array+0x1e>
 800c390:	0800edd0 	.word	0x0800edd0
 800c394:	0800edd0 	.word	0x0800edd0
 800c398:	0800edd0 	.word	0x0800edd0
 800c39c:	0800edd4 	.word	0x0800edd4

0800c3a0 <__retarget_lock_init_recursive>:
 800c3a0:	4770      	bx	lr

0800c3a2 <__retarget_lock_acquire_recursive>:
 800c3a2:	4770      	bx	lr

0800c3a4 <__retarget_lock_release_recursive>:
 800c3a4:	4770      	bx	lr

0800c3a6 <quorem>:
 800c3a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3aa:	6903      	ldr	r3, [r0, #16]
 800c3ac:	690c      	ldr	r4, [r1, #16]
 800c3ae:	42a3      	cmp	r3, r4
 800c3b0:	4607      	mov	r7, r0
 800c3b2:	db7e      	blt.n	800c4b2 <quorem+0x10c>
 800c3b4:	3c01      	subs	r4, #1
 800c3b6:	f101 0814 	add.w	r8, r1, #20
 800c3ba:	00a3      	lsls	r3, r4, #2
 800c3bc:	f100 0514 	add.w	r5, r0, #20
 800c3c0:	9300      	str	r3, [sp, #0]
 800c3c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3c6:	9301      	str	r3, [sp, #4]
 800c3c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c3cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c3d8:	fbb2 f6f3 	udiv	r6, r2, r3
 800c3dc:	d32e      	bcc.n	800c43c <quorem+0x96>
 800c3de:	f04f 0a00 	mov.w	sl, #0
 800c3e2:	46c4      	mov	ip, r8
 800c3e4:	46ae      	mov	lr, r5
 800c3e6:	46d3      	mov	fp, sl
 800c3e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c3ec:	b298      	uxth	r0, r3
 800c3ee:	fb06 a000 	mla	r0, r6, r0, sl
 800c3f2:	0c02      	lsrs	r2, r0, #16
 800c3f4:	0c1b      	lsrs	r3, r3, #16
 800c3f6:	fb06 2303 	mla	r3, r6, r3, r2
 800c3fa:	f8de 2000 	ldr.w	r2, [lr]
 800c3fe:	b280      	uxth	r0, r0
 800c400:	b292      	uxth	r2, r2
 800c402:	1a12      	subs	r2, r2, r0
 800c404:	445a      	add	r2, fp
 800c406:	f8de 0000 	ldr.w	r0, [lr]
 800c40a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c40e:	b29b      	uxth	r3, r3
 800c410:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c414:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c418:	b292      	uxth	r2, r2
 800c41a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c41e:	45e1      	cmp	r9, ip
 800c420:	f84e 2b04 	str.w	r2, [lr], #4
 800c424:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c428:	d2de      	bcs.n	800c3e8 <quorem+0x42>
 800c42a:	9b00      	ldr	r3, [sp, #0]
 800c42c:	58eb      	ldr	r3, [r5, r3]
 800c42e:	b92b      	cbnz	r3, 800c43c <quorem+0x96>
 800c430:	9b01      	ldr	r3, [sp, #4]
 800c432:	3b04      	subs	r3, #4
 800c434:	429d      	cmp	r5, r3
 800c436:	461a      	mov	r2, r3
 800c438:	d32f      	bcc.n	800c49a <quorem+0xf4>
 800c43a:	613c      	str	r4, [r7, #16]
 800c43c:	4638      	mov	r0, r7
 800c43e:	f001 f979 	bl	800d734 <__mcmp>
 800c442:	2800      	cmp	r0, #0
 800c444:	db25      	blt.n	800c492 <quorem+0xec>
 800c446:	4629      	mov	r1, r5
 800c448:	2000      	movs	r0, #0
 800c44a:	f858 2b04 	ldr.w	r2, [r8], #4
 800c44e:	f8d1 c000 	ldr.w	ip, [r1]
 800c452:	fa1f fe82 	uxth.w	lr, r2
 800c456:	fa1f f38c 	uxth.w	r3, ip
 800c45a:	eba3 030e 	sub.w	r3, r3, lr
 800c45e:	4403      	add	r3, r0
 800c460:	0c12      	lsrs	r2, r2, #16
 800c462:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c466:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c470:	45c1      	cmp	r9, r8
 800c472:	f841 3b04 	str.w	r3, [r1], #4
 800c476:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c47a:	d2e6      	bcs.n	800c44a <quorem+0xa4>
 800c47c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c480:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c484:	b922      	cbnz	r2, 800c490 <quorem+0xea>
 800c486:	3b04      	subs	r3, #4
 800c488:	429d      	cmp	r5, r3
 800c48a:	461a      	mov	r2, r3
 800c48c:	d30b      	bcc.n	800c4a6 <quorem+0x100>
 800c48e:	613c      	str	r4, [r7, #16]
 800c490:	3601      	adds	r6, #1
 800c492:	4630      	mov	r0, r6
 800c494:	b003      	add	sp, #12
 800c496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c49a:	6812      	ldr	r2, [r2, #0]
 800c49c:	3b04      	subs	r3, #4
 800c49e:	2a00      	cmp	r2, #0
 800c4a0:	d1cb      	bne.n	800c43a <quorem+0x94>
 800c4a2:	3c01      	subs	r4, #1
 800c4a4:	e7c6      	b.n	800c434 <quorem+0x8e>
 800c4a6:	6812      	ldr	r2, [r2, #0]
 800c4a8:	3b04      	subs	r3, #4
 800c4aa:	2a00      	cmp	r2, #0
 800c4ac:	d1ef      	bne.n	800c48e <quorem+0xe8>
 800c4ae:	3c01      	subs	r4, #1
 800c4b0:	e7ea      	b.n	800c488 <quorem+0xe2>
 800c4b2:	2000      	movs	r0, #0
 800c4b4:	e7ee      	b.n	800c494 <quorem+0xee>
	...

0800c4b8 <_dtoa_r>:
 800c4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4bc:	69c7      	ldr	r7, [r0, #28]
 800c4be:	b099      	sub	sp, #100	@ 0x64
 800c4c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c4c4:	ec55 4b10 	vmov	r4, r5, d0
 800c4c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c4ca:	9109      	str	r1, [sp, #36]	@ 0x24
 800c4cc:	4683      	mov	fp, r0
 800c4ce:	920e      	str	r2, [sp, #56]	@ 0x38
 800c4d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c4d2:	b97f      	cbnz	r7, 800c4f4 <_dtoa_r+0x3c>
 800c4d4:	2010      	movs	r0, #16
 800c4d6:	f000 fdfd 	bl	800d0d4 <malloc>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	f8cb 001c 	str.w	r0, [fp, #28]
 800c4e0:	b920      	cbnz	r0, 800c4ec <_dtoa_r+0x34>
 800c4e2:	4ba7      	ldr	r3, [pc, #668]	@ (800c780 <_dtoa_r+0x2c8>)
 800c4e4:	21ef      	movs	r1, #239	@ 0xef
 800c4e6:	48a7      	ldr	r0, [pc, #668]	@ (800c784 <_dtoa_r+0x2cc>)
 800c4e8:	f001 fc68 	bl	800ddbc <__assert_func>
 800c4ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c4f0:	6007      	str	r7, [r0, #0]
 800c4f2:	60c7      	str	r7, [r0, #12]
 800c4f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c4f8:	6819      	ldr	r1, [r3, #0]
 800c4fa:	b159      	cbz	r1, 800c514 <_dtoa_r+0x5c>
 800c4fc:	685a      	ldr	r2, [r3, #4]
 800c4fe:	604a      	str	r2, [r1, #4]
 800c500:	2301      	movs	r3, #1
 800c502:	4093      	lsls	r3, r2
 800c504:	608b      	str	r3, [r1, #8]
 800c506:	4658      	mov	r0, fp
 800c508:	f000 feda 	bl	800d2c0 <_Bfree>
 800c50c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c510:	2200      	movs	r2, #0
 800c512:	601a      	str	r2, [r3, #0]
 800c514:	1e2b      	subs	r3, r5, #0
 800c516:	bfb9      	ittee	lt
 800c518:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c51c:	9303      	strlt	r3, [sp, #12]
 800c51e:	2300      	movge	r3, #0
 800c520:	6033      	strge	r3, [r6, #0]
 800c522:	9f03      	ldr	r7, [sp, #12]
 800c524:	4b98      	ldr	r3, [pc, #608]	@ (800c788 <_dtoa_r+0x2d0>)
 800c526:	bfbc      	itt	lt
 800c528:	2201      	movlt	r2, #1
 800c52a:	6032      	strlt	r2, [r6, #0]
 800c52c:	43bb      	bics	r3, r7
 800c52e:	d112      	bne.n	800c556 <_dtoa_r+0x9e>
 800c530:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c532:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c536:	6013      	str	r3, [r2, #0]
 800c538:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c53c:	4323      	orrs	r3, r4
 800c53e:	f000 854d 	beq.w	800cfdc <_dtoa_r+0xb24>
 800c542:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c544:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c79c <_dtoa_r+0x2e4>
 800c548:	2b00      	cmp	r3, #0
 800c54a:	f000 854f 	beq.w	800cfec <_dtoa_r+0xb34>
 800c54e:	f10a 0303 	add.w	r3, sl, #3
 800c552:	f000 bd49 	b.w	800cfe8 <_dtoa_r+0xb30>
 800c556:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c55a:	2200      	movs	r2, #0
 800c55c:	ec51 0b17 	vmov	r0, r1, d7
 800c560:	2300      	movs	r3, #0
 800c562:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c566:	f7f4 fab7 	bl	8000ad8 <__aeabi_dcmpeq>
 800c56a:	4680      	mov	r8, r0
 800c56c:	b158      	cbz	r0, 800c586 <_dtoa_r+0xce>
 800c56e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c570:	2301      	movs	r3, #1
 800c572:	6013      	str	r3, [r2, #0]
 800c574:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c576:	b113      	cbz	r3, 800c57e <_dtoa_r+0xc6>
 800c578:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c57a:	4b84      	ldr	r3, [pc, #528]	@ (800c78c <_dtoa_r+0x2d4>)
 800c57c:	6013      	str	r3, [r2, #0]
 800c57e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c7a0 <_dtoa_r+0x2e8>
 800c582:	f000 bd33 	b.w	800cfec <_dtoa_r+0xb34>
 800c586:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c58a:	aa16      	add	r2, sp, #88	@ 0x58
 800c58c:	a917      	add	r1, sp, #92	@ 0x5c
 800c58e:	4658      	mov	r0, fp
 800c590:	f001 f980 	bl	800d894 <__d2b>
 800c594:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c598:	4681      	mov	r9, r0
 800c59a:	2e00      	cmp	r6, #0
 800c59c:	d077      	beq.n	800c68e <_dtoa_r+0x1d6>
 800c59e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c5a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c5a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c5ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c5b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c5b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	4b74      	ldr	r3, [pc, #464]	@ (800c790 <_dtoa_r+0x2d8>)
 800c5be:	f7f3 fe6b 	bl	8000298 <__aeabi_dsub>
 800c5c2:	a369      	add	r3, pc, #420	@ (adr r3, 800c768 <_dtoa_r+0x2b0>)
 800c5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c8:	f7f4 f81e 	bl	8000608 <__aeabi_dmul>
 800c5cc:	a368      	add	r3, pc, #416	@ (adr r3, 800c770 <_dtoa_r+0x2b8>)
 800c5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d2:	f7f3 fe63 	bl	800029c <__adddf3>
 800c5d6:	4604      	mov	r4, r0
 800c5d8:	4630      	mov	r0, r6
 800c5da:	460d      	mov	r5, r1
 800c5dc:	f7f3 ffaa 	bl	8000534 <__aeabi_i2d>
 800c5e0:	a365      	add	r3, pc, #404	@ (adr r3, 800c778 <_dtoa_r+0x2c0>)
 800c5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e6:	f7f4 f80f 	bl	8000608 <__aeabi_dmul>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	f7f3 fe53 	bl	800029c <__adddf3>
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	460d      	mov	r5, r1
 800c5fa:	f7f4 fab5 	bl	8000b68 <__aeabi_d2iz>
 800c5fe:	2200      	movs	r2, #0
 800c600:	4607      	mov	r7, r0
 800c602:	2300      	movs	r3, #0
 800c604:	4620      	mov	r0, r4
 800c606:	4629      	mov	r1, r5
 800c608:	f7f4 fa70 	bl	8000aec <__aeabi_dcmplt>
 800c60c:	b140      	cbz	r0, 800c620 <_dtoa_r+0x168>
 800c60e:	4638      	mov	r0, r7
 800c610:	f7f3 ff90 	bl	8000534 <__aeabi_i2d>
 800c614:	4622      	mov	r2, r4
 800c616:	462b      	mov	r3, r5
 800c618:	f7f4 fa5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800c61c:	b900      	cbnz	r0, 800c620 <_dtoa_r+0x168>
 800c61e:	3f01      	subs	r7, #1
 800c620:	2f16      	cmp	r7, #22
 800c622:	d851      	bhi.n	800c6c8 <_dtoa_r+0x210>
 800c624:	4b5b      	ldr	r3, [pc, #364]	@ (800c794 <_dtoa_r+0x2dc>)
 800c626:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c632:	f7f4 fa5b 	bl	8000aec <__aeabi_dcmplt>
 800c636:	2800      	cmp	r0, #0
 800c638:	d048      	beq.n	800c6cc <_dtoa_r+0x214>
 800c63a:	3f01      	subs	r7, #1
 800c63c:	2300      	movs	r3, #0
 800c63e:	9312      	str	r3, [sp, #72]	@ 0x48
 800c640:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c642:	1b9b      	subs	r3, r3, r6
 800c644:	1e5a      	subs	r2, r3, #1
 800c646:	bf44      	itt	mi
 800c648:	f1c3 0801 	rsbmi	r8, r3, #1
 800c64c:	2300      	movmi	r3, #0
 800c64e:	9208      	str	r2, [sp, #32]
 800c650:	bf54      	ite	pl
 800c652:	f04f 0800 	movpl.w	r8, #0
 800c656:	9308      	strmi	r3, [sp, #32]
 800c658:	2f00      	cmp	r7, #0
 800c65a:	db39      	blt.n	800c6d0 <_dtoa_r+0x218>
 800c65c:	9b08      	ldr	r3, [sp, #32]
 800c65e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c660:	443b      	add	r3, r7
 800c662:	9308      	str	r3, [sp, #32]
 800c664:	2300      	movs	r3, #0
 800c666:	930a      	str	r3, [sp, #40]	@ 0x28
 800c668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c66a:	2b09      	cmp	r3, #9
 800c66c:	d864      	bhi.n	800c738 <_dtoa_r+0x280>
 800c66e:	2b05      	cmp	r3, #5
 800c670:	bfc4      	itt	gt
 800c672:	3b04      	subgt	r3, #4
 800c674:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c678:	f1a3 0302 	sub.w	r3, r3, #2
 800c67c:	bfcc      	ite	gt
 800c67e:	2400      	movgt	r4, #0
 800c680:	2401      	movle	r4, #1
 800c682:	2b03      	cmp	r3, #3
 800c684:	d863      	bhi.n	800c74e <_dtoa_r+0x296>
 800c686:	e8df f003 	tbb	[pc, r3]
 800c68a:	372a      	.short	0x372a
 800c68c:	5535      	.short	0x5535
 800c68e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c692:	441e      	add	r6, r3
 800c694:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c698:	2b20      	cmp	r3, #32
 800c69a:	bfc1      	itttt	gt
 800c69c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c6a0:	409f      	lslgt	r7, r3
 800c6a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c6a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c6aa:	bfd6      	itet	le
 800c6ac:	f1c3 0320 	rsble	r3, r3, #32
 800c6b0:	ea47 0003 	orrgt.w	r0, r7, r3
 800c6b4:	fa04 f003 	lslle.w	r0, r4, r3
 800c6b8:	f7f3 ff2c 	bl	8000514 <__aeabi_ui2d>
 800c6bc:	2201      	movs	r2, #1
 800c6be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c6c2:	3e01      	subs	r6, #1
 800c6c4:	9214      	str	r2, [sp, #80]	@ 0x50
 800c6c6:	e777      	b.n	800c5b8 <_dtoa_r+0x100>
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	e7b8      	b.n	800c63e <_dtoa_r+0x186>
 800c6cc:	9012      	str	r0, [sp, #72]	@ 0x48
 800c6ce:	e7b7      	b.n	800c640 <_dtoa_r+0x188>
 800c6d0:	427b      	negs	r3, r7
 800c6d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	eba8 0807 	sub.w	r8, r8, r7
 800c6da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c6dc:	e7c4      	b.n	800c668 <_dtoa_r+0x1b0>
 800c6de:	2300      	movs	r3, #0
 800c6e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	dc35      	bgt.n	800c754 <_dtoa_r+0x29c>
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	9307      	str	r3, [sp, #28]
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c6f2:	e00b      	b.n	800c70c <_dtoa_r+0x254>
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e7f3      	b.n	800c6e0 <_dtoa_r+0x228>
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6fe:	18fb      	adds	r3, r7, r3
 800c700:	9300      	str	r3, [sp, #0]
 800c702:	3301      	adds	r3, #1
 800c704:	2b01      	cmp	r3, #1
 800c706:	9307      	str	r3, [sp, #28]
 800c708:	bfb8      	it	lt
 800c70a:	2301      	movlt	r3, #1
 800c70c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c710:	2100      	movs	r1, #0
 800c712:	2204      	movs	r2, #4
 800c714:	f102 0514 	add.w	r5, r2, #20
 800c718:	429d      	cmp	r5, r3
 800c71a:	d91f      	bls.n	800c75c <_dtoa_r+0x2a4>
 800c71c:	6041      	str	r1, [r0, #4]
 800c71e:	4658      	mov	r0, fp
 800c720:	f000 fd8e 	bl	800d240 <_Balloc>
 800c724:	4682      	mov	sl, r0
 800c726:	2800      	cmp	r0, #0
 800c728:	d13c      	bne.n	800c7a4 <_dtoa_r+0x2ec>
 800c72a:	4b1b      	ldr	r3, [pc, #108]	@ (800c798 <_dtoa_r+0x2e0>)
 800c72c:	4602      	mov	r2, r0
 800c72e:	f240 11af 	movw	r1, #431	@ 0x1af
 800c732:	e6d8      	b.n	800c4e6 <_dtoa_r+0x2e>
 800c734:	2301      	movs	r3, #1
 800c736:	e7e0      	b.n	800c6fa <_dtoa_r+0x242>
 800c738:	2401      	movs	r4, #1
 800c73a:	2300      	movs	r3, #0
 800c73c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c73e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c740:	f04f 33ff 	mov.w	r3, #4294967295
 800c744:	9300      	str	r3, [sp, #0]
 800c746:	9307      	str	r3, [sp, #28]
 800c748:	2200      	movs	r2, #0
 800c74a:	2312      	movs	r3, #18
 800c74c:	e7d0      	b.n	800c6f0 <_dtoa_r+0x238>
 800c74e:	2301      	movs	r3, #1
 800c750:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c752:	e7f5      	b.n	800c740 <_dtoa_r+0x288>
 800c754:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c756:	9300      	str	r3, [sp, #0]
 800c758:	9307      	str	r3, [sp, #28]
 800c75a:	e7d7      	b.n	800c70c <_dtoa_r+0x254>
 800c75c:	3101      	adds	r1, #1
 800c75e:	0052      	lsls	r2, r2, #1
 800c760:	e7d8      	b.n	800c714 <_dtoa_r+0x25c>
 800c762:	bf00      	nop
 800c764:	f3af 8000 	nop.w
 800c768:	636f4361 	.word	0x636f4361
 800c76c:	3fd287a7 	.word	0x3fd287a7
 800c770:	8b60c8b3 	.word	0x8b60c8b3
 800c774:	3fc68a28 	.word	0x3fc68a28
 800c778:	509f79fb 	.word	0x509f79fb
 800c77c:	3fd34413 	.word	0x3fd34413
 800c780:	0800ea25 	.word	0x0800ea25
 800c784:	0800ea3c 	.word	0x0800ea3c
 800c788:	7ff00000 	.word	0x7ff00000
 800c78c:	0800e9f5 	.word	0x0800e9f5
 800c790:	3ff80000 	.word	0x3ff80000
 800c794:	0800eb38 	.word	0x0800eb38
 800c798:	0800ea94 	.word	0x0800ea94
 800c79c:	0800ea21 	.word	0x0800ea21
 800c7a0:	0800e9f4 	.word	0x0800e9f4
 800c7a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c7a8:	6018      	str	r0, [r3, #0]
 800c7aa:	9b07      	ldr	r3, [sp, #28]
 800c7ac:	2b0e      	cmp	r3, #14
 800c7ae:	f200 80a4 	bhi.w	800c8fa <_dtoa_r+0x442>
 800c7b2:	2c00      	cmp	r4, #0
 800c7b4:	f000 80a1 	beq.w	800c8fa <_dtoa_r+0x442>
 800c7b8:	2f00      	cmp	r7, #0
 800c7ba:	dd33      	ble.n	800c824 <_dtoa_r+0x36c>
 800c7bc:	4bad      	ldr	r3, [pc, #692]	@ (800ca74 <_dtoa_r+0x5bc>)
 800c7be:	f007 020f 	and.w	r2, r7, #15
 800c7c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7c6:	ed93 7b00 	vldr	d7, [r3]
 800c7ca:	05f8      	lsls	r0, r7, #23
 800c7cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c7d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c7d4:	d516      	bpl.n	800c804 <_dtoa_r+0x34c>
 800c7d6:	4ba8      	ldr	r3, [pc, #672]	@ (800ca78 <_dtoa_r+0x5c0>)
 800c7d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c7dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c7e0:	f7f4 f83c 	bl	800085c <__aeabi_ddiv>
 800c7e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7e8:	f004 040f 	and.w	r4, r4, #15
 800c7ec:	2603      	movs	r6, #3
 800c7ee:	4da2      	ldr	r5, [pc, #648]	@ (800ca78 <_dtoa_r+0x5c0>)
 800c7f0:	b954      	cbnz	r4, 800c808 <_dtoa_r+0x350>
 800c7f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7fa:	f7f4 f82f 	bl	800085c <__aeabi_ddiv>
 800c7fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c802:	e028      	b.n	800c856 <_dtoa_r+0x39e>
 800c804:	2602      	movs	r6, #2
 800c806:	e7f2      	b.n	800c7ee <_dtoa_r+0x336>
 800c808:	07e1      	lsls	r1, r4, #31
 800c80a:	d508      	bpl.n	800c81e <_dtoa_r+0x366>
 800c80c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c810:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c814:	f7f3 fef8 	bl	8000608 <__aeabi_dmul>
 800c818:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c81c:	3601      	adds	r6, #1
 800c81e:	1064      	asrs	r4, r4, #1
 800c820:	3508      	adds	r5, #8
 800c822:	e7e5      	b.n	800c7f0 <_dtoa_r+0x338>
 800c824:	f000 80d2 	beq.w	800c9cc <_dtoa_r+0x514>
 800c828:	427c      	negs	r4, r7
 800c82a:	4b92      	ldr	r3, [pc, #584]	@ (800ca74 <_dtoa_r+0x5bc>)
 800c82c:	4d92      	ldr	r5, [pc, #584]	@ (800ca78 <_dtoa_r+0x5c0>)
 800c82e:	f004 020f 	and.w	r2, r4, #15
 800c832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c83e:	f7f3 fee3 	bl	8000608 <__aeabi_dmul>
 800c842:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c846:	1124      	asrs	r4, r4, #4
 800c848:	2300      	movs	r3, #0
 800c84a:	2602      	movs	r6, #2
 800c84c:	2c00      	cmp	r4, #0
 800c84e:	f040 80b2 	bne.w	800c9b6 <_dtoa_r+0x4fe>
 800c852:	2b00      	cmp	r3, #0
 800c854:	d1d3      	bne.n	800c7fe <_dtoa_r+0x346>
 800c856:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c858:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f000 80b7 	beq.w	800c9d0 <_dtoa_r+0x518>
 800c862:	4b86      	ldr	r3, [pc, #536]	@ (800ca7c <_dtoa_r+0x5c4>)
 800c864:	2200      	movs	r2, #0
 800c866:	4620      	mov	r0, r4
 800c868:	4629      	mov	r1, r5
 800c86a:	f7f4 f93f 	bl	8000aec <__aeabi_dcmplt>
 800c86e:	2800      	cmp	r0, #0
 800c870:	f000 80ae 	beq.w	800c9d0 <_dtoa_r+0x518>
 800c874:	9b07      	ldr	r3, [sp, #28]
 800c876:	2b00      	cmp	r3, #0
 800c878:	f000 80aa 	beq.w	800c9d0 <_dtoa_r+0x518>
 800c87c:	9b00      	ldr	r3, [sp, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	dd37      	ble.n	800c8f2 <_dtoa_r+0x43a>
 800c882:	1e7b      	subs	r3, r7, #1
 800c884:	9304      	str	r3, [sp, #16]
 800c886:	4620      	mov	r0, r4
 800c888:	4b7d      	ldr	r3, [pc, #500]	@ (800ca80 <_dtoa_r+0x5c8>)
 800c88a:	2200      	movs	r2, #0
 800c88c:	4629      	mov	r1, r5
 800c88e:	f7f3 febb 	bl	8000608 <__aeabi_dmul>
 800c892:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c896:	9c00      	ldr	r4, [sp, #0]
 800c898:	3601      	adds	r6, #1
 800c89a:	4630      	mov	r0, r6
 800c89c:	f7f3 fe4a 	bl	8000534 <__aeabi_i2d>
 800c8a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8a4:	f7f3 feb0 	bl	8000608 <__aeabi_dmul>
 800c8a8:	4b76      	ldr	r3, [pc, #472]	@ (800ca84 <_dtoa_r+0x5cc>)
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f7f3 fcf6 	bl	800029c <__adddf3>
 800c8b0:	4605      	mov	r5, r0
 800c8b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c8b6:	2c00      	cmp	r4, #0
 800c8b8:	f040 808d 	bne.w	800c9d6 <_dtoa_r+0x51e>
 800c8bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8c0:	4b71      	ldr	r3, [pc, #452]	@ (800ca88 <_dtoa_r+0x5d0>)
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f7f3 fce8 	bl	8000298 <__aeabi_dsub>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c8d0:	462a      	mov	r2, r5
 800c8d2:	4633      	mov	r3, r6
 800c8d4:	f7f4 f928 	bl	8000b28 <__aeabi_dcmpgt>
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	f040 828b 	bne.w	800cdf4 <_dtoa_r+0x93c>
 800c8de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8e2:	462a      	mov	r2, r5
 800c8e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c8e8:	f7f4 f900 	bl	8000aec <__aeabi_dcmplt>
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	f040 8128 	bne.w	800cb42 <_dtoa_r+0x68a>
 800c8f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c8f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c8fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	f2c0 815a 	blt.w	800cbb6 <_dtoa_r+0x6fe>
 800c902:	2f0e      	cmp	r7, #14
 800c904:	f300 8157 	bgt.w	800cbb6 <_dtoa_r+0x6fe>
 800c908:	4b5a      	ldr	r3, [pc, #360]	@ (800ca74 <_dtoa_r+0x5bc>)
 800c90a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c90e:	ed93 7b00 	vldr	d7, [r3]
 800c912:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c914:	2b00      	cmp	r3, #0
 800c916:	ed8d 7b00 	vstr	d7, [sp]
 800c91a:	da03      	bge.n	800c924 <_dtoa_r+0x46c>
 800c91c:	9b07      	ldr	r3, [sp, #28]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f340 8101 	ble.w	800cb26 <_dtoa_r+0x66e>
 800c924:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c928:	4656      	mov	r6, sl
 800c92a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c92e:	4620      	mov	r0, r4
 800c930:	4629      	mov	r1, r5
 800c932:	f7f3 ff93 	bl	800085c <__aeabi_ddiv>
 800c936:	f7f4 f917 	bl	8000b68 <__aeabi_d2iz>
 800c93a:	4680      	mov	r8, r0
 800c93c:	f7f3 fdfa 	bl	8000534 <__aeabi_i2d>
 800c940:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c944:	f7f3 fe60 	bl	8000608 <__aeabi_dmul>
 800c948:	4602      	mov	r2, r0
 800c94a:	460b      	mov	r3, r1
 800c94c:	4620      	mov	r0, r4
 800c94e:	4629      	mov	r1, r5
 800c950:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c954:	f7f3 fca0 	bl	8000298 <__aeabi_dsub>
 800c958:	f806 4b01 	strb.w	r4, [r6], #1
 800c95c:	9d07      	ldr	r5, [sp, #28]
 800c95e:	eba6 040a 	sub.w	r4, r6, sl
 800c962:	42a5      	cmp	r5, r4
 800c964:	4602      	mov	r2, r0
 800c966:	460b      	mov	r3, r1
 800c968:	f040 8117 	bne.w	800cb9a <_dtoa_r+0x6e2>
 800c96c:	f7f3 fc96 	bl	800029c <__adddf3>
 800c970:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c974:	4604      	mov	r4, r0
 800c976:	460d      	mov	r5, r1
 800c978:	f7f4 f8d6 	bl	8000b28 <__aeabi_dcmpgt>
 800c97c:	2800      	cmp	r0, #0
 800c97e:	f040 80f9 	bne.w	800cb74 <_dtoa_r+0x6bc>
 800c982:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c986:	4620      	mov	r0, r4
 800c988:	4629      	mov	r1, r5
 800c98a:	f7f4 f8a5 	bl	8000ad8 <__aeabi_dcmpeq>
 800c98e:	b118      	cbz	r0, 800c998 <_dtoa_r+0x4e0>
 800c990:	f018 0f01 	tst.w	r8, #1
 800c994:	f040 80ee 	bne.w	800cb74 <_dtoa_r+0x6bc>
 800c998:	4649      	mov	r1, r9
 800c99a:	4658      	mov	r0, fp
 800c99c:	f000 fc90 	bl	800d2c0 <_Bfree>
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	7033      	strb	r3, [r6, #0]
 800c9a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c9a6:	3701      	adds	r7, #1
 800c9a8:	601f      	str	r7, [r3, #0]
 800c9aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f000 831d 	beq.w	800cfec <_dtoa_r+0xb34>
 800c9b2:	601e      	str	r6, [r3, #0]
 800c9b4:	e31a      	b.n	800cfec <_dtoa_r+0xb34>
 800c9b6:	07e2      	lsls	r2, r4, #31
 800c9b8:	d505      	bpl.n	800c9c6 <_dtoa_r+0x50e>
 800c9ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c9be:	f7f3 fe23 	bl	8000608 <__aeabi_dmul>
 800c9c2:	3601      	adds	r6, #1
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	1064      	asrs	r4, r4, #1
 800c9c8:	3508      	adds	r5, #8
 800c9ca:	e73f      	b.n	800c84c <_dtoa_r+0x394>
 800c9cc:	2602      	movs	r6, #2
 800c9ce:	e742      	b.n	800c856 <_dtoa_r+0x39e>
 800c9d0:	9c07      	ldr	r4, [sp, #28]
 800c9d2:	9704      	str	r7, [sp, #16]
 800c9d4:	e761      	b.n	800c89a <_dtoa_r+0x3e2>
 800c9d6:	4b27      	ldr	r3, [pc, #156]	@ (800ca74 <_dtoa_r+0x5bc>)
 800c9d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c9da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c9de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c9e2:	4454      	add	r4, sl
 800c9e4:	2900      	cmp	r1, #0
 800c9e6:	d053      	beq.n	800ca90 <_dtoa_r+0x5d8>
 800c9e8:	4928      	ldr	r1, [pc, #160]	@ (800ca8c <_dtoa_r+0x5d4>)
 800c9ea:	2000      	movs	r0, #0
 800c9ec:	f7f3 ff36 	bl	800085c <__aeabi_ddiv>
 800c9f0:	4633      	mov	r3, r6
 800c9f2:	462a      	mov	r2, r5
 800c9f4:	f7f3 fc50 	bl	8000298 <__aeabi_dsub>
 800c9f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c9fc:	4656      	mov	r6, sl
 800c9fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca02:	f7f4 f8b1 	bl	8000b68 <__aeabi_d2iz>
 800ca06:	4605      	mov	r5, r0
 800ca08:	f7f3 fd94 	bl	8000534 <__aeabi_i2d>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	460b      	mov	r3, r1
 800ca10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca14:	f7f3 fc40 	bl	8000298 <__aeabi_dsub>
 800ca18:	3530      	adds	r5, #48	@ 0x30
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca22:	f806 5b01 	strb.w	r5, [r6], #1
 800ca26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ca2a:	f7f4 f85f 	bl	8000aec <__aeabi_dcmplt>
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	d171      	bne.n	800cb16 <_dtoa_r+0x65e>
 800ca32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca36:	4911      	ldr	r1, [pc, #68]	@ (800ca7c <_dtoa_r+0x5c4>)
 800ca38:	2000      	movs	r0, #0
 800ca3a:	f7f3 fc2d 	bl	8000298 <__aeabi_dsub>
 800ca3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ca42:	f7f4 f853 	bl	8000aec <__aeabi_dcmplt>
 800ca46:	2800      	cmp	r0, #0
 800ca48:	f040 8095 	bne.w	800cb76 <_dtoa_r+0x6be>
 800ca4c:	42a6      	cmp	r6, r4
 800ca4e:	f43f af50 	beq.w	800c8f2 <_dtoa_r+0x43a>
 800ca52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ca56:	4b0a      	ldr	r3, [pc, #40]	@ (800ca80 <_dtoa_r+0x5c8>)
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f7f3 fdd5 	bl	8000608 <__aeabi_dmul>
 800ca5e:	4b08      	ldr	r3, [pc, #32]	@ (800ca80 <_dtoa_r+0x5c8>)
 800ca60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ca64:	2200      	movs	r2, #0
 800ca66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca6a:	f7f3 fdcd 	bl	8000608 <__aeabi_dmul>
 800ca6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca72:	e7c4      	b.n	800c9fe <_dtoa_r+0x546>
 800ca74:	0800eb38 	.word	0x0800eb38
 800ca78:	0800eb10 	.word	0x0800eb10
 800ca7c:	3ff00000 	.word	0x3ff00000
 800ca80:	40240000 	.word	0x40240000
 800ca84:	401c0000 	.word	0x401c0000
 800ca88:	40140000 	.word	0x40140000
 800ca8c:	3fe00000 	.word	0x3fe00000
 800ca90:	4631      	mov	r1, r6
 800ca92:	4628      	mov	r0, r5
 800ca94:	f7f3 fdb8 	bl	8000608 <__aeabi_dmul>
 800ca98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ca9c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ca9e:	4656      	mov	r6, sl
 800caa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caa4:	f7f4 f860 	bl	8000b68 <__aeabi_d2iz>
 800caa8:	4605      	mov	r5, r0
 800caaa:	f7f3 fd43 	bl	8000534 <__aeabi_i2d>
 800caae:	4602      	mov	r2, r0
 800cab0:	460b      	mov	r3, r1
 800cab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cab6:	f7f3 fbef 	bl	8000298 <__aeabi_dsub>
 800caba:	3530      	adds	r5, #48	@ 0x30
 800cabc:	f806 5b01 	strb.w	r5, [r6], #1
 800cac0:	4602      	mov	r2, r0
 800cac2:	460b      	mov	r3, r1
 800cac4:	42a6      	cmp	r6, r4
 800cac6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800caca:	f04f 0200 	mov.w	r2, #0
 800cace:	d124      	bne.n	800cb1a <_dtoa_r+0x662>
 800cad0:	4bac      	ldr	r3, [pc, #688]	@ (800cd84 <_dtoa_r+0x8cc>)
 800cad2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cad6:	f7f3 fbe1 	bl	800029c <__adddf3>
 800cada:	4602      	mov	r2, r0
 800cadc:	460b      	mov	r3, r1
 800cade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cae2:	f7f4 f821 	bl	8000b28 <__aeabi_dcmpgt>
 800cae6:	2800      	cmp	r0, #0
 800cae8:	d145      	bne.n	800cb76 <_dtoa_r+0x6be>
 800caea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800caee:	49a5      	ldr	r1, [pc, #660]	@ (800cd84 <_dtoa_r+0x8cc>)
 800caf0:	2000      	movs	r0, #0
 800caf2:	f7f3 fbd1 	bl	8000298 <__aeabi_dsub>
 800caf6:	4602      	mov	r2, r0
 800caf8:	460b      	mov	r3, r1
 800cafa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cafe:	f7f3 fff5 	bl	8000aec <__aeabi_dcmplt>
 800cb02:	2800      	cmp	r0, #0
 800cb04:	f43f aef5 	beq.w	800c8f2 <_dtoa_r+0x43a>
 800cb08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cb0a:	1e73      	subs	r3, r6, #1
 800cb0c:	9315      	str	r3, [sp, #84]	@ 0x54
 800cb0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cb12:	2b30      	cmp	r3, #48	@ 0x30
 800cb14:	d0f8      	beq.n	800cb08 <_dtoa_r+0x650>
 800cb16:	9f04      	ldr	r7, [sp, #16]
 800cb18:	e73e      	b.n	800c998 <_dtoa_r+0x4e0>
 800cb1a:	4b9b      	ldr	r3, [pc, #620]	@ (800cd88 <_dtoa_r+0x8d0>)
 800cb1c:	f7f3 fd74 	bl	8000608 <__aeabi_dmul>
 800cb20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb24:	e7bc      	b.n	800caa0 <_dtoa_r+0x5e8>
 800cb26:	d10c      	bne.n	800cb42 <_dtoa_r+0x68a>
 800cb28:	4b98      	ldr	r3, [pc, #608]	@ (800cd8c <_dtoa_r+0x8d4>)
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb30:	f7f3 fd6a 	bl	8000608 <__aeabi_dmul>
 800cb34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb38:	f7f3 ffec 	bl	8000b14 <__aeabi_dcmpge>
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	f000 8157 	beq.w	800cdf0 <_dtoa_r+0x938>
 800cb42:	2400      	movs	r4, #0
 800cb44:	4625      	mov	r5, r4
 800cb46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb48:	43db      	mvns	r3, r3
 800cb4a:	9304      	str	r3, [sp, #16]
 800cb4c:	4656      	mov	r6, sl
 800cb4e:	2700      	movs	r7, #0
 800cb50:	4621      	mov	r1, r4
 800cb52:	4658      	mov	r0, fp
 800cb54:	f000 fbb4 	bl	800d2c0 <_Bfree>
 800cb58:	2d00      	cmp	r5, #0
 800cb5a:	d0dc      	beq.n	800cb16 <_dtoa_r+0x65e>
 800cb5c:	b12f      	cbz	r7, 800cb6a <_dtoa_r+0x6b2>
 800cb5e:	42af      	cmp	r7, r5
 800cb60:	d003      	beq.n	800cb6a <_dtoa_r+0x6b2>
 800cb62:	4639      	mov	r1, r7
 800cb64:	4658      	mov	r0, fp
 800cb66:	f000 fbab 	bl	800d2c0 <_Bfree>
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	4658      	mov	r0, fp
 800cb6e:	f000 fba7 	bl	800d2c0 <_Bfree>
 800cb72:	e7d0      	b.n	800cb16 <_dtoa_r+0x65e>
 800cb74:	9704      	str	r7, [sp, #16]
 800cb76:	4633      	mov	r3, r6
 800cb78:	461e      	mov	r6, r3
 800cb7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb7e:	2a39      	cmp	r2, #57	@ 0x39
 800cb80:	d107      	bne.n	800cb92 <_dtoa_r+0x6da>
 800cb82:	459a      	cmp	sl, r3
 800cb84:	d1f8      	bne.n	800cb78 <_dtoa_r+0x6c0>
 800cb86:	9a04      	ldr	r2, [sp, #16]
 800cb88:	3201      	adds	r2, #1
 800cb8a:	9204      	str	r2, [sp, #16]
 800cb8c:	2230      	movs	r2, #48	@ 0x30
 800cb8e:	f88a 2000 	strb.w	r2, [sl]
 800cb92:	781a      	ldrb	r2, [r3, #0]
 800cb94:	3201      	adds	r2, #1
 800cb96:	701a      	strb	r2, [r3, #0]
 800cb98:	e7bd      	b.n	800cb16 <_dtoa_r+0x65e>
 800cb9a:	4b7b      	ldr	r3, [pc, #492]	@ (800cd88 <_dtoa_r+0x8d0>)
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f7f3 fd33 	bl	8000608 <__aeabi_dmul>
 800cba2:	2200      	movs	r2, #0
 800cba4:	2300      	movs	r3, #0
 800cba6:	4604      	mov	r4, r0
 800cba8:	460d      	mov	r5, r1
 800cbaa:	f7f3 ff95 	bl	8000ad8 <__aeabi_dcmpeq>
 800cbae:	2800      	cmp	r0, #0
 800cbb0:	f43f aebb 	beq.w	800c92a <_dtoa_r+0x472>
 800cbb4:	e6f0      	b.n	800c998 <_dtoa_r+0x4e0>
 800cbb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cbb8:	2a00      	cmp	r2, #0
 800cbba:	f000 80db 	beq.w	800cd74 <_dtoa_r+0x8bc>
 800cbbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbc0:	2a01      	cmp	r2, #1
 800cbc2:	f300 80bf 	bgt.w	800cd44 <_dtoa_r+0x88c>
 800cbc6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cbc8:	2a00      	cmp	r2, #0
 800cbca:	f000 80b7 	beq.w	800cd3c <_dtoa_r+0x884>
 800cbce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cbd2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cbd4:	4646      	mov	r6, r8
 800cbd6:	9a08      	ldr	r2, [sp, #32]
 800cbd8:	2101      	movs	r1, #1
 800cbda:	441a      	add	r2, r3
 800cbdc:	4658      	mov	r0, fp
 800cbde:	4498      	add	r8, r3
 800cbe0:	9208      	str	r2, [sp, #32]
 800cbe2:	f000 fc21 	bl	800d428 <__i2b>
 800cbe6:	4605      	mov	r5, r0
 800cbe8:	b15e      	cbz	r6, 800cc02 <_dtoa_r+0x74a>
 800cbea:	9b08      	ldr	r3, [sp, #32]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	dd08      	ble.n	800cc02 <_dtoa_r+0x74a>
 800cbf0:	42b3      	cmp	r3, r6
 800cbf2:	9a08      	ldr	r2, [sp, #32]
 800cbf4:	bfa8      	it	ge
 800cbf6:	4633      	movge	r3, r6
 800cbf8:	eba8 0803 	sub.w	r8, r8, r3
 800cbfc:	1af6      	subs	r6, r6, r3
 800cbfe:	1ad3      	subs	r3, r2, r3
 800cc00:	9308      	str	r3, [sp, #32]
 800cc02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc04:	b1f3      	cbz	r3, 800cc44 <_dtoa_r+0x78c>
 800cc06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f000 80b7 	beq.w	800cd7c <_dtoa_r+0x8c4>
 800cc0e:	b18c      	cbz	r4, 800cc34 <_dtoa_r+0x77c>
 800cc10:	4629      	mov	r1, r5
 800cc12:	4622      	mov	r2, r4
 800cc14:	4658      	mov	r0, fp
 800cc16:	f000 fcc7 	bl	800d5a8 <__pow5mult>
 800cc1a:	464a      	mov	r2, r9
 800cc1c:	4601      	mov	r1, r0
 800cc1e:	4605      	mov	r5, r0
 800cc20:	4658      	mov	r0, fp
 800cc22:	f000 fc17 	bl	800d454 <__multiply>
 800cc26:	4649      	mov	r1, r9
 800cc28:	9004      	str	r0, [sp, #16]
 800cc2a:	4658      	mov	r0, fp
 800cc2c:	f000 fb48 	bl	800d2c0 <_Bfree>
 800cc30:	9b04      	ldr	r3, [sp, #16]
 800cc32:	4699      	mov	r9, r3
 800cc34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc36:	1b1a      	subs	r2, r3, r4
 800cc38:	d004      	beq.n	800cc44 <_dtoa_r+0x78c>
 800cc3a:	4649      	mov	r1, r9
 800cc3c:	4658      	mov	r0, fp
 800cc3e:	f000 fcb3 	bl	800d5a8 <__pow5mult>
 800cc42:	4681      	mov	r9, r0
 800cc44:	2101      	movs	r1, #1
 800cc46:	4658      	mov	r0, fp
 800cc48:	f000 fbee 	bl	800d428 <__i2b>
 800cc4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc4e:	4604      	mov	r4, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	f000 81cf 	beq.w	800cff4 <_dtoa_r+0xb3c>
 800cc56:	461a      	mov	r2, r3
 800cc58:	4601      	mov	r1, r0
 800cc5a:	4658      	mov	r0, fp
 800cc5c:	f000 fca4 	bl	800d5a8 <__pow5mult>
 800cc60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	4604      	mov	r4, r0
 800cc66:	f300 8095 	bgt.w	800cd94 <_dtoa_r+0x8dc>
 800cc6a:	9b02      	ldr	r3, [sp, #8]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	f040 8087 	bne.w	800cd80 <_dtoa_r+0x8c8>
 800cc72:	9b03      	ldr	r3, [sp, #12]
 800cc74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	f040 8089 	bne.w	800cd90 <_dtoa_r+0x8d8>
 800cc7e:	9b03      	ldr	r3, [sp, #12]
 800cc80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cc84:	0d1b      	lsrs	r3, r3, #20
 800cc86:	051b      	lsls	r3, r3, #20
 800cc88:	b12b      	cbz	r3, 800cc96 <_dtoa_r+0x7de>
 800cc8a:	9b08      	ldr	r3, [sp, #32]
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	9308      	str	r3, [sp, #32]
 800cc90:	f108 0801 	add.w	r8, r8, #1
 800cc94:	2301      	movs	r3, #1
 800cc96:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	f000 81b0 	beq.w	800d000 <_dtoa_r+0xb48>
 800cca0:	6923      	ldr	r3, [r4, #16]
 800cca2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cca6:	6918      	ldr	r0, [r3, #16]
 800cca8:	f000 fb72 	bl	800d390 <__hi0bits>
 800ccac:	f1c0 0020 	rsb	r0, r0, #32
 800ccb0:	9b08      	ldr	r3, [sp, #32]
 800ccb2:	4418      	add	r0, r3
 800ccb4:	f010 001f 	ands.w	r0, r0, #31
 800ccb8:	d077      	beq.n	800cdaa <_dtoa_r+0x8f2>
 800ccba:	f1c0 0320 	rsb	r3, r0, #32
 800ccbe:	2b04      	cmp	r3, #4
 800ccc0:	dd6b      	ble.n	800cd9a <_dtoa_r+0x8e2>
 800ccc2:	9b08      	ldr	r3, [sp, #32]
 800ccc4:	f1c0 001c 	rsb	r0, r0, #28
 800ccc8:	4403      	add	r3, r0
 800ccca:	4480      	add	r8, r0
 800cccc:	4406      	add	r6, r0
 800ccce:	9308      	str	r3, [sp, #32]
 800ccd0:	f1b8 0f00 	cmp.w	r8, #0
 800ccd4:	dd05      	ble.n	800cce2 <_dtoa_r+0x82a>
 800ccd6:	4649      	mov	r1, r9
 800ccd8:	4642      	mov	r2, r8
 800ccda:	4658      	mov	r0, fp
 800ccdc:	f000 fcbe 	bl	800d65c <__lshift>
 800cce0:	4681      	mov	r9, r0
 800cce2:	9b08      	ldr	r3, [sp, #32]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	dd05      	ble.n	800ccf4 <_dtoa_r+0x83c>
 800cce8:	4621      	mov	r1, r4
 800ccea:	461a      	mov	r2, r3
 800ccec:	4658      	mov	r0, fp
 800ccee:	f000 fcb5 	bl	800d65c <__lshift>
 800ccf2:	4604      	mov	r4, r0
 800ccf4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d059      	beq.n	800cdae <_dtoa_r+0x8f6>
 800ccfa:	4621      	mov	r1, r4
 800ccfc:	4648      	mov	r0, r9
 800ccfe:	f000 fd19 	bl	800d734 <__mcmp>
 800cd02:	2800      	cmp	r0, #0
 800cd04:	da53      	bge.n	800cdae <_dtoa_r+0x8f6>
 800cd06:	1e7b      	subs	r3, r7, #1
 800cd08:	9304      	str	r3, [sp, #16]
 800cd0a:	4649      	mov	r1, r9
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	220a      	movs	r2, #10
 800cd10:	4658      	mov	r0, fp
 800cd12:	f000 faf7 	bl	800d304 <__multadd>
 800cd16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd18:	4681      	mov	r9, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f000 8172 	beq.w	800d004 <_dtoa_r+0xb4c>
 800cd20:	2300      	movs	r3, #0
 800cd22:	4629      	mov	r1, r5
 800cd24:	220a      	movs	r2, #10
 800cd26:	4658      	mov	r0, fp
 800cd28:	f000 faec 	bl	800d304 <__multadd>
 800cd2c:	9b00      	ldr	r3, [sp, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	4605      	mov	r5, r0
 800cd32:	dc67      	bgt.n	800ce04 <_dtoa_r+0x94c>
 800cd34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd36:	2b02      	cmp	r3, #2
 800cd38:	dc41      	bgt.n	800cdbe <_dtoa_r+0x906>
 800cd3a:	e063      	b.n	800ce04 <_dtoa_r+0x94c>
 800cd3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cd3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cd42:	e746      	b.n	800cbd2 <_dtoa_r+0x71a>
 800cd44:	9b07      	ldr	r3, [sp, #28]
 800cd46:	1e5c      	subs	r4, r3, #1
 800cd48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd4a:	42a3      	cmp	r3, r4
 800cd4c:	bfbf      	itttt	lt
 800cd4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cd50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800cd52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cd54:	1ae3      	sublt	r3, r4, r3
 800cd56:	bfb4      	ite	lt
 800cd58:	18d2      	addlt	r2, r2, r3
 800cd5a:	1b1c      	subge	r4, r3, r4
 800cd5c:	9b07      	ldr	r3, [sp, #28]
 800cd5e:	bfbc      	itt	lt
 800cd60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800cd62:	2400      	movlt	r4, #0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	bfb5      	itete	lt
 800cd68:	eba8 0603 	sublt.w	r6, r8, r3
 800cd6c:	9b07      	ldrge	r3, [sp, #28]
 800cd6e:	2300      	movlt	r3, #0
 800cd70:	4646      	movge	r6, r8
 800cd72:	e730      	b.n	800cbd6 <_dtoa_r+0x71e>
 800cd74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cd76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cd78:	4646      	mov	r6, r8
 800cd7a:	e735      	b.n	800cbe8 <_dtoa_r+0x730>
 800cd7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd7e:	e75c      	b.n	800cc3a <_dtoa_r+0x782>
 800cd80:	2300      	movs	r3, #0
 800cd82:	e788      	b.n	800cc96 <_dtoa_r+0x7de>
 800cd84:	3fe00000 	.word	0x3fe00000
 800cd88:	40240000 	.word	0x40240000
 800cd8c:	40140000 	.word	0x40140000
 800cd90:	9b02      	ldr	r3, [sp, #8]
 800cd92:	e780      	b.n	800cc96 <_dtoa_r+0x7de>
 800cd94:	2300      	movs	r3, #0
 800cd96:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd98:	e782      	b.n	800cca0 <_dtoa_r+0x7e8>
 800cd9a:	d099      	beq.n	800ccd0 <_dtoa_r+0x818>
 800cd9c:	9a08      	ldr	r2, [sp, #32]
 800cd9e:	331c      	adds	r3, #28
 800cda0:	441a      	add	r2, r3
 800cda2:	4498      	add	r8, r3
 800cda4:	441e      	add	r6, r3
 800cda6:	9208      	str	r2, [sp, #32]
 800cda8:	e792      	b.n	800ccd0 <_dtoa_r+0x818>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	e7f6      	b.n	800cd9c <_dtoa_r+0x8e4>
 800cdae:	9b07      	ldr	r3, [sp, #28]
 800cdb0:	9704      	str	r7, [sp, #16]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	dc20      	bgt.n	800cdf8 <_dtoa_r+0x940>
 800cdb6:	9300      	str	r3, [sp, #0]
 800cdb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdba:	2b02      	cmp	r3, #2
 800cdbc:	dd1e      	ble.n	800cdfc <_dtoa_r+0x944>
 800cdbe:	9b00      	ldr	r3, [sp, #0]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	f47f aec0 	bne.w	800cb46 <_dtoa_r+0x68e>
 800cdc6:	4621      	mov	r1, r4
 800cdc8:	2205      	movs	r2, #5
 800cdca:	4658      	mov	r0, fp
 800cdcc:	f000 fa9a 	bl	800d304 <__multadd>
 800cdd0:	4601      	mov	r1, r0
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	4648      	mov	r0, r9
 800cdd6:	f000 fcad 	bl	800d734 <__mcmp>
 800cdda:	2800      	cmp	r0, #0
 800cddc:	f77f aeb3 	ble.w	800cb46 <_dtoa_r+0x68e>
 800cde0:	4656      	mov	r6, sl
 800cde2:	2331      	movs	r3, #49	@ 0x31
 800cde4:	f806 3b01 	strb.w	r3, [r6], #1
 800cde8:	9b04      	ldr	r3, [sp, #16]
 800cdea:	3301      	adds	r3, #1
 800cdec:	9304      	str	r3, [sp, #16]
 800cdee:	e6ae      	b.n	800cb4e <_dtoa_r+0x696>
 800cdf0:	9c07      	ldr	r4, [sp, #28]
 800cdf2:	9704      	str	r7, [sp, #16]
 800cdf4:	4625      	mov	r5, r4
 800cdf6:	e7f3      	b.n	800cde0 <_dtoa_r+0x928>
 800cdf8:	9b07      	ldr	r3, [sp, #28]
 800cdfa:	9300      	str	r3, [sp, #0]
 800cdfc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	f000 8104 	beq.w	800d00c <_dtoa_r+0xb54>
 800ce04:	2e00      	cmp	r6, #0
 800ce06:	dd05      	ble.n	800ce14 <_dtoa_r+0x95c>
 800ce08:	4629      	mov	r1, r5
 800ce0a:	4632      	mov	r2, r6
 800ce0c:	4658      	mov	r0, fp
 800ce0e:	f000 fc25 	bl	800d65c <__lshift>
 800ce12:	4605      	mov	r5, r0
 800ce14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d05a      	beq.n	800ced0 <_dtoa_r+0xa18>
 800ce1a:	6869      	ldr	r1, [r5, #4]
 800ce1c:	4658      	mov	r0, fp
 800ce1e:	f000 fa0f 	bl	800d240 <_Balloc>
 800ce22:	4606      	mov	r6, r0
 800ce24:	b928      	cbnz	r0, 800ce32 <_dtoa_r+0x97a>
 800ce26:	4b84      	ldr	r3, [pc, #528]	@ (800d038 <_dtoa_r+0xb80>)
 800ce28:	4602      	mov	r2, r0
 800ce2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ce2e:	f7ff bb5a 	b.w	800c4e6 <_dtoa_r+0x2e>
 800ce32:	692a      	ldr	r2, [r5, #16]
 800ce34:	3202      	adds	r2, #2
 800ce36:	0092      	lsls	r2, r2, #2
 800ce38:	f105 010c 	add.w	r1, r5, #12
 800ce3c:	300c      	adds	r0, #12
 800ce3e:	f000 ffaf 	bl	800dda0 <memcpy>
 800ce42:	2201      	movs	r2, #1
 800ce44:	4631      	mov	r1, r6
 800ce46:	4658      	mov	r0, fp
 800ce48:	f000 fc08 	bl	800d65c <__lshift>
 800ce4c:	f10a 0301 	add.w	r3, sl, #1
 800ce50:	9307      	str	r3, [sp, #28]
 800ce52:	9b00      	ldr	r3, [sp, #0]
 800ce54:	4453      	add	r3, sl
 800ce56:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce58:	9b02      	ldr	r3, [sp, #8]
 800ce5a:	f003 0301 	and.w	r3, r3, #1
 800ce5e:	462f      	mov	r7, r5
 800ce60:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce62:	4605      	mov	r5, r0
 800ce64:	9b07      	ldr	r3, [sp, #28]
 800ce66:	4621      	mov	r1, r4
 800ce68:	3b01      	subs	r3, #1
 800ce6a:	4648      	mov	r0, r9
 800ce6c:	9300      	str	r3, [sp, #0]
 800ce6e:	f7ff fa9a 	bl	800c3a6 <quorem>
 800ce72:	4639      	mov	r1, r7
 800ce74:	9002      	str	r0, [sp, #8]
 800ce76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ce7a:	4648      	mov	r0, r9
 800ce7c:	f000 fc5a 	bl	800d734 <__mcmp>
 800ce80:	462a      	mov	r2, r5
 800ce82:	9008      	str	r0, [sp, #32]
 800ce84:	4621      	mov	r1, r4
 800ce86:	4658      	mov	r0, fp
 800ce88:	f000 fc70 	bl	800d76c <__mdiff>
 800ce8c:	68c2      	ldr	r2, [r0, #12]
 800ce8e:	4606      	mov	r6, r0
 800ce90:	bb02      	cbnz	r2, 800ced4 <_dtoa_r+0xa1c>
 800ce92:	4601      	mov	r1, r0
 800ce94:	4648      	mov	r0, r9
 800ce96:	f000 fc4d 	bl	800d734 <__mcmp>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	4631      	mov	r1, r6
 800ce9e:	4658      	mov	r0, fp
 800cea0:	920e      	str	r2, [sp, #56]	@ 0x38
 800cea2:	f000 fa0d 	bl	800d2c0 <_Bfree>
 800cea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cea8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ceaa:	9e07      	ldr	r6, [sp, #28]
 800ceac:	ea43 0102 	orr.w	r1, r3, r2
 800ceb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ceb2:	4319      	orrs	r1, r3
 800ceb4:	d110      	bne.n	800ced8 <_dtoa_r+0xa20>
 800ceb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ceba:	d029      	beq.n	800cf10 <_dtoa_r+0xa58>
 800cebc:	9b08      	ldr	r3, [sp, #32]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	dd02      	ble.n	800cec8 <_dtoa_r+0xa10>
 800cec2:	9b02      	ldr	r3, [sp, #8]
 800cec4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cec8:	9b00      	ldr	r3, [sp, #0]
 800ceca:	f883 8000 	strb.w	r8, [r3]
 800cece:	e63f      	b.n	800cb50 <_dtoa_r+0x698>
 800ced0:	4628      	mov	r0, r5
 800ced2:	e7bb      	b.n	800ce4c <_dtoa_r+0x994>
 800ced4:	2201      	movs	r2, #1
 800ced6:	e7e1      	b.n	800ce9c <_dtoa_r+0x9e4>
 800ced8:	9b08      	ldr	r3, [sp, #32]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	db04      	blt.n	800cee8 <_dtoa_r+0xa30>
 800cede:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cee0:	430b      	orrs	r3, r1
 800cee2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cee4:	430b      	orrs	r3, r1
 800cee6:	d120      	bne.n	800cf2a <_dtoa_r+0xa72>
 800cee8:	2a00      	cmp	r2, #0
 800ceea:	dded      	ble.n	800cec8 <_dtoa_r+0xa10>
 800ceec:	4649      	mov	r1, r9
 800ceee:	2201      	movs	r2, #1
 800cef0:	4658      	mov	r0, fp
 800cef2:	f000 fbb3 	bl	800d65c <__lshift>
 800cef6:	4621      	mov	r1, r4
 800cef8:	4681      	mov	r9, r0
 800cefa:	f000 fc1b 	bl	800d734 <__mcmp>
 800cefe:	2800      	cmp	r0, #0
 800cf00:	dc03      	bgt.n	800cf0a <_dtoa_r+0xa52>
 800cf02:	d1e1      	bne.n	800cec8 <_dtoa_r+0xa10>
 800cf04:	f018 0f01 	tst.w	r8, #1
 800cf08:	d0de      	beq.n	800cec8 <_dtoa_r+0xa10>
 800cf0a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cf0e:	d1d8      	bne.n	800cec2 <_dtoa_r+0xa0a>
 800cf10:	9a00      	ldr	r2, [sp, #0]
 800cf12:	2339      	movs	r3, #57	@ 0x39
 800cf14:	7013      	strb	r3, [r2, #0]
 800cf16:	4633      	mov	r3, r6
 800cf18:	461e      	mov	r6, r3
 800cf1a:	3b01      	subs	r3, #1
 800cf1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cf20:	2a39      	cmp	r2, #57	@ 0x39
 800cf22:	d052      	beq.n	800cfca <_dtoa_r+0xb12>
 800cf24:	3201      	adds	r2, #1
 800cf26:	701a      	strb	r2, [r3, #0]
 800cf28:	e612      	b.n	800cb50 <_dtoa_r+0x698>
 800cf2a:	2a00      	cmp	r2, #0
 800cf2c:	dd07      	ble.n	800cf3e <_dtoa_r+0xa86>
 800cf2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cf32:	d0ed      	beq.n	800cf10 <_dtoa_r+0xa58>
 800cf34:	9a00      	ldr	r2, [sp, #0]
 800cf36:	f108 0301 	add.w	r3, r8, #1
 800cf3a:	7013      	strb	r3, [r2, #0]
 800cf3c:	e608      	b.n	800cb50 <_dtoa_r+0x698>
 800cf3e:	9b07      	ldr	r3, [sp, #28]
 800cf40:	9a07      	ldr	r2, [sp, #28]
 800cf42:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cf46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d028      	beq.n	800cf9e <_dtoa_r+0xae6>
 800cf4c:	4649      	mov	r1, r9
 800cf4e:	2300      	movs	r3, #0
 800cf50:	220a      	movs	r2, #10
 800cf52:	4658      	mov	r0, fp
 800cf54:	f000 f9d6 	bl	800d304 <__multadd>
 800cf58:	42af      	cmp	r7, r5
 800cf5a:	4681      	mov	r9, r0
 800cf5c:	f04f 0300 	mov.w	r3, #0
 800cf60:	f04f 020a 	mov.w	r2, #10
 800cf64:	4639      	mov	r1, r7
 800cf66:	4658      	mov	r0, fp
 800cf68:	d107      	bne.n	800cf7a <_dtoa_r+0xac2>
 800cf6a:	f000 f9cb 	bl	800d304 <__multadd>
 800cf6e:	4607      	mov	r7, r0
 800cf70:	4605      	mov	r5, r0
 800cf72:	9b07      	ldr	r3, [sp, #28]
 800cf74:	3301      	adds	r3, #1
 800cf76:	9307      	str	r3, [sp, #28]
 800cf78:	e774      	b.n	800ce64 <_dtoa_r+0x9ac>
 800cf7a:	f000 f9c3 	bl	800d304 <__multadd>
 800cf7e:	4629      	mov	r1, r5
 800cf80:	4607      	mov	r7, r0
 800cf82:	2300      	movs	r3, #0
 800cf84:	220a      	movs	r2, #10
 800cf86:	4658      	mov	r0, fp
 800cf88:	f000 f9bc 	bl	800d304 <__multadd>
 800cf8c:	4605      	mov	r5, r0
 800cf8e:	e7f0      	b.n	800cf72 <_dtoa_r+0xaba>
 800cf90:	9b00      	ldr	r3, [sp, #0]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	bfcc      	ite	gt
 800cf96:	461e      	movgt	r6, r3
 800cf98:	2601      	movle	r6, #1
 800cf9a:	4456      	add	r6, sl
 800cf9c:	2700      	movs	r7, #0
 800cf9e:	4649      	mov	r1, r9
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	4658      	mov	r0, fp
 800cfa4:	f000 fb5a 	bl	800d65c <__lshift>
 800cfa8:	4621      	mov	r1, r4
 800cfaa:	4681      	mov	r9, r0
 800cfac:	f000 fbc2 	bl	800d734 <__mcmp>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	dcb0      	bgt.n	800cf16 <_dtoa_r+0xa5e>
 800cfb4:	d102      	bne.n	800cfbc <_dtoa_r+0xb04>
 800cfb6:	f018 0f01 	tst.w	r8, #1
 800cfba:	d1ac      	bne.n	800cf16 <_dtoa_r+0xa5e>
 800cfbc:	4633      	mov	r3, r6
 800cfbe:	461e      	mov	r6, r3
 800cfc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cfc4:	2a30      	cmp	r2, #48	@ 0x30
 800cfc6:	d0fa      	beq.n	800cfbe <_dtoa_r+0xb06>
 800cfc8:	e5c2      	b.n	800cb50 <_dtoa_r+0x698>
 800cfca:	459a      	cmp	sl, r3
 800cfcc:	d1a4      	bne.n	800cf18 <_dtoa_r+0xa60>
 800cfce:	9b04      	ldr	r3, [sp, #16]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	9304      	str	r3, [sp, #16]
 800cfd4:	2331      	movs	r3, #49	@ 0x31
 800cfd6:	f88a 3000 	strb.w	r3, [sl]
 800cfda:	e5b9      	b.n	800cb50 <_dtoa_r+0x698>
 800cfdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cfde:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d03c <_dtoa_r+0xb84>
 800cfe2:	b11b      	cbz	r3, 800cfec <_dtoa_r+0xb34>
 800cfe4:	f10a 0308 	add.w	r3, sl, #8
 800cfe8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cfea:	6013      	str	r3, [r2, #0]
 800cfec:	4650      	mov	r0, sl
 800cfee:	b019      	add	sp, #100	@ 0x64
 800cff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cff6:	2b01      	cmp	r3, #1
 800cff8:	f77f ae37 	ble.w	800cc6a <_dtoa_r+0x7b2>
 800cffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cffe:	930a      	str	r3, [sp, #40]	@ 0x28
 800d000:	2001      	movs	r0, #1
 800d002:	e655      	b.n	800ccb0 <_dtoa_r+0x7f8>
 800d004:	9b00      	ldr	r3, [sp, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	f77f aed6 	ble.w	800cdb8 <_dtoa_r+0x900>
 800d00c:	4656      	mov	r6, sl
 800d00e:	4621      	mov	r1, r4
 800d010:	4648      	mov	r0, r9
 800d012:	f7ff f9c8 	bl	800c3a6 <quorem>
 800d016:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d01a:	f806 8b01 	strb.w	r8, [r6], #1
 800d01e:	9b00      	ldr	r3, [sp, #0]
 800d020:	eba6 020a 	sub.w	r2, r6, sl
 800d024:	4293      	cmp	r3, r2
 800d026:	ddb3      	ble.n	800cf90 <_dtoa_r+0xad8>
 800d028:	4649      	mov	r1, r9
 800d02a:	2300      	movs	r3, #0
 800d02c:	220a      	movs	r2, #10
 800d02e:	4658      	mov	r0, fp
 800d030:	f000 f968 	bl	800d304 <__multadd>
 800d034:	4681      	mov	r9, r0
 800d036:	e7ea      	b.n	800d00e <_dtoa_r+0xb56>
 800d038:	0800ea94 	.word	0x0800ea94
 800d03c:	0800ea18 	.word	0x0800ea18

0800d040 <_free_r>:
 800d040:	b538      	push	{r3, r4, r5, lr}
 800d042:	4605      	mov	r5, r0
 800d044:	2900      	cmp	r1, #0
 800d046:	d041      	beq.n	800d0cc <_free_r+0x8c>
 800d048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d04c:	1f0c      	subs	r4, r1, #4
 800d04e:	2b00      	cmp	r3, #0
 800d050:	bfb8      	it	lt
 800d052:	18e4      	addlt	r4, r4, r3
 800d054:	f000 f8e8 	bl	800d228 <__malloc_lock>
 800d058:	4a1d      	ldr	r2, [pc, #116]	@ (800d0d0 <_free_r+0x90>)
 800d05a:	6813      	ldr	r3, [r2, #0]
 800d05c:	b933      	cbnz	r3, 800d06c <_free_r+0x2c>
 800d05e:	6063      	str	r3, [r4, #4]
 800d060:	6014      	str	r4, [r2, #0]
 800d062:	4628      	mov	r0, r5
 800d064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d068:	f000 b8e4 	b.w	800d234 <__malloc_unlock>
 800d06c:	42a3      	cmp	r3, r4
 800d06e:	d908      	bls.n	800d082 <_free_r+0x42>
 800d070:	6820      	ldr	r0, [r4, #0]
 800d072:	1821      	adds	r1, r4, r0
 800d074:	428b      	cmp	r3, r1
 800d076:	bf01      	itttt	eq
 800d078:	6819      	ldreq	r1, [r3, #0]
 800d07a:	685b      	ldreq	r3, [r3, #4]
 800d07c:	1809      	addeq	r1, r1, r0
 800d07e:	6021      	streq	r1, [r4, #0]
 800d080:	e7ed      	b.n	800d05e <_free_r+0x1e>
 800d082:	461a      	mov	r2, r3
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	b10b      	cbz	r3, 800d08c <_free_r+0x4c>
 800d088:	42a3      	cmp	r3, r4
 800d08a:	d9fa      	bls.n	800d082 <_free_r+0x42>
 800d08c:	6811      	ldr	r1, [r2, #0]
 800d08e:	1850      	adds	r0, r2, r1
 800d090:	42a0      	cmp	r0, r4
 800d092:	d10b      	bne.n	800d0ac <_free_r+0x6c>
 800d094:	6820      	ldr	r0, [r4, #0]
 800d096:	4401      	add	r1, r0
 800d098:	1850      	adds	r0, r2, r1
 800d09a:	4283      	cmp	r3, r0
 800d09c:	6011      	str	r1, [r2, #0]
 800d09e:	d1e0      	bne.n	800d062 <_free_r+0x22>
 800d0a0:	6818      	ldr	r0, [r3, #0]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	6053      	str	r3, [r2, #4]
 800d0a6:	4408      	add	r0, r1
 800d0a8:	6010      	str	r0, [r2, #0]
 800d0aa:	e7da      	b.n	800d062 <_free_r+0x22>
 800d0ac:	d902      	bls.n	800d0b4 <_free_r+0x74>
 800d0ae:	230c      	movs	r3, #12
 800d0b0:	602b      	str	r3, [r5, #0]
 800d0b2:	e7d6      	b.n	800d062 <_free_r+0x22>
 800d0b4:	6820      	ldr	r0, [r4, #0]
 800d0b6:	1821      	adds	r1, r4, r0
 800d0b8:	428b      	cmp	r3, r1
 800d0ba:	bf04      	itt	eq
 800d0bc:	6819      	ldreq	r1, [r3, #0]
 800d0be:	685b      	ldreq	r3, [r3, #4]
 800d0c0:	6063      	str	r3, [r4, #4]
 800d0c2:	bf04      	itt	eq
 800d0c4:	1809      	addeq	r1, r1, r0
 800d0c6:	6021      	streq	r1, [r4, #0]
 800d0c8:	6054      	str	r4, [r2, #4]
 800d0ca:	e7ca      	b.n	800d062 <_free_r+0x22>
 800d0cc:	bd38      	pop	{r3, r4, r5, pc}
 800d0ce:	bf00      	nop
 800d0d0:	20002164 	.word	0x20002164

0800d0d4 <malloc>:
 800d0d4:	4b02      	ldr	r3, [pc, #8]	@ (800d0e0 <malloc+0xc>)
 800d0d6:	4601      	mov	r1, r0
 800d0d8:	6818      	ldr	r0, [r3, #0]
 800d0da:	f000 b825 	b.w	800d128 <_malloc_r>
 800d0de:	bf00      	nop
 800d0e0:	20000118 	.word	0x20000118

0800d0e4 <sbrk_aligned>:
 800d0e4:	b570      	push	{r4, r5, r6, lr}
 800d0e6:	4e0f      	ldr	r6, [pc, #60]	@ (800d124 <sbrk_aligned+0x40>)
 800d0e8:	460c      	mov	r4, r1
 800d0ea:	6831      	ldr	r1, [r6, #0]
 800d0ec:	4605      	mov	r5, r0
 800d0ee:	b911      	cbnz	r1, 800d0f6 <sbrk_aligned+0x12>
 800d0f0:	f000 fe46 	bl	800dd80 <_sbrk_r>
 800d0f4:	6030      	str	r0, [r6, #0]
 800d0f6:	4621      	mov	r1, r4
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	f000 fe41 	bl	800dd80 <_sbrk_r>
 800d0fe:	1c43      	adds	r3, r0, #1
 800d100:	d103      	bne.n	800d10a <sbrk_aligned+0x26>
 800d102:	f04f 34ff 	mov.w	r4, #4294967295
 800d106:	4620      	mov	r0, r4
 800d108:	bd70      	pop	{r4, r5, r6, pc}
 800d10a:	1cc4      	adds	r4, r0, #3
 800d10c:	f024 0403 	bic.w	r4, r4, #3
 800d110:	42a0      	cmp	r0, r4
 800d112:	d0f8      	beq.n	800d106 <sbrk_aligned+0x22>
 800d114:	1a21      	subs	r1, r4, r0
 800d116:	4628      	mov	r0, r5
 800d118:	f000 fe32 	bl	800dd80 <_sbrk_r>
 800d11c:	3001      	adds	r0, #1
 800d11e:	d1f2      	bne.n	800d106 <sbrk_aligned+0x22>
 800d120:	e7ef      	b.n	800d102 <sbrk_aligned+0x1e>
 800d122:	bf00      	nop
 800d124:	20002160 	.word	0x20002160

0800d128 <_malloc_r>:
 800d128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d12c:	1ccd      	adds	r5, r1, #3
 800d12e:	f025 0503 	bic.w	r5, r5, #3
 800d132:	3508      	adds	r5, #8
 800d134:	2d0c      	cmp	r5, #12
 800d136:	bf38      	it	cc
 800d138:	250c      	movcc	r5, #12
 800d13a:	2d00      	cmp	r5, #0
 800d13c:	4606      	mov	r6, r0
 800d13e:	db01      	blt.n	800d144 <_malloc_r+0x1c>
 800d140:	42a9      	cmp	r1, r5
 800d142:	d904      	bls.n	800d14e <_malloc_r+0x26>
 800d144:	230c      	movs	r3, #12
 800d146:	6033      	str	r3, [r6, #0]
 800d148:	2000      	movs	r0, #0
 800d14a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d14e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d224 <_malloc_r+0xfc>
 800d152:	f000 f869 	bl	800d228 <__malloc_lock>
 800d156:	f8d8 3000 	ldr.w	r3, [r8]
 800d15a:	461c      	mov	r4, r3
 800d15c:	bb44      	cbnz	r4, 800d1b0 <_malloc_r+0x88>
 800d15e:	4629      	mov	r1, r5
 800d160:	4630      	mov	r0, r6
 800d162:	f7ff ffbf 	bl	800d0e4 <sbrk_aligned>
 800d166:	1c43      	adds	r3, r0, #1
 800d168:	4604      	mov	r4, r0
 800d16a:	d158      	bne.n	800d21e <_malloc_r+0xf6>
 800d16c:	f8d8 4000 	ldr.w	r4, [r8]
 800d170:	4627      	mov	r7, r4
 800d172:	2f00      	cmp	r7, #0
 800d174:	d143      	bne.n	800d1fe <_malloc_r+0xd6>
 800d176:	2c00      	cmp	r4, #0
 800d178:	d04b      	beq.n	800d212 <_malloc_r+0xea>
 800d17a:	6823      	ldr	r3, [r4, #0]
 800d17c:	4639      	mov	r1, r7
 800d17e:	4630      	mov	r0, r6
 800d180:	eb04 0903 	add.w	r9, r4, r3
 800d184:	f000 fdfc 	bl	800dd80 <_sbrk_r>
 800d188:	4581      	cmp	r9, r0
 800d18a:	d142      	bne.n	800d212 <_malloc_r+0xea>
 800d18c:	6821      	ldr	r1, [r4, #0]
 800d18e:	1a6d      	subs	r5, r5, r1
 800d190:	4629      	mov	r1, r5
 800d192:	4630      	mov	r0, r6
 800d194:	f7ff ffa6 	bl	800d0e4 <sbrk_aligned>
 800d198:	3001      	adds	r0, #1
 800d19a:	d03a      	beq.n	800d212 <_malloc_r+0xea>
 800d19c:	6823      	ldr	r3, [r4, #0]
 800d19e:	442b      	add	r3, r5
 800d1a0:	6023      	str	r3, [r4, #0]
 800d1a2:	f8d8 3000 	ldr.w	r3, [r8]
 800d1a6:	685a      	ldr	r2, [r3, #4]
 800d1a8:	bb62      	cbnz	r2, 800d204 <_malloc_r+0xdc>
 800d1aa:	f8c8 7000 	str.w	r7, [r8]
 800d1ae:	e00f      	b.n	800d1d0 <_malloc_r+0xa8>
 800d1b0:	6822      	ldr	r2, [r4, #0]
 800d1b2:	1b52      	subs	r2, r2, r5
 800d1b4:	d420      	bmi.n	800d1f8 <_malloc_r+0xd0>
 800d1b6:	2a0b      	cmp	r2, #11
 800d1b8:	d917      	bls.n	800d1ea <_malloc_r+0xc2>
 800d1ba:	1961      	adds	r1, r4, r5
 800d1bc:	42a3      	cmp	r3, r4
 800d1be:	6025      	str	r5, [r4, #0]
 800d1c0:	bf18      	it	ne
 800d1c2:	6059      	strne	r1, [r3, #4]
 800d1c4:	6863      	ldr	r3, [r4, #4]
 800d1c6:	bf08      	it	eq
 800d1c8:	f8c8 1000 	streq.w	r1, [r8]
 800d1cc:	5162      	str	r2, [r4, r5]
 800d1ce:	604b      	str	r3, [r1, #4]
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	f000 f82f 	bl	800d234 <__malloc_unlock>
 800d1d6:	f104 000b 	add.w	r0, r4, #11
 800d1da:	1d23      	adds	r3, r4, #4
 800d1dc:	f020 0007 	bic.w	r0, r0, #7
 800d1e0:	1ac2      	subs	r2, r0, r3
 800d1e2:	bf1c      	itt	ne
 800d1e4:	1a1b      	subne	r3, r3, r0
 800d1e6:	50a3      	strne	r3, [r4, r2]
 800d1e8:	e7af      	b.n	800d14a <_malloc_r+0x22>
 800d1ea:	6862      	ldr	r2, [r4, #4]
 800d1ec:	42a3      	cmp	r3, r4
 800d1ee:	bf0c      	ite	eq
 800d1f0:	f8c8 2000 	streq.w	r2, [r8]
 800d1f4:	605a      	strne	r2, [r3, #4]
 800d1f6:	e7eb      	b.n	800d1d0 <_malloc_r+0xa8>
 800d1f8:	4623      	mov	r3, r4
 800d1fa:	6864      	ldr	r4, [r4, #4]
 800d1fc:	e7ae      	b.n	800d15c <_malloc_r+0x34>
 800d1fe:	463c      	mov	r4, r7
 800d200:	687f      	ldr	r7, [r7, #4]
 800d202:	e7b6      	b.n	800d172 <_malloc_r+0x4a>
 800d204:	461a      	mov	r2, r3
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	42a3      	cmp	r3, r4
 800d20a:	d1fb      	bne.n	800d204 <_malloc_r+0xdc>
 800d20c:	2300      	movs	r3, #0
 800d20e:	6053      	str	r3, [r2, #4]
 800d210:	e7de      	b.n	800d1d0 <_malloc_r+0xa8>
 800d212:	230c      	movs	r3, #12
 800d214:	6033      	str	r3, [r6, #0]
 800d216:	4630      	mov	r0, r6
 800d218:	f000 f80c 	bl	800d234 <__malloc_unlock>
 800d21c:	e794      	b.n	800d148 <_malloc_r+0x20>
 800d21e:	6005      	str	r5, [r0, #0]
 800d220:	e7d6      	b.n	800d1d0 <_malloc_r+0xa8>
 800d222:	bf00      	nop
 800d224:	20002164 	.word	0x20002164

0800d228 <__malloc_lock>:
 800d228:	4801      	ldr	r0, [pc, #4]	@ (800d230 <__malloc_lock+0x8>)
 800d22a:	f7ff b8ba 	b.w	800c3a2 <__retarget_lock_acquire_recursive>
 800d22e:	bf00      	nop
 800d230:	2000215c 	.word	0x2000215c

0800d234 <__malloc_unlock>:
 800d234:	4801      	ldr	r0, [pc, #4]	@ (800d23c <__malloc_unlock+0x8>)
 800d236:	f7ff b8b5 	b.w	800c3a4 <__retarget_lock_release_recursive>
 800d23a:	bf00      	nop
 800d23c:	2000215c 	.word	0x2000215c

0800d240 <_Balloc>:
 800d240:	b570      	push	{r4, r5, r6, lr}
 800d242:	69c6      	ldr	r6, [r0, #28]
 800d244:	4604      	mov	r4, r0
 800d246:	460d      	mov	r5, r1
 800d248:	b976      	cbnz	r6, 800d268 <_Balloc+0x28>
 800d24a:	2010      	movs	r0, #16
 800d24c:	f7ff ff42 	bl	800d0d4 <malloc>
 800d250:	4602      	mov	r2, r0
 800d252:	61e0      	str	r0, [r4, #28]
 800d254:	b920      	cbnz	r0, 800d260 <_Balloc+0x20>
 800d256:	4b18      	ldr	r3, [pc, #96]	@ (800d2b8 <_Balloc+0x78>)
 800d258:	4818      	ldr	r0, [pc, #96]	@ (800d2bc <_Balloc+0x7c>)
 800d25a:	216b      	movs	r1, #107	@ 0x6b
 800d25c:	f000 fdae 	bl	800ddbc <__assert_func>
 800d260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d264:	6006      	str	r6, [r0, #0]
 800d266:	60c6      	str	r6, [r0, #12]
 800d268:	69e6      	ldr	r6, [r4, #28]
 800d26a:	68f3      	ldr	r3, [r6, #12]
 800d26c:	b183      	cbz	r3, 800d290 <_Balloc+0x50>
 800d26e:	69e3      	ldr	r3, [r4, #28]
 800d270:	68db      	ldr	r3, [r3, #12]
 800d272:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d276:	b9b8      	cbnz	r0, 800d2a8 <_Balloc+0x68>
 800d278:	2101      	movs	r1, #1
 800d27a:	fa01 f605 	lsl.w	r6, r1, r5
 800d27e:	1d72      	adds	r2, r6, #5
 800d280:	0092      	lsls	r2, r2, #2
 800d282:	4620      	mov	r0, r4
 800d284:	f000 fdb8 	bl	800ddf8 <_calloc_r>
 800d288:	b160      	cbz	r0, 800d2a4 <_Balloc+0x64>
 800d28a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d28e:	e00e      	b.n	800d2ae <_Balloc+0x6e>
 800d290:	2221      	movs	r2, #33	@ 0x21
 800d292:	2104      	movs	r1, #4
 800d294:	4620      	mov	r0, r4
 800d296:	f000 fdaf 	bl	800ddf8 <_calloc_r>
 800d29a:	69e3      	ldr	r3, [r4, #28]
 800d29c:	60f0      	str	r0, [r6, #12]
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d1e4      	bne.n	800d26e <_Balloc+0x2e>
 800d2a4:	2000      	movs	r0, #0
 800d2a6:	bd70      	pop	{r4, r5, r6, pc}
 800d2a8:	6802      	ldr	r2, [r0, #0]
 800d2aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d2b4:	e7f7      	b.n	800d2a6 <_Balloc+0x66>
 800d2b6:	bf00      	nop
 800d2b8:	0800ea25 	.word	0x0800ea25
 800d2bc:	0800eaa5 	.word	0x0800eaa5

0800d2c0 <_Bfree>:
 800d2c0:	b570      	push	{r4, r5, r6, lr}
 800d2c2:	69c6      	ldr	r6, [r0, #28]
 800d2c4:	4605      	mov	r5, r0
 800d2c6:	460c      	mov	r4, r1
 800d2c8:	b976      	cbnz	r6, 800d2e8 <_Bfree+0x28>
 800d2ca:	2010      	movs	r0, #16
 800d2cc:	f7ff ff02 	bl	800d0d4 <malloc>
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	61e8      	str	r0, [r5, #28]
 800d2d4:	b920      	cbnz	r0, 800d2e0 <_Bfree+0x20>
 800d2d6:	4b09      	ldr	r3, [pc, #36]	@ (800d2fc <_Bfree+0x3c>)
 800d2d8:	4809      	ldr	r0, [pc, #36]	@ (800d300 <_Bfree+0x40>)
 800d2da:	218f      	movs	r1, #143	@ 0x8f
 800d2dc:	f000 fd6e 	bl	800ddbc <__assert_func>
 800d2e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2e4:	6006      	str	r6, [r0, #0]
 800d2e6:	60c6      	str	r6, [r0, #12]
 800d2e8:	b13c      	cbz	r4, 800d2fa <_Bfree+0x3a>
 800d2ea:	69eb      	ldr	r3, [r5, #28]
 800d2ec:	6862      	ldr	r2, [r4, #4]
 800d2ee:	68db      	ldr	r3, [r3, #12]
 800d2f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d2f4:	6021      	str	r1, [r4, #0]
 800d2f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d2fa:	bd70      	pop	{r4, r5, r6, pc}
 800d2fc:	0800ea25 	.word	0x0800ea25
 800d300:	0800eaa5 	.word	0x0800eaa5

0800d304 <__multadd>:
 800d304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d308:	690d      	ldr	r5, [r1, #16]
 800d30a:	4607      	mov	r7, r0
 800d30c:	460c      	mov	r4, r1
 800d30e:	461e      	mov	r6, r3
 800d310:	f101 0c14 	add.w	ip, r1, #20
 800d314:	2000      	movs	r0, #0
 800d316:	f8dc 3000 	ldr.w	r3, [ip]
 800d31a:	b299      	uxth	r1, r3
 800d31c:	fb02 6101 	mla	r1, r2, r1, r6
 800d320:	0c1e      	lsrs	r6, r3, #16
 800d322:	0c0b      	lsrs	r3, r1, #16
 800d324:	fb02 3306 	mla	r3, r2, r6, r3
 800d328:	b289      	uxth	r1, r1
 800d32a:	3001      	adds	r0, #1
 800d32c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d330:	4285      	cmp	r5, r0
 800d332:	f84c 1b04 	str.w	r1, [ip], #4
 800d336:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d33a:	dcec      	bgt.n	800d316 <__multadd+0x12>
 800d33c:	b30e      	cbz	r6, 800d382 <__multadd+0x7e>
 800d33e:	68a3      	ldr	r3, [r4, #8]
 800d340:	42ab      	cmp	r3, r5
 800d342:	dc19      	bgt.n	800d378 <__multadd+0x74>
 800d344:	6861      	ldr	r1, [r4, #4]
 800d346:	4638      	mov	r0, r7
 800d348:	3101      	adds	r1, #1
 800d34a:	f7ff ff79 	bl	800d240 <_Balloc>
 800d34e:	4680      	mov	r8, r0
 800d350:	b928      	cbnz	r0, 800d35e <__multadd+0x5a>
 800d352:	4602      	mov	r2, r0
 800d354:	4b0c      	ldr	r3, [pc, #48]	@ (800d388 <__multadd+0x84>)
 800d356:	480d      	ldr	r0, [pc, #52]	@ (800d38c <__multadd+0x88>)
 800d358:	21ba      	movs	r1, #186	@ 0xba
 800d35a:	f000 fd2f 	bl	800ddbc <__assert_func>
 800d35e:	6922      	ldr	r2, [r4, #16]
 800d360:	3202      	adds	r2, #2
 800d362:	f104 010c 	add.w	r1, r4, #12
 800d366:	0092      	lsls	r2, r2, #2
 800d368:	300c      	adds	r0, #12
 800d36a:	f000 fd19 	bl	800dda0 <memcpy>
 800d36e:	4621      	mov	r1, r4
 800d370:	4638      	mov	r0, r7
 800d372:	f7ff ffa5 	bl	800d2c0 <_Bfree>
 800d376:	4644      	mov	r4, r8
 800d378:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d37c:	3501      	adds	r5, #1
 800d37e:	615e      	str	r6, [r3, #20]
 800d380:	6125      	str	r5, [r4, #16]
 800d382:	4620      	mov	r0, r4
 800d384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d388:	0800ea94 	.word	0x0800ea94
 800d38c:	0800eaa5 	.word	0x0800eaa5

0800d390 <__hi0bits>:
 800d390:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d394:	4603      	mov	r3, r0
 800d396:	bf36      	itet	cc
 800d398:	0403      	lslcc	r3, r0, #16
 800d39a:	2000      	movcs	r0, #0
 800d39c:	2010      	movcc	r0, #16
 800d39e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d3a2:	bf3c      	itt	cc
 800d3a4:	021b      	lslcc	r3, r3, #8
 800d3a6:	3008      	addcc	r0, #8
 800d3a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d3ac:	bf3c      	itt	cc
 800d3ae:	011b      	lslcc	r3, r3, #4
 800d3b0:	3004      	addcc	r0, #4
 800d3b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d3b6:	bf3c      	itt	cc
 800d3b8:	009b      	lslcc	r3, r3, #2
 800d3ba:	3002      	addcc	r0, #2
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	db05      	blt.n	800d3cc <__hi0bits+0x3c>
 800d3c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d3c4:	f100 0001 	add.w	r0, r0, #1
 800d3c8:	bf08      	it	eq
 800d3ca:	2020      	moveq	r0, #32
 800d3cc:	4770      	bx	lr

0800d3ce <__lo0bits>:
 800d3ce:	6803      	ldr	r3, [r0, #0]
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	f013 0007 	ands.w	r0, r3, #7
 800d3d6:	d00b      	beq.n	800d3f0 <__lo0bits+0x22>
 800d3d8:	07d9      	lsls	r1, r3, #31
 800d3da:	d421      	bmi.n	800d420 <__lo0bits+0x52>
 800d3dc:	0798      	lsls	r0, r3, #30
 800d3de:	bf49      	itett	mi
 800d3e0:	085b      	lsrmi	r3, r3, #1
 800d3e2:	089b      	lsrpl	r3, r3, #2
 800d3e4:	2001      	movmi	r0, #1
 800d3e6:	6013      	strmi	r3, [r2, #0]
 800d3e8:	bf5c      	itt	pl
 800d3ea:	6013      	strpl	r3, [r2, #0]
 800d3ec:	2002      	movpl	r0, #2
 800d3ee:	4770      	bx	lr
 800d3f0:	b299      	uxth	r1, r3
 800d3f2:	b909      	cbnz	r1, 800d3f8 <__lo0bits+0x2a>
 800d3f4:	0c1b      	lsrs	r3, r3, #16
 800d3f6:	2010      	movs	r0, #16
 800d3f8:	b2d9      	uxtb	r1, r3
 800d3fa:	b909      	cbnz	r1, 800d400 <__lo0bits+0x32>
 800d3fc:	3008      	adds	r0, #8
 800d3fe:	0a1b      	lsrs	r3, r3, #8
 800d400:	0719      	lsls	r1, r3, #28
 800d402:	bf04      	itt	eq
 800d404:	091b      	lsreq	r3, r3, #4
 800d406:	3004      	addeq	r0, #4
 800d408:	0799      	lsls	r1, r3, #30
 800d40a:	bf04      	itt	eq
 800d40c:	089b      	lsreq	r3, r3, #2
 800d40e:	3002      	addeq	r0, #2
 800d410:	07d9      	lsls	r1, r3, #31
 800d412:	d403      	bmi.n	800d41c <__lo0bits+0x4e>
 800d414:	085b      	lsrs	r3, r3, #1
 800d416:	f100 0001 	add.w	r0, r0, #1
 800d41a:	d003      	beq.n	800d424 <__lo0bits+0x56>
 800d41c:	6013      	str	r3, [r2, #0]
 800d41e:	4770      	bx	lr
 800d420:	2000      	movs	r0, #0
 800d422:	4770      	bx	lr
 800d424:	2020      	movs	r0, #32
 800d426:	4770      	bx	lr

0800d428 <__i2b>:
 800d428:	b510      	push	{r4, lr}
 800d42a:	460c      	mov	r4, r1
 800d42c:	2101      	movs	r1, #1
 800d42e:	f7ff ff07 	bl	800d240 <_Balloc>
 800d432:	4602      	mov	r2, r0
 800d434:	b928      	cbnz	r0, 800d442 <__i2b+0x1a>
 800d436:	4b05      	ldr	r3, [pc, #20]	@ (800d44c <__i2b+0x24>)
 800d438:	4805      	ldr	r0, [pc, #20]	@ (800d450 <__i2b+0x28>)
 800d43a:	f240 1145 	movw	r1, #325	@ 0x145
 800d43e:	f000 fcbd 	bl	800ddbc <__assert_func>
 800d442:	2301      	movs	r3, #1
 800d444:	6144      	str	r4, [r0, #20]
 800d446:	6103      	str	r3, [r0, #16]
 800d448:	bd10      	pop	{r4, pc}
 800d44a:	bf00      	nop
 800d44c:	0800ea94 	.word	0x0800ea94
 800d450:	0800eaa5 	.word	0x0800eaa5

0800d454 <__multiply>:
 800d454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d458:	4614      	mov	r4, r2
 800d45a:	690a      	ldr	r2, [r1, #16]
 800d45c:	6923      	ldr	r3, [r4, #16]
 800d45e:	429a      	cmp	r2, r3
 800d460:	bfa8      	it	ge
 800d462:	4623      	movge	r3, r4
 800d464:	460f      	mov	r7, r1
 800d466:	bfa4      	itt	ge
 800d468:	460c      	movge	r4, r1
 800d46a:	461f      	movge	r7, r3
 800d46c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d470:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d474:	68a3      	ldr	r3, [r4, #8]
 800d476:	6861      	ldr	r1, [r4, #4]
 800d478:	eb0a 0609 	add.w	r6, sl, r9
 800d47c:	42b3      	cmp	r3, r6
 800d47e:	b085      	sub	sp, #20
 800d480:	bfb8      	it	lt
 800d482:	3101      	addlt	r1, #1
 800d484:	f7ff fedc 	bl	800d240 <_Balloc>
 800d488:	b930      	cbnz	r0, 800d498 <__multiply+0x44>
 800d48a:	4602      	mov	r2, r0
 800d48c:	4b44      	ldr	r3, [pc, #272]	@ (800d5a0 <__multiply+0x14c>)
 800d48e:	4845      	ldr	r0, [pc, #276]	@ (800d5a4 <__multiply+0x150>)
 800d490:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d494:	f000 fc92 	bl	800ddbc <__assert_func>
 800d498:	f100 0514 	add.w	r5, r0, #20
 800d49c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d4a0:	462b      	mov	r3, r5
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	4543      	cmp	r3, r8
 800d4a6:	d321      	bcc.n	800d4ec <__multiply+0x98>
 800d4a8:	f107 0114 	add.w	r1, r7, #20
 800d4ac:	f104 0214 	add.w	r2, r4, #20
 800d4b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d4b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d4b8:	9302      	str	r3, [sp, #8]
 800d4ba:	1b13      	subs	r3, r2, r4
 800d4bc:	3b15      	subs	r3, #21
 800d4be:	f023 0303 	bic.w	r3, r3, #3
 800d4c2:	3304      	adds	r3, #4
 800d4c4:	f104 0715 	add.w	r7, r4, #21
 800d4c8:	42ba      	cmp	r2, r7
 800d4ca:	bf38      	it	cc
 800d4cc:	2304      	movcc	r3, #4
 800d4ce:	9301      	str	r3, [sp, #4]
 800d4d0:	9b02      	ldr	r3, [sp, #8]
 800d4d2:	9103      	str	r1, [sp, #12]
 800d4d4:	428b      	cmp	r3, r1
 800d4d6:	d80c      	bhi.n	800d4f2 <__multiply+0x9e>
 800d4d8:	2e00      	cmp	r6, #0
 800d4da:	dd03      	ble.n	800d4e4 <__multiply+0x90>
 800d4dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d05b      	beq.n	800d59c <__multiply+0x148>
 800d4e4:	6106      	str	r6, [r0, #16]
 800d4e6:	b005      	add	sp, #20
 800d4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ec:	f843 2b04 	str.w	r2, [r3], #4
 800d4f0:	e7d8      	b.n	800d4a4 <__multiply+0x50>
 800d4f2:	f8b1 a000 	ldrh.w	sl, [r1]
 800d4f6:	f1ba 0f00 	cmp.w	sl, #0
 800d4fa:	d024      	beq.n	800d546 <__multiply+0xf2>
 800d4fc:	f104 0e14 	add.w	lr, r4, #20
 800d500:	46a9      	mov	r9, r5
 800d502:	f04f 0c00 	mov.w	ip, #0
 800d506:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d50a:	f8d9 3000 	ldr.w	r3, [r9]
 800d50e:	fa1f fb87 	uxth.w	fp, r7
 800d512:	b29b      	uxth	r3, r3
 800d514:	fb0a 330b 	mla	r3, sl, fp, r3
 800d518:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d51c:	f8d9 7000 	ldr.w	r7, [r9]
 800d520:	4463      	add	r3, ip
 800d522:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d526:	fb0a c70b 	mla	r7, sl, fp, ip
 800d52a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d52e:	b29b      	uxth	r3, r3
 800d530:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d534:	4572      	cmp	r2, lr
 800d536:	f849 3b04 	str.w	r3, [r9], #4
 800d53a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d53e:	d8e2      	bhi.n	800d506 <__multiply+0xb2>
 800d540:	9b01      	ldr	r3, [sp, #4]
 800d542:	f845 c003 	str.w	ip, [r5, r3]
 800d546:	9b03      	ldr	r3, [sp, #12]
 800d548:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d54c:	3104      	adds	r1, #4
 800d54e:	f1b9 0f00 	cmp.w	r9, #0
 800d552:	d021      	beq.n	800d598 <__multiply+0x144>
 800d554:	682b      	ldr	r3, [r5, #0]
 800d556:	f104 0c14 	add.w	ip, r4, #20
 800d55a:	46ae      	mov	lr, r5
 800d55c:	f04f 0a00 	mov.w	sl, #0
 800d560:	f8bc b000 	ldrh.w	fp, [ip]
 800d564:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d568:	fb09 770b 	mla	r7, r9, fp, r7
 800d56c:	4457      	add	r7, sl
 800d56e:	b29b      	uxth	r3, r3
 800d570:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d574:	f84e 3b04 	str.w	r3, [lr], #4
 800d578:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d57c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d580:	f8be 3000 	ldrh.w	r3, [lr]
 800d584:	fb09 330a 	mla	r3, r9, sl, r3
 800d588:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d58c:	4562      	cmp	r2, ip
 800d58e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d592:	d8e5      	bhi.n	800d560 <__multiply+0x10c>
 800d594:	9f01      	ldr	r7, [sp, #4]
 800d596:	51eb      	str	r3, [r5, r7]
 800d598:	3504      	adds	r5, #4
 800d59a:	e799      	b.n	800d4d0 <__multiply+0x7c>
 800d59c:	3e01      	subs	r6, #1
 800d59e:	e79b      	b.n	800d4d8 <__multiply+0x84>
 800d5a0:	0800ea94 	.word	0x0800ea94
 800d5a4:	0800eaa5 	.word	0x0800eaa5

0800d5a8 <__pow5mult>:
 800d5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5ac:	4615      	mov	r5, r2
 800d5ae:	f012 0203 	ands.w	r2, r2, #3
 800d5b2:	4607      	mov	r7, r0
 800d5b4:	460e      	mov	r6, r1
 800d5b6:	d007      	beq.n	800d5c8 <__pow5mult+0x20>
 800d5b8:	4c25      	ldr	r4, [pc, #148]	@ (800d650 <__pow5mult+0xa8>)
 800d5ba:	3a01      	subs	r2, #1
 800d5bc:	2300      	movs	r3, #0
 800d5be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d5c2:	f7ff fe9f 	bl	800d304 <__multadd>
 800d5c6:	4606      	mov	r6, r0
 800d5c8:	10ad      	asrs	r5, r5, #2
 800d5ca:	d03d      	beq.n	800d648 <__pow5mult+0xa0>
 800d5cc:	69fc      	ldr	r4, [r7, #28]
 800d5ce:	b97c      	cbnz	r4, 800d5f0 <__pow5mult+0x48>
 800d5d0:	2010      	movs	r0, #16
 800d5d2:	f7ff fd7f 	bl	800d0d4 <malloc>
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	61f8      	str	r0, [r7, #28]
 800d5da:	b928      	cbnz	r0, 800d5e8 <__pow5mult+0x40>
 800d5dc:	4b1d      	ldr	r3, [pc, #116]	@ (800d654 <__pow5mult+0xac>)
 800d5de:	481e      	ldr	r0, [pc, #120]	@ (800d658 <__pow5mult+0xb0>)
 800d5e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d5e4:	f000 fbea 	bl	800ddbc <__assert_func>
 800d5e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d5ec:	6004      	str	r4, [r0, #0]
 800d5ee:	60c4      	str	r4, [r0, #12]
 800d5f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d5f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d5f8:	b94c      	cbnz	r4, 800d60e <__pow5mult+0x66>
 800d5fa:	f240 2171 	movw	r1, #625	@ 0x271
 800d5fe:	4638      	mov	r0, r7
 800d600:	f7ff ff12 	bl	800d428 <__i2b>
 800d604:	2300      	movs	r3, #0
 800d606:	f8c8 0008 	str.w	r0, [r8, #8]
 800d60a:	4604      	mov	r4, r0
 800d60c:	6003      	str	r3, [r0, #0]
 800d60e:	f04f 0900 	mov.w	r9, #0
 800d612:	07eb      	lsls	r3, r5, #31
 800d614:	d50a      	bpl.n	800d62c <__pow5mult+0x84>
 800d616:	4631      	mov	r1, r6
 800d618:	4622      	mov	r2, r4
 800d61a:	4638      	mov	r0, r7
 800d61c:	f7ff ff1a 	bl	800d454 <__multiply>
 800d620:	4631      	mov	r1, r6
 800d622:	4680      	mov	r8, r0
 800d624:	4638      	mov	r0, r7
 800d626:	f7ff fe4b 	bl	800d2c0 <_Bfree>
 800d62a:	4646      	mov	r6, r8
 800d62c:	106d      	asrs	r5, r5, #1
 800d62e:	d00b      	beq.n	800d648 <__pow5mult+0xa0>
 800d630:	6820      	ldr	r0, [r4, #0]
 800d632:	b938      	cbnz	r0, 800d644 <__pow5mult+0x9c>
 800d634:	4622      	mov	r2, r4
 800d636:	4621      	mov	r1, r4
 800d638:	4638      	mov	r0, r7
 800d63a:	f7ff ff0b 	bl	800d454 <__multiply>
 800d63e:	6020      	str	r0, [r4, #0]
 800d640:	f8c0 9000 	str.w	r9, [r0]
 800d644:	4604      	mov	r4, r0
 800d646:	e7e4      	b.n	800d612 <__pow5mult+0x6a>
 800d648:	4630      	mov	r0, r6
 800d64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d64e:	bf00      	nop
 800d650:	0800eb00 	.word	0x0800eb00
 800d654:	0800ea25 	.word	0x0800ea25
 800d658:	0800eaa5 	.word	0x0800eaa5

0800d65c <__lshift>:
 800d65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d660:	460c      	mov	r4, r1
 800d662:	6849      	ldr	r1, [r1, #4]
 800d664:	6923      	ldr	r3, [r4, #16]
 800d666:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d66a:	68a3      	ldr	r3, [r4, #8]
 800d66c:	4607      	mov	r7, r0
 800d66e:	4691      	mov	r9, r2
 800d670:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d674:	f108 0601 	add.w	r6, r8, #1
 800d678:	42b3      	cmp	r3, r6
 800d67a:	db0b      	blt.n	800d694 <__lshift+0x38>
 800d67c:	4638      	mov	r0, r7
 800d67e:	f7ff fddf 	bl	800d240 <_Balloc>
 800d682:	4605      	mov	r5, r0
 800d684:	b948      	cbnz	r0, 800d69a <__lshift+0x3e>
 800d686:	4602      	mov	r2, r0
 800d688:	4b28      	ldr	r3, [pc, #160]	@ (800d72c <__lshift+0xd0>)
 800d68a:	4829      	ldr	r0, [pc, #164]	@ (800d730 <__lshift+0xd4>)
 800d68c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d690:	f000 fb94 	bl	800ddbc <__assert_func>
 800d694:	3101      	adds	r1, #1
 800d696:	005b      	lsls	r3, r3, #1
 800d698:	e7ee      	b.n	800d678 <__lshift+0x1c>
 800d69a:	2300      	movs	r3, #0
 800d69c:	f100 0114 	add.w	r1, r0, #20
 800d6a0:	f100 0210 	add.w	r2, r0, #16
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	4553      	cmp	r3, sl
 800d6a8:	db33      	blt.n	800d712 <__lshift+0xb6>
 800d6aa:	6920      	ldr	r0, [r4, #16]
 800d6ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d6b0:	f104 0314 	add.w	r3, r4, #20
 800d6b4:	f019 091f 	ands.w	r9, r9, #31
 800d6b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d6bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d6c0:	d02b      	beq.n	800d71a <__lshift+0xbe>
 800d6c2:	f1c9 0e20 	rsb	lr, r9, #32
 800d6c6:	468a      	mov	sl, r1
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	6818      	ldr	r0, [r3, #0]
 800d6cc:	fa00 f009 	lsl.w	r0, r0, r9
 800d6d0:	4310      	orrs	r0, r2
 800d6d2:	f84a 0b04 	str.w	r0, [sl], #4
 800d6d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6da:	459c      	cmp	ip, r3
 800d6dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d6e0:	d8f3      	bhi.n	800d6ca <__lshift+0x6e>
 800d6e2:	ebac 0304 	sub.w	r3, ip, r4
 800d6e6:	3b15      	subs	r3, #21
 800d6e8:	f023 0303 	bic.w	r3, r3, #3
 800d6ec:	3304      	adds	r3, #4
 800d6ee:	f104 0015 	add.w	r0, r4, #21
 800d6f2:	4584      	cmp	ip, r0
 800d6f4:	bf38      	it	cc
 800d6f6:	2304      	movcc	r3, #4
 800d6f8:	50ca      	str	r2, [r1, r3]
 800d6fa:	b10a      	cbz	r2, 800d700 <__lshift+0xa4>
 800d6fc:	f108 0602 	add.w	r6, r8, #2
 800d700:	3e01      	subs	r6, #1
 800d702:	4638      	mov	r0, r7
 800d704:	612e      	str	r6, [r5, #16]
 800d706:	4621      	mov	r1, r4
 800d708:	f7ff fdda 	bl	800d2c0 <_Bfree>
 800d70c:	4628      	mov	r0, r5
 800d70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d712:	f842 0f04 	str.w	r0, [r2, #4]!
 800d716:	3301      	adds	r3, #1
 800d718:	e7c5      	b.n	800d6a6 <__lshift+0x4a>
 800d71a:	3904      	subs	r1, #4
 800d71c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d720:	f841 2f04 	str.w	r2, [r1, #4]!
 800d724:	459c      	cmp	ip, r3
 800d726:	d8f9      	bhi.n	800d71c <__lshift+0xc0>
 800d728:	e7ea      	b.n	800d700 <__lshift+0xa4>
 800d72a:	bf00      	nop
 800d72c:	0800ea94 	.word	0x0800ea94
 800d730:	0800eaa5 	.word	0x0800eaa5

0800d734 <__mcmp>:
 800d734:	690a      	ldr	r2, [r1, #16]
 800d736:	4603      	mov	r3, r0
 800d738:	6900      	ldr	r0, [r0, #16]
 800d73a:	1a80      	subs	r0, r0, r2
 800d73c:	b530      	push	{r4, r5, lr}
 800d73e:	d10e      	bne.n	800d75e <__mcmp+0x2a>
 800d740:	3314      	adds	r3, #20
 800d742:	3114      	adds	r1, #20
 800d744:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d748:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d74c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d750:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d754:	4295      	cmp	r5, r2
 800d756:	d003      	beq.n	800d760 <__mcmp+0x2c>
 800d758:	d205      	bcs.n	800d766 <__mcmp+0x32>
 800d75a:	f04f 30ff 	mov.w	r0, #4294967295
 800d75e:	bd30      	pop	{r4, r5, pc}
 800d760:	42a3      	cmp	r3, r4
 800d762:	d3f3      	bcc.n	800d74c <__mcmp+0x18>
 800d764:	e7fb      	b.n	800d75e <__mcmp+0x2a>
 800d766:	2001      	movs	r0, #1
 800d768:	e7f9      	b.n	800d75e <__mcmp+0x2a>
	...

0800d76c <__mdiff>:
 800d76c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d770:	4689      	mov	r9, r1
 800d772:	4606      	mov	r6, r0
 800d774:	4611      	mov	r1, r2
 800d776:	4648      	mov	r0, r9
 800d778:	4614      	mov	r4, r2
 800d77a:	f7ff ffdb 	bl	800d734 <__mcmp>
 800d77e:	1e05      	subs	r5, r0, #0
 800d780:	d112      	bne.n	800d7a8 <__mdiff+0x3c>
 800d782:	4629      	mov	r1, r5
 800d784:	4630      	mov	r0, r6
 800d786:	f7ff fd5b 	bl	800d240 <_Balloc>
 800d78a:	4602      	mov	r2, r0
 800d78c:	b928      	cbnz	r0, 800d79a <__mdiff+0x2e>
 800d78e:	4b3f      	ldr	r3, [pc, #252]	@ (800d88c <__mdiff+0x120>)
 800d790:	f240 2137 	movw	r1, #567	@ 0x237
 800d794:	483e      	ldr	r0, [pc, #248]	@ (800d890 <__mdiff+0x124>)
 800d796:	f000 fb11 	bl	800ddbc <__assert_func>
 800d79a:	2301      	movs	r3, #1
 800d79c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d7a0:	4610      	mov	r0, r2
 800d7a2:	b003      	add	sp, #12
 800d7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7a8:	bfbc      	itt	lt
 800d7aa:	464b      	movlt	r3, r9
 800d7ac:	46a1      	movlt	r9, r4
 800d7ae:	4630      	mov	r0, r6
 800d7b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d7b4:	bfba      	itte	lt
 800d7b6:	461c      	movlt	r4, r3
 800d7b8:	2501      	movlt	r5, #1
 800d7ba:	2500      	movge	r5, #0
 800d7bc:	f7ff fd40 	bl	800d240 <_Balloc>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	b918      	cbnz	r0, 800d7cc <__mdiff+0x60>
 800d7c4:	4b31      	ldr	r3, [pc, #196]	@ (800d88c <__mdiff+0x120>)
 800d7c6:	f240 2145 	movw	r1, #581	@ 0x245
 800d7ca:	e7e3      	b.n	800d794 <__mdiff+0x28>
 800d7cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d7d0:	6926      	ldr	r6, [r4, #16]
 800d7d2:	60c5      	str	r5, [r0, #12]
 800d7d4:	f109 0310 	add.w	r3, r9, #16
 800d7d8:	f109 0514 	add.w	r5, r9, #20
 800d7dc:	f104 0e14 	add.w	lr, r4, #20
 800d7e0:	f100 0b14 	add.w	fp, r0, #20
 800d7e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d7e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d7ec:	9301      	str	r3, [sp, #4]
 800d7ee:	46d9      	mov	r9, fp
 800d7f0:	f04f 0c00 	mov.w	ip, #0
 800d7f4:	9b01      	ldr	r3, [sp, #4]
 800d7f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d7fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d7fe:	9301      	str	r3, [sp, #4]
 800d800:	fa1f f38a 	uxth.w	r3, sl
 800d804:	4619      	mov	r1, r3
 800d806:	b283      	uxth	r3, r0
 800d808:	1acb      	subs	r3, r1, r3
 800d80a:	0c00      	lsrs	r0, r0, #16
 800d80c:	4463      	add	r3, ip
 800d80e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d812:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d816:	b29b      	uxth	r3, r3
 800d818:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d81c:	4576      	cmp	r6, lr
 800d81e:	f849 3b04 	str.w	r3, [r9], #4
 800d822:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d826:	d8e5      	bhi.n	800d7f4 <__mdiff+0x88>
 800d828:	1b33      	subs	r3, r6, r4
 800d82a:	3b15      	subs	r3, #21
 800d82c:	f023 0303 	bic.w	r3, r3, #3
 800d830:	3415      	adds	r4, #21
 800d832:	3304      	adds	r3, #4
 800d834:	42a6      	cmp	r6, r4
 800d836:	bf38      	it	cc
 800d838:	2304      	movcc	r3, #4
 800d83a:	441d      	add	r5, r3
 800d83c:	445b      	add	r3, fp
 800d83e:	461e      	mov	r6, r3
 800d840:	462c      	mov	r4, r5
 800d842:	4544      	cmp	r4, r8
 800d844:	d30e      	bcc.n	800d864 <__mdiff+0xf8>
 800d846:	f108 0103 	add.w	r1, r8, #3
 800d84a:	1b49      	subs	r1, r1, r5
 800d84c:	f021 0103 	bic.w	r1, r1, #3
 800d850:	3d03      	subs	r5, #3
 800d852:	45a8      	cmp	r8, r5
 800d854:	bf38      	it	cc
 800d856:	2100      	movcc	r1, #0
 800d858:	440b      	add	r3, r1
 800d85a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d85e:	b191      	cbz	r1, 800d886 <__mdiff+0x11a>
 800d860:	6117      	str	r7, [r2, #16]
 800d862:	e79d      	b.n	800d7a0 <__mdiff+0x34>
 800d864:	f854 1b04 	ldr.w	r1, [r4], #4
 800d868:	46e6      	mov	lr, ip
 800d86a:	0c08      	lsrs	r0, r1, #16
 800d86c:	fa1c fc81 	uxtah	ip, ip, r1
 800d870:	4471      	add	r1, lr
 800d872:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d876:	b289      	uxth	r1, r1
 800d878:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d87c:	f846 1b04 	str.w	r1, [r6], #4
 800d880:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d884:	e7dd      	b.n	800d842 <__mdiff+0xd6>
 800d886:	3f01      	subs	r7, #1
 800d888:	e7e7      	b.n	800d85a <__mdiff+0xee>
 800d88a:	bf00      	nop
 800d88c:	0800ea94 	.word	0x0800ea94
 800d890:	0800eaa5 	.word	0x0800eaa5

0800d894 <__d2b>:
 800d894:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d898:	460f      	mov	r7, r1
 800d89a:	2101      	movs	r1, #1
 800d89c:	ec59 8b10 	vmov	r8, r9, d0
 800d8a0:	4616      	mov	r6, r2
 800d8a2:	f7ff fccd 	bl	800d240 <_Balloc>
 800d8a6:	4604      	mov	r4, r0
 800d8a8:	b930      	cbnz	r0, 800d8b8 <__d2b+0x24>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	4b23      	ldr	r3, [pc, #140]	@ (800d93c <__d2b+0xa8>)
 800d8ae:	4824      	ldr	r0, [pc, #144]	@ (800d940 <__d2b+0xac>)
 800d8b0:	f240 310f 	movw	r1, #783	@ 0x30f
 800d8b4:	f000 fa82 	bl	800ddbc <__assert_func>
 800d8b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d8bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d8c0:	b10d      	cbz	r5, 800d8c6 <__d2b+0x32>
 800d8c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d8c6:	9301      	str	r3, [sp, #4]
 800d8c8:	f1b8 0300 	subs.w	r3, r8, #0
 800d8cc:	d023      	beq.n	800d916 <__d2b+0x82>
 800d8ce:	4668      	mov	r0, sp
 800d8d0:	9300      	str	r3, [sp, #0]
 800d8d2:	f7ff fd7c 	bl	800d3ce <__lo0bits>
 800d8d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d8da:	b1d0      	cbz	r0, 800d912 <__d2b+0x7e>
 800d8dc:	f1c0 0320 	rsb	r3, r0, #32
 800d8e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d8e4:	430b      	orrs	r3, r1
 800d8e6:	40c2      	lsrs	r2, r0
 800d8e8:	6163      	str	r3, [r4, #20]
 800d8ea:	9201      	str	r2, [sp, #4]
 800d8ec:	9b01      	ldr	r3, [sp, #4]
 800d8ee:	61a3      	str	r3, [r4, #24]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	bf0c      	ite	eq
 800d8f4:	2201      	moveq	r2, #1
 800d8f6:	2202      	movne	r2, #2
 800d8f8:	6122      	str	r2, [r4, #16]
 800d8fa:	b1a5      	cbz	r5, 800d926 <__d2b+0x92>
 800d8fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d900:	4405      	add	r5, r0
 800d902:	603d      	str	r5, [r7, #0]
 800d904:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d908:	6030      	str	r0, [r6, #0]
 800d90a:	4620      	mov	r0, r4
 800d90c:	b003      	add	sp, #12
 800d90e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d912:	6161      	str	r1, [r4, #20]
 800d914:	e7ea      	b.n	800d8ec <__d2b+0x58>
 800d916:	a801      	add	r0, sp, #4
 800d918:	f7ff fd59 	bl	800d3ce <__lo0bits>
 800d91c:	9b01      	ldr	r3, [sp, #4]
 800d91e:	6163      	str	r3, [r4, #20]
 800d920:	3020      	adds	r0, #32
 800d922:	2201      	movs	r2, #1
 800d924:	e7e8      	b.n	800d8f8 <__d2b+0x64>
 800d926:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d92a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d92e:	6038      	str	r0, [r7, #0]
 800d930:	6918      	ldr	r0, [r3, #16]
 800d932:	f7ff fd2d 	bl	800d390 <__hi0bits>
 800d936:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d93a:	e7e5      	b.n	800d908 <__d2b+0x74>
 800d93c:	0800ea94 	.word	0x0800ea94
 800d940:	0800eaa5 	.word	0x0800eaa5

0800d944 <__ssputs_r>:
 800d944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d948:	688e      	ldr	r6, [r1, #8]
 800d94a:	461f      	mov	r7, r3
 800d94c:	42be      	cmp	r6, r7
 800d94e:	680b      	ldr	r3, [r1, #0]
 800d950:	4682      	mov	sl, r0
 800d952:	460c      	mov	r4, r1
 800d954:	4690      	mov	r8, r2
 800d956:	d82d      	bhi.n	800d9b4 <__ssputs_r+0x70>
 800d958:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d95c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d960:	d026      	beq.n	800d9b0 <__ssputs_r+0x6c>
 800d962:	6965      	ldr	r5, [r4, #20]
 800d964:	6909      	ldr	r1, [r1, #16]
 800d966:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d96a:	eba3 0901 	sub.w	r9, r3, r1
 800d96e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d972:	1c7b      	adds	r3, r7, #1
 800d974:	444b      	add	r3, r9
 800d976:	106d      	asrs	r5, r5, #1
 800d978:	429d      	cmp	r5, r3
 800d97a:	bf38      	it	cc
 800d97c:	461d      	movcc	r5, r3
 800d97e:	0553      	lsls	r3, r2, #21
 800d980:	d527      	bpl.n	800d9d2 <__ssputs_r+0x8e>
 800d982:	4629      	mov	r1, r5
 800d984:	f7ff fbd0 	bl	800d128 <_malloc_r>
 800d988:	4606      	mov	r6, r0
 800d98a:	b360      	cbz	r0, 800d9e6 <__ssputs_r+0xa2>
 800d98c:	6921      	ldr	r1, [r4, #16]
 800d98e:	464a      	mov	r2, r9
 800d990:	f000 fa06 	bl	800dda0 <memcpy>
 800d994:	89a3      	ldrh	r3, [r4, #12]
 800d996:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d99a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d99e:	81a3      	strh	r3, [r4, #12]
 800d9a0:	6126      	str	r6, [r4, #16]
 800d9a2:	6165      	str	r5, [r4, #20]
 800d9a4:	444e      	add	r6, r9
 800d9a6:	eba5 0509 	sub.w	r5, r5, r9
 800d9aa:	6026      	str	r6, [r4, #0]
 800d9ac:	60a5      	str	r5, [r4, #8]
 800d9ae:	463e      	mov	r6, r7
 800d9b0:	42be      	cmp	r6, r7
 800d9b2:	d900      	bls.n	800d9b6 <__ssputs_r+0x72>
 800d9b4:	463e      	mov	r6, r7
 800d9b6:	6820      	ldr	r0, [r4, #0]
 800d9b8:	4632      	mov	r2, r6
 800d9ba:	4641      	mov	r1, r8
 800d9bc:	f000 f9c6 	bl	800dd4c <memmove>
 800d9c0:	68a3      	ldr	r3, [r4, #8]
 800d9c2:	1b9b      	subs	r3, r3, r6
 800d9c4:	60a3      	str	r3, [r4, #8]
 800d9c6:	6823      	ldr	r3, [r4, #0]
 800d9c8:	4433      	add	r3, r6
 800d9ca:	6023      	str	r3, [r4, #0]
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9d2:	462a      	mov	r2, r5
 800d9d4:	f000 fa36 	bl	800de44 <_realloc_r>
 800d9d8:	4606      	mov	r6, r0
 800d9da:	2800      	cmp	r0, #0
 800d9dc:	d1e0      	bne.n	800d9a0 <__ssputs_r+0x5c>
 800d9de:	6921      	ldr	r1, [r4, #16]
 800d9e0:	4650      	mov	r0, sl
 800d9e2:	f7ff fb2d 	bl	800d040 <_free_r>
 800d9e6:	230c      	movs	r3, #12
 800d9e8:	f8ca 3000 	str.w	r3, [sl]
 800d9ec:	89a3      	ldrh	r3, [r4, #12]
 800d9ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9f2:	81a3      	strh	r3, [r4, #12]
 800d9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d9f8:	e7e9      	b.n	800d9ce <__ssputs_r+0x8a>
	...

0800d9fc <_svfiprintf_r>:
 800d9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da00:	4698      	mov	r8, r3
 800da02:	898b      	ldrh	r3, [r1, #12]
 800da04:	061b      	lsls	r3, r3, #24
 800da06:	b09d      	sub	sp, #116	@ 0x74
 800da08:	4607      	mov	r7, r0
 800da0a:	460d      	mov	r5, r1
 800da0c:	4614      	mov	r4, r2
 800da0e:	d510      	bpl.n	800da32 <_svfiprintf_r+0x36>
 800da10:	690b      	ldr	r3, [r1, #16]
 800da12:	b973      	cbnz	r3, 800da32 <_svfiprintf_r+0x36>
 800da14:	2140      	movs	r1, #64	@ 0x40
 800da16:	f7ff fb87 	bl	800d128 <_malloc_r>
 800da1a:	6028      	str	r0, [r5, #0]
 800da1c:	6128      	str	r0, [r5, #16]
 800da1e:	b930      	cbnz	r0, 800da2e <_svfiprintf_r+0x32>
 800da20:	230c      	movs	r3, #12
 800da22:	603b      	str	r3, [r7, #0]
 800da24:	f04f 30ff 	mov.w	r0, #4294967295
 800da28:	b01d      	add	sp, #116	@ 0x74
 800da2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da2e:	2340      	movs	r3, #64	@ 0x40
 800da30:	616b      	str	r3, [r5, #20]
 800da32:	2300      	movs	r3, #0
 800da34:	9309      	str	r3, [sp, #36]	@ 0x24
 800da36:	2320      	movs	r3, #32
 800da38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800da40:	2330      	movs	r3, #48	@ 0x30
 800da42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dbe0 <_svfiprintf_r+0x1e4>
 800da46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da4a:	f04f 0901 	mov.w	r9, #1
 800da4e:	4623      	mov	r3, r4
 800da50:	469a      	mov	sl, r3
 800da52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da56:	b10a      	cbz	r2, 800da5c <_svfiprintf_r+0x60>
 800da58:	2a25      	cmp	r2, #37	@ 0x25
 800da5a:	d1f9      	bne.n	800da50 <_svfiprintf_r+0x54>
 800da5c:	ebba 0b04 	subs.w	fp, sl, r4
 800da60:	d00b      	beq.n	800da7a <_svfiprintf_r+0x7e>
 800da62:	465b      	mov	r3, fp
 800da64:	4622      	mov	r2, r4
 800da66:	4629      	mov	r1, r5
 800da68:	4638      	mov	r0, r7
 800da6a:	f7ff ff6b 	bl	800d944 <__ssputs_r>
 800da6e:	3001      	adds	r0, #1
 800da70:	f000 80a7 	beq.w	800dbc2 <_svfiprintf_r+0x1c6>
 800da74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da76:	445a      	add	r2, fp
 800da78:	9209      	str	r2, [sp, #36]	@ 0x24
 800da7a:	f89a 3000 	ldrb.w	r3, [sl]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	f000 809f 	beq.w	800dbc2 <_svfiprintf_r+0x1c6>
 800da84:	2300      	movs	r3, #0
 800da86:	f04f 32ff 	mov.w	r2, #4294967295
 800da8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da8e:	f10a 0a01 	add.w	sl, sl, #1
 800da92:	9304      	str	r3, [sp, #16]
 800da94:	9307      	str	r3, [sp, #28]
 800da96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da9a:	931a      	str	r3, [sp, #104]	@ 0x68
 800da9c:	4654      	mov	r4, sl
 800da9e:	2205      	movs	r2, #5
 800daa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daa4:	484e      	ldr	r0, [pc, #312]	@ (800dbe0 <_svfiprintf_r+0x1e4>)
 800daa6:	f7f2 fb9b 	bl	80001e0 <memchr>
 800daaa:	9a04      	ldr	r2, [sp, #16]
 800daac:	b9d8      	cbnz	r0, 800dae6 <_svfiprintf_r+0xea>
 800daae:	06d0      	lsls	r0, r2, #27
 800dab0:	bf44      	itt	mi
 800dab2:	2320      	movmi	r3, #32
 800dab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dab8:	0711      	lsls	r1, r2, #28
 800daba:	bf44      	itt	mi
 800dabc:	232b      	movmi	r3, #43	@ 0x2b
 800dabe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dac2:	f89a 3000 	ldrb.w	r3, [sl]
 800dac6:	2b2a      	cmp	r3, #42	@ 0x2a
 800dac8:	d015      	beq.n	800daf6 <_svfiprintf_r+0xfa>
 800daca:	9a07      	ldr	r2, [sp, #28]
 800dacc:	4654      	mov	r4, sl
 800dace:	2000      	movs	r0, #0
 800dad0:	f04f 0c0a 	mov.w	ip, #10
 800dad4:	4621      	mov	r1, r4
 800dad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dada:	3b30      	subs	r3, #48	@ 0x30
 800dadc:	2b09      	cmp	r3, #9
 800dade:	d94b      	bls.n	800db78 <_svfiprintf_r+0x17c>
 800dae0:	b1b0      	cbz	r0, 800db10 <_svfiprintf_r+0x114>
 800dae2:	9207      	str	r2, [sp, #28]
 800dae4:	e014      	b.n	800db10 <_svfiprintf_r+0x114>
 800dae6:	eba0 0308 	sub.w	r3, r0, r8
 800daea:	fa09 f303 	lsl.w	r3, r9, r3
 800daee:	4313      	orrs	r3, r2
 800daf0:	9304      	str	r3, [sp, #16]
 800daf2:	46a2      	mov	sl, r4
 800daf4:	e7d2      	b.n	800da9c <_svfiprintf_r+0xa0>
 800daf6:	9b03      	ldr	r3, [sp, #12]
 800daf8:	1d19      	adds	r1, r3, #4
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	9103      	str	r1, [sp, #12]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	bfbb      	ittet	lt
 800db02:	425b      	neglt	r3, r3
 800db04:	f042 0202 	orrlt.w	r2, r2, #2
 800db08:	9307      	strge	r3, [sp, #28]
 800db0a:	9307      	strlt	r3, [sp, #28]
 800db0c:	bfb8      	it	lt
 800db0e:	9204      	strlt	r2, [sp, #16]
 800db10:	7823      	ldrb	r3, [r4, #0]
 800db12:	2b2e      	cmp	r3, #46	@ 0x2e
 800db14:	d10a      	bne.n	800db2c <_svfiprintf_r+0x130>
 800db16:	7863      	ldrb	r3, [r4, #1]
 800db18:	2b2a      	cmp	r3, #42	@ 0x2a
 800db1a:	d132      	bne.n	800db82 <_svfiprintf_r+0x186>
 800db1c:	9b03      	ldr	r3, [sp, #12]
 800db1e:	1d1a      	adds	r2, r3, #4
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	9203      	str	r2, [sp, #12]
 800db24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db28:	3402      	adds	r4, #2
 800db2a:	9305      	str	r3, [sp, #20]
 800db2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dbf0 <_svfiprintf_r+0x1f4>
 800db30:	7821      	ldrb	r1, [r4, #0]
 800db32:	2203      	movs	r2, #3
 800db34:	4650      	mov	r0, sl
 800db36:	f7f2 fb53 	bl	80001e0 <memchr>
 800db3a:	b138      	cbz	r0, 800db4c <_svfiprintf_r+0x150>
 800db3c:	9b04      	ldr	r3, [sp, #16]
 800db3e:	eba0 000a 	sub.w	r0, r0, sl
 800db42:	2240      	movs	r2, #64	@ 0x40
 800db44:	4082      	lsls	r2, r0
 800db46:	4313      	orrs	r3, r2
 800db48:	3401      	adds	r4, #1
 800db4a:	9304      	str	r3, [sp, #16]
 800db4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db50:	4824      	ldr	r0, [pc, #144]	@ (800dbe4 <_svfiprintf_r+0x1e8>)
 800db52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db56:	2206      	movs	r2, #6
 800db58:	f7f2 fb42 	bl	80001e0 <memchr>
 800db5c:	2800      	cmp	r0, #0
 800db5e:	d036      	beq.n	800dbce <_svfiprintf_r+0x1d2>
 800db60:	4b21      	ldr	r3, [pc, #132]	@ (800dbe8 <_svfiprintf_r+0x1ec>)
 800db62:	bb1b      	cbnz	r3, 800dbac <_svfiprintf_r+0x1b0>
 800db64:	9b03      	ldr	r3, [sp, #12]
 800db66:	3307      	adds	r3, #7
 800db68:	f023 0307 	bic.w	r3, r3, #7
 800db6c:	3308      	adds	r3, #8
 800db6e:	9303      	str	r3, [sp, #12]
 800db70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db72:	4433      	add	r3, r6
 800db74:	9309      	str	r3, [sp, #36]	@ 0x24
 800db76:	e76a      	b.n	800da4e <_svfiprintf_r+0x52>
 800db78:	fb0c 3202 	mla	r2, ip, r2, r3
 800db7c:	460c      	mov	r4, r1
 800db7e:	2001      	movs	r0, #1
 800db80:	e7a8      	b.n	800dad4 <_svfiprintf_r+0xd8>
 800db82:	2300      	movs	r3, #0
 800db84:	3401      	adds	r4, #1
 800db86:	9305      	str	r3, [sp, #20]
 800db88:	4619      	mov	r1, r3
 800db8a:	f04f 0c0a 	mov.w	ip, #10
 800db8e:	4620      	mov	r0, r4
 800db90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db94:	3a30      	subs	r2, #48	@ 0x30
 800db96:	2a09      	cmp	r2, #9
 800db98:	d903      	bls.n	800dba2 <_svfiprintf_r+0x1a6>
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d0c6      	beq.n	800db2c <_svfiprintf_r+0x130>
 800db9e:	9105      	str	r1, [sp, #20]
 800dba0:	e7c4      	b.n	800db2c <_svfiprintf_r+0x130>
 800dba2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dba6:	4604      	mov	r4, r0
 800dba8:	2301      	movs	r3, #1
 800dbaa:	e7f0      	b.n	800db8e <_svfiprintf_r+0x192>
 800dbac:	ab03      	add	r3, sp, #12
 800dbae:	9300      	str	r3, [sp, #0]
 800dbb0:	462a      	mov	r2, r5
 800dbb2:	4b0e      	ldr	r3, [pc, #56]	@ (800dbec <_svfiprintf_r+0x1f0>)
 800dbb4:	a904      	add	r1, sp, #16
 800dbb6:	4638      	mov	r0, r7
 800dbb8:	f7fd fe84 	bl	800b8c4 <_printf_float>
 800dbbc:	1c42      	adds	r2, r0, #1
 800dbbe:	4606      	mov	r6, r0
 800dbc0:	d1d6      	bne.n	800db70 <_svfiprintf_r+0x174>
 800dbc2:	89ab      	ldrh	r3, [r5, #12]
 800dbc4:	065b      	lsls	r3, r3, #25
 800dbc6:	f53f af2d 	bmi.w	800da24 <_svfiprintf_r+0x28>
 800dbca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dbcc:	e72c      	b.n	800da28 <_svfiprintf_r+0x2c>
 800dbce:	ab03      	add	r3, sp, #12
 800dbd0:	9300      	str	r3, [sp, #0]
 800dbd2:	462a      	mov	r2, r5
 800dbd4:	4b05      	ldr	r3, [pc, #20]	@ (800dbec <_svfiprintf_r+0x1f0>)
 800dbd6:	a904      	add	r1, sp, #16
 800dbd8:	4638      	mov	r0, r7
 800dbda:	f7fe f90b 	bl	800bdf4 <_printf_i>
 800dbde:	e7ed      	b.n	800dbbc <_svfiprintf_r+0x1c0>
 800dbe0:	0800ec00 	.word	0x0800ec00
 800dbe4:	0800ec0a 	.word	0x0800ec0a
 800dbe8:	0800b8c5 	.word	0x0800b8c5
 800dbec:	0800d945 	.word	0x0800d945
 800dbf0:	0800ec06 	.word	0x0800ec06

0800dbf4 <__sflush_r>:
 800dbf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbfc:	0716      	lsls	r6, r2, #28
 800dbfe:	4605      	mov	r5, r0
 800dc00:	460c      	mov	r4, r1
 800dc02:	d454      	bmi.n	800dcae <__sflush_r+0xba>
 800dc04:	684b      	ldr	r3, [r1, #4]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	dc02      	bgt.n	800dc10 <__sflush_r+0x1c>
 800dc0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	dd48      	ble.n	800dca2 <__sflush_r+0xae>
 800dc10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc12:	2e00      	cmp	r6, #0
 800dc14:	d045      	beq.n	800dca2 <__sflush_r+0xae>
 800dc16:	2300      	movs	r3, #0
 800dc18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dc1c:	682f      	ldr	r7, [r5, #0]
 800dc1e:	6a21      	ldr	r1, [r4, #32]
 800dc20:	602b      	str	r3, [r5, #0]
 800dc22:	d030      	beq.n	800dc86 <__sflush_r+0x92>
 800dc24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dc26:	89a3      	ldrh	r3, [r4, #12]
 800dc28:	0759      	lsls	r1, r3, #29
 800dc2a:	d505      	bpl.n	800dc38 <__sflush_r+0x44>
 800dc2c:	6863      	ldr	r3, [r4, #4]
 800dc2e:	1ad2      	subs	r2, r2, r3
 800dc30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dc32:	b10b      	cbz	r3, 800dc38 <__sflush_r+0x44>
 800dc34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dc36:	1ad2      	subs	r2, r2, r3
 800dc38:	2300      	movs	r3, #0
 800dc3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc3c:	6a21      	ldr	r1, [r4, #32]
 800dc3e:	4628      	mov	r0, r5
 800dc40:	47b0      	blx	r6
 800dc42:	1c43      	adds	r3, r0, #1
 800dc44:	89a3      	ldrh	r3, [r4, #12]
 800dc46:	d106      	bne.n	800dc56 <__sflush_r+0x62>
 800dc48:	6829      	ldr	r1, [r5, #0]
 800dc4a:	291d      	cmp	r1, #29
 800dc4c:	d82b      	bhi.n	800dca6 <__sflush_r+0xb2>
 800dc4e:	4a2a      	ldr	r2, [pc, #168]	@ (800dcf8 <__sflush_r+0x104>)
 800dc50:	410a      	asrs	r2, r1
 800dc52:	07d6      	lsls	r6, r2, #31
 800dc54:	d427      	bmi.n	800dca6 <__sflush_r+0xb2>
 800dc56:	2200      	movs	r2, #0
 800dc58:	6062      	str	r2, [r4, #4]
 800dc5a:	04d9      	lsls	r1, r3, #19
 800dc5c:	6922      	ldr	r2, [r4, #16]
 800dc5e:	6022      	str	r2, [r4, #0]
 800dc60:	d504      	bpl.n	800dc6c <__sflush_r+0x78>
 800dc62:	1c42      	adds	r2, r0, #1
 800dc64:	d101      	bne.n	800dc6a <__sflush_r+0x76>
 800dc66:	682b      	ldr	r3, [r5, #0]
 800dc68:	b903      	cbnz	r3, 800dc6c <__sflush_r+0x78>
 800dc6a:	6560      	str	r0, [r4, #84]	@ 0x54
 800dc6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc6e:	602f      	str	r7, [r5, #0]
 800dc70:	b1b9      	cbz	r1, 800dca2 <__sflush_r+0xae>
 800dc72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc76:	4299      	cmp	r1, r3
 800dc78:	d002      	beq.n	800dc80 <__sflush_r+0x8c>
 800dc7a:	4628      	mov	r0, r5
 800dc7c:	f7ff f9e0 	bl	800d040 <_free_r>
 800dc80:	2300      	movs	r3, #0
 800dc82:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc84:	e00d      	b.n	800dca2 <__sflush_r+0xae>
 800dc86:	2301      	movs	r3, #1
 800dc88:	4628      	mov	r0, r5
 800dc8a:	47b0      	blx	r6
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	1c50      	adds	r0, r2, #1
 800dc90:	d1c9      	bne.n	800dc26 <__sflush_r+0x32>
 800dc92:	682b      	ldr	r3, [r5, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d0c6      	beq.n	800dc26 <__sflush_r+0x32>
 800dc98:	2b1d      	cmp	r3, #29
 800dc9a:	d001      	beq.n	800dca0 <__sflush_r+0xac>
 800dc9c:	2b16      	cmp	r3, #22
 800dc9e:	d11e      	bne.n	800dcde <__sflush_r+0xea>
 800dca0:	602f      	str	r7, [r5, #0]
 800dca2:	2000      	movs	r0, #0
 800dca4:	e022      	b.n	800dcec <__sflush_r+0xf8>
 800dca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcaa:	b21b      	sxth	r3, r3
 800dcac:	e01b      	b.n	800dce6 <__sflush_r+0xf2>
 800dcae:	690f      	ldr	r7, [r1, #16]
 800dcb0:	2f00      	cmp	r7, #0
 800dcb2:	d0f6      	beq.n	800dca2 <__sflush_r+0xae>
 800dcb4:	0793      	lsls	r3, r2, #30
 800dcb6:	680e      	ldr	r6, [r1, #0]
 800dcb8:	bf08      	it	eq
 800dcba:	694b      	ldreq	r3, [r1, #20]
 800dcbc:	600f      	str	r7, [r1, #0]
 800dcbe:	bf18      	it	ne
 800dcc0:	2300      	movne	r3, #0
 800dcc2:	eba6 0807 	sub.w	r8, r6, r7
 800dcc6:	608b      	str	r3, [r1, #8]
 800dcc8:	f1b8 0f00 	cmp.w	r8, #0
 800dccc:	dde9      	ble.n	800dca2 <__sflush_r+0xae>
 800dcce:	6a21      	ldr	r1, [r4, #32]
 800dcd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dcd2:	4643      	mov	r3, r8
 800dcd4:	463a      	mov	r2, r7
 800dcd6:	4628      	mov	r0, r5
 800dcd8:	47b0      	blx	r6
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	dc08      	bgt.n	800dcf0 <__sflush_r+0xfc>
 800dcde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dce6:	81a3      	strh	r3, [r4, #12]
 800dce8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcf0:	4407      	add	r7, r0
 800dcf2:	eba8 0800 	sub.w	r8, r8, r0
 800dcf6:	e7e7      	b.n	800dcc8 <__sflush_r+0xd4>
 800dcf8:	dfbffffe 	.word	0xdfbffffe

0800dcfc <_fflush_r>:
 800dcfc:	b538      	push	{r3, r4, r5, lr}
 800dcfe:	690b      	ldr	r3, [r1, #16]
 800dd00:	4605      	mov	r5, r0
 800dd02:	460c      	mov	r4, r1
 800dd04:	b913      	cbnz	r3, 800dd0c <_fflush_r+0x10>
 800dd06:	2500      	movs	r5, #0
 800dd08:	4628      	mov	r0, r5
 800dd0a:	bd38      	pop	{r3, r4, r5, pc}
 800dd0c:	b118      	cbz	r0, 800dd16 <_fflush_r+0x1a>
 800dd0e:	6a03      	ldr	r3, [r0, #32]
 800dd10:	b90b      	cbnz	r3, 800dd16 <_fflush_r+0x1a>
 800dd12:	f7fe fa1b 	bl	800c14c <__sinit>
 800dd16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d0f3      	beq.n	800dd06 <_fflush_r+0xa>
 800dd1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dd20:	07d0      	lsls	r0, r2, #31
 800dd22:	d404      	bmi.n	800dd2e <_fflush_r+0x32>
 800dd24:	0599      	lsls	r1, r3, #22
 800dd26:	d402      	bmi.n	800dd2e <_fflush_r+0x32>
 800dd28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd2a:	f7fe fb3a 	bl	800c3a2 <__retarget_lock_acquire_recursive>
 800dd2e:	4628      	mov	r0, r5
 800dd30:	4621      	mov	r1, r4
 800dd32:	f7ff ff5f 	bl	800dbf4 <__sflush_r>
 800dd36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd38:	07da      	lsls	r2, r3, #31
 800dd3a:	4605      	mov	r5, r0
 800dd3c:	d4e4      	bmi.n	800dd08 <_fflush_r+0xc>
 800dd3e:	89a3      	ldrh	r3, [r4, #12]
 800dd40:	059b      	lsls	r3, r3, #22
 800dd42:	d4e1      	bmi.n	800dd08 <_fflush_r+0xc>
 800dd44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd46:	f7fe fb2d 	bl	800c3a4 <__retarget_lock_release_recursive>
 800dd4a:	e7dd      	b.n	800dd08 <_fflush_r+0xc>

0800dd4c <memmove>:
 800dd4c:	4288      	cmp	r0, r1
 800dd4e:	b510      	push	{r4, lr}
 800dd50:	eb01 0402 	add.w	r4, r1, r2
 800dd54:	d902      	bls.n	800dd5c <memmove+0x10>
 800dd56:	4284      	cmp	r4, r0
 800dd58:	4623      	mov	r3, r4
 800dd5a:	d807      	bhi.n	800dd6c <memmove+0x20>
 800dd5c:	1e43      	subs	r3, r0, #1
 800dd5e:	42a1      	cmp	r1, r4
 800dd60:	d008      	beq.n	800dd74 <memmove+0x28>
 800dd62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd6a:	e7f8      	b.n	800dd5e <memmove+0x12>
 800dd6c:	4402      	add	r2, r0
 800dd6e:	4601      	mov	r1, r0
 800dd70:	428a      	cmp	r2, r1
 800dd72:	d100      	bne.n	800dd76 <memmove+0x2a>
 800dd74:	bd10      	pop	{r4, pc}
 800dd76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd7e:	e7f7      	b.n	800dd70 <memmove+0x24>

0800dd80 <_sbrk_r>:
 800dd80:	b538      	push	{r3, r4, r5, lr}
 800dd82:	4d06      	ldr	r5, [pc, #24]	@ (800dd9c <_sbrk_r+0x1c>)
 800dd84:	2300      	movs	r3, #0
 800dd86:	4604      	mov	r4, r0
 800dd88:	4608      	mov	r0, r1
 800dd8a:	602b      	str	r3, [r5, #0]
 800dd8c:	f7f4 f8d8 	bl	8001f40 <_sbrk>
 800dd90:	1c43      	adds	r3, r0, #1
 800dd92:	d102      	bne.n	800dd9a <_sbrk_r+0x1a>
 800dd94:	682b      	ldr	r3, [r5, #0]
 800dd96:	b103      	cbz	r3, 800dd9a <_sbrk_r+0x1a>
 800dd98:	6023      	str	r3, [r4, #0]
 800dd9a:	bd38      	pop	{r3, r4, r5, pc}
 800dd9c:	20002158 	.word	0x20002158

0800dda0 <memcpy>:
 800dda0:	440a      	add	r2, r1
 800dda2:	4291      	cmp	r1, r2
 800dda4:	f100 33ff 	add.w	r3, r0, #4294967295
 800dda8:	d100      	bne.n	800ddac <memcpy+0xc>
 800ddaa:	4770      	bx	lr
 800ddac:	b510      	push	{r4, lr}
 800ddae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddb6:	4291      	cmp	r1, r2
 800ddb8:	d1f9      	bne.n	800ddae <memcpy+0xe>
 800ddba:	bd10      	pop	{r4, pc}

0800ddbc <__assert_func>:
 800ddbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddbe:	4614      	mov	r4, r2
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	4b09      	ldr	r3, [pc, #36]	@ (800dde8 <__assert_func+0x2c>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4605      	mov	r5, r0
 800ddc8:	68d8      	ldr	r0, [r3, #12]
 800ddca:	b954      	cbnz	r4, 800dde2 <__assert_func+0x26>
 800ddcc:	4b07      	ldr	r3, [pc, #28]	@ (800ddec <__assert_func+0x30>)
 800ddce:	461c      	mov	r4, r3
 800ddd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddd4:	9100      	str	r1, [sp, #0]
 800ddd6:	462b      	mov	r3, r5
 800ddd8:	4905      	ldr	r1, [pc, #20]	@ (800ddf0 <__assert_func+0x34>)
 800ddda:	f000 f86f 	bl	800debc <fiprintf>
 800ddde:	f000 f87f 	bl	800dee0 <abort>
 800dde2:	4b04      	ldr	r3, [pc, #16]	@ (800ddf4 <__assert_func+0x38>)
 800dde4:	e7f4      	b.n	800ddd0 <__assert_func+0x14>
 800dde6:	bf00      	nop
 800dde8:	20000118 	.word	0x20000118
 800ddec:	0800ec56 	.word	0x0800ec56
 800ddf0:	0800ec28 	.word	0x0800ec28
 800ddf4:	0800ec1b 	.word	0x0800ec1b

0800ddf8 <_calloc_r>:
 800ddf8:	b570      	push	{r4, r5, r6, lr}
 800ddfa:	fba1 5402 	umull	r5, r4, r1, r2
 800ddfe:	b93c      	cbnz	r4, 800de10 <_calloc_r+0x18>
 800de00:	4629      	mov	r1, r5
 800de02:	f7ff f991 	bl	800d128 <_malloc_r>
 800de06:	4606      	mov	r6, r0
 800de08:	b928      	cbnz	r0, 800de16 <_calloc_r+0x1e>
 800de0a:	2600      	movs	r6, #0
 800de0c:	4630      	mov	r0, r6
 800de0e:	bd70      	pop	{r4, r5, r6, pc}
 800de10:	220c      	movs	r2, #12
 800de12:	6002      	str	r2, [r0, #0]
 800de14:	e7f9      	b.n	800de0a <_calloc_r+0x12>
 800de16:	462a      	mov	r2, r5
 800de18:	4621      	mov	r1, r4
 800de1a:	f7fe fa44 	bl	800c2a6 <memset>
 800de1e:	e7f5      	b.n	800de0c <_calloc_r+0x14>

0800de20 <__ascii_mbtowc>:
 800de20:	b082      	sub	sp, #8
 800de22:	b901      	cbnz	r1, 800de26 <__ascii_mbtowc+0x6>
 800de24:	a901      	add	r1, sp, #4
 800de26:	b142      	cbz	r2, 800de3a <__ascii_mbtowc+0x1a>
 800de28:	b14b      	cbz	r3, 800de3e <__ascii_mbtowc+0x1e>
 800de2a:	7813      	ldrb	r3, [r2, #0]
 800de2c:	600b      	str	r3, [r1, #0]
 800de2e:	7812      	ldrb	r2, [r2, #0]
 800de30:	1e10      	subs	r0, r2, #0
 800de32:	bf18      	it	ne
 800de34:	2001      	movne	r0, #1
 800de36:	b002      	add	sp, #8
 800de38:	4770      	bx	lr
 800de3a:	4610      	mov	r0, r2
 800de3c:	e7fb      	b.n	800de36 <__ascii_mbtowc+0x16>
 800de3e:	f06f 0001 	mvn.w	r0, #1
 800de42:	e7f8      	b.n	800de36 <__ascii_mbtowc+0x16>

0800de44 <_realloc_r>:
 800de44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de48:	4680      	mov	r8, r0
 800de4a:	4615      	mov	r5, r2
 800de4c:	460c      	mov	r4, r1
 800de4e:	b921      	cbnz	r1, 800de5a <_realloc_r+0x16>
 800de50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de54:	4611      	mov	r1, r2
 800de56:	f7ff b967 	b.w	800d128 <_malloc_r>
 800de5a:	b92a      	cbnz	r2, 800de68 <_realloc_r+0x24>
 800de5c:	f7ff f8f0 	bl	800d040 <_free_r>
 800de60:	2400      	movs	r4, #0
 800de62:	4620      	mov	r0, r4
 800de64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de68:	f000 f841 	bl	800deee <_malloc_usable_size_r>
 800de6c:	4285      	cmp	r5, r0
 800de6e:	4606      	mov	r6, r0
 800de70:	d802      	bhi.n	800de78 <_realloc_r+0x34>
 800de72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800de76:	d8f4      	bhi.n	800de62 <_realloc_r+0x1e>
 800de78:	4629      	mov	r1, r5
 800de7a:	4640      	mov	r0, r8
 800de7c:	f7ff f954 	bl	800d128 <_malloc_r>
 800de80:	4607      	mov	r7, r0
 800de82:	2800      	cmp	r0, #0
 800de84:	d0ec      	beq.n	800de60 <_realloc_r+0x1c>
 800de86:	42b5      	cmp	r5, r6
 800de88:	462a      	mov	r2, r5
 800de8a:	4621      	mov	r1, r4
 800de8c:	bf28      	it	cs
 800de8e:	4632      	movcs	r2, r6
 800de90:	f7ff ff86 	bl	800dda0 <memcpy>
 800de94:	4621      	mov	r1, r4
 800de96:	4640      	mov	r0, r8
 800de98:	f7ff f8d2 	bl	800d040 <_free_r>
 800de9c:	463c      	mov	r4, r7
 800de9e:	e7e0      	b.n	800de62 <_realloc_r+0x1e>

0800dea0 <__ascii_wctomb>:
 800dea0:	4603      	mov	r3, r0
 800dea2:	4608      	mov	r0, r1
 800dea4:	b141      	cbz	r1, 800deb8 <__ascii_wctomb+0x18>
 800dea6:	2aff      	cmp	r2, #255	@ 0xff
 800dea8:	d904      	bls.n	800deb4 <__ascii_wctomb+0x14>
 800deaa:	228a      	movs	r2, #138	@ 0x8a
 800deac:	601a      	str	r2, [r3, #0]
 800deae:	f04f 30ff 	mov.w	r0, #4294967295
 800deb2:	4770      	bx	lr
 800deb4:	700a      	strb	r2, [r1, #0]
 800deb6:	2001      	movs	r0, #1
 800deb8:	4770      	bx	lr
	...

0800debc <fiprintf>:
 800debc:	b40e      	push	{r1, r2, r3}
 800debe:	b503      	push	{r0, r1, lr}
 800dec0:	4601      	mov	r1, r0
 800dec2:	ab03      	add	r3, sp, #12
 800dec4:	4805      	ldr	r0, [pc, #20]	@ (800dedc <fiprintf+0x20>)
 800dec6:	f853 2b04 	ldr.w	r2, [r3], #4
 800deca:	6800      	ldr	r0, [r0, #0]
 800decc:	9301      	str	r3, [sp, #4]
 800dece:	f000 f83f 	bl	800df50 <_vfiprintf_r>
 800ded2:	b002      	add	sp, #8
 800ded4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ded8:	b003      	add	sp, #12
 800deda:	4770      	bx	lr
 800dedc:	20000118 	.word	0x20000118

0800dee0 <abort>:
 800dee0:	b508      	push	{r3, lr}
 800dee2:	2006      	movs	r0, #6
 800dee4:	f000 fa08 	bl	800e2f8 <raise>
 800dee8:	2001      	movs	r0, #1
 800deea:	f7f3 ffb1 	bl	8001e50 <_exit>

0800deee <_malloc_usable_size_r>:
 800deee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800def2:	1f18      	subs	r0, r3, #4
 800def4:	2b00      	cmp	r3, #0
 800def6:	bfbc      	itt	lt
 800def8:	580b      	ldrlt	r3, [r1, r0]
 800defa:	18c0      	addlt	r0, r0, r3
 800defc:	4770      	bx	lr

0800defe <__sfputc_r>:
 800defe:	6893      	ldr	r3, [r2, #8]
 800df00:	3b01      	subs	r3, #1
 800df02:	2b00      	cmp	r3, #0
 800df04:	b410      	push	{r4}
 800df06:	6093      	str	r3, [r2, #8]
 800df08:	da08      	bge.n	800df1c <__sfputc_r+0x1e>
 800df0a:	6994      	ldr	r4, [r2, #24]
 800df0c:	42a3      	cmp	r3, r4
 800df0e:	db01      	blt.n	800df14 <__sfputc_r+0x16>
 800df10:	290a      	cmp	r1, #10
 800df12:	d103      	bne.n	800df1c <__sfputc_r+0x1e>
 800df14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df18:	f000 b932 	b.w	800e180 <__swbuf_r>
 800df1c:	6813      	ldr	r3, [r2, #0]
 800df1e:	1c58      	adds	r0, r3, #1
 800df20:	6010      	str	r0, [r2, #0]
 800df22:	7019      	strb	r1, [r3, #0]
 800df24:	4608      	mov	r0, r1
 800df26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df2a:	4770      	bx	lr

0800df2c <__sfputs_r>:
 800df2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df2e:	4606      	mov	r6, r0
 800df30:	460f      	mov	r7, r1
 800df32:	4614      	mov	r4, r2
 800df34:	18d5      	adds	r5, r2, r3
 800df36:	42ac      	cmp	r4, r5
 800df38:	d101      	bne.n	800df3e <__sfputs_r+0x12>
 800df3a:	2000      	movs	r0, #0
 800df3c:	e007      	b.n	800df4e <__sfputs_r+0x22>
 800df3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df42:	463a      	mov	r2, r7
 800df44:	4630      	mov	r0, r6
 800df46:	f7ff ffda 	bl	800defe <__sfputc_r>
 800df4a:	1c43      	adds	r3, r0, #1
 800df4c:	d1f3      	bne.n	800df36 <__sfputs_r+0xa>
 800df4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df50 <_vfiprintf_r>:
 800df50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df54:	460d      	mov	r5, r1
 800df56:	b09d      	sub	sp, #116	@ 0x74
 800df58:	4614      	mov	r4, r2
 800df5a:	4698      	mov	r8, r3
 800df5c:	4606      	mov	r6, r0
 800df5e:	b118      	cbz	r0, 800df68 <_vfiprintf_r+0x18>
 800df60:	6a03      	ldr	r3, [r0, #32]
 800df62:	b90b      	cbnz	r3, 800df68 <_vfiprintf_r+0x18>
 800df64:	f7fe f8f2 	bl	800c14c <__sinit>
 800df68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df6a:	07d9      	lsls	r1, r3, #31
 800df6c:	d405      	bmi.n	800df7a <_vfiprintf_r+0x2a>
 800df6e:	89ab      	ldrh	r3, [r5, #12]
 800df70:	059a      	lsls	r2, r3, #22
 800df72:	d402      	bmi.n	800df7a <_vfiprintf_r+0x2a>
 800df74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df76:	f7fe fa14 	bl	800c3a2 <__retarget_lock_acquire_recursive>
 800df7a:	89ab      	ldrh	r3, [r5, #12]
 800df7c:	071b      	lsls	r3, r3, #28
 800df7e:	d501      	bpl.n	800df84 <_vfiprintf_r+0x34>
 800df80:	692b      	ldr	r3, [r5, #16]
 800df82:	b99b      	cbnz	r3, 800dfac <_vfiprintf_r+0x5c>
 800df84:	4629      	mov	r1, r5
 800df86:	4630      	mov	r0, r6
 800df88:	f000 f938 	bl	800e1fc <__swsetup_r>
 800df8c:	b170      	cbz	r0, 800dfac <_vfiprintf_r+0x5c>
 800df8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df90:	07dc      	lsls	r4, r3, #31
 800df92:	d504      	bpl.n	800df9e <_vfiprintf_r+0x4e>
 800df94:	f04f 30ff 	mov.w	r0, #4294967295
 800df98:	b01d      	add	sp, #116	@ 0x74
 800df9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df9e:	89ab      	ldrh	r3, [r5, #12]
 800dfa0:	0598      	lsls	r0, r3, #22
 800dfa2:	d4f7      	bmi.n	800df94 <_vfiprintf_r+0x44>
 800dfa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfa6:	f7fe f9fd 	bl	800c3a4 <__retarget_lock_release_recursive>
 800dfaa:	e7f3      	b.n	800df94 <_vfiprintf_r+0x44>
 800dfac:	2300      	movs	r3, #0
 800dfae:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfb0:	2320      	movs	r3, #32
 800dfb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dfb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfba:	2330      	movs	r3, #48	@ 0x30
 800dfbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e16c <_vfiprintf_r+0x21c>
 800dfc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dfc4:	f04f 0901 	mov.w	r9, #1
 800dfc8:	4623      	mov	r3, r4
 800dfca:	469a      	mov	sl, r3
 800dfcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfd0:	b10a      	cbz	r2, 800dfd6 <_vfiprintf_r+0x86>
 800dfd2:	2a25      	cmp	r2, #37	@ 0x25
 800dfd4:	d1f9      	bne.n	800dfca <_vfiprintf_r+0x7a>
 800dfd6:	ebba 0b04 	subs.w	fp, sl, r4
 800dfda:	d00b      	beq.n	800dff4 <_vfiprintf_r+0xa4>
 800dfdc:	465b      	mov	r3, fp
 800dfde:	4622      	mov	r2, r4
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	f7ff ffa2 	bl	800df2c <__sfputs_r>
 800dfe8:	3001      	adds	r0, #1
 800dfea:	f000 80a7 	beq.w	800e13c <_vfiprintf_r+0x1ec>
 800dfee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dff0:	445a      	add	r2, fp
 800dff2:	9209      	str	r2, [sp, #36]	@ 0x24
 800dff4:	f89a 3000 	ldrb.w	r3, [sl]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	f000 809f 	beq.w	800e13c <_vfiprintf_r+0x1ec>
 800dffe:	2300      	movs	r3, #0
 800e000:	f04f 32ff 	mov.w	r2, #4294967295
 800e004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e008:	f10a 0a01 	add.w	sl, sl, #1
 800e00c:	9304      	str	r3, [sp, #16]
 800e00e:	9307      	str	r3, [sp, #28]
 800e010:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e014:	931a      	str	r3, [sp, #104]	@ 0x68
 800e016:	4654      	mov	r4, sl
 800e018:	2205      	movs	r2, #5
 800e01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e01e:	4853      	ldr	r0, [pc, #332]	@ (800e16c <_vfiprintf_r+0x21c>)
 800e020:	f7f2 f8de 	bl	80001e0 <memchr>
 800e024:	9a04      	ldr	r2, [sp, #16]
 800e026:	b9d8      	cbnz	r0, 800e060 <_vfiprintf_r+0x110>
 800e028:	06d1      	lsls	r1, r2, #27
 800e02a:	bf44      	itt	mi
 800e02c:	2320      	movmi	r3, #32
 800e02e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e032:	0713      	lsls	r3, r2, #28
 800e034:	bf44      	itt	mi
 800e036:	232b      	movmi	r3, #43	@ 0x2b
 800e038:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e03c:	f89a 3000 	ldrb.w	r3, [sl]
 800e040:	2b2a      	cmp	r3, #42	@ 0x2a
 800e042:	d015      	beq.n	800e070 <_vfiprintf_r+0x120>
 800e044:	9a07      	ldr	r2, [sp, #28]
 800e046:	4654      	mov	r4, sl
 800e048:	2000      	movs	r0, #0
 800e04a:	f04f 0c0a 	mov.w	ip, #10
 800e04e:	4621      	mov	r1, r4
 800e050:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e054:	3b30      	subs	r3, #48	@ 0x30
 800e056:	2b09      	cmp	r3, #9
 800e058:	d94b      	bls.n	800e0f2 <_vfiprintf_r+0x1a2>
 800e05a:	b1b0      	cbz	r0, 800e08a <_vfiprintf_r+0x13a>
 800e05c:	9207      	str	r2, [sp, #28]
 800e05e:	e014      	b.n	800e08a <_vfiprintf_r+0x13a>
 800e060:	eba0 0308 	sub.w	r3, r0, r8
 800e064:	fa09 f303 	lsl.w	r3, r9, r3
 800e068:	4313      	orrs	r3, r2
 800e06a:	9304      	str	r3, [sp, #16]
 800e06c:	46a2      	mov	sl, r4
 800e06e:	e7d2      	b.n	800e016 <_vfiprintf_r+0xc6>
 800e070:	9b03      	ldr	r3, [sp, #12]
 800e072:	1d19      	adds	r1, r3, #4
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	9103      	str	r1, [sp, #12]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	bfbb      	ittet	lt
 800e07c:	425b      	neglt	r3, r3
 800e07e:	f042 0202 	orrlt.w	r2, r2, #2
 800e082:	9307      	strge	r3, [sp, #28]
 800e084:	9307      	strlt	r3, [sp, #28]
 800e086:	bfb8      	it	lt
 800e088:	9204      	strlt	r2, [sp, #16]
 800e08a:	7823      	ldrb	r3, [r4, #0]
 800e08c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e08e:	d10a      	bne.n	800e0a6 <_vfiprintf_r+0x156>
 800e090:	7863      	ldrb	r3, [r4, #1]
 800e092:	2b2a      	cmp	r3, #42	@ 0x2a
 800e094:	d132      	bne.n	800e0fc <_vfiprintf_r+0x1ac>
 800e096:	9b03      	ldr	r3, [sp, #12]
 800e098:	1d1a      	adds	r2, r3, #4
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	9203      	str	r2, [sp, #12]
 800e09e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e0a2:	3402      	adds	r4, #2
 800e0a4:	9305      	str	r3, [sp, #20]
 800e0a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e17c <_vfiprintf_r+0x22c>
 800e0aa:	7821      	ldrb	r1, [r4, #0]
 800e0ac:	2203      	movs	r2, #3
 800e0ae:	4650      	mov	r0, sl
 800e0b0:	f7f2 f896 	bl	80001e0 <memchr>
 800e0b4:	b138      	cbz	r0, 800e0c6 <_vfiprintf_r+0x176>
 800e0b6:	9b04      	ldr	r3, [sp, #16]
 800e0b8:	eba0 000a 	sub.w	r0, r0, sl
 800e0bc:	2240      	movs	r2, #64	@ 0x40
 800e0be:	4082      	lsls	r2, r0
 800e0c0:	4313      	orrs	r3, r2
 800e0c2:	3401      	adds	r4, #1
 800e0c4:	9304      	str	r3, [sp, #16]
 800e0c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0ca:	4829      	ldr	r0, [pc, #164]	@ (800e170 <_vfiprintf_r+0x220>)
 800e0cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e0d0:	2206      	movs	r2, #6
 800e0d2:	f7f2 f885 	bl	80001e0 <memchr>
 800e0d6:	2800      	cmp	r0, #0
 800e0d8:	d03f      	beq.n	800e15a <_vfiprintf_r+0x20a>
 800e0da:	4b26      	ldr	r3, [pc, #152]	@ (800e174 <_vfiprintf_r+0x224>)
 800e0dc:	bb1b      	cbnz	r3, 800e126 <_vfiprintf_r+0x1d6>
 800e0de:	9b03      	ldr	r3, [sp, #12]
 800e0e0:	3307      	adds	r3, #7
 800e0e2:	f023 0307 	bic.w	r3, r3, #7
 800e0e6:	3308      	adds	r3, #8
 800e0e8:	9303      	str	r3, [sp, #12]
 800e0ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0ec:	443b      	add	r3, r7
 800e0ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0f0:	e76a      	b.n	800dfc8 <_vfiprintf_r+0x78>
 800e0f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0f6:	460c      	mov	r4, r1
 800e0f8:	2001      	movs	r0, #1
 800e0fa:	e7a8      	b.n	800e04e <_vfiprintf_r+0xfe>
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	3401      	adds	r4, #1
 800e100:	9305      	str	r3, [sp, #20]
 800e102:	4619      	mov	r1, r3
 800e104:	f04f 0c0a 	mov.w	ip, #10
 800e108:	4620      	mov	r0, r4
 800e10a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e10e:	3a30      	subs	r2, #48	@ 0x30
 800e110:	2a09      	cmp	r2, #9
 800e112:	d903      	bls.n	800e11c <_vfiprintf_r+0x1cc>
 800e114:	2b00      	cmp	r3, #0
 800e116:	d0c6      	beq.n	800e0a6 <_vfiprintf_r+0x156>
 800e118:	9105      	str	r1, [sp, #20]
 800e11a:	e7c4      	b.n	800e0a6 <_vfiprintf_r+0x156>
 800e11c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e120:	4604      	mov	r4, r0
 800e122:	2301      	movs	r3, #1
 800e124:	e7f0      	b.n	800e108 <_vfiprintf_r+0x1b8>
 800e126:	ab03      	add	r3, sp, #12
 800e128:	9300      	str	r3, [sp, #0]
 800e12a:	462a      	mov	r2, r5
 800e12c:	4b12      	ldr	r3, [pc, #72]	@ (800e178 <_vfiprintf_r+0x228>)
 800e12e:	a904      	add	r1, sp, #16
 800e130:	4630      	mov	r0, r6
 800e132:	f7fd fbc7 	bl	800b8c4 <_printf_float>
 800e136:	4607      	mov	r7, r0
 800e138:	1c78      	adds	r0, r7, #1
 800e13a:	d1d6      	bne.n	800e0ea <_vfiprintf_r+0x19a>
 800e13c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e13e:	07d9      	lsls	r1, r3, #31
 800e140:	d405      	bmi.n	800e14e <_vfiprintf_r+0x1fe>
 800e142:	89ab      	ldrh	r3, [r5, #12]
 800e144:	059a      	lsls	r2, r3, #22
 800e146:	d402      	bmi.n	800e14e <_vfiprintf_r+0x1fe>
 800e148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e14a:	f7fe f92b 	bl	800c3a4 <__retarget_lock_release_recursive>
 800e14e:	89ab      	ldrh	r3, [r5, #12]
 800e150:	065b      	lsls	r3, r3, #25
 800e152:	f53f af1f 	bmi.w	800df94 <_vfiprintf_r+0x44>
 800e156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e158:	e71e      	b.n	800df98 <_vfiprintf_r+0x48>
 800e15a:	ab03      	add	r3, sp, #12
 800e15c:	9300      	str	r3, [sp, #0]
 800e15e:	462a      	mov	r2, r5
 800e160:	4b05      	ldr	r3, [pc, #20]	@ (800e178 <_vfiprintf_r+0x228>)
 800e162:	a904      	add	r1, sp, #16
 800e164:	4630      	mov	r0, r6
 800e166:	f7fd fe45 	bl	800bdf4 <_printf_i>
 800e16a:	e7e4      	b.n	800e136 <_vfiprintf_r+0x1e6>
 800e16c:	0800ec00 	.word	0x0800ec00
 800e170:	0800ec0a 	.word	0x0800ec0a
 800e174:	0800b8c5 	.word	0x0800b8c5
 800e178:	0800df2d 	.word	0x0800df2d
 800e17c:	0800ec06 	.word	0x0800ec06

0800e180 <__swbuf_r>:
 800e180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e182:	460e      	mov	r6, r1
 800e184:	4614      	mov	r4, r2
 800e186:	4605      	mov	r5, r0
 800e188:	b118      	cbz	r0, 800e192 <__swbuf_r+0x12>
 800e18a:	6a03      	ldr	r3, [r0, #32]
 800e18c:	b90b      	cbnz	r3, 800e192 <__swbuf_r+0x12>
 800e18e:	f7fd ffdd 	bl	800c14c <__sinit>
 800e192:	69a3      	ldr	r3, [r4, #24]
 800e194:	60a3      	str	r3, [r4, #8]
 800e196:	89a3      	ldrh	r3, [r4, #12]
 800e198:	071a      	lsls	r2, r3, #28
 800e19a:	d501      	bpl.n	800e1a0 <__swbuf_r+0x20>
 800e19c:	6923      	ldr	r3, [r4, #16]
 800e19e:	b943      	cbnz	r3, 800e1b2 <__swbuf_r+0x32>
 800e1a0:	4621      	mov	r1, r4
 800e1a2:	4628      	mov	r0, r5
 800e1a4:	f000 f82a 	bl	800e1fc <__swsetup_r>
 800e1a8:	b118      	cbz	r0, 800e1b2 <__swbuf_r+0x32>
 800e1aa:	f04f 37ff 	mov.w	r7, #4294967295
 800e1ae:	4638      	mov	r0, r7
 800e1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1b2:	6823      	ldr	r3, [r4, #0]
 800e1b4:	6922      	ldr	r2, [r4, #16]
 800e1b6:	1a98      	subs	r0, r3, r2
 800e1b8:	6963      	ldr	r3, [r4, #20]
 800e1ba:	b2f6      	uxtb	r6, r6
 800e1bc:	4283      	cmp	r3, r0
 800e1be:	4637      	mov	r7, r6
 800e1c0:	dc05      	bgt.n	800e1ce <__swbuf_r+0x4e>
 800e1c2:	4621      	mov	r1, r4
 800e1c4:	4628      	mov	r0, r5
 800e1c6:	f7ff fd99 	bl	800dcfc <_fflush_r>
 800e1ca:	2800      	cmp	r0, #0
 800e1cc:	d1ed      	bne.n	800e1aa <__swbuf_r+0x2a>
 800e1ce:	68a3      	ldr	r3, [r4, #8]
 800e1d0:	3b01      	subs	r3, #1
 800e1d2:	60a3      	str	r3, [r4, #8]
 800e1d4:	6823      	ldr	r3, [r4, #0]
 800e1d6:	1c5a      	adds	r2, r3, #1
 800e1d8:	6022      	str	r2, [r4, #0]
 800e1da:	701e      	strb	r6, [r3, #0]
 800e1dc:	6962      	ldr	r2, [r4, #20]
 800e1de:	1c43      	adds	r3, r0, #1
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d004      	beq.n	800e1ee <__swbuf_r+0x6e>
 800e1e4:	89a3      	ldrh	r3, [r4, #12]
 800e1e6:	07db      	lsls	r3, r3, #31
 800e1e8:	d5e1      	bpl.n	800e1ae <__swbuf_r+0x2e>
 800e1ea:	2e0a      	cmp	r6, #10
 800e1ec:	d1df      	bne.n	800e1ae <__swbuf_r+0x2e>
 800e1ee:	4621      	mov	r1, r4
 800e1f0:	4628      	mov	r0, r5
 800e1f2:	f7ff fd83 	bl	800dcfc <_fflush_r>
 800e1f6:	2800      	cmp	r0, #0
 800e1f8:	d0d9      	beq.n	800e1ae <__swbuf_r+0x2e>
 800e1fa:	e7d6      	b.n	800e1aa <__swbuf_r+0x2a>

0800e1fc <__swsetup_r>:
 800e1fc:	b538      	push	{r3, r4, r5, lr}
 800e1fe:	4b29      	ldr	r3, [pc, #164]	@ (800e2a4 <__swsetup_r+0xa8>)
 800e200:	4605      	mov	r5, r0
 800e202:	6818      	ldr	r0, [r3, #0]
 800e204:	460c      	mov	r4, r1
 800e206:	b118      	cbz	r0, 800e210 <__swsetup_r+0x14>
 800e208:	6a03      	ldr	r3, [r0, #32]
 800e20a:	b90b      	cbnz	r3, 800e210 <__swsetup_r+0x14>
 800e20c:	f7fd ff9e 	bl	800c14c <__sinit>
 800e210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e214:	0719      	lsls	r1, r3, #28
 800e216:	d422      	bmi.n	800e25e <__swsetup_r+0x62>
 800e218:	06da      	lsls	r2, r3, #27
 800e21a:	d407      	bmi.n	800e22c <__swsetup_r+0x30>
 800e21c:	2209      	movs	r2, #9
 800e21e:	602a      	str	r2, [r5, #0]
 800e220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e224:	81a3      	strh	r3, [r4, #12]
 800e226:	f04f 30ff 	mov.w	r0, #4294967295
 800e22a:	e033      	b.n	800e294 <__swsetup_r+0x98>
 800e22c:	0758      	lsls	r0, r3, #29
 800e22e:	d512      	bpl.n	800e256 <__swsetup_r+0x5a>
 800e230:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e232:	b141      	cbz	r1, 800e246 <__swsetup_r+0x4a>
 800e234:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e238:	4299      	cmp	r1, r3
 800e23a:	d002      	beq.n	800e242 <__swsetup_r+0x46>
 800e23c:	4628      	mov	r0, r5
 800e23e:	f7fe feff 	bl	800d040 <_free_r>
 800e242:	2300      	movs	r3, #0
 800e244:	6363      	str	r3, [r4, #52]	@ 0x34
 800e246:	89a3      	ldrh	r3, [r4, #12]
 800e248:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e24c:	81a3      	strh	r3, [r4, #12]
 800e24e:	2300      	movs	r3, #0
 800e250:	6063      	str	r3, [r4, #4]
 800e252:	6923      	ldr	r3, [r4, #16]
 800e254:	6023      	str	r3, [r4, #0]
 800e256:	89a3      	ldrh	r3, [r4, #12]
 800e258:	f043 0308 	orr.w	r3, r3, #8
 800e25c:	81a3      	strh	r3, [r4, #12]
 800e25e:	6923      	ldr	r3, [r4, #16]
 800e260:	b94b      	cbnz	r3, 800e276 <__swsetup_r+0x7a>
 800e262:	89a3      	ldrh	r3, [r4, #12]
 800e264:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e26c:	d003      	beq.n	800e276 <__swsetup_r+0x7a>
 800e26e:	4621      	mov	r1, r4
 800e270:	4628      	mov	r0, r5
 800e272:	f000 f883 	bl	800e37c <__smakebuf_r>
 800e276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e27a:	f013 0201 	ands.w	r2, r3, #1
 800e27e:	d00a      	beq.n	800e296 <__swsetup_r+0x9a>
 800e280:	2200      	movs	r2, #0
 800e282:	60a2      	str	r2, [r4, #8]
 800e284:	6962      	ldr	r2, [r4, #20]
 800e286:	4252      	negs	r2, r2
 800e288:	61a2      	str	r2, [r4, #24]
 800e28a:	6922      	ldr	r2, [r4, #16]
 800e28c:	b942      	cbnz	r2, 800e2a0 <__swsetup_r+0xa4>
 800e28e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e292:	d1c5      	bne.n	800e220 <__swsetup_r+0x24>
 800e294:	bd38      	pop	{r3, r4, r5, pc}
 800e296:	0799      	lsls	r1, r3, #30
 800e298:	bf58      	it	pl
 800e29a:	6962      	ldrpl	r2, [r4, #20]
 800e29c:	60a2      	str	r2, [r4, #8]
 800e29e:	e7f4      	b.n	800e28a <__swsetup_r+0x8e>
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	e7f7      	b.n	800e294 <__swsetup_r+0x98>
 800e2a4:	20000118 	.word	0x20000118

0800e2a8 <_raise_r>:
 800e2a8:	291f      	cmp	r1, #31
 800e2aa:	b538      	push	{r3, r4, r5, lr}
 800e2ac:	4605      	mov	r5, r0
 800e2ae:	460c      	mov	r4, r1
 800e2b0:	d904      	bls.n	800e2bc <_raise_r+0x14>
 800e2b2:	2316      	movs	r3, #22
 800e2b4:	6003      	str	r3, [r0, #0]
 800e2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ba:	bd38      	pop	{r3, r4, r5, pc}
 800e2bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e2be:	b112      	cbz	r2, 800e2c6 <_raise_r+0x1e>
 800e2c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2c4:	b94b      	cbnz	r3, 800e2da <_raise_r+0x32>
 800e2c6:	4628      	mov	r0, r5
 800e2c8:	f000 f830 	bl	800e32c <_getpid_r>
 800e2cc:	4622      	mov	r2, r4
 800e2ce:	4601      	mov	r1, r0
 800e2d0:	4628      	mov	r0, r5
 800e2d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2d6:	f000 b817 	b.w	800e308 <_kill_r>
 800e2da:	2b01      	cmp	r3, #1
 800e2dc:	d00a      	beq.n	800e2f4 <_raise_r+0x4c>
 800e2de:	1c59      	adds	r1, r3, #1
 800e2e0:	d103      	bne.n	800e2ea <_raise_r+0x42>
 800e2e2:	2316      	movs	r3, #22
 800e2e4:	6003      	str	r3, [r0, #0]
 800e2e6:	2001      	movs	r0, #1
 800e2e8:	e7e7      	b.n	800e2ba <_raise_r+0x12>
 800e2ea:	2100      	movs	r1, #0
 800e2ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	4798      	blx	r3
 800e2f4:	2000      	movs	r0, #0
 800e2f6:	e7e0      	b.n	800e2ba <_raise_r+0x12>

0800e2f8 <raise>:
 800e2f8:	4b02      	ldr	r3, [pc, #8]	@ (800e304 <raise+0xc>)
 800e2fa:	4601      	mov	r1, r0
 800e2fc:	6818      	ldr	r0, [r3, #0]
 800e2fe:	f7ff bfd3 	b.w	800e2a8 <_raise_r>
 800e302:	bf00      	nop
 800e304:	20000118 	.word	0x20000118

0800e308 <_kill_r>:
 800e308:	b538      	push	{r3, r4, r5, lr}
 800e30a:	4d07      	ldr	r5, [pc, #28]	@ (800e328 <_kill_r+0x20>)
 800e30c:	2300      	movs	r3, #0
 800e30e:	4604      	mov	r4, r0
 800e310:	4608      	mov	r0, r1
 800e312:	4611      	mov	r1, r2
 800e314:	602b      	str	r3, [r5, #0]
 800e316:	f7f3 fd8b 	bl	8001e30 <_kill>
 800e31a:	1c43      	adds	r3, r0, #1
 800e31c:	d102      	bne.n	800e324 <_kill_r+0x1c>
 800e31e:	682b      	ldr	r3, [r5, #0]
 800e320:	b103      	cbz	r3, 800e324 <_kill_r+0x1c>
 800e322:	6023      	str	r3, [r4, #0]
 800e324:	bd38      	pop	{r3, r4, r5, pc}
 800e326:	bf00      	nop
 800e328:	20002158 	.word	0x20002158

0800e32c <_getpid_r>:
 800e32c:	f7f3 bd78 	b.w	8001e20 <_getpid>

0800e330 <__swhatbuf_r>:
 800e330:	b570      	push	{r4, r5, r6, lr}
 800e332:	460c      	mov	r4, r1
 800e334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e338:	2900      	cmp	r1, #0
 800e33a:	b096      	sub	sp, #88	@ 0x58
 800e33c:	4615      	mov	r5, r2
 800e33e:	461e      	mov	r6, r3
 800e340:	da0d      	bge.n	800e35e <__swhatbuf_r+0x2e>
 800e342:	89a3      	ldrh	r3, [r4, #12]
 800e344:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e348:	f04f 0100 	mov.w	r1, #0
 800e34c:	bf14      	ite	ne
 800e34e:	2340      	movne	r3, #64	@ 0x40
 800e350:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e354:	2000      	movs	r0, #0
 800e356:	6031      	str	r1, [r6, #0]
 800e358:	602b      	str	r3, [r5, #0]
 800e35a:	b016      	add	sp, #88	@ 0x58
 800e35c:	bd70      	pop	{r4, r5, r6, pc}
 800e35e:	466a      	mov	r2, sp
 800e360:	f000 f848 	bl	800e3f4 <_fstat_r>
 800e364:	2800      	cmp	r0, #0
 800e366:	dbec      	blt.n	800e342 <__swhatbuf_r+0x12>
 800e368:	9901      	ldr	r1, [sp, #4]
 800e36a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e36e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e372:	4259      	negs	r1, r3
 800e374:	4159      	adcs	r1, r3
 800e376:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e37a:	e7eb      	b.n	800e354 <__swhatbuf_r+0x24>

0800e37c <__smakebuf_r>:
 800e37c:	898b      	ldrh	r3, [r1, #12]
 800e37e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e380:	079d      	lsls	r5, r3, #30
 800e382:	4606      	mov	r6, r0
 800e384:	460c      	mov	r4, r1
 800e386:	d507      	bpl.n	800e398 <__smakebuf_r+0x1c>
 800e388:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e38c:	6023      	str	r3, [r4, #0]
 800e38e:	6123      	str	r3, [r4, #16]
 800e390:	2301      	movs	r3, #1
 800e392:	6163      	str	r3, [r4, #20]
 800e394:	b003      	add	sp, #12
 800e396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e398:	ab01      	add	r3, sp, #4
 800e39a:	466a      	mov	r2, sp
 800e39c:	f7ff ffc8 	bl	800e330 <__swhatbuf_r>
 800e3a0:	9f00      	ldr	r7, [sp, #0]
 800e3a2:	4605      	mov	r5, r0
 800e3a4:	4639      	mov	r1, r7
 800e3a6:	4630      	mov	r0, r6
 800e3a8:	f7fe febe 	bl	800d128 <_malloc_r>
 800e3ac:	b948      	cbnz	r0, 800e3c2 <__smakebuf_r+0x46>
 800e3ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3b2:	059a      	lsls	r2, r3, #22
 800e3b4:	d4ee      	bmi.n	800e394 <__smakebuf_r+0x18>
 800e3b6:	f023 0303 	bic.w	r3, r3, #3
 800e3ba:	f043 0302 	orr.w	r3, r3, #2
 800e3be:	81a3      	strh	r3, [r4, #12]
 800e3c0:	e7e2      	b.n	800e388 <__smakebuf_r+0xc>
 800e3c2:	89a3      	ldrh	r3, [r4, #12]
 800e3c4:	6020      	str	r0, [r4, #0]
 800e3c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3ca:	81a3      	strh	r3, [r4, #12]
 800e3cc:	9b01      	ldr	r3, [sp, #4]
 800e3ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e3d2:	b15b      	cbz	r3, 800e3ec <__smakebuf_r+0x70>
 800e3d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3d8:	4630      	mov	r0, r6
 800e3da:	f000 f81d 	bl	800e418 <_isatty_r>
 800e3de:	b128      	cbz	r0, 800e3ec <__smakebuf_r+0x70>
 800e3e0:	89a3      	ldrh	r3, [r4, #12]
 800e3e2:	f023 0303 	bic.w	r3, r3, #3
 800e3e6:	f043 0301 	orr.w	r3, r3, #1
 800e3ea:	81a3      	strh	r3, [r4, #12]
 800e3ec:	89a3      	ldrh	r3, [r4, #12]
 800e3ee:	431d      	orrs	r5, r3
 800e3f0:	81a5      	strh	r5, [r4, #12]
 800e3f2:	e7cf      	b.n	800e394 <__smakebuf_r+0x18>

0800e3f4 <_fstat_r>:
 800e3f4:	b538      	push	{r3, r4, r5, lr}
 800e3f6:	4d07      	ldr	r5, [pc, #28]	@ (800e414 <_fstat_r+0x20>)
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	4604      	mov	r4, r0
 800e3fc:	4608      	mov	r0, r1
 800e3fe:	4611      	mov	r1, r2
 800e400:	602b      	str	r3, [r5, #0]
 800e402:	f7f3 fd75 	bl	8001ef0 <_fstat>
 800e406:	1c43      	adds	r3, r0, #1
 800e408:	d102      	bne.n	800e410 <_fstat_r+0x1c>
 800e40a:	682b      	ldr	r3, [r5, #0]
 800e40c:	b103      	cbz	r3, 800e410 <_fstat_r+0x1c>
 800e40e:	6023      	str	r3, [r4, #0]
 800e410:	bd38      	pop	{r3, r4, r5, pc}
 800e412:	bf00      	nop
 800e414:	20002158 	.word	0x20002158

0800e418 <_isatty_r>:
 800e418:	b538      	push	{r3, r4, r5, lr}
 800e41a:	4d06      	ldr	r5, [pc, #24]	@ (800e434 <_isatty_r+0x1c>)
 800e41c:	2300      	movs	r3, #0
 800e41e:	4604      	mov	r4, r0
 800e420:	4608      	mov	r0, r1
 800e422:	602b      	str	r3, [r5, #0]
 800e424:	f7f3 fd74 	bl	8001f10 <_isatty>
 800e428:	1c43      	adds	r3, r0, #1
 800e42a:	d102      	bne.n	800e432 <_isatty_r+0x1a>
 800e42c:	682b      	ldr	r3, [r5, #0]
 800e42e:	b103      	cbz	r3, 800e432 <_isatty_r+0x1a>
 800e430:	6023      	str	r3, [r4, #0]
 800e432:	bd38      	pop	{r3, r4, r5, pc}
 800e434:	20002158 	.word	0x20002158

0800e438 <atan2>:
 800e438:	f000 b802 	b.w	800e440 <__ieee754_atan2>
 800e43c:	0000      	movs	r0, r0
	...

0800e440 <__ieee754_atan2>:
 800e440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e444:	ec57 6b11 	vmov	r6, r7, d1
 800e448:	4273      	negs	r3, r6
 800e44a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800e5c8 <__ieee754_atan2+0x188>
 800e44e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800e452:	4333      	orrs	r3, r6
 800e454:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e458:	4543      	cmp	r3, r8
 800e45a:	ec51 0b10 	vmov	r0, r1, d0
 800e45e:	4635      	mov	r5, r6
 800e460:	d809      	bhi.n	800e476 <__ieee754_atan2+0x36>
 800e462:	4244      	negs	r4, r0
 800e464:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e468:	4304      	orrs	r4, r0
 800e46a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e46e:	4544      	cmp	r4, r8
 800e470:	468e      	mov	lr, r1
 800e472:	4681      	mov	r9, r0
 800e474:	d907      	bls.n	800e486 <__ieee754_atan2+0x46>
 800e476:	4632      	mov	r2, r6
 800e478:	463b      	mov	r3, r7
 800e47a:	f7f1 ff0f 	bl	800029c <__adddf3>
 800e47e:	ec41 0b10 	vmov	d0, r0, r1
 800e482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e486:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800e48a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800e48e:	4334      	orrs	r4, r6
 800e490:	d103      	bne.n	800e49a <__ieee754_atan2+0x5a>
 800e492:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e496:	f000 b89b 	b.w	800e5d0 <atan>
 800e49a:	17bc      	asrs	r4, r7, #30
 800e49c:	f004 0402 	and.w	r4, r4, #2
 800e4a0:	ea53 0909 	orrs.w	r9, r3, r9
 800e4a4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e4a8:	d107      	bne.n	800e4ba <__ieee754_atan2+0x7a>
 800e4aa:	2c02      	cmp	r4, #2
 800e4ac:	d05f      	beq.n	800e56e <__ieee754_atan2+0x12e>
 800e4ae:	2c03      	cmp	r4, #3
 800e4b0:	d1e5      	bne.n	800e47e <__ieee754_atan2+0x3e>
 800e4b2:	a141      	add	r1, pc, #260	@ (adr r1, 800e5b8 <__ieee754_atan2+0x178>)
 800e4b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4b8:	e7e1      	b.n	800e47e <__ieee754_atan2+0x3e>
 800e4ba:	4315      	orrs	r5, r2
 800e4bc:	d106      	bne.n	800e4cc <__ieee754_atan2+0x8c>
 800e4be:	f1be 0f00 	cmp.w	lr, #0
 800e4c2:	da5f      	bge.n	800e584 <__ieee754_atan2+0x144>
 800e4c4:	a13e      	add	r1, pc, #248	@ (adr r1, 800e5c0 <__ieee754_atan2+0x180>)
 800e4c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4ca:	e7d8      	b.n	800e47e <__ieee754_atan2+0x3e>
 800e4cc:	4542      	cmp	r2, r8
 800e4ce:	d10f      	bne.n	800e4f0 <__ieee754_atan2+0xb0>
 800e4d0:	4293      	cmp	r3, r2
 800e4d2:	f104 34ff 	add.w	r4, r4, #4294967295
 800e4d6:	d107      	bne.n	800e4e8 <__ieee754_atan2+0xa8>
 800e4d8:	2c02      	cmp	r4, #2
 800e4da:	d84c      	bhi.n	800e576 <__ieee754_atan2+0x136>
 800e4dc:	4b34      	ldr	r3, [pc, #208]	@ (800e5b0 <__ieee754_atan2+0x170>)
 800e4de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e4e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e4e6:	e7ca      	b.n	800e47e <__ieee754_atan2+0x3e>
 800e4e8:	2c02      	cmp	r4, #2
 800e4ea:	d848      	bhi.n	800e57e <__ieee754_atan2+0x13e>
 800e4ec:	4b31      	ldr	r3, [pc, #196]	@ (800e5b4 <__ieee754_atan2+0x174>)
 800e4ee:	e7f6      	b.n	800e4de <__ieee754_atan2+0x9e>
 800e4f0:	4543      	cmp	r3, r8
 800e4f2:	d0e4      	beq.n	800e4be <__ieee754_atan2+0x7e>
 800e4f4:	1a9b      	subs	r3, r3, r2
 800e4f6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800e4fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e4fe:	da1e      	bge.n	800e53e <__ieee754_atan2+0xfe>
 800e500:	2f00      	cmp	r7, #0
 800e502:	da01      	bge.n	800e508 <__ieee754_atan2+0xc8>
 800e504:	323c      	adds	r2, #60	@ 0x3c
 800e506:	db1e      	blt.n	800e546 <__ieee754_atan2+0x106>
 800e508:	4632      	mov	r2, r6
 800e50a:	463b      	mov	r3, r7
 800e50c:	f7f2 f9a6 	bl	800085c <__aeabi_ddiv>
 800e510:	ec41 0b10 	vmov	d0, r0, r1
 800e514:	f000 f9f4 	bl	800e900 <fabs>
 800e518:	f000 f85a 	bl	800e5d0 <atan>
 800e51c:	ec51 0b10 	vmov	r0, r1, d0
 800e520:	2c01      	cmp	r4, #1
 800e522:	d013      	beq.n	800e54c <__ieee754_atan2+0x10c>
 800e524:	2c02      	cmp	r4, #2
 800e526:	d015      	beq.n	800e554 <__ieee754_atan2+0x114>
 800e528:	2c00      	cmp	r4, #0
 800e52a:	d0a8      	beq.n	800e47e <__ieee754_atan2+0x3e>
 800e52c:	a318      	add	r3, pc, #96	@ (adr r3, 800e590 <__ieee754_atan2+0x150>)
 800e52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e532:	f7f1 feb1 	bl	8000298 <__aeabi_dsub>
 800e536:	a318      	add	r3, pc, #96	@ (adr r3, 800e598 <__ieee754_atan2+0x158>)
 800e538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53c:	e014      	b.n	800e568 <__ieee754_atan2+0x128>
 800e53e:	a118      	add	r1, pc, #96	@ (adr r1, 800e5a0 <__ieee754_atan2+0x160>)
 800e540:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e544:	e7ec      	b.n	800e520 <__ieee754_atan2+0xe0>
 800e546:	2000      	movs	r0, #0
 800e548:	2100      	movs	r1, #0
 800e54a:	e7e9      	b.n	800e520 <__ieee754_atan2+0xe0>
 800e54c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e550:	4619      	mov	r1, r3
 800e552:	e794      	b.n	800e47e <__ieee754_atan2+0x3e>
 800e554:	a30e      	add	r3, pc, #56	@ (adr r3, 800e590 <__ieee754_atan2+0x150>)
 800e556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55a:	f7f1 fe9d 	bl	8000298 <__aeabi_dsub>
 800e55e:	4602      	mov	r2, r0
 800e560:	460b      	mov	r3, r1
 800e562:	a10d      	add	r1, pc, #52	@ (adr r1, 800e598 <__ieee754_atan2+0x158>)
 800e564:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e568:	f7f1 fe96 	bl	8000298 <__aeabi_dsub>
 800e56c:	e787      	b.n	800e47e <__ieee754_atan2+0x3e>
 800e56e:	a10a      	add	r1, pc, #40	@ (adr r1, 800e598 <__ieee754_atan2+0x158>)
 800e570:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e574:	e783      	b.n	800e47e <__ieee754_atan2+0x3e>
 800e576:	a10c      	add	r1, pc, #48	@ (adr r1, 800e5a8 <__ieee754_atan2+0x168>)
 800e578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e57c:	e77f      	b.n	800e47e <__ieee754_atan2+0x3e>
 800e57e:	2000      	movs	r0, #0
 800e580:	2100      	movs	r1, #0
 800e582:	e77c      	b.n	800e47e <__ieee754_atan2+0x3e>
 800e584:	a106      	add	r1, pc, #24	@ (adr r1, 800e5a0 <__ieee754_atan2+0x160>)
 800e586:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e58a:	e778      	b.n	800e47e <__ieee754_atan2+0x3e>
 800e58c:	f3af 8000 	nop.w
 800e590:	33145c07 	.word	0x33145c07
 800e594:	3ca1a626 	.word	0x3ca1a626
 800e598:	54442d18 	.word	0x54442d18
 800e59c:	400921fb 	.word	0x400921fb
 800e5a0:	54442d18 	.word	0x54442d18
 800e5a4:	3ff921fb 	.word	0x3ff921fb
 800e5a8:	54442d18 	.word	0x54442d18
 800e5ac:	3fe921fb 	.word	0x3fe921fb
 800e5b0:	0800ed70 	.word	0x0800ed70
 800e5b4:	0800ed58 	.word	0x0800ed58
 800e5b8:	54442d18 	.word	0x54442d18
 800e5bc:	c00921fb 	.word	0xc00921fb
 800e5c0:	54442d18 	.word	0x54442d18
 800e5c4:	bff921fb 	.word	0xbff921fb
 800e5c8:	7ff00000 	.word	0x7ff00000
 800e5cc:	00000000 	.word	0x00000000

0800e5d0 <atan>:
 800e5d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d4:	ec55 4b10 	vmov	r4, r5, d0
 800e5d8:	4bbf      	ldr	r3, [pc, #764]	@ (800e8d8 <atan+0x308>)
 800e5da:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e5de:	429e      	cmp	r6, r3
 800e5e0:	46ab      	mov	fp, r5
 800e5e2:	d918      	bls.n	800e616 <atan+0x46>
 800e5e4:	4bbd      	ldr	r3, [pc, #756]	@ (800e8dc <atan+0x30c>)
 800e5e6:	429e      	cmp	r6, r3
 800e5e8:	d801      	bhi.n	800e5ee <atan+0x1e>
 800e5ea:	d109      	bne.n	800e600 <atan+0x30>
 800e5ec:	b144      	cbz	r4, 800e600 <atan+0x30>
 800e5ee:	4622      	mov	r2, r4
 800e5f0:	462b      	mov	r3, r5
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	4629      	mov	r1, r5
 800e5f6:	f7f1 fe51 	bl	800029c <__adddf3>
 800e5fa:	4604      	mov	r4, r0
 800e5fc:	460d      	mov	r5, r1
 800e5fe:	e006      	b.n	800e60e <atan+0x3e>
 800e600:	f1bb 0f00 	cmp.w	fp, #0
 800e604:	f340 812b 	ble.w	800e85e <atan+0x28e>
 800e608:	a597      	add	r5, pc, #604	@ (adr r5, 800e868 <atan+0x298>)
 800e60a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e60e:	ec45 4b10 	vmov	d0, r4, r5
 800e612:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e616:	4bb2      	ldr	r3, [pc, #712]	@ (800e8e0 <atan+0x310>)
 800e618:	429e      	cmp	r6, r3
 800e61a:	d813      	bhi.n	800e644 <atan+0x74>
 800e61c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800e620:	429e      	cmp	r6, r3
 800e622:	d80c      	bhi.n	800e63e <atan+0x6e>
 800e624:	a392      	add	r3, pc, #584	@ (adr r3, 800e870 <atan+0x2a0>)
 800e626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e62a:	4620      	mov	r0, r4
 800e62c:	4629      	mov	r1, r5
 800e62e:	f7f1 fe35 	bl	800029c <__adddf3>
 800e632:	4bac      	ldr	r3, [pc, #688]	@ (800e8e4 <atan+0x314>)
 800e634:	2200      	movs	r2, #0
 800e636:	f7f2 fa77 	bl	8000b28 <__aeabi_dcmpgt>
 800e63a:	2800      	cmp	r0, #0
 800e63c:	d1e7      	bne.n	800e60e <atan+0x3e>
 800e63e:	f04f 3aff 	mov.w	sl, #4294967295
 800e642:	e029      	b.n	800e698 <atan+0xc8>
 800e644:	f000 f95c 	bl	800e900 <fabs>
 800e648:	4ba7      	ldr	r3, [pc, #668]	@ (800e8e8 <atan+0x318>)
 800e64a:	429e      	cmp	r6, r3
 800e64c:	ec55 4b10 	vmov	r4, r5, d0
 800e650:	f200 80bc 	bhi.w	800e7cc <atan+0x1fc>
 800e654:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800e658:	429e      	cmp	r6, r3
 800e65a:	f200 809e 	bhi.w	800e79a <atan+0x1ca>
 800e65e:	4622      	mov	r2, r4
 800e660:	462b      	mov	r3, r5
 800e662:	4620      	mov	r0, r4
 800e664:	4629      	mov	r1, r5
 800e666:	f7f1 fe19 	bl	800029c <__adddf3>
 800e66a:	4b9e      	ldr	r3, [pc, #632]	@ (800e8e4 <atan+0x314>)
 800e66c:	2200      	movs	r2, #0
 800e66e:	f7f1 fe13 	bl	8000298 <__aeabi_dsub>
 800e672:	2200      	movs	r2, #0
 800e674:	4606      	mov	r6, r0
 800e676:	460f      	mov	r7, r1
 800e678:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e67c:	4620      	mov	r0, r4
 800e67e:	4629      	mov	r1, r5
 800e680:	f7f1 fe0c 	bl	800029c <__adddf3>
 800e684:	4602      	mov	r2, r0
 800e686:	460b      	mov	r3, r1
 800e688:	4630      	mov	r0, r6
 800e68a:	4639      	mov	r1, r7
 800e68c:	f7f2 f8e6 	bl	800085c <__aeabi_ddiv>
 800e690:	f04f 0a00 	mov.w	sl, #0
 800e694:	4604      	mov	r4, r0
 800e696:	460d      	mov	r5, r1
 800e698:	4622      	mov	r2, r4
 800e69a:	462b      	mov	r3, r5
 800e69c:	4620      	mov	r0, r4
 800e69e:	4629      	mov	r1, r5
 800e6a0:	f7f1 ffb2 	bl	8000608 <__aeabi_dmul>
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	4680      	mov	r8, r0
 800e6aa:	4689      	mov	r9, r1
 800e6ac:	f7f1 ffac 	bl	8000608 <__aeabi_dmul>
 800e6b0:	a371      	add	r3, pc, #452	@ (adr r3, 800e878 <atan+0x2a8>)
 800e6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b6:	4606      	mov	r6, r0
 800e6b8:	460f      	mov	r7, r1
 800e6ba:	f7f1 ffa5 	bl	8000608 <__aeabi_dmul>
 800e6be:	a370      	add	r3, pc, #448	@ (adr r3, 800e880 <atan+0x2b0>)
 800e6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c4:	f7f1 fdea 	bl	800029c <__adddf3>
 800e6c8:	4632      	mov	r2, r6
 800e6ca:	463b      	mov	r3, r7
 800e6cc:	f7f1 ff9c 	bl	8000608 <__aeabi_dmul>
 800e6d0:	a36d      	add	r3, pc, #436	@ (adr r3, 800e888 <atan+0x2b8>)
 800e6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d6:	f7f1 fde1 	bl	800029c <__adddf3>
 800e6da:	4632      	mov	r2, r6
 800e6dc:	463b      	mov	r3, r7
 800e6de:	f7f1 ff93 	bl	8000608 <__aeabi_dmul>
 800e6e2:	a36b      	add	r3, pc, #428	@ (adr r3, 800e890 <atan+0x2c0>)
 800e6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e8:	f7f1 fdd8 	bl	800029c <__adddf3>
 800e6ec:	4632      	mov	r2, r6
 800e6ee:	463b      	mov	r3, r7
 800e6f0:	f7f1 ff8a 	bl	8000608 <__aeabi_dmul>
 800e6f4:	a368      	add	r3, pc, #416	@ (adr r3, 800e898 <atan+0x2c8>)
 800e6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6fa:	f7f1 fdcf 	bl	800029c <__adddf3>
 800e6fe:	4632      	mov	r2, r6
 800e700:	463b      	mov	r3, r7
 800e702:	f7f1 ff81 	bl	8000608 <__aeabi_dmul>
 800e706:	a366      	add	r3, pc, #408	@ (adr r3, 800e8a0 <atan+0x2d0>)
 800e708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70c:	f7f1 fdc6 	bl	800029c <__adddf3>
 800e710:	4642      	mov	r2, r8
 800e712:	464b      	mov	r3, r9
 800e714:	f7f1 ff78 	bl	8000608 <__aeabi_dmul>
 800e718:	a363      	add	r3, pc, #396	@ (adr r3, 800e8a8 <atan+0x2d8>)
 800e71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e71e:	4680      	mov	r8, r0
 800e720:	4689      	mov	r9, r1
 800e722:	4630      	mov	r0, r6
 800e724:	4639      	mov	r1, r7
 800e726:	f7f1 ff6f 	bl	8000608 <__aeabi_dmul>
 800e72a:	a361      	add	r3, pc, #388	@ (adr r3, 800e8b0 <atan+0x2e0>)
 800e72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e730:	f7f1 fdb2 	bl	8000298 <__aeabi_dsub>
 800e734:	4632      	mov	r2, r6
 800e736:	463b      	mov	r3, r7
 800e738:	f7f1 ff66 	bl	8000608 <__aeabi_dmul>
 800e73c:	a35e      	add	r3, pc, #376	@ (adr r3, 800e8b8 <atan+0x2e8>)
 800e73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e742:	f7f1 fda9 	bl	8000298 <__aeabi_dsub>
 800e746:	4632      	mov	r2, r6
 800e748:	463b      	mov	r3, r7
 800e74a:	f7f1 ff5d 	bl	8000608 <__aeabi_dmul>
 800e74e:	a35c      	add	r3, pc, #368	@ (adr r3, 800e8c0 <atan+0x2f0>)
 800e750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e754:	f7f1 fda0 	bl	8000298 <__aeabi_dsub>
 800e758:	4632      	mov	r2, r6
 800e75a:	463b      	mov	r3, r7
 800e75c:	f7f1 ff54 	bl	8000608 <__aeabi_dmul>
 800e760:	a359      	add	r3, pc, #356	@ (adr r3, 800e8c8 <atan+0x2f8>)
 800e762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e766:	f7f1 fd97 	bl	8000298 <__aeabi_dsub>
 800e76a:	4632      	mov	r2, r6
 800e76c:	463b      	mov	r3, r7
 800e76e:	f7f1 ff4b 	bl	8000608 <__aeabi_dmul>
 800e772:	4602      	mov	r2, r0
 800e774:	460b      	mov	r3, r1
 800e776:	4640      	mov	r0, r8
 800e778:	4649      	mov	r1, r9
 800e77a:	f7f1 fd8f 	bl	800029c <__adddf3>
 800e77e:	4622      	mov	r2, r4
 800e780:	462b      	mov	r3, r5
 800e782:	f7f1 ff41 	bl	8000608 <__aeabi_dmul>
 800e786:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e78a:	4602      	mov	r2, r0
 800e78c:	460b      	mov	r3, r1
 800e78e:	d148      	bne.n	800e822 <atan+0x252>
 800e790:	4620      	mov	r0, r4
 800e792:	4629      	mov	r1, r5
 800e794:	f7f1 fd80 	bl	8000298 <__aeabi_dsub>
 800e798:	e72f      	b.n	800e5fa <atan+0x2a>
 800e79a:	4b52      	ldr	r3, [pc, #328]	@ (800e8e4 <atan+0x314>)
 800e79c:	2200      	movs	r2, #0
 800e79e:	4620      	mov	r0, r4
 800e7a0:	4629      	mov	r1, r5
 800e7a2:	f7f1 fd79 	bl	8000298 <__aeabi_dsub>
 800e7a6:	4b4f      	ldr	r3, [pc, #316]	@ (800e8e4 <atan+0x314>)
 800e7a8:	4606      	mov	r6, r0
 800e7aa:	460f      	mov	r7, r1
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	4629      	mov	r1, r5
 800e7b2:	f7f1 fd73 	bl	800029c <__adddf3>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	4630      	mov	r0, r6
 800e7bc:	4639      	mov	r1, r7
 800e7be:	f7f2 f84d 	bl	800085c <__aeabi_ddiv>
 800e7c2:	f04f 0a01 	mov.w	sl, #1
 800e7c6:	4604      	mov	r4, r0
 800e7c8:	460d      	mov	r5, r1
 800e7ca:	e765      	b.n	800e698 <atan+0xc8>
 800e7cc:	4b47      	ldr	r3, [pc, #284]	@ (800e8ec <atan+0x31c>)
 800e7ce:	429e      	cmp	r6, r3
 800e7d0:	d21c      	bcs.n	800e80c <atan+0x23c>
 800e7d2:	4b47      	ldr	r3, [pc, #284]	@ (800e8f0 <atan+0x320>)
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	4620      	mov	r0, r4
 800e7d8:	4629      	mov	r1, r5
 800e7da:	f7f1 fd5d 	bl	8000298 <__aeabi_dsub>
 800e7de:	4b44      	ldr	r3, [pc, #272]	@ (800e8f0 <atan+0x320>)
 800e7e0:	4606      	mov	r6, r0
 800e7e2:	460f      	mov	r7, r1
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	4629      	mov	r1, r5
 800e7ea:	f7f1 ff0d 	bl	8000608 <__aeabi_dmul>
 800e7ee:	4b3d      	ldr	r3, [pc, #244]	@ (800e8e4 <atan+0x314>)
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	f7f1 fd53 	bl	800029c <__adddf3>
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	4630      	mov	r0, r6
 800e7fc:	4639      	mov	r1, r7
 800e7fe:	f7f2 f82d 	bl	800085c <__aeabi_ddiv>
 800e802:	f04f 0a02 	mov.w	sl, #2
 800e806:	4604      	mov	r4, r0
 800e808:	460d      	mov	r5, r1
 800e80a:	e745      	b.n	800e698 <atan+0xc8>
 800e80c:	4622      	mov	r2, r4
 800e80e:	462b      	mov	r3, r5
 800e810:	4938      	ldr	r1, [pc, #224]	@ (800e8f4 <atan+0x324>)
 800e812:	2000      	movs	r0, #0
 800e814:	f7f2 f822 	bl	800085c <__aeabi_ddiv>
 800e818:	f04f 0a03 	mov.w	sl, #3
 800e81c:	4604      	mov	r4, r0
 800e81e:	460d      	mov	r5, r1
 800e820:	e73a      	b.n	800e698 <atan+0xc8>
 800e822:	4b35      	ldr	r3, [pc, #212]	@ (800e8f8 <atan+0x328>)
 800e824:	4e35      	ldr	r6, [pc, #212]	@ (800e8fc <atan+0x32c>)
 800e826:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e82e:	f7f1 fd33 	bl	8000298 <__aeabi_dsub>
 800e832:	4622      	mov	r2, r4
 800e834:	462b      	mov	r3, r5
 800e836:	f7f1 fd2f 	bl	8000298 <__aeabi_dsub>
 800e83a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e83e:	4602      	mov	r2, r0
 800e840:	460b      	mov	r3, r1
 800e842:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e846:	f7f1 fd27 	bl	8000298 <__aeabi_dsub>
 800e84a:	f1bb 0f00 	cmp.w	fp, #0
 800e84e:	4604      	mov	r4, r0
 800e850:	460d      	mov	r5, r1
 800e852:	f6bf aedc 	bge.w	800e60e <atan+0x3e>
 800e856:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e85a:	461d      	mov	r5, r3
 800e85c:	e6d7      	b.n	800e60e <atan+0x3e>
 800e85e:	a51c      	add	r5, pc, #112	@ (adr r5, 800e8d0 <atan+0x300>)
 800e860:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e864:	e6d3      	b.n	800e60e <atan+0x3e>
 800e866:	bf00      	nop
 800e868:	54442d18 	.word	0x54442d18
 800e86c:	3ff921fb 	.word	0x3ff921fb
 800e870:	8800759c 	.word	0x8800759c
 800e874:	7e37e43c 	.word	0x7e37e43c
 800e878:	e322da11 	.word	0xe322da11
 800e87c:	3f90ad3a 	.word	0x3f90ad3a
 800e880:	24760deb 	.word	0x24760deb
 800e884:	3fa97b4b 	.word	0x3fa97b4b
 800e888:	a0d03d51 	.word	0xa0d03d51
 800e88c:	3fb10d66 	.word	0x3fb10d66
 800e890:	c54c206e 	.word	0xc54c206e
 800e894:	3fb745cd 	.word	0x3fb745cd
 800e898:	920083ff 	.word	0x920083ff
 800e89c:	3fc24924 	.word	0x3fc24924
 800e8a0:	5555550d 	.word	0x5555550d
 800e8a4:	3fd55555 	.word	0x3fd55555
 800e8a8:	2c6a6c2f 	.word	0x2c6a6c2f
 800e8ac:	bfa2b444 	.word	0xbfa2b444
 800e8b0:	52defd9a 	.word	0x52defd9a
 800e8b4:	3fadde2d 	.word	0x3fadde2d
 800e8b8:	af749a6d 	.word	0xaf749a6d
 800e8bc:	3fb3b0f2 	.word	0x3fb3b0f2
 800e8c0:	fe231671 	.word	0xfe231671
 800e8c4:	3fbc71c6 	.word	0x3fbc71c6
 800e8c8:	9998ebc4 	.word	0x9998ebc4
 800e8cc:	3fc99999 	.word	0x3fc99999
 800e8d0:	54442d18 	.word	0x54442d18
 800e8d4:	bff921fb 	.word	0xbff921fb
 800e8d8:	440fffff 	.word	0x440fffff
 800e8dc:	7ff00000 	.word	0x7ff00000
 800e8e0:	3fdbffff 	.word	0x3fdbffff
 800e8e4:	3ff00000 	.word	0x3ff00000
 800e8e8:	3ff2ffff 	.word	0x3ff2ffff
 800e8ec:	40038000 	.word	0x40038000
 800e8f0:	3ff80000 	.word	0x3ff80000
 800e8f4:	bff00000 	.word	0xbff00000
 800e8f8:	0800ed88 	.word	0x0800ed88
 800e8fc:	0800eda8 	.word	0x0800eda8

0800e900 <fabs>:
 800e900:	ec51 0b10 	vmov	r0, r1, d0
 800e904:	4602      	mov	r2, r0
 800e906:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e90a:	ec43 2b10 	vmov	d0, r2, r3
 800e90e:	4770      	bx	lr

0800e910 <_init>:
 800e910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e912:	bf00      	nop
 800e914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e916:	bc08      	pop	{r3}
 800e918:	469e      	mov	lr, r3
 800e91a:	4770      	bx	lr

0800e91c <_fini>:
 800e91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e91e:	bf00      	nop
 800e920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e922:	bc08      	pop	{r3}
 800e924:	469e      	mov	lr, r3
 800e926:	4770      	bx	lr
