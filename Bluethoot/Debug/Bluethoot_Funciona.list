
Bluethoot_Funciona.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e918  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800eab8  0800eab8  0000fab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef40  0800ef40  000102c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef40  0800ef40  0000ff40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef48  0800ef48  000102c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef48  0800ef48  0000ff48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ef4c  0800ef4c  0000ff4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  0800ef50  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ee8  200002c8  0800f218  000102c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021b0  0800f218  000111b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a408  00000000  00000000  000102f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c5d  00000000  00000000  0002a700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  0002e360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001235  00000000  00000000  0002fac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aae7  00000000  00000000  00030cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d95e  00000000  00000000  0004b7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009738b  00000000  00000000  00069142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001004cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075c0  00000000  00000000  00100510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00107ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c8 	.word	0x200002c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800eaa0 	.word	0x0800eaa0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	0800eaa0 	.word	0x0800eaa0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <QMC5883L_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Función para inicializar el sensor QMC5883L
void QMC5883L_Init() {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af02      	add	r7, sp, #8
    uint8_t data[2];
    data[0] = 0x0B; // Registro de configuración 2
 8000f4e:	230b      	movs	r3, #11
 8000f50:	713b      	strb	r3, [r7, #4]
    data[1] = 0x01; // Reinicio de software
 8000f52:	2301      	movs	r3, #1
 8000f54:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c2, QMC5883L_ADDR, data, 2, 100);
 8000f56:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <QMC5883L_Init+0x48>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	1d3a      	adds	r2, r7, #4
 8000f5e:	2364      	movs	r3, #100	@ 0x64
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2302      	movs	r3, #2
 8000f64:	480b      	ldr	r0, [pc, #44]	@ (8000f94 <QMC5883L_Init+0x4c>)
 8000f66:	f001 fe53 	bl	8002c10 <HAL_I2C_Master_Transmit>

    data[0] = 0x09; // Registro de control
 8000f6a:	2309      	movs	r3, #9
 8000f6c:	713b      	strb	r3, [r7, #4]
    data[1] = 0x1D; // Configuración (ODR = 50Hz, RNG = 2G, OSR = 512)
 8000f6e:	231d      	movs	r3, #29
 8000f70:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c2, QMC5883L_ADDR, data, 2, 100);
 8000f72:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <QMC5883L_Init+0x48>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	4619      	mov	r1, r3
 8000f78:	1d3a      	adds	r2, r7, #4
 8000f7a:	2364      	movs	r3, #100	@ 0x64
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2302      	movs	r3, #2
 8000f80:	4804      	ldr	r0, [pc, #16]	@ (8000f94 <QMC5883L_Init+0x4c>)
 8000f82:	f001 fe45 	bl	8002c10 <HAL_I2C_Master_Transmit>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000000 	.word	0x20000000
 8000f94:	200002f8 	.word	0x200002f8

08000f98 <QMC5883L_Read>:
// Función para leer los datos de los ejes X, Y, Z
void QMC5883L_Read(int16_t *x, int16_t *y, int16_t *z, float *angulo) {
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af04      	add	r7, sp, #16
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	603b      	str	r3, [r7, #0]
    uint8_t data[6];
    HAL_I2C_Mem_Read(&hi2c2, QMC5883L_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, data, 6, 100);
 8000fa6:	4b42      	ldr	r3, [pc, #264]	@ (80010b0 <QMC5883L_Read+0x118>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	4619      	mov	r1, r3
 8000fac:	2364      	movs	r3, #100	@ 0x64
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2306      	movs	r3, #6
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	483d      	ldr	r0, [pc, #244]	@ (80010b4 <QMC5883L_Read+0x11c>)
 8000fc0:	f001 ff24 	bl	8002e0c <HAL_I2C_Mem_Read>

    *x = (int16_t)((data[1] << 8) | data[0]) - x_offset;
 8000fc4:	7c7b      	ldrb	r3, [r7, #17]
 8000fc6:	021b      	lsls	r3, r3, #8
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	7c3b      	ldrb	r3, [r7, #16]
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	4b38      	ldr	r3, [pc, #224]	@ (80010b8 <QMC5883L_Read+0x120>)
 8000fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((data[3] << 8) | data[2]) - y_offset;
 8000fe6:	7cfb      	ldrb	r3, [r7, #19]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	7cbb      	ldrb	r3, [r7, #18]
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	4b31      	ldr	r3, [pc, #196]	@ (80010bc <QMC5883L_Read+0x124>)
 8000ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	b29b      	uxth	r3, r3
 8001002:	b21a      	sxth	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((data[5] << 8) | data[4]);
 8001008:	7d7b      	ldrb	r3, [r7, #21]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	7d3b      	ldrb	r3, [r7, #20]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21a      	sxth	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	801a      	strh	r2, [r3, #0]

    // Calcular el ángulo en grados
    *angulo = atan2((float)*y, (float)*x) * (180.0 / M_PI);
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001028:	ee17 0a90 	vmov	r0, s15
 800102c:	f7ff fa94 	bl	8000558 <__aeabi_f2d>
 8001030:	4604      	mov	r4, r0
 8001032:	460d      	mov	r5, r1
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103a:	ee07 3a90 	vmov	s15, r3
 800103e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001042:	ee17 0a90 	vmov	r0, s15
 8001046:	f7ff fa87 	bl	8000558 <__aeabi_f2d>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	ec43 2b11 	vmov	d1, r2, r3
 8001052:	ec45 4b10 	vmov	d0, r4, r5
 8001056:	f00d fab7 	bl	800e5c8 <atan2>
 800105a:	ec51 0b10 	vmov	r0, r1, d0
 800105e:	a312      	add	r3, pc, #72	@ (adr r3, 80010a8 <QMC5883L_Read+0x110>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff fad0 	bl	8000608 <__aeabi_dmul>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f7ff fda2 	bl	8000bb8 <__aeabi_d2f>
 8001074:	4602      	mov	r2, r0
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	601a      	str	r2, [r3, #0]
    if (*angulo < 0) {
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001088:	d400      	bmi.n	800108c <QMC5883L_Read+0xf4>
        *angulo += 360.0;  // Ajuste para obtener el ángulo en [0, 360] grados
    }
}
 800108a:	e009      	b.n	80010a0 <QMC5883L_Read+0x108>
        *angulo += 360.0;  // Ajuste para obtener el ángulo en [0, 360] grados
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80010c0 <QMC5883L_Read+0x128>
 8001096:	ee77 7a87 	vadd.f32	s15, s15, s14
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	edc3 7a00 	vstr	s15, [r3]
}
 80010a0:	bf00      	nop
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bdb0      	pop	{r4, r5, r7, pc}
 80010a8:	1a63c1f8 	.word	0x1a63c1f8
 80010ac:	404ca5dc 	.word	0x404ca5dc
 80010b0:	20000000 	.word	0x20000000
 80010b4:	200002f8 	.word	0x200002f8
 80010b8:	200002e4 	.word	0x200002e4
 80010bc:	200002e6 	.word	0x200002e6
 80010c0:	43b40000 	.word	0x43b40000

080010c4 <Calibrate_Sensor>:
void Calibrate_Sensor() {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b094      	sub	sp, #80	@ 0x50
 80010c8:	af00      	add	r7, sp, #0
    int16_t x_min = 32767, x_max = -32768;
 80010ca:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80010ce:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80010d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010d6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    int16_t y_min = 32767, y_max = -32768;
 80010da:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80010de:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80010e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010e6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    uint32_t calibration_duration = HAL_GetTick() + 10000; // 10 segundos de calibración
 80010ea:	f001 f8c1 	bl	8002270 <HAL_GetTick>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80010f4:	3310      	adds	r3, #16
 80010f6:	647b      	str	r3, [r7, #68]	@ 0x44
    char buffer[64];

    snprintf(buffer, sizeof(buffer), "Calibrando... Gire el sensor 360 grados\r\n");
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	4a41      	ldr	r2, [pc, #260]	@ (8001200 <Calibrate_Sensor+0x13c>)
 80010fc:	2140      	movs	r1, #64	@ 0x40
 80010fe:	4618      	mov	r0, r3
 8001100:	f00b f922 	bl	800c348 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f8ba 	bl	8000280 <strlen>
 800110c:	4603      	mov	r3, r0
 800110e:	b29a      	uxth	r2, r3
 8001110:	1d39      	adds	r1, r7, #4
 8001112:	2364      	movs	r3, #100	@ 0x64
 8001114:	483b      	ldr	r0, [pc, #236]	@ (8001204 <Calibrate_Sensor+0x140>)
 8001116:	f005 fbcd 	bl	80068b4 <HAL_UART_Transmit>
    while (HAL_GetTick() < calibration_duration) {
 800111a:	e034      	b.n	8001186 <Calibrate_Sensor+0xc2>
    	QMC5883L_Read(&x, &y, &z, NULL);
 800111c:	2300      	movs	r3, #0
 800111e:	4a3a      	ldr	r2, [pc, #232]	@ (8001208 <Calibrate_Sensor+0x144>)
 8001120:	493a      	ldr	r1, [pc, #232]	@ (800120c <Calibrate_Sensor+0x148>)
 8001122:	483b      	ldr	r0, [pc, #236]	@ (8001210 <Calibrate_Sensor+0x14c>)
 8001124:	f7ff ff38 	bl	8000f98 <QMC5883L_Read>
        if (x < x_min) x_min = x;
 8001128:	4b39      	ldr	r3, [pc, #228]	@ (8001210 <Calibrate_Sensor+0x14c>)
 800112a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112e:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 8001132:	429a      	cmp	r2, r3
 8001134:	dd03      	ble.n	800113e <Calibrate_Sensor+0x7a>
 8001136:	4b36      	ldr	r3, [pc, #216]	@ (8001210 <Calibrate_Sensor+0x14c>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
        if (x > x_max) x_max = x;
 800113e:	4b34      	ldr	r3, [pc, #208]	@ (8001210 <Calibrate_Sensor+0x14c>)
 8001140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001144:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 8001148:	429a      	cmp	r2, r3
 800114a:	da03      	bge.n	8001154 <Calibrate_Sensor+0x90>
 800114c:	4b30      	ldr	r3, [pc, #192]	@ (8001210 <Calibrate_Sensor+0x14c>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
        if (y < y_min) y_min = y;
 8001154:	4b2d      	ldr	r3, [pc, #180]	@ (800120c <Calibrate_Sensor+0x148>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 800115e:	429a      	cmp	r2, r3
 8001160:	dd03      	ble.n	800116a <Calibrate_Sensor+0xa6>
 8001162:	4b2a      	ldr	r3, [pc, #168]	@ (800120c <Calibrate_Sensor+0x148>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        if (y > y_max) y_max = y;
 800116a:	4b28      	ldr	r3, [pc, #160]	@ (800120c <Calibrate_Sensor+0x148>)
 800116c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001170:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8001174:	429a      	cmp	r2, r3
 8001176:	da03      	bge.n	8001180 <Calibrate_Sensor+0xbc>
 8001178:	4b24      	ldr	r3, [pc, #144]	@ (800120c <Calibrate_Sensor+0x148>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

        HAL_Delay(100); // Esperar antes de la siguiente lectura
 8001180:	2064      	movs	r0, #100	@ 0x64
 8001182:	f001 f881 	bl	8002288 <HAL_Delay>
    while (HAL_GetTick() < calibration_duration) {
 8001186:	f001 f873 	bl	8002270 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800118e:	4293      	cmp	r3, r2
 8001190:	d8c4      	bhi.n	800111c <Calibrate_Sensor+0x58>
    }
    // Calcular los offsets para centrar en cero
    x_offset = (x_max + x_min) / 2;
 8001192:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 8001196:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800119a:	4413      	add	r3, r2
 800119c:	0fda      	lsrs	r2, r3, #31
 800119e:	4413      	add	r3, r2
 80011a0:	105b      	asrs	r3, r3, #1
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <Calibrate_Sensor+0x150>)
 80011a6:	801a      	strh	r2, [r3, #0]
    y_offset = (y_max + y_min) / 2;
 80011a8:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 80011ac:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80011b0:	4413      	add	r3, r2
 80011b2:	0fda      	lsrs	r2, r3, #31
 80011b4:	4413      	add	r3, r2
 80011b6:	105b      	asrs	r3, r3, #1
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <Calibrate_Sensor+0x154>)
 80011bc:	801a      	strh	r2, [r3, #0]

    snprintf(buffer, sizeof(buffer), "Calibracion completa.\r\n");
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	4a16      	ldr	r2, [pc, #88]	@ (800121c <Calibrate_Sensor+0x158>)
 80011c2:	2140      	movs	r1, #64	@ 0x40
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00b f8bf 	bl	800c348 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f857 	bl	8000280 <strlen>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	1d39      	adds	r1, r7, #4
 80011d8:	2364      	movs	r3, #100	@ 0x64
 80011da:	480a      	ldr	r0, [pc, #40]	@ (8001204 <Calibrate_Sensor+0x140>)
 80011dc:	f005 fb6a 	bl	80068b4 <HAL_UART_Transmit>
    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f84c 	bl	8000280 <strlen>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f009 ff3d 	bl	800b070 <CDC_Transmit_FS>
}
 80011f6:	bf00      	nop
 80011f8:	3750      	adds	r7, #80	@ 0x50
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	0800eab8 	.word	0x0800eab8
 8001204:	20000424 	.word	0x20000424
 8001208:	200002ec 	.word	0x200002ec
 800120c:	200002ea 	.word	0x200002ea
 8001210:	200002e8 	.word	0x200002e8
 8001214:	200002e4 	.word	0x200002e4
 8001218:	200002e6 	.word	0x200002e6
 800121c:	0800eae4 	.word	0x0800eae4

08001220 <moveforward>:
// Función para configurar la dirección del motor
void moveforward(){
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
    // Dirección hacia adelante
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001224:	2201      	movs	r2, #1
 8001226:	2120      	movs	r1, #32
 8001228:	4804      	ldr	r0, [pc, #16]	@ (800123c <moveforward+0x1c>)
 800122a:	f001 fb79 	bl	8002920 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2110      	movs	r1, #16
 8001232:	4802      	ldr	r0, [pc, #8]	@ (800123c <moveforward+0x1c>)
 8001234:	f001 fb74 	bl	8002920 <HAL_GPIO_WritePin>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40020400 	.word	0x40020400

08001240 <stop>:
void movebackward(){
    // Dirección hacia adelante
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
}
void stop(){
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
    // Dirección hacia adelante
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	2120      	movs	r1, #32
 8001248:	4804      	ldr	r0, [pc, #16]	@ (800125c <stop+0x1c>)
 800124a:	f001 fb69 	bl	8002920 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2110      	movs	r1, #16
 8001252:	4802      	ldr	r0, [pc, #8]	@ (800125c <stop+0x1c>)
 8001254:	f001 fb64 	bl	8002920 <HAL_GPIO_WritePin>
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40020400 	.word	0x40020400

08001260 <Motor_SetSpeed>:
// Función para configurar la velocidad del motor (PWM)
void Motor_SetSpeed(uint8_t speed) {
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
    if (speed > 100) speed = 100; // Limita el valor máximo a 100%
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	2b64      	cmp	r3, #100	@ 0x64
 800126e:	d901      	bls.n	8001274 <Motor_SetSpeed+0x14>
 8001270:	2364      	movs	r3, #100	@ 0x64
 8001272:	71fb      	strb	r3, [r7, #7]
    if (speed < 0) speed = 0; // Limita el valor minimo a 0%
    // Calcula el valor de comparación para el duty cycle
    uint32_t pulse = (speed * __HAL_TIM_GET_AUTORELOAD(&htim2)) / 100;
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <Motor_SetSpeed+0x40>)
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800127c:	fb02 f303 	mul.w	r3, r2, r3
 8001280:	4a08      	ldr	r2, [pc, #32]	@ (80012a4 <Motor_SetSpeed+0x44>)
 8001282:	fba2 2303 	umull	r2, r3, r2, r3
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	60fb      	str	r3, [r7, #12]

    // Establece el duty cycle
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse);
 800128a:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <Motor_SetSpeed+0x40>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001292:	bf00      	nop
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	2000034c 	.word	0x2000034c
 80012a4:	51eb851f 	.word	0x51eb851f

080012a8 <getElapsedTime>:
// Función para calcular el tiempo transcurrido
float getElapsedTime() {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    uint32_t current_tick = HAL_GetTick(); // Obtiene el tiempo actual en ms
 80012ae:	f000 ffdf 	bl	8002270 <HAL_GetTick>
 80012b2:	6078      	str	r0, [r7, #4]
    float elapsed = (current_tick - last_tick) / 1000.0; // Convierte a segundos
 80012b4:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <getElapsedTime+0x4c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f929 	bl	8000514 <__aeabi_ui2d>
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <getElapsedTime+0x50>)
 80012c8:	f7ff fac8 	bl	800085c <__aeabi_ddiv>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fc70 	bl	8000bb8 <__aeabi_d2f>
 80012d8:	4603      	mov	r3, r0
 80012da:	603b      	str	r3, [r7, #0]
    last_tick = current_tick;
 80012dc:	4a05      	ldr	r2, [pc, #20]	@ (80012f4 <getElapsedTime+0x4c>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
    return elapsed;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	ee07 3a90 	vmov	s15, r3
}
 80012e8:	eeb0 0a67 	vmov.f32	s0, s15
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000474 	.word	0x20000474
 80012f8:	408f4000 	.word	0x408f4000
 80012fc:	00000000 	.word	0x00000000

08001300 <PIControl>:
// Función para calcular y aplicar el control PI
void PIControl(float current_angle, float set_point) {
 8001300:	b5b0      	push	{r4, r5, r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	ed87 0a01 	vstr	s0, [r7, #4]
 800130a:	edc7 0a00 	vstr	s1, [r7]
    // Calcula el error
    float error = set_point - current_angle;
 800130e:	ed97 7a00 	vldr	s14, [r7]
 8001312:	edd7 7a01 	vldr	s15, [r7, #4]
 8001316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131a:	edc7 7a04 	vstr	s15, [r7, #16]

    // Tiempo transcurrido
    float dt = getElapsedTime();
 800131e:	f7ff ffc3 	bl	80012a8 <getElapsedTime>
 8001322:	ed87 0a03 	vstr	s0, [r7, #12]

    // Acumula el término integral
    integral_sum += error * dt;
 8001326:	ed97 7a04 	vldr	s14, [r7, #16]
 800132a:	edd7 7a03 	vldr	s15, [r7, #12]
 800132e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001332:	4b27      	ldr	r3, [pc, #156]	@ (80013d0 <PIControl+0xd0>)
 8001334:	edd3 7a00 	vldr	s15, [r3]
 8001338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800133c:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <PIControl+0xd0>)
 800133e:	edc3 7a00 	vstr	s15, [r3]

    // Calcula el ajuste PI
    float adjustment = (Kp * error) + (Ki * integral_sum);
 8001342:	6938      	ldr	r0, [r7, #16]
 8001344:	f7ff f908 	bl	8000558 <__aeabi_f2d>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	f7fe ffa6 	bl	800029c <__adddf3>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4614      	mov	r4, r2
 8001356:	461d      	mov	r5, r3
 8001358:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <PIControl+0xd0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f8fb 	bl	8000558 <__aeabi_f2d>
 8001362:	a319      	add	r3, pc, #100	@ (adr r3, 80013c8 <PIControl+0xc8>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	f7ff f94e 	bl	8000608 <__aeabi_dmul>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4620      	mov	r0, r4
 8001372:	4629      	mov	r1, r5
 8001374:	f7fe ff92 	bl	800029c <__adddf3>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f7ff fc1a 	bl	8000bb8 <__aeabi_d2f>
 8001384:	4603      	mov	r3, r0
 8001386:	60bb      	str	r3, [r7, #8]

    // Calcula el nuevo valor PWM
    int pwm_value = CENTER_PWM + (int)adjustment;
 8001388:	edd7 7a02 	vldr	s15, [r7, #8]
 800138c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001390:	ee17 3a90 	vmov	r3, s15
 8001394:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001398:	617b      	str	r3, [r7, #20]

    // Limita el valor PWM al rango permitido
    if (pwm_value < MIN_PWM) pwm_value = MIN_PWM;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 80013a0:	da02      	bge.n	80013a8 <PIControl+0xa8>
 80013a2:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80013a6:	617b      	str	r3, [r7, #20]
    if (pwm_value > MAX_PWM) pwm_value = MAX_PWM;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f240 228a 	movw	r2, #650	@ 0x28a
 80013ae:	4293      	cmp	r3, r2
 80013b0:	dd02      	ble.n	80013b8 <PIControl+0xb8>
 80013b2:	f240 238a 	movw	r3, #650	@ 0x28a
 80013b6:	617b      	str	r3, [r7, #20]

    // Enviar el valor PWM al servo
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_value);
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <PIControl+0xd4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80013c0:	bf00      	nop
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bdb0      	pop	{r4, r5, r7, pc}
 80013c8:	9999999a 	.word	0x9999999a
 80013cc:	3fb99999 	.word	0x3fb99999
 80013d0:	200002f4 	.word	0x200002f4
 80013d4:	2000034c 	.word	0x2000034c

080013d8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) { // Asegúrate de que sea el temporizador configurado
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a10      	ldr	r2, [pc, #64]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d11a      	bne.n	8001420 <HAL_TIM_PeriodElapsedCallback+0x48>
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Ejemplo: Alternar un LED
 80013ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013ee:	480f      	ldr	r0, [pc, #60]	@ (800142c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80013f0:	f001 faaf 	bl	8002952 <HAL_GPIO_TogglePin>
    	QMC5883L_Read(&x, &y, &z, &angulo);
 80013f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80013f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001434 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80013f8:	490f      	ldr	r1, [pc, #60]	@ (8001438 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80013fa:	4810      	ldr	r0, [pc, #64]	@ (800143c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80013fc:	f7ff fdcc 	bl	8000f98 <QMC5883L_Read>
    	PIControl(angulo, set_point);
 8001400:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140c:	ee07 3a10 	vmov	s14, r3
 8001410:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001414:	eef0 0a47 	vmov.f32	s1, s14
 8001418:	eeb0 0a67 	vmov.f32	s0, s15
 800141c:	f7ff ff70 	bl	8001300 <PIControl>
    }
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40000800 	.word	0x40000800
 800142c:	40020800 	.word	0x40020800
 8001430:	200002f0 	.word	0x200002f0
 8001434:	200002ec 	.word	0x200002ec
 8001438:	200002ea 	.word	0x200002ea
 800143c:	200002e8 	.word	0x200002e8
 8001440:	20000472 	.word	0x20000472

08001444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144a:	f000 feab 	bl	80021a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144e:	f000 f89b 	bl	8001588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001452:	f000 fa8d 	bl	8001970 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001456:	f000 fa61 	bl	800191c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800145a:	f000 f92b 	bl	80016b4 <MX_TIM2_Init>
  MX_I2C2_Init();
 800145e:	f000 f8fb 	bl	8001658 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8001462:	f009 fd47 	bl	800aef4 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8001466:	f000 f9b7 	bl	80017d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800146a:	f000 fa09 	bl	8001880 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001474:	483d      	ldr	r0, [pc, #244]	@ (800156c <main+0x128>)
 8001476:	f001 fa53 	bl	8002920 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive
 800147a:	2201      	movs	r2, #1
 800147c:	493c      	ldr	r1, [pc, #240]	@ (8001570 <main+0x12c>)
 800147e:	483d      	ldr	r0, [pc, #244]	@ (8001574 <main+0x130>)
 8001480:	f005 faa3 	bl	80069ca <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Servo motor
 8001484:	2100      	movs	r1, #0
 8001486:	483c      	ldr	r0, [pc, #240]	@ (8001578 <main+0x134>)
 8001488:	f004 f9e4 	bl	8005854 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Velocidad de motor
 800148c:	2104      	movs	r1, #4
 800148e:	483a      	ldr	r0, [pc, #232]	@ (8001578 <main+0x134>)
 8001490:	f004 f9e0 	bl	8005854 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // Posible nuevo motor
 8001494:	2108      	movs	r1, #8
 8001496:	4838      	ldr	r0, [pc, #224]	@ (8001578 <main+0x134>)
 8001498:	f004 f9dc 	bl	8005854 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800149c:	213c      	movs	r1, #60	@ 0x3c
 800149e:	4837      	ldr	r0, [pc, #220]	@ (800157c <main+0x138>)
 80014a0:	f004 fb2e 	bl	8005b00 <HAL_TIM_Encoder_Start>
    // Inicializa el motor
  htim2.Instance -> CCR1 = 500;
 80014a4:	4b34      	ldr	r3, [pc, #208]	@ (8001578 <main+0x134>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80014ac:	635a      	str	r2, [r3, #52]	@ 0x34
  QMC5883L_Init();
 80014ae:	f7ff fd4b 	bl	8000f48 <QMC5883L_Init>
  Calibrate_Sensor(); // Llamar a la función de calibración al inicio
 80014b2:	f7ff fe07 	bl	80010c4 <Calibrate_Sensor>
  int16_t x, y, z;
  float angulo;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014bc:	482b      	ldr	r0, [pc, #172]	@ (800156c <main+0x128>)
 80014be:	f001 fa2f 	bl	8002920 <HAL_GPIO_WritePin>
  HAL_Delay(3000);
 80014c2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80014c6:	f000 fedf 	bl	8002288 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80014ca:	2201      	movs	r2, #1
 80014cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014d0:	4826      	ldr	r0, [pc, #152]	@ (800156c <main+0x128>)
 80014d2:	f001 fa25 	bl	8002920 <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 80014d6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80014da:	f000 fed5 	bl	8002288 <HAL_Delay>
  moveforward();
 80014de:	f7ff fe9f 	bl	8001220 <moveforward>
  Motor_SetSpeed(20);
 80014e2:	2014      	movs	r0, #20
 80014e4:	f7ff febc 	bl	8001260 <Motor_SetSpeed>
  moveforward();
 80014e8:	f7ff fe9a 	bl	8001220 <moveforward>
  QMC5883L_Read(&x, &y, &z, &angulo);
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	f107 0208 	add.w	r2, r7, #8
 80014f2:	f107 010a 	add.w	r1, r7, #10
 80014f6:	f107 000c 	add.w	r0, r7, #12
 80014fa:	f7ff fd4d 	bl	8000f98 <QMC5883L_Read>
  set_point = angulo;
 80014fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001506:	ee17 3a90 	vmov	r3, s15
 800150a:	b21a      	sxth	r2, r3
 800150c:	4b1c      	ldr	r3, [pc, #112]	@ (8001580 <main+0x13c>)
 800150e:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	int16_t timer_counter, last_timer;
  	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Ejemplo: Alternar un LED
 8001510:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001514:	481b      	ldr	r0, [pc, #108]	@ (8001584 <main+0x140>)
 8001516:	f001 fa1c 	bl	8002952 <HAL_GPIO_TogglePin>
  	QMC5883L_Read(&x, &y, &z, &angulo);
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	f107 0208 	add.w	r2, r7, #8
 8001520:	f107 010a 	add.w	r1, r7, #10
 8001524:	f107 000c 	add.w	r0, r7, #12
 8001528:	f7ff fd36 	bl	8000f98 <QMC5883L_Read>
  	PIControl(angulo, set_point);
 800152c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001530:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <main+0x13c>)
 8001532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001536:	ee07 3a10 	vmov	s14, r3
 800153a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800153e:	eef0 0a47 	vmov.f32	s1, s14
 8001542:	eeb0 0a67 	vmov.f32	s0, s15
 8001546:	f7ff fedb 	bl	8001300 <PIControl>
	timer_counter = __HAL_TIM_GET_COUNTER(&htim3);
 800154a:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <main+0x138>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001550:	81fb      	strh	r3, [r7, #14]
	if( timer_counter >= 0 && timer_counter < 45885){
 8001552:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db05      	blt.n	8001566 <main+0x122>
		Motor_SetSpeed(20);
 800155a:	2014      	movs	r0, #20
 800155c:	f7ff fe80 	bl	8001260 <Motor_SetSpeed>
		moveforward();
 8001560:	f7ff fe5e 	bl	8001220 <moveforward>
 8001564:	e7d4      	b.n	8001510 <main+0xcc>
	}
	else{
		stop();
 8001566:	f7ff fe6b 	bl	8001240 <stop>
  {
 800156a:	e7d1      	b.n	8001510 <main+0xcc>
 800156c:	40020400 	.word	0x40020400
 8001570:	2000046c 	.word	0x2000046c
 8001574:	20000424 	.word	0x20000424
 8001578:	2000034c 	.word	0x2000034c
 800157c:	20000394 	.word	0x20000394
 8001580:	20000472 	.word	0x20000472
 8001584:	40020800 	.word	0x40020800

08001588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b094      	sub	sp, #80	@ 0x50
 800158c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158e:	f107 0320 	add.w	r3, r7, #32
 8001592:	2230      	movs	r2, #48	@ 0x30
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f00a ff4d 	bl	800c436 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	4b27      	ldr	r3, [pc, #156]	@ (8001650 <SystemClock_Config+0xc8>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b4:	4a26      	ldr	r2, [pc, #152]	@ (8001650 <SystemClock_Config+0xc8>)
 80015b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80015bc:	4b24      	ldr	r3, [pc, #144]	@ (8001650 <SystemClock_Config+0xc8>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	4b21      	ldr	r3, [pc, #132]	@ (8001654 <SystemClock_Config+0xcc>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a20      	ldr	r2, [pc, #128]	@ (8001654 <SystemClock_Config+0xcc>)
 80015d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001654 <SystemClock_Config+0xcc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015e4:	2301      	movs	r3, #1
 80015e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ee:	2302      	movs	r3, #2
 80015f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80015f8:	2319      	movs	r3, #25
 80015fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80015fc:	2390      	movs	r3, #144	@ 0x90
 80015fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001600:	2302      	movs	r3, #2
 8001602:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001604:	2303      	movs	r3, #3
 8001606:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001608:	f107 0320 	add.w	r3, r7, #32
 800160c:	4618      	mov	r0, r3
 800160e:	f003 fc21 	bl	8004e54 <HAL_RCC_OscConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001618:	f000 fac0 	bl	8001b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800161c:	230f      	movs	r3, #15
 800161e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001620:	2302      	movs	r3, #2
 8001622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001628:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800162c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	2102      	movs	r1, #2
 8001638:	4618      	mov	r0, r3
 800163a:	f003 fe83 	bl	8005344 <HAL_RCC_ClockConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001644:	f000 faaa 	bl	8001b9c <Error_Handler>
  }
}
 8001648:	bf00      	nop
 800164a:	3750      	adds	r7, #80	@ 0x50
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40023800 	.word	0x40023800
 8001654:	40007000 	.word	0x40007000

08001658 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <MX_I2C2_Init+0x50>)
 800165e:	4a13      	ldr	r2, [pc, #76]	@ (80016ac <MX_I2C2_Init+0x54>)
 8001660:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001662:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <MX_I2C2_Init+0x50>)
 8001664:	4a12      	ldr	r2, [pc, #72]	@ (80016b0 <MX_I2C2_Init+0x58>)
 8001666:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001668:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <MX_I2C2_Init+0x50>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800166e:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <MX_I2C2_Init+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <MX_I2C2_Init+0x50>)
 8001676:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800167a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800167c:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <MX_I2C2_Init+0x50>)
 800167e:	2200      	movs	r2, #0
 8001680:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001682:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <MX_I2C2_Init+0x50>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001688:	4b07      	ldr	r3, [pc, #28]	@ (80016a8 <MX_I2C2_Init+0x50>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <MX_I2C2_Init+0x50>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001694:	4804      	ldr	r0, [pc, #16]	@ (80016a8 <MX_I2C2_Init+0x50>)
 8001696:	f001 f977 	bl	8002988 <HAL_I2C_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016a0:	f000 fa7c 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200002f8 	.word	0x200002f8
 80016ac:	40005800 	.word	0x40005800
 80016b0:	000186a0 	.word	0x000186a0

080016b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08e      	sub	sp, #56	@ 0x38
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c8:	f107 0320 	add.w	r3, r7, #32
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
 80016e0:	615a      	str	r2, [r3, #20]
 80016e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016e4:	4b3b      	ldr	r3, [pc, #236]	@ (80017d4 <MX_TIM2_Init+0x120>)
 80016e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80016ec:	4b39      	ldr	r3, [pc, #228]	@ (80017d4 <MX_TIM2_Init+0x120>)
 80016ee:	2247      	movs	r2, #71	@ 0x47
 80016f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f2:	4b38      	ldr	r3, [pc, #224]	@ (80017d4 <MX_TIM2_Init+0x120>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 80016f8:	4b36      	ldr	r3, [pc, #216]	@ (80017d4 <MX_TIM2_Init+0x120>)
 80016fa:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80016fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001700:	4b34      	ldr	r3, [pc, #208]	@ (80017d4 <MX_TIM2_Init+0x120>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001706:	4b33      	ldr	r3, [pc, #204]	@ (80017d4 <MX_TIM2_Init+0x120>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800170c:	4831      	ldr	r0, [pc, #196]	@ (80017d4 <MX_TIM2_Init+0x120>)
 800170e:	f003 fff9 	bl	8005704 <HAL_TIM_Base_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001718:	f000 fa40 	bl	8001b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001720:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001722:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001726:	4619      	mov	r1, r3
 8001728:	482a      	ldr	r0, [pc, #168]	@ (80017d4 <MX_TIM2_Init+0x120>)
 800172a:	f004 fc29 	bl	8005f80 <HAL_TIM_ConfigClockSource>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001734:	f000 fa32 	bl	8001b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001738:	4826      	ldr	r0, [pc, #152]	@ (80017d4 <MX_TIM2_Init+0x120>)
 800173a:	f004 f832 	bl	80057a2 <HAL_TIM_PWM_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001744:	f000 fa2a 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001750:	f107 0320 	add.w	r3, r7, #32
 8001754:	4619      	mov	r1, r3
 8001756:	481f      	ldr	r0, [pc, #124]	@ (80017d4 <MX_TIM2_Init+0x120>)
 8001758:	f004 ffda 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001762:	f000 fa1b 	bl	8001b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001766:	2360      	movs	r3, #96	@ 0x60
 8001768:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800176a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800176e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	2200      	movs	r2, #0
 800177c:	4619      	mov	r1, r3
 800177e:	4815      	ldr	r0, [pc, #84]	@ (80017d4 <MX_TIM2_Init+0x120>)
 8001780:	f004 fb3c 	bl	8005dfc <HAL_TIM_PWM_ConfigChannel>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800178a:	f000 fa07 	bl	8001b9c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2204      	movs	r2, #4
 8001796:	4619      	mov	r1, r3
 8001798:	480e      	ldr	r0, [pc, #56]	@ (80017d4 <MX_TIM2_Init+0x120>)
 800179a:	f004 fb2f 	bl	8005dfc <HAL_TIM_PWM_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 80017a4:	f000 f9fa 	bl	8001b9c <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 80017a8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80017ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	2208      	movs	r2, #8
 80017b2:	4619      	mov	r1, r3
 80017b4:	4807      	ldr	r0, [pc, #28]	@ (80017d4 <MX_TIM2_Init+0x120>)
 80017b6:	f004 fb21 	bl	8005dfc <HAL_TIM_PWM_ConfigChannel>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 80017c0:	f000 f9ec 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017c4:	4803      	ldr	r0, [pc, #12]	@ (80017d4 <MX_TIM2_Init+0x120>)
 80017c6:	f000 faf5 	bl	8001db4 <HAL_TIM_MspPostInit>

}
 80017ca:	bf00      	nop
 80017cc:	3738      	adds	r7, #56	@ 0x38
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000034c 	.word	0x2000034c

080017d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08c      	sub	sp, #48	@ 0x30
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	2224      	movs	r2, #36	@ 0x24
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f00a fe25 	bl	800c436 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017f4:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <MX_TIM3_Init+0xa0>)
 80017f6:	4a21      	ldr	r2, [pc, #132]	@ (800187c <MX_TIM3_Init+0xa4>)
 80017f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <MX_TIM3_Init+0xa0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001800:	4b1d      	ldr	r3, [pc, #116]	@ (8001878 <MX_TIM3_Init+0xa0>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001806:	4b1c      	ldr	r3, [pc, #112]	@ (8001878 <MX_TIM3_Init+0xa0>)
 8001808:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800180c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180e:	4b1a      	ldr	r3, [pc, #104]	@ (8001878 <MX_TIM3_Init+0xa0>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001814:	4b18      	ldr	r3, [pc, #96]	@ (8001878 <MX_TIM3_Init+0xa0>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800181a:	2303      	movs	r3, #3
 800181c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001822:	2301      	movs	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001832:	2301      	movs	r3, #1
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001836:	2300      	movs	r3, #0
 8001838:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	4619      	mov	r1, r3
 8001844:	480c      	ldr	r0, [pc, #48]	@ (8001878 <MX_TIM3_Init+0xa0>)
 8001846:	f004 f8b5 	bl	80059b4 <HAL_TIM_Encoder_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001850:	f000 f9a4 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	@ (8001878 <MX_TIM3_Init+0xa0>)
 8001862:	f004 ff55 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800186c:	f000 f996 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	3730      	adds	r7, #48	@ 0x30
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000394 	.word	0x20000394
 800187c:	40000400 	.word	0x40000400

08001880 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001894:	463b      	mov	r3, r7
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800189c:	4b1d      	ldr	r3, [pc, #116]	@ (8001914 <MX_TIM4_Init+0x94>)
 800189e:	4a1e      	ldr	r2, [pc, #120]	@ (8001918 <MX_TIM4_Init+0x98>)
 80018a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 720;
 80018a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001914 <MX_TIM4_Init+0x94>)
 80018a4:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 80018a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <MX_TIM4_Init+0x94>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 80018b0:	4b18      	ldr	r3, [pc, #96]	@ (8001914 <MX_TIM4_Init+0x94>)
 80018b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80018b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b8:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <MX_TIM4_Init+0x94>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018be:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <MX_TIM4_Init+0x94>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018c4:	4813      	ldr	r0, [pc, #76]	@ (8001914 <MX_TIM4_Init+0x94>)
 80018c6:	f003 ff1d 	bl	8005704 <HAL_TIM_Base_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80018d0:	f000 f964 	bl	8001b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	4619      	mov	r1, r3
 80018e0:	480c      	ldr	r0, [pc, #48]	@ (8001914 <MX_TIM4_Init+0x94>)
 80018e2:	f004 fb4d 	bl	8005f80 <HAL_TIM_ConfigClockSource>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80018ec:	f000 f956 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f0:	2300      	movs	r3, #0
 80018f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018f8:	463b      	mov	r3, r7
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_TIM4_Init+0x94>)
 80018fe:	f004 ff07 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001908:	f000 f948 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	200003dc 	.word	0x200003dc
 8001918:	40000800 	.word	0x40000800

0800191c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001920:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <MX_USART1_UART_Init+0x4c>)
 8001922:	4a12      	ldr	r2, [pc, #72]	@ (800196c <MX_USART1_UART_Init+0x50>)
 8001924:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <MX_USART1_UART_Init+0x4c>)
 8001928:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800192c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800192e:	4b0e      	ldr	r3, [pc, #56]	@ (8001968 <MX_USART1_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001934:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <MX_USART1_UART_Init+0x4c>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800193a:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <MX_USART1_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001940:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <MX_USART1_UART_Init+0x4c>)
 8001942:	220c      	movs	r2, #12
 8001944:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001946:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <MX_USART1_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <MX_USART1_UART_Init+0x4c>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001952:	4805      	ldr	r0, [pc, #20]	@ (8001968 <MX_USART1_UART_Init+0x4c>)
 8001954:	f004 ff5e 	bl	8006814 <HAL_UART_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800195e:	f000 f91d 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000424 	.word	0x20000424
 800196c:	40011000 	.word	0x40011000

08001970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08a      	sub	sp, #40	@ 0x28
 8001974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	4b32      	ldr	r3, [pc, #200]	@ (8001a54 <MX_GPIO_Init+0xe4>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	4a31      	ldr	r2, [pc, #196]	@ (8001a54 <MX_GPIO_Init+0xe4>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6313      	str	r3, [r2, #48]	@ 0x30
 8001996:	4b2f      	ldr	r3, [pc, #188]	@ (8001a54 <MX_GPIO_Init+0xe4>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001a54 <MX_GPIO_Init+0xe4>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001a54 <MX_GPIO_Init+0xe4>)
 80019ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b2:	4b28      	ldr	r3, [pc, #160]	@ (8001a54 <MX_GPIO_Init+0xe4>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	4b24      	ldr	r3, [pc, #144]	@ (8001a54 <MX_GPIO_Init+0xe4>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	4a23      	ldr	r2, [pc, #140]	@ (8001a54 <MX_GPIO_Init+0xe4>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ce:	4b21      	ldr	r3, [pc, #132]	@ (8001a54 <MX_GPIO_Init+0xe4>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	4b1d      	ldr	r3, [pc, #116]	@ (8001a54 <MX_GPIO_Init+0xe4>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a54 <MX_GPIO_Init+0xe4>)
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <MX_GPIO_Init+0xe4>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019fc:	4816      	ldr	r0, [pc, #88]	@ (8001a58 <MX_GPIO_Init+0xe8>)
 80019fe:	f000 ff8f 	bl	8002920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	f241 0130 	movw	r1, #4144	@ 0x1030
 8001a08:	4814      	ldr	r0, [pc, #80]	@ (8001a5c <MX_GPIO_Init+0xec>)
 8001a0a:	f000 ff89 	bl	8002920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	480c      	ldr	r0, [pc, #48]	@ (8001a58 <MX_GPIO_Init+0xe8>)
 8001a28:	f000 fdf6 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_4|GPIO_PIN_5;
 8001a2c:	f241 0330 	movw	r3, #4144	@ 0x1030
 8001a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	@ (8001a5c <MX_GPIO_Init+0xec>)
 8001a46:	f000 fde7 	bl	8002618 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a4a:	bf00      	nop
 8001a4c:	3728      	adds	r7, #40	@ 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020800 	.word	0x40020800
 8001a5c:	40020400 	.word	0x40020400

08001a60 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a44      	ldr	r2, [pc, #272]	@ (8001b80 <HAL_UART_RxCpltCallback+0x120>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	f040 8082 	bne.w	8001b78 <HAL_UART_RxCpltCallback+0x118>
  {
    if(rxData==78) // Ascii value of 'N' is 78 (N for NO)
 8001a74:	4b43      	ldr	r3, [pc, #268]	@ (8001b84 <HAL_UART_RxCpltCallback+0x124>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b4e      	cmp	r3, #78	@ 0x4e
 8001a7a:	d10a      	bne.n	8001a92 <HAL_UART_RxCpltCallback+0x32>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2120      	movs	r1, #32
 8001a80:	4841      	ldr	r0, [pc, #260]	@ (8001b88 <HAL_UART_RxCpltCallback+0x128>)
 8001a82:	f000 ff4d 	bl	8002920 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2110      	movs	r1, #16
 8001a8a:	483f      	ldr	r0, [pc, #252]	@ (8001b88 <HAL_UART_RxCpltCallback+0x128>)
 8001a8c:	f000 ff48 	bl	8002920 <HAL_GPIO_WritePin>
 8001a90:	e06d      	b.n	8001b6e <HAL_UART_RxCpltCallback+0x10e>

    }
    else if (rxData==89) // Ascii value of 'Y' is 89 (Y for YES)
 8001a92:	4b3c      	ldr	r3, [pc, #240]	@ (8001b84 <HAL_UART_RxCpltCallback+0x124>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b59      	cmp	r3, #89	@ 0x59
 8001a98:	d10a      	bne.n	8001ab0 <HAL_UART_RxCpltCallback+0x50>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2120      	movs	r1, #32
 8001a9e:	483a      	ldr	r0, [pc, #232]	@ (8001b88 <HAL_UART_RxCpltCallback+0x128>)
 8001aa0:	f000 ff3e 	bl	8002920 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	2110      	movs	r1, #16
 8001aa8:	4837      	ldr	r0, [pc, #220]	@ (8001b88 <HAL_UART_RxCpltCallback+0x128>)
 8001aaa:	f000 ff39 	bl	8002920 <HAL_GPIO_WritePin>
 8001aae:	e05e      	b.n	8001b6e <HAL_UART_RxCpltCallback+0x10e>

    }
    else if (rxData==69) // Ascii value of 'E' is 89 (E for EXIT)
 8001ab0:	4b34      	ldr	r3, [pc, #208]	@ (8001b84 <HAL_UART_RxCpltCallback+0x124>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b45      	cmp	r3, #69	@ 0x45
 8001ab6:	d10a      	bne.n	8001ace <HAL_UART_RxCpltCallback+0x6e>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2120      	movs	r1, #32
 8001abc:	4832      	ldr	r0, [pc, #200]	@ (8001b88 <HAL_UART_RxCpltCallback+0x128>)
 8001abe:	f000 ff2f 	bl	8002920 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2110      	movs	r1, #16
 8001ac6:	4830      	ldr	r0, [pc, #192]	@ (8001b88 <HAL_UART_RxCpltCallback+0x128>)
 8001ac8:	f000 ff2a 	bl	8002920 <HAL_GPIO_WritePin>
 8001acc:	e04f      	b.n	8001b6e <HAL_UART_RxCpltCallback+0x10e>

    }
    else if (rxData==67) // Ascii value of 'C' (C is for calibrate)
 8001ace:	4b2d      	ldr	r3, [pc, #180]	@ (8001b84 <HAL_UART_RxCpltCallback+0x124>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b43      	cmp	r3, #67	@ 0x43
 8001ad4:	d103      	bne.n	8001ade <HAL_UART_RxCpltCallback+0x7e>
    {
        calibrara = 1;
 8001ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b8c <HAL_UART_RxCpltCallback+0x12c>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]
 8001adc:	e047      	b.n	8001b6e <HAL_UART_RxCpltCallback+0x10e>

    }
    else if (rxData==89) // Ascii value of 'Y' (Speed up)
 8001ade:	4b29      	ldr	r3, [pc, #164]	@ (8001b84 <HAL_UART_RxCpltCallback+0x124>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b59      	cmp	r3, #89	@ 0x59
 8001ae4:	d118      	bne.n	8001b18 <HAL_UART_RxCpltCallback+0xb8>
    {
    	if (vel > 100){
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b90 <HAL_UART_RxCpltCallback+0x130>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b64      	cmp	r3, #100	@ 0x64
 8001aec:	d908      	bls.n	8001b00 <HAL_UART_RxCpltCallback+0xa0>
    		vel = 100;
 8001aee:	4b28      	ldr	r3, [pc, #160]	@ (8001b90 <HAL_UART_RxCpltCallback+0x130>)
 8001af0:	2264      	movs	r2, #100	@ 0x64
 8001af2:	701a      	strb	r2, [r3, #0]
    		Motor_SetSpeed(vel);
 8001af4:	4b26      	ldr	r3, [pc, #152]	@ (8001b90 <HAL_UART_RxCpltCallback+0x130>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fbb1 	bl	8001260 <Motor_SetSpeed>
 8001afe:	e036      	b.n	8001b6e <HAL_UART_RxCpltCallback+0x10e>
    	}
    	else{
    		vel += 10;
 8001b00:	4b23      	ldr	r3, [pc, #140]	@ (8001b90 <HAL_UART_RxCpltCallback+0x130>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	330a      	adds	r3, #10
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <HAL_UART_RxCpltCallback+0x130>)
 8001b0a:	701a      	strb	r2, [r3, #0]
    		Motor_SetSpeed(vel);
 8001b0c:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <HAL_UART_RxCpltCallback+0x130>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fba5 	bl	8001260 <Motor_SetSpeed>
 8001b16:	e02a      	b.n	8001b6e <HAL_UART_RxCpltCallback+0x10e>
    	}
    }
    else if (rxData==90) // Ascii value of 'Z' (Speed down)
 8001b18:	4b1a      	ldr	r3, [pc, #104]	@ (8001b84 <HAL_UART_RxCpltCallback+0x124>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b5a      	cmp	r3, #90	@ 0x5a
 8001b1e:	d10b      	bne.n	8001b38 <HAL_UART_RxCpltCallback+0xd8>
    	if (vel < 0){
    		vel = 0;
    		Motor_SetSpeed(vel);
    	}
    	else{
    		vel -= 10;
 8001b20:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <HAL_UART_RxCpltCallback+0x130>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	3b0a      	subs	r3, #10
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <HAL_UART_RxCpltCallback+0x130>)
 8001b2a:	701a      	strb	r2, [r3, #0]
    		Motor_SetSpeed(vel);
 8001b2c:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <HAL_UART_RxCpltCallback+0x130>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fb95 	bl	8001260 <Motor_SetSpeed>
 8001b36:	e01a      	b.n	8001b6e <HAL_UART_RxCpltCallback+0x10e>
    	}
    }
    else if (rxData==71) // Ascii value of 'G' (Speed down)
 8001b38:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <HAL_UART_RxCpltCallback+0x124>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b47      	cmp	r3, #71	@ 0x47
 8001b3e:	d116      	bne.n	8001b6e <HAL_UART_RxCpltCallback+0x10e>
    {
    	if (posicion < 9000){
 8001b40:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <HAL_UART_RxCpltCallback+0x134>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	f242 3227 	movw	r2, #8999	@ 0x2327
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d808      	bhi.n	8001b5e <HAL_UART_RxCpltCallback+0xfe>
    		vel = 10;
 8001b4c:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <HAL_UART_RxCpltCallback+0x130>)
 8001b4e:	220a      	movs	r2, #10
 8001b50:	701a      	strb	r2, [r3, #0]
    		Motor_SetSpeed(vel);
 8001b52:	4b0f      	ldr	r3, [pc, #60]	@ (8001b90 <HAL_UART_RxCpltCallback+0x130>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fb82 	bl	8001260 <Motor_SetSpeed>
 8001b5c:	e007      	b.n	8001b6e <HAL_UART_RxCpltCallback+0x10e>
    	}
    	else{
    		vel =0;
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <HAL_UART_RxCpltCallback+0x130>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
    		Motor_SetSpeed(vel);
 8001b64:	4b0a      	ldr	r3, [pc, #40]	@ (8001b90 <HAL_UART_RxCpltCallback+0x130>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fb79 	bl	8001260 <Motor_SetSpeed>
    	}
    }
    HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 8001b6e:	2201      	movs	r2, #1
 8001b70:	4904      	ldr	r1, [pc, #16]	@ (8001b84 <HAL_UART_RxCpltCallback+0x124>)
 8001b72:	4809      	ldr	r0, [pc, #36]	@ (8001b98 <HAL_UART_RxCpltCallback+0x138>)
 8001b74:	f004 ff29 	bl	80069ca <HAL_UART_Receive_IT>
  }
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40011000 	.word	0x40011000
 8001b84:	2000046c 	.word	0x2000046c
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	20000470 	.word	0x20000470
 8001b90:	200002ee 	.word	0x200002ee
 8001b94:	2000046e 	.word	0x2000046e
 8001b98:	20000424 	.word	0x20000424

08001b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba0:	b672      	cpsid	i
}
 8001ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <Error_Handler+0x8>

08001ba8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	4b10      	ldr	r3, [pc, #64]	@ (8001bf4 <HAL_MspInit+0x4c>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8001bf4 <HAL_MspInit+0x4c>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf4 <HAL_MspInit+0x4c>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <HAL_MspInit+0x4c>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	4a08      	ldr	r2, [pc, #32]	@ (8001bf4 <HAL_MspInit+0x4c>)
 8001bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bda:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <HAL_MspInit+0x4c>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800

08001bf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	@ 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a22      	ldr	r2, [pc, #136]	@ (8001ca0 <HAL_I2C_MspInit+0xa8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d13d      	bne.n	8001c96 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ca4 <HAL_I2C_MspInit+0xac>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	4a20      	ldr	r2, [pc, #128]	@ (8001ca4 <HAL_I2C_MspInit+0xac>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <HAL_I2C_MspInit+0xac>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c3c:	2312      	movs	r3, #18
 8001c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c48:	2304      	movs	r3, #4
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	4815      	ldr	r0, [pc, #84]	@ (8001ca8 <HAL_I2C_MspInit+0xb0>)
 8001c54:	f000 fce0 	bl	8002618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c5e:	2312      	movs	r3, #18
 8001c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001c6a:	2309      	movs	r3, #9
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	480c      	ldr	r0, [pc, #48]	@ (8001ca8 <HAL_I2C_MspInit+0xb0>)
 8001c76:	f000 fccf 	bl	8002618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_I2C_MspInit+0xac>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	4a08      	ldr	r2, [pc, #32]	@ (8001ca4 <HAL_I2C_MspInit+0xac>)
 8001c84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_I2C_MspInit+0xac>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001c96:	bf00      	nop
 8001c98:	3728      	adds	r7, #40	@ 0x28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40005800 	.word	0x40005800
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020400 	.word	0x40020400

08001cac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cbc:	d10e      	bne.n	8001cdc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	4b16      	ldr	r3, [pc, #88]	@ (8001d1c <HAL_TIM_Base_MspInit+0x70>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	4a15      	ldr	r2, [pc, #84]	@ (8001d1c <HAL_TIM_Base_MspInit+0x70>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cce:	4b13      	ldr	r3, [pc, #76]	@ (8001d1c <HAL_TIM_Base_MspInit+0x70>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001cda:	e01a      	b.n	8001d12 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0f      	ldr	r2, [pc, #60]	@ (8001d20 <HAL_TIM_Base_MspInit+0x74>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d115      	bne.n	8001d12 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	4b0c      	ldr	r3, [pc, #48]	@ (8001d1c <HAL_TIM_Base_MspInit+0x70>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	4a0b      	ldr	r2, [pc, #44]	@ (8001d1c <HAL_TIM_Base_MspInit+0x70>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf6:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <HAL_TIM_Base_MspInit+0x70>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	201e      	movs	r0, #30
 8001d08:	f000 fbbd 	bl	8002486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d0c:	201e      	movs	r0, #30
 8001d0e:	f000 fbd6 	bl	80024be <HAL_NVIC_EnableIRQ>
}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40000800 	.word	0x40000800

08001d24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	@ 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a19      	ldr	r2, [pc, #100]	@ (8001da8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d12b      	bne.n	8001d9e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	4b18      	ldr	r3, [pc, #96]	@ (8001dac <HAL_TIM_Encoder_MspInit+0x88>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	4a17      	ldr	r2, [pc, #92]	@ (8001dac <HAL_TIM_Encoder_MspInit+0x88>)
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <HAL_TIM_Encoder_MspInit+0x88>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <HAL_TIM_Encoder_MspInit+0x88>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	4a10      	ldr	r2, [pc, #64]	@ (8001dac <HAL_TIM_Encoder_MspInit+0x88>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d72:	4b0e      	ldr	r3, [pc, #56]	@ (8001dac <HAL_TIM_Encoder_MspInit+0x88>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d7e:	23c0      	movs	r3, #192	@ 0xc0
 8001d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	4805      	ldr	r0, [pc, #20]	@ (8001db0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d9a:	f000 fc3d 	bl	8002618 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001d9e:	bf00      	nop
 8001da0:	3728      	adds	r7, #40	@ 0x28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40000400 	.word	0x40000400
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40020000 	.word	0x40020000

08001db4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	@ 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dd4:	d13b      	bne.n	8001e4e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	4b1f      	ldr	r3, [pc, #124]	@ (8001e58 <HAL_TIM_MspPostInit+0xa4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	4a1e      	ldr	r2, [pc, #120]	@ (8001e58 <HAL_TIM_MspPostInit+0xa4>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e58 <HAL_TIM_MspPostInit+0xa4>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <HAL_TIM_MspPostInit+0xa4>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	4a17      	ldr	r2, [pc, #92]	@ (8001e58 <HAL_TIM_MspPostInit+0xa4>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e02:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <HAL_TIM_MspPostInit+0xa4>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001e0e:	2305      	movs	r3, #5
 8001e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	480c      	ldr	r0, [pc, #48]	@ (8001e5c <HAL_TIM_MspPostInit+0xa8>)
 8001e2a:	f000 fbf5 	bl	8002618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e2e:	2308      	movs	r3, #8
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4619      	mov	r1, r3
 8001e48:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <HAL_TIM_MspPostInit+0xac>)
 8001e4a:	f000 fbe5 	bl	8002618 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e4e:	bf00      	nop
 8001e50:	3728      	adds	r7, #40	@ 0x28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40020400 	.word	0x40020400

08001e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	@ 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef8 <HAL_UART_MspInit+0x94>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d134      	bne.n	8001ef0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001efc <HAL_UART_MspInit+0x98>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8001efc <HAL_UART_MspInit+0x98>)
 8001e90:	f043 0310 	orr.w	r3, r3, #16
 8001e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e96:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <HAL_UART_MspInit+0x98>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <HAL_UART_MspInit+0x98>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4a14      	ldr	r2, [pc, #80]	@ (8001efc <HAL_UART_MspInit+0x98>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	4b12      	ldr	r3, [pc, #72]	@ (8001efc <HAL_UART_MspInit+0x98>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ebe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ed0:	2307      	movs	r3, #7
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4809      	ldr	r0, [pc, #36]	@ (8001f00 <HAL_UART_MspInit+0x9c>)
 8001edc:	f000 fb9c 	bl	8002618 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	2025      	movs	r0, #37	@ 0x25
 8001ee6:	f000 face 	bl	8002486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001eea:	2025      	movs	r0, #37	@ 0x25
 8001eec:	f000 fae7 	bl	80024be <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ef0:	bf00      	nop
 8001ef2:	3728      	adds	r7, #40	@ 0x28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40011000 	.word	0x40011000
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020000 	.word	0x40020000

08001f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <NMI_Handler+0x4>

08001f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <HardFault_Handler+0x4>

08001f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <MemManage_Handler+0x4>

08001f1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <BusFault_Handler+0x4>

08001f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <UsageFault_Handler+0x4>

08001f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f5a:	f000 f975 	bl	8002248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f68:	4802      	ldr	r0, [pc, #8]	@ (8001f74 <TIM4_IRQHandler+0x10>)
 8001f6a:	f003 fe57 	bl	8005c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	200003dc 	.word	0x200003dc

08001f78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f7c:	4802      	ldr	r0, [pc, #8]	@ (8001f88 <USART1_IRQHandler+0x10>)
 8001f7e:	f004 fd49 	bl	8006a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000424 	.word	0x20000424

08001f8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f90:	4802      	ldr	r0, [pc, #8]	@ (8001f9c <OTG_FS_IRQHandler+0x10>)
 8001f92:	f001 fe51 	bl	8003c38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20001960 	.word	0x20001960

08001fa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return 1;
 8001fa4:	2301      	movs	r3, #1
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <_kill>:

int _kill(int pid, int sig)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fba:	f00a fa8f 	bl	800c4dc <__errno>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2216      	movs	r2, #22
 8001fc2:	601a      	str	r2, [r3, #0]
  return -1;
 8001fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <_exit>:

void _exit (int status)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ffe7 	bl	8001fb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fe2:	bf00      	nop
 8001fe4:	e7fd      	b.n	8001fe2 <_exit+0x12>

08001fe6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	e00a      	b.n	800200e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ff8:	f3af 8000 	nop.w
 8001ffc:	4601      	mov	r1, r0
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	60ba      	str	r2, [r7, #8]
 8002004:	b2ca      	uxtb	r2, r1
 8002006:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	3301      	adds	r3, #1
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	429a      	cmp	r2, r3
 8002014:	dbf0      	blt.n	8001ff8 <_read+0x12>
  }

  return len;
 8002016:	687b      	ldr	r3, [r7, #4]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	e009      	b.n	8002046 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	60ba      	str	r2, [r7, #8]
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	3301      	adds	r3, #1
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	429a      	cmp	r2, r3
 800204c:	dbf1      	blt.n	8002032 <_write+0x12>
  }
  return len;
 800204e:	687b      	ldr	r3, [r7, #4]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <_close>:

int _close(int file)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002060:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002080:	605a      	str	r2, [r3, #4]
  return 0;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <_isatty>:

int _isatty(int file)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002098:	2301      	movs	r3, #1
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b085      	sub	sp, #20
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c8:	4a14      	ldr	r2, [pc, #80]	@ (800211c <_sbrk+0x5c>)
 80020ca:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <_sbrk+0x60>)
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d4:	4b13      	ldr	r3, [pc, #76]	@ (8002124 <_sbrk+0x64>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d102      	bne.n	80020e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020dc:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <_sbrk+0x64>)
 80020de:	4a12      	ldr	r2, [pc, #72]	@ (8002128 <_sbrk+0x68>)
 80020e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020e2:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d207      	bcs.n	8002100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f0:	f00a f9f4 	bl	800c4dc <__errno>
 80020f4:	4603      	mov	r3, r0
 80020f6:	220c      	movs	r2, #12
 80020f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295
 80020fe:	e009      	b.n	8002114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002100:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002106:	4b07      	ldr	r3, [pc, #28]	@ (8002124 <_sbrk+0x64>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	4a05      	ldr	r2, [pc, #20]	@ (8002124 <_sbrk+0x64>)
 8002110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20020000 	.word	0x20020000
 8002120:	00000400 	.word	0x00000400
 8002124:	20000478 	.word	0x20000478
 8002128:	200021b0 	.word	0x200021b0

0800212c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002130:	4b06      	ldr	r3, [pc, #24]	@ (800214c <SystemInit+0x20>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002136:	4a05      	ldr	r2, [pc, #20]	@ (800214c <SystemInit+0x20>)
 8002138:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800213c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002150:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002188 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002154:	f7ff ffea 	bl	800212c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002158:	480c      	ldr	r0, [pc, #48]	@ (800218c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800215a:	490d      	ldr	r1, [pc, #52]	@ (8002190 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800215c:	4a0d      	ldr	r2, [pc, #52]	@ (8002194 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800215e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002160:	e002      	b.n	8002168 <LoopCopyDataInit>

08002162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002166:	3304      	adds	r3, #4

08002168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800216c:	d3f9      	bcc.n	8002162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800216e:	4a0a      	ldr	r2, [pc, #40]	@ (8002198 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002170:	4c0a      	ldr	r4, [pc, #40]	@ (800219c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002174:	e001      	b.n	800217a <LoopFillZerobss>

08002176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002178:	3204      	adds	r2, #4

0800217a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800217c:	d3fb      	bcc.n	8002176 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800217e:	f00a f9b3 	bl	800c4e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002182:	f7ff f95f 	bl	8001444 <main>
  bx  lr    
 8002186:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002188:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800218c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002190:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8002194:	0800ef50 	.word	0x0800ef50
  ldr r2, =_sbss
 8002198:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 800219c:	200021b0 	.word	0x200021b0

080021a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a0:	e7fe      	b.n	80021a0 <ADC_IRQHandler>
	...

080021a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021a8:	4b0e      	ldr	r3, [pc, #56]	@ (80021e4 <HAL_Init+0x40>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0d      	ldr	r2, [pc, #52]	@ (80021e4 <HAL_Init+0x40>)
 80021ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021b4:	4b0b      	ldr	r3, [pc, #44]	@ (80021e4 <HAL_Init+0x40>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0a      	ldr	r2, [pc, #40]	@ (80021e4 <HAL_Init+0x40>)
 80021ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c0:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <HAL_Init+0x40>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a07      	ldr	r2, [pc, #28]	@ (80021e4 <HAL_Init+0x40>)
 80021c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021cc:	2003      	movs	r0, #3
 80021ce:	f000 f94f 	bl	8002470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d2:	200f      	movs	r0, #15
 80021d4:	f000 f808 	bl	80021e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d8:	f7ff fce6 	bl	8001ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023c00 	.word	0x40023c00

080021e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f0:	4b12      	ldr	r3, [pc, #72]	@ (800223c <HAL_InitTick+0x54>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b12      	ldr	r3, [pc, #72]	@ (8002240 <HAL_InitTick+0x58>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4619      	mov	r1, r3
 80021fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002202:	fbb2 f3f3 	udiv	r3, r2, r3
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f967 	bl	80024da <HAL_SYSTICK_Config>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e00e      	b.n	8002234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b0f      	cmp	r3, #15
 800221a:	d80a      	bhi.n	8002232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800221c:	2200      	movs	r2, #0
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	f000 f92f 	bl	8002486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002228:	4a06      	ldr	r2, [pc, #24]	@ (8002244 <HAL_InitTick+0x5c>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e000      	b.n	8002234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000004 	.word	0x20000004
 8002240:	2000000c 	.word	0x2000000c
 8002244:	20000008 	.word	0x20000008

08002248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_IncTick+0x20>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_IncTick+0x24>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4413      	add	r3, r2
 8002258:	4a04      	ldr	r2, [pc, #16]	@ (800226c <HAL_IncTick+0x24>)
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	2000000c 	.word	0x2000000c
 800226c:	2000047c 	.word	0x2000047c

08002270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return uwTick;
 8002274:	4b03      	ldr	r3, [pc, #12]	@ (8002284 <HAL_GetTick+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	2000047c 	.word	0x2000047c

08002288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7ff ffee 	bl	8002270 <HAL_GetTick>
 8002294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a0:	d005      	beq.n	80022ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a2:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <HAL_Delay+0x44>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ae:	bf00      	nop
 80022b0:	f7ff ffde 	bl	8002270 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d8f7      	bhi.n	80022b0 <HAL_Delay+0x28>
  {
  }
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2000000c 	.word	0x2000000c

080022d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022ec:	4013      	ands	r3, r2
 80022ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002302:	4a04      	ldr	r2, [pc, #16]	@ (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	60d3      	str	r3, [r2, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800231c:	4b04      	ldr	r3, [pc, #16]	@ (8002330 <__NVIC_GetPriorityGrouping+0x18>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	f003 0307 	and.w	r3, r3, #7
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	2b00      	cmp	r3, #0
 8002344:	db0b      	blt.n	800235e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	f003 021f 	and.w	r2, r3, #31
 800234c:	4907      	ldr	r1, [pc, #28]	@ (800236c <__NVIC_EnableIRQ+0x38>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	2001      	movs	r0, #1
 8002356:	fa00 f202 	lsl.w	r2, r0, r2
 800235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000e100 	.word	0xe000e100

08002370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	2b00      	cmp	r3, #0
 8002382:	db0a      	blt.n	800239a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	490c      	ldr	r1, [pc, #48]	@ (80023bc <__NVIC_SetPriority+0x4c>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	440b      	add	r3, r1
 8002394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002398:	e00a      	b.n	80023b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4908      	ldr	r1, [pc, #32]	@ (80023c0 <__NVIC_SetPriority+0x50>)
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	3b04      	subs	r3, #4
 80023a8:	0112      	lsls	r2, r2, #4
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	440b      	add	r3, r1
 80023ae:	761a      	strb	r2, [r3, #24]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000e100 	.word	0xe000e100
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	@ 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f1c3 0307 	rsb	r3, r3, #7
 80023de:	2b04      	cmp	r3, #4
 80023e0:	bf28      	it	cs
 80023e2:	2304      	movcs	r3, #4
 80023e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2b06      	cmp	r3, #6
 80023ec:	d902      	bls.n	80023f4 <NVIC_EncodePriority+0x30>
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3b03      	subs	r3, #3
 80023f2:	e000      	b.n	80023f6 <NVIC_EncodePriority+0x32>
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	f04f 32ff 	mov.w	r2, #4294967295
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	401a      	ands	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800240c:	f04f 31ff 	mov.w	r1, #4294967295
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43d9      	mvns	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	4313      	orrs	r3, r2
         );
}
 800241e:	4618      	mov	r0, r3
 8002420:	3724      	adds	r7, #36	@ 0x24
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800243c:	d301      	bcc.n	8002442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243e:	2301      	movs	r3, #1
 8002440:	e00f      	b.n	8002462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002442:	4a0a      	ldr	r2, [pc, #40]	@ (800246c <SysTick_Config+0x40>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3b01      	subs	r3, #1
 8002448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800244a:	210f      	movs	r1, #15
 800244c:	f04f 30ff 	mov.w	r0, #4294967295
 8002450:	f7ff ff8e 	bl	8002370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002454:	4b05      	ldr	r3, [pc, #20]	@ (800246c <SysTick_Config+0x40>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800245a:	4b04      	ldr	r3, [pc, #16]	@ (800246c <SysTick_Config+0x40>)
 800245c:	2207      	movs	r2, #7
 800245e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	e000e010 	.word	0xe000e010

08002470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff ff29 	bl	80022d0 <__NVIC_SetPriorityGrouping>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002486:	b580      	push	{r7, lr}
 8002488:	b086      	sub	sp, #24
 800248a:	af00      	add	r7, sp, #0
 800248c:	4603      	mov	r3, r0
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002498:	f7ff ff3e 	bl	8002318 <__NVIC_GetPriorityGrouping>
 800249c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	6978      	ldr	r0, [r7, #20]
 80024a4:	f7ff ff8e 	bl	80023c4 <NVIC_EncodePriority>
 80024a8:	4602      	mov	r2, r0
 80024aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ff5d 	bl	8002370 <__NVIC_SetPriority>
}
 80024b6:	bf00      	nop
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff31 	bl	8002334 <__NVIC_EnableIRQ>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff ffa2 	bl	800242c <SysTick_Config>
 80024e8:	4603      	mov	r3, r0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002500:	f7ff feb6 	bl	8002270 <HAL_GetTick>
 8002504:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d008      	beq.n	8002524 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2280      	movs	r2, #128	@ 0x80
 8002516:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e052      	b.n	80025ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0216 	bic.w	r2, r2, #22
 8002532:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002542:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	2b00      	cmp	r3, #0
 800254a:	d103      	bne.n	8002554 <HAL_DMA_Abort+0x62>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0208 	bic.w	r2, r2, #8
 8002562:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002574:	e013      	b.n	800259e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002576:	f7ff fe7b 	bl	8002270 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b05      	cmp	r3, #5
 8002582:	d90c      	bls.n	800259e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2220      	movs	r2, #32
 8002588:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2203      	movs	r2, #3
 800258e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e015      	b.n	80025ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1e4      	bne.n	8002576 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b0:	223f      	movs	r2, #63	@ 0x3f
 80025b2:	409a      	lsls	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d004      	beq.n	80025f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2280      	movs	r2, #128	@ 0x80
 80025ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e00c      	b.n	800260a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2205      	movs	r2, #5
 80025f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	@ 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	e159      	b.n	80028e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002634:	2201      	movs	r2, #1
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	429a      	cmp	r2, r3
 800264e:	f040 8148 	bne.w	80028e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b01      	cmp	r3, #1
 800265c:	d005      	beq.n	800266a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002666:	2b02      	cmp	r3, #2
 8002668:	d130      	bne.n	80026cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	2203      	movs	r2, #3
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a0:	2201      	movs	r2, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 0201 	and.w	r2, r3, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d017      	beq.n	8002708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	2203      	movs	r2, #3
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d123      	bne.n	800275c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	08da      	lsrs	r2, r3, #3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3208      	adds	r2, #8
 800271c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	220f      	movs	r2, #15
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	08da      	lsrs	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3208      	adds	r2, #8
 8002756:	69b9      	ldr	r1, [r7, #24]
 8002758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0203 	and.w	r2, r3, #3
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80a2 	beq.w	80028e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	4b57      	ldr	r3, [pc, #348]	@ (8002900 <HAL_GPIO_Init+0x2e8>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a6:	4a56      	ldr	r2, [pc, #344]	@ (8002900 <HAL_GPIO_Init+0x2e8>)
 80027a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ae:	4b54      	ldr	r3, [pc, #336]	@ (8002900 <HAL_GPIO_Init+0x2e8>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ba:	4a52      	ldr	r2, [pc, #328]	@ (8002904 <HAL_GPIO_Init+0x2ec>)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3302      	adds	r3, #2
 80027c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	220f      	movs	r2, #15
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a49      	ldr	r2, [pc, #292]	@ (8002908 <HAL_GPIO_Init+0x2f0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d019      	beq.n	800281a <HAL_GPIO_Init+0x202>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a48      	ldr	r2, [pc, #288]	@ (800290c <HAL_GPIO_Init+0x2f4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d013      	beq.n	8002816 <HAL_GPIO_Init+0x1fe>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a47      	ldr	r2, [pc, #284]	@ (8002910 <HAL_GPIO_Init+0x2f8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00d      	beq.n	8002812 <HAL_GPIO_Init+0x1fa>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a46      	ldr	r2, [pc, #280]	@ (8002914 <HAL_GPIO_Init+0x2fc>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d007      	beq.n	800280e <HAL_GPIO_Init+0x1f6>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a45      	ldr	r2, [pc, #276]	@ (8002918 <HAL_GPIO_Init+0x300>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d101      	bne.n	800280a <HAL_GPIO_Init+0x1f2>
 8002806:	2304      	movs	r3, #4
 8002808:	e008      	b.n	800281c <HAL_GPIO_Init+0x204>
 800280a:	2307      	movs	r3, #7
 800280c:	e006      	b.n	800281c <HAL_GPIO_Init+0x204>
 800280e:	2303      	movs	r3, #3
 8002810:	e004      	b.n	800281c <HAL_GPIO_Init+0x204>
 8002812:	2302      	movs	r3, #2
 8002814:	e002      	b.n	800281c <HAL_GPIO_Init+0x204>
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <HAL_GPIO_Init+0x204>
 800281a:	2300      	movs	r3, #0
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	f002 0203 	and.w	r2, r2, #3
 8002822:	0092      	lsls	r2, r2, #2
 8002824:	4093      	lsls	r3, r2
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800282c:	4935      	ldr	r1, [pc, #212]	@ (8002904 <HAL_GPIO_Init+0x2ec>)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	089b      	lsrs	r3, r3, #2
 8002832:	3302      	adds	r3, #2
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283a:	4b38      	ldr	r3, [pc, #224]	@ (800291c <HAL_GPIO_Init+0x304>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	43db      	mvns	r3, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4013      	ands	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800285e:	4a2f      	ldr	r2, [pc, #188]	@ (800291c <HAL_GPIO_Init+0x304>)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002864:	4b2d      	ldr	r3, [pc, #180]	@ (800291c <HAL_GPIO_Init+0x304>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002888:	4a24      	ldr	r2, [pc, #144]	@ (800291c <HAL_GPIO_Init+0x304>)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800288e:	4b23      	ldr	r3, [pc, #140]	@ (800291c <HAL_GPIO_Init+0x304>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028b2:	4a1a      	ldr	r2, [pc, #104]	@ (800291c <HAL_GPIO_Init+0x304>)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b8:	4b18      	ldr	r3, [pc, #96]	@ (800291c <HAL_GPIO_Init+0x304>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028dc:	4a0f      	ldr	r2, [pc, #60]	@ (800291c <HAL_GPIO_Init+0x304>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3301      	adds	r3, #1
 80028e6:	61fb      	str	r3, [r7, #28]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	2b0f      	cmp	r3, #15
 80028ec:	f67f aea2 	bls.w	8002634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	3724      	adds	r7, #36	@ 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800
 8002904:	40013800 	.word	0x40013800
 8002908:	40020000 	.word	0x40020000
 800290c:	40020400 	.word	0x40020400
 8002910:	40020800 	.word	0x40020800
 8002914:	40020c00 	.word	0x40020c00
 8002918:	40021000 	.word	0x40021000
 800291c:	40013c00 	.word	0x40013c00

08002920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	807b      	strh	r3, [r7, #2]
 800292c:	4613      	mov	r3, r2
 800292e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002930:	787b      	ldrb	r3, [r7, #1]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002936:	887a      	ldrh	r2, [r7, #2]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800293c:	e003      	b.n	8002946 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800293e:	887b      	ldrh	r3, [r7, #2]
 8002940:	041a      	lsls	r2, r3, #16
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	619a      	str	r2, [r3, #24]
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002952:	b480      	push	{r7}
 8002954:	b085      	sub	sp, #20
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002964:	887a      	ldrh	r2, [r7, #2]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4013      	ands	r3, r2
 800296a:	041a      	lsls	r2, r3, #16
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	43d9      	mvns	r1, r3
 8002970:	887b      	ldrh	r3, [r7, #2]
 8002972:	400b      	ands	r3, r1
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	619a      	str	r2, [r3, #24]
}
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e12b      	b.n	8002bf2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff f922 	bl	8001bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2224      	movs	r2, #36	@ 0x24
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029ec:	f002 fe62 	bl	80056b4 <HAL_RCC_GetPCLK1Freq>
 80029f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4a81      	ldr	r2, [pc, #516]	@ (8002bfc <HAL_I2C_Init+0x274>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d807      	bhi.n	8002a0c <HAL_I2C_Init+0x84>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4a80      	ldr	r2, [pc, #512]	@ (8002c00 <HAL_I2C_Init+0x278>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	bf94      	ite	ls
 8002a04:	2301      	movls	r3, #1
 8002a06:	2300      	movhi	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	e006      	b.n	8002a1a <HAL_I2C_Init+0x92>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4a7d      	ldr	r2, [pc, #500]	@ (8002c04 <HAL_I2C_Init+0x27c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	bf94      	ite	ls
 8002a14:	2301      	movls	r3, #1
 8002a16:	2300      	movhi	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e0e7      	b.n	8002bf2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4a78      	ldr	r2, [pc, #480]	@ (8002c08 <HAL_I2C_Init+0x280>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	0c9b      	lsrs	r3, r3, #18
 8002a2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4a6a      	ldr	r2, [pc, #424]	@ (8002bfc <HAL_I2C_Init+0x274>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d802      	bhi.n	8002a5c <HAL_I2C_Init+0xd4>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	e009      	b.n	8002a70 <HAL_I2C_Init+0xe8>
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	4a69      	ldr	r2, [pc, #420]	@ (8002c0c <HAL_I2C_Init+0x284>)
 8002a68:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6c:	099b      	lsrs	r3, r3, #6
 8002a6e:	3301      	adds	r3, #1
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	430b      	orrs	r3, r1
 8002a76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	495c      	ldr	r1, [pc, #368]	@ (8002bfc <HAL_I2C_Init+0x274>)
 8002a8c:	428b      	cmp	r3, r1
 8002a8e:	d819      	bhi.n	8002ac4 <HAL_I2C_Init+0x13c>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1e59      	subs	r1, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a9e:	1c59      	adds	r1, r3, #1
 8002aa0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002aa4:	400b      	ands	r3, r1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_I2C_Init+0x138>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1e59      	subs	r1, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab8:	3301      	adds	r3, #1
 8002aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002abe:	e051      	b.n	8002b64 <HAL_I2C_Init+0x1dc>
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	e04f      	b.n	8002b64 <HAL_I2C_Init+0x1dc>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d111      	bne.n	8002af0 <HAL_I2C_Init+0x168>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1e58      	subs	r0, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	440b      	add	r3, r1
 8002ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	e012      	b.n	8002b16 <HAL_I2C_Init+0x18e>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1e58      	subs	r0, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6859      	ldr	r1, [r3, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	0099      	lsls	r1, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b06:	3301      	adds	r3, #1
 8002b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_I2C_Init+0x196>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e022      	b.n	8002b64 <HAL_I2C_Init+0x1dc>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10e      	bne.n	8002b44 <HAL_I2C_Init+0x1bc>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1e58      	subs	r0, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6859      	ldr	r1, [r3, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	440b      	add	r3, r1
 8002b34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b42:	e00f      	b.n	8002b64 <HAL_I2C_Init+0x1dc>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1e58      	subs	r0, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6859      	ldr	r1, [r3, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	0099      	lsls	r1, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	6809      	ldr	r1, [r1, #0]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69da      	ldr	r2, [r3, #28]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6911      	ldr	r1, [r2, #16]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68d2      	ldr	r2, [r2, #12]
 8002b9e:	4311      	orrs	r1, r2
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	000186a0 	.word	0x000186a0
 8002c00:	001e847f 	.word	0x001e847f
 8002c04:	003d08ff 	.word	0x003d08ff
 8002c08:	431bde83 	.word	0x431bde83
 8002c0c:	10624dd3 	.word	0x10624dd3

08002c10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	817b      	strh	r3, [r7, #10]
 8002c20:	4613      	mov	r3, r2
 8002c22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c24:	f7ff fb24 	bl	8002270 <HAL_GetTick>
 8002c28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	f040 80e0 	bne.w	8002df8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	2319      	movs	r3, #25
 8002c3e:	2201      	movs	r2, #1
 8002c40:	4970      	ldr	r1, [pc, #448]	@ (8002e04 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fc7e 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e0d3      	b.n	8002dfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_I2C_Master_Transmit+0x50>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e0cc      	b.n	8002dfa <HAL_I2C_Master_Transmit+0x1ea>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d007      	beq.n	8002c86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0201 	orr.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2221      	movs	r2, #33	@ 0x21
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2210      	movs	r2, #16
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	893a      	ldrh	r2, [r7, #8]
 8002cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4a50      	ldr	r2, [pc, #320]	@ (8002e08 <HAL_I2C_Master_Transmit+0x1f8>)
 8002cc6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cc8:	8979      	ldrh	r1, [r7, #10]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	6a3a      	ldr	r2, [r7, #32]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 face 	bl	8003270 <I2C_MasterRequestWrite>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e08d      	b.n	8002dfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cf4:	e066      	b.n	8002dc4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	6a39      	ldr	r1, [r7, #32]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 fd3c 	bl	8003778 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00d      	beq.n	8002d22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d107      	bne.n	8002d1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e06b      	b.n	8002dfa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d26:	781a      	ldrb	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d11b      	bne.n	8002d98 <HAL_I2C_Master_Transmit+0x188>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d017      	beq.n	8002d98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	781a      	ldrb	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	6a39      	ldr	r1, [r7, #32]
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 fd33 	bl	8003808 <I2C_WaitOnBTFFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00d      	beq.n	8002dc4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d107      	bne.n	8002dc0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dbe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e01a      	b.n	8002dfa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d194      	bne.n	8002cf6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	e000      	b.n	8002dfa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002df8:	2302      	movs	r3, #2
  }
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	00100002 	.word	0x00100002
 8002e08:	ffff0000 	.word	0xffff0000

08002e0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08c      	sub	sp, #48	@ 0x30
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	4608      	mov	r0, r1
 8002e16:	4611      	mov	r1, r2
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	817b      	strh	r3, [r7, #10]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	813b      	strh	r3, [r7, #8]
 8002e22:	4613      	mov	r3, r2
 8002e24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e26:	f7ff fa23 	bl	8002270 <HAL_GetTick>
 8002e2a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	f040 8214 	bne.w	8003262 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	2319      	movs	r3, #25
 8002e40:	2201      	movs	r2, #1
 8002e42:	497b      	ldr	r1, [pc, #492]	@ (8003030 <HAL_I2C_Mem_Read+0x224>)
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fb7d 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e50:	2302      	movs	r3, #2
 8002e52:	e207      	b.n	8003264 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_I2C_Mem_Read+0x56>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e200      	b.n	8003264 <HAL_I2C_Mem_Read+0x458>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d007      	beq.n	8002e88 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2222      	movs	r2, #34	@ 0x22
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2240      	movs	r2, #64	@ 0x40
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4a5b      	ldr	r2, [pc, #364]	@ (8003034 <HAL_I2C_Mem_Read+0x228>)
 8002ec8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eca:	88f8      	ldrh	r0, [r7, #6]
 8002ecc:	893a      	ldrh	r2, [r7, #8]
 8002ece:	8979      	ldrh	r1, [r7, #10]
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	4603      	mov	r3, r0
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 fa4a 	bl	8003374 <I2C_RequestMemoryRead>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e1bc      	b.n	8003264 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d113      	bne.n	8002f1a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	623b      	str	r3, [r7, #32]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	623b      	str	r3, [r7, #32]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	623b      	str	r3, [r7, #32]
 8002f06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	e190      	b.n	800323c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d11b      	bne.n	8002f5a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	61fb      	str	r3, [r7, #28]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	61fb      	str	r3, [r7, #28]
 8002f46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	e170      	b.n	800323c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d11b      	bne.n	8002f9a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f70:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	61bb      	str	r3, [r7, #24]
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	e150      	b.n	800323c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fb0:	e144      	b.n	800323c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	f200 80f1 	bhi.w	800319e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d123      	bne.n	800300c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 fc65 	bl	8003898 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e145      	b.n	8003264 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003000:	b29b      	uxth	r3, r3
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800300a:	e117      	b.n	800323c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003010:	2b02      	cmp	r3, #2
 8003012:	d14e      	bne.n	80030b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800301a:	2200      	movs	r2, #0
 800301c:	4906      	ldr	r1, [pc, #24]	@ (8003038 <HAL_I2C_Mem_Read+0x22c>)
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 fa90 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e11a      	b.n	8003264 <HAL_I2C_Mem_Read+0x458>
 800302e:	bf00      	nop
 8003030:	00100002 	.word	0x00100002
 8003034:	ffff0000 	.word	0xffff0000
 8003038:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800304a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030b0:	e0c4      	b.n	800323c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b8:	2200      	movs	r2, #0
 80030ba:	496c      	ldr	r1, [pc, #432]	@ (800326c <HAL_I2C_Mem_Read+0x460>)
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fa41 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0cb      	b.n	8003264 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800310e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003114:	2200      	movs	r2, #0
 8003116:	4955      	ldr	r1, [pc, #340]	@ (800326c <HAL_I2C_Mem_Read+0x460>)
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 fa13 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e09d      	b.n	8003264 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003136:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800319c:	e04e      	b.n	800323c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800319e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031a0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 fb78 	bl	8003898 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e058      	b.n	8003264 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d124      	bne.n	800323c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f6:	2b03      	cmp	r3, #3
 80031f8:	d107      	bne.n	800320a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003208:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003240:	2b00      	cmp	r3, #0
 8003242:	f47f aeb6 	bne.w	8002fb2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	e000      	b.n	8003264 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003262:	2302      	movs	r3, #2
  }
}
 8003264:	4618      	mov	r0, r3
 8003266:	3728      	adds	r7, #40	@ 0x28
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	00010004 	.word	0x00010004

08003270 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af02      	add	r7, sp, #8
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	607a      	str	r2, [r7, #4]
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	460b      	mov	r3, r1
 800327e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003284:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d006      	beq.n	800329a <I2C_MasterRequestWrite+0x2a>
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d003      	beq.n	800329a <I2C_MasterRequestWrite+0x2a>
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003298:	d108      	bne.n	80032ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	e00b      	b.n	80032c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b0:	2b12      	cmp	r3, #18
 80032b2:	d107      	bne.n	80032c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f937 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00d      	beq.n	80032f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ea:	d103      	bne.n	80032f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e035      	b.n	8003364 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003300:	d108      	bne.n	8003314 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003302:	897b      	ldrh	r3, [r7, #10]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003310:	611a      	str	r2, [r3, #16]
 8003312:	e01b      	b.n	800334c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003314:	897b      	ldrh	r3, [r7, #10]
 8003316:	11db      	asrs	r3, r3, #7
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f003 0306 	and.w	r3, r3, #6
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f063 030f 	orn	r3, r3, #15
 8003324:	b2da      	uxtb	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	490e      	ldr	r1, [pc, #56]	@ (800336c <I2C_MasterRequestWrite+0xfc>)
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f980 	bl	8003638 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e010      	b.n	8003364 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003342:	897b      	ldrh	r3, [r7, #10]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4907      	ldr	r1, [pc, #28]	@ (8003370 <I2C_MasterRequestWrite+0x100>)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f970 	bl	8003638 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	00010008 	.word	0x00010008
 8003370:	00010002 	.word	0x00010002

08003374 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	4608      	mov	r0, r1
 800337e:	4611      	mov	r1, r2
 8003380:	461a      	mov	r2, r3
 8003382:	4603      	mov	r3, r0
 8003384:	817b      	strh	r3, [r7, #10]
 8003386:	460b      	mov	r3, r1
 8003388:	813b      	strh	r3, [r7, #8]
 800338a:	4613      	mov	r3, r2
 800338c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800339c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f8c2 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00d      	beq.n	80033e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033d4:	d103      	bne.n	80033de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e0aa      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033e2:	897b      	ldrh	r3, [r7, #10]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f4:	6a3a      	ldr	r2, [r7, #32]
 80033f6:	4952      	ldr	r1, [pc, #328]	@ (8003540 <I2C_RequestMemoryRead+0x1cc>)
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f91d 	bl	8003638 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e097      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800341e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003420:	6a39      	ldr	r1, [r7, #32]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f9a8 	bl	8003778 <I2C_WaitOnTXEFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00d      	beq.n	800344a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	2b04      	cmp	r3, #4
 8003434:	d107      	bne.n	8003446 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003444:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e076      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d105      	bne.n	800345c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003450:	893b      	ldrh	r3, [r7, #8]
 8003452:	b2da      	uxtb	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	611a      	str	r2, [r3, #16]
 800345a:	e021      	b.n	80034a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800345c:	893b      	ldrh	r3, [r7, #8]
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	b29b      	uxth	r3, r3
 8003462:	b2da      	uxtb	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800346a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800346c:	6a39      	ldr	r1, [r7, #32]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f982 	bl	8003778 <I2C_WaitOnTXEFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00d      	beq.n	8003496 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	2b04      	cmp	r3, #4
 8003480:	d107      	bne.n	8003492 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003490:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e050      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003496:	893b      	ldrh	r3, [r7, #8]
 8003498:	b2da      	uxtb	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a2:	6a39      	ldr	r1, [r7, #32]
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 f967 	bl	8003778 <I2C_WaitOnTXEFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00d      	beq.n	80034cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d107      	bne.n	80034c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e035      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f82b 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00d      	beq.n	8003510 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003502:	d103      	bne.n	800350c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800350a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e013      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003510:	897b      	ldrh	r3, [r7, #10]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	b2da      	uxtb	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003522:	6a3a      	ldr	r2, [r7, #32]
 8003524:	4906      	ldr	r1, [pc, #24]	@ (8003540 <I2C_RequestMemoryRead+0x1cc>)
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f886 	bl	8003638 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	00010002 	.word	0x00010002

08003544 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003554:	e048      	b.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d044      	beq.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355e:	f7fe fe87 	bl	8002270 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d302      	bcc.n	8003574 <I2C_WaitOnFlagUntilTimeout+0x30>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d139      	bne.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	0c1b      	lsrs	r3, r3, #16
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b01      	cmp	r3, #1
 800357c:	d10d      	bne.n	800359a <I2C_WaitOnFlagUntilTimeout+0x56>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	43da      	mvns	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	4013      	ands	r3, r2
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	bf0c      	ite	eq
 8003590:	2301      	moveq	r3, #1
 8003592:	2300      	movne	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	e00c      	b.n	80035b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	43da      	mvns	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	4013      	ands	r3, r2
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	bf0c      	ite	eq
 80035ac:	2301      	moveq	r3, #1
 80035ae:	2300      	movne	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d116      	bne.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	f043 0220 	orr.w	r2, r3, #32
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e023      	b.n	8003630 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	0c1b      	lsrs	r3, r3, #16
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d10d      	bne.n	800360e <I2C_WaitOnFlagUntilTimeout+0xca>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	43da      	mvns	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4013      	ands	r3, r2
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf0c      	ite	eq
 8003604:	2301      	moveq	r3, #1
 8003606:	2300      	movne	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	461a      	mov	r2, r3
 800360c:	e00c      	b.n	8003628 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	43da      	mvns	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	4013      	ands	r3, r2
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	bf0c      	ite	eq
 8003620:	2301      	moveq	r3, #1
 8003622:	2300      	movne	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	429a      	cmp	r2, r3
 800362c:	d093      	beq.n	8003556 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003646:	e071      	b.n	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003656:	d123      	bne.n	80036a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003666:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003670:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368c:	f043 0204 	orr.w	r2, r3, #4
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e067      	b.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a6:	d041      	beq.n	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a8:	f7fe fde2 	bl	8002270 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d302      	bcc.n	80036be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d136      	bne.n	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	0c1b      	lsrs	r3, r3, #16
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d10c      	bne.n	80036e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	43da      	mvns	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4013      	ands	r3, r2
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	bf14      	ite	ne
 80036da:	2301      	movne	r3, #1
 80036dc:	2300      	moveq	r3, #0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	e00b      	b.n	80036fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	43da      	mvns	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	4013      	ands	r3, r2
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	bf14      	ite	ne
 80036f4:	2301      	movne	r3, #1
 80036f6:	2300      	moveq	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d016      	beq.n	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	f043 0220 	orr.w	r2, r3, #32
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e021      	b.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	0c1b      	lsrs	r3, r3, #16
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d10c      	bne.n	8003750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	43da      	mvns	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4013      	ands	r3, r2
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf14      	ite	ne
 8003748:	2301      	movne	r3, #1
 800374a:	2300      	moveq	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e00b      	b.n	8003768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	43da      	mvns	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4013      	ands	r3, r2
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	bf14      	ite	ne
 8003762:	2301      	movne	r3, #1
 8003764:	2300      	moveq	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	f47f af6d 	bne.w	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003784:	e034      	b.n	80037f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f8e3 	bl	8003952 <I2C_IsAcknowledgeFailed>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e034      	b.n	8003800 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d028      	beq.n	80037f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379e:	f7fe fd67 	bl	8002270 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d302      	bcc.n	80037b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d11d      	bne.n	80037f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037be:	2b80      	cmp	r3, #128	@ 0x80
 80037c0:	d016      	beq.n	80037f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037dc:	f043 0220 	orr.w	r2, r3, #32
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e007      	b.n	8003800 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037fa:	2b80      	cmp	r3, #128	@ 0x80
 80037fc:	d1c3      	bne.n	8003786 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003814:	e034      	b.n	8003880 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f89b 	bl	8003952 <I2C_IsAcknowledgeFailed>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e034      	b.n	8003890 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d028      	beq.n	8003880 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382e:	f7fe fd1f 	bl	8002270 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	429a      	cmp	r2, r3
 800383c:	d302      	bcc.n	8003844 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d11d      	bne.n	8003880 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b04      	cmp	r3, #4
 8003850:	d016      	beq.n	8003880 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386c:	f043 0220 	orr.w	r2, r3, #32
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e007      	b.n	8003890 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b04      	cmp	r3, #4
 800388c:	d1c3      	bne.n	8003816 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038a4:	e049      	b.n	800393a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d119      	bne.n	80038e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0210 	mvn.w	r2, #16
 80038bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e030      	b.n	800394a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e8:	f7fe fcc2 	bl	8002270 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d302      	bcc.n	80038fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d11d      	bne.n	800393a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003908:	2b40      	cmp	r3, #64	@ 0x40
 800390a:	d016      	beq.n	800393a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	f043 0220 	orr.w	r2, r3, #32
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e007      	b.n	800394a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003944:	2b40      	cmp	r3, #64	@ 0x40
 8003946:	d1ae      	bne.n	80038a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003968:	d11b      	bne.n	80039a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003972:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	f043 0204 	orr.w	r2, r3, #4
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e101      	b.n	8003bc6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d106      	bne.n	80039e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f007 fc8f 	bl	800b300 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2203      	movs	r2, #3
 80039e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039f0:	d102      	bne.n	80039f8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f004 f876 	bl	8007aee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6818      	ldr	r0, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	7c1a      	ldrb	r2, [r3, #16]
 8003a0a:	f88d 2000 	strb.w	r2, [sp]
 8003a0e:	3304      	adds	r3, #4
 8003a10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a12:	f003 ff55 	bl	80078c0 <USB_CoreInit>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0ce      	b.n	8003bc6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f004 f86e 	bl	8007b10 <USB_SetCurrentMode>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e0bf      	b.n	8003bc6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a46:	2300      	movs	r3, #0
 8003a48:	73fb      	strb	r3, [r7, #15]
 8003a4a:	e04a      	b.n	8003ae2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	3315      	adds	r3, #21
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a60:	7bfa      	ldrb	r2, [r7, #15]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3314      	adds	r3, #20
 8003a70:	7bfa      	ldrb	r2, [r7, #15]
 8003a72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a74:	7bfa      	ldrb	r2, [r7, #15]
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	b298      	uxth	r0, r3
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	332e      	adds	r3, #46	@ 0x2e
 8003a88:	4602      	mov	r2, r0
 8003a8a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a8c:	7bfa      	ldrb	r2, [r7, #15]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	3318      	adds	r3, #24
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	331c      	adds	r3, #28
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	3320      	adds	r3, #32
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ac8:	7bfa      	ldrb	r2, [r7, #15]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	3324      	adds	r3, #36	@ 0x24
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	791b      	ldrb	r3, [r3, #4]
 8003ae6:	7bfa      	ldrb	r2, [r7, #15]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d3af      	bcc.n	8003a4c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aec:	2300      	movs	r3, #0
 8003aee:	73fb      	strb	r3, [r7, #15]
 8003af0:	e044      	b.n	8003b7c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003af2:	7bfa      	ldrb	r2, [r7, #15]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003b04:	2200      	movs	r2, #0
 8003b06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b08:	7bfa      	ldrb	r2, [r7, #15]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003b1a:	7bfa      	ldrb	r2, [r7, #15]
 8003b1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b1e:	7bfa      	ldrb	r2, [r7, #15]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003b30:	2200      	movs	r2, #0
 8003b32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b34:	7bfa      	ldrb	r2, [r7, #15]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b4a:	7bfa      	ldrb	r2, [r7, #15]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b60:	7bfa      	ldrb	r2, [r7, #15]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	791b      	ldrb	r3, [r3, #4]
 8003b80:	7bfa      	ldrb	r2, [r7, #15]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d3b5      	bcc.n	8003af2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	7c1a      	ldrb	r2, [r3, #16]
 8003b8e:	f88d 2000 	strb.w	r2, [sp]
 8003b92:	3304      	adds	r3, #4
 8003b94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b96:	f004 f807 	bl	8007ba8 <USB_DevInit>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e00c      	b.n	8003bc6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f005 f851 	bl	8008c66 <USB_DevDisconnect>

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_PCD_Start+0x1c>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e022      	b.n	8003c30 <HAL_PCD_Start+0x62>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d105      	bne.n	8003c12 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f003 ff58 	bl	8007acc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f004 ffff 	bl	8008c24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c38:	b590      	push	{r4, r7, lr}
 8003c3a:	b08d      	sub	sp, #52	@ 0x34
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f005 f8bd 	bl	8008dce <USB_GetMode>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f040 848c 	bne.w	8004574 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f005 f821 	bl	8008ca8 <USB_ReadInterrupts>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8482 	beq.w	8004572 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	0a1b      	lsrs	r3, r3, #8
 8003c78:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f005 f80e 	bl	8008ca8 <USB_ReadInterrupts>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d107      	bne.n	8003ca6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695a      	ldr	r2, [r3, #20]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f002 0202 	and.w	r2, r2, #2
 8003ca4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f004 fffc 	bl	8008ca8 <USB_ReadInterrupts>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f003 0310 	and.w	r3, r3, #16
 8003cb6:	2b10      	cmp	r3, #16
 8003cb8:	d161      	bne.n	8003d7e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699a      	ldr	r2, [r3, #24]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0210 	bic.w	r2, r2, #16
 8003cc8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	f003 020f 	and.w	r2, r3, #15
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	0c5b      	lsrs	r3, r3, #17
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d124      	bne.n	8003d40 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d035      	beq.n	8003d6e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	091b      	lsrs	r3, r3, #4
 8003d0a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	6a38      	ldr	r0, [r7, #32]
 8003d16:	f004 fe33 	bl	8008980 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d26:	441a      	add	r2, r3
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	091b      	lsrs	r3, r3, #4
 8003d34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d38:	441a      	add	r2, r3
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	615a      	str	r2, [r3, #20]
 8003d3e:	e016      	b.n	8003d6e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	0c5b      	lsrs	r3, r3, #17
 8003d44:	f003 030f 	and.w	r3, r3, #15
 8003d48:	2b06      	cmp	r3, #6
 8003d4a:	d110      	bne.n	8003d6e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d52:	2208      	movs	r2, #8
 8003d54:	4619      	mov	r1, r3
 8003d56:	6a38      	ldr	r0, [r7, #32]
 8003d58:	f004 fe12 	bl	8008980 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	695a      	ldr	r2, [r3, #20]
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	091b      	lsrs	r3, r3, #4
 8003d64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d68:	441a      	add	r2, r3
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699a      	ldr	r2, [r3, #24]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0210 	orr.w	r2, r2, #16
 8003d7c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f004 ff90 	bl	8008ca8 <USB_ReadInterrupts>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d8e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d92:	f040 80a7 	bne.w	8003ee4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f004 ff95 	bl	8008cce <USB_ReadDevAllOutEpInterrupt>
 8003da4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003da6:	e099      	b.n	8003edc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 808e 	beq.w	8003ed0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f004 ffb9 	bl	8008d36 <USB_ReadDevOutEPInterrupt>
 8003dc4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00c      	beq.n	8003dea <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2301      	movs	r3, #1
 8003de0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003de2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fea3 	bl	8004b30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00c      	beq.n	8003e0e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e00:	461a      	mov	r2, r3
 8003e02:	2308      	movs	r3, #8
 8003e04:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 ff79 	bl	8004d00 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d008      	beq.n	8003e2a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e24:	461a      	mov	r2, r3
 8003e26:	2310      	movs	r3, #16
 8003e28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d030      	beq.n	8003e96 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3c:	2b80      	cmp	r3, #128	@ 0x80
 8003e3e:	d109      	bne.n	8003e54 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	69fa      	ldr	r2, [r7, #28]
 8003e4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e52:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e56:	4613      	mov	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	3304      	adds	r3, #4
 8003e68:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	78db      	ldrb	r3, [r3, #3]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d108      	bne.n	8003e84 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2200      	movs	r2, #0
 8003e76:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f007 fb3a 	bl	800b4f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e90:	461a      	mov	r2, r3
 8003e92:	2302      	movs	r3, #2
 8003e94:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eac:	461a      	mov	r2, r3
 8003eae:	2320      	movs	r3, #32
 8003eb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d009      	beq.n	8003ed0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ec8:	461a      	mov	r2, r3
 8003eca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ece:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed8:	085b      	lsrs	r3, r3, #1
 8003eda:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f47f af62 	bne.w	8003da8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f004 fedd 	bl	8008ca8 <USB_ReadInterrupts>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ef4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ef8:	f040 80db 	bne.w	80040b2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f004 fefe 	bl	8008d02 <USB_ReadDevAllInEpInterrupt>
 8003f06:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003f0c:	e0cd      	b.n	80040aa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 80c2 	beq.w	800409e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f004 ff24 	bl	8008d72 <USB_ReadDevInEPInterrupt>
 8003f2a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d057      	beq.n	8003fe6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f38:	f003 030f 	and.w	r3, r3, #15
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	69f9      	ldr	r1, [r7, #28]
 8003f52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f56:	4013      	ands	r3, r2
 8003f58:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f66:	461a      	mov	r2, r3
 8003f68:	2301      	movs	r3, #1
 8003f6a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	799b      	ldrb	r3, [r3, #6]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d132      	bne.n	8003fda <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	3320      	adds	r3, #32
 8003f84:	6819      	ldr	r1, [r3, #0]
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4403      	add	r3, r0
 8003f94:	331c      	adds	r3, #28
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4419      	add	r1, r3
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4403      	add	r3, r0
 8003fa8:	3320      	adds	r3, #32
 8003faa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d113      	bne.n	8003fda <HAL_PCD_IRQHandler+0x3a2>
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	3324      	adds	r3, #36	@ 0x24
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d108      	bne.n	8003fda <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	f004 ff2b 	bl	8008e30 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	4619      	mov	r1, r3
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f007 fa0e 	bl	800b402 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	2308      	movs	r3, #8
 8004000:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004018:	461a      	mov	r2, r3
 800401a:	2310      	movs	r3, #16
 800401c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004034:	461a      	mov	r2, r3
 8004036:	2340      	movs	r3, #64	@ 0x40
 8004038:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d023      	beq.n	800408c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004044:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004046:	6a38      	ldr	r0, [r7, #32]
 8004048:	f003 ff12 	bl	8007e70 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800404c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800404e:	4613      	mov	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	3310      	adds	r3, #16
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	4413      	add	r3, r2
 800405c:	3304      	adds	r3, #4
 800405e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	78db      	ldrb	r3, [r3, #3]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d108      	bne.n	800407a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2200      	movs	r2, #0
 800406c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	b2db      	uxtb	r3, r3
 8004072:	4619      	mov	r1, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f007 fa51 	bl	800b51c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004086:	461a      	mov	r2, r3
 8004088:	2302      	movs	r3, #2
 800408a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004096:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fcbd 	bl	8004a18 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a0:	3301      	adds	r3, #1
 80040a2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80040a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a6:	085b      	lsrs	r3, r3, #1
 80040a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80040aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f47f af2e 	bne.w	8003f0e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f004 fdf6 	bl	8008ca8 <USB_ReadInterrupts>
 80040bc:	4603      	mov	r3, r0
 80040be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040c6:	d122      	bne.n	800410e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040d6:	f023 0301 	bic.w	r3, r3, #1
 80040da:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d108      	bne.n	80040f8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040ee:	2100      	movs	r1, #0
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fea3 	bl	8004e3c <HAL_PCDEx_LPM_Callback>
 80040f6:	e002      	b.n	80040fe <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f007 f9ef 	bl	800b4dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695a      	ldr	r2, [r3, #20]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800410c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4618      	mov	r0, r3
 8004114:	f004 fdc8 	bl	8008ca8 <USB_ReadInterrupts>
 8004118:	4603      	mov	r3, r0
 800411a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800411e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004122:	d112      	bne.n	800414a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b01      	cmp	r3, #1
 8004132:	d102      	bne.n	800413a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f007 f9ab 	bl	800b490 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695a      	ldr	r2, [r3, #20]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004148:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f004 fdaa 	bl	8008ca8 <USB_ReadInterrupts>
 8004154:	4603      	mov	r3, r0
 8004156:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800415a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800415e:	f040 80b7 	bne.w	80042d0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	69fa      	ldr	r2, [r7, #28]
 800416c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004170:	f023 0301 	bic.w	r3, r3, #1
 8004174:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2110      	movs	r1, #16
 800417c:	4618      	mov	r0, r3
 800417e:	f003 fe77 	bl	8007e70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004182:	2300      	movs	r3, #0
 8004184:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004186:	e046      	b.n	8004216 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	4413      	add	r3, r2
 8004190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004194:	461a      	mov	r2, r3
 8004196:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800419a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800419c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041ac:	0151      	lsls	r1, r2, #5
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	440a      	add	r2, r1
 80041b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c8:	461a      	mov	r2, r3
 80041ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041ce:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041e0:	0151      	lsls	r1, r2, #5
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	440a      	add	r2, r1
 80041e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004200:	0151      	lsls	r1, r2, #5
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	440a      	add	r2, r1
 8004206:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800420a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800420e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004212:	3301      	adds	r3, #1
 8004214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	791b      	ldrb	r3, [r3, #4]
 800421a:	461a      	mov	r2, r3
 800421c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800421e:	4293      	cmp	r3, r2
 8004220:	d3b2      	bcc.n	8004188 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004230:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004234:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	7bdb      	ldrb	r3, [r3, #15]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d016      	beq.n	800426c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004244:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004248:	69fa      	ldr	r2, [r7, #28]
 800424a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800424e:	f043 030b 	orr.w	r3, r3, #11
 8004252:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800425c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004264:	f043 030b 	orr.w	r3, r3, #11
 8004268:	6453      	str	r3, [r2, #68]	@ 0x44
 800426a:	e015      	b.n	8004298 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800427a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800427e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004282:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004292:	f043 030b 	orr.w	r3, r3, #11
 8004296:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80042aa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042ba:	461a      	mov	r2, r3
 80042bc:	f004 fdb8 	bl	8008e30 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80042ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f004 fce7 	bl	8008ca8 <USB_ReadInterrupts>
 80042da:	4603      	mov	r3, r0
 80042dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042e4:	d123      	bne.n	800432e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f004 fd7d 	bl	8008dea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f003 fe34 	bl	8007f62 <USB_GetDevSpeed>
 80042fa:	4603      	mov	r3, r0
 80042fc:	461a      	mov	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681c      	ldr	r4, [r3, #0]
 8004306:	f001 f9c9 	bl	800569c <HAL_RCC_GetHCLKFreq>
 800430a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004310:	461a      	mov	r2, r3
 8004312:	4620      	mov	r0, r4
 8004314:	f003 fb38 	bl	8007988 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f007 f89a 	bl	800b452 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695a      	ldr	r2, [r3, #20]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800432c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f004 fcb8 	bl	8008ca8 <USB_ReadInterrupts>
 8004338:	4603      	mov	r3, r0
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b08      	cmp	r3, #8
 8004340:	d10a      	bne.n	8004358 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f007 f877 	bl	800b436 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695a      	ldr	r2, [r3, #20]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f002 0208 	and.w	r2, r2, #8
 8004356:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f004 fca3 	bl	8008ca8 <USB_ReadInterrupts>
 8004362:	4603      	mov	r3, r0
 8004364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004368:	2b80      	cmp	r3, #128	@ 0x80
 800436a:	d123      	bne.n	80043b4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004378:	2301      	movs	r3, #1
 800437a:	627b      	str	r3, [r7, #36]	@ 0x24
 800437c:	e014      	b.n	80043a8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004382:	4613      	mov	r3, r2
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d105      	bne.n	80043a2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004398:	b2db      	uxtb	r3, r3
 800439a:	4619      	mov	r1, r3
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fb0a 	bl	80049b6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	3301      	adds	r3, #1
 80043a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	791b      	ldrb	r3, [r3, #4]
 80043ac:	461a      	mov	r2, r3
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d3e4      	bcc.n	800437e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f004 fc75 	bl	8008ca8 <USB_ReadInterrupts>
 80043be:	4603      	mov	r3, r0
 80043c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043c8:	d13c      	bne.n	8004444 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043ca:	2301      	movs	r3, #1
 80043cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ce:	e02b      	b.n	8004428 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80043d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043e4:	4613      	mov	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	3318      	adds	r3, #24
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d115      	bne.n	8004422 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80043f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	da12      	bge.n	8004422 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004400:	4613      	mov	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	3317      	adds	r3, #23
 800440c:	2201      	movs	r2, #1
 800440e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004412:	b2db      	uxtb	r3, r3
 8004414:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004418:	b2db      	uxtb	r3, r3
 800441a:	4619      	mov	r1, r3
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 faca 	bl	80049b6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	3301      	adds	r3, #1
 8004426:	627b      	str	r3, [r7, #36]	@ 0x24
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	791b      	ldrb	r3, [r3, #4]
 800442c:	461a      	mov	r2, r3
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	4293      	cmp	r3, r2
 8004432:	d3cd      	bcc.n	80043d0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695a      	ldr	r2, [r3, #20]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004442:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f004 fc2d 	bl	8008ca8 <USB_ReadInterrupts>
 800444e:	4603      	mov	r3, r0
 8004450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004454:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004458:	d156      	bne.n	8004508 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800445a:	2301      	movs	r3, #1
 800445c:	627b      	str	r3, [r7, #36]	@ 0x24
 800445e:	e045      	b.n	80044ec <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d12e      	bne.n	80044e6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004488:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800448a:	2b00      	cmp	r3, #0
 800448c:	da2b      	bge.n	80044e6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800449a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800449e:	429a      	cmp	r2, r3
 80044a0:	d121      	bne.n	80044e6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a6:	4613      	mov	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	4413      	add	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80044b4:	2201      	movs	r2, #1
 80044b6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10a      	bne.n	80044e6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044e2:	6053      	str	r3, [r2, #4]
            break;
 80044e4:	e008      	b.n	80044f8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	3301      	adds	r3, #1
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	791b      	ldrb	r3, [r3, #4]
 80044f0:	461a      	mov	r2, r3
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d3b3      	bcc.n	8004460 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004506:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f004 fbcb 	bl	8008ca8 <USB_ReadInterrupts>
 8004512:	4603      	mov	r3, r0
 8004514:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800451c:	d10a      	bne.n	8004534 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f007 f80e 	bl	800b540 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695a      	ldr	r2, [r3, #20]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004532:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f004 fbb5 	bl	8008ca8 <USB_ReadInterrupts>
 800453e:	4603      	mov	r3, r0
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b04      	cmp	r3, #4
 8004546:	d115      	bne.n	8004574 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f006 fffe 	bl	800b55c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6859      	ldr	r1, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	430a      	orrs	r2, r1
 800456e:	605a      	str	r2, [r3, #4]
 8004570:	e000      	b.n	8004574 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004572:	bf00      	nop
    }
  }
}
 8004574:	3734      	adds	r7, #52	@ 0x34
 8004576:	46bd      	mov	sp, r7
 8004578:	bd90      	pop	{r4, r7, pc}

0800457a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	460b      	mov	r3, r1
 8004584:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_PCD_SetAddress+0x1a>
 8004590:	2302      	movs	r3, #2
 8004592:	e012      	b.n	80045ba <HAL_PCD_SetAddress+0x40>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	78fa      	ldrb	r2, [r7, #3]
 80045a0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	78fa      	ldrb	r2, [r7, #3]
 80045a8:	4611      	mov	r1, r2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f004 fb14 	bl	8008bd8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	4608      	mov	r0, r1
 80045cc:	4611      	mov	r1, r2
 80045ce:	461a      	mov	r2, r3
 80045d0:	4603      	mov	r3, r0
 80045d2:	70fb      	strb	r3, [r7, #3]
 80045d4:	460b      	mov	r3, r1
 80045d6:	803b      	strh	r3, [r7, #0]
 80045d8:	4613      	mov	r3, r2
 80045da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	da0f      	bge.n	8004608 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045e8:	78fb      	ldrb	r3, [r7, #3]
 80045ea:	f003 020f 	and.w	r2, r3, #15
 80045ee:	4613      	mov	r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	3310      	adds	r3, #16
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	4413      	add	r3, r2
 80045fc:	3304      	adds	r3, #4
 80045fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	705a      	strb	r2, [r3, #1]
 8004606:	e00f      	b.n	8004628 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	f003 020f 	and.w	r2, r3, #15
 800460e:	4613      	mov	r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	4413      	add	r3, r2
 800461e:	3304      	adds	r3, #4
 8004620:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	b2da      	uxtb	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004634:	883b      	ldrh	r3, [r7, #0]
 8004636:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	78ba      	ldrb	r2, [r7, #2]
 8004642:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	785b      	ldrb	r3, [r3, #1]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d004      	beq.n	8004656 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004656:	78bb      	ldrb	r3, [r7, #2]
 8004658:	2b02      	cmp	r3, #2
 800465a:	d102      	bne.n	8004662 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_PCD_EP_Open+0xae>
 800466c:	2302      	movs	r3, #2
 800466e:	e00e      	b.n	800468e <HAL_PCD_EP_Open+0xcc>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68f9      	ldr	r1, [r7, #12]
 800467e:	4618      	mov	r0, r3
 8004680:	f003 fc94 	bl	8007fac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800468c:	7afb      	ldrb	r3, [r7, #11]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b084      	sub	sp, #16
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	460b      	mov	r3, r1
 80046a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	da0f      	bge.n	80046ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046aa:	78fb      	ldrb	r3, [r7, #3]
 80046ac:	f003 020f 	and.w	r2, r3, #15
 80046b0:	4613      	mov	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	3310      	adds	r3, #16
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	4413      	add	r3, r2
 80046be:	3304      	adds	r3, #4
 80046c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	705a      	strb	r2, [r3, #1]
 80046c8:	e00f      	b.n	80046ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046ca:	78fb      	ldrb	r3, [r7, #3]
 80046cc:	f003 020f 	and.w	r2, r3, #15
 80046d0:	4613      	mov	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	4413      	add	r3, r2
 80046e0:	3304      	adds	r3, #4
 80046e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80046ea:	78fb      	ldrb	r3, [r7, #3]
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_PCD_EP_Close+0x6e>
 8004700:	2302      	movs	r3, #2
 8004702:	e00e      	b.n	8004722 <HAL_PCD_EP_Close+0x8c>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68f9      	ldr	r1, [r7, #12]
 8004712:	4618      	mov	r0, r3
 8004714:	f003 fcd2 	bl	80080bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b086      	sub	sp, #24
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
 8004736:	460b      	mov	r3, r1
 8004738:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800473a:	7afb      	ldrb	r3, [r7, #11]
 800473c:	f003 020f 	and.w	r2, r3, #15
 8004740:	4613      	mov	r3, r2
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	4413      	add	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	3304      	adds	r3, #4
 8004752:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2200      	movs	r2, #0
 8004764:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2200      	movs	r2, #0
 800476a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800476c:	7afb      	ldrb	r3, [r7, #11]
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	b2da      	uxtb	r2, r3
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	799b      	ldrb	r3, [r3, #6]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d102      	bne.n	8004786 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	799b      	ldrb	r3, [r3, #6]
 800478e:	461a      	mov	r2, r3
 8004790:	6979      	ldr	r1, [r7, #20]
 8004792:	f003 fd6f 	bl	8008274 <USB_EPStartXfer>

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	f003 020f 	and.w	r2, r3, #15
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	4613      	mov	r3, r2
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80047c2:	681b      	ldr	r3, [r3, #0]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	607a      	str	r2, [r7, #4]
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	460b      	mov	r3, r1
 80047de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047e0:	7afb      	ldrb	r3, [r7, #11]
 80047e2:	f003 020f 	and.w	r2, r3, #15
 80047e6:	4613      	mov	r3, r2
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	4413      	add	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	3310      	adds	r3, #16
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4413      	add	r3, r2
 80047f4:	3304      	adds	r3, #4
 80047f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2200      	movs	r2, #0
 8004808:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2201      	movs	r2, #1
 800480e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004810:	7afb      	ldrb	r3, [r7, #11]
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	b2da      	uxtb	r2, r3
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	799b      	ldrb	r3, [r3, #6]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d102      	bne.n	800482a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	799b      	ldrb	r3, [r3, #6]
 8004832:	461a      	mov	r2, r3
 8004834:	6979      	ldr	r1, [r7, #20]
 8004836:	f003 fd1d 	bl	8008274 <USB_EPStartXfer>

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	7912      	ldrb	r2, [r2, #4]
 800485a:	4293      	cmp	r3, r2
 800485c:	d901      	bls.n	8004862 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e04f      	b.n	8004902 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004862:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004866:	2b00      	cmp	r3, #0
 8004868:	da0f      	bge.n	800488a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800486a:	78fb      	ldrb	r3, [r7, #3]
 800486c:	f003 020f 	and.w	r2, r3, #15
 8004870:	4613      	mov	r3, r2
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	3310      	adds	r3, #16
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	4413      	add	r3, r2
 800487e:	3304      	adds	r3, #4
 8004880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2201      	movs	r2, #1
 8004886:	705a      	strb	r2, [r3, #1]
 8004888:	e00d      	b.n	80048a6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800488a:	78fa      	ldrb	r2, [r7, #3]
 800488c:	4613      	mov	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	4413      	add	r3, r2
 800489c:	3304      	adds	r3, #4
 800489e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d101      	bne.n	80048c6 <HAL_PCD_EP_SetStall+0x82>
 80048c2:	2302      	movs	r3, #2
 80048c4:	e01d      	b.n	8004902 <HAL_PCD_EP_SetStall+0xbe>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68f9      	ldr	r1, [r7, #12]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f004 f8ab 	bl	8008a30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	f003 030f 	and.w	r3, r3, #15
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d109      	bne.n	80048f8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6818      	ldr	r0, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	7999      	ldrb	r1, [r3, #6]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048f2:	461a      	mov	r2, r3
 80048f4:	f004 fa9c 	bl	8008e30 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	460b      	mov	r3, r1
 8004914:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	7912      	ldrb	r2, [r2, #4]
 8004920:	4293      	cmp	r3, r2
 8004922:	d901      	bls.n	8004928 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e042      	b.n	80049ae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004928:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800492c:	2b00      	cmp	r3, #0
 800492e:	da0f      	bge.n	8004950 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	f003 020f 	and.w	r2, r3, #15
 8004936:	4613      	mov	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	3310      	adds	r3, #16
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	4413      	add	r3, r2
 8004944:	3304      	adds	r3, #4
 8004946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	705a      	strb	r2, [r3, #1]
 800494e:	e00f      	b.n	8004970 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	f003 020f 	and.w	r2, r3, #15
 8004956:	4613      	mov	r3, r2
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	4413      	add	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	4413      	add	r3, r2
 8004966:	3304      	adds	r3, #4
 8004968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004976:	78fb      	ldrb	r3, [r7, #3]
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	b2da      	uxtb	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_PCD_EP_ClrStall+0x86>
 800498c:	2302      	movs	r3, #2
 800498e:	e00e      	b.n	80049ae <HAL_PCD_EP_ClrStall+0xa4>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68f9      	ldr	r1, [r7, #12]
 800499e:	4618      	mov	r0, r3
 80049a0:	f004 f8b4 	bl	8008b0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	460b      	mov	r3, r1
 80049c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	da0c      	bge.n	80049e4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	f003 020f 	and.w	r2, r3, #15
 80049d0:	4613      	mov	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	3310      	adds	r3, #16
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	4413      	add	r3, r2
 80049de:	3304      	adds	r3, #4
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	e00c      	b.n	80049fe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	f003 020f 	and.w	r2, r3, #15
 80049ea:	4613      	mov	r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	4413      	add	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	4413      	add	r3, r2
 80049fa:	3304      	adds	r3, #4
 80049fc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68f9      	ldr	r1, [r7, #12]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f003 fed3 	bl	80087b0 <USB_EPStopXfer>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a0e:	7afb      	ldrb	r3, [r7, #11]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	@ 0x28
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	3310      	adds	r3, #16
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	695a      	ldr	r2, [r3, #20]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d901      	bls.n	8004a50 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e06b      	b.n	8004b28 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d902      	bls.n	8004a6c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	3303      	adds	r3, #3
 8004a70:	089b      	lsrs	r3, r3, #2
 8004a72:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a74:	e02a      	b.n	8004acc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	69fa      	ldr	r2, [r7, #28]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d902      	bls.n	8004a92 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	3303      	adds	r3, #3
 8004a96:	089b      	lsrs	r3, r3, #2
 8004a98:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	68d9      	ldr	r1, [r3, #12]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	4603      	mov	r3, r0
 8004aae:	6978      	ldr	r0, [r7, #20]
 8004ab0:	f003 ff28 	bl	8008904 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	441a      	add	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	695a      	ldr	r2, [r3, #20]
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	441a      	add	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d809      	bhi.n	8004af6 <PCD_WriteEmptyTxFifo+0xde>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	695a      	ldr	r2, [r3, #20]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d203      	bcs.n	8004af6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1bf      	bne.n	8004a76 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d811      	bhi.n	8004b26 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	2201      	movs	r2, #1
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	6939      	ldr	r1, [r7, #16]
 8004b1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b22:	4013      	ands	r3, r2
 8004b24:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3720      	adds	r7, #32
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	333c      	adds	r3, #60	@ 0x3c
 8004b48:	3304      	adds	r3, #4
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	799b      	ldrb	r3, [r3, #6]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d17b      	bne.n	8004c5e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d015      	beq.n	8004b9c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	4a61      	ldr	r2, [pc, #388]	@ (8004cf8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	f240 80b9 	bls.w	8004cec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 80b3 	beq.w	8004cec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b92:	461a      	mov	r2, r3
 8004b94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b98:	6093      	str	r3, [r2, #8]
 8004b9a:	e0a7      	b.n	8004cec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	2320      	movs	r3, #32
 8004bb6:	6093      	str	r3, [r2, #8]
 8004bb8:	e098      	b.n	8004cec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f040 8093 	bne.w	8004cec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	4a4b      	ldr	r2, [pc, #300]	@ (8004cf8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d90f      	bls.n	8004bee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00a      	beq.n	8004bee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be4:	461a      	mov	r2, r3
 8004be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bea:	6093      	str	r3, [r2, #8]
 8004bec:	e07e      	b.n	8004cec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	4413      	add	r3, r2
 8004c00:	3304      	adds	r3, #4
 8004c02:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a1a      	ldr	r2, [r3, #32]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	0159      	lsls	r1, r3, #5
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	440b      	add	r3, r1
 8004c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c1a:	1ad2      	subs	r2, r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d114      	bne.n	8004c50 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d109      	bne.n	8004c42 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c38:	461a      	mov	r2, r3
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	f004 f8f8 	bl	8008e30 <USB_EP0_OutStart>
 8004c40:	e006      	b.n	8004c50 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	441a      	add	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	4619      	mov	r1, r3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f006 fbb8 	bl	800b3cc <HAL_PCD_DataOutStageCallback>
 8004c5c:	e046      	b.n	8004cec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	4a26      	ldr	r2, [pc, #152]	@ (8004cfc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d124      	bne.n	8004cb0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c82:	6093      	str	r3, [r2, #8]
 8004c84:	e032      	b.n	8004cec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f003 0320 	and.w	r3, r3, #32
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	2320      	movs	r3, #32
 8004ca0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f006 fb8f 	bl	800b3cc <HAL_PCD_DataOutStageCallback>
 8004cae:	e01d      	b.n	8004cec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d114      	bne.n	8004ce0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d108      	bne.n	8004ce0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6818      	ldr	r0, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2100      	movs	r1, #0
 8004cdc:	f004 f8a8 	bl	8008e30 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f006 fb70 	bl	800b3cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3720      	adds	r7, #32
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	4f54300a 	.word	0x4f54300a
 8004cfc:	4f54310a 	.word	0x4f54310a

08004d00 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	333c      	adds	r3, #60	@ 0x3c
 8004d18:	3304      	adds	r3, #4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4a15      	ldr	r2, [pc, #84]	@ (8004d88 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d90e      	bls.n	8004d54 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d009      	beq.n	8004d54 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d52:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f006 fb27 	bl	800b3a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8004d88 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d90c      	bls.n	8004d7c <PCD_EP_OutSetupPacket_int+0x7c>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	799b      	ldrb	r3, [r3, #6]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d108      	bne.n	8004d7c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d74:	461a      	mov	r2, r3
 8004d76:	2101      	movs	r1, #1
 8004d78:	f004 f85a 	bl	8008e30 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	4f54300a 	.word	0x4f54300a

08004d8c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	460b      	mov	r3, r1
 8004d96:	70fb      	strb	r3, [r7, #3]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d107      	bne.n	8004dba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004daa:	883b      	ldrh	r3, [r7, #0]
 8004dac:	0419      	lsls	r1, r3, #16
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004db8:	e028      	b.n	8004e0c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc0:	0c1b      	lsrs	r3, r3, #16
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004dc8:	2300      	movs	r3, #0
 8004dca:	73fb      	strb	r3, [r7, #15]
 8004dcc:	e00d      	b.n	8004dea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	3340      	adds	r3, #64	@ 0x40
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	0c1b      	lsrs	r3, r3, #16
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	4413      	add	r3, r2
 8004de2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	3301      	adds	r3, #1
 8004de8:	73fb      	strb	r3, [r7, #15]
 8004dea:	7bfa      	ldrb	r2, [r7, #15]
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d3ec      	bcc.n	8004dce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004df4:	883b      	ldrh	r3, [r7, #0]
 8004df6:	0418      	lsls	r0, r3, #16
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6819      	ldr	r1, [r3, #0]
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	4302      	orrs	r2, r0
 8004e04:	3340      	adds	r3, #64	@ 0x40
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	460b      	mov	r3, r1
 8004e24:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	887a      	ldrh	r2, [r7, #2]
 8004e2c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e267      	b.n	8005336 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d075      	beq.n	8004f5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e72:	4b88      	ldr	r3, [pc, #544]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 030c 	and.w	r3, r3, #12
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d00c      	beq.n	8004e98 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e7e:	4b85      	ldr	r3, [pc, #532]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d112      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e8a:	4b82      	ldr	r3, [pc, #520]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e96:	d10b      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e98:	4b7e      	ldr	r3, [pc, #504]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d05b      	beq.n	8004f5c <HAL_RCC_OscConfig+0x108>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d157      	bne.n	8004f5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e242      	b.n	8005336 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb8:	d106      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x74>
 8004eba:	4b76      	ldr	r3, [pc, #472]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a75      	ldr	r2, [pc, #468]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	e01d      	b.n	8004f04 <HAL_RCC_OscConfig+0xb0>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ed0:	d10c      	bne.n	8004eec <HAL_RCC_OscConfig+0x98>
 8004ed2:	4b70      	ldr	r3, [pc, #448]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a6f      	ldr	r2, [pc, #444]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004ed8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	4b6d      	ldr	r3, [pc, #436]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a6c      	ldr	r2, [pc, #432]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	e00b      	b.n	8004f04 <HAL_RCC_OscConfig+0xb0>
 8004eec:	4b69      	ldr	r3, [pc, #420]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a68      	ldr	r2, [pc, #416]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	4b66      	ldr	r3, [pc, #408]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a65      	ldr	r2, [pc, #404]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004efe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d013      	beq.n	8004f34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0c:	f7fd f9b0 	bl	8002270 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f14:	f7fd f9ac 	bl	8002270 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b64      	cmp	r3, #100	@ 0x64
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e207      	b.n	8005336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f26:	4b5b      	ldr	r3, [pc, #364]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0f0      	beq.n	8004f14 <HAL_RCC_OscConfig+0xc0>
 8004f32:	e014      	b.n	8004f5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f34:	f7fd f99c 	bl	8002270 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f3c:	f7fd f998 	bl	8002270 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b64      	cmp	r3, #100	@ 0x64
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e1f3      	b.n	8005336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f4e:	4b51      	ldr	r3, [pc, #324]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f0      	bne.n	8004f3c <HAL_RCC_OscConfig+0xe8>
 8004f5a:	e000      	b.n	8004f5e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d063      	beq.n	8005032 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f6a:	4b4a      	ldr	r3, [pc, #296]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 030c 	and.w	r3, r3, #12
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00b      	beq.n	8004f8e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f76:	4b47      	ldr	r3, [pc, #284]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d11c      	bne.n	8004fbc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f82:	4b44      	ldr	r3, [pc, #272]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d116      	bne.n	8004fbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f8e:	4b41      	ldr	r3, [pc, #260]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d005      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x152>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d001      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e1c7      	b.n	8005336 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	4937      	ldr	r1, [pc, #220]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fba:	e03a      	b.n	8005032 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d020      	beq.n	8005006 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fc4:	4b34      	ldr	r3, [pc, #208]	@ (8005098 <HAL_RCC_OscConfig+0x244>)
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fca:	f7fd f951 	bl	8002270 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd2:	f7fd f94d 	bl	8002270 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e1a8      	b.n	8005336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff0:	4b28      	ldr	r3, [pc, #160]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	4925      	ldr	r1, [pc, #148]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8005000:	4313      	orrs	r3, r2
 8005002:	600b      	str	r3, [r1, #0]
 8005004:	e015      	b.n	8005032 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005006:	4b24      	ldr	r3, [pc, #144]	@ (8005098 <HAL_RCC_OscConfig+0x244>)
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500c:	f7fd f930 	bl	8002270 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005014:	f7fd f92c 	bl	8002270 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e187      	b.n	8005336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005026:	4b1b      	ldr	r3, [pc, #108]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f0      	bne.n	8005014 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d036      	beq.n	80050ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d016      	beq.n	8005074 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005046:	4b15      	ldr	r3, [pc, #84]	@ (800509c <HAL_RCC_OscConfig+0x248>)
 8005048:	2201      	movs	r2, #1
 800504a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504c:	f7fd f910 	bl	8002270 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005054:	f7fd f90c 	bl	8002270 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e167      	b.n	8005336 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005066:	4b0b      	ldr	r3, [pc, #44]	@ (8005094 <HAL_RCC_OscConfig+0x240>)
 8005068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0f0      	beq.n	8005054 <HAL_RCC_OscConfig+0x200>
 8005072:	e01b      	b.n	80050ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005074:	4b09      	ldr	r3, [pc, #36]	@ (800509c <HAL_RCC_OscConfig+0x248>)
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800507a:	f7fd f8f9 	bl	8002270 <HAL_GetTick>
 800507e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005080:	e00e      	b.n	80050a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005082:	f7fd f8f5 	bl	8002270 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d907      	bls.n	80050a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e150      	b.n	8005336 <HAL_RCC_OscConfig+0x4e2>
 8005094:	40023800 	.word	0x40023800
 8005098:	42470000 	.word	0x42470000
 800509c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050a0:	4b88      	ldr	r3, [pc, #544]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 80050a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1ea      	bne.n	8005082 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 8097 	beq.w	80051e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ba:	2300      	movs	r3, #0
 80050bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050be:	4b81      	ldr	r3, [pc, #516]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 80050c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10f      	bne.n	80050ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ca:	2300      	movs	r3, #0
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	4b7d      	ldr	r3, [pc, #500]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d2:	4a7c      	ldr	r2, [pc, #496]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 80050d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80050da:	4b7a      	ldr	r3, [pc, #488]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 80050dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050e2:	60bb      	str	r3, [r7, #8]
 80050e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050e6:	2301      	movs	r3, #1
 80050e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ea:	4b77      	ldr	r3, [pc, #476]	@ (80052c8 <HAL_RCC_OscConfig+0x474>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d118      	bne.n	8005128 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050f6:	4b74      	ldr	r3, [pc, #464]	@ (80052c8 <HAL_RCC_OscConfig+0x474>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a73      	ldr	r2, [pc, #460]	@ (80052c8 <HAL_RCC_OscConfig+0x474>)
 80050fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005102:	f7fd f8b5 	bl	8002270 <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800510a:	f7fd f8b1 	bl	8002270 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e10c      	b.n	8005336 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800511c:	4b6a      	ldr	r3, [pc, #424]	@ (80052c8 <HAL_RCC_OscConfig+0x474>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0f0      	beq.n	800510a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d106      	bne.n	800513e <HAL_RCC_OscConfig+0x2ea>
 8005130:	4b64      	ldr	r3, [pc, #400]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 8005132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005134:	4a63      	ldr	r2, [pc, #396]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	6713      	str	r3, [r2, #112]	@ 0x70
 800513c:	e01c      	b.n	8005178 <HAL_RCC_OscConfig+0x324>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2b05      	cmp	r3, #5
 8005144:	d10c      	bne.n	8005160 <HAL_RCC_OscConfig+0x30c>
 8005146:	4b5f      	ldr	r3, [pc, #380]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800514a:	4a5e      	ldr	r2, [pc, #376]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 800514c:	f043 0304 	orr.w	r3, r3, #4
 8005150:	6713      	str	r3, [r2, #112]	@ 0x70
 8005152:	4b5c      	ldr	r3, [pc, #368]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 8005154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005156:	4a5b      	ldr	r2, [pc, #364]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 8005158:	f043 0301 	orr.w	r3, r3, #1
 800515c:	6713      	str	r3, [r2, #112]	@ 0x70
 800515e:	e00b      	b.n	8005178 <HAL_RCC_OscConfig+0x324>
 8005160:	4b58      	ldr	r3, [pc, #352]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005164:	4a57      	ldr	r2, [pc, #348]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 8005166:	f023 0301 	bic.w	r3, r3, #1
 800516a:	6713      	str	r3, [r2, #112]	@ 0x70
 800516c:	4b55      	ldr	r3, [pc, #340]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 800516e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005170:	4a54      	ldr	r2, [pc, #336]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 8005172:	f023 0304 	bic.w	r3, r3, #4
 8005176:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d015      	beq.n	80051ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005180:	f7fd f876 	bl	8002270 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005186:	e00a      	b.n	800519e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005188:	f7fd f872 	bl	8002270 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005196:	4293      	cmp	r3, r2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e0cb      	b.n	8005336 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800519e:	4b49      	ldr	r3, [pc, #292]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 80051a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0ee      	beq.n	8005188 <HAL_RCC_OscConfig+0x334>
 80051aa:	e014      	b.n	80051d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ac:	f7fd f860 	bl	8002270 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051b2:	e00a      	b.n	80051ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b4:	f7fd f85c 	bl	8002270 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e0b5      	b.n	8005336 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ca:	4b3e      	ldr	r3, [pc, #248]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 80051cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1ee      	bne.n	80051b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051d6:	7dfb      	ldrb	r3, [r7, #23]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d105      	bne.n	80051e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051dc:	4b39      	ldr	r3, [pc, #228]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 80051de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e0:	4a38      	ldr	r2, [pc, #224]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 80051e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80a1 	beq.w	8005334 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051f2:	4b34      	ldr	r3, [pc, #208]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 030c 	and.w	r3, r3, #12
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d05c      	beq.n	80052b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	2b02      	cmp	r3, #2
 8005204:	d141      	bne.n	800528a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005206:	4b31      	ldr	r3, [pc, #196]	@ (80052cc <HAL_RCC_OscConfig+0x478>)
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800520c:	f7fd f830 	bl	8002270 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005214:	f7fd f82c 	bl	8002270 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e087      	b.n	8005336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005226:	4b27      	ldr	r3, [pc, #156]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f0      	bne.n	8005214 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69da      	ldr	r2, [r3, #28]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005240:	019b      	lsls	r3, r3, #6
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005248:	085b      	lsrs	r3, r3, #1
 800524a:	3b01      	subs	r3, #1
 800524c:	041b      	lsls	r3, r3, #16
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005254:	061b      	lsls	r3, r3, #24
 8005256:	491b      	ldr	r1, [pc, #108]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 8005258:	4313      	orrs	r3, r2
 800525a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800525c:	4b1b      	ldr	r3, [pc, #108]	@ (80052cc <HAL_RCC_OscConfig+0x478>)
 800525e:	2201      	movs	r2, #1
 8005260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005262:	f7fd f805 	bl	8002270 <HAL_GetTick>
 8005266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005268:	e008      	b.n	800527c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800526a:	f7fd f801 	bl	8002270 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e05c      	b.n	8005336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800527c:	4b11      	ldr	r3, [pc, #68]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0f0      	beq.n	800526a <HAL_RCC_OscConfig+0x416>
 8005288:	e054      	b.n	8005334 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800528a:	4b10      	ldr	r3, [pc, #64]	@ (80052cc <HAL_RCC_OscConfig+0x478>)
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005290:	f7fc ffee 	bl	8002270 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005298:	f7fc ffea 	bl	8002270 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e045      	b.n	8005336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052aa:	4b06      	ldr	r3, [pc, #24]	@ (80052c4 <HAL_RCC_OscConfig+0x470>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1f0      	bne.n	8005298 <HAL_RCC_OscConfig+0x444>
 80052b6:	e03d      	b.n	8005334 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d107      	bne.n	80052d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e038      	b.n	8005336 <HAL_RCC_OscConfig+0x4e2>
 80052c4:	40023800 	.word	0x40023800
 80052c8:	40007000 	.word	0x40007000
 80052cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005340 <HAL_RCC_OscConfig+0x4ec>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d028      	beq.n	8005330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d121      	bne.n	8005330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d11a      	bne.n	8005330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005300:	4013      	ands	r3, r2
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005306:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005308:	4293      	cmp	r3, r2
 800530a:	d111      	bne.n	8005330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005316:	085b      	lsrs	r3, r3, #1
 8005318:	3b01      	subs	r3, #1
 800531a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800531c:	429a      	cmp	r2, r3
 800531e:	d107      	bne.n	8005330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800532c:	429a      	cmp	r2, r3
 800532e:	d001      	beq.n	8005334 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e000      	b.n	8005336 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	40023800 	.word	0x40023800

08005344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0cc      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005358:	4b68      	ldr	r3, [pc, #416]	@ (80054fc <HAL_RCC_ClockConfig+0x1b8>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d90c      	bls.n	8005380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005366:	4b65      	ldr	r3, [pc, #404]	@ (80054fc <HAL_RCC_ClockConfig+0x1b8>)
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800536e:	4b63      	ldr	r3, [pc, #396]	@ (80054fc <HAL_RCC_ClockConfig+0x1b8>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d001      	beq.n	8005380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e0b8      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d020      	beq.n	80053ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d005      	beq.n	80053a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005398:	4b59      	ldr	r3, [pc, #356]	@ (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	4a58      	ldr	r2, [pc, #352]	@ (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053b0:	4b53      	ldr	r3, [pc, #332]	@ (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	4a52      	ldr	r2, [pc, #328]	@ (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 80053b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053bc:	4b50      	ldr	r3, [pc, #320]	@ (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	494d      	ldr	r1, [pc, #308]	@ (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d044      	beq.n	8005464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d107      	bne.n	80053f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053e2:	4b47      	ldr	r3, [pc, #284]	@ (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d119      	bne.n	8005422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e07f      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d003      	beq.n	8005402 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d107      	bne.n	8005412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005402:	4b3f      	ldr	r3, [pc, #252]	@ (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e06f      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005412:	4b3b      	ldr	r3, [pc, #236]	@ (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e067      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005422:	4b37      	ldr	r3, [pc, #220]	@ (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f023 0203 	bic.w	r2, r3, #3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	4934      	ldr	r1, [pc, #208]	@ (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 8005430:	4313      	orrs	r3, r2
 8005432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005434:	f7fc ff1c 	bl	8002270 <HAL_GetTick>
 8005438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543a:	e00a      	b.n	8005452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800543c:	f7fc ff18 	bl	8002270 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e04f      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005452:	4b2b      	ldr	r3, [pc, #172]	@ (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 020c 	and.w	r2, r3, #12
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	429a      	cmp	r2, r3
 8005462:	d1eb      	bne.n	800543c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005464:	4b25      	ldr	r3, [pc, #148]	@ (80054fc <HAL_RCC_ClockConfig+0x1b8>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d20c      	bcs.n	800548c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005472:	4b22      	ldr	r3, [pc, #136]	@ (80054fc <HAL_RCC_ClockConfig+0x1b8>)
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800547a:	4b20      	ldr	r3, [pc, #128]	@ (80054fc <HAL_RCC_ClockConfig+0x1b8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d001      	beq.n	800548c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e032      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b00      	cmp	r3, #0
 8005496:	d008      	beq.n	80054aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005498:	4b19      	ldr	r3, [pc, #100]	@ (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	4916      	ldr	r1, [pc, #88]	@ (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d009      	beq.n	80054ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054b6:	4b12      	ldr	r3, [pc, #72]	@ (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	490e      	ldr	r1, [pc, #56]	@ (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054ca:	f000 f821 	bl	8005510 <HAL_RCC_GetSysClockFreq>
 80054ce:	4602      	mov	r2, r0
 80054d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	091b      	lsrs	r3, r3, #4
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	490a      	ldr	r1, [pc, #40]	@ (8005504 <HAL_RCC_ClockConfig+0x1c0>)
 80054dc:	5ccb      	ldrb	r3, [r1, r3]
 80054de:	fa22 f303 	lsr.w	r3, r2, r3
 80054e2:	4a09      	ldr	r2, [pc, #36]	@ (8005508 <HAL_RCC_ClockConfig+0x1c4>)
 80054e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80054e6:	4b09      	ldr	r3, [pc, #36]	@ (800550c <HAL_RCC_ClockConfig+0x1c8>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fc fe7c 	bl	80021e8 <HAL_InitTick>

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	40023c00 	.word	0x40023c00
 8005500:	40023800 	.word	0x40023800
 8005504:	0800eb44 	.word	0x0800eb44
 8005508:	20000004 	.word	0x20000004
 800550c:	20000008 	.word	0x20000008

08005510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005514:	b090      	sub	sp, #64	@ 0x40
 8005516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005528:	4b59      	ldr	r3, [pc, #356]	@ (8005690 <HAL_RCC_GetSysClockFreq+0x180>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 030c 	and.w	r3, r3, #12
 8005530:	2b08      	cmp	r3, #8
 8005532:	d00d      	beq.n	8005550 <HAL_RCC_GetSysClockFreq+0x40>
 8005534:	2b08      	cmp	r3, #8
 8005536:	f200 80a1 	bhi.w	800567c <HAL_RCC_GetSysClockFreq+0x16c>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <HAL_RCC_GetSysClockFreq+0x34>
 800553e:	2b04      	cmp	r3, #4
 8005540:	d003      	beq.n	800554a <HAL_RCC_GetSysClockFreq+0x3a>
 8005542:	e09b      	b.n	800567c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005544:	4b53      	ldr	r3, [pc, #332]	@ (8005694 <HAL_RCC_GetSysClockFreq+0x184>)
 8005546:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005548:	e09b      	b.n	8005682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800554a:	4b53      	ldr	r3, [pc, #332]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x188>)
 800554c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800554e:	e098      	b.n	8005682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005550:	4b4f      	ldr	r3, [pc, #316]	@ (8005690 <HAL_RCC_GetSysClockFreq+0x180>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005558:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800555a:	4b4d      	ldr	r3, [pc, #308]	@ (8005690 <HAL_RCC_GetSysClockFreq+0x180>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d028      	beq.n	80055b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005566:	4b4a      	ldr	r3, [pc, #296]	@ (8005690 <HAL_RCC_GetSysClockFreq+0x180>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	099b      	lsrs	r3, r3, #6
 800556c:	2200      	movs	r2, #0
 800556e:	623b      	str	r3, [r7, #32]
 8005570:	627a      	str	r2, [r7, #36]	@ 0x24
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005578:	2100      	movs	r1, #0
 800557a:	4b47      	ldr	r3, [pc, #284]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x188>)
 800557c:	fb03 f201 	mul.w	r2, r3, r1
 8005580:	2300      	movs	r3, #0
 8005582:	fb00 f303 	mul.w	r3, r0, r3
 8005586:	4413      	add	r3, r2
 8005588:	4a43      	ldr	r2, [pc, #268]	@ (8005698 <HAL_RCC_GetSysClockFreq+0x188>)
 800558a:	fba0 1202 	umull	r1, r2, r0, r2
 800558e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005590:	460a      	mov	r2, r1
 8005592:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005596:	4413      	add	r3, r2
 8005598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800559a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800559c:	2200      	movs	r2, #0
 800559e:	61bb      	str	r3, [r7, #24]
 80055a0:	61fa      	str	r2, [r7, #28]
 80055a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80055aa:	f7fb fb55 	bl	8000c58 <__aeabi_uldivmod>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	4613      	mov	r3, r2
 80055b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055b6:	e053      	b.n	8005660 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055b8:	4b35      	ldr	r3, [pc, #212]	@ (8005690 <HAL_RCC_GetSysClockFreq+0x180>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	099b      	lsrs	r3, r3, #6
 80055be:	2200      	movs	r2, #0
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	617a      	str	r2, [r7, #20]
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80055ca:	f04f 0b00 	mov.w	fp, #0
 80055ce:	4652      	mov	r2, sl
 80055d0:	465b      	mov	r3, fp
 80055d2:	f04f 0000 	mov.w	r0, #0
 80055d6:	f04f 0100 	mov.w	r1, #0
 80055da:	0159      	lsls	r1, r3, #5
 80055dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055e0:	0150      	lsls	r0, r2, #5
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	ebb2 080a 	subs.w	r8, r2, sl
 80055ea:	eb63 090b 	sbc.w	r9, r3, fp
 80055ee:	f04f 0200 	mov.w	r2, #0
 80055f2:	f04f 0300 	mov.w	r3, #0
 80055f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80055fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80055fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005602:	ebb2 0408 	subs.w	r4, r2, r8
 8005606:	eb63 0509 	sbc.w	r5, r3, r9
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	00eb      	lsls	r3, r5, #3
 8005614:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005618:	00e2      	lsls	r2, r4, #3
 800561a:	4614      	mov	r4, r2
 800561c:	461d      	mov	r5, r3
 800561e:	eb14 030a 	adds.w	r3, r4, sl
 8005622:	603b      	str	r3, [r7, #0]
 8005624:	eb45 030b 	adc.w	r3, r5, fp
 8005628:	607b      	str	r3, [r7, #4]
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	f04f 0300 	mov.w	r3, #0
 8005632:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005636:	4629      	mov	r1, r5
 8005638:	028b      	lsls	r3, r1, #10
 800563a:	4621      	mov	r1, r4
 800563c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005640:	4621      	mov	r1, r4
 8005642:	028a      	lsls	r2, r1, #10
 8005644:	4610      	mov	r0, r2
 8005646:	4619      	mov	r1, r3
 8005648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800564a:	2200      	movs	r2, #0
 800564c:	60bb      	str	r3, [r7, #8]
 800564e:	60fa      	str	r2, [r7, #12]
 8005650:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005654:	f7fb fb00 	bl	8000c58 <__aeabi_uldivmod>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4613      	mov	r3, r2
 800565e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005660:	4b0b      	ldr	r3, [pc, #44]	@ (8005690 <HAL_RCC_GetSysClockFreq+0x180>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	0c1b      	lsrs	r3, r3, #16
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	3301      	adds	r3, #1
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005670:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005674:	fbb2 f3f3 	udiv	r3, r2, r3
 8005678:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800567a:	e002      	b.n	8005682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800567c:	4b05      	ldr	r3, [pc, #20]	@ (8005694 <HAL_RCC_GetSysClockFreq+0x184>)
 800567e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005684:	4618      	mov	r0, r3
 8005686:	3740      	adds	r7, #64	@ 0x40
 8005688:	46bd      	mov	sp, r7
 800568a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800568e:	bf00      	nop
 8005690:	40023800 	.word	0x40023800
 8005694:	00f42400 	.word	0x00f42400
 8005698:	017d7840 	.word	0x017d7840

0800569c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056a0:	4b03      	ldr	r3, [pc, #12]	@ (80056b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80056a2:	681b      	ldr	r3, [r3, #0]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	20000004 	.word	0x20000004

080056b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056b8:	f7ff fff0 	bl	800569c <HAL_RCC_GetHCLKFreq>
 80056bc:	4602      	mov	r2, r0
 80056be:	4b05      	ldr	r3, [pc, #20]	@ (80056d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	0a9b      	lsrs	r3, r3, #10
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	4903      	ldr	r1, [pc, #12]	@ (80056d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056ca:	5ccb      	ldrb	r3, [r1, r3]
 80056cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40023800 	.word	0x40023800
 80056d8:	0800eb54 	.word	0x0800eb54

080056dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056e0:	f7ff ffdc 	bl	800569c <HAL_RCC_GetHCLKFreq>
 80056e4:	4602      	mov	r2, r0
 80056e6:	4b05      	ldr	r3, [pc, #20]	@ (80056fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	0b5b      	lsrs	r3, r3, #13
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	4903      	ldr	r1, [pc, #12]	@ (8005700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056f2:	5ccb      	ldrb	r3, [r1, r3]
 80056f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40023800 	.word	0x40023800
 8005700:	0800eb54 	.word	0x0800eb54

08005704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e041      	b.n	800579a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fc fabe 	bl	8001cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3304      	adds	r3, #4
 8005740:	4619      	mov	r1, r3
 8005742:	4610      	mov	r0, r2
 8005744:	f000 fd0c 	bl	8006160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b082      	sub	sp, #8
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e041      	b.n	8005838 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d106      	bne.n	80057ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f839 	bl	8005840 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2202      	movs	r2, #2
 80057d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3304      	adds	r3, #4
 80057de:	4619      	mov	r1, r3
 80057e0:	4610      	mov	r0, r2
 80057e2:	f000 fcbd 	bl	8006160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d109      	bne.n	8005878 <HAL_TIM_PWM_Start+0x24>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b01      	cmp	r3, #1
 800586e:	bf14      	ite	ne
 8005870:	2301      	movne	r3, #1
 8005872:	2300      	moveq	r3, #0
 8005874:	b2db      	uxtb	r3, r3
 8005876:	e022      	b.n	80058be <HAL_TIM_PWM_Start+0x6a>
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2b04      	cmp	r3, #4
 800587c:	d109      	bne.n	8005892 <HAL_TIM_PWM_Start+0x3e>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b01      	cmp	r3, #1
 8005888:	bf14      	ite	ne
 800588a:	2301      	movne	r3, #1
 800588c:	2300      	moveq	r3, #0
 800588e:	b2db      	uxtb	r3, r3
 8005890:	e015      	b.n	80058be <HAL_TIM_PWM_Start+0x6a>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b08      	cmp	r3, #8
 8005896:	d109      	bne.n	80058ac <HAL_TIM_PWM_Start+0x58>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	bf14      	ite	ne
 80058a4:	2301      	movne	r3, #1
 80058a6:	2300      	moveq	r3, #0
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	e008      	b.n	80058be <HAL_TIM_PWM_Start+0x6a>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	bf14      	ite	ne
 80058b8:	2301      	movne	r3, #1
 80058ba:	2300      	moveq	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e068      	b.n	8005998 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d104      	bne.n	80058d6 <HAL_TIM_PWM_Start+0x82>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058d4:	e013      	b.n	80058fe <HAL_TIM_PWM_Start+0xaa>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b04      	cmp	r3, #4
 80058da:	d104      	bne.n	80058e6 <HAL_TIM_PWM_Start+0x92>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058e4:	e00b      	b.n	80058fe <HAL_TIM_PWM_Start+0xaa>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d104      	bne.n	80058f6 <HAL_TIM_PWM_Start+0xa2>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058f4:	e003      	b.n	80058fe <HAL_TIM_PWM_Start+0xaa>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2202      	movs	r2, #2
 80058fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2201      	movs	r2, #1
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fedc 	bl	80066c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a23      	ldr	r2, [pc, #140]	@ (80059a0 <HAL_TIM_PWM_Start+0x14c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d107      	bne.n	8005926 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005924:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1d      	ldr	r2, [pc, #116]	@ (80059a0 <HAL_TIM_PWM_Start+0x14c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d018      	beq.n	8005962 <HAL_TIM_PWM_Start+0x10e>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005938:	d013      	beq.n	8005962 <HAL_TIM_PWM_Start+0x10e>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a19      	ldr	r2, [pc, #100]	@ (80059a4 <HAL_TIM_PWM_Start+0x150>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00e      	beq.n	8005962 <HAL_TIM_PWM_Start+0x10e>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a17      	ldr	r2, [pc, #92]	@ (80059a8 <HAL_TIM_PWM_Start+0x154>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d009      	beq.n	8005962 <HAL_TIM_PWM_Start+0x10e>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a16      	ldr	r2, [pc, #88]	@ (80059ac <HAL_TIM_PWM_Start+0x158>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d004      	beq.n	8005962 <HAL_TIM_PWM_Start+0x10e>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a14      	ldr	r2, [pc, #80]	@ (80059b0 <HAL_TIM_PWM_Start+0x15c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d111      	bne.n	8005986 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b06      	cmp	r3, #6
 8005972:	d010      	beq.n	8005996 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f042 0201 	orr.w	r2, r2, #1
 8005982:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005984:	e007      	b.n	8005996 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f042 0201 	orr.w	r2, r2, #1
 8005994:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	40010000 	.word	0x40010000
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40000800 	.word	0x40000800
 80059ac:	40000c00 	.word	0x40000c00
 80059b0:	40014000 	.word	0x40014000

080059b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e097      	b.n	8005af8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d106      	bne.n	80059e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7fc f9a1 	bl	8001d24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2202      	movs	r2, #2
 80059e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6812      	ldr	r2, [r2, #0]
 80059f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059f8:	f023 0307 	bic.w	r3, r3, #7
 80059fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	3304      	adds	r3, #4
 8005a06:	4619      	mov	r1, r3
 8005a08:	4610      	mov	r0, r2
 8005a0a:	f000 fba9 	bl	8006160 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a36:	f023 0303 	bic.w	r3, r3, #3
 8005a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	4313      	orrs	r3, r2
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005a54:	f023 030c 	bic.w	r3, r3, #12
 8005a58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	4313      	orrs	r3, r2
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	011a      	lsls	r2, r3, #4
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	031b      	lsls	r3, r3, #12
 8005a84:	4313      	orrs	r3, r2
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005a92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005a9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d110      	bne.n	8005b52 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d102      	bne.n	8005b3c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b36:	7b7b      	ldrb	r3, [r7, #13]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d001      	beq.n	8005b40 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e069      	b.n	8005c14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b50:	e031      	b.n	8005bb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d110      	bne.n	8005b7a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b58:	7bbb      	ldrb	r3, [r7, #14]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d102      	bne.n	8005b64 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b5e:	7b3b      	ldrb	r3, [r7, #12]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d001      	beq.n	8005b68 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e055      	b.n	8005c14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b78:	e01d      	b.n	8005bb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d108      	bne.n	8005b92 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b80:	7bbb      	ldrb	r3, [r7, #14]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d105      	bne.n	8005b92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b86:	7b7b      	ldrb	r3, [r7, #13]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d102      	bne.n	8005b92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b8c:	7b3b      	ldrb	r3, [r7, #12]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d001      	beq.n	8005b96 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e03e      	b.n	8005c14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2202      	movs	r2, #2
 8005baa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <HAL_TIM_Encoder_Start+0xc4>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d008      	beq.n	8005bd4 <HAL_TIM_Encoder_Start+0xd4>
 8005bc2:	e00f      	b.n	8005be4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	2100      	movs	r1, #0
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 fd79 	bl	80066c4 <TIM_CCxChannelCmd>
      break;
 8005bd2:	e016      	b.n	8005c02 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	2104      	movs	r1, #4
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 fd71 	bl	80066c4 <TIM_CCxChannelCmd>
      break;
 8005be2:	e00e      	b.n	8005c02 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2201      	movs	r2, #1
 8005bea:	2100      	movs	r1, #0
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 fd69 	bl	80066c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	2104      	movs	r1, #4
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 fd62 	bl	80066c4 <TIM_CCxChannelCmd>
      break;
 8005c00:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f042 0201 	orr.w	r2, r2, #1
 8005c10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d020      	beq.n	8005c80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01b      	beq.n	8005c80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f06f 0202 	mvn.w	r2, #2
 8005c50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fa5b 	bl	8006122 <HAL_TIM_IC_CaptureCallback>
 8005c6c:	e005      	b.n	8005c7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fa4d 	bl	800610e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fa5e 	bl	8006136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d020      	beq.n	8005ccc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d01b      	beq.n	8005ccc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0204 	mvn.w	r2, #4
 8005c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fa35 	bl	8006122 <HAL_TIM_IC_CaptureCallback>
 8005cb8:	e005      	b.n	8005cc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fa27 	bl	800610e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fa38 	bl	8006136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d020      	beq.n	8005d18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01b      	beq.n	8005d18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f06f 0208 	mvn.w	r2, #8
 8005ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2204      	movs	r2, #4
 8005cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fa0f 	bl	8006122 <HAL_TIM_IC_CaptureCallback>
 8005d04:	e005      	b.n	8005d12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fa01 	bl	800610e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fa12 	bl	8006136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f003 0310 	and.w	r3, r3, #16
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d020      	beq.n	8005d64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d01b      	beq.n	8005d64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f06f 0210 	mvn.w	r2, #16
 8005d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2208      	movs	r2, #8
 8005d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f9e9 	bl	8006122 <HAL_TIM_IC_CaptureCallback>
 8005d50:	e005      	b.n	8005d5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f9db 	bl	800610e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f9ec 	bl	8006136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00c      	beq.n	8005d88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d007      	beq.n	8005d88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f06f 0201 	mvn.w	r2, #1
 8005d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7fb fb28 	bl	80013d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00c      	beq.n	8005dac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d007      	beq.n	8005dac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fd2a 	bl	8006800 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00c      	beq.n	8005dd0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d007      	beq.n	8005dd0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f9bd 	bl	800614a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f003 0320 	and.w	r3, r3, #32
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00c      	beq.n	8005df4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f003 0320 	and.w	r3, r3, #32
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d007      	beq.n	8005df4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0220 	mvn.w	r2, #32
 8005dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fcfc 	bl	80067ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005df4:	bf00      	nop
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d101      	bne.n	8005e1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e16:	2302      	movs	r3, #2
 8005e18:	e0ae      	b.n	8005f78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b0c      	cmp	r3, #12
 8005e26:	f200 809f 	bhi.w	8005f68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e30:	08005e65 	.word	0x08005e65
 8005e34:	08005f69 	.word	0x08005f69
 8005e38:	08005f69 	.word	0x08005f69
 8005e3c:	08005f69 	.word	0x08005f69
 8005e40:	08005ea5 	.word	0x08005ea5
 8005e44:	08005f69 	.word	0x08005f69
 8005e48:	08005f69 	.word	0x08005f69
 8005e4c:	08005f69 	.word	0x08005f69
 8005e50:	08005ee7 	.word	0x08005ee7
 8005e54:	08005f69 	.word	0x08005f69
 8005e58:	08005f69 	.word	0x08005f69
 8005e5c:	08005f69 	.word	0x08005f69
 8005e60:	08005f27 	.word	0x08005f27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68b9      	ldr	r1, [r7, #8]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fa04 	bl	8006278 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	699a      	ldr	r2, [r3, #24]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0208 	orr.w	r2, r2, #8
 8005e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699a      	ldr	r2, [r3, #24]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0204 	bic.w	r2, r2, #4
 8005e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6999      	ldr	r1, [r3, #24]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	691a      	ldr	r2, [r3, #16]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	619a      	str	r2, [r3, #24]
      break;
 8005ea2:	e064      	b.n	8005f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68b9      	ldr	r1, [r7, #8]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 fa4a 	bl	8006344 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699a      	ldr	r2, [r3, #24]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	699a      	ldr	r2, [r3, #24]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6999      	ldr	r1, [r3, #24]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	021a      	lsls	r2, r3, #8
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	619a      	str	r2, [r3, #24]
      break;
 8005ee4:	e043      	b.n	8005f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68b9      	ldr	r1, [r7, #8]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 fa95 	bl	800641c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69da      	ldr	r2, [r3, #28]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f042 0208 	orr.w	r2, r2, #8
 8005f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69da      	ldr	r2, [r3, #28]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0204 	bic.w	r2, r2, #4
 8005f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69d9      	ldr	r1, [r3, #28]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	691a      	ldr	r2, [r3, #16]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	61da      	str	r2, [r3, #28]
      break;
 8005f24:	e023      	b.n	8005f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68b9      	ldr	r1, [r7, #8]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 fadf 	bl	80064f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69da      	ldr	r2, [r3, #28]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69da      	ldr	r2, [r3, #28]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69d9      	ldr	r1, [r3, #28]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	021a      	lsls	r2, r3, #8
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	61da      	str	r2, [r3, #28]
      break;
 8005f66:	e002      	b.n	8005f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d101      	bne.n	8005f9c <HAL_TIM_ConfigClockSource+0x1c>
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e0b4      	b.n	8006106 <HAL_TIM_ConfigClockSource+0x186>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fd4:	d03e      	beq.n	8006054 <HAL_TIM_ConfigClockSource+0xd4>
 8005fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fda:	f200 8087 	bhi.w	80060ec <HAL_TIM_ConfigClockSource+0x16c>
 8005fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fe2:	f000 8086 	beq.w	80060f2 <HAL_TIM_ConfigClockSource+0x172>
 8005fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fea:	d87f      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x16c>
 8005fec:	2b70      	cmp	r3, #112	@ 0x70
 8005fee:	d01a      	beq.n	8006026 <HAL_TIM_ConfigClockSource+0xa6>
 8005ff0:	2b70      	cmp	r3, #112	@ 0x70
 8005ff2:	d87b      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x16c>
 8005ff4:	2b60      	cmp	r3, #96	@ 0x60
 8005ff6:	d050      	beq.n	800609a <HAL_TIM_ConfigClockSource+0x11a>
 8005ff8:	2b60      	cmp	r3, #96	@ 0x60
 8005ffa:	d877      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x16c>
 8005ffc:	2b50      	cmp	r3, #80	@ 0x50
 8005ffe:	d03c      	beq.n	800607a <HAL_TIM_ConfigClockSource+0xfa>
 8006000:	2b50      	cmp	r3, #80	@ 0x50
 8006002:	d873      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x16c>
 8006004:	2b40      	cmp	r3, #64	@ 0x40
 8006006:	d058      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x13a>
 8006008:	2b40      	cmp	r3, #64	@ 0x40
 800600a:	d86f      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x16c>
 800600c:	2b30      	cmp	r3, #48	@ 0x30
 800600e:	d064      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x15a>
 8006010:	2b30      	cmp	r3, #48	@ 0x30
 8006012:	d86b      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x16c>
 8006014:	2b20      	cmp	r3, #32
 8006016:	d060      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x15a>
 8006018:	2b20      	cmp	r3, #32
 800601a:	d867      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x16c>
 800601c:	2b00      	cmp	r3, #0
 800601e:	d05c      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x15a>
 8006020:	2b10      	cmp	r3, #16
 8006022:	d05a      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x15a>
 8006024:	e062      	b.n	80060ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006036:	f000 fb25 	bl	8006684 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006048:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	609a      	str	r2, [r3, #8]
      break;
 8006052:	e04f      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006064:	f000 fb0e 	bl	8006684 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006076:	609a      	str	r2, [r3, #8]
      break;
 8006078:	e03c      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006086:	461a      	mov	r2, r3
 8006088:	f000 fa82 	bl	8006590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2150      	movs	r1, #80	@ 0x50
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fadb 	bl	800664e <TIM_ITRx_SetConfig>
      break;
 8006098:	e02c      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060a6:	461a      	mov	r2, r3
 80060a8:	f000 faa1 	bl	80065ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2160      	movs	r1, #96	@ 0x60
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 facb 	bl	800664e <TIM_ITRx_SetConfig>
      break;
 80060b8:	e01c      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060c6:	461a      	mov	r2, r3
 80060c8:	f000 fa62 	bl	8006590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2140      	movs	r1, #64	@ 0x40
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 fabb 	bl	800664e <TIM_ITRx_SetConfig>
      break;
 80060d8:	e00c      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4619      	mov	r1, r3
 80060e4:	4610      	mov	r0, r2
 80060e6:	f000 fab2 	bl	800664e <TIM_ITRx_SetConfig>
      break;
 80060ea:	e003      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	73fb      	strb	r3, [r7, #15]
      break;
 80060f0:	e000      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006104:	7bfb      	ldrb	r3, [r7, #15]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006116:	bf00      	nop
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800612a:	bf00      	nop
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
	...

08006160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a3a      	ldr	r2, [pc, #232]	@ (800625c <TIM_Base_SetConfig+0xfc>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d00f      	beq.n	8006198 <TIM_Base_SetConfig+0x38>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800617e:	d00b      	beq.n	8006198 <TIM_Base_SetConfig+0x38>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a37      	ldr	r2, [pc, #220]	@ (8006260 <TIM_Base_SetConfig+0x100>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d007      	beq.n	8006198 <TIM_Base_SetConfig+0x38>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a36      	ldr	r2, [pc, #216]	@ (8006264 <TIM_Base_SetConfig+0x104>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d003      	beq.n	8006198 <TIM_Base_SetConfig+0x38>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a35      	ldr	r2, [pc, #212]	@ (8006268 <TIM_Base_SetConfig+0x108>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d108      	bne.n	80061aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a2b      	ldr	r2, [pc, #172]	@ (800625c <TIM_Base_SetConfig+0xfc>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d01b      	beq.n	80061ea <TIM_Base_SetConfig+0x8a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b8:	d017      	beq.n	80061ea <TIM_Base_SetConfig+0x8a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a28      	ldr	r2, [pc, #160]	@ (8006260 <TIM_Base_SetConfig+0x100>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d013      	beq.n	80061ea <TIM_Base_SetConfig+0x8a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a27      	ldr	r2, [pc, #156]	@ (8006264 <TIM_Base_SetConfig+0x104>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d00f      	beq.n	80061ea <TIM_Base_SetConfig+0x8a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a26      	ldr	r2, [pc, #152]	@ (8006268 <TIM_Base_SetConfig+0x108>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00b      	beq.n	80061ea <TIM_Base_SetConfig+0x8a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a25      	ldr	r2, [pc, #148]	@ (800626c <TIM_Base_SetConfig+0x10c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d007      	beq.n	80061ea <TIM_Base_SetConfig+0x8a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a24      	ldr	r2, [pc, #144]	@ (8006270 <TIM_Base_SetConfig+0x110>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d003      	beq.n	80061ea <TIM_Base_SetConfig+0x8a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a23      	ldr	r2, [pc, #140]	@ (8006274 <TIM_Base_SetConfig+0x114>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d108      	bne.n	80061fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	689a      	ldr	r2, [r3, #8]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a0e      	ldr	r2, [pc, #56]	@ (800625c <TIM_Base_SetConfig+0xfc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d103      	bne.n	8006230 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	691a      	ldr	r2, [r3, #16]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b01      	cmp	r3, #1
 8006240:	d105      	bne.n	800624e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f023 0201 	bic.w	r2, r3, #1
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	611a      	str	r2, [r3, #16]
  }
}
 800624e:	bf00      	nop
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40010000 	.word	0x40010000
 8006260:	40000400 	.word	0x40000400
 8006264:	40000800 	.word	0x40000800
 8006268:	40000c00 	.word	0x40000c00
 800626c:	40014000 	.word	0x40014000
 8006270:	40014400 	.word	0x40014400
 8006274:	40014800 	.word	0x40014800

08006278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	f023 0201 	bic.w	r2, r3, #1
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0303 	bic.w	r3, r3, #3
 80062ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f023 0302 	bic.w	r3, r3, #2
 80062c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006340 <TIM_OC1_SetConfig+0xc8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d10c      	bne.n	80062ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f023 0308 	bic.w	r3, r3, #8
 80062da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f023 0304 	bic.w	r3, r3, #4
 80062ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a13      	ldr	r2, [pc, #76]	@ (8006340 <TIM_OC1_SetConfig+0xc8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d111      	bne.n	800631a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	4313      	orrs	r3, r2
 8006318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	621a      	str	r2, [r3, #32]
}
 8006334:	bf00      	nop
 8006336:	371c      	adds	r7, #28
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	40010000 	.word	0x40010000

08006344 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	f023 0210 	bic.w	r2, r3, #16
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800637a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	021b      	lsls	r3, r3, #8
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	4313      	orrs	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f023 0320 	bic.w	r3, r3, #32
 800638e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	011b      	lsls	r3, r3, #4
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	4313      	orrs	r3, r2
 800639a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a1e      	ldr	r2, [pc, #120]	@ (8006418 <TIM_OC2_SetConfig+0xd4>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d10d      	bne.n	80063c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	011b      	lsls	r3, r3, #4
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a15      	ldr	r2, [pc, #84]	@ (8006418 <TIM_OC2_SetConfig+0xd4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d113      	bne.n	80063f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	621a      	str	r2, [r3, #32]
}
 800640a:	bf00      	nop
 800640c:	371c      	adds	r7, #28
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40010000 	.word	0x40010000

0800641c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800644a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0303 	bic.w	r3, r3, #3
 8006452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	021b      	lsls	r3, r3, #8
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a1d      	ldr	r2, [pc, #116]	@ (80064ec <TIM_OC3_SetConfig+0xd0>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d10d      	bne.n	8006496 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006480:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	021b      	lsls	r3, r3, #8
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a14      	ldr	r2, [pc, #80]	@ (80064ec <TIM_OC3_SetConfig+0xd0>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d113      	bne.n	80064c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	011b      	lsls	r3, r3, #4
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	011b      	lsls	r3, r3, #4
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	621a      	str	r2, [r3, #32]
}
 80064e0:	bf00      	nop
 80064e2:	371c      	adds	r7, #28
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	40010000 	.word	0x40010000

080064f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800651e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	4313      	orrs	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800653a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	031b      	lsls	r3, r3, #12
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a10      	ldr	r2, [pc, #64]	@ (800658c <TIM_OC4_SetConfig+0x9c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d109      	bne.n	8006564 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006556:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	019b      	lsls	r3, r3, #6
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	4313      	orrs	r3, r2
 8006562:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	621a      	str	r2, [r3, #32]
}
 800657e:	bf00      	nop
 8006580:	371c      	adds	r7, #28
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	40010000 	.word	0x40010000

08006590 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	f023 0201 	bic.w	r2, r3, #1
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	011b      	lsls	r3, r3, #4
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f023 030a 	bic.w	r3, r3, #10
 80065cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	621a      	str	r2, [r3, #32]
}
 80065e2:	bf00      	nop
 80065e4:	371c      	adds	r7, #28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b087      	sub	sp, #28
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	60f8      	str	r0, [r7, #12]
 80065f6:	60b9      	str	r1, [r7, #8]
 80065f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	f023 0210 	bic.w	r2, r3, #16
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006618:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	031b      	lsls	r3, r3, #12
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	4313      	orrs	r3, r2
 8006622:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800662a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	621a      	str	r2, [r3, #32]
}
 8006642:	bf00      	nop
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800664e:	b480      	push	{r7}
 8006650:	b085      	sub	sp, #20
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006664:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4313      	orrs	r3, r2
 800666c:	f043 0307 	orr.w	r3, r3, #7
 8006670:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	609a      	str	r2, [r3, #8]
}
 8006678:	bf00      	nop
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800669e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	021a      	lsls	r2, r3, #8
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	431a      	orrs	r2, r3
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	609a      	str	r2, [r3, #8]
}
 80066b8:	bf00      	nop
 80066ba:	371c      	adds	r7, #28
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 031f 	and.w	r3, r3, #31
 80066d6:	2201      	movs	r2, #1
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6a1a      	ldr	r2, [r3, #32]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	43db      	mvns	r3, r3
 80066e6:	401a      	ands	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a1a      	ldr	r2, [r3, #32]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f003 031f 	and.w	r3, r3, #31
 80066f6:	6879      	ldr	r1, [r7, #4]
 80066f8:	fa01 f303 	lsl.w	r3, r1, r3
 80066fc:	431a      	orrs	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	621a      	str	r2, [r3, #32]
}
 8006702:	bf00      	nop
 8006704:	371c      	adds	r7, #28
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
	...

08006710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006724:	2302      	movs	r3, #2
 8006726:	e050      	b.n	80067ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800674e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a1c      	ldr	r2, [pc, #112]	@ (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d018      	beq.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006774:	d013      	beq.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a18      	ldr	r2, [pc, #96]	@ (80067dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00e      	beq.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a16      	ldr	r2, [pc, #88]	@ (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d009      	beq.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a15      	ldr	r2, [pc, #84]	@ (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d004      	beq.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a13      	ldr	r2, [pc, #76]	@ (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d10c      	bne.n	80067b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	40010000 	.word	0x40010000
 80067dc:	40000400 	.word	0x40000400
 80067e0:	40000800 	.word	0x40000800
 80067e4:	40000c00 	.word	0x40000c00
 80067e8:	40014000 	.word	0x40014000

080067ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e042      	b.n	80068ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fb fb12 	bl	8001e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2224      	movs	r2, #36	@ 0x24
 8006844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68da      	ldr	r2, [r3, #12]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006856:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fdbd 	bl	80073d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691a      	ldr	r2, [r3, #16]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800686c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695a      	ldr	r2, [r3, #20]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800687c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800688c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2220      	movs	r2, #32
 8006898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2220      	movs	r2, #32
 80068a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08a      	sub	sp, #40	@ 0x28
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	4613      	mov	r3, r2
 80068c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b20      	cmp	r3, #32
 80068d2:	d175      	bne.n	80069c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <HAL_UART_Transmit+0x2c>
 80068da:	88fb      	ldrh	r3, [r7, #6]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e06e      	b.n	80069c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2221      	movs	r2, #33	@ 0x21
 80068ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068f2:	f7fb fcbd 	bl	8002270 <HAL_GetTick>
 80068f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	88fa      	ldrh	r2, [r7, #6]
 80068fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	88fa      	ldrh	r2, [r7, #6]
 8006902:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800690c:	d108      	bne.n	8006920 <HAL_UART_Transmit+0x6c>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d104      	bne.n	8006920 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006916:	2300      	movs	r3, #0
 8006918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	61bb      	str	r3, [r7, #24]
 800691e:	e003      	b.n	8006928 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006924:	2300      	movs	r3, #0
 8006926:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006928:	e02e      	b.n	8006988 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2200      	movs	r2, #0
 8006932:	2180      	movs	r1, #128	@ 0x80
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 fb1f 	bl	8006f78 <UART_WaitOnFlagUntilTimeout>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d005      	beq.n	800694c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2220      	movs	r2, #32
 8006944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e03a      	b.n	80069c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10b      	bne.n	800696a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	461a      	mov	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006960:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	3302      	adds	r3, #2
 8006966:	61bb      	str	r3, [r7, #24]
 8006968:	e007      	b.n	800697a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	781a      	ldrb	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	3301      	adds	r3, #1
 8006978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800697e:	b29b      	uxth	r3, r3
 8006980:	3b01      	subs	r3, #1
 8006982:	b29a      	uxth	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1cb      	bne.n	800692a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2200      	movs	r2, #0
 800699a:	2140      	movs	r1, #64	@ 0x40
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 faeb 	bl	8006f78 <UART_WaitOnFlagUntilTimeout>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d005      	beq.n	80069b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e006      	b.n	80069c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	e000      	b.n	80069c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80069c0:	2302      	movs	r3, #2
  }
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3720      	adds	r7, #32
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b084      	sub	sp, #16
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	60b9      	str	r1, [r7, #8]
 80069d4:	4613      	mov	r3, r2
 80069d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b20      	cmp	r3, #32
 80069e2:	d112      	bne.n	8006a0a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <HAL_UART_Receive_IT+0x26>
 80069ea:	88fb      	ldrh	r3, [r7, #6]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d101      	bne.n	80069f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e00b      	b.n	8006a0c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069fa:	88fb      	ldrh	r3, [r7, #6]
 80069fc:	461a      	mov	r2, r3
 80069fe:	68b9      	ldr	r1, [r7, #8]
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 fb12 	bl	800702a <UART_Start_Receive_IT>
 8006a06:	4603      	mov	r3, r0
 8006a08:	e000      	b.n	8006a0c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006a0a:	2302      	movs	r3, #2
  }
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b0ba      	sub	sp, #232	@ 0xe8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10f      	bne.n	8006a7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a5e:	f003 0320 	and.w	r3, r3, #32
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d009      	beq.n	8006a7a <HAL_UART_IRQHandler+0x66>
 8006a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fbf2 	bl	800725c <UART_Receive_IT>
      return;
 8006a78:	e25b      	b.n	8006f32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 80de 	beq.w	8006c40 <HAL_UART_IRQHandler+0x22c>
 8006a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d106      	bne.n	8006a9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a94:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 80d1 	beq.w	8006c40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00b      	beq.n	8006ac2 <HAL_UART_IRQHandler+0xae>
 8006aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aba:	f043 0201 	orr.w	r2, r3, #1
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ac6:	f003 0304 	and.w	r3, r3, #4
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00b      	beq.n	8006ae6 <HAL_UART_IRQHandler+0xd2>
 8006ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d005      	beq.n	8006ae6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ade:	f043 0202 	orr.w	r2, r3, #2
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00b      	beq.n	8006b0a <HAL_UART_IRQHandler+0xf6>
 8006af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d005      	beq.n	8006b0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b02:	f043 0204 	orr.w	r2, r3, #4
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d011      	beq.n	8006b3a <HAL_UART_IRQHandler+0x126>
 8006b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b1a:	f003 0320 	and.w	r3, r3, #32
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d105      	bne.n	8006b2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d005      	beq.n	8006b3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b32:	f043 0208 	orr.w	r2, r3, #8
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 81f2 	beq.w	8006f28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b48:	f003 0320 	and.w	r3, r3, #32
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d008      	beq.n	8006b62 <HAL_UART_IRQHandler+0x14e>
 8006b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b54:	f003 0320 	and.w	r3, r3, #32
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fb7d 	bl	800725c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b6c:	2b40      	cmp	r3, #64	@ 0x40
 8006b6e:	bf0c      	ite	eq
 8006b70:	2301      	moveq	r3, #1
 8006b72:	2300      	movne	r3, #0
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b7e:	f003 0308 	and.w	r3, r3, #8
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d103      	bne.n	8006b8e <HAL_UART_IRQHandler+0x17a>
 8006b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d04f      	beq.n	8006c2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fa85 	bl	800709e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b9e:	2b40      	cmp	r3, #64	@ 0x40
 8006ba0:	d141      	bne.n	8006c26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3314      	adds	r3, #20
 8006ba8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006bb0:	e853 3f00 	ldrex	r3, [r3]
 8006bb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3314      	adds	r3, #20
 8006bca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006bce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006bda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006bde:	e841 2300 	strex	r3, r2, [r1]
 8006be2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1d9      	bne.n	8006ba2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d013      	beq.n	8006c1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bfa:	4a7e      	ldr	r2, [pc, #504]	@ (8006df4 <HAL_UART_IRQHandler+0x3e0>)
 8006bfc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fb fce5 	bl	80025d2 <HAL_DMA_Abort_IT>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d016      	beq.n	8006c3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006c18:	4610      	mov	r0, r2
 8006c1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c1c:	e00e      	b.n	8006c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f994 	bl	8006f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c24:	e00a      	b.n	8006c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f990 	bl	8006f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c2c:	e006      	b.n	8006c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f98c 	bl	8006f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006c3a:	e175      	b.n	8006f28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c3c:	bf00      	nop
    return;
 8006c3e:	e173      	b.n	8006f28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	f040 814f 	bne.w	8006ee8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c4e:	f003 0310 	and.w	r3, r3, #16
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 8148 	beq.w	8006ee8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c5c:	f003 0310 	and.w	r3, r3, #16
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 8141 	beq.w	8006ee8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c66:	2300      	movs	r3, #0
 8006c68:	60bb      	str	r3, [r7, #8]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	60bb      	str	r3, [r7, #8]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	60bb      	str	r3, [r7, #8]
 8006c7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c86:	2b40      	cmp	r3, #64	@ 0x40
 8006c88:	f040 80b6 	bne.w	8006df8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 8145 	beq.w	8006f2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006caa:	429a      	cmp	r2, r3
 8006cac:	f080 813e 	bcs.w	8006f2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cb6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cc2:	f000 8088 	beq.w	8006dd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	330c      	adds	r3, #12
 8006ccc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	330c      	adds	r3, #12
 8006cee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006cf2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006cf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006cfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1d9      	bne.n	8006cc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3314      	adds	r3, #20
 8006d18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d1c:	e853 3f00 	ldrex	r3, [r3]
 8006d20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d24:	f023 0301 	bic.w	r3, r3, #1
 8006d28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3314      	adds	r3, #20
 8006d32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d42:	e841 2300 	strex	r3, r2, [r1]
 8006d46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1e1      	bne.n	8006d12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3314      	adds	r3, #20
 8006d54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d58:	e853 3f00 	ldrex	r3, [r3]
 8006d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006d5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3314      	adds	r3, #20
 8006d6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006d72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006d74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006d78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006d7a:	e841 2300 	strex	r3, r2, [r1]
 8006d7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006d80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1e3      	bne.n	8006d4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	330c      	adds	r3, #12
 8006d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d9e:	e853 3f00 	ldrex	r3, [r3]
 8006da2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006da4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006da6:	f023 0310 	bic.w	r3, r3, #16
 8006daa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	330c      	adds	r3, #12
 8006db4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006db8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006dba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006dbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006dc0:	e841 2300 	strex	r3, r2, [r1]
 8006dc4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006dc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1e3      	bne.n	8006d94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fb fb8e 	bl	80024f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2202      	movs	r2, #2
 8006dda:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	4619      	mov	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f8b7 	bl	8006f60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006df2:	e09b      	b.n	8006f2c <HAL_UART_IRQHandler+0x518>
 8006df4:	08007165 	.word	0x08007165
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 808e 	beq.w	8006f30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006e14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 8089 	beq.w	8006f30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	330c      	adds	r3, #12
 8006e24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	330c      	adds	r3, #12
 8006e3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006e42:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e3      	bne.n	8006e1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3314      	adds	r3, #20
 8006e5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	623b      	str	r3, [r7, #32]
   return(result);
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	f023 0301 	bic.w	r3, r3, #1
 8006e6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3314      	adds	r3, #20
 8006e76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006e7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e3      	bne.n	8006e56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2220      	movs	r2, #32
 8006e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f023 0310 	bic.w	r3, r3, #16
 8006eb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	330c      	adds	r3, #12
 8006ebc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006ec0:	61fa      	str	r2, [r7, #28]
 8006ec2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	69b9      	ldr	r1, [r7, #24]
 8006ec6:	69fa      	ldr	r2, [r7, #28]
 8006ec8:	e841 2300 	strex	r3, r2, [r1]
 8006ecc:	617b      	str	r3, [r7, #20]
   return(result);
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e3      	bne.n	8006e9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006eda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f83d 	bl	8006f60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ee6:	e023      	b.n	8006f30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d009      	beq.n	8006f08 <HAL_UART_IRQHandler+0x4f4>
 8006ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d003      	beq.n	8006f08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f943 	bl	800718c <UART_Transmit_IT>
    return;
 8006f06:	e014      	b.n	8006f32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00e      	beq.n	8006f32 <HAL_UART_IRQHandler+0x51e>
 8006f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d008      	beq.n	8006f32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f983 	bl	800722c <UART_EndTransmit_IT>
    return;
 8006f26:	e004      	b.n	8006f32 <HAL_UART_IRQHandler+0x51e>
    return;
 8006f28:	bf00      	nop
 8006f2a:	e002      	b.n	8006f32 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f2c:	bf00      	nop
 8006f2e:	e000      	b.n	8006f32 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f30:	bf00      	nop
  }
}
 8006f32:	37e8      	adds	r7, #232	@ 0xe8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	460b      	mov	r3, r1
 8006f6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	4613      	mov	r3, r2
 8006f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f88:	e03b      	b.n	8007002 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f90:	d037      	beq.n	8007002 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f92:	f7fb f96d 	bl	8002270 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	6a3a      	ldr	r2, [r7, #32]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d302      	bcc.n	8006fa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e03a      	b.n	8007022 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f003 0304 	and.w	r3, r3, #4
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d023      	beq.n	8007002 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2b80      	cmp	r3, #128	@ 0x80
 8006fbe:	d020      	beq.n	8007002 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b40      	cmp	r3, #64	@ 0x40
 8006fc4:	d01d      	beq.n	8007002 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b08      	cmp	r3, #8
 8006fd2:	d116      	bne.n	8007002 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	617b      	str	r3, [r7, #20]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	617b      	str	r3, [r7, #20]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 f857 	bl	800709e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2208      	movs	r2, #8
 8006ff4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e00f      	b.n	8007022 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	4013      	ands	r3, r2
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	429a      	cmp	r2, r3
 8007010:	bf0c      	ite	eq
 8007012:	2301      	moveq	r3, #1
 8007014:	2300      	movne	r3, #0
 8007016:	b2db      	uxtb	r3, r3
 8007018:	461a      	mov	r2, r3
 800701a:	79fb      	ldrb	r3, [r7, #7]
 800701c:	429a      	cmp	r2, r3
 800701e:	d0b4      	beq.n	8006f8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800702a:	b480      	push	{r7}
 800702c:	b085      	sub	sp, #20
 800702e:	af00      	add	r7, sp, #0
 8007030:	60f8      	str	r0, [r7, #12]
 8007032:	60b9      	str	r1, [r7, #8]
 8007034:	4613      	mov	r3, r2
 8007036:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	88fa      	ldrh	r2, [r7, #6]
 8007042:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	88fa      	ldrh	r2, [r7, #6]
 8007048:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2222      	movs	r2, #34	@ 0x22
 8007054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d007      	beq.n	8007070 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800706e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	695a      	ldr	r2, [r3, #20]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f042 0201 	orr.w	r2, r2, #1
 800707e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0220 	orr.w	r2, r2, #32
 800708e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800709e:	b480      	push	{r7}
 80070a0:	b095      	sub	sp, #84	@ 0x54
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	330c      	adds	r3, #12
 80070ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	330c      	adds	r3, #12
 80070c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80070c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e5      	bne.n	80070a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	3314      	adds	r3, #20
 80070e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	f023 0301 	bic.w	r3, r3, #1
 80070f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	3314      	adds	r3, #20
 80070f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007100:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e5      	bne.n	80070da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007112:	2b01      	cmp	r3, #1
 8007114:	d119      	bne.n	800714a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	330c      	adds	r3, #12
 800711c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	e853 3f00 	ldrex	r3, [r3]
 8007124:	60bb      	str	r3, [r7, #8]
   return(result);
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	f023 0310 	bic.w	r3, r3, #16
 800712c:	647b      	str	r3, [r7, #68]	@ 0x44
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	330c      	adds	r3, #12
 8007134:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007136:	61ba      	str	r2, [r7, #24]
 8007138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713a:	6979      	ldr	r1, [r7, #20]
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	e841 2300 	strex	r3, r2, [r1]
 8007142:	613b      	str	r3, [r7, #16]
   return(result);
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1e5      	bne.n	8007116 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2220      	movs	r2, #32
 800714e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007158:	bf00      	nop
 800715a:	3754      	adds	r7, #84	@ 0x54
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007170:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f7ff fee4 	bl	8006f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007184:	bf00      	nop
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b21      	cmp	r3, #33	@ 0x21
 800719e:	d13e      	bne.n	800721e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071a8:	d114      	bne.n	80071d4 <UART_Transmit_IT+0x48>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d110      	bne.n	80071d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	881b      	ldrh	r3, [r3, #0]
 80071bc:	461a      	mov	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a1b      	ldr	r3, [r3, #32]
 80071cc:	1c9a      	adds	r2, r3, #2
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	621a      	str	r2, [r3, #32]
 80071d2:	e008      	b.n	80071e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	1c59      	adds	r1, r3, #1
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	6211      	str	r1, [r2, #32]
 80071de:	781a      	ldrb	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	3b01      	subs	r3, #1
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	4619      	mov	r1, r3
 80071f4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10f      	bne.n	800721a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68da      	ldr	r2, [r3, #12]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007208:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68da      	ldr	r2, [r3, #12]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007218:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	e000      	b.n	8007220 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800721e:	2302      	movs	r3, #2
  }
}
 8007220:	4618      	mov	r0, r3
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007242:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2220      	movs	r2, #32
 8007248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff fe73 	bl	8006f38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08c      	sub	sp, #48	@ 0x30
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b22      	cmp	r3, #34	@ 0x22
 800726e:	f040 80ae 	bne.w	80073ce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800727a:	d117      	bne.n	80072ac <UART_Receive_IT+0x50>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d113      	bne.n	80072ac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007284:	2300      	movs	r3, #0
 8007286:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800728c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	b29b      	uxth	r3, r3
 8007296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800729a:	b29a      	uxth	r2, r3
 800729c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800729e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a4:	1c9a      	adds	r2, r3, #2
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80072aa:	e026      	b.n	80072fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072be:	d007      	beq.n	80072d0 <UART_Receive_IT+0x74>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10a      	bne.n	80072de <UART_Receive_IT+0x82>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d106      	bne.n	80072de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072da:	701a      	strb	r2, [r3, #0]
 80072dc:	e008      	b.n	80072f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3b01      	subs	r3, #1
 8007302:	b29b      	uxth	r3, r3
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	4619      	mov	r1, r3
 8007308:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800730a:	2b00      	cmp	r3, #0
 800730c:	d15d      	bne.n	80073ca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68da      	ldr	r2, [r3, #12]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0220 	bic.w	r2, r2, #32
 800731c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800732c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	695a      	ldr	r2, [r3, #20]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 0201 	bic.w	r2, r2, #1
 800733c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2220      	movs	r2, #32
 8007342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007350:	2b01      	cmp	r3, #1
 8007352:	d135      	bne.n	80073c0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	330c      	adds	r3, #12
 8007360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	e853 3f00 	ldrex	r3, [r3]
 8007368:	613b      	str	r3, [r7, #16]
   return(result);
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f023 0310 	bic.w	r3, r3, #16
 8007370:	627b      	str	r3, [r7, #36]	@ 0x24
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	330c      	adds	r3, #12
 8007378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800737a:	623a      	str	r2, [r7, #32]
 800737c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	69f9      	ldr	r1, [r7, #28]
 8007380:	6a3a      	ldr	r2, [r7, #32]
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	61bb      	str	r3, [r7, #24]
   return(result);
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e5      	bne.n	800735a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0310 	and.w	r3, r3, #16
 8007398:	2b10      	cmp	r3, #16
 800739a:	d10a      	bne.n	80073b2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff fdd1 	bl	8006f60 <HAL_UARTEx_RxEventCallback>
 80073be:	e002      	b.n	80073c6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7fa fb4d 	bl	8001a60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80073c6:	2300      	movs	r3, #0
 80073c8:	e002      	b.n	80073d0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	e000      	b.n	80073d0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80073ce:	2302      	movs	r3, #2
  }
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3730      	adds	r7, #48	@ 0x30
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073dc:	b0c0      	sub	sp, #256	@ 0x100
 80073de:	af00      	add	r7, sp, #0
 80073e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80073f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f4:	68d9      	ldr	r1, [r3, #12]
 80073f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	ea40 0301 	orr.w	r3, r0, r1
 8007400:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	431a      	orrs	r2, r3
 8007410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	431a      	orrs	r2, r3
 8007418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	4313      	orrs	r3, r2
 8007420:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007430:	f021 010c 	bic.w	r1, r1, #12
 8007434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800743e:	430b      	orrs	r3, r1
 8007440:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800744e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007452:	6999      	ldr	r1, [r3, #24]
 8007454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	ea40 0301 	orr.w	r3, r0, r1
 800745e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	4b8f      	ldr	r3, [pc, #572]	@ (80076a4 <UART_SetConfig+0x2cc>)
 8007468:	429a      	cmp	r2, r3
 800746a:	d005      	beq.n	8007478 <UART_SetConfig+0xa0>
 800746c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	4b8d      	ldr	r3, [pc, #564]	@ (80076a8 <UART_SetConfig+0x2d0>)
 8007474:	429a      	cmp	r2, r3
 8007476:	d104      	bne.n	8007482 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007478:	f7fe f930 	bl	80056dc <HAL_RCC_GetPCLK2Freq>
 800747c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007480:	e003      	b.n	800748a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007482:	f7fe f917 	bl	80056b4 <HAL_RCC_GetPCLK1Freq>
 8007486:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800748a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800748e:	69db      	ldr	r3, [r3, #28]
 8007490:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007494:	f040 810c 	bne.w	80076b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800749c:	2200      	movs	r2, #0
 800749e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80074a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80074a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80074aa:	4622      	mov	r2, r4
 80074ac:	462b      	mov	r3, r5
 80074ae:	1891      	adds	r1, r2, r2
 80074b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80074b2:	415b      	adcs	r3, r3
 80074b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80074ba:	4621      	mov	r1, r4
 80074bc:	eb12 0801 	adds.w	r8, r2, r1
 80074c0:	4629      	mov	r1, r5
 80074c2:	eb43 0901 	adc.w	r9, r3, r1
 80074c6:	f04f 0200 	mov.w	r2, #0
 80074ca:	f04f 0300 	mov.w	r3, #0
 80074ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074da:	4690      	mov	r8, r2
 80074dc:	4699      	mov	r9, r3
 80074de:	4623      	mov	r3, r4
 80074e0:	eb18 0303 	adds.w	r3, r8, r3
 80074e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074e8:	462b      	mov	r3, r5
 80074ea:	eb49 0303 	adc.w	r3, r9, r3
 80074ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80074f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007502:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007506:	460b      	mov	r3, r1
 8007508:	18db      	adds	r3, r3, r3
 800750a:	653b      	str	r3, [r7, #80]	@ 0x50
 800750c:	4613      	mov	r3, r2
 800750e:	eb42 0303 	adc.w	r3, r2, r3
 8007512:	657b      	str	r3, [r7, #84]	@ 0x54
 8007514:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007518:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800751c:	f7f9 fb9c 	bl	8000c58 <__aeabi_uldivmod>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	4b61      	ldr	r3, [pc, #388]	@ (80076ac <UART_SetConfig+0x2d4>)
 8007526:	fba3 2302 	umull	r2, r3, r3, r2
 800752a:	095b      	lsrs	r3, r3, #5
 800752c:	011c      	lsls	r4, r3, #4
 800752e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007532:	2200      	movs	r2, #0
 8007534:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007538:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800753c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007540:	4642      	mov	r2, r8
 8007542:	464b      	mov	r3, r9
 8007544:	1891      	adds	r1, r2, r2
 8007546:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007548:	415b      	adcs	r3, r3
 800754a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800754c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007550:	4641      	mov	r1, r8
 8007552:	eb12 0a01 	adds.w	sl, r2, r1
 8007556:	4649      	mov	r1, r9
 8007558:	eb43 0b01 	adc.w	fp, r3, r1
 800755c:	f04f 0200 	mov.w	r2, #0
 8007560:	f04f 0300 	mov.w	r3, #0
 8007564:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007568:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800756c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007570:	4692      	mov	sl, r2
 8007572:	469b      	mov	fp, r3
 8007574:	4643      	mov	r3, r8
 8007576:	eb1a 0303 	adds.w	r3, sl, r3
 800757a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800757e:	464b      	mov	r3, r9
 8007580:	eb4b 0303 	adc.w	r3, fp, r3
 8007584:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007594:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007598:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800759c:	460b      	mov	r3, r1
 800759e:	18db      	adds	r3, r3, r3
 80075a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80075a2:	4613      	mov	r3, r2
 80075a4:	eb42 0303 	adc.w	r3, r2, r3
 80075a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80075aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80075ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80075b2:	f7f9 fb51 	bl	8000c58 <__aeabi_uldivmod>
 80075b6:	4602      	mov	r2, r0
 80075b8:	460b      	mov	r3, r1
 80075ba:	4611      	mov	r1, r2
 80075bc:	4b3b      	ldr	r3, [pc, #236]	@ (80076ac <UART_SetConfig+0x2d4>)
 80075be:	fba3 2301 	umull	r2, r3, r3, r1
 80075c2:	095b      	lsrs	r3, r3, #5
 80075c4:	2264      	movs	r2, #100	@ 0x64
 80075c6:	fb02 f303 	mul.w	r3, r2, r3
 80075ca:	1acb      	subs	r3, r1, r3
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80075d2:	4b36      	ldr	r3, [pc, #216]	@ (80076ac <UART_SetConfig+0x2d4>)
 80075d4:	fba3 2302 	umull	r2, r3, r3, r2
 80075d8:	095b      	lsrs	r3, r3, #5
 80075da:	005b      	lsls	r3, r3, #1
 80075dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80075e0:	441c      	add	r4, r3
 80075e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075e6:	2200      	movs	r2, #0
 80075e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80075f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80075f4:	4642      	mov	r2, r8
 80075f6:	464b      	mov	r3, r9
 80075f8:	1891      	adds	r1, r2, r2
 80075fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80075fc:	415b      	adcs	r3, r3
 80075fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007604:	4641      	mov	r1, r8
 8007606:	1851      	adds	r1, r2, r1
 8007608:	6339      	str	r1, [r7, #48]	@ 0x30
 800760a:	4649      	mov	r1, r9
 800760c:	414b      	adcs	r3, r1
 800760e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007610:	f04f 0200 	mov.w	r2, #0
 8007614:	f04f 0300 	mov.w	r3, #0
 8007618:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800761c:	4659      	mov	r1, fp
 800761e:	00cb      	lsls	r3, r1, #3
 8007620:	4651      	mov	r1, sl
 8007622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007626:	4651      	mov	r1, sl
 8007628:	00ca      	lsls	r2, r1, #3
 800762a:	4610      	mov	r0, r2
 800762c:	4619      	mov	r1, r3
 800762e:	4603      	mov	r3, r0
 8007630:	4642      	mov	r2, r8
 8007632:	189b      	adds	r3, r3, r2
 8007634:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007638:	464b      	mov	r3, r9
 800763a:	460a      	mov	r2, r1
 800763c:	eb42 0303 	adc.w	r3, r2, r3
 8007640:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007650:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007654:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007658:	460b      	mov	r3, r1
 800765a:	18db      	adds	r3, r3, r3
 800765c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800765e:	4613      	mov	r3, r2
 8007660:	eb42 0303 	adc.w	r3, r2, r3
 8007664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800766a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800766e:	f7f9 faf3 	bl	8000c58 <__aeabi_uldivmod>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	4b0d      	ldr	r3, [pc, #52]	@ (80076ac <UART_SetConfig+0x2d4>)
 8007678:	fba3 1302 	umull	r1, r3, r3, r2
 800767c:	095b      	lsrs	r3, r3, #5
 800767e:	2164      	movs	r1, #100	@ 0x64
 8007680:	fb01 f303 	mul.w	r3, r1, r3
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	00db      	lsls	r3, r3, #3
 8007688:	3332      	adds	r3, #50	@ 0x32
 800768a:	4a08      	ldr	r2, [pc, #32]	@ (80076ac <UART_SetConfig+0x2d4>)
 800768c:	fba2 2303 	umull	r2, r3, r2, r3
 8007690:	095b      	lsrs	r3, r3, #5
 8007692:	f003 0207 	and.w	r2, r3, #7
 8007696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4422      	add	r2, r4
 800769e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076a0:	e106      	b.n	80078b0 <UART_SetConfig+0x4d8>
 80076a2:	bf00      	nop
 80076a4:	40011000 	.word	0x40011000
 80076a8:	40011400 	.word	0x40011400
 80076ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076b4:	2200      	movs	r2, #0
 80076b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80076ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80076be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80076c2:	4642      	mov	r2, r8
 80076c4:	464b      	mov	r3, r9
 80076c6:	1891      	adds	r1, r2, r2
 80076c8:	6239      	str	r1, [r7, #32]
 80076ca:	415b      	adcs	r3, r3
 80076cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80076ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076d2:	4641      	mov	r1, r8
 80076d4:	1854      	adds	r4, r2, r1
 80076d6:	4649      	mov	r1, r9
 80076d8:	eb43 0501 	adc.w	r5, r3, r1
 80076dc:	f04f 0200 	mov.w	r2, #0
 80076e0:	f04f 0300 	mov.w	r3, #0
 80076e4:	00eb      	lsls	r3, r5, #3
 80076e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076ea:	00e2      	lsls	r2, r4, #3
 80076ec:	4614      	mov	r4, r2
 80076ee:	461d      	mov	r5, r3
 80076f0:	4643      	mov	r3, r8
 80076f2:	18e3      	adds	r3, r4, r3
 80076f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076f8:	464b      	mov	r3, r9
 80076fa:	eb45 0303 	adc.w	r3, r5, r3
 80076fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800770e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007712:	f04f 0200 	mov.w	r2, #0
 8007716:	f04f 0300 	mov.w	r3, #0
 800771a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800771e:	4629      	mov	r1, r5
 8007720:	008b      	lsls	r3, r1, #2
 8007722:	4621      	mov	r1, r4
 8007724:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007728:	4621      	mov	r1, r4
 800772a:	008a      	lsls	r2, r1, #2
 800772c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007730:	f7f9 fa92 	bl	8000c58 <__aeabi_uldivmod>
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	4b60      	ldr	r3, [pc, #384]	@ (80078bc <UART_SetConfig+0x4e4>)
 800773a:	fba3 2302 	umull	r2, r3, r3, r2
 800773e:	095b      	lsrs	r3, r3, #5
 8007740:	011c      	lsls	r4, r3, #4
 8007742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007746:	2200      	movs	r2, #0
 8007748:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800774c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007750:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007754:	4642      	mov	r2, r8
 8007756:	464b      	mov	r3, r9
 8007758:	1891      	adds	r1, r2, r2
 800775a:	61b9      	str	r1, [r7, #24]
 800775c:	415b      	adcs	r3, r3
 800775e:	61fb      	str	r3, [r7, #28]
 8007760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007764:	4641      	mov	r1, r8
 8007766:	1851      	adds	r1, r2, r1
 8007768:	6139      	str	r1, [r7, #16]
 800776a:	4649      	mov	r1, r9
 800776c:	414b      	adcs	r3, r1
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	f04f 0200 	mov.w	r2, #0
 8007774:	f04f 0300 	mov.w	r3, #0
 8007778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800777c:	4659      	mov	r1, fp
 800777e:	00cb      	lsls	r3, r1, #3
 8007780:	4651      	mov	r1, sl
 8007782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007786:	4651      	mov	r1, sl
 8007788:	00ca      	lsls	r2, r1, #3
 800778a:	4610      	mov	r0, r2
 800778c:	4619      	mov	r1, r3
 800778e:	4603      	mov	r3, r0
 8007790:	4642      	mov	r2, r8
 8007792:	189b      	adds	r3, r3, r2
 8007794:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007798:	464b      	mov	r3, r9
 800779a:	460a      	mov	r2, r1
 800779c:	eb42 0303 	adc.w	r3, r2, r3
 80077a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80077b0:	f04f 0200 	mov.w	r2, #0
 80077b4:	f04f 0300 	mov.w	r3, #0
 80077b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80077bc:	4649      	mov	r1, r9
 80077be:	008b      	lsls	r3, r1, #2
 80077c0:	4641      	mov	r1, r8
 80077c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077c6:	4641      	mov	r1, r8
 80077c8:	008a      	lsls	r2, r1, #2
 80077ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80077ce:	f7f9 fa43 	bl	8000c58 <__aeabi_uldivmod>
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	4611      	mov	r1, r2
 80077d8:	4b38      	ldr	r3, [pc, #224]	@ (80078bc <UART_SetConfig+0x4e4>)
 80077da:	fba3 2301 	umull	r2, r3, r3, r1
 80077de:	095b      	lsrs	r3, r3, #5
 80077e0:	2264      	movs	r2, #100	@ 0x64
 80077e2:	fb02 f303 	mul.w	r3, r2, r3
 80077e6:	1acb      	subs	r3, r1, r3
 80077e8:	011b      	lsls	r3, r3, #4
 80077ea:	3332      	adds	r3, #50	@ 0x32
 80077ec:	4a33      	ldr	r2, [pc, #204]	@ (80078bc <UART_SetConfig+0x4e4>)
 80077ee:	fba2 2303 	umull	r2, r3, r2, r3
 80077f2:	095b      	lsrs	r3, r3, #5
 80077f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80077f8:	441c      	add	r4, r3
 80077fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077fe:	2200      	movs	r2, #0
 8007800:	673b      	str	r3, [r7, #112]	@ 0x70
 8007802:	677a      	str	r2, [r7, #116]	@ 0x74
 8007804:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007808:	4642      	mov	r2, r8
 800780a:	464b      	mov	r3, r9
 800780c:	1891      	adds	r1, r2, r2
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	415b      	adcs	r3, r3
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007818:	4641      	mov	r1, r8
 800781a:	1851      	adds	r1, r2, r1
 800781c:	6039      	str	r1, [r7, #0]
 800781e:	4649      	mov	r1, r9
 8007820:	414b      	adcs	r3, r1
 8007822:	607b      	str	r3, [r7, #4]
 8007824:	f04f 0200 	mov.w	r2, #0
 8007828:	f04f 0300 	mov.w	r3, #0
 800782c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007830:	4659      	mov	r1, fp
 8007832:	00cb      	lsls	r3, r1, #3
 8007834:	4651      	mov	r1, sl
 8007836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800783a:	4651      	mov	r1, sl
 800783c:	00ca      	lsls	r2, r1, #3
 800783e:	4610      	mov	r0, r2
 8007840:	4619      	mov	r1, r3
 8007842:	4603      	mov	r3, r0
 8007844:	4642      	mov	r2, r8
 8007846:	189b      	adds	r3, r3, r2
 8007848:	66bb      	str	r3, [r7, #104]	@ 0x68
 800784a:	464b      	mov	r3, r9
 800784c:	460a      	mov	r2, r1
 800784e:	eb42 0303 	adc.w	r3, r2, r3
 8007852:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	663b      	str	r3, [r7, #96]	@ 0x60
 800785e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007860:	f04f 0200 	mov.w	r2, #0
 8007864:	f04f 0300 	mov.w	r3, #0
 8007868:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800786c:	4649      	mov	r1, r9
 800786e:	008b      	lsls	r3, r1, #2
 8007870:	4641      	mov	r1, r8
 8007872:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007876:	4641      	mov	r1, r8
 8007878:	008a      	lsls	r2, r1, #2
 800787a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800787e:	f7f9 f9eb 	bl	8000c58 <__aeabi_uldivmod>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	4b0d      	ldr	r3, [pc, #52]	@ (80078bc <UART_SetConfig+0x4e4>)
 8007888:	fba3 1302 	umull	r1, r3, r3, r2
 800788c:	095b      	lsrs	r3, r3, #5
 800788e:	2164      	movs	r1, #100	@ 0x64
 8007890:	fb01 f303 	mul.w	r3, r1, r3
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	011b      	lsls	r3, r3, #4
 8007898:	3332      	adds	r3, #50	@ 0x32
 800789a:	4a08      	ldr	r2, [pc, #32]	@ (80078bc <UART_SetConfig+0x4e4>)
 800789c:	fba2 2303 	umull	r2, r3, r2, r3
 80078a0:	095b      	lsrs	r3, r3, #5
 80078a2:	f003 020f 	and.w	r2, r3, #15
 80078a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4422      	add	r2, r4
 80078ae:	609a      	str	r2, [r3, #8]
}
 80078b0:	bf00      	nop
 80078b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80078b6:	46bd      	mov	sp, r7
 80078b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078bc:	51eb851f 	.word	0x51eb851f

080078c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078c0:	b084      	sub	sp, #16
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	f107 001c 	add.w	r0, r7, #28
 80078ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078d2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d123      	bne.n	8007922 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80078ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007902:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007906:	2b01      	cmp	r3, #1
 8007908:	d105      	bne.n	8007916 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f001 fae8 	bl	8008eec <USB_CoreReset>
 800791c:	4603      	mov	r3, r0
 800791e:	73fb      	strb	r3, [r7, #15]
 8007920:	e01b      	b.n	800795a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f001 fadc 	bl	8008eec <USB_CoreReset>
 8007934:	4603      	mov	r3, r0
 8007936:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007938:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800793c:	2b00      	cmp	r3, #0
 800793e:	d106      	bne.n	800794e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007944:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	639a      	str	r2, [r3, #56]	@ 0x38
 800794c:	e005      	b.n	800795a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007952:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800795a:	7fbb      	ldrb	r3, [r7, #30]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d10b      	bne.n	8007978 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f043 0206 	orr.w	r2, r3, #6
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f043 0220 	orr.w	r2, r3, #32
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007978:	7bfb      	ldrb	r3, [r7, #15]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007984:	b004      	add	sp, #16
 8007986:	4770      	bx	lr

08007988 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	4613      	mov	r3, r2
 8007994:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007996:	79fb      	ldrb	r3, [r7, #7]
 8007998:	2b02      	cmp	r3, #2
 800799a:	d165      	bne.n	8007a68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	4a41      	ldr	r2, [pc, #260]	@ (8007aa4 <USB_SetTurnaroundTime+0x11c>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d906      	bls.n	80079b2 <USB_SetTurnaroundTime+0x2a>
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	4a40      	ldr	r2, [pc, #256]	@ (8007aa8 <USB_SetTurnaroundTime+0x120>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d202      	bcs.n	80079b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80079ac:	230f      	movs	r3, #15
 80079ae:	617b      	str	r3, [r7, #20]
 80079b0:	e062      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	4a3c      	ldr	r2, [pc, #240]	@ (8007aa8 <USB_SetTurnaroundTime+0x120>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d306      	bcc.n	80079c8 <USB_SetTurnaroundTime+0x40>
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	4a3b      	ldr	r2, [pc, #236]	@ (8007aac <USB_SetTurnaroundTime+0x124>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d202      	bcs.n	80079c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80079c2:	230e      	movs	r3, #14
 80079c4:	617b      	str	r3, [r7, #20]
 80079c6:	e057      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	4a38      	ldr	r2, [pc, #224]	@ (8007aac <USB_SetTurnaroundTime+0x124>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d306      	bcc.n	80079de <USB_SetTurnaroundTime+0x56>
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	4a37      	ldr	r2, [pc, #220]	@ (8007ab0 <USB_SetTurnaroundTime+0x128>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d202      	bcs.n	80079de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80079d8:	230d      	movs	r3, #13
 80079da:	617b      	str	r3, [r7, #20]
 80079dc:	e04c      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	4a33      	ldr	r2, [pc, #204]	@ (8007ab0 <USB_SetTurnaroundTime+0x128>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d306      	bcc.n	80079f4 <USB_SetTurnaroundTime+0x6c>
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	4a32      	ldr	r2, [pc, #200]	@ (8007ab4 <USB_SetTurnaroundTime+0x12c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d802      	bhi.n	80079f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80079ee:	230c      	movs	r3, #12
 80079f0:	617b      	str	r3, [r7, #20]
 80079f2:	e041      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	4a2f      	ldr	r2, [pc, #188]	@ (8007ab4 <USB_SetTurnaroundTime+0x12c>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d906      	bls.n	8007a0a <USB_SetTurnaroundTime+0x82>
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	4a2e      	ldr	r2, [pc, #184]	@ (8007ab8 <USB_SetTurnaroundTime+0x130>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d802      	bhi.n	8007a0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007a04:	230b      	movs	r3, #11
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	e036      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	4a2a      	ldr	r2, [pc, #168]	@ (8007ab8 <USB_SetTurnaroundTime+0x130>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d906      	bls.n	8007a20 <USB_SetTurnaroundTime+0x98>
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	4a29      	ldr	r2, [pc, #164]	@ (8007abc <USB_SetTurnaroundTime+0x134>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d802      	bhi.n	8007a20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007a1a:	230a      	movs	r3, #10
 8007a1c:	617b      	str	r3, [r7, #20]
 8007a1e:	e02b      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	4a26      	ldr	r2, [pc, #152]	@ (8007abc <USB_SetTurnaroundTime+0x134>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d906      	bls.n	8007a36 <USB_SetTurnaroundTime+0xae>
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	4a25      	ldr	r2, [pc, #148]	@ (8007ac0 <USB_SetTurnaroundTime+0x138>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d202      	bcs.n	8007a36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007a30:	2309      	movs	r3, #9
 8007a32:	617b      	str	r3, [r7, #20]
 8007a34:	e020      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	4a21      	ldr	r2, [pc, #132]	@ (8007ac0 <USB_SetTurnaroundTime+0x138>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d306      	bcc.n	8007a4c <USB_SetTurnaroundTime+0xc4>
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	4a20      	ldr	r2, [pc, #128]	@ (8007ac4 <USB_SetTurnaroundTime+0x13c>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d802      	bhi.n	8007a4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007a46:	2308      	movs	r3, #8
 8007a48:	617b      	str	r3, [r7, #20]
 8007a4a:	e015      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8007ac4 <USB_SetTurnaroundTime+0x13c>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d906      	bls.n	8007a62 <USB_SetTurnaroundTime+0xda>
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	4a1c      	ldr	r2, [pc, #112]	@ (8007ac8 <USB_SetTurnaroundTime+0x140>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d202      	bcs.n	8007a62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007a5c:	2307      	movs	r3, #7
 8007a5e:	617b      	str	r3, [r7, #20]
 8007a60:	e00a      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007a62:	2306      	movs	r3, #6
 8007a64:	617b      	str	r3, [r7, #20]
 8007a66:	e007      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007a68:	79fb      	ldrb	r3, [r7, #7]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d102      	bne.n	8007a74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007a6e:	2309      	movs	r3, #9
 8007a70:	617b      	str	r3, [r7, #20]
 8007a72:	e001      	b.n	8007a78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007a74:	2309      	movs	r3, #9
 8007a76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	68da      	ldr	r2, [r3, #12]
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	029b      	lsls	r3, r3, #10
 8007a8c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007a90:	431a      	orrs	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	371c      	adds	r7, #28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr
 8007aa4:	00d8acbf 	.word	0x00d8acbf
 8007aa8:	00e4e1c0 	.word	0x00e4e1c0
 8007aac:	00f42400 	.word	0x00f42400
 8007ab0:	01067380 	.word	0x01067380
 8007ab4:	011a499f 	.word	0x011a499f
 8007ab8:	01312cff 	.word	0x01312cff
 8007abc:	014ca43f 	.word	0x014ca43f
 8007ac0:	016e3600 	.word	0x016e3600
 8007ac4:	01a6ab1f 	.word	0x01a6ab1f
 8007ac8:	01e84800 	.word	0x01e84800

08007acc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f043 0201 	orr.w	r2, r3, #1
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b083      	sub	sp, #12
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f023 0201 	bic.w	r2, r3, #1
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b2c:	78fb      	ldrb	r3, [r7, #3]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d115      	bne.n	8007b5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007b3e:	200a      	movs	r0, #10
 8007b40:	f7fa fba2 	bl	8002288 <HAL_Delay>
      ms += 10U;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	330a      	adds	r3, #10
 8007b48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f001 f93f 	bl	8008dce <USB_GetMode>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d01e      	beq.n	8007b94 <USB_SetCurrentMode+0x84>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2bc7      	cmp	r3, #199	@ 0xc7
 8007b5a:	d9f0      	bls.n	8007b3e <USB_SetCurrentMode+0x2e>
 8007b5c:	e01a      	b.n	8007b94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b5e:	78fb      	ldrb	r3, [r7, #3]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d115      	bne.n	8007b90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007b70:	200a      	movs	r0, #10
 8007b72:	f7fa fb89 	bl	8002288 <HAL_Delay>
      ms += 10U;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	330a      	adds	r3, #10
 8007b7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f001 f926 	bl	8008dce <USB_GetMode>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d005      	beq.n	8007b94 <USB_SetCurrentMode+0x84>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2bc7      	cmp	r3, #199	@ 0xc7
 8007b8c:	d9f0      	bls.n	8007b70 <USB_SetCurrentMode+0x60>
 8007b8e:	e001      	b.n	8007b94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e005      	b.n	8007ba0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2bc8      	cmp	r3, #200	@ 0xc8
 8007b98:	d101      	bne.n	8007b9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e000      	b.n	8007ba0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ba8:	b084      	sub	sp, #16
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b086      	sub	sp, #24
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007bb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	613b      	str	r3, [r7, #16]
 8007bc6:	e009      	b.n	8007bdc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	3340      	adds	r3, #64	@ 0x40
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	613b      	str	r3, [r7, #16]
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	2b0e      	cmp	r3, #14
 8007be0:	d9f2      	bls.n	8007bc8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007be2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d11c      	bne.n	8007c24 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007bf8:	f043 0302 	orr.w	r3, r3, #2
 8007bfc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c02:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c0e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c1a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	639a      	str	r2, [r3, #56]	@ 0x38
 8007c22:	e00b      	b.n	8007c3c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c28:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c34:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c42:	461a      	mov	r2, r3
 8007c44:	2300      	movs	r3, #0
 8007c46:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c48:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d10d      	bne.n	8007c6c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d104      	bne.n	8007c62 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c58:	2100      	movs	r1, #0
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f968 	bl	8007f30 <USB_SetDevSpeed>
 8007c60:	e008      	b.n	8007c74 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c62:	2101      	movs	r1, #1
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f963 	bl	8007f30 <USB_SetDevSpeed>
 8007c6a:	e003      	b.n	8007c74 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c6c:	2103      	movs	r1, #3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f95e 	bl	8007f30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c74:	2110      	movs	r1, #16
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f8fa 	bl	8007e70 <USB_FlushTxFifo>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f924 	bl	8007ed4 <USB_FlushRxFifo>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ca8:	461a      	mov	r2, r3
 8007caa:	2300      	movs	r3, #0
 8007cac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cba:	2300      	movs	r3, #0
 8007cbc:	613b      	str	r3, [r7, #16]
 8007cbe:	e043      	b.n	8007d48 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cd6:	d118      	bne.n	8007d0a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10a      	bne.n	8007cf4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cea:	461a      	mov	r2, r3
 8007cec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007cf0:	6013      	str	r3, [r2, #0]
 8007cf2:	e013      	b.n	8007d1c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d00:	461a      	mov	r2, r3
 8007d02:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	e008      	b.n	8007d1c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d16:	461a      	mov	r2, r3
 8007d18:	2300      	movs	r3, #0
 8007d1a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	015a      	lsls	r2, r3, #5
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	4413      	add	r3, r2
 8007d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d28:	461a      	mov	r2, r3
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	3301      	adds	r3, #1
 8007d46:	613b      	str	r3, [r7, #16]
 8007d48:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d3b5      	bcc.n	8007cc0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d54:	2300      	movs	r3, #0
 8007d56:	613b      	str	r3, [r7, #16]
 8007d58:	e043      	b.n	8007de2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	015a      	lsls	r2, r3, #5
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	4413      	add	r3, r2
 8007d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d70:	d118      	bne.n	8007da4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10a      	bne.n	8007d8e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d84:	461a      	mov	r2, r3
 8007d86:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007d8a:	6013      	str	r3, [r2, #0]
 8007d8c:	e013      	b.n	8007db6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	4413      	add	r3, r2
 8007d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007da0:	6013      	str	r3, [r2, #0]
 8007da2:	e008      	b.n	8007db6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007db0:	461a      	mov	r2, r3
 8007db2:	2300      	movs	r3, #0
 8007db4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	015a      	lsls	r2, r3, #5
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007dda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	3301      	adds	r3, #1
 8007de0:	613b      	str	r3, [r7, #16]
 8007de2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007de6:	461a      	mov	r2, r3
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d3b5      	bcc.n	8007d5a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e00:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007e0e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d105      	bne.n	8007e24 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	f043 0210 	orr.w	r2, r3, #16
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	699a      	ldr	r2, [r3, #24]
 8007e28:	4b10      	ldr	r3, [pc, #64]	@ (8007e6c <USB_DevInit+0x2c4>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e30:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d005      	beq.n	8007e44 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	f043 0208 	orr.w	r2, r3, #8
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d107      	bne.n	8007e5c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e54:	f043 0304 	orr.w	r3, r3, #4
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e68:	b004      	add	sp, #16
 8007e6a:	4770      	bx	lr
 8007e6c:	803c3800 	.word	0x803c3800

08007e70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	3301      	adds	r3, #1
 8007e82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e8a:	d901      	bls.n	8007e90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e01b      	b.n	8007ec8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	daf2      	bge.n	8007e7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	019b      	lsls	r3, r3, #6
 8007ea0:	f043 0220 	orr.w	r2, r3, #32
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007eb4:	d901      	bls.n	8007eba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e006      	b.n	8007ec8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	f003 0320 	and.w	r3, r3, #32
 8007ec2:	2b20      	cmp	r3, #32
 8007ec4:	d0f0      	beq.n	8007ea8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007eec:	d901      	bls.n	8007ef2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e018      	b.n	8007f24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	daf2      	bge.n	8007ee0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2210      	movs	r2, #16
 8007f02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	3301      	adds	r3, #1
 8007f08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f10:	d901      	bls.n	8007f16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e006      	b.n	8007f24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	f003 0310 	and.w	r3, r3, #16
 8007f1e:	2b10      	cmp	r3, #16
 8007f20:	d0f0      	beq.n	8007f04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	78fb      	ldrb	r3, [r7, #3]
 8007f4a:	68f9      	ldr	r1, [r7, #12]
 8007f4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f50:	4313      	orrs	r3, r2
 8007f52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b087      	sub	sp, #28
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f003 0306 	and.w	r3, r3, #6
 8007f7a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d102      	bne.n	8007f88 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007f82:	2300      	movs	r3, #0
 8007f84:	75fb      	strb	r3, [r7, #23]
 8007f86:	e00a      	b.n	8007f9e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d002      	beq.n	8007f94 <USB_GetDevSpeed+0x32>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2b06      	cmp	r3, #6
 8007f92:	d102      	bne.n	8007f9a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007f94:	2302      	movs	r3, #2
 8007f96:	75fb      	strb	r3, [r7, #23]
 8007f98:	e001      	b.n	8007f9e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007f9a:	230f      	movs	r3, #15
 8007f9c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	371c      	adds	r7, #28
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	785b      	ldrb	r3, [r3, #1]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d13a      	bne.n	800803e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fce:	69da      	ldr	r2, [r3, #28]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	f003 030f 	and.w	r3, r3, #15
 8007fd8:	2101      	movs	r1, #1
 8007fda:	fa01 f303 	lsl.w	r3, r1, r3
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	68f9      	ldr	r1, [r7, #12]
 8007fe2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d155      	bne.n	80080ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	4413      	add	r3, r2
 8008008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	791b      	ldrb	r3, [r3, #4]
 800801a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800801c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	059b      	lsls	r3, r3, #22
 8008022:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008024:	4313      	orrs	r3, r2
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	440a      	add	r2, r1
 800802e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008036:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	e036      	b.n	80080ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008044:	69da      	ldr	r2, [r3, #28]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	f003 030f 	and.w	r3, r3, #15
 800804e:	2101      	movs	r1, #1
 8008050:	fa01 f303 	lsl.w	r3, r1, r3
 8008054:	041b      	lsls	r3, r3, #16
 8008056:	68f9      	ldr	r1, [r7, #12]
 8008058:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800805c:	4313      	orrs	r3, r2
 800805e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4413      	add	r3, r2
 8008068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d11a      	bne.n	80080ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	015a      	lsls	r2, r3, #5
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	4413      	add	r3, r2
 800807e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	791b      	ldrb	r3, [r3, #4]
 8008090:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008092:	430b      	orrs	r3, r1
 8008094:	4313      	orrs	r3, r2
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	0151      	lsls	r1, r2, #5
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	440a      	add	r2, r1
 800809e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
	...

080080bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	785b      	ldrb	r3, [r3, #1]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d161      	bne.n	800819c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080ee:	d11f      	bne.n	8008130 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	0151      	lsls	r1, r2, #5
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	440a      	add	r2, r1
 8008106:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800810a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800810e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	015a      	lsls	r2, r3, #5
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	4413      	add	r3, r2
 8008118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	0151      	lsls	r1, r2, #5
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	440a      	add	r2, r1
 8008126:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800812a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800812e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008136:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	f003 030f 	and.w	r3, r3, #15
 8008140:	2101      	movs	r1, #1
 8008142:	fa01 f303 	lsl.w	r3, r1, r3
 8008146:	b29b      	uxth	r3, r3
 8008148:	43db      	mvns	r3, r3
 800814a:	68f9      	ldr	r1, [r7, #12]
 800814c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008150:	4013      	ands	r3, r2
 8008152:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800815a:	69da      	ldr	r2, [r3, #28]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	f003 030f 	and.w	r3, r3, #15
 8008164:	2101      	movs	r1, #1
 8008166:	fa01 f303 	lsl.w	r3, r1, r3
 800816a:	b29b      	uxth	r3, r3
 800816c:	43db      	mvns	r3, r3
 800816e:	68f9      	ldr	r1, [r7, #12]
 8008170:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008174:	4013      	ands	r3, r2
 8008176:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4413      	add	r3, r2
 8008180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	0159      	lsls	r1, r3, #5
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	440b      	add	r3, r1
 800818e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008192:	4619      	mov	r1, r3
 8008194:	4b35      	ldr	r3, [pc, #212]	@ (800826c <USB_DeactivateEndpoint+0x1b0>)
 8008196:	4013      	ands	r3, r2
 8008198:	600b      	str	r3, [r1, #0]
 800819a:	e060      	b.n	800825e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081b2:	d11f      	bne.n	80081f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	0151      	lsls	r1, r2, #5
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	440a      	add	r2, r1
 80081ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80081d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	015a      	lsls	r2, r3, #5
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	4413      	add	r3, r2
 80081dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	0151      	lsls	r1, r2, #5
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	440a      	add	r2, r1
 80081ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	f003 030f 	and.w	r3, r3, #15
 8008204:	2101      	movs	r1, #1
 8008206:	fa01 f303 	lsl.w	r3, r1, r3
 800820a:	041b      	lsls	r3, r3, #16
 800820c:	43db      	mvns	r3, r3
 800820e:	68f9      	ldr	r1, [r7, #12]
 8008210:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008214:	4013      	ands	r3, r2
 8008216:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800821e:	69da      	ldr	r2, [r3, #28]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	f003 030f 	and.w	r3, r3, #15
 8008228:	2101      	movs	r1, #1
 800822a:	fa01 f303 	lsl.w	r3, r1, r3
 800822e:	041b      	lsls	r3, r3, #16
 8008230:	43db      	mvns	r3, r3
 8008232:	68f9      	ldr	r1, [r7, #12]
 8008234:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008238:	4013      	ands	r3, r2
 800823a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	0159      	lsls	r1, r3, #5
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	440b      	add	r3, r1
 8008252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008256:	4619      	mov	r1, r3
 8008258:	4b05      	ldr	r3, [pc, #20]	@ (8008270 <USB_DeactivateEndpoint+0x1b4>)
 800825a:	4013      	ands	r3, r2
 800825c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	ec337800 	.word	0xec337800
 8008270:	eff37800 	.word	0xeff37800

08008274 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b08a      	sub	sp, #40	@ 0x28
 8008278:	af02      	add	r7, sp, #8
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	4613      	mov	r3, r2
 8008280:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	785b      	ldrb	r3, [r3, #1]
 8008290:	2b01      	cmp	r3, #1
 8008292:	f040 817f 	bne.w	8008594 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d132      	bne.n	8008304 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	69ba      	ldr	r2, [r7, #24]
 80082ae:	0151      	lsls	r1, r2, #5
 80082b0:	69fa      	ldr	r2, [r7, #28]
 80082b2:	440a      	add	r2, r1
 80082b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082b8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80082bc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80082c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	0151      	lsls	r1, r2, #5
 80082d4:	69fa      	ldr	r2, [r7, #28]
 80082d6:	440a      	add	r2, r1
 80082d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80082e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	69ba      	ldr	r2, [r7, #24]
 80082f2:	0151      	lsls	r1, r2, #5
 80082f4:	69fa      	ldr	r2, [r7, #28]
 80082f6:	440a      	add	r2, r1
 80082f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082fc:	0cdb      	lsrs	r3, r3, #19
 80082fe:	04db      	lsls	r3, r3, #19
 8008300:	6113      	str	r3, [r2, #16]
 8008302:	e097      	b.n	8008434 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	4413      	add	r3, r2
 800830c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	0151      	lsls	r1, r2, #5
 8008316:	69fa      	ldr	r2, [r7, #28]
 8008318:	440a      	add	r2, r1
 800831a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800831e:	0cdb      	lsrs	r3, r3, #19
 8008320:	04db      	lsls	r3, r3, #19
 8008322:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	0151      	lsls	r1, r2, #5
 8008336:	69fa      	ldr	r2, [r7, #28]
 8008338:	440a      	add	r2, r1
 800833a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800833e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008342:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008346:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d11a      	bne.n	8008384 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	691a      	ldr	r2, [r3, #16]
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	429a      	cmp	r2, r3
 8008358:	d903      	bls.n	8008362 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	689a      	ldr	r2, [r3, #8]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	015a      	lsls	r2, r3, #5
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	4413      	add	r3, r2
 800836a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	69ba      	ldr	r2, [r7, #24]
 8008372:	0151      	lsls	r1, r2, #5
 8008374:	69fa      	ldr	r2, [r7, #28]
 8008376:	440a      	add	r2, r1
 8008378:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800837c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008380:	6113      	str	r3, [r2, #16]
 8008382:	e044      	b.n	800840e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	691a      	ldr	r2, [r3, #16]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	4413      	add	r3, r2
 800838e:	1e5a      	subs	r2, r3, #1
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	fbb2 f3f3 	udiv	r3, r2, r3
 8008398:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083a6:	691a      	ldr	r2, [r3, #16]
 80083a8:	8afb      	ldrh	r3, [r7, #22]
 80083aa:	04d9      	lsls	r1, r3, #19
 80083ac:	4ba4      	ldr	r3, [pc, #656]	@ (8008640 <USB_EPStartXfer+0x3cc>)
 80083ae:	400b      	ands	r3, r1
 80083b0:	69b9      	ldr	r1, [r7, #24]
 80083b2:	0148      	lsls	r0, r1, #5
 80083b4:	69f9      	ldr	r1, [r7, #28]
 80083b6:	4401      	add	r1, r0
 80083b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80083bc:	4313      	orrs	r3, r2
 80083be:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	791b      	ldrb	r3, [r3, #4]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d122      	bne.n	800840e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	69ba      	ldr	r2, [r7, #24]
 80083d8:	0151      	lsls	r1, r2, #5
 80083da:	69fa      	ldr	r2, [r7, #28]
 80083dc:	440a      	add	r2, r1
 80083de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083e2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80083e6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083f4:	691a      	ldr	r2, [r3, #16]
 80083f6:	8afb      	ldrh	r3, [r7, #22]
 80083f8:	075b      	lsls	r3, r3, #29
 80083fa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80083fe:	69b9      	ldr	r1, [r7, #24]
 8008400:	0148      	lsls	r0, r1, #5
 8008402:	69f9      	ldr	r1, [r7, #28]
 8008404:	4401      	add	r1, r0
 8008406:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800840a:	4313      	orrs	r3, r2
 800840c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	015a      	lsls	r2, r3, #5
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	4413      	add	r3, r2
 8008416:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800841a:	691a      	ldr	r2, [r3, #16]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008424:	69b9      	ldr	r1, [r7, #24]
 8008426:	0148      	lsls	r0, r1, #5
 8008428:	69f9      	ldr	r1, [r7, #28]
 800842a:	4401      	add	r1, r0
 800842c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008430:	4313      	orrs	r3, r2
 8008432:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008434:	79fb      	ldrb	r3, [r7, #7]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d14b      	bne.n	80084d2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	69db      	ldr	r3, [r3, #28]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d009      	beq.n	8008456 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800844e:	461a      	mov	r2, r3
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	791b      	ldrb	r3, [r3, #4]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d128      	bne.n	80084b0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800846a:	2b00      	cmp	r3, #0
 800846c:	d110      	bne.n	8008490 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	015a      	lsls	r2, r3, #5
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	4413      	add	r3, r2
 8008476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	69ba      	ldr	r2, [r7, #24]
 800847e:	0151      	lsls	r1, r2, #5
 8008480:	69fa      	ldr	r2, [r7, #28]
 8008482:	440a      	add	r2, r1
 8008484:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008488:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800848c:	6013      	str	r3, [r2, #0]
 800848e:	e00f      	b.n	80084b0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	4413      	add	r3, r2
 8008498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	69ba      	ldr	r2, [r7, #24]
 80084a0:	0151      	lsls	r1, r2, #5
 80084a2:	69fa      	ldr	r2, [r7, #28]
 80084a4:	440a      	add	r2, r1
 80084a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084ae:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	015a      	lsls	r2, r3, #5
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	69ba      	ldr	r2, [r7, #24]
 80084c0:	0151      	lsls	r1, r2, #5
 80084c2:	69fa      	ldr	r2, [r7, #28]
 80084c4:	440a      	add	r2, r1
 80084c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084ca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80084ce:	6013      	str	r3, [r2, #0]
 80084d0:	e166      	b.n	80087a0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	015a      	lsls	r2, r3, #5
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	4413      	add	r3, r2
 80084da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	69ba      	ldr	r2, [r7, #24]
 80084e2:	0151      	lsls	r1, r2, #5
 80084e4:	69fa      	ldr	r2, [r7, #28]
 80084e6:	440a      	add	r2, r1
 80084e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084ec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80084f0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	791b      	ldrb	r3, [r3, #4]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d015      	beq.n	8008526 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f000 814e 	beq.w	80087a0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800850a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	f003 030f 	and.w	r3, r3, #15
 8008514:	2101      	movs	r1, #1
 8008516:	fa01 f303 	lsl.w	r3, r1, r3
 800851a:	69f9      	ldr	r1, [r7, #28]
 800851c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008520:	4313      	orrs	r3, r2
 8008522:	634b      	str	r3, [r1, #52]	@ 0x34
 8008524:	e13c      	b.n	80087a0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008532:	2b00      	cmp	r3, #0
 8008534:	d110      	bne.n	8008558 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	4413      	add	r3, r2
 800853e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	69ba      	ldr	r2, [r7, #24]
 8008546:	0151      	lsls	r1, r2, #5
 8008548:	69fa      	ldr	r2, [r7, #28]
 800854a:	440a      	add	r2, r1
 800854c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008550:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	e00f      	b.n	8008578 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	69ba      	ldr	r2, [r7, #24]
 8008568:	0151      	lsls	r1, r2, #5
 800856a:	69fa      	ldr	r2, [r7, #28]
 800856c:	440a      	add	r2, r1
 800856e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008576:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	68d9      	ldr	r1, [r3, #12]
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	781a      	ldrb	r2, [r3, #0]
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	b298      	uxth	r0, r3
 8008586:	79fb      	ldrb	r3, [r7, #7]
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	4603      	mov	r3, r0
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 f9b9 	bl	8008904 <USB_WritePacket>
 8008592:	e105      	b.n	80087a0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	4413      	add	r3, r2
 800859c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	69ba      	ldr	r2, [r7, #24]
 80085a4:	0151      	lsls	r1, r2, #5
 80085a6:	69fa      	ldr	r2, [r7, #28]
 80085a8:	440a      	add	r2, r1
 80085aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085ae:	0cdb      	lsrs	r3, r3, #19
 80085b0:	04db      	lsls	r3, r3, #19
 80085b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	69ba      	ldr	r2, [r7, #24]
 80085c4:	0151      	lsls	r1, r2, #5
 80085c6:	69fa      	ldr	r2, [r7, #28]
 80085c8:	440a      	add	r2, r1
 80085ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085ce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80085d2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80085d6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d132      	bne.n	8008644 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d003      	beq.n	80085ee <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	689a      	ldr	r2, [r3, #8]
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	689a      	ldr	r2, [r3, #8]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008602:	691a      	ldr	r2, [r3, #16]
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800860c:	69b9      	ldr	r1, [r7, #24]
 800860e:	0148      	lsls	r0, r1, #5
 8008610:	69f9      	ldr	r1, [r7, #28]
 8008612:	4401      	add	r1, r0
 8008614:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008618:	4313      	orrs	r3, r2
 800861a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	4413      	add	r3, r2
 8008624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	69ba      	ldr	r2, [r7, #24]
 800862c:	0151      	lsls	r1, r2, #5
 800862e:	69fa      	ldr	r2, [r7, #28]
 8008630:	440a      	add	r2, r1
 8008632:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008636:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800863a:	6113      	str	r3, [r2, #16]
 800863c:	e062      	b.n	8008704 <USB_EPStartXfer+0x490>
 800863e:	bf00      	nop
 8008640:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d123      	bne.n	8008694 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	4413      	add	r3, r2
 8008654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008658:	691a      	ldr	r2, [r3, #16]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008662:	69b9      	ldr	r1, [r7, #24]
 8008664:	0148      	lsls	r0, r1, #5
 8008666:	69f9      	ldr	r1, [r7, #28]
 8008668:	4401      	add	r1, r0
 800866a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800866e:	4313      	orrs	r3, r2
 8008670:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	4413      	add	r3, r2
 800867a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	69ba      	ldr	r2, [r7, #24]
 8008682:	0151      	lsls	r1, r2, #5
 8008684:	69fa      	ldr	r2, [r7, #28]
 8008686:	440a      	add	r2, r1
 8008688:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800868c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008690:	6113      	str	r3, [r2, #16]
 8008692:	e037      	b.n	8008704 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	691a      	ldr	r2, [r3, #16]
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	4413      	add	r3, r2
 800869e:	1e5a      	subs	r2, r3, #1
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086a8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	8afa      	ldrh	r2, [r7, #22]
 80086b0:	fb03 f202 	mul.w	r2, r3, r2
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086c4:	691a      	ldr	r2, [r3, #16]
 80086c6:	8afb      	ldrh	r3, [r7, #22]
 80086c8:	04d9      	lsls	r1, r3, #19
 80086ca:	4b38      	ldr	r3, [pc, #224]	@ (80087ac <USB_EPStartXfer+0x538>)
 80086cc:	400b      	ands	r3, r1
 80086ce:	69b9      	ldr	r1, [r7, #24]
 80086d0:	0148      	lsls	r0, r1, #5
 80086d2:	69f9      	ldr	r1, [r7, #28]
 80086d4:	4401      	add	r1, r0
 80086d6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80086da:	4313      	orrs	r3, r2
 80086dc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	015a      	lsls	r2, r3, #5
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	4413      	add	r3, r2
 80086e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ea:	691a      	ldr	r2, [r3, #16]
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	6a1b      	ldr	r3, [r3, #32]
 80086f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086f4:	69b9      	ldr	r1, [r7, #24]
 80086f6:	0148      	lsls	r0, r1, #5
 80086f8:	69f9      	ldr	r1, [r7, #28]
 80086fa:	4401      	add	r1, r0
 80086fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008700:	4313      	orrs	r3, r2
 8008702:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008704:	79fb      	ldrb	r3, [r7, #7]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d10d      	bne.n	8008726 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d009      	beq.n	8008726 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	68d9      	ldr	r1, [r3, #12]
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	015a      	lsls	r2, r3, #5
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	4413      	add	r3, r2
 800871e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008722:	460a      	mov	r2, r1
 8008724:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	791b      	ldrb	r3, [r3, #4]
 800872a:	2b01      	cmp	r3, #1
 800872c:	d128      	bne.n	8008780 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800873a:	2b00      	cmp	r3, #0
 800873c:	d110      	bne.n	8008760 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	015a      	lsls	r2, r3, #5
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	4413      	add	r3, r2
 8008746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	69ba      	ldr	r2, [r7, #24]
 800874e:	0151      	lsls	r1, r2, #5
 8008750:	69fa      	ldr	r2, [r7, #28]
 8008752:	440a      	add	r2, r1
 8008754:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008758:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800875c:	6013      	str	r3, [r2, #0]
 800875e:	e00f      	b.n	8008780 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	015a      	lsls	r2, r3, #5
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	4413      	add	r3, r2
 8008768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	69ba      	ldr	r2, [r7, #24]
 8008770:	0151      	lsls	r1, r2, #5
 8008772:	69fa      	ldr	r2, [r7, #28]
 8008774:	440a      	add	r2, r1
 8008776:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800877a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800877e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	4413      	add	r3, r2
 8008788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	69ba      	ldr	r2, [r7, #24]
 8008790:	0151      	lsls	r1, r2, #5
 8008792:	69fa      	ldr	r2, [r7, #28]
 8008794:	440a      	add	r2, r1
 8008796:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800879a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800879e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3720      	adds	r7, #32
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	1ff80000 	.word	0x1ff80000

080087b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b087      	sub	sp, #28
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80087be:	2300      	movs	r3, #0
 80087c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	785b      	ldrb	r3, [r3, #1]
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d14a      	bne.n	8008864 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	015a      	lsls	r2, r3, #5
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	4413      	add	r3, r2
 80087d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087e6:	f040 8086 	bne.w	80088f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	7812      	ldrb	r2, [r2, #0]
 80087fe:	0151      	lsls	r1, r2, #5
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	440a      	add	r2, r1
 8008804:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008808:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800880c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	4413      	add	r3, r2
 8008818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	7812      	ldrb	r2, [r2, #0]
 8008822:	0151      	lsls	r1, r2, #5
 8008824:	693a      	ldr	r2, [r7, #16]
 8008826:	440a      	add	r2, r1
 8008828:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800882c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008830:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3301      	adds	r3, #1
 8008836:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800883e:	4293      	cmp	r3, r2
 8008840:	d902      	bls.n	8008848 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	75fb      	strb	r3, [r7, #23]
          break;
 8008846:	e056      	b.n	80088f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	015a      	lsls	r2, r3, #5
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	4413      	add	r3, r2
 8008852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800885c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008860:	d0e7      	beq.n	8008832 <USB_EPStopXfer+0x82>
 8008862:	e048      	b.n	80088f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	015a      	lsls	r2, r3, #5
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	4413      	add	r3, r2
 800886e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008878:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800887c:	d13b      	bne.n	80088f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	7812      	ldrb	r2, [r2, #0]
 8008892:	0151      	lsls	r1, r2, #5
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	440a      	add	r2, r1
 8008898:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800889c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80088a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	015a      	lsls	r2, r3, #5
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	7812      	ldrb	r2, [r2, #0]
 80088b6:	0151      	lsls	r1, r2, #5
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	440a      	add	r2, r1
 80088bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80088c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3301      	adds	r3, #1
 80088ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d902      	bls.n	80088dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	75fb      	strb	r3, [r7, #23]
          break;
 80088da:	e00c      	b.n	80088f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	015a      	lsls	r2, r3, #5
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	4413      	add	r3, r2
 80088e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088f4:	d0e7      	beq.n	80088c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	371c      	adds	r7, #28
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008904:	b480      	push	{r7}
 8008906:	b089      	sub	sp, #36	@ 0x24
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	4611      	mov	r1, r2
 8008910:	461a      	mov	r2, r3
 8008912:	460b      	mov	r3, r1
 8008914:	71fb      	strb	r3, [r7, #7]
 8008916:	4613      	mov	r3, r2
 8008918:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008922:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008926:	2b00      	cmp	r3, #0
 8008928:	d123      	bne.n	8008972 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800892a:	88bb      	ldrh	r3, [r7, #4]
 800892c:	3303      	adds	r3, #3
 800892e:	089b      	lsrs	r3, r3, #2
 8008930:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008932:	2300      	movs	r3, #0
 8008934:	61bb      	str	r3, [r7, #24]
 8008936:	e018      	b.n	800896a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008938:	79fb      	ldrb	r3, [r7, #7]
 800893a:	031a      	lsls	r2, r3, #12
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	4413      	add	r3, r2
 8008940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008944:	461a      	mov	r2, r3
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	3301      	adds	r3, #1
 8008950:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	3301      	adds	r3, #1
 8008956:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	3301      	adds	r3, #1
 800895c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	3301      	adds	r3, #1
 8008962:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	3301      	adds	r3, #1
 8008968:	61bb      	str	r3, [r7, #24]
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	429a      	cmp	r2, r3
 8008970:	d3e2      	bcc.n	8008938 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3724      	adds	r7, #36	@ 0x24
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008980:	b480      	push	{r7}
 8008982:	b08b      	sub	sp, #44	@ 0x2c
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	4613      	mov	r3, r2
 800898c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008996:	88fb      	ldrh	r3, [r7, #6]
 8008998:	089b      	lsrs	r3, r3, #2
 800899a:	b29b      	uxth	r3, r3
 800899c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800899e:	88fb      	ldrh	r3, [r7, #6]
 80089a0:	f003 0303 	and.w	r3, r3, #3
 80089a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80089a6:	2300      	movs	r3, #0
 80089a8:	623b      	str	r3, [r7, #32]
 80089aa:	e014      	b.n	80089d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80089b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ba:	3301      	adds	r3, #1
 80089bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80089be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c0:	3301      	adds	r3, #1
 80089c2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80089c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c6:	3301      	adds	r3, #1
 80089c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80089ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089cc:	3301      	adds	r3, #1
 80089ce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	3301      	adds	r3, #1
 80089d4:	623b      	str	r3, [r7, #32]
 80089d6:	6a3a      	ldr	r2, [r7, #32]
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d3e6      	bcc.n	80089ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80089de:	8bfb      	ldrh	r3, [r7, #30]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d01e      	beq.n	8008a22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80089e4:	2300      	movs	r3, #0
 80089e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089ee:	461a      	mov	r2, r3
 80089f0:	f107 0310 	add.w	r3, r7, #16
 80089f4:	6812      	ldr	r2, [r2, #0]
 80089f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	fa22 f303 	lsr.w	r3, r2, r3
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a08:	701a      	strb	r2, [r3, #0]
      i++;
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a12:	3301      	adds	r3, #1
 8008a14:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008a16:	8bfb      	ldrh	r3, [r7, #30]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a1c:	8bfb      	ldrh	r3, [r7, #30]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1ea      	bne.n	80089f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	372c      	adds	r7, #44	@ 0x2c
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	785b      	ldrb	r3, [r3, #1]
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d12c      	bne.n	8008aa6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	db12      	blt.n	8008a84 <USB_EPSetStall+0x54>
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00f      	beq.n	8008a84 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	015a      	lsls	r2, r3, #5
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	0151      	lsls	r1, r2, #5
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	440a      	add	r2, r1
 8008a7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a7e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a82:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	0151      	lsls	r1, r2, #5
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	440a      	add	r2, r1
 8008a9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008aa2:	6013      	str	r3, [r2, #0]
 8008aa4:	e02b      	b.n	8008afe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	db12      	blt.n	8008ade <USB_EPSetStall+0xae>
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00f      	beq.n	8008ade <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68ba      	ldr	r2, [r7, #8]
 8008ace:	0151      	lsls	r1, r2, #5
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	440a      	add	r2, r1
 8008ad4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ad8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008adc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	0151      	lsls	r1, r2, #5
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	440a      	add	r2, r1
 8008af4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008af8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008afc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3714      	adds	r7, #20
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	785b      	ldrb	r3, [r3, #1]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d128      	bne.n	8008b7a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	0151      	lsls	r1, r2, #5
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	440a      	add	r2, r1
 8008b3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	791b      	ldrb	r3, [r3, #4]
 8008b4c:	2b03      	cmp	r3, #3
 8008b4e:	d003      	beq.n	8008b58 <USB_EPClearStall+0x4c>
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	791b      	ldrb	r3, [r3, #4]
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d138      	bne.n	8008bca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	0151      	lsls	r1, r2, #5
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	440a      	add	r2, r1
 8008b6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b76:	6013      	str	r3, [r2, #0]
 8008b78:	e027      	b.n	8008bca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	015a      	lsls	r2, r3, #5
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	4413      	add	r3, r2
 8008b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	0151      	lsls	r1, r2, #5
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	440a      	add	r2, r1
 8008b90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b94:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	791b      	ldrb	r3, [r3, #4]
 8008b9e:	2b03      	cmp	r3, #3
 8008ba0:	d003      	beq.n	8008baa <USB_EPClearStall+0x9e>
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	791b      	ldrb	r3, [r3, #4]
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d10f      	bne.n	8008bca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	015a      	lsls	r2, r3, #5
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	0151      	lsls	r1, r2, #5
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	440a      	add	r2, r1
 8008bc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bc8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3714      	adds	r7, #20
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	460b      	mov	r3, r1
 8008be2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bf6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008bfa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	78fb      	ldrb	r3, [r7, #3]
 8008c06:	011b      	lsls	r3, r3, #4
 8008c08:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008c0c:	68f9      	ldr	r1, [r7, #12]
 8008c0e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c12:	4313      	orrs	r3, r2
 8008c14:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008c3e:	f023 0303 	bic.w	r3, r3, #3
 8008c42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c52:	f023 0302 	bic.w	r3, r3, #2
 8008c56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b085      	sub	sp, #20
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008c80:	f023 0303 	bic.w	r3, r3, #3
 8008c84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c94:	f043 0302 	orr.w	r3, r3, #2
 8008c98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008cce:	b480      	push	{r7}
 8008cd0:	b085      	sub	sp, #20
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cea:	69db      	ldr	r3, [r3, #28]
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	4013      	ands	r3, r2
 8008cf0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	0c1b      	lsrs	r3, r3, #16
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b085      	sub	sp, #20
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d14:	699b      	ldr	r3, [r3, #24]
 8008d16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d1e:	69db      	ldr	r3, [r3, #28]
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	4013      	ands	r3, r2
 8008d24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	b29b      	uxth	r3, r3
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b085      	sub	sp, #20
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	460b      	mov	r3, r1
 8008d40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008d46:	78fb      	ldrb	r3, [r7, #3]
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	4013      	ands	r3, r2
 8008d62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d64:	68bb      	ldr	r3, [r7, #8]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b087      	sub	sp, #28
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d94:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008d96:	78fb      	ldrb	r3, [r7, #3]
 8008d98:	f003 030f 	and.w	r3, r3, #15
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008da2:	01db      	lsls	r3, r3, #7
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	693a      	ldr	r2, [r7, #16]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008dac:	78fb      	ldrb	r3, [r7, #3]
 8008dae:	015a      	lsls	r2, r3, #5
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	4413      	add	r3, r2
 8008db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	693a      	ldr	r2, [r7, #16]
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008dc0:	68bb      	ldr	r3, [r7, #8]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	371c      	adds	r7, #28
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b083      	sub	sp, #12
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	f003 0301 	and.w	r3, r3, #1
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	370c      	adds	r7, #12
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008dea:	b480      	push	{r7}
 8008dec:	b085      	sub	sp, #20
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e04:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008e08:	f023 0307 	bic.w	r3, r3, #7
 8008e0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	607a      	str	r2, [r7, #4]
 8008e3c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	333c      	adds	r3, #60	@ 0x3c
 8008e46:	3304      	adds	r3, #4
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	4a26      	ldr	r2, [pc, #152]	@ (8008ee8 <USB_EP0_OutStart+0xb8>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d90a      	bls.n	8008e6a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e64:	d101      	bne.n	8008e6a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	e037      	b.n	8008eda <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e70:	461a      	mov	r2, r3
 8008e72:	2300      	movs	r3, #0
 8008e74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e98:	f043 0318 	orr.w	r3, r3, #24
 8008e9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008eac:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008eb0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008eb2:	7afb      	ldrb	r3, [r7, #11]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d10f      	bne.n	8008ed8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ed2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008ed6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	371c      	adds	r7, #28
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	4f54300a 	.word	0x4f54300a

08008eec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	3301      	adds	r3, #1
 8008efc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f04:	d901      	bls.n	8008f0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f06:	2303      	movs	r3, #3
 8008f08:	e01b      	b.n	8008f42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	daf2      	bge.n	8008ef8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	f043 0201 	orr.w	r2, r3, #1
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	3301      	adds	r3, #1
 8008f26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f2e:	d901      	bls.n	8008f34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e006      	b.n	8008f42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	f003 0301 	and.w	r3, r3, #1
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d0f0      	beq.n	8008f22 <USB_CoreReset+0x36>

  return HAL_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3714      	adds	r7, #20
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
	...

08008f50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008f5c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008f60:	f002 fc94 	bl	800b88c <USBD_static_malloc>
 8008f64:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d109      	bne.n	8008f80 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	32b0      	adds	r2, #176	@ 0xb0
 8008f76:	2100      	movs	r1, #0
 8008f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	e0d4      	b.n	800912a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008f80:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008f84:	2100      	movs	r1, #0
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f003 fa55 	bl	800c436 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	32b0      	adds	r2, #176	@ 0xb0
 8008f96:	68f9      	ldr	r1, [r7, #12]
 8008f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	32b0      	adds	r2, #176	@ 0xb0
 8008fa6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	7c1b      	ldrb	r3, [r3, #16]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d138      	bne.n	800902a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008fb8:	4b5e      	ldr	r3, [pc, #376]	@ (8009134 <USBD_CDC_Init+0x1e4>)
 8008fba:	7819      	ldrb	r1, [r3, #0]
 8008fbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f002 fb3f 	bl	800b646 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008fc8:	4b5a      	ldr	r3, [pc, #360]	@ (8009134 <USBD_CDC_Init+0x1e4>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	f003 020f 	and.w	r2, r3, #15
 8008fd0:	6879      	ldr	r1, [r7, #4]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	440b      	add	r3, r1
 8008fdc:	3324      	adds	r3, #36	@ 0x24
 8008fde:	2201      	movs	r2, #1
 8008fe0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008fe2:	4b55      	ldr	r3, [pc, #340]	@ (8009138 <USBD_CDC_Init+0x1e8>)
 8008fe4:	7819      	ldrb	r1, [r3, #0]
 8008fe6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008fea:	2202      	movs	r2, #2
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f002 fb2a 	bl	800b646 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008ff2:	4b51      	ldr	r3, [pc, #324]	@ (8009138 <USBD_CDC_Init+0x1e8>)
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	f003 020f 	and.w	r2, r3, #15
 8008ffa:	6879      	ldr	r1, [r7, #4]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	440b      	add	r3, r1
 8009006:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800900a:	2201      	movs	r2, #1
 800900c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800900e:	4b4b      	ldr	r3, [pc, #300]	@ (800913c <USBD_CDC_Init+0x1ec>)
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	f003 020f 	and.w	r2, r3, #15
 8009016:	6879      	ldr	r1, [r7, #4]
 8009018:	4613      	mov	r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	4413      	add	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	440b      	add	r3, r1
 8009022:	3326      	adds	r3, #38	@ 0x26
 8009024:	2210      	movs	r2, #16
 8009026:	801a      	strh	r2, [r3, #0]
 8009028:	e035      	b.n	8009096 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800902a:	4b42      	ldr	r3, [pc, #264]	@ (8009134 <USBD_CDC_Init+0x1e4>)
 800902c:	7819      	ldrb	r1, [r3, #0]
 800902e:	2340      	movs	r3, #64	@ 0x40
 8009030:	2202      	movs	r2, #2
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f002 fb07 	bl	800b646 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009038:	4b3e      	ldr	r3, [pc, #248]	@ (8009134 <USBD_CDC_Init+0x1e4>)
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	f003 020f 	and.w	r2, r3, #15
 8009040:	6879      	ldr	r1, [r7, #4]
 8009042:	4613      	mov	r3, r2
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	4413      	add	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	440b      	add	r3, r1
 800904c:	3324      	adds	r3, #36	@ 0x24
 800904e:	2201      	movs	r2, #1
 8009050:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009052:	4b39      	ldr	r3, [pc, #228]	@ (8009138 <USBD_CDC_Init+0x1e8>)
 8009054:	7819      	ldrb	r1, [r3, #0]
 8009056:	2340      	movs	r3, #64	@ 0x40
 8009058:	2202      	movs	r2, #2
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f002 faf3 	bl	800b646 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009060:	4b35      	ldr	r3, [pc, #212]	@ (8009138 <USBD_CDC_Init+0x1e8>)
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	f003 020f 	and.w	r2, r3, #15
 8009068:	6879      	ldr	r1, [r7, #4]
 800906a:	4613      	mov	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	440b      	add	r3, r1
 8009074:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009078:	2201      	movs	r2, #1
 800907a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800907c:	4b2f      	ldr	r3, [pc, #188]	@ (800913c <USBD_CDC_Init+0x1ec>)
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	f003 020f 	and.w	r2, r3, #15
 8009084:	6879      	ldr	r1, [r7, #4]
 8009086:	4613      	mov	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	440b      	add	r3, r1
 8009090:	3326      	adds	r3, #38	@ 0x26
 8009092:	2210      	movs	r2, #16
 8009094:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009096:	4b29      	ldr	r3, [pc, #164]	@ (800913c <USBD_CDC_Init+0x1ec>)
 8009098:	7819      	ldrb	r1, [r3, #0]
 800909a:	2308      	movs	r3, #8
 800909c:	2203      	movs	r2, #3
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f002 fad1 	bl	800b646 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80090a4:	4b25      	ldr	r3, [pc, #148]	@ (800913c <USBD_CDC_Init+0x1ec>)
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	f003 020f 	and.w	r2, r3, #15
 80090ac:	6879      	ldr	r1, [r7, #4]
 80090ae:	4613      	mov	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4413      	add	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	440b      	add	r3, r1
 80090b8:	3324      	adds	r3, #36	@ 0x24
 80090ba:	2201      	movs	r2, #1
 80090bc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	33b0      	adds	r3, #176	@ 0xb0
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	4413      	add	r3, r2
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d101      	bne.n	80090f8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80090f4:	2302      	movs	r3, #2
 80090f6:	e018      	b.n	800912a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	7c1b      	ldrb	r3, [r3, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10a      	bne.n	8009116 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009100:	4b0d      	ldr	r3, [pc, #52]	@ (8009138 <USBD_CDC_Init+0x1e8>)
 8009102:	7819      	ldrb	r1, [r3, #0]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800910a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f002 fb88 	bl	800b824 <USBD_LL_PrepareReceive>
 8009114:	e008      	b.n	8009128 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009116:	4b08      	ldr	r3, [pc, #32]	@ (8009138 <USBD_CDC_Init+0x1e8>)
 8009118:	7819      	ldrb	r1, [r3, #0]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009120:	2340      	movs	r3, #64	@ 0x40
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f002 fb7e 	bl	800b824 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	20000097 	.word	0x20000097
 8009138:	20000098 	.word	0x20000098
 800913c:	20000099 	.word	0x20000099

08009140 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800914c:	4b3a      	ldr	r3, [pc, #232]	@ (8009238 <USBD_CDC_DeInit+0xf8>)
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f002 fa9d 	bl	800b692 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009158:	4b37      	ldr	r3, [pc, #220]	@ (8009238 <USBD_CDC_DeInit+0xf8>)
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	f003 020f 	and.w	r2, r3, #15
 8009160:	6879      	ldr	r1, [r7, #4]
 8009162:	4613      	mov	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	440b      	add	r3, r1
 800916c:	3324      	adds	r3, #36	@ 0x24
 800916e:	2200      	movs	r2, #0
 8009170:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009172:	4b32      	ldr	r3, [pc, #200]	@ (800923c <USBD_CDC_DeInit+0xfc>)
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	4619      	mov	r1, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f002 fa8a 	bl	800b692 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800917e:	4b2f      	ldr	r3, [pc, #188]	@ (800923c <USBD_CDC_DeInit+0xfc>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	f003 020f 	and.w	r2, r3, #15
 8009186:	6879      	ldr	r1, [r7, #4]
 8009188:	4613      	mov	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	440b      	add	r3, r1
 8009192:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009196:	2200      	movs	r2, #0
 8009198:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800919a:	4b29      	ldr	r3, [pc, #164]	@ (8009240 <USBD_CDC_DeInit+0x100>)
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	4619      	mov	r1, r3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f002 fa76 	bl	800b692 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80091a6:	4b26      	ldr	r3, [pc, #152]	@ (8009240 <USBD_CDC_DeInit+0x100>)
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	f003 020f 	and.w	r2, r3, #15
 80091ae:	6879      	ldr	r1, [r7, #4]
 80091b0:	4613      	mov	r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	440b      	add	r3, r1
 80091ba:	3324      	adds	r3, #36	@ 0x24
 80091bc:	2200      	movs	r2, #0
 80091be:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80091c0:	4b1f      	ldr	r3, [pc, #124]	@ (8009240 <USBD_CDC_DeInit+0x100>)
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	f003 020f 	and.w	r2, r3, #15
 80091c8:	6879      	ldr	r1, [r7, #4]
 80091ca:	4613      	mov	r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	4413      	add	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	440b      	add	r3, r1
 80091d4:	3326      	adds	r3, #38	@ 0x26
 80091d6:	2200      	movs	r2, #0
 80091d8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	32b0      	adds	r2, #176	@ 0xb0
 80091e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d01f      	beq.n	800922c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	33b0      	adds	r3, #176	@ 0xb0
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4413      	add	r3, r2
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	32b0      	adds	r2, #176	@ 0xb0
 800920a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920e:	4618      	mov	r0, r3
 8009210:	f002 fb4a 	bl	800b8a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	32b0      	adds	r2, #176	@ 0xb0
 800921e:	2100      	movs	r1, #0
 8009220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20000097 	.word	0x20000097
 800923c:	20000098 	.word	0x20000098
 8009240:	20000099 	.word	0x20000099

08009244 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b086      	sub	sp, #24
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	32b0      	adds	r2, #176	@ 0xb0
 8009258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800925c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800925e:	2300      	movs	r3, #0
 8009260:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009262:	2300      	movs	r3, #0
 8009264:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009266:	2300      	movs	r3, #0
 8009268:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009270:	2303      	movs	r3, #3
 8009272:	e0bf      	b.n	80093f4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800927c:	2b00      	cmp	r3, #0
 800927e:	d050      	beq.n	8009322 <USBD_CDC_Setup+0xde>
 8009280:	2b20      	cmp	r3, #32
 8009282:	f040 80af 	bne.w	80093e4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	88db      	ldrh	r3, [r3, #6]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d03a      	beq.n	8009304 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	b25b      	sxtb	r3, r3
 8009294:	2b00      	cmp	r3, #0
 8009296:	da1b      	bge.n	80092d0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	33b0      	adds	r3, #176	@ 0xb0
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4413      	add	r3, r2
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80092ae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80092b0:	683a      	ldr	r2, [r7, #0]
 80092b2:	88d2      	ldrh	r2, [r2, #6]
 80092b4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	88db      	ldrh	r3, [r3, #6]
 80092ba:	2b07      	cmp	r3, #7
 80092bc:	bf28      	it	cs
 80092be:	2307      	movcs	r3, #7
 80092c0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	89fa      	ldrh	r2, [r7, #14]
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 fd93 	bl	800adf4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80092ce:	e090      	b.n	80093f2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	785a      	ldrb	r2, [r3, #1]
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	88db      	ldrh	r3, [r3, #6]
 80092de:	2b3f      	cmp	r3, #63	@ 0x3f
 80092e0:	d803      	bhi.n	80092ea <USBD_CDC_Setup+0xa6>
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	88db      	ldrh	r3, [r3, #6]
 80092e6:	b2da      	uxtb	r2, r3
 80092e8:	e000      	b.n	80092ec <USBD_CDC_Setup+0xa8>
 80092ea:	2240      	movs	r2, #64	@ 0x40
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80092f2:	6939      	ldr	r1, [r7, #16]
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80092fa:	461a      	mov	r2, r3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f001 fda5 	bl	800ae4c <USBD_CtlPrepareRx>
      break;
 8009302:	e076      	b.n	80093f2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	33b0      	adds	r3, #176	@ 0xb0
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	7850      	ldrb	r0, [r2, #1]
 800931a:	2200      	movs	r2, #0
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	4798      	blx	r3
      break;
 8009320:	e067      	b.n	80093f2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	785b      	ldrb	r3, [r3, #1]
 8009326:	2b0b      	cmp	r3, #11
 8009328:	d851      	bhi.n	80093ce <USBD_CDC_Setup+0x18a>
 800932a:	a201      	add	r2, pc, #4	@ (adr r2, 8009330 <USBD_CDC_Setup+0xec>)
 800932c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009330:	08009361 	.word	0x08009361
 8009334:	080093dd 	.word	0x080093dd
 8009338:	080093cf 	.word	0x080093cf
 800933c:	080093cf 	.word	0x080093cf
 8009340:	080093cf 	.word	0x080093cf
 8009344:	080093cf 	.word	0x080093cf
 8009348:	080093cf 	.word	0x080093cf
 800934c:	080093cf 	.word	0x080093cf
 8009350:	080093cf 	.word	0x080093cf
 8009354:	080093cf 	.word	0x080093cf
 8009358:	0800938b 	.word	0x0800938b
 800935c:	080093b5 	.word	0x080093b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009366:	b2db      	uxtb	r3, r3
 8009368:	2b03      	cmp	r3, #3
 800936a:	d107      	bne.n	800937c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800936c:	f107 030a 	add.w	r3, r7, #10
 8009370:	2202      	movs	r2, #2
 8009372:	4619      	mov	r1, r3
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f001 fd3d 	bl	800adf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800937a:	e032      	b.n	80093e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f001 fcbb 	bl	800acfa <USBD_CtlError>
            ret = USBD_FAIL;
 8009384:	2303      	movs	r3, #3
 8009386:	75fb      	strb	r3, [r7, #23]
          break;
 8009388:	e02b      	b.n	80093e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b03      	cmp	r3, #3
 8009394:	d107      	bne.n	80093a6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009396:	f107 030d 	add.w	r3, r7, #13
 800939a:	2201      	movs	r2, #1
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f001 fd28 	bl	800adf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80093a4:	e01d      	b.n	80093e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f001 fca6 	bl	800acfa <USBD_CtlError>
            ret = USBD_FAIL;
 80093ae:	2303      	movs	r3, #3
 80093b0:	75fb      	strb	r3, [r7, #23]
          break;
 80093b2:	e016      	b.n	80093e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b03      	cmp	r3, #3
 80093be:	d00f      	beq.n	80093e0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f001 fc99 	bl	800acfa <USBD_CtlError>
            ret = USBD_FAIL;
 80093c8:	2303      	movs	r3, #3
 80093ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80093cc:	e008      	b.n	80093e0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f001 fc92 	bl	800acfa <USBD_CtlError>
          ret = USBD_FAIL;
 80093d6:	2303      	movs	r3, #3
 80093d8:	75fb      	strb	r3, [r7, #23]
          break;
 80093da:	e002      	b.n	80093e2 <USBD_CDC_Setup+0x19e>
          break;
 80093dc:	bf00      	nop
 80093de:	e008      	b.n	80093f2 <USBD_CDC_Setup+0x1ae>
          break;
 80093e0:	bf00      	nop
      }
      break;
 80093e2:	e006      	b.n	80093f2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80093e4:	6839      	ldr	r1, [r7, #0]
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f001 fc87 	bl	800acfa <USBD_CtlError>
      ret = USBD_FAIL;
 80093ec:	2303      	movs	r3, #3
 80093ee:	75fb      	strb	r3, [r7, #23]
      break;
 80093f0:	bf00      	nop
  }

  return (uint8_t)ret;
 80093f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3718      	adds	r7, #24
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800940e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	32b0      	adds	r2, #176	@ 0xb0
 800941a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d101      	bne.n	8009426 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009422:	2303      	movs	r3, #3
 8009424:	e065      	b.n	80094f2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	32b0      	adds	r2, #176	@ 0xb0
 8009430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009434:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009436:	78fb      	ldrb	r3, [r7, #3]
 8009438:	f003 020f 	and.w	r2, r3, #15
 800943c:	6879      	ldr	r1, [r7, #4]
 800943e:	4613      	mov	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	440b      	add	r3, r1
 8009448:	3318      	adds	r3, #24
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d02f      	beq.n	80094b0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009450:	78fb      	ldrb	r3, [r7, #3]
 8009452:	f003 020f 	and.w	r2, r3, #15
 8009456:	6879      	ldr	r1, [r7, #4]
 8009458:	4613      	mov	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4413      	add	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	440b      	add	r3, r1
 8009462:	3318      	adds	r3, #24
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	78fb      	ldrb	r3, [r7, #3]
 8009468:	f003 010f 	and.w	r1, r3, #15
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	460b      	mov	r3, r1
 8009470:	00db      	lsls	r3, r3, #3
 8009472:	440b      	add	r3, r1
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	4403      	add	r3, r0
 8009478:	331c      	adds	r3, #28
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009480:	fb01 f303 	mul.w	r3, r1, r3
 8009484:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009486:	2b00      	cmp	r3, #0
 8009488:	d112      	bne.n	80094b0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800948a:	78fb      	ldrb	r3, [r7, #3]
 800948c:	f003 020f 	and.w	r2, r3, #15
 8009490:	6879      	ldr	r1, [r7, #4]
 8009492:	4613      	mov	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	440b      	add	r3, r1
 800949c:	3318      	adds	r3, #24
 800949e:	2200      	movs	r2, #0
 80094a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80094a2:	78f9      	ldrb	r1, [r7, #3]
 80094a4:	2300      	movs	r3, #0
 80094a6:	2200      	movs	r2, #0
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f002 f99a 	bl	800b7e2 <USBD_LL_Transmit>
 80094ae:	e01f      	b.n	80094f0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	33b0      	adds	r3, #176	@ 0xb0
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4413      	add	r3, r2
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d010      	beq.n	80094f0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	33b0      	adds	r3, #176	@ 0xb0
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80094ec:	78fa      	ldrb	r2, [r7, #3]
 80094ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	460b      	mov	r3, r1
 8009504:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	32b0      	adds	r2, #176	@ 0xb0
 8009510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009514:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	32b0      	adds	r2, #176	@ 0xb0
 8009520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d101      	bne.n	800952c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009528:	2303      	movs	r3, #3
 800952a:	e01a      	b.n	8009562 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800952c:	78fb      	ldrb	r3, [r7, #3]
 800952e:	4619      	mov	r1, r3
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f002 f998 	bl	800b866 <USBD_LL_GetRxDataSize>
 8009536:	4602      	mov	r2, r0
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	33b0      	adds	r3, #176	@ 0xb0
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4413      	add	r3, r2
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800955c:	4611      	mov	r1, r2
 800955e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b084      	sub	sp, #16
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	32b0      	adds	r2, #176	@ 0xb0
 800957c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009580:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d101      	bne.n	800958c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009588:	2303      	movs	r3, #3
 800958a:	e024      	b.n	80095d6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	33b0      	adds	r3, #176	@ 0xb0
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	4413      	add	r3, r2
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d019      	beq.n	80095d4 <USBD_CDC_EP0_RxReady+0x6a>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80095a6:	2bff      	cmp	r3, #255	@ 0xff
 80095a8:	d014      	beq.n	80095d4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	33b0      	adds	r3, #176	@ 0xb0
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80095c2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80095ca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	22ff      	movs	r2, #255	@ 0xff
 80095d0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
	...

080095e0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b086      	sub	sp, #24
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80095e8:	2182      	movs	r1, #130	@ 0x82
 80095ea:	4818      	ldr	r0, [pc, #96]	@ (800964c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80095ec:	f000 fd4f 	bl	800a08e <USBD_GetEpDesc>
 80095f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80095f2:	2101      	movs	r1, #1
 80095f4:	4815      	ldr	r0, [pc, #84]	@ (800964c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80095f6:	f000 fd4a 	bl	800a08e <USBD_GetEpDesc>
 80095fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80095fc:	2181      	movs	r1, #129	@ 0x81
 80095fe:	4813      	ldr	r0, [pc, #76]	@ (800964c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009600:	f000 fd45 	bl	800a08e <USBD_GetEpDesc>
 8009604:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	2210      	movs	r2, #16
 8009610:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d006      	beq.n	8009626 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	2200      	movs	r2, #0
 800961c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009620:	711a      	strb	r2, [r3, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d006      	beq.n	800963a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009634:	711a      	strb	r2, [r3, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2243      	movs	r2, #67	@ 0x43
 800963e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009640:	4b02      	ldr	r3, [pc, #8]	@ (800964c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009642:	4618      	mov	r0, r3
 8009644:	3718      	adds	r7, #24
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	20000054 	.word	0x20000054

08009650 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b086      	sub	sp, #24
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009658:	2182      	movs	r1, #130	@ 0x82
 800965a:	4818      	ldr	r0, [pc, #96]	@ (80096bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800965c:	f000 fd17 	bl	800a08e <USBD_GetEpDesc>
 8009660:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009662:	2101      	movs	r1, #1
 8009664:	4815      	ldr	r0, [pc, #84]	@ (80096bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009666:	f000 fd12 	bl	800a08e <USBD_GetEpDesc>
 800966a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800966c:	2181      	movs	r1, #129	@ 0x81
 800966e:	4813      	ldr	r0, [pc, #76]	@ (80096bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009670:	f000 fd0d 	bl	800a08e <USBD_GetEpDesc>
 8009674:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d002      	beq.n	8009682 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	2210      	movs	r2, #16
 8009680:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d006      	beq.n	8009696 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	2200      	movs	r2, #0
 800968c:	711a      	strb	r2, [r3, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	f042 0202 	orr.w	r2, r2, #2
 8009694:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d006      	beq.n	80096aa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	711a      	strb	r2, [r3, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f042 0202 	orr.w	r2, r2, #2
 80096a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2243      	movs	r2, #67	@ 0x43
 80096ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80096b0:	4b02      	ldr	r3, [pc, #8]	@ (80096bc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3718      	adds	r7, #24
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20000054 	.word	0x20000054

080096c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80096c8:	2182      	movs	r1, #130	@ 0x82
 80096ca:	4818      	ldr	r0, [pc, #96]	@ (800972c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80096cc:	f000 fcdf 	bl	800a08e <USBD_GetEpDesc>
 80096d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80096d2:	2101      	movs	r1, #1
 80096d4:	4815      	ldr	r0, [pc, #84]	@ (800972c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80096d6:	f000 fcda 	bl	800a08e <USBD_GetEpDesc>
 80096da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80096dc:	2181      	movs	r1, #129	@ 0x81
 80096de:	4813      	ldr	r0, [pc, #76]	@ (800972c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80096e0:	f000 fcd5 	bl	800a08e <USBD_GetEpDesc>
 80096e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d002      	beq.n	80096f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	2210      	movs	r2, #16
 80096f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d006      	beq.n	8009706 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009700:	711a      	strb	r2, [r3, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d006      	beq.n	800971a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2200      	movs	r2, #0
 8009710:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009714:	711a      	strb	r2, [r3, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2243      	movs	r2, #67	@ 0x43
 800971e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009720:	4b02      	ldr	r3, [pc, #8]	@ (800972c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009722:	4618      	mov	r0, r3
 8009724:	3718      	adds	r7, #24
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	20000054 	.word	0x20000054

08009730 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	220a      	movs	r2, #10
 800973c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800973e:	4b03      	ldr	r3, [pc, #12]	@ (800974c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009740:	4618      	mov	r0, r3
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	20000010 	.word	0x20000010

08009750 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d101      	bne.n	8009764 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009760:	2303      	movs	r3, #3
 8009762:	e009      	b.n	8009778 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	33b0      	adds	r3, #176	@ 0xb0
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	4413      	add	r3, r2
 8009772:	683a      	ldr	r2, [r7, #0]
 8009774:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009784:	b480      	push	{r7}
 8009786:	b087      	sub	sp, #28
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	32b0      	adds	r2, #176	@ 0xb0
 800979a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800979e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d101      	bne.n	80097aa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e008      	b.n	80097bc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	371c      	adds	r7, #28
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	32b0      	adds	r2, #176	@ 0xb0
 80097dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d101      	bne.n	80097ec <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80097e8:	2303      	movs	r3, #3
 80097ea:	e004      	b.n	80097f6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	683a      	ldr	r2, [r7, #0]
 80097f0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3714      	adds	r7, #20
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
	...

08009804 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	32b0      	adds	r2, #176	@ 0xb0
 8009816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800981a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800981c:	2301      	movs	r3, #1
 800981e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d101      	bne.n	800982a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009826:	2303      	movs	r3, #3
 8009828:	e025      	b.n	8009876 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009830:	2b00      	cmp	r3, #0
 8009832:	d11f      	bne.n	8009874 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	2201      	movs	r2, #1
 8009838:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800983c:	4b10      	ldr	r3, [pc, #64]	@ (8009880 <USBD_CDC_TransmitPacket+0x7c>)
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	f003 020f 	and.w	r2, r3, #15
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	4613      	mov	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4403      	add	r3, r0
 8009856:	3318      	adds	r3, #24
 8009858:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800985a:	4b09      	ldr	r3, [pc, #36]	@ (8009880 <USBD_CDC_TransmitPacket+0x7c>)
 800985c:	7819      	ldrb	r1, [r3, #0]
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f001 ffb9 	bl	800b7e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009874:	7bfb      	ldrb	r3, [r7, #15]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	20000097 	.word	0x20000097

08009884 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	32b0      	adds	r2, #176	@ 0xb0
 8009896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800989a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	32b0      	adds	r2, #176	@ 0xb0
 80098a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d101      	bne.n	80098b2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80098ae:	2303      	movs	r3, #3
 80098b0:	e018      	b.n	80098e4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	7c1b      	ldrb	r3, [r3, #16]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10a      	bne.n	80098d0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80098ba:	4b0c      	ldr	r3, [pc, #48]	@ (80098ec <USBD_CDC_ReceivePacket+0x68>)
 80098bc:	7819      	ldrb	r1, [r3, #0]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80098c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f001 ffab 	bl	800b824 <USBD_LL_PrepareReceive>
 80098ce:	e008      	b.n	80098e2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80098d0:	4b06      	ldr	r3, [pc, #24]	@ (80098ec <USBD_CDC_ReceivePacket+0x68>)
 80098d2:	7819      	ldrb	r1, [r3, #0]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80098da:	2340      	movs	r3, #64	@ 0x40
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f001 ffa1 	bl	800b824 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	20000098 	.word	0x20000098

080098f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	4613      	mov	r3, r2
 80098fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d101      	bne.n	8009908 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009904:	2303      	movs	r3, #3
 8009906:	e01f      	b.n	8009948 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d003      	beq.n	800992e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2201      	movs	r2, #1
 8009932:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	79fa      	ldrb	r2, [r7, #7]
 800993a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f001 fe1b 	bl	800b578 <USBD_LL_Init>
 8009942:	4603      	mov	r3, r0
 8009944:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009946:	7dfb      	ldrb	r3, [r7, #23]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3718      	adds	r7, #24
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800995a:	2300      	movs	r3, #0
 800995c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d101      	bne.n	8009968 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009964:	2303      	movs	r3, #3
 8009966:	e025      	b.n	80099b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	683a      	ldr	r2, [r7, #0]
 800996c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	32ae      	adds	r2, #174	@ 0xae
 800997a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800997e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00f      	beq.n	80099a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	32ae      	adds	r2, #174	@ 0xae
 800998e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009994:	f107 020e 	add.w	r2, r7, #14
 8009998:	4610      	mov	r0, r2
 800999a:	4798      	blx	r3
 800999c:	4602      	mov	r2, r0
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80099aa:	1c5a      	adds	r2, r3, #1
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 fe23 	bl	800b610 <USBD_LL_Start>
 80099ca:	4603      	mov	r3, r0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80099dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80099de:	4618      	mov	r0, r3
 80099e0:	370c      	adds	r7, #12
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b084      	sub	sp, #16
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	460b      	mov	r3, r1
 80099f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d009      	beq.n	8009a18 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	78fa      	ldrb	r2, [r7, #3]
 8009a0e:	4611      	mov	r1, r2
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	4798      	blx	r3
 8009a14:	4603      	mov	r3, r0
 8009a16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b084      	sub	sp, #16
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	78fa      	ldrb	r2, [r7, #3]
 8009a3c:	4611      	mov	r1, r2
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	4798      	blx	r3
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d001      	beq.n	8009a4c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009a48:	2303      	movs	r3, #3
 8009a4a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b084      	sub	sp, #16
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f001 f90c 	bl	800ac86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2201      	movs	r2, #1
 8009a72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009a8a:	f003 031f 	and.w	r3, r3, #31
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d01a      	beq.n	8009ac8 <USBD_LL_SetupStage+0x72>
 8009a92:	2b02      	cmp	r3, #2
 8009a94:	d822      	bhi.n	8009adc <USBD_LL_SetupStage+0x86>
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d002      	beq.n	8009aa0 <USBD_LL_SetupStage+0x4a>
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d00a      	beq.n	8009ab4 <USBD_LL_SetupStage+0x5e>
 8009a9e:	e01d      	b.n	8009adc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fb63 	bl	800a174 <USBD_StdDevReq>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ab2:	e020      	b.n	8009af6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 fbcb 	bl	800a258 <USBD_StdItfReq>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ac6:	e016      	b.n	8009af6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009ace:	4619      	mov	r1, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fc2d 	bl	800a330 <USBD_StdEPReq>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8009ada:	e00c      	b.n	8009af6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009ae2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	4619      	mov	r1, r3
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f001 fdf0 	bl	800b6d0 <USBD_LL_StallEP>
 8009af0:	4603      	mov	r3, r0
 8009af2:	73fb      	strb	r3, [r7, #15]
      break;
 8009af4:	bf00      	nop
  }

  return ret;
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b086      	sub	sp, #24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	607a      	str	r2, [r7, #4]
 8009b0c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009b12:	7afb      	ldrb	r3, [r7, #11]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d16e      	bne.n	8009bf6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009b1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009b26:	2b03      	cmp	r3, #3
 8009b28:	f040 8098 	bne.w	8009c5c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	689a      	ldr	r2, [r3, #8]
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d913      	bls.n	8009b60 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	689a      	ldr	r2, [r3, #8]
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	1ad2      	subs	r2, r2, r3
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	68da      	ldr	r2, [r3, #12]
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	bf28      	it	cs
 8009b52:	4613      	movcs	r3, r2
 8009b54:	461a      	mov	r2, r3
 8009b56:	6879      	ldr	r1, [r7, #4]
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f001 f994 	bl	800ae86 <USBD_CtlContinueRx>
 8009b5e:	e07d      	b.n	8009c5c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009b66:	f003 031f 	and.w	r3, r3, #31
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d014      	beq.n	8009b98 <USBD_LL_DataOutStage+0x98>
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d81d      	bhi.n	8009bae <USBD_LL_DataOutStage+0xae>
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d002      	beq.n	8009b7c <USBD_LL_DataOutStage+0x7c>
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d003      	beq.n	8009b82 <USBD_LL_DataOutStage+0x82>
 8009b7a:	e018      	b.n	8009bae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	75bb      	strb	r3, [r7, #22]
            break;
 8009b80:	e018      	b.n	8009bb4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f000 fa64 	bl	800a05a <USBD_CoreFindIF>
 8009b92:	4603      	mov	r3, r0
 8009b94:	75bb      	strb	r3, [r7, #22]
            break;
 8009b96:	e00d      	b.n	8009bb4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 fa66 	bl	800a074 <USBD_CoreFindEP>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	75bb      	strb	r3, [r7, #22]
            break;
 8009bac:	e002      	b.n	8009bb4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	75bb      	strb	r3, [r7, #22]
            break;
 8009bb2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009bb4:	7dbb      	ldrb	r3, [r7, #22]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d119      	bne.n	8009bee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b03      	cmp	r3, #3
 8009bc4:	d113      	bne.n	8009bee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009bc6:	7dba      	ldrb	r2, [r7, #22]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	32ae      	adds	r2, #174	@ 0xae
 8009bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00b      	beq.n	8009bee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009bd6:	7dba      	ldrb	r2, [r7, #22]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009bde:	7dba      	ldrb	r2, [r7, #22]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	32ae      	adds	r2, #174	@ 0xae
 8009be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f001 f95a 	bl	800aea8 <USBD_CtlSendStatus>
 8009bf4:	e032      	b.n	8009c5c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009bf6:	7afb      	ldrb	r3, [r7, #11]
 8009bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	4619      	mov	r1, r3
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f000 fa37 	bl	800a074 <USBD_CoreFindEP>
 8009c06:	4603      	mov	r3, r0
 8009c08:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c0a:	7dbb      	ldrb	r3, [r7, #22]
 8009c0c:	2bff      	cmp	r3, #255	@ 0xff
 8009c0e:	d025      	beq.n	8009c5c <USBD_LL_DataOutStage+0x15c>
 8009c10:	7dbb      	ldrb	r3, [r7, #22]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d122      	bne.n	8009c5c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	2b03      	cmp	r3, #3
 8009c20:	d117      	bne.n	8009c52 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009c22:	7dba      	ldrb	r2, [r7, #22]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	32ae      	adds	r2, #174	@ 0xae
 8009c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c2c:	699b      	ldr	r3, [r3, #24]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00f      	beq.n	8009c52 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009c32:	7dba      	ldrb	r2, [r7, #22]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009c3a:	7dba      	ldrb	r2, [r7, #22]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	32ae      	adds	r2, #174	@ 0xae
 8009c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	7afa      	ldrb	r2, [r7, #11]
 8009c48:	4611      	mov	r1, r2
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	4798      	blx	r3
 8009c4e:	4603      	mov	r3, r0
 8009c50:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009c52:	7dfb      	ldrb	r3, [r7, #23]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d001      	beq.n	8009c5c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009c58:	7dfb      	ldrb	r3, [r7, #23]
 8009c5a:	e000      	b.n	8009c5e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3718      	adds	r7, #24
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b086      	sub	sp, #24
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	60f8      	str	r0, [r7, #12]
 8009c6e:	460b      	mov	r3, r1
 8009c70:	607a      	str	r2, [r7, #4]
 8009c72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009c74:	7afb      	ldrb	r3, [r7, #11]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d16f      	bne.n	8009d5a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	3314      	adds	r3, #20
 8009c7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009c86:	2b02      	cmp	r3, #2
 8009c88:	d15a      	bne.n	8009d40 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	689a      	ldr	r2, [r3, #8]
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d914      	bls.n	8009cc0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	689a      	ldr	r2, [r3, #8]
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	1ad2      	subs	r2, r2, r3
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	6879      	ldr	r1, [r7, #4]
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f001 f8bc 	bl	800ae2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f001 fdb3 	bl	800b824 <USBD_LL_PrepareReceive>
 8009cbe:	e03f      	b.n	8009d40 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	68da      	ldr	r2, [r3, #12]
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d11c      	bne.n	8009d06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d316      	bcc.n	8009d06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	685a      	ldr	r2, [r3, #4]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d20f      	bcs.n	8009d06 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	2100      	movs	r1, #0
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f001 f89d 	bl	800ae2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f001 fd90 	bl	800b824 <USBD_LL_PrepareReceive>
 8009d04:	e01c      	b.n	8009d40 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d10f      	bne.n	8009d32 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d009      	beq.n	8009d32 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d32:	2180      	movs	r1, #128	@ 0x80
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	f001 fccb 	bl	800b6d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f001 f8c7 	bl	800aece <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d03a      	beq.n	8009dc0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f7ff fe42 	bl	80099d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009d58:	e032      	b.n	8009dc0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009d5a:	7afb      	ldrb	r3, [r7, #11]
 8009d5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	4619      	mov	r1, r3
 8009d64:	68f8      	ldr	r0, [r7, #12]
 8009d66:	f000 f985 	bl	800a074 <USBD_CoreFindEP>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d6e:	7dfb      	ldrb	r3, [r7, #23]
 8009d70:	2bff      	cmp	r3, #255	@ 0xff
 8009d72:	d025      	beq.n	8009dc0 <USBD_LL_DataInStage+0x15a>
 8009d74:	7dfb      	ldrb	r3, [r7, #23]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d122      	bne.n	8009dc0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	2b03      	cmp	r3, #3
 8009d84:	d11c      	bne.n	8009dc0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009d86:	7dfa      	ldrb	r2, [r7, #23]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	32ae      	adds	r2, #174	@ 0xae
 8009d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d90:	695b      	ldr	r3, [r3, #20]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d014      	beq.n	8009dc0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009d96:	7dfa      	ldrb	r2, [r7, #23]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009d9e:	7dfa      	ldrb	r2, [r7, #23]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	32ae      	adds	r2, #174	@ 0xae
 8009da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	7afa      	ldrb	r2, [r7, #11]
 8009dac:	4611      	mov	r1, r2
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	4798      	blx	r3
 8009db2:	4603      	mov	r3, r0
 8009db4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009db6:	7dbb      	ldrb	r3, [r7, #22]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009dbc:	7dbb      	ldrb	r3, [r7, #22]
 8009dbe:	e000      	b.n	8009dc2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3718      	adds	r7, #24
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b084      	sub	sp, #16
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d014      	beq.n	8009e30 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00e      	beq.n	8009e30 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	6852      	ldr	r2, [r2, #4]
 8009e1e:	b2d2      	uxtb	r2, r2
 8009e20:	4611      	mov	r1, r2
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	4798      	blx	r3
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d001      	beq.n	8009e30 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009e30:	2340      	movs	r3, #64	@ 0x40
 8009e32:	2200      	movs	r2, #0
 8009e34:	2100      	movs	r1, #0
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f001 fc05 	bl	800b646 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2240      	movs	r2, #64	@ 0x40
 8009e48:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009e4c:	2340      	movs	r3, #64	@ 0x40
 8009e4e:	2200      	movs	r2, #0
 8009e50:	2180      	movs	r1, #128	@ 0x80
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f001 fbf7 	bl	800b646 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2240      	movs	r2, #64	@ 0x40
 8009e62:	621a      	str	r2, [r3, #32]

  return ret;
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b083      	sub	sp, #12
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	460b      	mov	r3, r1
 8009e78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	78fa      	ldrb	r2, [r7, #3]
 8009e7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b083      	sub	sp, #12
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b04      	cmp	r3, #4
 8009ea0:	d006      	beq.n	8009eb0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ea8:	b2da      	uxtb	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2204      	movs	r2, #4
 8009eb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b083      	sub	sp, #12
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b04      	cmp	r3, #4
 8009ed8:	d106      	bne.n	8009ee8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009ee0:	b2da      	uxtb	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	370c      	adds	r7, #12
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b082      	sub	sp, #8
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b03      	cmp	r3, #3
 8009f08:	d110      	bne.n	8009f2c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00b      	beq.n	8009f2c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f1a:	69db      	ldr	r3, [r3, #28]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d005      	beq.n	8009f2c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f26:	69db      	ldr	r3, [r3, #28]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b082      	sub	sp, #8
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	460b      	mov	r3, r1
 8009f40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	32ae      	adds	r2, #174	@ 0xae
 8009f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d101      	bne.n	8009f58 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009f54:	2303      	movs	r3, #3
 8009f56:	e01c      	b.n	8009f92 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	2b03      	cmp	r3, #3
 8009f62:	d115      	bne.n	8009f90 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	32ae      	adds	r2, #174	@ 0xae
 8009f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f72:	6a1b      	ldr	r3, [r3, #32]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00b      	beq.n	8009f90 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	32ae      	adds	r2, #174	@ 0xae
 8009f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f86:	6a1b      	ldr	r3, [r3, #32]
 8009f88:	78fa      	ldrb	r2, [r7, #3]
 8009f8a:	4611      	mov	r1, r2
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b082      	sub	sp, #8
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	32ae      	adds	r2, #174	@ 0xae
 8009fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d101      	bne.n	8009fbc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	e01c      	b.n	8009ff6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	2b03      	cmp	r3, #3
 8009fc6:	d115      	bne.n	8009ff4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	32ae      	adds	r2, #174	@ 0xae
 8009fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00b      	beq.n	8009ff4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	32ae      	adds	r2, #174	@ 0xae
 8009fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fec:	78fa      	ldrb	r2, [r7, #3]
 8009fee:	4611      	mov	r1, r2
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009ffe:	b480      	push	{r7}
 800a000:	b083      	sub	sp, #12
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a01c:	2300      	movs	r3, #0
 800a01e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00e      	beq.n	800a050 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	6852      	ldr	r2, [r2, #4]
 800a03e:	b2d2      	uxtb	r2, r2
 800a040:	4611      	mov	r1, r2
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	4798      	blx	r3
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d001      	beq.n	800a050 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a04c:	2303      	movs	r3, #3
 800a04e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a050:	7bfb      	ldrb	r3, [r7, #15]
}
 800a052:	4618      	mov	r0, r3
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a05a:	b480      	push	{r7}
 800a05c:	b083      	sub	sp, #12
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	460b      	mov	r3, r1
 800a064:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a066:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a068:	4618      	mov	r0, r3
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	460b      	mov	r3, r1
 800a07e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a080:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a082:	4618      	mov	r0, r3
 800a084:	370c      	adds	r7, #12
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b086      	sub	sp, #24
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	460b      	mov	r3, r1
 800a098:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	885b      	ldrh	r3, [r3, #2]
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	7812      	ldrb	r2, [r2, #0]
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d91f      	bls.n	800a0f4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a0ba:	e013      	b.n	800a0e4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a0bc:	f107 030a 	add.w	r3, r7, #10
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	6978      	ldr	r0, [r7, #20]
 800a0c4:	f000 f81b 	bl	800a0fe <USBD_GetNextDesc>
 800a0c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	785b      	ldrb	r3, [r3, #1]
 800a0ce:	2b05      	cmp	r3, #5
 800a0d0:	d108      	bne.n	800a0e4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	789b      	ldrb	r3, [r3, #2]
 800a0da:	78fa      	ldrb	r2, [r7, #3]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d008      	beq.n	800a0f2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	885b      	ldrh	r3, [r3, #2]
 800a0e8:	b29a      	uxth	r2, r3
 800a0ea:	897b      	ldrh	r3, [r7, #10]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d8e5      	bhi.n	800a0bc <USBD_GetEpDesc+0x2e>
 800a0f0:	e000      	b.n	800a0f4 <USBD_GetEpDesc+0x66>
          break;
 800a0f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a0f4:	693b      	ldr	r3, [r7, #16]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3718      	adds	r7, #24
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b085      	sub	sp, #20
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	881b      	ldrh	r3, [r3, #0]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	7812      	ldrb	r2, [r2, #0]
 800a114:	4413      	add	r3, r2
 800a116:	b29a      	uxth	r2, r3
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	461a      	mov	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4413      	add	r3, r2
 800a126:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a128:	68fb      	ldr	r3, [r7, #12]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3714      	adds	r7, #20
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a136:	b480      	push	{r7}
 800a138:	b087      	sub	sp, #28
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	3301      	adds	r3, #1
 800a14c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a154:	8a3b      	ldrh	r3, [r7, #16]
 800a156:	021b      	lsls	r3, r3, #8
 800a158:	b21a      	sxth	r2, r3
 800a15a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a15e:	4313      	orrs	r3, r2
 800a160:	b21b      	sxth	r3, r3
 800a162:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a164:	89fb      	ldrh	r3, [r7, #14]
}
 800a166:	4618      	mov	r0, r3
 800a168:	371c      	adds	r7, #28
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
	...

0800a174 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a17e:	2300      	movs	r3, #0
 800a180:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a18a:	2b40      	cmp	r3, #64	@ 0x40
 800a18c:	d005      	beq.n	800a19a <USBD_StdDevReq+0x26>
 800a18e:	2b40      	cmp	r3, #64	@ 0x40
 800a190:	d857      	bhi.n	800a242 <USBD_StdDevReq+0xce>
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00f      	beq.n	800a1b6 <USBD_StdDevReq+0x42>
 800a196:	2b20      	cmp	r3, #32
 800a198:	d153      	bne.n	800a242 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	32ae      	adds	r2, #174	@ 0xae
 800a1a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	6839      	ldr	r1, [r7, #0]
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	4798      	blx	r3
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1b4:	e04a      	b.n	800a24c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	785b      	ldrb	r3, [r3, #1]
 800a1ba:	2b09      	cmp	r3, #9
 800a1bc:	d83b      	bhi.n	800a236 <USBD_StdDevReq+0xc2>
 800a1be:	a201      	add	r2, pc, #4	@ (adr r2, 800a1c4 <USBD_StdDevReq+0x50>)
 800a1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c4:	0800a219 	.word	0x0800a219
 800a1c8:	0800a22d 	.word	0x0800a22d
 800a1cc:	0800a237 	.word	0x0800a237
 800a1d0:	0800a223 	.word	0x0800a223
 800a1d4:	0800a237 	.word	0x0800a237
 800a1d8:	0800a1f7 	.word	0x0800a1f7
 800a1dc:	0800a1ed 	.word	0x0800a1ed
 800a1e0:	0800a237 	.word	0x0800a237
 800a1e4:	0800a20f 	.word	0x0800a20f
 800a1e8:	0800a201 	.word	0x0800a201
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a1ec:	6839      	ldr	r1, [r7, #0]
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fa3c 	bl	800a66c <USBD_GetDescriptor>
          break;
 800a1f4:	e024      	b.n	800a240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 fba1 	bl	800a940 <USBD_SetAddress>
          break;
 800a1fe:	e01f      	b.n	800a240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a200:	6839      	ldr	r1, [r7, #0]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 fbe0 	bl	800a9c8 <USBD_SetConfig>
 800a208:	4603      	mov	r3, r0
 800a20a:	73fb      	strb	r3, [r7, #15]
          break;
 800a20c:	e018      	b.n	800a240 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a20e:	6839      	ldr	r1, [r7, #0]
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 fc83 	bl	800ab1c <USBD_GetConfig>
          break;
 800a216:	e013      	b.n	800a240 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a218:	6839      	ldr	r1, [r7, #0]
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fcb4 	bl	800ab88 <USBD_GetStatus>
          break;
 800a220:	e00e      	b.n	800a240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a222:	6839      	ldr	r1, [r7, #0]
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 fce3 	bl	800abf0 <USBD_SetFeature>
          break;
 800a22a:	e009      	b.n	800a240 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a22c:	6839      	ldr	r1, [r7, #0]
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 fd07 	bl	800ac42 <USBD_ClrFeature>
          break;
 800a234:	e004      	b.n	800a240 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a236:	6839      	ldr	r1, [r7, #0]
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 fd5e 	bl	800acfa <USBD_CtlError>
          break;
 800a23e:	bf00      	nop
      }
      break;
 800a240:	e004      	b.n	800a24c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a242:	6839      	ldr	r1, [r7, #0]
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 fd58 	bl	800acfa <USBD_CtlError>
      break;
 800a24a:	bf00      	nop
  }

  return ret;
 800a24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop

0800a258 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a26e:	2b40      	cmp	r3, #64	@ 0x40
 800a270:	d005      	beq.n	800a27e <USBD_StdItfReq+0x26>
 800a272:	2b40      	cmp	r3, #64	@ 0x40
 800a274:	d852      	bhi.n	800a31c <USBD_StdItfReq+0xc4>
 800a276:	2b00      	cmp	r3, #0
 800a278:	d001      	beq.n	800a27e <USBD_StdItfReq+0x26>
 800a27a:	2b20      	cmp	r3, #32
 800a27c:	d14e      	bne.n	800a31c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a284:	b2db      	uxtb	r3, r3
 800a286:	3b01      	subs	r3, #1
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d840      	bhi.n	800a30e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	889b      	ldrh	r3, [r3, #4]
 800a290:	b2db      	uxtb	r3, r3
 800a292:	2b01      	cmp	r3, #1
 800a294:	d836      	bhi.n	800a304 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	889b      	ldrh	r3, [r3, #4]
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	4619      	mov	r1, r3
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f7ff fedb 	bl	800a05a <USBD_CoreFindIF>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2a8:	7bbb      	ldrb	r3, [r7, #14]
 800a2aa:	2bff      	cmp	r3, #255	@ 0xff
 800a2ac:	d01d      	beq.n	800a2ea <USBD_StdItfReq+0x92>
 800a2ae:	7bbb      	ldrb	r3, [r7, #14]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d11a      	bne.n	800a2ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a2b4:	7bba      	ldrb	r2, [r7, #14]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	32ae      	adds	r2, #174	@ 0xae
 800a2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00f      	beq.n	800a2e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a2c4:	7bba      	ldrb	r2, [r7, #14]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a2cc:	7bba      	ldrb	r2, [r7, #14]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	32ae      	adds	r2, #174	@ 0xae
 800a2d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	6839      	ldr	r1, [r7, #0]
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	4798      	blx	r3
 800a2de:	4603      	mov	r3, r0
 800a2e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a2e2:	e004      	b.n	800a2ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a2e4:	2303      	movs	r3, #3
 800a2e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a2e8:	e001      	b.n	800a2ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	88db      	ldrh	r3, [r3, #6]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d110      	bne.n	800a318 <USBD_StdItfReq+0xc0>
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d10d      	bne.n	800a318 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 fdd3 	bl	800aea8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a302:	e009      	b.n	800a318 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a304:	6839      	ldr	r1, [r7, #0]
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fcf7 	bl	800acfa <USBD_CtlError>
          break;
 800a30c:	e004      	b.n	800a318 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a30e:	6839      	ldr	r1, [r7, #0]
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 fcf2 	bl	800acfa <USBD_CtlError>
          break;
 800a316:	e000      	b.n	800a31a <USBD_StdItfReq+0xc2>
          break;
 800a318:	bf00      	nop
      }
      break;
 800a31a:	e004      	b.n	800a326 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a31c:	6839      	ldr	r1, [r7, #0]
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 fceb 	bl	800acfa <USBD_CtlError>
      break;
 800a324:	bf00      	nop
  }

  return ret;
 800a326:	7bfb      	ldrb	r3, [r7, #15]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a33a:	2300      	movs	r3, #0
 800a33c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	889b      	ldrh	r3, [r3, #4]
 800a342:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a34c:	2b40      	cmp	r3, #64	@ 0x40
 800a34e:	d007      	beq.n	800a360 <USBD_StdEPReq+0x30>
 800a350:	2b40      	cmp	r3, #64	@ 0x40
 800a352:	f200 817f 	bhi.w	800a654 <USBD_StdEPReq+0x324>
 800a356:	2b00      	cmp	r3, #0
 800a358:	d02a      	beq.n	800a3b0 <USBD_StdEPReq+0x80>
 800a35a:	2b20      	cmp	r3, #32
 800a35c:	f040 817a 	bne.w	800a654 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a360:	7bbb      	ldrb	r3, [r7, #14]
 800a362:	4619      	mov	r1, r3
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7ff fe85 	bl	800a074 <USBD_CoreFindEP>
 800a36a:	4603      	mov	r3, r0
 800a36c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a36e:	7b7b      	ldrb	r3, [r7, #13]
 800a370:	2bff      	cmp	r3, #255	@ 0xff
 800a372:	f000 8174 	beq.w	800a65e <USBD_StdEPReq+0x32e>
 800a376:	7b7b      	ldrb	r3, [r7, #13]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f040 8170 	bne.w	800a65e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a37e:	7b7a      	ldrb	r2, [r7, #13]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a386:	7b7a      	ldrb	r2, [r7, #13]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	32ae      	adds	r2, #174	@ 0xae
 800a38c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	2b00      	cmp	r3, #0
 800a394:	f000 8163 	beq.w	800a65e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a398:	7b7a      	ldrb	r2, [r7, #13]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	32ae      	adds	r2, #174	@ 0xae
 800a39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	6839      	ldr	r1, [r7, #0]
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	4798      	blx	r3
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a3ae:	e156      	b.n	800a65e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	785b      	ldrb	r3, [r3, #1]
 800a3b4:	2b03      	cmp	r3, #3
 800a3b6:	d008      	beq.n	800a3ca <USBD_StdEPReq+0x9a>
 800a3b8:	2b03      	cmp	r3, #3
 800a3ba:	f300 8145 	bgt.w	800a648 <USBD_StdEPReq+0x318>
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f000 809b 	beq.w	800a4fa <USBD_StdEPReq+0x1ca>
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d03c      	beq.n	800a442 <USBD_StdEPReq+0x112>
 800a3c8:	e13e      	b.n	800a648 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d002      	beq.n	800a3dc <USBD_StdEPReq+0xac>
 800a3d6:	2b03      	cmp	r3, #3
 800a3d8:	d016      	beq.n	800a408 <USBD_StdEPReq+0xd8>
 800a3da:	e02c      	b.n	800a436 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3dc:	7bbb      	ldrb	r3, [r7, #14]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00d      	beq.n	800a3fe <USBD_StdEPReq+0xce>
 800a3e2:	7bbb      	ldrb	r3, [r7, #14]
 800a3e4:	2b80      	cmp	r3, #128	@ 0x80
 800a3e6:	d00a      	beq.n	800a3fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a3e8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f001 f96f 	bl	800b6d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3f2:	2180      	movs	r1, #128	@ 0x80
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f001 f96b 	bl	800b6d0 <USBD_LL_StallEP>
 800a3fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a3fc:	e020      	b.n	800a440 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a3fe:	6839      	ldr	r1, [r7, #0]
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 fc7a 	bl	800acfa <USBD_CtlError>
              break;
 800a406:	e01b      	b.n	800a440 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	885b      	ldrh	r3, [r3, #2]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d10e      	bne.n	800a42e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a410:	7bbb      	ldrb	r3, [r7, #14]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00b      	beq.n	800a42e <USBD_StdEPReq+0xfe>
 800a416:	7bbb      	ldrb	r3, [r7, #14]
 800a418:	2b80      	cmp	r3, #128	@ 0x80
 800a41a:	d008      	beq.n	800a42e <USBD_StdEPReq+0xfe>
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	88db      	ldrh	r3, [r3, #6]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d104      	bne.n	800a42e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a424:	7bbb      	ldrb	r3, [r7, #14]
 800a426:	4619      	mov	r1, r3
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f001 f951 	bl	800b6d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fd3a 	bl	800aea8 <USBD_CtlSendStatus>

              break;
 800a434:	e004      	b.n	800a440 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 fc5e 	bl	800acfa <USBD_CtlError>
              break;
 800a43e:	bf00      	nop
          }
          break;
 800a440:	e107      	b.n	800a652 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d002      	beq.n	800a454 <USBD_StdEPReq+0x124>
 800a44e:	2b03      	cmp	r3, #3
 800a450:	d016      	beq.n	800a480 <USBD_StdEPReq+0x150>
 800a452:	e04b      	b.n	800a4ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a454:	7bbb      	ldrb	r3, [r7, #14]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00d      	beq.n	800a476 <USBD_StdEPReq+0x146>
 800a45a:	7bbb      	ldrb	r3, [r7, #14]
 800a45c:	2b80      	cmp	r3, #128	@ 0x80
 800a45e:	d00a      	beq.n	800a476 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a460:	7bbb      	ldrb	r3, [r7, #14]
 800a462:	4619      	mov	r1, r3
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f001 f933 	bl	800b6d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a46a:	2180      	movs	r1, #128	@ 0x80
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f001 f92f 	bl	800b6d0 <USBD_LL_StallEP>
 800a472:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a474:	e040      	b.n	800a4f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a476:	6839      	ldr	r1, [r7, #0]
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 fc3e 	bl	800acfa <USBD_CtlError>
              break;
 800a47e:	e03b      	b.n	800a4f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	885b      	ldrh	r3, [r3, #2]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d136      	bne.n	800a4f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a488:	7bbb      	ldrb	r3, [r7, #14]
 800a48a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d004      	beq.n	800a49c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a492:	7bbb      	ldrb	r3, [r7, #14]
 800a494:	4619      	mov	r1, r3
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f001 f939 	bl	800b70e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 fd03 	bl	800aea8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a4a2:	7bbb      	ldrb	r3, [r7, #14]
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7ff fde4 	bl	800a074 <USBD_CoreFindEP>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4b0:	7b7b      	ldrb	r3, [r7, #13]
 800a4b2:	2bff      	cmp	r3, #255	@ 0xff
 800a4b4:	d01f      	beq.n	800a4f6 <USBD_StdEPReq+0x1c6>
 800a4b6:	7b7b      	ldrb	r3, [r7, #13]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d11c      	bne.n	800a4f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a4bc:	7b7a      	ldrb	r2, [r7, #13]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a4c4:	7b7a      	ldrb	r2, [r7, #13]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	32ae      	adds	r2, #174	@ 0xae
 800a4ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d010      	beq.n	800a4f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a4d4:	7b7a      	ldrb	r2, [r7, #13]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	32ae      	adds	r2, #174	@ 0xae
 800a4da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	6839      	ldr	r1, [r7, #0]
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	4798      	blx	r3
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a4ea:	e004      	b.n	800a4f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a4ec:	6839      	ldr	r1, [r7, #0]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fc03 	bl	800acfa <USBD_CtlError>
              break;
 800a4f4:	e000      	b.n	800a4f8 <USBD_StdEPReq+0x1c8>
              break;
 800a4f6:	bf00      	nop
          }
          break;
 800a4f8:	e0ab      	b.n	800a652 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b02      	cmp	r3, #2
 800a504:	d002      	beq.n	800a50c <USBD_StdEPReq+0x1dc>
 800a506:	2b03      	cmp	r3, #3
 800a508:	d032      	beq.n	800a570 <USBD_StdEPReq+0x240>
 800a50a:	e097      	b.n	800a63c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a50c:	7bbb      	ldrb	r3, [r7, #14]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d007      	beq.n	800a522 <USBD_StdEPReq+0x1f2>
 800a512:	7bbb      	ldrb	r3, [r7, #14]
 800a514:	2b80      	cmp	r3, #128	@ 0x80
 800a516:	d004      	beq.n	800a522 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a518:	6839      	ldr	r1, [r7, #0]
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fbed 	bl	800acfa <USBD_CtlError>
                break;
 800a520:	e091      	b.n	800a646 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a522:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a526:	2b00      	cmp	r3, #0
 800a528:	da0b      	bge.n	800a542 <USBD_StdEPReq+0x212>
 800a52a:	7bbb      	ldrb	r3, [r7, #14]
 800a52c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a530:	4613      	mov	r3, r2
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	4413      	add	r3, r2
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	3310      	adds	r3, #16
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	4413      	add	r3, r2
 800a53e:	3304      	adds	r3, #4
 800a540:	e00b      	b.n	800a55a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a542:	7bbb      	ldrb	r3, [r7, #14]
 800a544:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a548:	4613      	mov	r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4413      	add	r3, r2
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	4413      	add	r3, r2
 800a558:	3304      	adds	r3, #4
 800a55a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	2200      	movs	r2, #0
 800a560:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	2202      	movs	r2, #2
 800a566:	4619      	mov	r1, r3
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fc43 	bl	800adf4 <USBD_CtlSendData>
              break;
 800a56e:	e06a      	b.n	800a646 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a574:	2b00      	cmp	r3, #0
 800a576:	da11      	bge.n	800a59c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a578:	7bbb      	ldrb	r3, [r7, #14]
 800a57a:	f003 020f 	and.w	r2, r3, #15
 800a57e:	6879      	ldr	r1, [r7, #4]
 800a580:	4613      	mov	r3, r2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	4413      	add	r3, r2
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	440b      	add	r3, r1
 800a58a:	3324      	adds	r3, #36	@ 0x24
 800a58c:	881b      	ldrh	r3, [r3, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d117      	bne.n	800a5c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a592:	6839      	ldr	r1, [r7, #0]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 fbb0 	bl	800acfa <USBD_CtlError>
                  break;
 800a59a:	e054      	b.n	800a646 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a59c:	7bbb      	ldrb	r3, [r7, #14]
 800a59e:	f003 020f 	and.w	r2, r3, #15
 800a5a2:	6879      	ldr	r1, [r7, #4]
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	4413      	add	r3, r2
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	440b      	add	r3, r1
 800a5ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a5b2:	881b      	ldrh	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d104      	bne.n	800a5c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a5b8:	6839      	ldr	r1, [r7, #0]
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 fb9d 	bl	800acfa <USBD_CtlError>
                  break;
 800a5c0:	e041      	b.n	800a646 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	da0b      	bge.n	800a5e2 <USBD_StdEPReq+0x2b2>
 800a5ca:	7bbb      	ldrb	r3, [r7, #14]
 800a5cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	4413      	add	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	3310      	adds	r3, #16
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	4413      	add	r3, r2
 800a5de:	3304      	adds	r3, #4
 800a5e0:	e00b      	b.n	800a5fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5e2:	7bbb      	ldrb	r3, [r7, #14]
 800a5e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	4413      	add	r3, r2
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a5fc:	7bbb      	ldrb	r3, [r7, #14]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d002      	beq.n	800a608 <USBD_StdEPReq+0x2d8>
 800a602:	7bbb      	ldrb	r3, [r7, #14]
 800a604:	2b80      	cmp	r3, #128	@ 0x80
 800a606:	d103      	bne.n	800a610 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	2200      	movs	r2, #0
 800a60c:	601a      	str	r2, [r3, #0]
 800a60e:	e00e      	b.n	800a62e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a610:	7bbb      	ldrb	r3, [r7, #14]
 800a612:	4619      	mov	r1, r3
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f001 f899 	bl	800b74c <USBD_LL_IsStallEP>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d003      	beq.n	800a628 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	2201      	movs	r2, #1
 800a624:	601a      	str	r2, [r3, #0]
 800a626:	e002      	b.n	800a62e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	2200      	movs	r2, #0
 800a62c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	2202      	movs	r2, #2
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fbdd 	bl	800adf4 <USBD_CtlSendData>
              break;
 800a63a:	e004      	b.n	800a646 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a63c:	6839      	ldr	r1, [r7, #0]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 fb5b 	bl	800acfa <USBD_CtlError>
              break;
 800a644:	bf00      	nop
          }
          break;
 800a646:	e004      	b.n	800a652 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a648:	6839      	ldr	r1, [r7, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 fb55 	bl	800acfa <USBD_CtlError>
          break;
 800a650:	bf00      	nop
      }
      break;
 800a652:	e005      	b.n	800a660 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a654:	6839      	ldr	r1, [r7, #0]
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fb4f 	bl	800acfa <USBD_CtlError>
      break;
 800a65c:	e000      	b.n	800a660 <USBD_StdEPReq+0x330>
      break;
 800a65e:	bf00      	nop
  }

  return ret;
 800a660:	7bfb      	ldrb	r3, [r7, #15]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
	...

0800a66c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a676:	2300      	movs	r3, #0
 800a678:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a67a:	2300      	movs	r3, #0
 800a67c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a67e:	2300      	movs	r3, #0
 800a680:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	885b      	ldrh	r3, [r3, #2]
 800a686:	0a1b      	lsrs	r3, r3, #8
 800a688:	b29b      	uxth	r3, r3
 800a68a:	3b01      	subs	r3, #1
 800a68c:	2b06      	cmp	r3, #6
 800a68e:	f200 8128 	bhi.w	800a8e2 <USBD_GetDescriptor+0x276>
 800a692:	a201      	add	r2, pc, #4	@ (adr r2, 800a698 <USBD_GetDescriptor+0x2c>)
 800a694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a698:	0800a6b5 	.word	0x0800a6b5
 800a69c:	0800a6cd 	.word	0x0800a6cd
 800a6a0:	0800a70d 	.word	0x0800a70d
 800a6a4:	0800a8e3 	.word	0x0800a8e3
 800a6a8:	0800a8e3 	.word	0x0800a8e3
 800a6ac:	0800a883 	.word	0x0800a883
 800a6b0:	0800a8af 	.word	0x0800a8af
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	7c12      	ldrb	r2, [r2, #16]
 800a6c0:	f107 0108 	add.w	r1, r7, #8
 800a6c4:	4610      	mov	r0, r2
 800a6c6:	4798      	blx	r3
 800a6c8:	60f8      	str	r0, [r7, #12]
      break;
 800a6ca:	e112      	b.n	800a8f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	7c1b      	ldrb	r3, [r3, #16]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d10d      	bne.n	800a6f0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6dc:	f107 0208 	add.w	r2, r7, #8
 800a6e0:	4610      	mov	r0, r2
 800a6e2:	4798      	blx	r3
 800a6e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	2202      	movs	r2, #2
 800a6ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a6ee:	e100      	b.n	800a8f2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f8:	f107 0208 	add.w	r2, r7, #8
 800a6fc:	4610      	mov	r0, r2
 800a6fe:	4798      	blx	r3
 800a700:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	3301      	adds	r3, #1
 800a706:	2202      	movs	r2, #2
 800a708:	701a      	strb	r2, [r3, #0]
      break;
 800a70a:	e0f2      	b.n	800a8f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	885b      	ldrh	r3, [r3, #2]
 800a710:	b2db      	uxtb	r3, r3
 800a712:	2b05      	cmp	r3, #5
 800a714:	f200 80ac 	bhi.w	800a870 <USBD_GetDescriptor+0x204>
 800a718:	a201      	add	r2, pc, #4	@ (adr r2, 800a720 <USBD_GetDescriptor+0xb4>)
 800a71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71e:	bf00      	nop
 800a720:	0800a739 	.word	0x0800a739
 800a724:	0800a76d 	.word	0x0800a76d
 800a728:	0800a7a1 	.word	0x0800a7a1
 800a72c:	0800a7d5 	.word	0x0800a7d5
 800a730:	0800a809 	.word	0x0800a809
 800a734:	0800a83d 	.word	0x0800a83d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00b      	beq.n	800a75c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	7c12      	ldrb	r2, [r2, #16]
 800a750:	f107 0108 	add.w	r1, r7, #8
 800a754:	4610      	mov	r0, r2
 800a756:	4798      	blx	r3
 800a758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a75a:	e091      	b.n	800a880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a75c:	6839      	ldr	r1, [r7, #0]
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 facb 	bl	800acfa <USBD_CtlError>
            err++;
 800a764:	7afb      	ldrb	r3, [r7, #11]
 800a766:	3301      	adds	r3, #1
 800a768:	72fb      	strb	r3, [r7, #11]
          break;
 800a76a:	e089      	b.n	800a880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00b      	beq.n	800a790 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	7c12      	ldrb	r2, [r2, #16]
 800a784:	f107 0108 	add.w	r1, r7, #8
 800a788:	4610      	mov	r0, r2
 800a78a:	4798      	blx	r3
 800a78c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a78e:	e077      	b.n	800a880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a790:	6839      	ldr	r1, [r7, #0]
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 fab1 	bl	800acfa <USBD_CtlError>
            err++;
 800a798:	7afb      	ldrb	r3, [r7, #11]
 800a79a:	3301      	adds	r3, #1
 800a79c:	72fb      	strb	r3, [r7, #11]
          break;
 800a79e:	e06f      	b.n	800a880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d00b      	beq.n	800a7c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	7c12      	ldrb	r2, [r2, #16]
 800a7b8:	f107 0108 	add.w	r1, r7, #8
 800a7bc:	4610      	mov	r0, r2
 800a7be:	4798      	blx	r3
 800a7c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7c2:	e05d      	b.n	800a880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7c4:	6839      	ldr	r1, [r7, #0]
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 fa97 	bl	800acfa <USBD_CtlError>
            err++;
 800a7cc:	7afb      	ldrb	r3, [r7, #11]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a7d2:	e055      	b.n	800a880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00b      	beq.n	800a7f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7e6:	691b      	ldr	r3, [r3, #16]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	7c12      	ldrb	r2, [r2, #16]
 800a7ec:	f107 0108 	add.w	r1, r7, #8
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	4798      	blx	r3
 800a7f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7f6:	e043      	b.n	800a880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fa7d 	bl	800acfa <USBD_CtlError>
            err++;
 800a800:	7afb      	ldrb	r3, [r7, #11]
 800a802:	3301      	adds	r3, #1
 800a804:	72fb      	strb	r3, [r7, #11]
          break;
 800a806:	e03b      	b.n	800a880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a80e:	695b      	ldr	r3, [r3, #20]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00b      	beq.n	800a82c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a81a:	695b      	ldr	r3, [r3, #20]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	7c12      	ldrb	r2, [r2, #16]
 800a820:	f107 0108 	add.w	r1, r7, #8
 800a824:	4610      	mov	r0, r2
 800a826:	4798      	blx	r3
 800a828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a82a:	e029      	b.n	800a880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a82c:	6839      	ldr	r1, [r7, #0]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fa63 	bl	800acfa <USBD_CtlError>
            err++;
 800a834:	7afb      	ldrb	r3, [r7, #11]
 800a836:	3301      	adds	r3, #1
 800a838:	72fb      	strb	r3, [r7, #11]
          break;
 800a83a:	e021      	b.n	800a880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00b      	beq.n	800a860 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	7c12      	ldrb	r2, [r2, #16]
 800a854:	f107 0108 	add.w	r1, r7, #8
 800a858:	4610      	mov	r0, r2
 800a85a:	4798      	blx	r3
 800a85c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a85e:	e00f      	b.n	800a880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fa49 	bl	800acfa <USBD_CtlError>
            err++;
 800a868:	7afb      	ldrb	r3, [r7, #11]
 800a86a:	3301      	adds	r3, #1
 800a86c:	72fb      	strb	r3, [r7, #11]
          break;
 800a86e:	e007      	b.n	800a880 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a870:	6839      	ldr	r1, [r7, #0]
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fa41 	bl	800acfa <USBD_CtlError>
          err++;
 800a878:	7afb      	ldrb	r3, [r7, #11]
 800a87a:	3301      	adds	r3, #1
 800a87c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a87e:	bf00      	nop
      }
      break;
 800a880:	e037      	b.n	800a8f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	7c1b      	ldrb	r3, [r3, #16]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d109      	bne.n	800a89e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a892:	f107 0208 	add.w	r2, r7, #8
 800a896:	4610      	mov	r0, r2
 800a898:	4798      	blx	r3
 800a89a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a89c:	e029      	b.n	800a8f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a89e:	6839      	ldr	r1, [r7, #0]
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fa2a 	bl	800acfa <USBD_CtlError>
        err++;
 800a8a6:	7afb      	ldrb	r3, [r7, #11]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	72fb      	strb	r3, [r7, #11]
      break;
 800a8ac:	e021      	b.n	800a8f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	7c1b      	ldrb	r3, [r3, #16]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d10d      	bne.n	800a8d2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8be:	f107 0208 	add.w	r2, r7, #8
 800a8c2:	4610      	mov	r0, r2
 800a8c4:	4798      	blx	r3
 800a8c6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	2207      	movs	r2, #7
 800a8ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8d0:	e00f      	b.n	800a8f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a8d2:	6839      	ldr	r1, [r7, #0]
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 fa10 	bl	800acfa <USBD_CtlError>
        err++;
 800a8da:	7afb      	ldrb	r3, [r7, #11]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	72fb      	strb	r3, [r7, #11]
      break;
 800a8e0:	e007      	b.n	800a8f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a8e2:	6839      	ldr	r1, [r7, #0]
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 fa08 	bl	800acfa <USBD_CtlError>
      err++;
 800a8ea:	7afb      	ldrb	r3, [r7, #11]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	72fb      	strb	r3, [r7, #11]
      break;
 800a8f0:	bf00      	nop
  }

  if (err != 0U)
 800a8f2:	7afb      	ldrb	r3, [r7, #11]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d11e      	bne.n	800a936 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	88db      	ldrh	r3, [r3, #6]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d016      	beq.n	800a92e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a900:	893b      	ldrh	r3, [r7, #8]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00e      	beq.n	800a924 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	88da      	ldrh	r2, [r3, #6]
 800a90a:	893b      	ldrh	r3, [r7, #8]
 800a90c:	4293      	cmp	r3, r2
 800a90e:	bf28      	it	cs
 800a910:	4613      	movcs	r3, r2
 800a912:	b29b      	uxth	r3, r3
 800a914:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a916:	893b      	ldrh	r3, [r7, #8]
 800a918:	461a      	mov	r2, r3
 800a91a:	68f9      	ldr	r1, [r7, #12]
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 fa69 	bl	800adf4 <USBD_CtlSendData>
 800a922:	e009      	b.n	800a938 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 f9e7 	bl	800acfa <USBD_CtlError>
 800a92c:	e004      	b.n	800a938 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 faba 	bl	800aea8 <USBD_CtlSendStatus>
 800a934:	e000      	b.n	800a938 <USBD_GetDescriptor+0x2cc>
    return;
 800a936:	bf00      	nop
  }
}
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop

0800a940 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	889b      	ldrh	r3, [r3, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d131      	bne.n	800a9b6 <USBD_SetAddress+0x76>
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	88db      	ldrh	r3, [r3, #6]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d12d      	bne.n	800a9b6 <USBD_SetAddress+0x76>
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	885b      	ldrh	r3, [r3, #2]
 800a95e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a960:	d829      	bhi.n	800a9b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	885b      	ldrh	r3, [r3, #2]
 800a966:	b2db      	uxtb	r3, r3
 800a968:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a96c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b03      	cmp	r3, #3
 800a978:	d104      	bne.n	800a984 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a97a:	6839      	ldr	r1, [r7, #0]
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 f9bc 	bl	800acfa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a982:	e01d      	b.n	800a9c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	7bfa      	ldrb	r2, [r7, #15]
 800a988:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a98c:	7bfb      	ldrb	r3, [r7, #15]
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 ff07 	bl	800b7a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 fa86 	bl	800aea8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a99c:	7bfb      	ldrb	r3, [r7, #15]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d004      	beq.n	800a9ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2202      	movs	r2, #2
 800a9a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9aa:	e009      	b.n	800a9c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9b4:	e004      	b.n	800a9c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 f99e 	bl	800acfa <USBD_CtlError>
  }
}
 800a9be:	bf00      	nop
 800a9c0:	bf00      	nop
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	885b      	ldrh	r3, [r3, #2]
 800a9da:	b2da      	uxtb	r2, r3
 800a9dc:	4b4e      	ldr	r3, [pc, #312]	@ (800ab18 <USBD_SetConfig+0x150>)
 800a9de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a9e0:	4b4d      	ldr	r3, [pc, #308]	@ (800ab18 <USBD_SetConfig+0x150>)
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d905      	bls.n	800a9f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a9e8:	6839      	ldr	r1, [r7, #0]
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 f985 	bl	800acfa <USBD_CtlError>
    return USBD_FAIL;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	e08c      	b.n	800ab0e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d002      	beq.n	800aa06 <USBD_SetConfig+0x3e>
 800aa00:	2b03      	cmp	r3, #3
 800aa02:	d029      	beq.n	800aa58 <USBD_SetConfig+0x90>
 800aa04:	e075      	b.n	800aaf2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aa06:	4b44      	ldr	r3, [pc, #272]	@ (800ab18 <USBD_SetConfig+0x150>)
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d020      	beq.n	800aa50 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aa0e:	4b42      	ldr	r3, [pc, #264]	@ (800ab18 <USBD_SetConfig+0x150>)
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	461a      	mov	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa18:	4b3f      	ldr	r3, [pc, #252]	@ (800ab18 <USBD_SetConfig+0x150>)
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7fe ffe3 	bl	80099ea <USBD_SetClassConfig>
 800aa24:	4603      	mov	r3, r0
 800aa26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aa28:	7bfb      	ldrb	r3, [r7, #15]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d008      	beq.n	800aa40 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 f962 	bl	800acfa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2202      	movs	r2, #2
 800aa3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa3e:	e065      	b.n	800ab0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 fa31 	bl	800aea8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2203      	movs	r2, #3
 800aa4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800aa4e:	e05d      	b.n	800ab0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 fa29 	bl	800aea8 <USBD_CtlSendStatus>
      break;
 800aa56:	e059      	b.n	800ab0c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aa58:	4b2f      	ldr	r3, [pc, #188]	@ (800ab18 <USBD_SetConfig+0x150>)
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d112      	bne.n	800aa86 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2202      	movs	r2, #2
 800aa64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800aa68:	4b2b      	ldr	r3, [pc, #172]	@ (800ab18 <USBD_SetConfig+0x150>)
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa72:	4b29      	ldr	r3, [pc, #164]	@ (800ab18 <USBD_SetConfig+0x150>)
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f7fe ffd2 	bl	8009a22 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fa12 	bl	800aea8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa84:	e042      	b.n	800ab0c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800aa86:	4b24      	ldr	r3, [pc, #144]	@ (800ab18 <USBD_SetConfig+0x150>)
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d02a      	beq.n	800aaea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7fe ffc0 	bl	8009a22 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aaa2:	4b1d      	ldr	r3, [pc, #116]	@ (800ab18 <USBD_SetConfig+0x150>)
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aaac:	4b1a      	ldr	r3, [pc, #104]	@ (800ab18 <USBD_SetConfig+0x150>)
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	4619      	mov	r1, r3
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f7fe ff99 	bl	80099ea <USBD_SetClassConfig>
 800aab8:	4603      	mov	r3, r0
 800aaba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aabc:	7bfb      	ldrb	r3, [r7, #15]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d00f      	beq.n	800aae2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800aac2:	6839      	ldr	r1, [r7, #0]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 f918 	bl	800acfa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	4619      	mov	r1, r3
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f7fe ffa5 	bl	8009a22 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2202      	movs	r2, #2
 800aadc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800aae0:	e014      	b.n	800ab0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 f9e0 	bl	800aea8 <USBD_CtlSendStatus>
      break;
 800aae8:	e010      	b.n	800ab0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f9dc 	bl	800aea8 <USBD_CtlSendStatus>
      break;
 800aaf0:	e00c      	b.n	800ab0c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 f900 	bl	800acfa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aafa:	4b07      	ldr	r3, [pc, #28]	@ (800ab18 <USBD_SetConfig+0x150>)
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	4619      	mov	r1, r3
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f7fe ff8e 	bl	8009a22 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ab06:	2303      	movs	r3, #3
 800ab08:	73fb      	strb	r3, [r7, #15]
      break;
 800ab0a:	bf00      	nop
  }

  return ret;
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	20000480 	.word	0x20000480

0800ab1c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	88db      	ldrh	r3, [r3, #6]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d004      	beq.n	800ab38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ab2e:	6839      	ldr	r1, [r7, #0]
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f8e2 	bl	800acfa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ab36:	e023      	b.n	800ab80 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	dc02      	bgt.n	800ab4a <USBD_GetConfig+0x2e>
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	dc03      	bgt.n	800ab50 <USBD_GetConfig+0x34>
 800ab48:	e015      	b.n	800ab76 <USBD_GetConfig+0x5a>
 800ab4a:	2b03      	cmp	r3, #3
 800ab4c:	d00b      	beq.n	800ab66 <USBD_GetConfig+0x4a>
 800ab4e:	e012      	b.n	800ab76 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2200      	movs	r2, #0
 800ab54:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	3308      	adds	r3, #8
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 f948 	bl	800adf4 <USBD_CtlSendData>
        break;
 800ab64:	e00c      	b.n	800ab80 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	3304      	adds	r3, #4
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 f940 	bl	800adf4 <USBD_CtlSendData>
        break;
 800ab74:	e004      	b.n	800ab80 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f8be 	bl	800acfa <USBD_CtlError>
        break;
 800ab7e:	bf00      	nop
}
 800ab80:	bf00      	nop
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	d81e      	bhi.n	800abde <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	88db      	ldrh	r3, [r3, #6]
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	d004      	beq.n	800abb2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800aba8:	6839      	ldr	r1, [r7, #0]
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 f8a5 	bl	800acfa <USBD_CtlError>
        break;
 800abb0:	e01a      	b.n	800abe8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2201      	movs	r2, #1
 800abb6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d005      	beq.n	800abce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	f043 0202 	orr.w	r2, r3, #2
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	330c      	adds	r3, #12
 800abd2:	2202      	movs	r2, #2
 800abd4:	4619      	mov	r1, r3
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 f90c 	bl	800adf4 <USBD_CtlSendData>
      break;
 800abdc:	e004      	b.n	800abe8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800abde:	6839      	ldr	r1, [r7, #0]
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f000 f88a 	bl	800acfa <USBD_CtlError>
      break;
 800abe6:	bf00      	nop
  }
}
 800abe8:	bf00      	nop
 800abea:	3708      	adds	r7, #8
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	885b      	ldrh	r3, [r3, #2]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d107      	bne.n	800ac12 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2201      	movs	r2, #1
 800ac06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f94c 	bl	800aea8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ac10:	e013      	b.n	800ac3a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	885b      	ldrh	r3, [r3, #2]
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d10b      	bne.n	800ac32 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	889b      	ldrh	r3, [r3, #4]
 800ac1e:	0a1b      	lsrs	r3, r3, #8
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 f93c 	bl	800aea8 <USBD_CtlSendStatus>
}
 800ac30:	e003      	b.n	800ac3a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ac32:	6839      	ldr	r1, [r7, #0]
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 f860 	bl	800acfa <USBD_CtlError>
}
 800ac3a:	bf00      	nop
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b082      	sub	sp, #8
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	3b01      	subs	r3, #1
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	d80b      	bhi.n	800ac72 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	885b      	ldrh	r3, [r3, #2]
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d10c      	bne.n	800ac7c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f91c 	bl	800aea8 <USBD_CtlSendStatus>
      }
      break;
 800ac70:	e004      	b.n	800ac7c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ac72:	6839      	ldr	r1, [r7, #0]
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 f840 	bl	800acfa <USBD_CtlError>
      break;
 800ac7a:	e000      	b.n	800ac7e <USBD_ClrFeature+0x3c>
      break;
 800ac7c:	bf00      	nop
  }
}
 800ac7e:	bf00      	nop
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b084      	sub	sp, #16
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
 800ac8e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	781a      	ldrb	r2, [r3, #0]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	781a      	ldrb	r2, [r3, #0]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	3301      	adds	r3, #1
 800acae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f7ff fa40 	bl	800a136 <SWAPBYTE>
 800acb6:	4603      	mov	r3, r0
 800acb8:	461a      	mov	r2, r3
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	3301      	adds	r3, #1
 800acc2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	3301      	adds	r3, #1
 800acc8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f7ff fa33 	bl	800a136 <SWAPBYTE>
 800acd0:	4603      	mov	r3, r0
 800acd2:	461a      	mov	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	3301      	adds	r3, #1
 800acdc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	3301      	adds	r3, #1
 800ace2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	f7ff fa26 	bl	800a136 <SWAPBYTE>
 800acea:	4603      	mov	r3, r0
 800acec:	461a      	mov	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	80da      	strh	r2, [r3, #6]
}
 800acf2:	bf00      	nop
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b082      	sub	sp, #8
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
 800ad02:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad04:	2180      	movs	r1, #128	@ 0x80
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fce2 	bl	800b6d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ad0c:	2100      	movs	r1, #0
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 fcde 	bl	800b6d0 <USBD_LL_StallEP>
}
 800ad14:	bf00      	nop
 800ad16:	3708      	adds	r7, #8
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	60b9      	str	r1, [r7, #8]
 800ad26:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d042      	beq.n	800adb8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ad36:	6938      	ldr	r0, [r7, #16]
 800ad38:	f000 f842 	bl	800adc0 <USBD_GetLen>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	3301      	adds	r3, #1
 800ad40:	005b      	lsls	r3, r3, #1
 800ad42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad46:	d808      	bhi.n	800ad5a <USBD_GetString+0x3e>
 800ad48:	6938      	ldr	r0, [r7, #16]
 800ad4a:	f000 f839 	bl	800adc0 <USBD_GetLen>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	3301      	adds	r3, #1
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	005b      	lsls	r3, r3, #1
 800ad56:	b29a      	uxth	r2, r3
 800ad58:	e001      	b.n	800ad5e <USBD_GetString+0x42>
 800ad5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ad62:	7dfb      	ldrb	r3, [r7, #23]
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	4413      	add	r3, r2
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	7812      	ldrb	r2, [r2, #0]
 800ad6c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad6e:	7dfb      	ldrb	r3, [r7, #23]
 800ad70:	3301      	adds	r3, #1
 800ad72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ad74:	7dfb      	ldrb	r3, [r7, #23]
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	4413      	add	r3, r2
 800ad7a:	2203      	movs	r2, #3
 800ad7c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad7e:	7dfb      	ldrb	r3, [r7, #23]
 800ad80:	3301      	adds	r3, #1
 800ad82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ad84:	e013      	b.n	800adae <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ad86:	7dfb      	ldrb	r3, [r7, #23]
 800ad88:	68ba      	ldr	r2, [r7, #8]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	7812      	ldrb	r2, [r2, #0]
 800ad90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	3301      	adds	r3, #1
 800ad96:	613b      	str	r3, [r7, #16]
    idx++;
 800ad98:	7dfb      	ldrb	r3, [r7, #23]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ad9e:	7dfb      	ldrb	r3, [r7, #23]
 800ada0:	68ba      	ldr	r2, [r7, #8]
 800ada2:	4413      	add	r3, r2
 800ada4:	2200      	movs	r2, #0
 800ada6:	701a      	strb	r2, [r3, #0]
    idx++;
 800ada8:	7dfb      	ldrb	r3, [r7, #23]
 800adaa:	3301      	adds	r3, #1
 800adac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1e7      	bne.n	800ad86 <USBD_GetString+0x6a>
 800adb6:	e000      	b.n	800adba <USBD_GetString+0x9e>
    return;
 800adb8:	bf00      	nop
  }
}
 800adba:	3718      	adds	r7, #24
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800adc8:	2300      	movs	r3, #0
 800adca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800add0:	e005      	b.n	800adde <USBD_GetLen+0x1e>
  {
    len++;
 800add2:	7bfb      	ldrb	r3, [r7, #15]
 800add4:	3301      	adds	r3, #1
 800add6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	3301      	adds	r3, #1
 800addc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d1f5      	bne.n	800add2 <USBD_GetLen+0x12>
  }

  return len;
 800ade6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3714      	adds	r7, #20
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2202      	movs	r2, #2
 800ae04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	68ba      	ldr	r2, [r7, #8]
 800ae18:	2100      	movs	r1, #0
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f000 fce1 	bl	800b7e2 <USBD_LL_Transmit>

  return USBD_OK;
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b084      	sub	sp, #16
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	60f8      	str	r0, [r7, #12]
 800ae32:	60b9      	str	r1, [r7, #8]
 800ae34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	68ba      	ldr	r2, [r7, #8]
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f000 fcd0 	bl	800b7e2 <USBD_LL_Transmit>

  return USBD_OK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2203      	movs	r2, #3
 800ae5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	68ba      	ldr	r2, [r7, #8]
 800ae74:	2100      	movs	r1, #0
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f000 fcd4 	bl	800b824 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3710      	adds	r7, #16
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b084      	sub	sp, #16
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	60f8      	str	r0, [r7, #12]
 800ae8e:	60b9      	str	r1, [r7, #8]
 800ae90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	68ba      	ldr	r2, [r7, #8]
 800ae96:	2100      	movs	r1, #0
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f000 fcc3 	bl	800b824 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae9e:	2300      	movs	r3, #0
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2204      	movs	r2, #4
 800aeb4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aeb8:	2300      	movs	r3, #0
 800aeba:	2200      	movs	r2, #0
 800aebc:	2100      	movs	r1, #0
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 fc8f 	bl	800b7e2 <USBD_LL_Transmit>

  return USBD_OK;
 800aec4:	2300      	movs	r3, #0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3708      	adds	r7, #8
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b082      	sub	sp, #8
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2205      	movs	r2, #5
 800aeda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aede:	2300      	movs	r3, #0
 800aee0:	2200      	movs	r2, #0
 800aee2:	2100      	movs	r1, #0
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fc9d 	bl	800b824 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aef8:	2200      	movs	r2, #0
 800aefa:	4912      	ldr	r1, [pc, #72]	@ (800af44 <MX_USB_DEVICE_Init+0x50>)
 800aefc:	4812      	ldr	r0, [pc, #72]	@ (800af48 <MX_USB_DEVICE_Init+0x54>)
 800aefe:	f7fe fcf7 	bl	80098f0 <USBD_Init>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d001      	beq.n	800af0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800af08:	f7f6 fe48 	bl	8001b9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800af0c:	490f      	ldr	r1, [pc, #60]	@ (800af4c <MX_USB_DEVICE_Init+0x58>)
 800af0e:	480e      	ldr	r0, [pc, #56]	@ (800af48 <MX_USB_DEVICE_Init+0x54>)
 800af10:	f7fe fd1e 	bl	8009950 <USBD_RegisterClass>
 800af14:	4603      	mov	r3, r0
 800af16:	2b00      	cmp	r3, #0
 800af18:	d001      	beq.n	800af1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800af1a:	f7f6 fe3f 	bl	8001b9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800af1e:	490c      	ldr	r1, [pc, #48]	@ (800af50 <MX_USB_DEVICE_Init+0x5c>)
 800af20:	4809      	ldr	r0, [pc, #36]	@ (800af48 <MX_USB_DEVICE_Init+0x54>)
 800af22:	f7fe fc15 	bl	8009750 <USBD_CDC_RegisterInterface>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800af2c:	f7f6 fe36 	bl	8001b9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800af30:	4805      	ldr	r0, [pc, #20]	@ (800af48 <MX_USB_DEVICE_Init+0x54>)
 800af32:	f7fe fd43 	bl	80099bc <USBD_Start>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d001      	beq.n	800af40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800af3c:	f7f6 fe2e 	bl	8001b9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800af40:	bf00      	nop
 800af42:	bd80      	pop	{r7, pc}
 800af44:	200000b0 	.word	0x200000b0
 800af48:	20000484 	.word	0x20000484
 800af4c:	2000001c 	.word	0x2000001c
 800af50:	2000009c 	.word	0x2000009c

0800af54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800af58:	2200      	movs	r2, #0
 800af5a:	4905      	ldr	r1, [pc, #20]	@ (800af70 <CDC_Init_FS+0x1c>)
 800af5c:	4805      	ldr	r0, [pc, #20]	@ (800af74 <CDC_Init_FS+0x20>)
 800af5e:	f7fe fc11 	bl	8009784 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800af62:	4905      	ldr	r1, [pc, #20]	@ (800af78 <CDC_Init_FS+0x24>)
 800af64:	4803      	ldr	r0, [pc, #12]	@ (800af74 <CDC_Init_FS+0x20>)
 800af66:	f7fe fc2f 	bl	80097c8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800af6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	20000f60 	.word	0x20000f60
 800af74:	20000484 	.word	0x20000484
 800af78:	20000760 	.word	0x20000760

0800af7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800af7c:	b480      	push	{r7}
 800af7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800af80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800af82:	4618      	mov	r0, r3
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	4603      	mov	r3, r0
 800af94:	6039      	str	r1, [r7, #0]
 800af96:	71fb      	strb	r3, [r7, #7]
 800af98:	4613      	mov	r3, r2
 800af9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800af9c:	79fb      	ldrb	r3, [r7, #7]
 800af9e:	2b23      	cmp	r3, #35	@ 0x23
 800afa0:	d84a      	bhi.n	800b038 <CDC_Control_FS+0xac>
 800afa2:	a201      	add	r2, pc, #4	@ (adr r2, 800afa8 <CDC_Control_FS+0x1c>)
 800afa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa8:	0800b039 	.word	0x0800b039
 800afac:	0800b039 	.word	0x0800b039
 800afb0:	0800b039 	.word	0x0800b039
 800afb4:	0800b039 	.word	0x0800b039
 800afb8:	0800b039 	.word	0x0800b039
 800afbc:	0800b039 	.word	0x0800b039
 800afc0:	0800b039 	.word	0x0800b039
 800afc4:	0800b039 	.word	0x0800b039
 800afc8:	0800b039 	.word	0x0800b039
 800afcc:	0800b039 	.word	0x0800b039
 800afd0:	0800b039 	.word	0x0800b039
 800afd4:	0800b039 	.word	0x0800b039
 800afd8:	0800b039 	.word	0x0800b039
 800afdc:	0800b039 	.word	0x0800b039
 800afe0:	0800b039 	.word	0x0800b039
 800afe4:	0800b039 	.word	0x0800b039
 800afe8:	0800b039 	.word	0x0800b039
 800afec:	0800b039 	.word	0x0800b039
 800aff0:	0800b039 	.word	0x0800b039
 800aff4:	0800b039 	.word	0x0800b039
 800aff8:	0800b039 	.word	0x0800b039
 800affc:	0800b039 	.word	0x0800b039
 800b000:	0800b039 	.word	0x0800b039
 800b004:	0800b039 	.word	0x0800b039
 800b008:	0800b039 	.word	0x0800b039
 800b00c:	0800b039 	.word	0x0800b039
 800b010:	0800b039 	.word	0x0800b039
 800b014:	0800b039 	.word	0x0800b039
 800b018:	0800b039 	.word	0x0800b039
 800b01c:	0800b039 	.word	0x0800b039
 800b020:	0800b039 	.word	0x0800b039
 800b024:	0800b039 	.word	0x0800b039
 800b028:	0800b039 	.word	0x0800b039
 800b02c:	0800b039 	.word	0x0800b039
 800b030:	0800b039 	.word	0x0800b039
 800b034:	0800b039 	.word	0x0800b039
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b038:	bf00      	nop
  }

  return (USBD_OK);
 800b03a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	370c      	adds	r7, #12
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b052:	6879      	ldr	r1, [r7, #4]
 800b054:	4805      	ldr	r0, [pc, #20]	@ (800b06c <CDC_Receive_FS+0x24>)
 800b056:	f7fe fbb7 	bl	80097c8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b05a:	4804      	ldr	r0, [pc, #16]	@ (800b06c <CDC_Receive_FS+0x24>)
 800b05c:	f7fe fc12 	bl	8009884 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b060:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b062:	4618      	mov	r0, r3
 800b064:	3708      	adds	r7, #8
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	20000484 	.word	0x20000484

0800b070 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	460b      	mov	r3, r1
 800b07a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b07c:	2300      	movs	r3, #0
 800b07e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b080:	4b0d      	ldr	r3, [pc, #52]	@ (800b0b8 <CDC_Transmit_FS+0x48>)
 800b082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b086:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d001      	beq.n	800b096 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b092:	2301      	movs	r3, #1
 800b094:	e00b      	b.n	800b0ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b096:	887b      	ldrh	r3, [r7, #2]
 800b098:	461a      	mov	r2, r3
 800b09a:	6879      	ldr	r1, [r7, #4]
 800b09c:	4806      	ldr	r0, [pc, #24]	@ (800b0b8 <CDC_Transmit_FS+0x48>)
 800b09e:	f7fe fb71 	bl	8009784 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b0a2:	4805      	ldr	r0, [pc, #20]	@ (800b0b8 <CDC_Transmit_FS+0x48>)
 800b0a4:	f7fe fbae 	bl	8009804 <USBD_CDC_TransmitPacket>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3710      	adds	r7, #16
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	20000484 	.word	0x20000484

0800b0bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b087      	sub	sp, #28
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b0ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	371c      	adds	r7, #28
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr
	...

0800b0e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	6039      	str	r1, [r7, #0]
 800b0ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	2212      	movs	r2, #18
 800b0f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b0f2:	4b03      	ldr	r3, [pc, #12]	@ (800b100 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	200000cc 	.word	0x200000cc

0800b104 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	4603      	mov	r3, r0
 800b10c:	6039      	str	r1, [r7, #0]
 800b10e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	2204      	movs	r2, #4
 800b114:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b116:	4b03      	ldr	r3, [pc, #12]	@ (800b124 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b118:	4618      	mov	r0, r3
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr
 800b124:	200000e0 	.word	0x200000e0

0800b128 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	4603      	mov	r3, r0
 800b130:	6039      	str	r1, [r7, #0]
 800b132:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b134:	79fb      	ldrb	r3, [r7, #7]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d105      	bne.n	800b146 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	4907      	ldr	r1, [pc, #28]	@ (800b15c <USBD_FS_ProductStrDescriptor+0x34>)
 800b13e:	4808      	ldr	r0, [pc, #32]	@ (800b160 <USBD_FS_ProductStrDescriptor+0x38>)
 800b140:	f7ff fdec 	bl	800ad1c <USBD_GetString>
 800b144:	e004      	b.n	800b150 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b146:	683a      	ldr	r2, [r7, #0]
 800b148:	4904      	ldr	r1, [pc, #16]	@ (800b15c <USBD_FS_ProductStrDescriptor+0x34>)
 800b14a:	4805      	ldr	r0, [pc, #20]	@ (800b160 <USBD_FS_ProductStrDescriptor+0x38>)
 800b14c:	f7ff fde6 	bl	800ad1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b150:	4b02      	ldr	r3, [pc, #8]	@ (800b15c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b152:	4618      	mov	r0, r3
 800b154:	3708      	adds	r7, #8
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	20001760 	.word	0x20001760
 800b160:	0800eafc 	.word	0x0800eafc

0800b164 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
 800b16a:	4603      	mov	r3, r0
 800b16c:	6039      	str	r1, [r7, #0]
 800b16e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b170:	683a      	ldr	r2, [r7, #0]
 800b172:	4904      	ldr	r1, [pc, #16]	@ (800b184 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b174:	4804      	ldr	r0, [pc, #16]	@ (800b188 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b176:	f7ff fdd1 	bl	800ad1c <USBD_GetString>
  return USBD_StrDesc;
 800b17a:	4b02      	ldr	r3, [pc, #8]	@ (800b184 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3708      	adds	r7, #8
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}
 800b184:	20001760 	.word	0x20001760
 800b188:	0800eb14 	.word	0x0800eb14

0800b18c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	4603      	mov	r3, r0
 800b194:	6039      	str	r1, [r7, #0]
 800b196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	221a      	movs	r2, #26
 800b19c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b19e:	f000 f843 	bl	800b228 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b1a2:	4b02      	ldr	r3, [pc, #8]	@ (800b1ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3708      	adds	r7, #8
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	200000e4 	.word	0x200000e4

0800b1b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	6039      	str	r1, [r7, #0]
 800b1ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b1bc:	79fb      	ldrb	r3, [r7, #7]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d105      	bne.n	800b1ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	4907      	ldr	r1, [pc, #28]	@ (800b1e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b1c6:	4808      	ldr	r0, [pc, #32]	@ (800b1e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b1c8:	f7ff fda8 	bl	800ad1c <USBD_GetString>
 800b1cc:	e004      	b.n	800b1d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b1ce:	683a      	ldr	r2, [r7, #0]
 800b1d0:	4904      	ldr	r1, [pc, #16]	@ (800b1e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b1d2:	4805      	ldr	r0, [pc, #20]	@ (800b1e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b1d4:	f7ff fda2 	bl	800ad1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1d8:	4b02      	ldr	r3, [pc, #8]	@ (800b1e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3708      	adds	r7, #8
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	20001760 	.word	0x20001760
 800b1e8:	0800eb28 	.word	0x0800eb28

0800b1ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	6039      	str	r1, [r7, #0]
 800b1f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b1f8:	79fb      	ldrb	r3, [r7, #7]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d105      	bne.n	800b20a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b1fe:	683a      	ldr	r2, [r7, #0]
 800b200:	4907      	ldr	r1, [pc, #28]	@ (800b220 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b202:	4808      	ldr	r0, [pc, #32]	@ (800b224 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b204:	f7ff fd8a 	bl	800ad1c <USBD_GetString>
 800b208:	e004      	b.n	800b214 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b20a:	683a      	ldr	r2, [r7, #0]
 800b20c:	4904      	ldr	r1, [pc, #16]	@ (800b220 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b20e:	4805      	ldr	r0, [pc, #20]	@ (800b224 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b210:	f7ff fd84 	bl	800ad1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b214:	4b02      	ldr	r3, [pc, #8]	@ (800b220 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b216:	4618      	mov	r0, r3
 800b218:	3708      	adds	r7, #8
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	20001760 	.word	0x20001760
 800b224:	0800eb34 	.word	0x0800eb34

0800b228 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b22e:	4b0f      	ldr	r3, [pc, #60]	@ (800b26c <Get_SerialNum+0x44>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b234:	4b0e      	ldr	r3, [pc, #56]	@ (800b270 <Get_SerialNum+0x48>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b23a:	4b0e      	ldr	r3, [pc, #56]	@ (800b274 <Get_SerialNum+0x4c>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	4413      	add	r3, r2
 800b246:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d009      	beq.n	800b262 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b24e:	2208      	movs	r2, #8
 800b250:	4909      	ldr	r1, [pc, #36]	@ (800b278 <Get_SerialNum+0x50>)
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f000 f814 	bl	800b280 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b258:	2204      	movs	r2, #4
 800b25a:	4908      	ldr	r1, [pc, #32]	@ (800b27c <Get_SerialNum+0x54>)
 800b25c:	68b8      	ldr	r0, [r7, #8]
 800b25e:	f000 f80f 	bl	800b280 <IntToUnicode>
  }
}
 800b262:	bf00      	nop
 800b264:	3710      	adds	r7, #16
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	1fff7a10 	.word	0x1fff7a10
 800b270:	1fff7a14 	.word	0x1fff7a14
 800b274:	1fff7a18 	.word	0x1fff7a18
 800b278:	200000e6 	.word	0x200000e6
 800b27c:	200000f6 	.word	0x200000f6

0800b280 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b280:	b480      	push	{r7}
 800b282:	b087      	sub	sp, #28
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	4613      	mov	r3, r2
 800b28c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b28e:	2300      	movs	r3, #0
 800b290:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b292:	2300      	movs	r3, #0
 800b294:	75fb      	strb	r3, [r7, #23]
 800b296:	e027      	b.n	800b2e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	0f1b      	lsrs	r3, r3, #28
 800b29c:	2b09      	cmp	r3, #9
 800b29e:	d80b      	bhi.n	800b2b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	0f1b      	lsrs	r3, r3, #28
 800b2a4:	b2da      	uxtb	r2, r3
 800b2a6:	7dfb      	ldrb	r3, [r7, #23]
 800b2a8:	005b      	lsls	r3, r3, #1
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	440b      	add	r3, r1
 800b2b0:	3230      	adds	r2, #48	@ 0x30
 800b2b2:	b2d2      	uxtb	r2, r2
 800b2b4:	701a      	strb	r2, [r3, #0]
 800b2b6:	e00a      	b.n	800b2ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	0f1b      	lsrs	r3, r3, #28
 800b2bc:	b2da      	uxtb	r2, r3
 800b2be:	7dfb      	ldrb	r3, [r7, #23]
 800b2c0:	005b      	lsls	r3, r3, #1
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	440b      	add	r3, r1
 800b2c8:	3237      	adds	r2, #55	@ 0x37
 800b2ca:	b2d2      	uxtb	r2, r2
 800b2cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	011b      	lsls	r3, r3, #4
 800b2d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b2d4:	7dfb      	ldrb	r3, [r7, #23]
 800b2d6:	005b      	lsls	r3, r3, #1
 800b2d8:	3301      	adds	r3, #1
 800b2da:	68ba      	ldr	r2, [r7, #8]
 800b2dc:	4413      	add	r3, r2
 800b2de:	2200      	movs	r2, #0
 800b2e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b2e2:	7dfb      	ldrb	r3, [r7, #23]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	75fb      	strb	r3, [r7, #23]
 800b2e8:	7dfa      	ldrb	r2, [r7, #23]
 800b2ea:	79fb      	ldrb	r3, [r7, #7]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d3d3      	bcc.n	800b298 <IntToUnicode+0x18>
  }
}
 800b2f0:	bf00      	nop
 800b2f2:	bf00      	nop
 800b2f4:	371c      	adds	r7, #28
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr
	...

0800b300 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b08a      	sub	sp, #40	@ 0x28
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b308:	f107 0314 	add.w	r3, r7, #20
 800b30c:	2200      	movs	r2, #0
 800b30e:	601a      	str	r2, [r3, #0]
 800b310:	605a      	str	r2, [r3, #4]
 800b312:	609a      	str	r2, [r3, #8]
 800b314:	60da      	str	r2, [r3, #12]
 800b316:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b320:	d13a      	bne.n	800b398 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b322:	2300      	movs	r3, #0
 800b324:	613b      	str	r3, [r7, #16]
 800b326:	4b1e      	ldr	r3, [pc, #120]	@ (800b3a0 <HAL_PCD_MspInit+0xa0>)
 800b328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b32a:	4a1d      	ldr	r2, [pc, #116]	@ (800b3a0 <HAL_PCD_MspInit+0xa0>)
 800b32c:	f043 0301 	orr.w	r3, r3, #1
 800b330:	6313      	str	r3, [r2, #48]	@ 0x30
 800b332:	4b1b      	ldr	r3, [pc, #108]	@ (800b3a0 <HAL_PCD_MspInit+0xa0>)
 800b334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b336:	f003 0301 	and.w	r3, r3, #1
 800b33a:	613b      	str	r3, [r7, #16]
 800b33c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b33e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b344:	2302      	movs	r3, #2
 800b346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b348:	2300      	movs	r3, #0
 800b34a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b34c:	2303      	movs	r3, #3
 800b34e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b350:	230a      	movs	r3, #10
 800b352:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b354:	f107 0314 	add.w	r3, r7, #20
 800b358:	4619      	mov	r1, r3
 800b35a:	4812      	ldr	r0, [pc, #72]	@ (800b3a4 <HAL_PCD_MspInit+0xa4>)
 800b35c:	f7f7 f95c 	bl	8002618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b360:	4b0f      	ldr	r3, [pc, #60]	@ (800b3a0 <HAL_PCD_MspInit+0xa0>)
 800b362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b364:	4a0e      	ldr	r2, [pc, #56]	@ (800b3a0 <HAL_PCD_MspInit+0xa0>)
 800b366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b36a:	6353      	str	r3, [r2, #52]	@ 0x34
 800b36c:	2300      	movs	r3, #0
 800b36e:	60fb      	str	r3, [r7, #12]
 800b370:	4b0b      	ldr	r3, [pc, #44]	@ (800b3a0 <HAL_PCD_MspInit+0xa0>)
 800b372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b374:	4a0a      	ldr	r2, [pc, #40]	@ (800b3a0 <HAL_PCD_MspInit+0xa0>)
 800b376:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b37a:	6453      	str	r3, [r2, #68]	@ 0x44
 800b37c:	4b08      	ldr	r3, [pc, #32]	@ (800b3a0 <HAL_PCD_MspInit+0xa0>)
 800b37e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b380:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b384:	60fb      	str	r3, [r7, #12]
 800b386:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b388:	2200      	movs	r2, #0
 800b38a:	2100      	movs	r1, #0
 800b38c:	2043      	movs	r0, #67	@ 0x43
 800b38e:	f7f7 f87a 	bl	8002486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b392:	2043      	movs	r0, #67	@ 0x43
 800b394:	f7f7 f893 	bl	80024be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b398:	bf00      	nop
 800b39a:	3728      	adds	r7, #40	@ 0x28
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	40023800 	.word	0x40023800
 800b3a4:	40020000 	.word	0x40020000

0800b3a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b3bc:	4619      	mov	r1, r3
 800b3be:	4610      	mov	r0, r2
 800b3c0:	f7fe fb49 	bl	8009a56 <USBD_LL_SetupStage>
}
 800b3c4:	bf00      	nop
 800b3c6:	3708      	adds	r7, #8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b3de:	78fa      	ldrb	r2, [r7, #3]
 800b3e0:	6879      	ldr	r1, [r7, #4]
 800b3e2:	4613      	mov	r3, r2
 800b3e4:	00db      	lsls	r3, r3, #3
 800b3e6:	4413      	add	r3, r2
 800b3e8:	009b      	lsls	r3, r3, #2
 800b3ea:	440b      	add	r3, r1
 800b3ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	78fb      	ldrb	r3, [r7, #3]
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	f7fe fb83 	bl	8009b00 <USBD_LL_DataOutStage>
}
 800b3fa:	bf00      	nop
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b082      	sub	sp, #8
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
 800b40a:	460b      	mov	r3, r1
 800b40c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b414:	78fa      	ldrb	r2, [r7, #3]
 800b416:	6879      	ldr	r1, [r7, #4]
 800b418:	4613      	mov	r3, r2
 800b41a:	00db      	lsls	r3, r3, #3
 800b41c:	4413      	add	r3, r2
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	440b      	add	r3, r1
 800b422:	3320      	adds	r3, #32
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	78fb      	ldrb	r3, [r7, #3]
 800b428:	4619      	mov	r1, r3
 800b42a:	f7fe fc1c 	bl	8009c66 <USBD_LL_DataInStage>
}
 800b42e:	bf00      	nop
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b082      	sub	sp, #8
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b444:	4618      	mov	r0, r3
 800b446:	f7fe fd56 	bl	8009ef6 <USBD_LL_SOF>
}
 800b44a:	bf00      	nop
 800b44c:	3708      	adds	r7, #8
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b084      	sub	sp, #16
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b45a:	2301      	movs	r3, #1
 800b45c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	79db      	ldrb	r3, [r3, #7]
 800b462:	2b02      	cmp	r3, #2
 800b464:	d001      	beq.n	800b46a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b466:	f7f6 fb99 	bl	8001b9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b470:	7bfa      	ldrb	r2, [r7, #15]
 800b472:	4611      	mov	r1, r2
 800b474:	4618      	mov	r0, r3
 800b476:	f7fe fcfa 	bl	8009e6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b480:	4618      	mov	r0, r3
 800b482:	f7fe fca2 	bl	8009dca <USBD_LL_Reset>
}
 800b486:	bf00      	nop
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
	...

0800b490 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7fe fcf5 	bl	8009e8e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	6812      	ldr	r2, [r2, #0]
 800b4b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b4b6:	f043 0301 	orr.w	r3, r3, #1
 800b4ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	7adb      	ldrb	r3, [r3, #11]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d005      	beq.n	800b4d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b4c4:	4b04      	ldr	r3, [pc, #16]	@ (800b4d8 <HAL_PCD_SuspendCallback+0x48>)
 800b4c6:	691b      	ldr	r3, [r3, #16]
 800b4c8:	4a03      	ldr	r2, [pc, #12]	@ (800b4d8 <HAL_PCD_SuspendCallback+0x48>)
 800b4ca:	f043 0306 	orr.w	r3, r3, #6
 800b4ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b4d0:	bf00      	nop
 800b4d2:	3708      	adds	r7, #8
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	e000ed00 	.word	0xe000ed00

0800b4dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fe fceb 	bl	8009ec6 <USBD_LL_Resume>
}
 800b4f0:	bf00      	nop
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	460b      	mov	r3, r1
 800b502:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b50a:	78fa      	ldrb	r2, [r7, #3]
 800b50c:	4611      	mov	r1, r2
 800b50e:	4618      	mov	r0, r3
 800b510:	f7fe fd43 	bl	8009f9a <USBD_LL_IsoOUTIncomplete>
}
 800b514:	bf00      	nop
 800b516:	3708      	adds	r7, #8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	460b      	mov	r3, r1
 800b526:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b52e:	78fa      	ldrb	r2, [r7, #3]
 800b530:	4611      	mov	r1, r2
 800b532:	4618      	mov	r0, r3
 800b534:	f7fe fcff 	bl	8009f36 <USBD_LL_IsoINIncomplete>
}
 800b538:	bf00      	nop
 800b53a:	3708      	adds	r7, #8
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b54e:	4618      	mov	r0, r3
 800b550:	f7fe fd55 	bl	8009ffe <USBD_LL_DevConnected>
}
 800b554:	bf00      	nop
 800b556:	3708      	adds	r7, #8
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fe fd52 	bl	800a014 <USBD_LL_DevDisconnected>
}
 800b570:	bf00      	nop
 800b572:	3708      	adds	r7, #8
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d13c      	bne.n	800b602 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b588:	4a20      	ldr	r2, [pc, #128]	@ (800b60c <USBD_LL_Init+0x94>)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4a1e      	ldr	r2, [pc, #120]	@ (800b60c <USBD_LL_Init+0x94>)
 800b594:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b598:	4b1c      	ldr	r3, [pc, #112]	@ (800b60c <USBD_LL_Init+0x94>)
 800b59a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b59e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b5a0:	4b1a      	ldr	r3, [pc, #104]	@ (800b60c <USBD_LL_Init+0x94>)
 800b5a2:	2204      	movs	r2, #4
 800b5a4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b5a6:	4b19      	ldr	r3, [pc, #100]	@ (800b60c <USBD_LL_Init+0x94>)
 800b5a8:	2202      	movs	r2, #2
 800b5aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b5ac:	4b17      	ldr	r3, [pc, #92]	@ (800b60c <USBD_LL_Init+0x94>)
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b5b2:	4b16      	ldr	r3, [pc, #88]	@ (800b60c <USBD_LL_Init+0x94>)
 800b5b4:	2202      	movs	r2, #2
 800b5b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b5b8:	4b14      	ldr	r3, [pc, #80]	@ (800b60c <USBD_LL_Init+0x94>)
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b5be:	4b13      	ldr	r3, [pc, #76]	@ (800b60c <USBD_LL_Init+0x94>)
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b5c4:	4b11      	ldr	r3, [pc, #68]	@ (800b60c <USBD_LL_Init+0x94>)
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b5ca:	4b10      	ldr	r3, [pc, #64]	@ (800b60c <USBD_LL_Init+0x94>)
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b5d0:	4b0e      	ldr	r3, [pc, #56]	@ (800b60c <USBD_LL_Init+0x94>)
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b5d6:	480d      	ldr	r0, [pc, #52]	@ (800b60c <USBD_LL_Init+0x94>)
 800b5d8:	f7f8 f9ea 	bl	80039b0 <HAL_PCD_Init>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b5e2:	f7f6 fadb 	bl	8001b9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b5e6:	2180      	movs	r1, #128	@ 0x80
 800b5e8:	4808      	ldr	r0, [pc, #32]	@ (800b60c <USBD_LL_Init+0x94>)
 800b5ea:	f7f9 fc16 	bl	8004e1a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b5ee:	2240      	movs	r2, #64	@ 0x40
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	4806      	ldr	r0, [pc, #24]	@ (800b60c <USBD_LL_Init+0x94>)
 800b5f4:	f7f9 fbca 	bl	8004d8c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b5f8:	2280      	movs	r2, #128	@ 0x80
 800b5fa:	2101      	movs	r1, #1
 800b5fc:	4803      	ldr	r0, [pc, #12]	@ (800b60c <USBD_LL_Init+0x94>)
 800b5fe:	f7f9 fbc5 	bl	8004d8c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	4618      	mov	r0, r3
 800b606:	3708      	adds	r7, #8
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	20001960 	.word	0x20001960

0800b610 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b618:	2300      	movs	r3, #0
 800b61a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b61c:	2300      	movs	r3, #0
 800b61e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b626:	4618      	mov	r0, r3
 800b628:	f7f8 fad1 	bl	8003bce <HAL_PCD_Start>
 800b62c:	4603      	mov	r3, r0
 800b62e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b630:	7bfb      	ldrb	r3, [r7, #15]
 800b632:	4618      	mov	r0, r3
 800b634:	f000 f942 	bl	800b8bc <USBD_Get_USB_Status>
 800b638:	4603      	mov	r3, r0
 800b63a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b63c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b084      	sub	sp, #16
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
 800b64e:	4608      	mov	r0, r1
 800b650:	4611      	mov	r1, r2
 800b652:	461a      	mov	r2, r3
 800b654:	4603      	mov	r3, r0
 800b656:	70fb      	strb	r3, [r7, #3]
 800b658:	460b      	mov	r3, r1
 800b65a:	70bb      	strb	r3, [r7, #2]
 800b65c:	4613      	mov	r3, r2
 800b65e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b660:	2300      	movs	r3, #0
 800b662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b664:	2300      	movs	r3, #0
 800b666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b66e:	78bb      	ldrb	r3, [r7, #2]
 800b670:	883a      	ldrh	r2, [r7, #0]
 800b672:	78f9      	ldrb	r1, [r7, #3]
 800b674:	f7f8 ffa5 	bl	80045c2 <HAL_PCD_EP_Open>
 800b678:	4603      	mov	r3, r0
 800b67a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
 800b67e:	4618      	mov	r0, r3
 800b680:	f000 f91c 	bl	800b8bc <USBD_Get_USB_Status>
 800b684:	4603      	mov	r3, r0
 800b686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b688:	7bbb      	ldrb	r3, [r7, #14]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b084      	sub	sp, #16
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	460b      	mov	r3, r1
 800b69c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b6ac:	78fa      	ldrb	r2, [r7, #3]
 800b6ae:	4611      	mov	r1, r2
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7f8 fff0 	bl	8004696 <HAL_PCD_EP_Close>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6ba:	7bfb      	ldrb	r3, [r7, #15]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f000 f8fd 	bl	800b8bc <USBD_Get_USB_Status>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3710      	adds	r7, #16
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	460b      	mov	r3, r1
 800b6da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b6ea:	78fa      	ldrb	r2, [r7, #3]
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7f9 f8a8 	bl	8004844 <HAL_PCD_EP_SetStall>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6f8:	7bfb      	ldrb	r3, [r7, #15]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f000 f8de 	bl	800b8bc <USBD_Get_USB_Status>
 800b700:	4603      	mov	r3, r0
 800b702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b704:	7bbb      	ldrb	r3, [r7, #14]
}
 800b706:	4618      	mov	r0, r3
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b084      	sub	sp, #16
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
 800b716:	460b      	mov	r3, r1
 800b718:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b71a:	2300      	movs	r3, #0
 800b71c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b71e:	2300      	movs	r3, #0
 800b720:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b728:	78fa      	ldrb	r2, [r7, #3]
 800b72a:	4611      	mov	r1, r2
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7f9 f8ec 	bl	800490a <HAL_PCD_EP_ClrStall>
 800b732:	4603      	mov	r3, r0
 800b734:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b736:	7bfb      	ldrb	r3, [r7, #15]
 800b738:	4618      	mov	r0, r3
 800b73a:	f000 f8bf 	bl	800b8bc <USBD_Get_USB_Status>
 800b73e:	4603      	mov	r3, r0
 800b740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b742:	7bbb      	ldrb	r3, [r7, #14]
}
 800b744:	4618      	mov	r0, r3
 800b746:	3710      	adds	r7, #16
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b085      	sub	sp, #20
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	460b      	mov	r3, r1
 800b756:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b75e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b764:	2b00      	cmp	r3, #0
 800b766:	da0b      	bge.n	800b780 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b768:	78fb      	ldrb	r3, [r7, #3]
 800b76a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b76e:	68f9      	ldr	r1, [r7, #12]
 800b770:	4613      	mov	r3, r2
 800b772:	00db      	lsls	r3, r3, #3
 800b774:	4413      	add	r3, r2
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	440b      	add	r3, r1
 800b77a:	3316      	adds	r3, #22
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	e00b      	b.n	800b798 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b780:	78fb      	ldrb	r3, [r7, #3]
 800b782:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b786:	68f9      	ldr	r1, [r7, #12]
 800b788:	4613      	mov	r3, r2
 800b78a:	00db      	lsls	r3, r3, #3
 800b78c:	4413      	add	r3, r2
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	440b      	add	r3, r1
 800b792:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b796:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3714      	adds	r7, #20
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b7be:	78fa      	ldrb	r2, [r7, #3]
 800b7c0:	4611      	mov	r1, r2
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7f8 fed9 	bl	800457a <HAL_PCD_SetAddress>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7cc:	7bfb      	ldrb	r3, [r7, #15]
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f000 f874 	bl	800b8bc <USBD_Get_USB_Status>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b086      	sub	sp, #24
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	60f8      	str	r0, [r7, #12]
 800b7ea:	607a      	str	r2, [r7, #4]
 800b7ec:	603b      	str	r3, [r7, #0]
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b800:	7af9      	ldrb	r1, [r7, #11]
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	f7f8 ffe3 	bl	80047d0 <HAL_PCD_EP_Transmit>
 800b80a:	4603      	mov	r3, r0
 800b80c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b80e:	7dfb      	ldrb	r3, [r7, #23]
 800b810:	4618      	mov	r0, r3
 800b812:	f000 f853 	bl	800b8bc <USBD_Get_USB_Status>
 800b816:	4603      	mov	r3, r0
 800b818:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b81a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3718      	adds	r7, #24
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b086      	sub	sp, #24
 800b828:	af00      	add	r7, sp, #0
 800b82a:	60f8      	str	r0, [r7, #12]
 800b82c:	607a      	str	r2, [r7, #4]
 800b82e:	603b      	str	r3, [r7, #0]
 800b830:	460b      	mov	r3, r1
 800b832:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b834:	2300      	movs	r3, #0
 800b836:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b838:	2300      	movs	r3, #0
 800b83a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b842:	7af9      	ldrb	r1, [r7, #11]
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	f7f8 ff6f 	bl	800472a <HAL_PCD_EP_Receive>
 800b84c:	4603      	mov	r3, r0
 800b84e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b850:	7dfb      	ldrb	r3, [r7, #23]
 800b852:	4618      	mov	r0, r3
 800b854:	f000 f832 	bl	800b8bc <USBD_Get_USB_Status>
 800b858:	4603      	mov	r3, r0
 800b85a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b85c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3718      	adds	r7, #24
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b082      	sub	sp, #8
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	460b      	mov	r3, r1
 800b870:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b878:	78fa      	ldrb	r2, [r7, #3]
 800b87a:	4611      	mov	r1, r2
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7f8 ff8f 	bl	80047a0 <HAL_PCD_EP_GetRxCount>
 800b882:	4603      	mov	r3, r0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b894:	4b03      	ldr	r3, [pc, #12]	@ (800b8a4 <USBD_static_malloc+0x18>)
}
 800b896:	4618      	mov	r0, r3
 800b898:	370c      	adds	r7, #12
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	20001e44 	.word	0x20001e44

0800b8a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]

}
 800b8b0:	bf00      	nop
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b085      	sub	sp, #20
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b8ca:	79fb      	ldrb	r3, [r7, #7]
 800b8cc:	2b03      	cmp	r3, #3
 800b8ce:	d817      	bhi.n	800b900 <USBD_Get_USB_Status+0x44>
 800b8d0:	a201      	add	r2, pc, #4	@ (adr r2, 800b8d8 <USBD_Get_USB_Status+0x1c>)
 800b8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d6:	bf00      	nop
 800b8d8:	0800b8e9 	.word	0x0800b8e9
 800b8dc:	0800b8ef 	.word	0x0800b8ef
 800b8e0:	0800b8f5 	.word	0x0800b8f5
 800b8e4:	0800b8fb 	.word	0x0800b8fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ec:	e00b      	b.n	800b906 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b8ee:	2303      	movs	r3, #3
 800b8f0:	73fb      	strb	r3, [r7, #15]
    break;
 800b8f2:	e008      	b.n	800b906 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b8f8:	e005      	b.n	800b906 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	73fb      	strb	r3, [r7, #15]
    break;
 800b8fe:	e002      	b.n	800b906 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b900:	2303      	movs	r3, #3
 800b902:	73fb      	strb	r3, [r7, #15]
    break;
 800b904:	bf00      	nop
  }
  return usb_status;
 800b906:	7bfb      	ldrb	r3, [r7, #15]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3714      	adds	r7, #20
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <__cvt>:
 800b914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b918:	ec57 6b10 	vmov	r6, r7, d0
 800b91c:	2f00      	cmp	r7, #0
 800b91e:	460c      	mov	r4, r1
 800b920:	4619      	mov	r1, r3
 800b922:	463b      	mov	r3, r7
 800b924:	bfbb      	ittet	lt
 800b926:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b92a:	461f      	movlt	r7, r3
 800b92c:	2300      	movge	r3, #0
 800b92e:	232d      	movlt	r3, #45	@ 0x2d
 800b930:	700b      	strb	r3, [r1, #0]
 800b932:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b934:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b938:	4691      	mov	r9, r2
 800b93a:	f023 0820 	bic.w	r8, r3, #32
 800b93e:	bfbc      	itt	lt
 800b940:	4632      	movlt	r2, r6
 800b942:	4616      	movlt	r6, r2
 800b944:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b948:	d005      	beq.n	800b956 <__cvt+0x42>
 800b94a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b94e:	d100      	bne.n	800b952 <__cvt+0x3e>
 800b950:	3401      	adds	r4, #1
 800b952:	2102      	movs	r1, #2
 800b954:	e000      	b.n	800b958 <__cvt+0x44>
 800b956:	2103      	movs	r1, #3
 800b958:	ab03      	add	r3, sp, #12
 800b95a:	9301      	str	r3, [sp, #4]
 800b95c:	ab02      	add	r3, sp, #8
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	ec47 6b10 	vmov	d0, r6, r7
 800b964:	4653      	mov	r3, sl
 800b966:	4622      	mov	r2, r4
 800b968:	f000 fe6e 	bl	800c648 <_dtoa_r>
 800b96c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b970:	4605      	mov	r5, r0
 800b972:	d119      	bne.n	800b9a8 <__cvt+0x94>
 800b974:	f019 0f01 	tst.w	r9, #1
 800b978:	d00e      	beq.n	800b998 <__cvt+0x84>
 800b97a:	eb00 0904 	add.w	r9, r0, r4
 800b97e:	2200      	movs	r2, #0
 800b980:	2300      	movs	r3, #0
 800b982:	4630      	mov	r0, r6
 800b984:	4639      	mov	r1, r7
 800b986:	f7f5 f8a7 	bl	8000ad8 <__aeabi_dcmpeq>
 800b98a:	b108      	cbz	r0, 800b990 <__cvt+0x7c>
 800b98c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b990:	2230      	movs	r2, #48	@ 0x30
 800b992:	9b03      	ldr	r3, [sp, #12]
 800b994:	454b      	cmp	r3, r9
 800b996:	d31e      	bcc.n	800b9d6 <__cvt+0xc2>
 800b998:	9b03      	ldr	r3, [sp, #12]
 800b99a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b99c:	1b5b      	subs	r3, r3, r5
 800b99e:	4628      	mov	r0, r5
 800b9a0:	6013      	str	r3, [r2, #0]
 800b9a2:	b004      	add	sp, #16
 800b9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b9ac:	eb00 0904 	add.w	r9, r0, r4
 800b9b0:	d1e5      	bne.n	800b97e <__cvt+0x6a>
 800b9b2:	7803      	ldrb	r3, [r0, #0]
 800b9b4:	2b30      	cmp	r3, #48	@ 0x30
 800b9b6:	d10a      	bne.n	800b9ce <__cvt+0xba>
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	4630      	mov	r0, r6
 800b9be:	4639      	mov	r1, r7
 800b9c0:	f7f5 f88a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9c4:	b918      	cbnz	r0, 800b9ce <__cvt+0xba>
 800b9c6:	f1c4 0401 	rsb	r4, r4, #1
 800b9ca:	f8ca 4000 	str.w	r4, [sl]
 800b9ce:	f8da 3000 	ldr.w	r3, [sl]
 800b9d2:	4499      	add	r9, r3
 800b9d4:	e7d3      	b.n	800b97e <__cvt+0x6a>
 800b9d6:	1c59      	adds	r1, r3, #1
 800b9d8:	9103      	str	r1, [sp, #12]
 800b9da:	701a      	strb	r2, [r3, #0]
 800b9dc:	e7d9      	b.n	800b992 <__cvt+0x7e>

0800b9de <__exponent>:
 800b9de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9e0:	2900      	cmp	r1, #0
 800b9e2:	bfba      	itte	lt
 800b9e4:	4249      	neglt	r1, r1
 800b9e6:	232d      	movlt	r3, #45	@ 0x2d
 800b9e8:	232b      	movge	r3, #43	@ 0x2b
 800b9ea:	2909      	cmp	r1, #9
 800b9ec:	7002      	strb	r2, [r0, #0]
 800b9ee:	7043      	strb	r3, [r0, #1]
 800b9f0:	dd29      	ble.n	800ba46 <__exponent+0x68>
 800b9f2:	f10d 0307 	add.w	r3, sp, #7
 800b9f6:	461d      	mov	r5, r3
 800b9f8:	270a      	movs	r7, #10
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	fbb1 f6f7 	udiv	r6, r1, r7
 800ba00:	fb07 1416 	mls	r4, r7, r6, r1
 800ba04:	3430      	adds	r4, #48	@ 0x30
 800ba06:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ba0a:	460c      	mov	r4, r1
 800ba0c:	2c63      	cmp	r4, #99	@ 0x63
 800ba0e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba12:	4631      	mov	r1, r6
 800ba14:	dcf1      	bgt.n	800b9fa <__exponent+0x1c>
 800ba16:	3130      	adds	r1, #48	@ 0x30
 800ba18:	1e94      	subs	r4, r2, #2
 800ba1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ba1e:	1c41      	adds	r1, r0, #1
 800ba20:	4623      	mov	r3, r4
 800ba22:	42ab      	cmp	r3, r5
 800ba24:	d30a      	bcc.n	800ba3c <__exponent+0x5e>
 800ba26:	f10d 0309 	add.w	r3, sp, #9
 800ba2a:	1a9b      	subs	r3, r3, r2
 800ba2c:	42ac      	cmp	r4, r5
 800ba2e:	bf88      	it	hi
 800ba30:	2300      	movhi	r3, #0
 800ba32:	3302      	adds	r3, #2
 800ba34:	4403      	add	r3, r0
 800ba36:	1a18      	subs	r0, r3, r0
 800ba38:	b003      	add	sp, #12
 800ba3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba3c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ba40:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ba44:	e7ed      	b.n	800ba22 <__exponent+0x44>
 800ba46:	2330      	movs	r3, #48	@ 0x30
 800ba48:	3130      	adds	r1, #48	@ 0x30
 800ba4a:	7083      	strb	r3, [r0, #2]
 800ba4c:	70c1      	strb	r1, [r0, #3]
 800ba4e:	1d03      	adds	r3, r0, #4
 800ba50:	e7f1      	b.n	800ba36 <__exponent+0x58>
	...

0800ba54 <_printf_float>:
 800ba54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba58:	b08d      	sub	sp, #52	@ 0x34
 800ba5a:	460c      	mov	r4, r1
 800ba5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ba60:	4616      	mov	r6, r2
 800ba62:	461f      	mov	r7, r3
 800ba64:	4605      	mov	r5, r0
 800ba66:	f000 fcef 	bl	800c448 <_localeconv_r>
 800ba6a:	6803      	ldr	r3, [r0, #0]
 800ba6c:	9304      	str	r3, [sp, #16]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7f4 fc06 	bl	8000280 <strlen>
 800ba74:	2300      	movs	r3, #0
 800ba76:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba78:	f8d8 3000 	ldr.w	r3, [r8]
 800ba7c:	9005      	str	r0, [sp, #20]
 800ba7e:	3307      	adds	r3, #7
 800ba80:	f023 0307 	bic.w	r3, r3, #7
 800ba84:	f103 0208 	add.w	r2, r3, #8
 800ba88:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ba8c:	f8d4 b000 	ldr.w	fp, [r4]
 800ba90:	f8c8 2000 	str.w	r2, [r8]
 800ba94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ba9c:	9307      	str	r3, [sp, #28]
 800ba9e:	f8cd 8018 	str.w	r8, [sp, #24]
 800baa2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800baa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800baaa:	4b9c      	ldr	r3, [pc, #624]	@ (800bd1c <_printf_float+0x2c8>)
 800baac:	f04f 32ff 	mov.w	r2, #4294967295
 800bab0:	f7f5 f844 	bl	8000b3c <__aeabi_dcmpun>
 800bab4:	bb70      	cbnz	r0, 800bb14 <_printf_float+0xc0>
 800bab6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800baba:	4b98      	ldr	r3, [pc, #608]	@ (800bd1c <_printf_float+0x2c8>)
 800babc:	f04f 32ff 	mov.w	r2, #4294967295
 800bac0:	f7f5 f81e 	bl	8000b00 <__aeabi_dcmple>
 800bac4:	bb30      	cbnz	r0, 800bb14 <_printf_float+0xc0>
 800bac6:	2200      	movs	r2, #0
 800bac8:	2300      	movs	r3, #0
 800baca:	4640      	mov	r0, r8
 800bacc:	4649      	mov	r1, r9
 800bace:	f7f5 f80d 	bl	8000aec <__aeabi_dcmplt>
 800bad2:	b110      	cbz	r0, 800bada <_printf_float+0x86>
 800bad4:	232d      	movs	r3, #45	@ 0x2d
 800bad6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bada:	4a91      	ldr	r2, [pc, #580]	@ (800bd20 <_printf_float+0x2cc>)
 800badc:	4b91      	ldr	r3, [pc, #580]	@ (800bd24 <_printf_float+0x2d0>)
 800bade:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bae2:	bf94      	ite	ls
 800bae4:	4690      	movls	r8, r2
 800bae6:	4698      	movhi	r8, r3
 800bae8:	2303      	movs	r3, #3
 800baea:	6123      	str	r3, [r4, #16]
 800baec:	f02b 0304 	bic.w	r3, fp, #4
 800baf0:	6023      	str	r3, [r4, #0]
 800baf2:	f04f 0900 	mov.w	r9, #0
 800baf6:	9700      	str	r7, [sp, #0]
 800baf8:	4633      	mov	r3, r6
 800bafa:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bafc:	4621      	mov	r1, r4
 800bafe:	4628      	mov	r0, r5
 800bb00:	f000 f9d2 	bl	800bea8 <_printf_common>
 800bb04:	3001      	adds	r0, #1
 800bb06:	f040 808d 	bne.w	800bc24 <_printf_float+0x1d0>
 800bb0a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb0e:	b00d      	add	sp, #52	@ 0x34
 800bb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb14:	4642      	mov	r2, r8
 800bb16:	464b      	mov	r3, r9
 800bb18:	4640      	mov	r0, r8
 800bb1a:	4649      	mov	r1, r9
 800bb1c:	f7f5 f80e 	bl	8000b3c <__aeabi_dcmpun>
 800bb20:	b140      	cbz	r0, 800bb34 <_printf_float+0xe0>
 800bb22:	464b      	mov	r3, r9
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	bfbc      	itt	lt
 800bb28:	232d      	movlt	r3, #45	@ 0x2d
 800bb2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bb2e:	4a7e      	ldr	r2, [pc, #504]	@ (800bd28 <_printf_float+0x2d4>)
 800bb30:	4b7e      	ldr	r3, [pc, #504]	@ (800bd2c <_printf_float+0x2d8>)
 800bb32:	e7d4      	b.n	800bade <_printf_float+0x8a>
 800bb34:	6863      	ldr	r3, [r4, #4]
 800bb36:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bb3a:	9206      	str	r2, [sp, #24]
 800bb3c:	1c5a      	adds	r2, r3, #1
 800bb3e:	d13b      	bne.n	800bbb8 <_printf_float+0x164>
 800bb40:	2306      	movs	r3, #6
 800bb42:	6063      	str	r3, [r4, #4]
 800bb44:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bb48:	2300      	movs	r3, #0
 800bb4a:	6022      	str	r2, [r4, #0]
 800bb4c:	9303      	str	r3, [sp, #12]
 800bb4e:	ab0a      	add	r3, sp, #40	@ 0x28
 800bb50:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bb54:	ab09      	add	r3, sp, #36	@ 0x24
 800bb56:	9300      	str	r3, [sp, #0]
 800bb58:	6861      	ldr	r1, [r4, #4]
 800bb5a:	ec49 8b10 	vmov	d0, r8, r9
 800bb5e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bb62:	4628      	mov	r0, r5
 800bb64:	f7ff fed6 	bl	800b914 <__cvt>
 800bb68:	9b06      	ldr	r3, [sp, #24]
 800bb6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb6c:	2b47      	cmp	r3, #71	@ 0x47
 800bb6e:	4680      	mov	r8, r0
 800bb70:	d129      	bne.n	800bbc6 <_printf_float+0x172>
 800bb72:	1cc8      	adds	r0, r1, #3
 800bb74:	db02      	blt.n	800bb7c <_printf_float+0x128>
 800bb76:	6863      	ldr	r3, [r4, #4]
 800bb78:	4299      	cmp	r1, r3
 800bb7a:	dd41      	ble.n	800bc00 <_printf_float+0x1ac>
 800bb7c:	f1aa 0a02 	sub.w	sl, sl, #2
 800bb80:	fa5f fa8a 	uxtb.w	sl, sl
 800bb84:	3901      	subs	r1, #1
 800bb86:	4652      	mov	r2, sl
 800bb88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bb8c:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb8e:	f7ff ff26 	bl	800b9de <__exponent>
 800bb92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb94:	1813      	adds	r3, r2, r0
 800bb96:	2a01      	cmp	r2, #1
 800bb98:	4681      	mov	r9, r0
 800bb9a:	6123      	str	r3, [r4, #16]
 800bb9c:	dc02      	bgt.n	800bba4 <_printf_float+0x150>
 800bb9e:	6822      	ldr	r2, [r4, #0]
 800bba0:	07d2      	lsls	r2, r2, #31
 800bba2:	d501      	bpl.n	800bba8 <_printf_float+0x154>
 800bba4:	3301      	adds	r3, #1
 800bba6:	6123      	str	r3, [r4, #16]
 800bba8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d0a2      	beq.n	800baf6 <_printf_float+0xa2>
 800bbb0:	232d      	movs	r3, #45	@ 0x2d
 800bbb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbb6:	e79e      	b.n	800baf6 <_printf_float+0xa2>
 800bbb8:	9a06      	ldr	r2, [sp, #24]
 800bbba:	2a47      	cmp	r2, #71	@ 0x47
 800bbbc:	d1c2      	bne.n	800bb44 <_printf_float+0xf0>
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1c0      	bne.n	800bb44 <_printf_float+0xf0>
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e7bd      	b.n	800bb42 <_printf_float+0xee>
 800bbc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bbca:	d9db      	bls.n	800bb84 <_printf_float+0x130>
 800bbcc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bbd0:	d118      	bne.n	800bc04 <_printf_float+0x1b0>
 800bbd2:	2900      	cmp	r1, #0
 800bbd4:	6863      	ldr	r3, [r4, #4]
 800bbd6:	dd0b      	ble.n	800bbf0 <_printf_float+0x19c>
 800bbd8:	6121      	str	r1, [r4, #16]
 800bbda:	b913      	cbnz	r3, 800bbe2 <_printf_float+0x18e>
 800bbdc:	6822      	ldr	r2, [r4, #0]
 800bbde:	07d0      	lsls	r0, r2, #31
 800bbe0:	d502      	bpl.n	800bbe8 <_printf_float+0x194>
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	440b      	add	r3, r1
 800bbe6:	6123      	str	r3, [r4, #16]
 800bbe8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bbea:	f04f 0900 	mov.w	r9, #0
 800bbee:	e7db      	b.n	800bba8 <_printf_float+0x154>
 800bbf0:	b913      	cbnz	r3, 800bbf8 <_printf_float+0x1a4>
 800bbf2:	6822      	ldr	r2, [r4, #0]
 800bbf4:	07d2      	lsls	r2, r2, #31
 800bbf6:	d501      	bpl.n	800bbfc <_printf_float+0x1a8>
 800bbf8:	3302      	adds	r3, #2
 800bbfa:	e7f4      	b.n	800bbe6 <_printf_float+0x192>
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e7f2      	b.n	800bbe6 <_printf_float+0x192>
 800bc00:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bc04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc06:	4299      	cmp	r1, r3
 800bc08:	db05      	blt.n	800bc16 <_printf_float+0x1c2>
 800bc0a:	6823      	ldr	r3, [r4, #0]
 800bc0c:	6121      	str	r1, [r4, #16]
 800bc0e:	07d8      	lsls	r0, r3, #31
 800bc10:	d5ea      	bpl.n	800bbe8 <_printf_float+0x194>
 800bc12:	1c4b      	adds	r3, r1, #1
 800bc14:	e7e7      	b.n	800bbe6 <_printf_float+0x192>
 800bc16:	2900      	cmp	r1, #0
 800bc18:	bfd4      	ite	le
 800bc1a:	f1c1 0202 	rsble	r2, r1, #2
 800bc1e:	2201      	movgt	r2, #1
 800bc20:	4413      	add	r3, r2
 800bc22:	e7e0      	b.n	800bbe6 <_printf_float+0x192>
 800bc24:	6823      	ldr	r3, [r4, #0]
 800bc26:	055a      	lsls	r2, r3, #21
 800bc28:	d407      	bmi.n	800bc3a <_printf_float+0x1e6>
 800bc2a:	6923      	ldr	r3, [r4, #16]
 800bc2c:	4642      	mov	r2, r8
 800bc2e:	4631      	mov	r1, r6
 800bc30:	4628      	mov	r0, r5
 800bc32:	47b8      	blx	r7
 800bc34:	3001      	adds	r0, #1
 800bc36:	d12b      	bne.n	800bc90 <_printf_float+0x23c>
 800bc38:	e767      	b.n	800bb0a <_printf_float+0xb6>
 800bc3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc3e:	f240 80dd 	bls.w	800bdfc <_printf_float+0x3a8>
 800bc42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bc46:	2200      	movs	r2, #0
 800bc48:	2300      	movs	r3, #0
 800bc4a:	f7f4 ff45 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d033      	beq.n	800bcba <_printf_float+0x266>
 800bc52:	4a37      	ldr	r2, [pc, #220]	@ (800bd30 <_printf_float+0x2dc>)
 800bc54:	2301      	movs	r3, #1
 800bc56:	4631      	mov	r1, r6
 800bc58:	4628      	mov	r0, r5
 800bc5a:	47b8      	blx	r7
 800bc5c:	3001      	adds	r0, #1
 800bc5e:	f43f af54 	beq.w	800bb0a <_printf_float+0xb6>
 800bc62:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bc66:	4543      	cmp	r3, r8
 800bc68:	db02      	blt.n	800bc70 <_printf_float+0x21c>
 800bc6a:	6823      	ldr	r3, [r4, #0]
 800bc6c:	07d8      	lsls	r0, r3, #31
 800bc6e:	d50f      	bpl.n	800bc90 <_printf_float+0x23c>
 800bc70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc74:	4631      	mov	r1, r6
 800bc76:	4628      	mov	r0, r5
 800bc78:	47b8      	blx	r7
 800bc7a:	3001      	adds	r0, #1
 800bc7c:	f43f af45 	beq.w	800bb0a <_printf_float+0xb6>
 800bc80:	f04f 0900 	mov.w	r9, #0
 800bc84:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc88:	f104 0a1a 	add.w	sl, r4, #26
 800bc8c:	45c8      	cmp	r8, r9
 800bc8e:	dc09      	bgt.n	800bca4 <_printf_float+0x250>
 800bc90:	6823      	ldr	r3, [r4, #0]
 800bc92:	079b      	lsls	r3, r3, #30
 800bc94:	f100 8103 	bmi.w	800be9e <_printf_float+0x44a>
 800bc98:	68e0      	ldr	r0, [r4, #12]
 800bc9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc9c:	4298      	cmp	r0, r3
 800bc9e:	bfb8      	it	lt
 800bca0:	4618      	movlt	r0, r3
 800bca2:	e734      	b.n	800bb0e <_printf_float+0xba>
 800bca4:	2301      	movs	r3, #1
 800bca6:	4652      	mov	r2, sl
 800bca8:	4631      	mov	r1, r6
 800bcaa:	4628      	mov	r0, r5
 800bcac:	47b8      	blx	r7
 800bcae:	3001      	adds	r0, #1
 800bcb0:	f43f af2b 	beq.w	800bb0a <_printf_float+0xb6>
 800bcb4:	f109 0901 	add.w	r9, r9, #1
 800bcb8:	e7e8      	b.n	800bc8c <_printf_float+0x238>
 800bcba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	dc39      	bgt.n	800bd34 <_printf_float+0x2e0>
 800bcc0:	4a1b      	ldr	r2, [pc, #108]	@ (800bd30 <_printf_float+0x2dc>)
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	4631      	mov	r1, r6
 800bcc6:	4628      	mov	r0, r5
 800bcc8:	47b8      	blx	r7
 800bcca:	3001      	adds	r0, #1
 800bccc:	f43f af1d 	beq.w	800bb0a <_printf_float+0xb6>
 800bcd0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bcd4:	ea59 0303 	orrs.w	r3, r9, r3
 800bcd8:	d102      	bne.n	800bce0 <_printf_float+0x28c>
 800bcda:	6823      	ldr	r3, [r4, #0]
 800bcdc:	07d9      	lsls	r1, r3, #31
 800bcde:	d5d7      	bpl.n	800bc90 <_printf_float+0x23c>
 800bce0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bce4:	4631      	mov	r1, r6
 800bce6:	4628      	mov	r0, r5
 800bce8:	47b8      	blx	r7
 800bcea:	3001      	adds	r0, #1
 800bcec:	f43f af0d 	beq.w	800bb0a <_printf_float+0xb6>
 800bcf0:	f04f 0a00 	mov.w	sl, #0
 800bcf4:	f104 0b1a 	add.w	fp, r4, #26
 800bcf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcfa:	425b      	negs	r3, r3
 800bcfc:	4553      	cmp	r3, sl
 800bcfe:	dc01      	bgt.n	800bd04 <_printf_float+0x2b0>
 800bd00:	464b      	mov	r3, r9
 800bd02:	e793      	b.n	800bc2c <_printf_float+0x1d8>
 800bd04:	2301      	movs	r3, #1
 800bd06:	465a      	mov	r2, fp
 800bd08:	4631      	mov	r1, r6
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	47b8      	blx	r7
 800bd0e:	3001      	adds	r0, #1
 800bd10:	f43f aefb 	beq.w	800bb0a <_printf_float+0xb6>
 800bd14:	f10a 0a01 	add.w	sl, sl, #1
 800bd18:	e7ee      	b.n	800bcf8 <_printf_float+0x2a4>
 800bd1a:	bf00      	nop
 800bd1c:	7fefffff 	.word	0x7fefffff
 800bd20:	0800eb5c 	.word	0x0800eb5c
 800bd24:	0800eb60 	.word	0x0800eb60
 800bd28:	0800eb64 	.word	0x0800eb64
 800bd2c:	0800eb68 	.word	0x0800eb68
 800bd30:	0800eb6c 	.word	0x0800eb6c
 800bd34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bd3a:	4553      	cmp	r3, sl
 800bd3c:	bfa8      	it	ge
 800bd3e:	4653      	movge	r3, sl
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	4699      	mov	r9, r3
 800bd44:	dc36      	bgt.n	800bdb4 <_printf_float+0x360>
 800bd46:	f04f 0b00 	mov.w	fp, #0
 800bd4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd4e:	f104 021a 	add.w	r2, r4, #26
 800bd52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd54:	9306      	str	r3, [sp, #24]
 800bd56:	eba3 0309 	sub.w	r3, r3, r9
 800bd5a:	455b      	cmp	r3, fp
 800bd5c:	dc31      	bgt.n	800bdc2 <_printf_float+0x36e>
 800bd5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd60:	459a      	cmp	sl, r3
 800bd62:	dc3a      	bgt.n	800bdda <_printf_float+0x386>
 800bd64:	6823      	ldr	r3, [r4, #0]
 800bd66:	07da      	lsls	r2, r3, #31
 800bd68:	d437      	bmi.n	800bdda <_printf_float+0x386>
 800bd6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd6c:	ebaa 0903 	sub.w	r9, sl, r3
 800bd70:	9b06      	ldr	r3, [sp, #24]
 800bd72:	ebaa 0303 	sub.w	r3, sl, r3
 800bd76:	4599      	cmp	r9, r3
 800bd78:	bfa8      	it	ge
 800bd7a:	4699      	movge	r9, r3
 800bd7c:	f1b9 0f00 	cmp.w	r9, #0
 800bd80:	dc33      	bgt.n	800bdea <_printf_float+0x396>
 800bd82:	f04f 0800 	mov.w	r8, #0
 800bd86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd8a:	f104 0b1a 	add.w	fp, r4, #26
 800bd8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd90:	ebaa 0303 	sub.w	r3, sl, r3
 800bd94:	eba3 0309 	sub.w	r3, r3, r9
 800bd98:	4543      	cmp	r3, r8
 800bd9a:	f77f af79 	ble.w	800bc90 <_printf_float+0x23c>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	465a      	mov	r2, fp
 800bda2:	4631      	mov	r1, r6
 800bda4:	4628      	mov	r0, r5
 800bda6:	47b8      	blx	r7
 800bda8:	3001      	adds	r0, #1
 800bdaa:	f43f aeae 	beq.w	800bb0a <_printf_float+0xb6>
 800bdae:	f108 0801 	add.w	r8, r8, #1
 800bdb2:	e7ec      	b.n	800bd8e <_printf_float+0x33a>
 800bdb4:	4642      	mov	r2, r8
 800bdb6:	4631      	mov	r1, r6
 800bdb8:	4628      	mov	r0, r5
 800bdba:	47b8      	blx	r7
 800bdbc:	3001      	adds	r0, #1
 800bdbe:	d1c2      	bne.n	800bd46 <_printf_float+0x2f2>
 800bdc0:	e6a3      	b.n	800bb0a <_printf_float+0xb6>
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	4631      	mov	r1, r6
 800bdc6:	4628      	mov	r0, r5
 800bdc8:	9206      	str	r2, [sp, #24]
 800bdca:	47b8      	blx	r7
 800bdcc:	3001      	adds	r0, #1
 800bdce:	f43f ae9c 	beq.w	800bb0a <_printf_float+0xb6>
 800bdd2:	9a06      	ldr	r2, [sp, #24]
 800bdd4:	f10b 0b01 	add.w	fp, fp, #1
 800bdd8:	e7bb      	b.n	800bd52 <_printf_float+0x2fe>
 800bdda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdde:	4631      	mov	r1, r6
 800bde0:	4628      	mov	r0, r5
 800bde2:	47b8      	blx	r7
 800bde4:	3001      	adds	r0, #1
 800bde6:	d1c0      	bne.n	800bd6a <_printf_float+0x316>
 800bde8:	e68f      	b.n	800bb0a <_printf_float+0xb6>
 800bdea:	9a06      	ldr	r2, [sp, #24]
 800bdec:	464b      	mov	r3, r9
 800bdee:	4442      	add	r2, r8
 800bdf0:	4631      	mov	r1, r6
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	47b8      	blx	r7
 800bdf6:	3001      	adds	r0, #1
 800bdf8:	d1c3      	bne.n	800bd82 <_printf_float+0x32e>
 800bdfa:	e686      	b.n	800bb0a <_printf_float+0xb6>
 800bdfc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800be00:	f1ba 0f01 	cmp.w	sl, #1
 800be04:	dc01      	bgt.n	800be0a <_printf_float+0x3b6>
 800be06:	07db      	lsls	r3, r3, #31
 800be08:	d536      	bpl.n	800be78 <_printf_float+0x424>
 800be0a:	2301      	movs	r3, #1
 800be0c:	4642      	mov	r2, r8
 800be0e:	4631      	mov	r1, r6
 800be10:	4628      	mov	r0, r5
 800be12:	47b8      	blx	r7
 800be14:	3001      	adds	r0, #1
 800be16:	f43f ae78 	beq.w	800bb0a <_printf_float+0xb6>
 800be1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be1e:	4631      	mov	r1, r6
 800be20:	4628      	mov	r0, r5
 800be22:	47b8      	blx	r7
 800be24:	3001      	adds	r0, #1
 800be26:	f43f ae70 	beq.w	800bb0a <_printf_float+0xb6>
 800be2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800be2e:	2200      	movs	r2, #0
 800be30:	2300      	movs	r3, #0
 800be32:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be36:	f7f4 fe4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800be3a:	b9c0      	cbnz	r0, 800be6e <_printf_float+0x41a>
 800be3c:	4653      	mov	r3, sl
 800be3e:	f108 0201 	add.w	r2, r8, #1
 800be42:	4631      	mov	r1, r6
 800be44:	4628      	mov	r0, r5
 800be46:	47b8      	blx	r7
 800be48:	3001      	adds	r0, #1
 800be4a:	d10c      	bne.n	800be66 <_printf_float+0x412>
 800be4c:	e65d      	b.n	800bb0a <_printf_float+0xb6>
 800be4e:	2301      	movs	r3, #1
 800be50:	465a      	mov	r2, fp
 800be52:	4631      	mov	r1, r6
 800be54:	4628      	mov	r0, r5
 800be56:	47b8      	blx	r7
 800be58:	3001      	adds	r0, #1
 800be5a:	f43f ae56 	beq.w	800bb0a <_printf_float+0xb6>
 800be5e:	f108 0801 	add.w	r8, r8, #1
 800be62:	45d0      	cmp	r8, sl
 800be64:	dbf3      	blt.n	800be4e <_printf_float+0x3fa>
 800be66:	464b      	mov	r3, r9
 800be68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800be6c:	e6df      	b.n	800bc2e <_printf_float+0x1da>
 800be6e:	f04f 0800 	mov.w	r8, #0
 800be72:	f104 0b1a 	add.w	fp, r4, #26
 800be76:	e7f4      	b.n	800be62 <_printf_float+0x40e>
 800be78:	2301      	movs	r3, #1
 800be7a:	4642      	mov	r2, r8
 800be7c:	e7e1      	b.n	800be42 <_printf_float+0x3ee>
 800be7e:	2301      	movs	r3, #1
 800be80:	464a      	mov	r2, r9
 800be82:	4631      	mov	r1, r6
 800be84:	4628      	mov	r0, r5
 800be86:	47b8      	blx	r7
 800be88:	3001      	adds	r0, #1
 800be8a:	f43f ae3e 	beq.w	800bb0a <_printf_float+0xb6>
 800be8e:	f108 0801 	add.w	r8, r8, #1
 800be92:	68e3      	ldr	r3, [r4, #12]
 800be94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be96:	1a5b      	subs	r3, r3, r1
 800be98:	4543      	cmp	r3, r8
 800be9a:	dcf0      	bgt.n	800be7e <_printf_float+0x42a>
 800be9c:	e6fc      	b.n	800bc98 <_printf_float+0x244>
 800be9e:	f04f 0800 	mov.w	r8, #0
 800bea2:	f104 0919 	add.w	r9, r4, #25
 800bea6:	e7f4      	b.n	800be92 <_printf_float+0x43e>

0800bea8 <_printf_common>:
 800bea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beac:	4616      	mov	r6, r2
 800beae:	4698      	mov	r8, r3
 800beb0:	688a      	ldr	r2, [r1, #8]
 800beb2:	690b      	ldr	r3, [r1, #16]
 800beb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800beb8:	4293      	cmp	r3, r2
 800beba:	bfb8      	it	lt
 800bebc:	4613      	movlt	r3, r2
 800bebe:	6033      	str	r3, [r6, #0]
 800bec0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bec4:	4607      	mov	r7, r0
 800bec6:	460c      	mov	r4, r1
 800bec8:	b10a      	cbz	r2, 800bece <_printf_common+0x26>
 800beca:	3301      	adds	r3, #1
 800becc:	6033      	str	r3, [r6, #0]
 800bece:	6823      	ldr	r3, [r4, #0]
 800bed0:	0699      	lsls	r1, r3, #26
 800bed2:	bf42      	ittt	mi
 800bed4:	6833      	ldrmi	r3, [r6, #0]
 800bed6:	3302      	addmi	r3, #2
 800bed8:	6033      	strmi	r3, [r6, #0]
 800beda:	6825      	ldr	r5, [r4, #0]
 800bedc:	f015 0506 	ands.w	r5, r5, #6
 800bee0:	d106      	bne.n	800bef0 <_printf_common+0x48>
 800bee2:	f104 0a19 	add.w	sl, r4, #25
 800bee6:	68e3      	ldr	r3, [r4, #12]
 800bee8:	6832      	ldr	r2, [r6, #0]
 800beea:	1a9b      	subs	r3, r3, r2
 800beec:	42ab      	cmp	r3, r5
 800beee:	dc26      	bgt.n	800bf3e <_printf_common+0x96>
 800bef0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bef4:	6822      	ldr	r2, [r4, #0]
 800bef6:	3b00      	subs	r3, #0
 800bef8:	bf18      	it	ne
 800befa:	2301      	movne	r3, #1
 800befc:	0692      	lsls	r2, r2, #26
 800befe:	d42b      	bmi.n	800bf58 <_printf_common+0xb0>
 800bf00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf04:	4641      	mov	r1, r8
 800bf06:	4638      	mov	r0, r7
 800bf08:	47c8      	blx	r9
 800bf0a:	3001      	adds	r0, #1
 800bf0c:	d01e      	beq.n	800bf4c <_printf_common+0xa4>
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	6922      	ldr	r2, [r4, #16]
 800bf12:	f003 0306 	and.w	r3, r3, #6
 800bf16:	2b04      	cmp	r3, #4
 800bf18:	bf02      	ittt	eq
 800bf1a:	68e5      	ldreq	r5, [r4, #12]
 800bf1c:	6833      	ldreq	r3, [r6, #0]
 800bf1e:	1aed      	subeq	r5, r5, r3
 800bf20:	68a3      	ldr	r3, [r4, #8]
 800bf22:	bf0c      	ite	eq
 800bf24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf28:	2500      	movne	r5, #0
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	bfc4      	itt	gt
 800bf2e:	1a9b      	subgt	r3, r3, r2
 800bf30:	18ed      	addgt	r5, r5, r3
 800bf32:	2600      	movs	r6, #0
 800bf34:	341a      	adds	r4, #26
 800bf36:	42b5      	cmp	r5, r6
 800bf38:	d11a      	bne.n	800bf70 <_printf_common+0xc8>
 800bf3a:	2000      	movs	r0, #0
 800bf3c:	e008      	b.n	800bf50 <_printf_common+0xa8>
 800bf3e:	2301      	movs	r3, #1
 800bf40:	4652      	mov	r2, sl
 800bf42:	4641      	mov	r1, r8
 800bf44:	4638      	mov	r0, r7
 800bf46:	47c8      	blx	r9
 800bf48:	3001      	adds	r0, #1
 800bf4a:	d103      	bne.n	800bf54 <_printf_common+0xac>
 800bf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf54:	3501      	adds	r5, #1
 800bf56:	e7c6      	b.n	800bee6 <_printf_common+0x3e>
 800bf58:	18e1      	adds	r1, r4, r3
 800bf5a:	1c5a      	adds	r2, r3, #1
 800bf5c:	2030      	movs	r0, #48	@ 0x30
 800bf5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bf62:	4422      	add	r2, r4
 800bf64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bf68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf6c:	3302      	adds	r3, #2
 800bf6e:	e7c7      	b.n	800bf00 <_printf_common+0x58>
 800bf70:	2301      	movs	r3, #1
 800bf72:	4622      	mov	r2, r4
 800bf74:	4641      	mov	r1, r8
 800bf76:	4638      	mov	r0, r7
 800bf78:	47c8      	blx	r9
 800bf7a:	3001      	adds	r0, #1
 800bf7c:	d0e6      	beq.n	800bf4c <_printf_common+0xa4>
 800bf7e:	3601      	adds	r6, #1
 800bf80:	e7d9      	b.n	800bf36 <_printf_common+0x8e>
	...

0800bf84 <_printf_i>:
 800bf84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf88:	7e0f      	ldrb	r7, [r1, #24]
 800bf8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf8c:	2f78      	cmp	r7, #120	@ 0x78
 800bf8e:	4691      	mov	r9, r2
 800bf90:	4680      	mov	r8, r0
 800bf92:	460c      	mov	r4, r1
 800bf94:	469a      	mov	sl, r3
 800bf96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf9a:	d807      	bhi.n	800bfac <_printf_i+0x28>
 800bf9c:	2f62      	cmp	r7, #98	@ 0x62
 800bf9e:	d80a      	bhi.n	800bfb6 <_printf_i+0x32>
 800bfa0:	2f00      	cmp	r7, #0
 800bfa2:	f000 80d2 	beq.w	800c14a <_printf_i+0x1c6>
 800bfa6:	2f58      	cmp	r7, #88	@ 0x58
 800bfa8:	f000 80b9 	beq.w	800c11e <_printf_i+0x19a>
 800bfac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bfb4:	e03a      	b.n	800c02c <_printf_i+0xa8>
 800bfb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bfba:	2b15      	cmp	r3, #21
 800bfbc:	d8f6      	bhi.n	800bfac <_printf_i+0x28>
 800bfbe:	a101      	add	r1, pc, #4	@ (adr r1, 800bfc4 <_printf_i+0x40>)
 800bfc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfc4:	0800c01d 	.word	0x0800c01d
 800bfc8:	0800c031 	.word	0x0800c031
 800bfcc:	0800bfad 	.word	0x0800bfad
 800bfd0:	0800bfad 	.word	0x0800bfad
 800bfd4:	0800bfad 	.word	0x0800bfad
 800bfd8:	0800bfad 	.word	0x0800bfad
 800bfdc:	0800c031 	.word	0x0800c031
 800bfe0:	0800bfad 	.word	0x0800bfad
 800bfe4:	0800bfad 	.word	0x0800bfad
 800bfe8:	0800bfad 	.word	0x0800bfad
 800bfec:	0800bfad 	.word	0x0800bfad
 800bff0:	0800c131 	.word	0x0800c131
 800bff4:	0800c05b 	.word	0x0800c05b
 800bff8:	0800c0eb 	.word	0x0800c0eb
 800bffc:	0800bfad 	.word	0x0800bfad
 800c000:	0800bfad 	.word	0x0800bfad
 800c004:	0800c153 	.word	0x0800c153
 800c008:	0800bfad 	.word	0x0800bfad
 800c00c:	0800c05b 	.word	0x0800c05b
 800c010:	0800bfad 	.word	0x0800bfad
 800c014:	0800bfad 	.word	0x0800bfad
 800c018:	0800c0f3 	.word	0x0800c0f3
 800c01c:	6833      	ldr	r3, [r6, #0]
 800c01e:	1d1a      	adds	r2, r3, #4
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	6032      	str	r2, [r6, #0]
 800c024:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c028:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c02c:	2301      	movs	r3, #1
 800c02e:	e09d      	b.n	800c16c <_printf_i+0x1e8>
 800c030:	6833      	ldr	r3, [r6, #0]
 800c032:	6820      	ldr	r0, [r4, #0]
 800c034:	1d19      	adds	r1, r3, #4
 800c036:	6031      	str	r1, [r6, #0]
 800c038:	0606      	lsls	r6, r0, #24
 800c03a:	d501      	bpl.n	800c040 <_printf_i+0xbc>
 800c03c:	681d      	ldr	r5, [r3, #0]
 800c03e:	e003      	b.n	800c048 <_printf_i+0xc4>
 800c040:	0645      	lsls	r5, r0, #25
 800c042:	d5fb      	bpl.n	800c03c <_printf_i+0xb8>
 800c044:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c048:	2d00      	cmp	r5, #0
 800c04a:	da03      	bge.n	800c054 <_printf_i+0xd0>
 800c04c:	232d      	movs	r3, #45	@ 0x2d
 800c04e:	426d      	negs	r5, r5
 800c050:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c054:	4859      	ldr	r0, [pc, #356]	@ (800c1bc <_printf_i+0x238>)
 800c056:	230a      	movs	r3, #10
 800c058:	e011      	b.n	800c07e <_printf_i+0xfa>
 800c05a:	6821      	ldr	r1, [r4, #0]
 800c05c:	6833      	ldr	r3, [r6, #0]
 800c05e:	0608      	lsls	r0, r1, #24
 800c060:	f853 5b04 	ldr.w	r5, [r3], #4
 800c064:	d402      	bmi.n	800c06c <_printf_i+0xe8>
 800c066:	0649      	lsls	r1, r1, #25
 800c068:	bf48      	it	mi
 800c06a:	b2ad      	uxthmi	r5, r5
 800c06c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c06e:	4853      	ldr	r0, [pc, #332]	@ (800c1bc <_printf_i+0x238>)
 800c070:	6033      	str	r3, [r6, #0]
 800c072:	bf14      	ite	ne
 800c074:	230a      	movne	r3, #10
 800c076:	2308      	moveq	r3, #8
 800c078:	2100      	movs	r1, #0
 800c07a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c07e:	6866      	ldr	r6, [r4, #4]
 800c080:	60a6      	str	r6, [r4, #8]
 800c082:	2e00      	cmp	r6, #0
 800c084:	bfa2      	ittt	ge
 800c086:	6821      	ldrge	r1, [r4, #0]
 800c088:	f021 0104 	bicge.w	r1, r1, #4
 800c08c:	6021      	strge	r1, [r4, #0]
 800c08e:	b90d      	cbnz	r5, 800c094 <_printf_i+0x110>
 800c090:	2e00      	cmp	r6, #0
 800c092:	d04b      	beq.n	800c12c <_printf_i+0x1a8>
 800c094:	4616      	mov	r6, r2
 800c096:	fbb5 f1f3 	udiv	r1, r5, r3
 800c09a:	fb03 5711 	mls	r7, r3, r1, r5
 800c09e:	5dc7      	ldrb	r7, [r0, r7]
 800c0a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c0a4:	462f      	mov	r7, r5
 800c0a6:	42bb      	cmp	r3, r7
 800c0a8:	460d      	mov	r5, r1
 800c0aa:	d9f4      	bls.n	800c096 <_printf_i+0x112>
 800c0ac:	2b08      	cmp	r3, #8
 800c0ae:	d10b      	bne.n	800c0c8 <_printf_i+0x144>
 800c0b0:	6823      	ldr	r3, [r4, #0]
 800c0b2:	07df      	lsls	r7, r3, #31
 800c0b4:	d508      	bpl.n	800c0c8 <_printf_i+0x144>
 800c0b6:	6923      	ldr	r3, [r4, #16]
 800c0b8:	6861      	ldr	r1, [r4, #4]
 800c0ba:	4299      	cmp	r1, r3
 800c0bc:	bfde      	ittt	le
 800c0be:	2330      	movle	r3, #48	@ 0x30
 800c0c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c0c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c0c8:	1b92      	subs	r2, r2, r6
 800c0ca:	6122      	str	r2, [r4, #16]
 800c0cc:	f8cd a000 	str.w	sl, [sp]
 800c0d0:	464b      	mov	r3, r9
 800c0d2:	aa03      	add	r2, sp, #12
 800c0d4:	4621      	mov	r1, r4
 800c0d6:	4640      	mov	r0, r8
 800c0d8:	f7ff fee6 	bl	800bea8 <_printf_common>
 800c0dc:	3001      	adds	r0, #1
 800c0de:	d14a      	bne.n	800c176 <_printf_i+0x1f2>
 800c0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e4:	b004      	add	sp, #16
 800c0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ea:	6823      	ldr	r3, [r4, #0]
 800c0ec:	f043 0320 	orr.w	r3, r3, #32
 800c0f0:	6023      	str	r3, [r4, #0]
 800c0f2:	4833      	ldr	r0, [pc, #204]	@ (800c1c0 <_printf_i+0x23c>)
 800c0f4:	2778      	movs	r7, #120	@ 0x78
 800c0f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c0fa:	6823      	ldr	r3, [r4, #0]
 800c0fc:	6831      	ldr	r1, [r6, #0]
 800c0fe:	061f      	lsls	r7, r3, #24
 800c100:	f851 5b04 	ldr.w	r5, [r1], #4
 800c104:	d402      	bmi.n	800c10c <_printf_i+0x188>
 800c106:	065f      	lsls	r7, r3, #25
 800c108:	bf48      	it	mi
 800c10a:	b2ad      	uxthmi	r5, r5
 800c10c:	6031      	str	r1, [r6, #0]
 800c10e:	07d9      	lsls	r1, r3, #31
 800c110:	bf44      	itt	mi
 800c112:	f043 0320 	orrmi.w	r3, r3, #32
 800c116:	6023      	strmi	r3, [r4, #0]
 800c118:	b11d      	cbz	r5, 800c122 <_printf_i+0x19e>
 800c11a:	2310      	movs	r3, #16
 800c11c:	e7ac      	b.n	800c078 <_printf_i+0xf4>
 800c11e:	4827      	ldr	r0, [pc, #156]	@ (800c1bc <_printf_i+0x238>)
 800c120:	e7e9      	b.n	800c0f6 <_printf_i+0x172>
 800c122:	6823      	ldr	r3, [r4, #0]
 800c124:	f023 0320 	bic.w	r3, r3, #32
 800c128:	6023      	str	r3, [r4, #0]
 800c12a:	e7f6      	b.n	800c11a <_printf_i+0x196>
 800c12c:	4616      	mov	r6, r2
 800c12e:	e7bd      	b.n	800c0ac <_printf_i+0x128>
 800c130:	6833      	ldr	r3, [r6, #0]
 800c132:	6825      	ldr	r5, [r4, #0]
 800c134:	6961      	ldr	r1, [r4, #20]
 800c136:	1d18      	adds	r0, r3, #4
 800c138:	6030      	str	r0, [r6, #0]
 800c13a:	062e      	lsls	r6, r5, #24
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	d501      	bpl.n	800c144 <_printf_i+0x1c0>
 800c140:	6019      	str	r1, [r3, #0]
 800c142:	e002      	b.n	800c14a <_printf_i+0x1c6>
 800c144:	0668      	lsls	r0, r5, #25
 800c146:	d5fb      	bpl.n	800c140 <_printf_i+0x1bc>
 800c148:	8019      	strh	r1, [r3, #0]
 800c14a:	2300      	movs	r3, #0
 800c14c:	6123      	str	r3, [r4, #16]
 800c14e:	4616      	mov	r6, r2
 800c150:	e7bc      	b.n	800c0cc <_printf_i+0x148>
 800c152:	6833      	ldr	r3, [r6, #0]
 800c154:	1d1a      	adds	r2, r3, #4
 800c156:	6032      	str	r2, [r6, #0]
 800c158:	681e      	ldr	r6, [r3, #0]
 800c15a:	6862      	ldr	r2, [r4, #4]
 800c15c:	2100      	movs	r1, #0
 800c15e:	4630      	mov	r0, r6
 800c160:	f7f4 f83e 	bl	80001e0 <memchr>
 800c164:	b108      	cbz	r0, 800c16a <_printf_i+0x1e6>
 800c166:	1b80      	subs	r0, r0, r6
 800c168:	6060      	str	r0, [r4, #4]
 800c16a:	6863      	ldr	r3, [r4, #4]
 800c16c:	6123      	str	r3, [r4, #16]
 800c16e:	2300      	movs	r3, #0
 800c170:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c174:	e7aa      	b.n	800c0cc <_printf_i+0x148>
 800c176:	6923      	ldr	r3, [r4, #16]
 800c178:	4632      	mov	r2, r6
 800c17a:	4649      	mov	r1, r9
 800c17c:	4640      	mov	r0, r8
 800c17e:	47d0      	blx	sl
 800c180:	3001      	adds	r0, #1
 800c182:	d0ad      	beq.n	800c0e0 <_printf_i+0x15c>
 800c184:	6823      	ldr	r3, [r4, #0]
 800c186:	079b      	lsls	r3, r3, #30
 800c188:	d413      	bmi.n	800c1b2 <_printf_i+0x22e>
 800c18a:	68e0      	ldr	r0, [r4, #12]
 800c18c:	9b03      	ldr	r3, [sp, #12]
 800c18e:	4298      	cmp	r0, r3
 800c190:	bfb8      	it	lt
 800c192:	4618      	movlt	r0, r3
 800c194:	e7a6      	b.n	800c0e4 <_printf_i+0x160>
 800c196:	2301      	movs	r3, #1
 800c198:	4632      	mov	r2, r6
 800c19a:	4649      	mov	r1, r9
 800c19c:	4640      	mov	r0, r8
 800c19e:	47d0      	blx	sl
 800c1a0:	3001      	adds	r0, #1
 800c1a2:	d09d      	beq.n	800c0e0 <_printf_i+0x15c>
 800c1a4:	3501      	adds	r5, #1
 800c1a6:	68e3      	ldr	r3, [r4, #12]
 800c1a8:	9903      	ldr	r1, [sp, #12]
 800c1aa:	1a5b      	subs	r3, r3, r1
 800c1ac:	42ab      	cmp	r3, r5
 800c1ae:	dcf2      	bgt.n	800c196 <_printf_i+0x212>
 800c1b0:	e7eb      	b.n	800c18a <_printf_i+0x206>
 800c1b2:	2500      	movs	r5, #0
 800c1b4:	f104 0619 	add.w	r6, r4, #25
 800c1b8:	e7f5      	b.n	800c1a6 <_printf_i+0x222>
 800c1ba:	bf00      	nop
 800c1bc:	0800eb6e 	.word	0x0800eb6e
 800c1c0:	0800eb7f 	.word	0x0800eb7f

0800c1c4 <std>:
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	b510      	push	{r4, lr}
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	e9c0 3300 	strd	r3, r3, [r0]
 800c1ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1d2:	6083      	str	r3, [r0, #8]
 800c1d4:	8181      	strh	r1, [r0, #12]
 800c1d6:	6643      	str	r3, [r0, #100]	@ 0x64
 800c1d8:	81c2      	strh	r2, [r0, #14]
 800c1da:	6183      	str	r3, [r0, #24]
 800c1dc:	4619      	mov	r1, r3
 800c1de:	2208      	movs	r2, #8
 800c1e0:	305c      	adds	r0, #92	@ 0x5c
 800c1e2:	f000 f928 	bl	800c436 <memset>
 800c1e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c21c <std+0x58>)
 800c1e8:	6263      	str	r3, [r4, #36]	@ 0x24
 800c1ea:	4b0d      	ldr	r3, [pc, #52]	@ (800c220 <std+0x5c>)
 800c1ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c1ee:	4b0d      	ldr	r3, [pc, #52]	@ (800c224 <std+0x60>)
 800c1f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c1f2:	4b0d      	ldr	r3, [pc, #52]	@ (800c228 <std+0x64>)
 800c1f4:	6323      	str	r3, [r4, #48]	@ 0x30
 800c1f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c22c <std+0x68>)
 800c1f8:	6224      	str	r4, [r4, #32]
 800c1fa:	429c      	cmp	r4, r3
 800c1fc:	d006      	beq.n	800c20c <std+0x48>
 800c1fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c202:	4294      	cmp	r4, r2
 800c204:	d002      	beq.n	800c20c <std+0x48>
 800c206:	33d0      	adds	r3, #208	@ 0xd0
 800c208:	429c      	cmp	r4, r3
 800c20a:	d105      	bne.n	800c218 <std+0x54>
 800c20c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c214:	f000 b98c 	b.w	800c530 <__retarget_lock_init_recursive>
 800c218:	bd10      	pop	{r4, pc}
 800c21a:	bf00      	nop
 800c21c:	0800c3b1 	.word	0x0800c3b1
 800c220:	0800c3d3 	.word	0x0800c3d3
 800c224:	0800c40b 	.word	0x0800c40b
 800c228:	0800c42f 	.word	0x0800c42f
 800c22c:	20002064 	.word	0x20002064

0800c230 <stdio_exit_handler>:
 800c230:	4a02      	ldr	r2, [pc, #8]	@ (800c23c <stdio_exit_handler+0xc>)
 800c232:	4903      	ldr	r1, [pc, #12]	@ (800c240 <stdio_exit_handler+0x10>)
 800c234:	4803      	ldr	r0, [pc, #12]	@ (800c244 <stdio_exit_handler+0x14>)
 800c236:	f000 b869 	b.w	800c30c <_fwalk_sglue>
 800c23a:	bf00      	nop
 800c23c:	20000100 	.word	0x20000100
 800c240:	0800de8d 	.word	0x0800de8d
 800c244:	20000110 	.word	0x20000110

0800c248 <cleanup_stdio>:
 800c248:	6841      	ldr	r1, [r0, #4]
 800c24a:	4b0c      	ldr	r3, [pc, #48]	@ (800c27c <cleanup_stdio+0x34>)
 800c24c:	4299      	cmp	r1, r3
 800c24e:	b510      	push	{r4, lr}
 800c250:	4604      	mov	r4, r0
 800c252:	d001      	beq.n	800c258 <cleanup_stdio+0x10>
 800c254:	f001 fe1a 	bl	800de8c <_fflush_r>
 800c258:	68a1      	ldr	r1, [r4, #8]
 800c25a:	4b09      	ldr	r3, [pc, #36]	@ (800c280 <cleanup_stdio+0x38>)
 800c25c:	4299      	cmp	r1, r3
 800c25e:	d002      	beq.n	800c266 <cleanup_stdio+0x1e>
 800c260:	4620      	mov	r0, r4
 800c262:	f001 fe13 	bl	800de8c <_fflush_r>
 800c266:	68e1      	ldr	r1, [r4, #12]
 800c268:	4b06      	ldr	r3, [pc, #24]	@ (800c284 <cleanup_stdio+0x3c>)
 800c26a:	4299      	cmp	r1, r3
 800c26c:	d004      	beq.n	800c278 <cleanup_stdio+0x30>
 800c26e:	4620      	mov	r0, r4
 800c270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c274:	f001 be0a 	b.w	800de8c <_fflush_r>
 800c278:	bd10      	pop	{r4, pc}
 800c27a:	bf00      	nop
 800c27c:	20002064 	.word	0x20002064
 800c280:	200020cc 	.word	0x200020cc
 800c284:	20002134 	.word	0x20002134

0800c288 <global_stdio_init.part.0>:
 800c288:	b510      	push	{r4, lr}
 800c28a:	4b0b      	ldr	r3, [pc, #44]	@ (800c2b8 <global_stdio_init.part.0+0x30>)
 800c28c:	4c0b      	ldr	r4, [pc, #44]	@ (800c2bc <global_stdio_init.part.0+0x34>)
 800c28e:	4a0c      	ldr	r2, [pc, #48]	@ (800c2c0 <global_stdio_init.part.0+0x38>)
 800c290:	601a      	str	r2, [r3, #0]
 800c292:	4620      	mov	r0, r4
 800c294:	2200      	movs	r2, #0
 800c296:	2104      	movs	r1, #4
 800c298:	f7ff ff94 	bl	800c1c4 <std>
 800c29c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	2109      	movs	r1, #9
 800c2a4:	f7ff ff8e 	bl	800c1c4 <std>
 800c2a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c2ac:	2202      	movs	r2, #2
 800c2ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2b2:	2112      	movs	r1, #18
 800c2b4:	f7ff bf86 	b.w	800c1c4 <std>
 800c2b8:	2000219c 	.word	0x2000219c
 800c2bc:	20002064 	.word	0x20002064
 800c2c0:	0800c231 	.word	0x0800c231

0800c2c4 <__sfp_lock_acquire>:
 800c2c4:	4801      	ldr	r0, [pc, #4]	@ (800c2cc <__sfp_lock_acquire+0x8>)
 800c2c6:	f000 b934 	b.w	800c532 <__retarget_lock_acquire_recursive>
 800c2ca:	bf00      	nop
 800c2cc:	200021a5 	.word	0x200021a5

0800c2d0 <__sfp_lock_release>:
 800c2d0:	4801      	ldr	r0, [pc, #4]	@ (800c2d8 <__sfp_lock_release+0x8>)
 800c2d2:	f000 b92f 	b.w	800c534 <__retarget_lock_release_recursive>
 800c2d6:	bf00      	nop
 800c2d8:	200021a5 	.word	0x200021a5

0800c2dc <__sinit>:
 800c2dc:	b510      	push	{r4, lr}
 800c2de:	4604      	mov	r4, r0
 800c2e0:	f7ff fff0 	bl	800c2c4 <__sfp_lock_acquire>
 800c2e4:	6a23      	ldr	r3, [r4, #32]
 800c2e6:	b11b      	cbz	r3, 800c2f0 <__sinit+0x14>
 800c2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2ec:	f7ff bff0 	b.w	800c2d0 <__sfp_lock_release>
 800c2f0:	4b04      	ldr	r3, [pc, #16]	@ (800c304 <__sinit+0x28>)
 800c2f2:	6223      	str	r3, [r4, #32]
 800c2f4:	4b04      	ldr	r3, [pc, #16]	@ (800c308 <__sinit+0x2c>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d1f5      	bne.n	800c2e8 <__sinit+0xc>
 800c2fc:	f7ff ffc4 	bl	800c288 <global_stdio_init.part.0>
 800c300:	e7f2      	b.n	800c2e8 <__sinit+0xc>
 800c302:	bf00      	nop
 800c304:	0800c249 	.word	0x0800c249
 800c308:	2000219c 	.word	0x2000219c

0800c30c <_fwalk_sglue>:
 800c30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c310:	4607      	mov	r7, r0
 800c312:	4688      	mov	r8, r1
 800c314:	4614      	mov	r4, r2
 800c316:	2600      	movs	r6, #0
 800c318:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c31c:	f1b9 0901 	subs.w	r9, r9, #1
 800c320:	d505      	bpl.n	800c32e <_fwalk_sglue+0x22>
 800c322:	6824      	ldr	r4, [r4, #0]
 800c324:	2c00      	cmp	r4, #0
 800c326:	d1f7      	bne.n	800c318 <_fwalk_sglue+0xc>
 800c328:	4630      	mov	r0, r6
 800c32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c32e:	89ab      	ldrh	r3, [r5, #12]
 800c330:	2b01      	cmp	r3, #1
 800c332:	d907      	bls.n	800c344 <_fwalk_sglue+0x38>
 800c334:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c338:	3301      	adds	r3, #1
 800c33a:	d003      	beq.n	800c344 <_fwalk_sglue+0x38>
 800c33c:	4629      	mov	r1, r5
 800c33e:	4638      	mov	r0, r7
 800c340:	47c0      	blx	r8
 800c342:	4306      	orrs	r6, r0
 800c344:	3568      	adds	r5, #104	@ 0x68
 800c346:	e7e9      	b.n	800c31c <_fwalk_sglue+0x10>

0800c348 <sniprintf>:
 800c348:	b40c      	push	{r2, r3}
 800c34a:	b530      	push	{r4, r5, lr}
 800c34c:	4b17      	ldr	r3, [pc, #92]	@ (800c3ac <sniprintf+0x64>)
 800c34e:	1e0c      	subs	r4, r1, #0
 800c350:	681d      	ldr	r5, [r3, #0]
 800c352:	b09d      	sub	sp, #116	@ 0x74
 800c354:	da08      	bge.n	800c368 <sniprintf+0x20>
 800c356:	238b      	movs	r3, #139	@ 0x8b
 800c358:	602b      	str	r3, [r5, #0]
 800c35a:	f04f 30ff 	mov.w	r0, #4294967295
 800c35e:	b01d      	add	sp, #116	@ 0x74
 800c360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c364:	b002      	add	sp, #8
 800c366:	4770      	bx	lr
 800c368:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c36c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c370:	bf14      	ite	ne
 800c372:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c376:	4623      	moveq	r3, r4
 800c378:	9304      	str	r3, [sp, #16]
 800c37a:	9307      	str	r3, [sp, #28]
 800c37c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c380:	9002      	str	r0, [sp, #8]
 800c382:	9006      	str	r0, [sp, #24]
 800c384:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c388:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c38a:	ab21      	add	r3, sp, #132	@ 0x84
 800c38c:	a902      	add	r1, sp, #8
 800c38e:	4628      	mov	r0, r5
 800c390:	9301      	str	r3, [sp, #4]
 800c392:	f001 fbfb 	bl	800db8c <_svfiprintf_r>
 800c396:	1c43      	adds	r3, r0, #1
 800c398:	bfbc      	itt	lt
 800c39a:	238b      	movlt	r3, #139	@ 0x8b
 800c39c:	602b      	strlt	r3, [r5, #0]
 800c39e:	2c00      	cmp	r4, #0
 800c3a0:	d0dd      	beq.n	800c35e <sniprintf+0x16>
 800c3a2:	9b02      	ldr	r3, [sp, #8]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	701a      	strb	r2, [r3, #0]
 800c3a8:	e7d9      	b.n	800c35e <sniprintf+0x16>
 800c3aa:	bf00      	nop
 800c3ac:	2000010c 	.word	0x2000010c

0800c3b0 <__sread>:
 800c3b0:	b510      	push	{r4, lr}
 800c3b2:	460c      	mov	r4, r1
 800c3b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3b8:	f000 f86c 	bl	800c494 <_read_r>
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	bfab      	itete	ge
 800c3c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c3c2:	89a3      	ldrhlt	r3, [r4, #12]
 800c3c4:	181b      	addge	r3, r3, r0
 800c3c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c3ca:	bfac      	ite	ge
 800c3cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c3ce:	81a3      	strhlt	r3, [r4, #12]
 800c3d0:	bd10      	pop	{r4, pc}

0800c3d2 <__swrite>:
 800c3d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d6:	461f      	mov	r7, r3
 800c3d8:	898b      	ldrh	r3, [r1, #12]
 800c3da:	05db      	lsls	r3, r3, #23
 800c3dc:	4605      	mov	r5, r0
 800c3de:	460c      	mov	r4, r1
 800c3e0:	4616      	mov	r6, r2
 800c3e2:	d505      	bpl.n	800c3f0 <__swrite+0x1e>
 800c3e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3e8:	2302      	movs	r3, #2
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	f000 f840 	bl	800c470 <_lseek_r>
 800c3f0:	89a3      	ldrh	r3, [r4, #12]
 800c3f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c3fa:	81a3      	strh	r3, [r4, #12]
 800c3fc:	4632      	mov	r2, r6
 800c3fe:	463b      	mov	r3, r7
 800c400:	4628      	mov	r0, r5
 800c402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c406:	f000 b857 	b.w	800c4b8 <_write_r>

0800c40a <__sseek>:
 800c40a:	b510      	push	{r4, lr}
 800c40c:	460c      	mov	r4, r1
 800c40e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c412:	f000 f82d 	bl	800c470 <_lseek_r>
 800c416:	1c43      	adds	r3, r0, #1
 800c418:	89a3      	ldrh	r3, [r4, #12]
 800c41a:	bf15      	itete	ne
 800c41c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c41e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c422:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c426:	81a3      	strheq	r3, [r4, #12]
 800c428:	bf18      	it	ne
 800c42a:	81a3      	strhne	r3, [r4, #12]
 800c42c:	bd10      	pop	{r4, pc}

0800c42e <__sclose>:
 800c42e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c432:	f000 b80d 	b.w	800c450 <_close_r>

0800c436 <memset>:
 800c436:	4402      	add	r2, r0
 800c438:	4603      	mov	r3, r0
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d100      	bne.n	800c440 <memset+0xa>
 800c43e:	4770      	bx	lr
 800c440:	f803 1b01 	strb.w	r1, [r3], #1
 800c444:	e7f9      	b.n	800c43a <memset+0x4>
	...

0800c448 <_localeconv_r>:
 800c448:	4800      	ldr	r0, [pc, #0]	@ (800c44c <_localeconv_r+0x4>)
 800c44a:	4770      	bx	lr
 800c44c:	2000024c 	.word	0x2000024c

0800c450 <_close_r>:
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	4d06      	ldr	r5, [pc, #24]	@ (800c46c <_close_r+0x1c>)
 800c454:	2300      	movs	r3, #0
 800c456:	4604      	mov	r4, r0
 800c458:	4608      	mov	r0, r1
 800c45a:	602b      	str	r3, [r5, #0]
 800c45c:	f7f5 fdfc 	bl	8002058 <_close>
 800c460:	1c43      	adds	r3, r0, #1
 800c462:	d102      	bne.n	800c46a <_close_r+0x1a>
 800c464:	682b      	ldr	r3, [r5, #0]
 800c466:	b103      	cbz	r3, 800c46a <_close_r+0x1a>
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	bd38      	pop	{r3, r4, r5, pc}
 800c46c:	200021a0 	.word	0x200021a0

0800c470 <_lseek_r>:
 800c470:	b538      	push	{r3, r4, r5, lr}
 800c472:	4d07      	ldr	r5, [pc, #28]	@ (800c490 <_lseek_r+0x20>)
 800c474:	4604      	mov	r4, r0
 800c476:	4608      	mov	r0, r1
 800c478:	4611      	mov	r1, r2
 800c47a:	2200      	movs	r2, #0
 800c47c:	602a      	str	r2, [r5, #0]
 800c47e:	461a      	mov	r2, r3
 800c480:	f7f5 fe11 	bl	80020a6 <_lseek>
 800c484:	1c43      	adds	r3, r0, #1
 800c486:	d102      	bne.n	800c48e <_lseek_r+0x1e>
 800c488:	682b      	ldr	r3, [r5, #0]
 800c48a:	b103      	cbz	r3, 800c48e <_lseek_r+0x1e>
 800c48c:	6023      	str	r3, [r4, #0]
 800c48e:	bd38      	pop	{r3, r4, r5, pc}
 800c490:	200021a0 	.word	0x200021a0

0800c494 <_read_r>:
 800c494:	b538      	push	{r3, r4, r5, lr}
 800c496:	4d07      	ldr	r5, [pc, #28]	@ (800c4b4 <_read_r+0x20>)
 800c498:	4604      	mov	r4, r0
 800c49a:	4608      	mov	r0, r1
 800c49c:	4611      	mov	r1, r2
 800c49e:	2200      	movs	r2, #0
 800c4a0:	602a      	str	r2, [r5, #0]
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	f7f5 fd9f 	bl	8001fe6 <_read>
 800c4a8:	1c43      	adds	r3, r0, #1
 800c4aa:	d102      	bne.n	800c4b2 <_read_r+0x1e>
 800c4ac:	682b      	ldr	r3, [r5, #0]
 800c4ae:	b103      	cbz	r3, 800c4b2 <_read_r+0x1e>
 800c4b0:	6023      	str	r3, [r4, #0]
 800c4b2:	bd38      	pop	{r3, r4, r5, pc}
 800c4b4:	200021a0 	.word	0x200021a0

0800c4b8 <_write_r>:
 800c4b8:	b538      	push	{r3, r4, r5, lr}
 800c4ba:	4d07      	ldr	r5, [pc, #28]	@ (800c4d8 <_write_r+0x20>)
 800c4bc:	4604      	mov	r4, r0
 800c4be:	4608      	mov	r0, r1
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	602a      	str	r2, [r5, #0]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	f7f5 fdaa 	bl	8002020 <_write>
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	d102      	bne.n	800c4d6 <_write_r+0x1e>
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	b103      	cbz	r3, 800c4d6 <_write_r+0x1e>
 800c4d4:	6023      	str	r3, [r4, #0]
 800c4d6:	bd38      	pop	{r3, r4, r5, pc}
 800c4d8:	200021a0 	.word	0x200021a0

0800c4dc <__errno>:
 800c4dc:	4b01      	ldr	r3, [pc, #4]	@ (800c4e4 <__errno+0x8>)
 800c4de:	6818      	ldr	r0, [r3, #0]
 800c4e0:	4770      	bx	lr
 800c4e2:	bf00      	nop
 800c4e4:	2000010c 	.word	0x2000010c

0800c4e8 <__libc_init_array>:
 800c4e8:	b570      	push	{r4, r5, r6, lr}
 800c4ea:	4d0d      	ldr	r5, [pc, #52]	@ (800c520 <__libc_init_array+0x38>)
 800c4ec:	4c0d      	ldr	r4, [pc, #52]	@ (800c524 <__libc_init_array+0x3c>)
 800c4ee:	1b64      	subs	r4, r4, r5
 800c4f0:	10a4      	asrs	r4, r4, #2
 800c4f2:	2600      	movs	r6, #0
 800c4f4:	42a6      	cmp	r6, r4
 800c4f6:	d109      	bne.n	800c50c <__libc_init_array+0x24>
 800c4f8:	4d0b      	ldr	r5, [pc, #44]	@ (800c528 <__libc_init_array+0x40>)
 800c4fa:	4c0c      	ldr	r4, [pc, #48]	@ (800c52c <__libc_init_array+0x44>)
 800c4fc:	f002 fad0 	bl	800eaa0 <_init>
 800c500:	1b64      	subs	r4, r4, r5
 800c502:	10a4      	asrs	r4, r4, #2
 800c504:	2600      	movs	r6, #0
 800c506:	42a6      	cmp	r6, r4
 800c508:	d105      	bne.n	800c516 <__libc_init_array+0x2e>
 800c50a:	bd70      	pop	{r4, r5, r6, pc}
 800c50c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c510:	4798      	blx	r3
 800c512:	3601      	adds	r6, #1
 800c514:	e7ee      	b.n	800c4f4 <__libc_init_array+0xc>
 800c516:	f855 3b04 	ldr.w	r3, [r5], #4
 800c51a:	4798      	blx	r3
 800c51c:	3601      	adds	r6, #1
 800c51e:	e7f2      	b.n	800c506 <__libc_init_array+0x1e>
 800c520:	0800ef48 	.word	0x0800ef48
 800c524:	0800ef48 	.word	0x0800ef48
 800c528:	0800ef48 	.word	0x0800ef48
 800c52c:	0800ef4c 	.word	0x0800ef4c

0800c530 <__retarget_lock_init_recursive>:
 800c530:	4770      	bx	lr

0800c532 <__retarget_lock_acquire_recursive>:
 800c532:	4770      	bx	lr

0800c534 <__retarget_lock_release_recursive>:
 800c534:	4770      	bx	lr

0800c536 <quorem>:
 800c536:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c53a:	6903      	ldr	r3, [r0, #16]
 800c53c:	690c      	ldr	r4, [r1, #16]
 800c53e:	42a3      	cmp	r3, r4
 800c540:	4607      	mov	r7, r0
 800c542:	db7e      	blt.n	800c642 <quorem+0x10c>
 800c544:	3c01      	subs	r4, #1
 800c546:	f101 0814 	add.w	r8, r1, #20
 800c54a:	00a3      	lsls	r3, r4, #2
 800c54c:	f100 0514 	add.w	r5, r0, #20
 800c550:	9300      	str	r3, [sp, #0]
 800c552:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c556:	9301      	str	r3, [sp, #4]
 800c558:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c55c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c560:	3301      	adds	r3, #1
 800c562:	429a      	cmp	r2, r3
 800c564:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c568:	fbb2 f6f3 	udiv	r6, r2, r3
 800c56c:	d32e      	bcc.n	800c5cc <quorem+0x96>
 800c56e:	f04f 0a00 	mov.w	sl, #0
 800c572:	46c4      	mov	ip, r8
 800c574:	46ae      	mov	lr, r5
 800c576:	46d3      	mov	fp, sl
 800c578:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c57c:	b298      	uxth	r0, r3
 800c57e:	fb06 a000 	mla	r0, r6, r0, sl
 800c582:	0c02      	lsrs	r2, r0, #16
 800c584:	0c1b      	lsrs	r3, r3, #16
 800c586:	fb06 2303 	mla	r3, r6, r3, r2
 800c58a:	f8de 2000 	ldr.w	r2, [lr]
 800c58e:	b280      	uxth	r0, r0
 800c590:	b292      	uxth	r2, r2
 800c592:	1a12      	subs	r2, r2, r0
 800c594:	445a      	add	r2, fp
 800c596:	f8de 0000 	ldr.w	r0, [lr]
 800c59a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c5a4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c5a8:	b292      	uxth	r2, r2
 800c5aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c5ae:	45e1      	cmp	r9, ip
 800c5b0:	f84e 2b04 	str.w	r2, [lr], #4
 800c5b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c5b8:	d2de      	bcs.n	800c578 <quorem+0x42>
 800c5ba:	9b00      	ldr	r3, [sp, #0]
 800c5bc:	58eb      	ldr	r3, [r5, r3]
 800c5be:	b92b      	cbnz	r3, 800c5cc <quorem+0x96>
 800c5c0:	9b01      	ldr	r3, [sp, #4]
 800c5c2:	3b04      	subs	r3, #4
 800c5c4:	429d      	cmp	r5, r3
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	d32f      	bcc.n	800c62a <quorem+0xf4>
 800c5ca:	613c      	str	r4, [r7, #16]
 800c5cc:	4638      	mov	r0, r7
 800c5ce:	f001 f979 	bl	800d8c4 <__mcmp>
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	db25      	blt.n	800c622 <quorem+0xec>
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	2000      	movs	r0, #0
 800c5da:	f858 2b04 	ldr.w	r2, [r8], #4
 800c5de:	f8d1 c000 	ldr.w	ip, [r1]
 800c5e2:	fa1f fe82 	uxth.w	lr, r2
 800c5e6:	fa1f f38c 	uxth.w	r3, ip
 800c5ea:	eba3 030e 	sub.w	r3, r3, lr
 800c5ee:	4403      	add	r3, r0
 800c5f0:	0c12      	lsrs	r2, r2, #16
 800c5f2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c5f6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c600:	45c1      	cmp	r9, r8
 800c602:	f841 3b04 	str.w	r3, [r1], #4
 800c606:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c60a:	d2e6      	bcs.n	800c5da <quorem+0xa4>
 800c60c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c610:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c614:	b922      	cbnz	r2, 800c620 <quorem+0xea>
 800c616:	3b04      	subs	r3, #4
 800c618:	429d      	cmp	r5, r3
 800c61a:	461a      	mov	r2, r3
 800c61c:	d30b      	bcc.n	800c636 <quorem+0x100>
 800c61e:	613c      	str	r4, [r7, #16]
 800c620:	3601      	adds	r6, #1
 800c622:	4630      	mov	r0, r6
 800c624:	b003      	add	sp, #12
 800c626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c62a:	6812      	ldr	r2, [r2, #0]
 800c62c:	3b04      	subs	r3, #4
 800c62e:	2a00      	cmp	r2, #0
 800c630:	d1cb      	bne.n	800c5ca <quorem+0x94>
 800c632:	3c01      	subs	r4, #1
 800c634:	e7c6      	b.n	800c5c4 <quorem+0x8e>
 800c636:	6812      	ldr	r2, [r2, #0]
 800c638:	3b04      	subs	r3, #4
 800c63a:	2a00      	cmp	r2, #0
 800c63c:	d1ef      	bne.n	800c61e <quorem+0xe8>
 800c63e:	3c01      	subs	r4, #1
 800c640:	e7ea      	b.n	800c618 <quorem+0xe2>
 800c642:	2000      	movs	r0, #0
 800c644:	e7ee      	b.n	800c624 <quorem+0xee>
	...

0800c648 <_dtoa_r>:
 800c648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c64c:	69c7      	ldr	r7, [r0, #28]
 800c64e:	b099      	sub	sp, #100	@ 0x64
 800c650:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c654:	ec55 4b10 	vmov	r4, r5, d0
 800c658:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c65a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c65c:	4683      	mov	fp, r0
 800c65e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c660:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c662:	b97f      	cbnz	r7, 800c684 <_dtoa_r+0x3c>
 800c664:	2010      	movs	r0, #16
 800c666:	f000 fdfd 	bl	800d264 <malloc>
 800c66a:	4602      	mov	r2, r0
 800c66c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c670:	b920      	cbnz	r0, 800c67c <_dtoa_r+0x34>
 800c672:	4ba7      	ldr	r3, [pc, #668]	@ (800c910 <_dtoa_r+0x2c8>)
 800c674:	21ef      	movs	r1, #239	@ 0xef
 800c676:	48a7      	ldr	r0, [pc, #668]	@ (800c914 <_dtoa_r+0x2cc>)
 800c678:	f001 fc68 	bl	800df4c <__assert_func>
 800c67c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c680:	6007      	str	r7, [r0, #0]
 800c682:	60c7      	str	r7, [r0, #12]
 800c684:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c688:	6819      	ldr	r1, [r3, #0]
 800c68a:	b159      	cbz	r1, 800c6a4 <_dtoa_r+0x5c>
 800c68c:	685a      	ldr	r2, [r3, #4]
 800c68e:	604a      	str	r2, [r1, #4]
 800c690:	2301      	movs	r3, #1
 800c692:	4093      	lsls	r3, r2
 800c694:	608b      	str	r3, [r1, #8]
 800c696:	4658      	mov	r0, fp
 800c698:	f000 feda 	bl	800d450 <_Bfree>
 800c69c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	1e2b      	subs	r3, r5, #0
 800c6a6:	bfb9      	ittee	lt
 800c6a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c6ac:	9303      	strlt	r3, [sp, #12]
 800c6ae:	2300      	movge	r3, #0
 800c6b0:	6033      	strge	r3, [r6, #0]
 800c6b2:	9f03      	ldr	r7, [sp, #12]
 800c6b4:	4b98      	ldr	r3, [pc, #608]	@ (800c918 <_dtoa_r+0x2d0>)
 800c6b6:	bfbc      	itt	lt
 800c6b8:	2201      	movlt	r2, #1
 800c6ba:	6032      	strlt	r2, [r6, #0]
 800c6bc:	43bb      	bics	r3, r7
 800c6be:	d112      	bne.n	800c6e6 <_dtoa_r+0x9e>
 800c6c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c6c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c6c6:	6013      	str	r3, [r2, #0]
 800c6c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c6cc:	4323      	orrs	r3, r4
 800c6ce:	f000 854d 	beq.w	800d16c <_dtoa_r+0xb24>
 800c6d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c6d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c92c <_dtoa_r+0x2e4>
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f000 854f 	beq.w	800d17c <_dtoa_r+0xb34>
 800c6de:	f10a 0303 	add.w	r3, sl, #3
 800c6e2:	f000 bd49 	b.w	800d178 <_dtoa_r+0xb30>
 800c6e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	ec51 0b17 	vmov	r0, r1, d7
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c6f6:	f7f4 f9ef 	bl	8000ad8 <__aeabi_dcmpeq>
 800c6fa:	4680      	mov	r8, r0
 800c6fc:	b158      	cbz	r0, 800c716 <_dtoa_r+0xce>
 800c6fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c700:	2301      	movs	r3, #1
 800c702:	6013      	str	r3, [r2, #0]
 800c704:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c706:	b113      	cbz	r3, 800c70e <_dtoa_r+0xc6>
 800c708:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c70a:	4b84      	ldr	r3, [pc, #528]	@ (800c91c <_dtoa_r+0x2d4>)
 800c70c:	6013      	str	r3, [r2, #0]
 800c70e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c930 <_dtoa_r+0x2e8>
 800c712:	f000 bd33 	b.w	800d17c <_dtoa_r+0xb34>
 800c716:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c71a:	aa16      	add	r2, sp, #88	@ 0x58
 800c71c:	a917      	add	r1, sp, #92	@ 0x5c
 800c71e:	4658      	mov	r0, fp
 800c720:	f001 f980 	bl	800da24 <__d2b>
 800c724:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c728:	4681      	mov	r9, r0
 800c72a:	2e00      	cmp	r6, #0
 800c72c:	d077      	beq.n	800c81e <_dtoa_r+0x1d6>
 800c72e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c730:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c738:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c73c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c740:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c744:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c748:	4619      	mov	r1, r3
 800c74a:	2200      	movs	r2, #0
 800c74c:	4b74      	ldr	r3, [pc, #464]	@ (800c920 <_dtoa_r+0x2d8>)
 800c74e:	f7f3 fda3 	bl	8000298 <__aeabi_dsub>
 800c752:	a369      	add	r3, pc, #420	@ (adr r3, 800c8f8 <_dtoa_r+0x2b0>)
 800c754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c758:	f7f3 ff56 	bl	8000608 <__aeabi_dmul>
 800c75c:	a368      	add	r3, pc, #416	@ (adr r3, 800c900 <_dtoa_r+0x2b8>)
 800c75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c762:	f7f3 fd9b 	bl	800029c <__adddf3>
 800c766:	4604      	mov	r4, r0
 800c768:	4630      	mov	r0, r6
 800c76a:	460d      	mov	r5, r1
 800c76c:	f7f3 fee2 	bl	8000534 <__aeabi_i2d>
 800c770:	a365      	add	r3, pc, #404	@ (adr r3, 800c908 <_dtoa_r+0x2c0>)
 800c772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c776:	f7f3 ff47 	bl	8000608 <__aeabi_dmul>
 800c77a:	4602      	mov	r2, r0
 800c77c:	460b      	mov	r3, r1
 800c77e:	4620      	mov	r0, r4
 800c780:	4629      	mov	r1, r5
 800c782:	f7f3 fd8b 	bl	800029c <__adddf3>
 800c786:	4604      	mov	r4, r0
 800c788:	460d      	mov	r5, r1
 800c78a:	f7f4 f9ed 	bl	8000b68 <__aeabi_d2iz>
 800c78e:	2200      	movs	r2, #0
 800c790:	4607      	mov	r7, r0
 800c792:	2300      	movs	r3, #0
 800c794:	4620      	mov	r0, r4
 800c796:	4629      	mov	r1, r5
 800c798:	f7f4 f9a8 	bl	8000aec <__aeabi_dcmplt>
 800c79c:	b140      	cbz	r0, 800c7b0 <_dtoa_r+0x168>
 800c79e:	4638      	mov	r0, r7
 800c7a0:	f7f3 fec8 	bl	8000534 <__aeabi_i2d>
 800c7a4:	4622      	mov	r2, r4
 800c7a6:	462b      	mov	r3, r5
 800c7a8:	f7f4 f996 	bl	8000ad8 <__aeabi_dcmpeq>
 800c7ac:	b900      	cbnz	r0, 800c7b0 <_dtoa_r+0x168>
 800c7ae:	3f01      	subs	r7, #1
 800c7b0:	2f16      	cmp	r7, #22
 800c7b2:	d851      	bhi.n	800c858 <_dtoa_r+0x210>
 800c7b4:	4b5b      	ldr	r3, [pc, #364]	@ (800c924 <_dtoa_r+0x2dc>)
 800c7b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c7c2:	f7f4 f993 	bl	8000aec <__aeabi_dcmplt>
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	d048      	beq.n	800c85c <_dtoa_r+0x214>
 800c7ca:	3f01      	subs	r7, #1
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	9312      	str	r3, [sp, #72]	@ 0x48
 800c7d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c7d2:	1b9b      	subs	r3, r3, r6
 800c7d4:	1e5a      	subs	r2, r3, #1
 800c7d6:	bf44      	itt	mi
 800c7d8:	f1c3 0801 	rsbmi	r8, r3, #1
 800c7dc:	2300      	movmi	r3, #0
 800c7de:	9208      	str	r2, [sp, #32]
 800c7e0:	bf54      	ite	pl
 800c7e2:	f04f 0800 	movpl.w	r8, #0
 800c7e6:	9308      	strmi	r3, [sp, #32]
 800c7e8:	2f00      	cmp	r7, #0
 800c7ea:	db39      	blt.n	800c860 <_dtoa_r+0x218>
 800c7ec:	9b08      	ldr	r3, [sp, #32]
 800c7ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c7f0:	443b      	add	r3, r7
 800c7f2:	9308      	str	r3, [sp, #32]
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7fa:	2b09      	cmp	r3, #9
 800c7fc:	d864      	bhi.n	800c8c8 <_dtoa_r+0x280>
 800c7fe:	2b05      	cmp	r3, #5
 800c800:	bfc4      	itt	gt
 800c802:	3b04      	subgt	r3, #4
 800c804:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c808:	f1a3 0302 	sub.w	r3, r3, #2
 800c80c:	bfcc      	ite	gt
 800c80e:	2400      	movgt	r4, #0
 800c810:	2401      	movle	r4, #1
 800c812:	2b03      	cmp	r3, #3
 800c814:	d863      	bhi.n	800c8de <_dtoa_r+0x296>
 800c816:	e8df f003 	tbb	[pc, r3]
 800c81a:	372a      	.short	0x372a
 800c81c:	5535      	.short	0x5535
 800c81e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c822:	441e      	add	r6, r3
 800c824:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c828:	2b20      	cmp	r3, #32
 800c82a:	bfc1      	itttt	gt
 800c82c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c830:	409f      	lslgt	r7, r3
 800c832:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c836:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c83a:	bfd6      	itet	le
 800c83c:	f1c3 0320 	rsble	r3, r3, #32
 800c840:	ea47 0003 	orrgt.w	r0, r7, r3
 800c844:	fa04 f003 	lslle.w	r0, r4, r3
 800c848:	f7f3 fe64 	bl	8000514 <__aeabi_ui2d>
 800c84c:	2201      	movs	r2, #1
 800c84e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c852:	3e01      	subs	r6, #1
 800c854:	9214      	str	r2, [sp, #80]	@ 0x50
 800c856:	e777      	b.n	800c748 <_dtoa_r+0x100>
 800c858:	2301      	movs	r3, #1
 800c85a:	e7b8      	b.n	800c7ce <_dtoa_r+0x186>
 800c85c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c85e:	e7b7      	b.n	800c7d0 <_dtoa_r+0x188>
 800c860:	427b      	negs	r3, r7
 800c862:	930a      	str	r3, [sp, #40]	@ 0x28
 800c864:	2300      	movs	r3, #0
 800c866:	eba8 0807 	sub.w	r8, r8, r7
 800c86a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c86c:	e7c4      	b.n	800c7f8 <_dtoa_r+0x1b0>
 800c86e:	2300      	movs	r3, #0
 800c870:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c872:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c874:	2b00      	cmp	r3, #0
 800c876:	dc35      	bgt.n	800c8e4 <_dtoa_r+0x29c>
 800c878:	2301      	movs	r3, #1
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	9307      	str	r3, [sp, #28]
 800c87e:	461a      	mov	r2, r3
 800c880:	920e      	str	r2, [sp, #56]	@ 0x38
 800c882:	e00b      	b.n	800c89c <_dtoa_r+0x254>
 800c884:	2301      	movs	r3, #1
 800c886:	e7f3      	b.n	800c870 <_dtoa_r+0x228>
 800c888:	2300      	movs	r3, #0
 800c88a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c88c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c88e:	18fb      	adds	r3, r7, r3
 800c890:	9300      	str	r3, [sp, #0]
 800c892:	3301      	adds	r3, #1
 800c894:	2b01      	cmp	r3, #1
 800c896:	9307      	str	r3, [sp, #28]
 800c898:	bfb8      	it	lt
 800c89a:	2301      	movlt	r3, #1
 800c89c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	2204      	movs	r2, #4
 800c8a4:	f102 0514 	add.w	r5, r2, #20
 800c8a8:	429d      	cmp	r5, r3
 800c8aa:	d91f      	bls.n	800c8ec <_dtoa_r+0x2a4>
 800c8ac:	6041      	str	r1, [r0, #4]
 800c8ae:	4658      	mov	r0, fp
 800c8b0:	f000 fd8e 	bl	800d3d0 <_Balloc>
 800c8b4:	4682      	mov	sl, r0
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	d13c      	bne.n	800c934 <_dtoa_r+0x2ec>
 800c8ba:	4b1b      	ldr	r3, [pc, #108]	@ (800c928 <_dtoa_r+0x2e0>)
 800c8bc:	4602      	mov	r2, r0
 800c8be:	f240 11af 	movw	r1, #431	@ 0x1af
 800c8c2:	e6d8      	b.n	800c676 <_dtoa_r+0x2e>
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e7e0      	b.n	800c88a <_dtoa_r+0x242>
 800c8c8:	2401      	movs	r4, #1
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c8d4:	9300      	str	r3, [sp, #0]
 800c8d6:	9307      	str	r3, [sp, #28]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	2312      	movs	r3, #18
 800c8dc:	e7d0      	b.n	800c880 <_dtoa_r+0x238>
 800c8de:	2301      	movs	r3, #1
 800c8e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8e2:	e7f5      	b.n	800c8d0 <_dtoa_r+0x288>
 800c8e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8e6:	9300      	str	r3, [sp, #0]
 800c8e8:	9307      	str	r3, [sp, #28]
 800c8ea:	e7d7      	b.n	800c89c <_dtoa_r+0x254>
 800c8ec:	3101      	adds	r1, #1
 800c8ee:	0052      	lsls	r2, r2, #1
 800c8f0:	e7d8      	b.n	800c8a4 <_dtoa_r+0x25c>
 800c8f2:	bf00      	nop
 800c8f4:	f3af 8000 	nop.w
 800c8f8:	636f4361 	.word	0x636f4361
 800c8fc:	3fd287a7 	.word	0x3fd287a7
 800c900:	8b60c8b3 	.word	0x8b60c8b3
 800c904:	3fc68a28 	.word	0x3fc68a28
 800c908:	509f79fb 	.word	0x509f79fb
 800c90c:	3fd34413 	.word	0x3fd34413
 800c910:	0800eb9d 	.word	0x0800eb9d
 800c914:	0800ebb4 	.word	0x0800ebb4
 800c918:	7ff00000 	.word	0x7ff00000
 800c91c:	0800eb6d 	.word	0x0800eb6d
 800c920:	3ff80000 	.word	0x3ff80000
 800c924:	0800ecb0 	.word	0x0800ecb0
 800c928:	0800ec0c 	.word	0x0800ec0c
 800c92c:	0800eb99 	.word	0x0800eb99
 800c930:	0800eb6c 	.word	0x0800eb6c
 800c934:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c938:	6018      	str	r0, [r3, #0]
 800c93a:	9b07      	ldr	r3, [sp, #28]
 800c93c:	2b0e      	cmp	r3, #14
 800c93e:	f200 80a4 	bhi.w	800ca8a <_dtoa_r+0x442>
 800c942:	2c00      	cmp	r4, #0
 800c944:	f000 80a1 	beq.w	800ca8a <_dtoa_r+0x442>
 800c948:	2f00      	cmp	r7, #0
 800c94a:	dd33      	ble.n	800c9b4 <_dtoa_r+0x36c>
 800c94c:	4bad      	ldr	r3, [pc, #692]	@ (800cc04 <_dtoa_r+0x5bc>)
 800c94e:	f007 020f 	and.w	r2, r7, #15
 800c952:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c956:	ed93 7b00 	vldr	d7, [r3]
 800c95a:	05f8      	lsls	r0, r7, #23
 800c95c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c960:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c964:	d516      	bpl.n	800c994 <_dtoa_r+0x34c>
 800c966:	4ba8      	ldr	r3, [pc, #672]	@ (800cc08 <_dtoa_r+0x5c0>)
 800c968:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c96c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c970:	f7f3 ff74 	bl	800085c <__aeabi_ddiv>
 800c974:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c978:	f004 040f 	and.w	r4, r4, #15
 800c97c:	2603      	movs	r6, #3
 800c97e:	4da2      	ldr	r5, [pc, #648]	@ (800cc08 <_dtoa_r+0x5c0>)
 800c980:	b954      	cbnz	r4, 800c998 <_dtoa_r+0x350>
 800c982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c98a:	f7f3 ff67 	bl	800085c <__aeabi_ddiv>
 800c98e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c992:	e028      	b.n	800c9e6 <_dtoa_r+0x39e>
 800c994:	2602      	movs	r6, #2
 800c996:	e7f2      	b.n	800c97e <_dtoa_r+0x336>
 800c998:	07e1      	lsls	r1, r4, #31
 800c99a:	d508      	bpl.n	800c9ae <_dtoa_r+0x366>
 800c99c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c9a4:	f7f3 fe30 	bl	8000608 <__aeabi_dmul>
 800c9a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9ac:	3601      	adds	r6, #1
 800c9ae:	1064      	asrs	r4, r4, #1
 800c9b0:	3508      	adds	r5, #8
 800c9b2:	e7e5      	b.n	800c980 <_dtoa_r+0x338>
 800c9b4:	f000 80d2 	beq.w	800cb5c <_dtoa_r+0x514>
 800c9b8:	427c      	negs	r4, r7
 800c9ba:	4b92      	ldr	r3, [pc, #584]	@ (800cc04 <_dtoa_r+0x5bc>)
 800c9bc:	4d92      	ldr	r5, [pc, #584]	@ (800cc08 <_dtoa_r+0x5c0>)
 800c9be:	f004 020f 	and.w	r2, r4, #15
 800c9c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9ce:	f7f3 fe1b 	bl	8000608 <__aeabi_dmul>
 800c9d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9d6:	1124      	asrs	r4, r4, #4
 800c9d8:	2300      	movs	r3, #0
 800c9da:	2602      	movs	r6, #2
 800c9dc:	2c00      	cmp	r4, #0
 800c9de:	f040 80b2 	bne.w	800cb46 <_dtoa_r+0x4fe>
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d1d3      	bne.n	800c98e <_dtoa_r+0x346>
 800c9e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c9e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f000 80b7 	beq.w	800cb60 <_dtoa_r+0x518>
 800c9f2:	4b86      	ldr	r3, [pc, #536]	@ (800cc0c <_dtoa_r+0x5c4>)
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	4629      	mov	r1, r5
 800c9fa:	f7f4 f877 	bl	8000aec <__aeabi_dcmplt>
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	f000 80ae 	beq.w	800cb60 <_dtoa_r+0x518>
 800ca04:	9b07      	ldr	r3, [sp, #28]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	f000 80aa 	beq.w	800cb60 <_dtoa_r+0x518>
 800ca0c:	9b00      	ldr	r3, [sp, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	dd37      	ble.n	800ca82 <_dtoa_r+0x43a>
 800ca12:	1e7b      	subs	r3, r7, #1
 800ca14:	9304      	str	r3, [sp, #16]
 800ca16:	4620      	mov	r0, r4
 800ca18:	4b7d      	ldr	r3, [pc, #500]	@ (800cc10 <_dtoa_r+0x5c8>)
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	4629      	mov	r1, r5
 800ca1e:	f7f3 fdf3 	bl	8000608 <__aeabi_dmul>
 800ca22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca26:	9c00      	ldr	r4, [sp, #0]
 800ca28:	3601      	adds	r6, #1
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	f7f3 fd82 	bl	8000534 <__aeabi_i2d>
 800ca30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca34:	f7f3 fde8 	bl	8000608 <__aeabi_dmul>
 800ca38:	4b76      	ldr	r3, [pc, #472]	@ (800cc14 <_dtoa_r+0x5cc>)
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f7f3 fc2e 	bl	800029c <__adddf3>
 800ca40:	4605      	mov	r5, r0
 800ca42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ca46:	2c00      	cmp	r4, #0
 800ca48:	f040 808d 	bne.w	800cb66 <_dtoa_r+0x51e>
 800ca4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca50:	4b71      	ldr	r3, [pc, #452]	@ (800cc18 <_dtoa_r+0x5d0>)
 800ca52:	2200      	movs	r2, #0
 800ca54:	f7f3 fc20 	bl	8000298 <__aeabi_dsub>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca60:	462a      	mov	r2, r5
 800ca62:	4633      	mov	r3, r6
 800ca64:	f7f4 f860 	bl	8000b28 <__aeabi_dcmpgt>
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	f040 828b 	bne.w	800cf84 <_dtoa_r+0x93c>
 800ca6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca72:	462a      	mov	r2, r5
 800ca74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ca78:	f7f4 f838 	bl	8000aec <__aeabi_dcmplt>
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	f040 8128 	bne.w	800ccd2 <_dtoa_r+0x68a>
 800ca82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ca86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ca8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	f2c0 815a 	blt.w	800cd46 <_dtoa_r+0x6fe>
 800ca92:	2f0e      	cmp	r7, #14
 800ca94:	f300 8157 	bgt.w	800cd46 <_dtoa_r+0x6fe>
 800ca98:	4b5a      	ldr	r3, [pc, #360]	@ (800cc04 <_dtoa_r+0x5bc>)
 800ca9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ca9e:	ed93 7b00 	vldr	d7, [r3]
 800caa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	ed8d 7b00 	vstr	d7, [sp]
 800caaa:	da03      	bge.n	800cab4 <_dtoa_r+0x46c>
 800caac:	9b07      	ldr	r3, [sp, #28]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	f340 8101 	ble.w	800ccb6 <_dtoa_r+0x66e>
 800cab4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cab8:	4656      	mov	r6, sl
 800caba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cabe:	4620      	mov	r0, r4
 800cac0:	4629      	mov	r1, r5
 800cac2:	f7f3 fecb 	bl	800085c <__aeabi_ddiv>
 800cac6:	f7f4 f84f 	bl	8000b68 <__aeabi_d2iz>
 800caca:	4680      	mov	r8, r0
 800cacc:	f7f3 fd32 	bl	8000534 <__aeabi_i2d>
 800cad0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cad4:	f7f3 fd98 	bl	8000608 <__aeabi_dmul>
 800cad8:	4602      	mov	r2, r0
 800cada:	460b      	mov	r3, r1
 800cadc:	4620      	mov	r0, r4
 800cade:	4629      	mov	r1, r5
 800cae0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cae4:	f7f3 fbd8 	bl	8000298 <__aeabi_dsub>
 800cae8:	f806 4b01 	strb.w	r4, [r6], #1
 800caec:	9d07      	ldr	r5, [sp, #28]
 800caee:	eba6 040a 	sub.w	r4, r6, sl
 800caf2:	42a5      	cmp	r5, r4
 800caf4:	4602      	mov	r2, r0
 800caf6:	460b      	mov	r3, r1
 800caf8:	f040 8117 	bne.w	800cd2a <_dtoa_r+0x6e2>
 800cafc:	f7f3 fbce 	bl	800029c <__adddf3>
 800cb00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb04:	4604      	mov	r4, r0
 800cb06:	460d      	mov	r5, r1
 800cb08:	f7f4 f80e 	bl	8000b28 <__aeabi_dcmpgt>
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	f040 80f9 	bne.w	800cd04 <_dtoa_r+0x6bc>
 800cb12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb16:	4620      	mov	r0, r4
 800cb18:	4629      	mov	r1, r5
 800cb1a:	f7f3 ffdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb1e:	b118      	cbz	r0, 800cb28 <_dtoa_r+0x4e0>
 800cb20:	f018 0f01 	tst.w	r8, #1
 800cb24:	f040 80ee 	bne.w	800cd04 <_dtoa_r+0x6bc>
 800cb28:	4649      	mov	r1, r9
 800cb2a:	4658      	mov	r0, fp
 800cb2c:	f000 fc90 	bl	800d450 <_Bfree>
 800cb30:	2300      	movs	r3, #0
 800cb32:	7033      	strb	r3, [r6, #0]
 800cb34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cb36:	3701      	adds	r7, #1
 800cb38:	601f      	str	r7, [r3, #0]
 800cb3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	f000 831d 	beq.w	800d17c <_dtoa_r+0xb34>
 800cb42:	601e      	str	r6, [r3, #0]
 800cb44:	e31a      	b.n	800d17c <_dtoa_r+0xb34>
 800cb46:	07e2      	lsls	r2, r4, #31
 800cb48:	d505      	bpl.n	800cb56 <_dtoa_r+0x50e>
 800cb4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cb4e:	f7f3 fd5b 	bl	8000608 <__aeabi_dmul>
 800cb52:	3601      	adds	r6, #1
 800cb54:	2301      	movs	r3, #1
 800cb56:	1064      	asrs	r4, r4, #1
 800cb58:	3508      	adds	r5, #8
 800cb5a:	e73f      	b.n	800c9dc <_dtoa_r+0x394>
 800cb5c:	2602      	movs	r6, #2
 800cb5e:	e742      	b.n	800c9e6 <_dtoa_r+0x39e>
 800cb60:	9c07      	ldr	r4, [sp, #28]
 800cb62:	9704      	str	r7, [sp, #16]
 800cb64:	e761      	b.n	800ca2a <_dtoa_r+0x3e2>
 800cb66:	4b27      	ldr	r3, [pc, #156]	@ (800cc04 <_dtoa_r+0x5bc>)
 800cb68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cb6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cb6e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb72:	4454      	add	r4, sl
 800cb74:	2900      	cmp	r1, #0
 800cb76:	d053      	beq.n	800cc20 <_dtoa_r+0x5d8>
 800cb78:	4928      	ldr	r1, [pc, #160]	@ (800cc1c <_dtoa_r+0x5d4>)
 800cb7a:	2000      	movs	r0, #0
 800cb7c:	f7f3 fe6e 	bl	800085c <__aeabi_ddiv>
 800cb80:	4633      	mov	r3, r6
 800cb82:	462a      	mov	r2, r5
 800cb84:	f7f3 fb88 	bl	8000298 <__aeabi_dsub>
 800cb88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cb8c:	4656      	mov	r6, sl
 800cb8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb92:	f7f3 ffe9 	bl	8000b68 <__aeabi_d2iz>
 800cb96:	4605      	mov	r5, r0
 800cb98:	f7f3 fccc 	bl	8000534 <__aeabi_i2d>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	460b      	mov	r3, r1
 800cba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cba4:	f7f3 fb78 	bl	8000298 <__aeabi_dsub>
 800cba8:	3530      	adds	r5, #48	@ 0x30
 800cbaa:	4602      	mov	r2, r0
 800cbac:	460b      	mov	r3, r1
 800cbae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cbb2:	f806 5b01 	strb.w	r5, [r6], #1
 800cbb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cbba:	f7f3 ff97 	bl	8000aec <__aeabi_dcmplt>
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	d171      	bne.n	800cca6 <_dtoa_r+0x65e>
 800cbc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cbc6:	4911      	ldr	r1, [pc, #68]	@ (800cc0c <_dtoa_r+0x5c4>)
 800cbc8:	2000      	movs	r0, #0
 800cbca:	f7f3 fb65 	bl	8000298 <__aeabi_dsub>
 800cbce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cbd2:	f7f3 ff8b 	bl	8000aec <__aeabi_dcmplt>
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	f040 8095 	bne.w	800cd06 <_dtoa_r+0x6be>
 800cbdc:	42a6      	cmp	r6, r4
 800cbde:	f43f af50 	beq.w	800ca82 <_dtoa_r+0x43a>
 800cbe2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cbe6:	4b0a      	ldr	r3, [pc, #40]	@ (800cc10 <_dtoa_r+0x5c8>)
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f7f3 fd0d 	bl	8000608 <__aeabi_dmul>
 800cbee:	4b08      	ldr	r3, [pc, #32]	@ (800cc10 <_dtoa_r+0x5c8>)
 800cbf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbfa:	f7f3 fd05 	bl	8000608 <__aeabi_dmul>
 800cbfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc02:	e7c4      	b.n	800cb8e <_dtoa_r+0x546>
 800cc04:	0800ecb0 	.word	0x0800ecb0
 800cc08:	0800ec88 	.word	0x0800ec88
 800cc0c:	3ff00000 	.word	0x3ff00000
 800cc10:	40240000 	.word	0x40240000
 800cc14:	401c0000 	.word	0x401c0000
 800cc18:	40140000 	.word	0x40140000
 800cc1c:	3fe00000 	.word	0x3fe00000
 800cc20:	4631      	mov	r1, r6
 800cc22:	4628      	mov	r0, r5
 800cc24:	f7f3 fcf0 	bl	8000608 <__aeabi_dmul>
 800cc28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cc2c:	9415      	str	r4, [sp, #84]	@ 0x54
 800cc2e:	4656      	mov	r6, sl
 800cc30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc34:	f7f3 ff98 	bl	8000b68 <__aeabi_d2iz>
 800cc38:	4605      	mov	r5, r0
 800cc3a:	f7f3 fc7b 	bl	8000534 <__aeabi_i2d>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	460b      	mov	r3, r1
 800cc42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc46:	f7f3 fb27 	bl	8000298 <__aeabi_dsub>
 800cc4a:	3530      	adds	r5, #48	@ 0x30
 800cc4c:	f806 5b01 	strb.w	r5, [r6], #1
 800cc50:	4602      	mov	r2, r0
 800cc52:	460b      	mov	r3, r1
 800cc54:	42a6      	cmp	r6, r4
 800cc56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc5a:	f04f 0200 	mov.w	r2, #0
 800cc5e:	d124      	bne.n	800ccaa <_dtoa_r+0x662>
 800cc60:	4bac      	ldr	r3, [pc, #688]	@ (800cf14 <_dtoa_r+0x8cc>)
 800cc62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cc66:	f7f3 fb19 	bl	800029c <__adddf3>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc72:	f7f3 ff59 	bl	8000b28 <__aeabi_dcmpgt>
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d145      	bne.n	800cd06 <_dtoa_r+0x6be>
 800cc7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cc7e:	49a5      	ldr	r1, [pc, #660]	@ (800cf14 <_dtoa_r+0x8cc>)
 800cc80:	2000      	movs	r0, #0
 800cc82:	f7f3 fb09 	bl	8000298 <__aeabi_dsub>
 800cc86:	4602      	mov	r2, r0
 800cc88:	460b      	mov	r3, r1
 800cc8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc8e:	f7f3 ff2d 	bl	8000aec <__aeabi_dcmplt>
 800cc92:	2800      	cmp	r0, #0
 800cc94:	f43f aef5 	beq.w	800ca82 <_dtoa_r+0x43a>
 800cc98:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cc9a:	1e73      	subs	r3, r6, #1
 800cc9c:	9315      	str	r3, [sp, #84]	@ 0x54
 800cc9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cca2:	2b30      	cmp	r3, #48	@ 0x30
 800cca4:	d0f8      	beq.n	800cc98 <_dtoa_r+0x650>
 800cca6:	9f04      	ldr	r7, [sp, #16]
 800cca8:	e73e      	b.n	800cb28 <_dtoa_r+0x4e0>
 800ccaa:	4b9b      	ldr	r3, [pc, #620]	@ (800cf18 <_dtoa_r+0x8d0>)
 800ccac:	f7f3 fcac 	bl	8000608 <__aeabi_dmul>
 800ccb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccb4:	e7bc      	b.n	800cc30 <_dtoa_r+0x5e8>
 800ccb6:	d10c      	bne.n	800ccd2 <_dtoa_r+0x68a>
 800ccb8:	4b98      	ldr	r3, [pc, #608]	@ (800cf1c <_dtoa_r+0x8d4>)
 800ccba:	2200      	movs	r2, #0
 800ccbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccc0:	f7f3 fca2 	bl	8000608 <__aeabi_dmul>
 800ccc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ccc8:	f7f3 ff24 	bl	8000b14 <__aeabi_dcmpge>
 800cccc:	2800      	cmp	r0, #0
 800ccce:	f000 8157 	beq.w	800cf80 <_dtoa_r+0x938>
 800ccd2:	2400      	movs	r4, #0
 800ccd4:	4625      	mov	r5, r4
 800ccd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccd8:	43db      	mvns	r3, r3
 800ccda:	9304      	str	r3, [sp, #16]
 800ccdc:	4656      	mov	r6, sl
 800ccde:	2700      	movs	r7, #0
 800cce0:	4621      	mov	r1, r4
 800cce2:	4658      	mov	r0, fp
 800cce4:	f000 fbb4 	bl	800d450 <_Bfree>
 800cce8:	2d00      	cmp	r5, #0
 800ccea:	d0dc      	beq.n	800cca6 <_dtoa_r+0x65e>
 800ccec:	b12f      	cbz	r7, 800ccfa <_dtoa_r+0x6b2>
 800ccee:	42af      	cmp	r7, r5
 800ccf0:	d003      	beq.n	800ccfa <_dtoa_r+0x6b2>
 800ccf2:	4639      	mov	r1, r7
 800ccf4:	4658      	mov	r0, fp
 800ccf6:	f000 fbab 	bl	800d450 <_Bfree>
 800ccfa:	4629      	mov	r1, r5
 800ccfc:	4658      	mov	r0, fp
 800ccfe:	f000 fba7 	bl	800d450 <_Bfree>
 800cd02:	e7d0      	b.n	800cca6 <_dtoa_r+0x65e>
 800cd04:	9704      	str	r7, [sp, #16]
 800cd06:	4633      	mov	r3, r6
 800cd08:	461e      	mov	r6, r3
 800cd0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd0e:	2a39      	cmp	r2, #57	@ 0x39
 800cd10:	d107      	bne.n	800cd22 <_dtoa_r+0x6da>
 800cd12:	459a      	cmp	sl, r3
 800cd14:	d1f8      	bne.n	800cd08 <_dtoa_r+0x6c0>
 800cd16:	9a04      	ldr	r2, [sp, #16]
 800cd18:	3201      	adds	r2, #1
 800cd1a:	9204      	str	r2, [sp, #16]
 800cd1c:	2230      	movs	r2, #48	@ 0x30
 800cd1e:	f88a 2000 	strb.w	r2, [sl]
 800cd22:	781a      	ldrb	r2, [r3, #0]
 800cd24:	3201      	adds	r2, #1
 800cd26:	701a      	strb	r2, [r3, #0]
 800cd28:	e7bd      	b.n	800cca6 <_dtoa_r+0x65e>
 800cd2a:	4b7b      	ldr	r3, [pc, #492]	@ (800cf18 <_dtoa_r+0x8d0>)
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f7f3 fc6b 	bl	8000608 <__aeabi_dmul>
 800cd32:	2200      	movs	r2, #0
 800cd34:	2300      	movs	r3, #0
 800cd36:	4604      	mov	r4, r0
 800cd38:	460d      	mov	r5, r1
 800cd3a:	f7f3 fecd 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	f43f aebb 	beq.w	800caba <_dtoa_r+0x472>
 800cd44:	e6f0      	b.n	800cb28 <_dtoa_r+0x4e0>
 800cd46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cd48:	2a00      	cmp	r2, #0
 800cd4a:	f000 80db 	beq.w	800cf04 <_dtoa_r+0x8bc>
 800cd4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd50:	2a01      	cmp	r2, #1
 800cd52:	f300 80bf 	bgt.w	800ced4 <_dtoa_r+0x88c>
 800cd56:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cd58:	2a00      	cmp	r2, #0
 800cd5a:	f000 80b7 	beq.w	800cecc <_dtoa_r+0x884>
 800cd5e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cd62:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cd64:	4646      	mov	r6, r8
 800cd66:	9a08      	ldr	r2, [sp, #32]
 800cd68:	2101      	movs	r1, #1
 800cd6a:	441a      	add	r2, r3
 800cd6c:	4658      	mov	r0, fp
 800cd6e:	4498      	add	r8, r3
 800cd70:	9208      	str	r2, [sp, #32]
 800cd72:	f000 fc21 	bl	800d5b8 <__i2b>
 800cd76:	4605      	mov	r5, r0
 800cd78:	b15e      	cbz	r6, 800cd92 <_dtoa_r+0x74a>
 800cd7a:	9b08      	ldr	r3, [sp, #32]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	dd08      	ble.n	800cd92 <_dtoa_r+0x74a>
 800cd80:	42b3      	cmp	r3, r6
 800cd82:	9a08      	ldr	r2, [sp, #32]
 800cd84:	bfa8      	it	ge
 800cd86:	4633      	movge	r3, r6
 800cd88:	eba8 0803 	sub.w	r8, r8, r3
 800cd8c:	1af6      	subs	r6, r6, r3
 800cd8e:	1ad3      	subs	r3, r2, r3
 800cd90:	9308      	str	r3, [sp, #32]
 800cd92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd94:	b1f3      	cbz	r3, 800cdd4 <_dtoa_r+0x78c>
 800cd96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	f000 80b7 	beq.w	800cf0c <_dtoa_r+0x8c4>
 800cd9e:	b18c      	cbz	r4, 800cdc4 <_dtoa_r+0x77c>
 800cda0:	4629      	mov	r1, r5
 800cda2:	4622      	mov	r2, r4
 800cda4:	4658      	mov	r0, fp
 800cda6:	f000 fcc7 	bl	800d738 <__pow5mult>
 800cdaa:	464a      	mov	r2, r9
 800cdac:	4601      	mov	r1, r0
 800cdae:	4605      	mov	r5, r0
 800cdb0:	4658      	mov	r0, fp
 800cdb2:	f000 fc17 	bl	800d5e4 <__multiply>
 800cdb6:	4649      	mov	r1, r9
 800cdb8:	9004      	str	r0, [sp, #16]
 800cdba:	4658      	mov	r0, fp
 800cdbc:	f000 fb48 	bl	800d450 <_Bfree>
 800cdc0:	9b04      	ldr	r3, [sp, #16]
 800cdc2:	4699      	mov	r9, r3
 800cdc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdc6:	1b1a      	subs	r2, r3, r4
 800cdc8:	d004      	beq.n	800cdd4 <_dtoa_r+0x78c>
 800cdca:	4649      	mov	r1, r9
 800cdcc:	4658      	mov	r0, fp
 800cdce:	f000 fcb3 	bl	800d738 <__pow5mult>
 800cdd2:	4681      	mov	r9, r0
 800cdd4:	2101      	movs	r1, #1
 800cdd6:	4658      	mov	r0, fp
 800cdd8:	f000 fbee 	bl	800d5b8 <__i2b>
 800cddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdde:	4604      	mov	r4, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f000 81cf 	beq.w	800d184 <_dtoa_r+0xb3c>
 800cde6:	461a      	mov	r2, r3
 800cde8:	4601      	mov	r1, r0
 800cdea:	4658      	mov	r0, fp
 800cdec:	f000 fca4 	bl	800d738 <__pow5mult>
 800cdf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdf2:	2b01      	cmp	r3, #1
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	f300 8095 	bgt.w	800cf24 <_dtoa_r+0x8dc>
 800cdfa:	9b02      	ldr	r3, [sp, #8]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	f040 8087 	bne.w	800cf10 <_dtoa_r+0x8c8>
 800ce02:	9b03      	ldr	r3, [sp, #12]
 800ce04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f040 8089 	bne.w	800cf20 <_dtoa_r+0x8d8>
 800ce0e:	9b03      	ldr	r3, [sp, #12]
 800ce10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ce14:	0d1b      	lsrs	r3, r3, #20
 800ce16:	051b      	lsls	r3, r3, #20
 800ce18:	b12b      	cbz	r3, 800ce26 <_dtoa_r+0x7de>
 800ce1a:	9b08      	ldr	r3, [sp, #32]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	9308      	str	r3, [sp, #32]
 800ce20:	f108 0801 	add.w	r8, r8, #1
 800ce24:	2301      	movs	r3, #1
 800ce26:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	f000 81b0 	beq.w	800d190 <_dtoa_r+0xb48>
 800ce30:	6923      	ldr	r3, [r4, #16]
 800ce32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ce36:	6918      	ldr	r0, [r3, #16]
 800ce38:	f000 fb72 	bl	800d520 <__hi0bits>
 800ce3c:	f1c0 0020 	rsb	r0, r0, #32
 800ce40:	9b08      	ldr	r3, [sp, #32]
 800ce42:	4418      	add	r0, r3
 800ce44:	f010 001f 	ands.w	r0, r0, #31
 800ce48:	d077      	beq.n	800cf3a <_dtoa_r+0x8f2>
 800ce4a:	f1c0 0320 	rsb	r3, r0, #32
 800ce4e:	2b04      	cmp	r3, #4
 800ce50:	dd6b      	ble.n	800cf2a <_dtoa_r+0x8e2>
 800ce52:	9b08      	ldr	r3, [sp, #32]
 800ce54:	f1c0 001c 	rsb	r0, r0, #28
 800ce58:	4403      	add	r3, r0
 800ce5a:	4480      	add	r8, r0
 800ce5c:	4406      	add	r6, r0
 800ce5e:	9308      	str	r3, [sp, #32]
 800ce60:	f1b8 0f00 	cmp.w	r8, #0
 800ce64:	dd05      	ble.n	800ce72 <_dtoa_r+0x82a>
 800ce66:	4649      	mov	r1, r9
 800ce68:	4642      	mov	r2, r8
 800ce6a:	4658      	mov	r0, fp
 800ce6c:	f000 fcbe 	bl	800d7ec <__lshift>
 800ce70:	4681      	mov	r9, r0
 800ce72:	9b08      	ldr	r3, [sp, #32]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	dd05      	ble.n	800ce84 <_dtoa_r+0x83c>
 800ce78:	4621      	mov	r1, r4
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	4658      	mov	r0, fp
 800ce7e:	f000 fcb5 	bl	800d7ec <__lshift>
 800ce82:	4604      	mov	r4, r0
 800ce84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d059      	beq.n	800cf3e <_dtoa_r+0x8f6>
 800ce8a:	4621      	mov	r1, r4
 800ce8c:	4648      	mov	r0, r9
 800ce8e:	f000 fd19 	bl	800d8c4 <__mcmp>
 800ce92:	2800      	cmp	r0, #0
 800ce94:	da53      	bge.n	800cf3e <_dtoa_r+0x8f6>
 800ce96:	1e7b      	subs	r3, r7, #1
 800ce98:	9304      	str	r3, [sp, #16]
 800ce9a:	4649      	mov	r1, r9
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	220a      	movs	r2, #10
 800cea0:	4658      	mov	r0, fp
 800cea2:	f000 faf7 	bl	800d494 <__multadd>
 800cea6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cea8:	4681      	mov	r9, r0
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	f000 8172 	beq.w	800d194 <_dtoa_r+0xb4c>
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	4629      	mov	r1, r5
 800ceb4:	220a      	movs	r2, #10
 800ceb6:	4658      	mov	r0, fp
 800ceb8:	f000 faec 	bl	800d494 <__multadd>
 800cebc:	9b00      	ldr	r3, [sp, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	4605      	mov	r5, r0
 800cec2:	dc67      	bgt.n	800cf94 <_dtoa_r+0x94c>
 800cec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cec6:	2b02      	cmp	r3, #2
 800cec8:	dc41      	bgt.n	800cf4e <_dtoa_r+0x906>
 800ceca:	e063      	b.n	800cf94 <_dtoa_r+0x94c>
 800cecc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cece:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ced2:	e746      	b.n	800cd62 <_dtoa_r+0x71a>
 800ced4:	9b07      	ldr	r3, [sp, #28]
 800ced6:	1e5c      	subs	r4, r3, #1
 800ced8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ceda:	42a3      	cmp	r3, r4
 800cedc:	bfbf      	itttt	lt
 800cede:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cee0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800cee2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cee4:	1ae3      	sublt	r3, r4, r3
 800cee6:	bfb4      	ite	lt
 800cee8:	18d2      	addlt	r2, r2, r3
 800ceea:	1b1c      	subge	r4, r3, r4
 800ceec:	9b07      	ldr	r3, [sp, #28]
 800ceee:	bfbc      	itt	lt
 800cef0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800cef2:	2400      	movlt	r4, #0
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	bfb5      	itete	lt
 800cef8:	eba8 0603 	sublt.w	r6, r8, r3
 800cefc:	9b07      	ldrge	r3, [sp, #28]
 800cefe:	2300      	movlt	r3, #0
 800cf00:	4646      	movge	r6, r8
 800cf02:	e730      	b.n	800cd66 <_dtoa_r+0x71e>
 800cf04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cf06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cf08:	4646      	mov	r6, r8
 800cf0a:	e735      	b.n	800cd78 <_dtoa_r+0x730>
 800cf0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf0e:	e75c      	b.n	800cdca <_dtoa_r+0x782>
 800cf10:	2300      	movs	r3, #0
 800cf12:	e788      	b.n	800ce26 <_dtoa_r+0x7de>
 800cf14:	3fe00000 	.word	0x3fe00000
 800cf18:	40240000 	.word	0x40240000
 800cf1c:	40140000 	.word	0x40140000
 800cf20:	9b02      	ldr	r3, [sp, #8]
 800cf22:	e780      	b.n	800ce26 <_dtoa_r+0x7de>
 800cf24:	2300      	movs	r3, #0
 800cf26:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf28:	e782      	b.n	800ce30 <_dtoa_r+0x7e8>
 800cf2a:	d099      	beq.n	800ce60 <_dtoa_r+0x818>
 800cf2c:	9a08      	ldr	r2, [sp, #32]
 800cf2e:	331c      	adds	r3, #28
 800cf30:	441a      	add	r2, r3
 800cf32:	4498      	add	r8, r3
 800cf34:	441e      	add	r6, r3
 800cf36:	9208      	str	r2, [sp, #32]
 800cf38:	e792      	b.n	800ce60 <_dtoa_r+0x818>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	e7f6      	b.n	800cf2c <_dtoa_r+0x8e4>
 800cf3e:	9b07      	ldr	r3, [sp, #28]
 800cf40:	9704      	str	r7, [sp, #16]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	dc20      	bgt.n	800cf88 <_dtoa_r+0x940>
 800cf46:	9300      	str	r3, [sp, #0]
 800cf48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf4a:	2b02      	cmp	r3, #2
 800cf4c:	dd1e      	ble.n	800cf8c <_dtoa_r+0x944>
 800cf4e:	9b00      	ldr	r3, [sp, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	f47f aec0 	bne.w	800ccd6 <_dtoa_r+0x68e>
 800cf56:	4621      	mov	r1, r4
 800cf58:	2205      	movs	r2, #5
 800cf5a:	4658      	mov	r0, fp
 800cf5c:	f000 fa9a 	bl	800d494 <__multadd>
 800cf60:	4601      	mov	r1, r0
 800cf62:	4604      	mov	r4, r0
 800cf64:	4648      	mov	r0, r9
 800cf66:	f000 fcad 	bl	800d8c4 <__mcmp>
 800cf6a:	2800      	cmp	r0, #0
 800cf6c:	f77f aeb3 	ble.w	800ccd6 <_dtoa_r+0x68e>
 800cf70:	4656      	mov	r6, sl
 800cf72:	2331      	movs	r3, #49	@ 0x31
 800cf74:	f806 3b01 	strb.w	r3, [r6], #1
 800cf78:	9b04      	ldr	r3, [sp, #16]
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	9304      	str	r3, [sp, #16]
 800cf7e:	e6ae      	b.n	800ccde <_dtoa_r+0x696>
 800cf80:	9c07      	ldr	r4, [sp, #28]
 800cf82:	9704      	str	r7, [sp, #16]
 800cf84:	4625      	mov	r5, r4
 800cf86:	e7f3      	b.n	800cf70 <_dtoa_r+0x928>
 800cf88:	9b07      	ldr	r3, [sp, #28]
 800cf8a:	9300      	str	r3, [sp, #0]
 800cf8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	f000 8104 	beq.w	800d19c <_dtoa_r+0xb54>
 800cf94:	2e00      	cmp	r6, #0
 800cf96:	dd05      	ble.n	800cfa4 <_dtoa_r+0x95c>
 800cf98:	4629      	mov	r1, r5
 800cf9a:	4632      	mov	r2, r6
 800cf9c:	4658      	mov	r0, fp
 800cf9e:	f000 fc25 	bl	800d7ec <__lshift>
 800cfa2:	4605      	mov	r5, r0
 800cfa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d05a      	beq.n	800d060 <_dtoa_r+0xa18>
 800cfaa:	6869      	ldr	r1, [r5, #4]
 800cfac:	4658      	mov	r0, fp
 800cfae:	f000 fa0f 	bl	800d3d0 <_Balloc>
 800cfb2:	4606      	mov	r6, r0
 800cfb4:	b928      	cbnz	r0, 800cfc2 <_dtoa_r+0x97a>
 800cfb6:	4b84      	ldr	r3, [pc, #528]	@ (800d1c8 <_dtoa_r+0xb80>)
 800cfb8:	4602      	mov	r2, r0
 800cfba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cfbe:	f7ff bb5a 	b.w	800c676 <_dtoa_r+0x2e>
 800cfc2:	692a      	ldr	r2, [r5, #16]
 800cfc4:	3202      	adds	r2, #2
 800cfc6:	0092      	lsls	r2, r2, #2
 800cfc8:	f105 010c 	add.w	r1, r5, #12
 800cfcc:	300c      	adds	r0, #12
 800cfce:	f000 ffaf 	bl	800df30 <memcpy>
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	4631      	mov	r1, r6
 800cfd6:	4658      	mov	r0, fp
 800cfd8:	f000 fc08 	bl	800d7ec <__lshift>
 800cfdc:	f10a 0301 	add.w	r3, sl, #1
 800cfe0:	9307      	str	r3, [sp, #28]
 800cfe2:	9b00      	ldr	r3, [sp, #0]
 800cfe4:	4453      	add	r3, sl
 800cfe6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cfe8:	9b02      	ldr	r3, [sp, #8]
 800cfea:	f003 0301 	and.w	r3, r3, #1
 800cfee:	462f      	mov	r7, r5
 800cff0:	930a      	str	r3, [sp, #40]	@ 0x28
 800cff2:	4605      	mov	r5, r0
 800cff4:	9b07      	ldr	r3, [sp, #28]
 800cff6:	4621      	mov	r1, r4
 800cff8:	3b01      	subs	r3, #1
 800cffa:	4648      	mov	r0, r9
 800cffc:	9300      	str	r3, [sp, #0]
 800cffe:	f7ff fa9a 	bl	800c536 <quorem>
 800d002:	4639      	mov	r1, r7
 800d004:	9002      	str	r0, [sp, #8]
 800d006:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d00a:	4648      	mov	r0, r9
 800d00c:	f000 fc5a 	bl	800d8c4 <__mcmp>
 800d010:	462a      	mov	r2, r5
 800d012:	9008      	str	r0, [sp, #32]
 800d014:	4621      	mov	r1, r4
 800d016:	4658      	mov	r0, fp
 800d018:	f000 fc70 	bl	800d8fc <__mdiff>
 800d01c:	68c2      	ldr	r2, [r0, #12]
 800d01e:	4606      	mov	r6, r0
 800d020:	bb02      	cbnz	r2, 800d064 <_dtoa_r+0xa1c>
 800d022:	4601      	mov	r1, r0
 800d024:	4648      	mov	r0, r9
 800d026:	f000 fc4d 	bl	800d8c4 <__mcmp>
 800d02a:	4602      	mov	r2, r0
 800d02c:	4631      	mov	r1, r6
 800d02e:	4658      	mov	r0, fp
 800d030:	920e      	str	r2, [sp, #56]	@ 0x38
 800d032:	f000 fa0d 	bl	800d450 <_Bfree>
 800d036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d038:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d03a:	9e07      	ldr	r6, [sp, #28]
 800d03c:	ea43 0102 	orr.w	r1, r3, r2
 800d040:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d042:	4319      	orrs	r1, r3
 800d044:	d110      	bne.n	800d068 <_dtoa_r+0xa20>
 800d046:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d04a:	d029      	beq.n	800d0a0 <_dtoa_r+0xa58>
 800d04c:	9b08      	ldr	r3, [sp, #32]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	dd02      	ble.n	800d058 <_dtoa_r+0xa10>
 800d052:	9b02      	ldr	r3, [sp, #8]
 800d054:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d058:	9b00      	ldr	r3, [sp, #0]
 800d05a:	f883 8000 	strb.w	r8, [r3]
 800d05e:	e63f      	b.n	800cce0 <_dtoa_r+0x698>
 800d060:	4628      	mov	r0, r5
 800d062:	e7bb      	b.n	800cfdc <_dtoa_r+0x994>
 800d064:	2201      	movs	r2, #1
 800d066:	e7e1      	b.n	800d02c <_dtoa_r+0x9e4>
 800d068:	9b08      	ldr	r3, [sp, #32]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	db04      	blt.n	800d078 <_dtoa_r+0xa30>
 800d06e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d070:	430b      	orrs	r3, r1
 800d072:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d074:	430b      	orrs	r3, r1
 800d076:	d120      	bne.n	800d0ba <_dtoa_r+0xa72>
 800d078:	2a00      	cmp	r2, #0
 800d07a:	dded      	ble.n	800d058 <_dtoa_r+0xa10>
 800d07c:	4649      	mov	r1, r9
 800d07e:	2201      	movs	r2, #1
 800d080:	4658      	mov	r0, fp
 800d082:	f000 fbb3 	bl	800d7ec <__lshift>
 800d086:	4621      	mov	r1, r4
 800d088:	4681      	mov	r9, r0
 800d08a:	f000 fc1b 	bl	800d8c4 <__mcmp>
 800d08e:	2800      	cmp	r0, #0
 800d090:	dc03      	bgt.n	800d09a <_dtoa_r+0xa52>
 800d092:	d1e1      	bne.n	800d058 <_dtoa_r+0xa10>
 800d094:	f018 0f01 	tst.w	r8, #1
 800d098:	d0de      	beq.n	800d058 <_dtoa_r+0xa10>
 800d09a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d09e:	d1d8      	bne.n	800d052 <_dtoa_r+0xa0a>
 800d0a0:	9a00      	ldr	r2, [sp, #0]
 800d0a2:	2339      	movs	r3, #57	@ 0x39
 800d0a4:	7013      	strb	r3, [r2, #0]
 800d0a6:	4633      	mov	r3, r6
 800d0a8:	461e      	mov	r6, r3
 800d0aa:	3b01      	subs	r3, #1
 800d0ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d0b0:	2a39      	cmp	r2, #57	@ 0x39
 800d0b2:	d052      	beq.n	800d15a <_dtoa_r+0xb12>
 800d0b4:	3201      	adds	r2, #1
 800d0b6:	701a      	strb	r2, [r3, #0]
 800d0b8:	e612      	b.n	800cce0 <_dtoa_r+0x698>
 800d0ba:	2a00      	cmp	r2, #0
 800d0bc:	dd07      	ble.n	800d0ce <_dtoa_r+0xa86>
 800d0be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d0c2:	d0ed      	beq.n	800d0a0 <_dtoa_r+0xa58>
 800d0c4:	9a00      	ldr	r2, [sp, #0]
 800d0c6:	f108 0301 	add.w	r3, r8, #1
 800d0ca:	7013      	strb	r3, [r2, #0]
 800d0cc:	e608      	b.n	800cce0 <_dtoa_r+0x698>
 800d0ce:	9b07      	ldr	r3, [sp, #28]
 800d0d0:	9a07      	ldr	r2, [sp, #28]
 800d0d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d0d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d028      	beq.n	800d12e <_dtoa_r+0xae6>
 800d0dc:	4649      	mov	r1, r9
 800d0de:	2300      	movs	r3, #0
 800d0e0:	220a      	movs	r2, #10
 800d0e2:	4658      	mov	r0, fp
 800d0e4:	f000 f9d6 	bl	800d494 <__multadd>
 800d0e8:	42af      	cmp	r7, r5
 800d0ea:	4681      	mov	r9, r0
 800d0ec:	f04f 0300 	mov.w	r3, #0
 800d0f0:	f04f 020a 	mov.w	r2, #10
 800d0f4:	4639      	mov	r1, r7
 800d0f6:	4658      	mov	r0, fp
 800d0f8:	d107      	bne.n	800d10a <_dtoa_r+0xac2>
 800d0fa:	f000 f9cb 	bl	800d494 <__multadd>
 800d0fe:	4607      	mov	r7, r0
 800d100:	4605      	mov	r5, r0
 800d102:	9b07      	ldr	r3, [sp, #28]
 800d104:	3301      	adds	r3, #1
 800d106:	9307      	str	r3, [sp, #28]
 800d108:	e774      	b.n	800cff4 <_dtoa_r+0x9ac>
 800d10a:	f000 f9c3 	bl	800d494 <__multadd>
 800d10e:	4629      	mov	r1, r5
 800d110:	4607      	mov	r7, r0
 800d112:	2300      	movs	r3, #0
 800d114:	220a      	movs	r2, #10
 800d116:	4658      	mov	r0, fp
 800d118:	f000 f9bc 	bl	800d494 <__multadd>
 800d11c:	4605      	mov	r5, r0
 800d11e:	e7f0      	b.n	800d102 <_dtoa_r+0xaba>
 800d120:	9b00      	ldr	r3, [sp, #0]
 800d122:	2b00      	cmp	r3, #0
 800d124:	bfcc      	ite	gt
 800d126:	461e      	movgt	r6, r3
 800d128:	2601      	movle	r6, #1
 800d12a:	4456      	add	r6, sl
 800d12c:	2700      	movs	r7, #0
 800d12e:	4649      	mov	r1, r9
 800d130:	2201      	movs	r2, #1
 800d132:	4658      	mov	r0, fp
 800d134:	f000 fb5a 	bl	800d7ec <__lshift>
 800d138:	4621      	mov	r1, r4
 800d13a:	4681      	mov	r9, r0
 800d13c:	f000 fbc2 	bl	800d8c4 <__mcmp>
 800d140:	2800      	cmp	r0, #0
 800d142:	dcb0      	bgt.n	800d0a6 <_dtoa_r+0xa5e>
 800d144:	d102      	bne.n	800d14c <_dtoa_r+0xb04>
 800d146:	f018 0f01 	tst.w	r8, #1
 800d14a:	d1ac      	bne.n	800d0a6 <_dtoa_r+0xa5e>
 800d14c:	4633      	mov	r3, r6
 800d14e:	461e      	mov	r6, r3
 800d150:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d154:	2a30      	cmp	r2, #48	@ 0x30
 800d156:	d0fa      	beq.n	800d14e <_dtoa_r+0xb06>
 800d158:	e5c2      	b.n	800cce0 <_dtoa_r+0x698>
 800d15a:	459a      	cmp	sl, r3
 800d15c:	d1a4      	bne.n	800d0a8 <_dtoa_r+0xa60>
 800d15e:	9b04      	ldr	r3, [sp, #16]
 800d160:	3301      	adds	r3, #1
 800d162:	9304      	str	r3, [sp, #16]
 800d164:	2331      	movs	r3, #49	@ 0x31
 800d166:	f88a 3000 	strb.w	r3, [sl]
 800d16a:	e5b9      	b.n	800cce0 <_dtoa_r+0x698>
 800d16c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d16e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d1cc <_dtoa_r+0xb84>
 800d172:	b11b      	cbz	r3, 800d17c <_dtoa_r+0xb34>
 800d174:	f10a 0308 	add.w	r3, sl, #8
 800d178:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d17a:	6013      	str	r3, [r2, #0]
 800d17c:	4650      	mov	r0, sl
 800d17e:	b019      	add	sp, #100	@ 0x64
 800d180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d186:	2b01      	cmp	r3, #1
 800d188:	f77f ae37 	ble.w	800cdfa <_dtoa_r+0x7b2>
 800d18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d18e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d190:	2001      	movs	r0, #1
 800d192:	e655      	b.n	800ce40 <_dtoa_r+0x7f8>
 800d194:	9b00      	ldr	r3, [sp, #0]
 800d196:	2b00      	cmp	r3, #0
 800d198:	f77f aed6 	ble.w	800cf48 <_dtoa_r+0x900>
 800d19c:	4656      	mov	r6, sl
 800d19e:	4621      	mov	r1, r4
 800d1a0:	4648      	mov	r0, r9
 800d1a2:	f7ff f9c8 	bl	800c536 <quorem>
 800d1a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d1aa:	f806 8b01 	strb.w	r8, [r6], #1
 800d1ae:	9b00      	ldr	r3, [sp, #0]
 800d1b0:	eba6 020a 	sub.w	r2, r6, sl
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	ddb3      	ble.n	800d120 <_dtoa_r+0xad8>
 800d1b8:	4649      	mov	r1, r9
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	220a      	movs	r2, #10
 800d1be:	4658      	mov	r0, fp
 800d1c0:	f000 f968 	bl	800d494 <__multadd>
 800d1c4:	4681      	mov	r9, r0
 800d1c6:	e7ea      	b.n	800d19e <_dtoa_r+0xb56>
 800d1c8:	0800ec0c 	.word	0x0800ec0c
 800d1cc:	0800eb90 	.word	0x0800eb90

0800d1d0 <_free_r>:
 800d1d0:	b538      	push	{r3, r4, r5, lr}
 800d1d2:	4605      	mov	r5, r0
 800d1d4:	2900      	cmp	r1, #0
 800d1d6:	d041      	beq.n	800d25c <_free_r+0x8c>
 800d1d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1dc:	1f0c      	subs	r4, r1, #4
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	bfb8      	it	lt
 800d1e2:	18e4      	addlt	r4, r4, r3
 800d1e4:	f000 f8e8 	bl	800d3b8 <__malloc_lock>
 800d1e8:	4a1d      	ldr	r2, [pc, #116]	@ (800d260 <_free_r+0x90>)
 800d1ea:	6813      	ldr	r3, [r2, #0]
 800d1ec:	b933      	cbnz	r3, 800d1fc <_free_r+0x2c>
 800d1ee:	6063      	str	r3, [r4, #4]
 800d1f0:	6014      	str	r4, [r2, #0]
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1f8:	f000 b8e4 	b.w	800d3c4 <__malloc_unlock>
 800d1fc:	42a3      	cmp	r3, r4
 800d1fe:	d908      	bls.n	800d212 <_free_r+0x42>
 800d200:	6820      	ldr	r0, [r4, #0]
 800d202:	1821      	adds	r1, r4, r0
 800d204:	428b      	cmp	r3, r1
 800d206:	bf01      	itttt	eq
 800d208:	6819      	ldreq	r1, [r3, #0]
 800d20a:	685b      	ldreq	r3, [r3, #4]
 800d20c:	1809      	addeq	r1, r1, r0
 800d20e:	6021      	streq	r1, [r4, #0]
 800d210:	e7ed      	b.n	800d1ee <_free_r+0x1e>
 800d212:	461a      	mov	r2, r3
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	b10b      	cbz	r3, 800d21c <_free_r+0x4c>
 800d218:	42a3      	cmp	r3, r4
 800d21a:	d9fa      	bls.n	800d212 <_free_r+0x42>
 800d21c:	6811      	ldr	r1, [r2, #0]
 800d21e:	1850      	adds	r0, r2, r1
 800d220:	42a0      	cmp	r0, r4
 800d222:	d10b      	bne.n	800d23c <_free_r+0x6c>
 800d224:	6820      	ldr	r0, [r4, #0]
 800d226:	4401      	add	r1, r0
 800d228:	1850      	adds	r0, r2, r1
 800d22a:	4283      	cmp	r3, r0
 800d22c:	6011      	str	r1, [r2, #0]
 800d22e:	d1e0      	bne.n	800d1f2 <_free_r+0x22>
 800d230:	6818      	ldr	r0, [r3, #0]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	6053      	str	r3, [r2, #4]
 800d236:	4408      	add	r0, r1
 800d238:	6010      	str	r0, [r2, #0]
 800d23a:	e7da      	b.n	800d1f2 <_free_r+0x22>
 800d23c:	d902      	bls.n	800d244 <_free_r+0x74>
 800d23e:	230c      	movs	r3, #12
 800d240:	602b      	str	r3, [r5, #0]
 800d242:	e7d6      	b.n	800d1f2 <_free_r+0x22>
 800d244:	6820      	ldr	r0, [r4, #0]
 800d246:	1821      	adds	r1, r4, r0
 800d248:	428b      	cmp	r3, r1
 800d24a:	bf04      	itt	eq
 800d24c:	6819      	ldreq	r1, [r3, #0]
 800d24e:	685b      	ldreq	r3, [r3, #4]
 800d250:	6063      	str	r3, [r4, #4]
 800d252:	bf04      	itt	eq
 800d254:	1809      	addeq	r1, r1, r0
 800d256:	6021      	streq	r1, [r4, #0]
 800d258:	6054      	str	r4, [r2, #4]
 800d25a:	e7ca      	b.n	800d1f2 <_free_r+0x22>
 800d25c:	bd38      	pop	{r3, r4, r5, pc}
 800d25e:	bf00      	nop
 800d260:	200021ac 	.word	0x200021ac

0800d264 <malloc>:
 800d264:	4b02      	ldr	r3, [pc, #8]	@ (800d270 <malloc+0xc>)
 800d266:	4601      	mov	r1, r0
 800d268:	6818      	ldr	r0, [r3, #0]
 800d26a:	f000 b825 	b.w	800d2b8 <_malloc_r>
 800d26e:	bf00      	nop
 800d270:	2000010c 	.word	0x2000010c

0800d274 <sbrk_aligned>:
 800d274:	b570      	push	{r4, r5, r6, lr}
 800d276:	4e0f      	ldr	r6, [pc, #60]	@ (800d2b4 <sbrk_aligned+0x40>)
 800d278:	460c      	mov	r4, r1
 800d27a:	6831      	ldr	r1, [r6, #0]
 800d27c:	4605      	mov	r5, r0
 800d27e:	b911      	cbnz	r1, 800d286 <sbrk_aligned+0x12>
 800d280:	f000 fe46 	bl	800df10 <_sbrk_r>
 800d284:	6030      	str	r0, [r6, #0]
 800d286:	4621      	mov	r1, r4
 800d288:	4628      	mov	r0, r5
 800d28a:	f000 fe41 	bl	800df10 <_sbrk_r>
 800d28e:	1c43      	adds	r3, r0, #1
 800d290:	d103      	bne.n	800d29a <sbrk_aligned+0x26>
 800d292:	f04f 34ff 	mov.w	r4, #4294967295
 800d296:	4620      	mov	r0, r4
 800d298:	bd70      	pop	{r4, r5, r6, pc}
 800d29a:	1cc4      	adds	r4, r0, #3
 800d29c:	f024 0403 	bic.w	r4, r4, #3
 800d2a0:	42a0      	cmp	r0, r4
 800d2a2:	d0f8      	beq.n	800d296 <sbrk_aligned+0x22>
 800d2a4:	1a21      	subs	r1, r4, r0
 800d2a6:	4628      	mov	r0, r5
 800d2a8:	f000 fe32 	bl	800df10 <_sbrk_r>
 800d2ac:	3001      	adds	r0, #1
 800d2ae:	d1f2      	bne.n	800d296 <sbrk_aligned+0x22>
 800d2b0:	e7ef      	b.n	800d292 <sbrk_aligned+0x1e>
 800d2b2:	bf00      	nop
 800d2b4:	200021a8 	.word	0x200021a8

0800d2b8 <_malloc_r>:
 800d2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2bc:	1ccd      	adds	r5, r1, #3
 800d2be:	f025 0503 	bic.w	r5, r5, #3
 800d2c2:	3508      	adds	r5, #8
 800d2c4:	2d0c      	cmp	r5, #12
 800d2c6:	bf38      	it	cc
 800d2c8:	250c      	movcc	r5, #12
 800d2ca:	2d00      	cmp	r5, #0
 800d2cc:	4606      	mov	r6, r0
 800d2ce:	db01      	blt.n	800d2d4 <_malloc_r+0x1c>
 800d2d0:	42a9      	cmp	r1, r5
 800d2d2:	d904      	bls.n	800d2de <_malloc_r+0x26>
 800d2d4:	230c      	movs	r3, #12
 800d2d6:	6033      	str	r3, [r6, #0]
 800d2d8:	2000      	movs	r0, #0
 800d2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d3b4 <_malloc_r+0xfc>
 800d2e2:	f000 f869 	bl	800d3b8 <__malloc_lock>
 800d2e6:	f8d8 3000 	ldr.w	r3, [r8]
 800d2ea:	461c      	mov	r4, r3
 800d2ec:	bb44      	cbnz	r4, 800d340 <_malloc_r+0x88>
 800d2ee:	4629      	mov	r1, r5
 800d2f0:	4630      	mov	r0, r6
 800d2f2:	f7ff ffbf 	bl	800d274 <sbrk_aligned>
 800d2f6:	1c43      	adds	r3, r0, #1
 800d2f8:	4604      	mov	r4, r0
 800d2fa:	d158      	bne.n	800d3ae <_malloc_r+0xf6>
 800d2fc:	f8d8 4000 	ldr.w	r4, [r8]
 800d300:	4627      	mov	r7, r4
 800d302:	2f00      	cmp	r7, #0
 800d304:	d143      	bne.n	800d38e <_malloc_r+0xd6>
 800d306:	2c00      	cmp	r4, #0
 800d308:	d04b      	beq.n	800d3a2 <_malloc_r+0xea>
 800d30a:	6823      	ldr	r3, [r4, #0]
 800d30c:	4639      	mov	r1, r7
 800d30e:	4630      	mov	r0, r6
 800d310:	eb04 0903 	add.w	r9, r4, r3
 800d314:	f000 fdfc 	bl	800df10 <_sbrk_r>
 800d318:	4581      	cmp	r9, r0
 800d31a:	d142      	bne.n	800d3a2 <_malloc_r+0xea>
 800d31c:	6821      	ldr	r1, [r4, #0]
 800d31e:	1a6d      	subs	r5, r5, r1
 800d320:	4629      	mov	r1, r5
 800d322:	4630      	mov	r0, r6
 800d324:	f7ff ffa6 	bl	800d274 <sbrk_aligned>
 800d328:	3001      	adds	r0, #1
 800d32a:	d03a      	beq.n	800d3a2 <_malloc_r+0xea>
 800d32c:	6823      	ldr	r3, [r4, #0]
 800d32e:	442b      	add	r3, r5
 800d330:	6023      	str	r3, [r4, #0]
 800d332:	f8d8 3000 	ldr.w	r3, [r8]
 800d336:	685a      	ldr	r2, [r3, #4]
 800d338:	bb62      	cbnz	r2, 800d394 <_malloc_r+0xdc>
 800d33a:	f8c8 7000 	str.w	r7, [r8]
 800d33e:	e00f      	b.n	800d360 <_malloc_r+0xa8>
 800d340:	6822      	ldr	r2, [r4, #0]
 800d342:	1b52      	subs	r2, r2, r5
 800d344:	d420      	bmi.n	800d388 <_malloc_r+0xd0>
 800d346:	2a0b      	cmp	r2, #11
 800d348:	d917      	bls.n	800d37a <_malloc_r+0xc2>
 800d34a:	1961      	adds	r1, r4, r5
 800d34c:	42a3      	cmp	r3, r4
 800d34e:	6025      	str	r5, [r4, #0]
 800d350:	bf18      	it	ne
 800d352:	6059      	strne	r1, [r3, #4]
 800d354:	6863      	ldr	r3, [r4, #4]
 800d356:	bf08      	it	eq
 800d358:	f8c8 1000 	streq.w	r1, [r8]
 800d35c:	5162      	str	r2, [r4, r5]
 800d35e:	604b      	str	r3, [r1, #4]
 800d360:	4630      	mov	r0, r6
 800d362:	f000 f82f 	bl	800d3c4 <__malloc_unlock>
 800d366:	f104 000b 	add.w	r0, r4, #11
 800d36a:	1d23      	adds	r3, r4, #4
 800d36c:	f020 0007 	bic.w	r0, r0, #7
 800d370:	1ac2      	subs	r2, r0, r3
 800d372:	bf1c      	itt	ne
 800d374:	1a1b      	subne	r3, r3, r0
 800d376:	50a3      	strne	r3, [r4, r2]
 800d378:	e7af      	b.n	800d2da <_malloc_r+0x22>
 800d37a:	6862      	ldr	r2, [r4, #4]
 800d37c:	42a3      	cmp	r3, r4
 800d37e:	bf0c      	ite	eq
 800d380:	f8c8 2000 	streq.w	r2, [r8]
 800d384:	605a      	strne	r2, [r3, #4]
 800d386:	e7eb      	b.n	800d360 <_malloc_r+0xa8>
 800d388:	4623      	mov	r3, r4
 800d38a:	6864      	ldr	r4, [r4, #4]
 800d38c:	e7ae      	b.n	800d2ec <_malloc_r+0x34>
 800d38e:	463c      	mov	r4, r7
 800d390:	687f      	ldr	r7, [r7, #4]
 800d392:	e7b6      	b.n	800d302 <_malloc_r+0x4a>
 800d394:	461a      	mov	r2, r3
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	42a3      	cmp	r3, r4
 800d39a:	d1fb      	bne.n	800d394 <_malloc_r+0xdc>
 800d39c:	2300      	movs	r3, #0
 800d39e:	6053      	str	r3, [r2, #4]
 800d3a0:	e7de      	b.n	800d360 <_malloc_r+0xa8>
 800d3a2:	230c      	movs	r3, #12
 800d3a4:	6033      	str	r3, [r6, #0]
 800d3a6:	4630      	mov	r0, r6
 800d3a8:	f000 f80c 	bl	800d3c4 <__malloc_unlock>
 800d3ac:	e794      	b.n	800d2d8 <_malloc_r+0x20>
 800d3ae:	6005      	str	r5, [r0, #0]
 800d3b0:	e7d6      	b.n	800d360 <_malloc_r+0xa8>
 800d3b2:	bf00      	nop
 800d3b4:	200021ac 	.word	0x200021ac

0800d3b8 <__malloc_lock>:
 800d3b8:	4801      	ldr	r0, [pc, #4]	@ (800d3c0 <__malloc_lock+0x8>)
 800d3ba:	f7ff b8ba 	b.w	800c532 <__retarget_lock_acquire_recursive>
 800d3be:	bf00      	nop
 800d3c0:	200021a4 	.word	0x200021a4

0800d3c4 <__malloc_unlock>:
 800d3c4:	4801      	ldr	r0, [pc, #4]	@ (800d3cc <__malloc_unlock+0x8>)
 800d3c6:	f7ff b8b5 	b.w	800c534 <__retarget_lock_release_recursive>
 800d3ca:	bf00      	nop
 800d3cc:	200021a4 	.word	0x200021a4

0800d3d0 <_Balloc>:
 800d3d0:	b570      	push	{r4, r5, r6, lr}
 800d3d2:	69c6      	ldr	r6, [r0, #28]
 800d3d4:	4604      	mov	r4, r0
 800d3d6:	460d      	mov	r5, r1
 800d3d8:	b976      	cbnz	r6, 800d3f8 <_Balloc+0x28>
 800d3da:	2010      	movs	r0, #16
 800d3dc:	f7ff ff42 	bl	800d264 <malloc>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	61e0      	str	r0, [r4, #28]
 800d3e4:	b920      	cbnz	r0, 800d3f0 <_Balloc+0x20>
 800d3e6:	4b18      	ldr	r3, [pc, #96]	@ (800d448 <_Balloc+0x78>)
 800d3e8:	4818      	ldr	r0, [pc, #96]	@ (800d44c <_Balloc+0x7c>)
 800d3ea:	216b      	movs	r1, #107	@ 0x6b
 800d3ec:	f000 fdae 	bl	800df4c <__assert_func>
 800d3f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3f4:	6006      	str	r6, [r0, #0]
 800d3f6:	60c6      	str	r6, [r0, #12]
 800d3f8:	69e6      	ldr	r6, [r4, #28]
 800d3fa:	68f3      	ldr	r3, [r6, #12]
 800d3fc:	b183      	cbz	r3, 800d420 <_Balloc+0x50>
 800d3fe:	69e3      	ldr	r3, [r4, #28]
 800d400:	68db      	ldr	r3, [r3, #12]
 800d402:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d406:	b9b8      	cbnz	r0, 800d438 <_Balloc+0x68>
 800d408:	2101      	movs	r1, #1
 800d40a:	fa01 f605 	lsl.w	r6, r1, r5
 800d40e:	1d72      	adds	r2, r6, #5
 800d410:	0092      	lsls	r2, r2, #2
 800d412:	4620      	mov	r0, r4
 800d414:	f000 fdb8 	bl	800df88 <_calloc_r>
 800d418:	b160      	cbz	r0, 800d434 <_Balloc+0x64>
 800d41a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d41e:	e00e      	b.n	800d43e <_Balloc+0x6e>
 800d420:	2221      	movs	r2, #33	@ 0x21
 800d422:	2104      	movs	r1, #4
 800d424:	4620      	mov	r0, r4
 800d426:	f000 fdaf 	bl	800df88 <_calloc_r>
 800d42a:	69e3      	ldr	r3, [r4, #28]
 800d42c:	60f0      	str	r0, [r6, #12]
 800d42e:	68db      	ldr	r3, [r3, #12]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d1e4      	bne.n	800d3fe <_Balloc+0x2e>
 800d434:	2000      	movs	r0, #0
 800d436:	bd70      	pop	{r4, r5, r6, pc}
 800d438:	6802      	ldr	r2, [r0, #0]
 800d43a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d43e:	2300      	movs	r3, #0
 800d440:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d444:	e7f7      	b.n	800d436 <_Balloc+0x66>
 800d446:	bf00      	nop
 800d448:	0800eb9d 	.word	0x0800eb9d
 800d44c:	0800ec1d 	.word	0x0800ec1d

0800d450 <_Bfree>:
 800d450:	b570      	push	{r4, r5, r6, lr}
 800d452:	69c6      	ldr	r6, [r0, #28]
 800d454:	4605      	mov	r5, r0
 800d456:	460c      	mov	r4, r1
 800d458:	b976      	cbnz	r6, 800d478 <_Bfree+0x28>
 800d45a:	2010      	movs	r0, #16
 800d45c:	f7ff ff02 	bl	800d264 <malloc>
 800d460:	4602      	mov	r2, r0
 800d462:	61e8      	str	r0, [r5, #28]
 800d464:	b920      	cbnz	r0, 800d470 <_Bfree+0x20>
 800d466:	4b09      	ldr	r3, [pc, #36]	@ (800d48c <_Bfree+0x3c>)
 800d468:	4809      	ldr	r0, [pc, #36]	@ (800d490 <_Bfree+0x40>)
 800d46a:	218f      	movs	r1, #143	@ 0x8f
 800d46c:	f000 fd6e 	bl	800df4c <__assert_func>
 800d470:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d474:	6006      	str	r6, [r0, #0]
 800d476:	60c6      	str	r6, [r0, #12]
 800d478:	b13c      	cbz	r4, 800d48a <_Bfree+0x3a>
 800d47a:	69eb      	ldr	r3, [r5, #28]
 800d47c:	6862      	ldr	r2, [r4, #4]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d484:	6021      	str	r1, [r4, #0]
 800d486:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d48a:	bd70      	pop	{r4, r5, r6, pc}
 800d48c:	0800eb9d 	.word	0x0800eb9d
 800d490:	0800ec1d 	.word	0x0800ec1d

0800d494 <__multadd>:
 800d494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d498:	690d      	ldr	r5, [r1, #16]
 800d49a:	4607      	mov	r7, r0
 800d49c:	460c      	mov	r4, r1
 800d49e:	461e      	mov	r6, r3
 800d4a0:	f101 0c14 	add.w	ip, r1, #20
 800d4a4:	2000      	movs	r0, #0
 800d4a6:	f8dc 3000 	ldr.w	r3, [ip]
 800d4aa:	b299      	uxth	r1, r3
 800d4ac:	fb02 6101 	mla	r1, r2, r1, r6
 800d4b0:	0c1e      	lsrs	r6, r3, #16
 800d4b2:	0c0b      	lsrs	r3, r1, #16
 800d4b4:	fb02 3306 	mla	r3, r2, r6, r3
 800d4b8:	b289      	uxth	r1, r1
 800d4ba:	3001      	adds	r0, #1
 800d4bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d4c0:	4285      	cmp	r5, r0
 800d4c2:	f84c 1b04 	str.w	r1, [ip], #4
 800d4c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d4ca:	dcec      	bgt.n	800d4a6 <__multadd+0x12>
 800d4cc:	b30e      	cbz	r6, 800d512 <__multadd+0x7e>
 800d4ce:	68a3      	ldr	r3, [r4, #8]
 800d4d0:	42ab      	cmp	r3, r5
 800d4d2:	dc19      	bgt.n	800d508 <__multadd+0x74>
 800d4d4:	6861      	ldr	r1, [r4, #4]
 800d4d6:	4638      	mov	r0, r7
 800d4d8:	3101      	adds	r1, #1
 800d4da:	f7ff ff79 	bl	800d3d0 <_Balloc>
 800d4de:	4680      	mov	r8, r0
 800d4e0:	b928      	cbnz	r0, 800d4ee <__multadd+0x5a>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	4b0c      	ldr	r3, [pc, #48]	@ (800d518 <__multadd+0x84>)
 800d4e6:	480d      	ldr	r0, [pc, #52]	@ (800d51c <__multadd+0x88>)
 800d4e8:	21ba      	movs	r1, #186	@ 0xba
 800d4ea:	f000 fd2f 	bl	800df4c <__assert_func>
 800d4ee:	6922      	ldr	r2, [r4, #16]
 800d4f0:	3202      	adds	r2, #2
 800d4f2:	f104 010c 	add.w	r1, r4, #12
 800d4f6:	0092      	lsls	r2, r2, #2
 800d4f8:	300c      	adds	r0, #12
 800d4fa:	f000 fd19 	bl	800df30 <memcpy>
 800d4fe:	4621      	mov	r1, r4
 800d500:	4638      	mov	r0, r7
 800d502:	f7ff ffa5 	bl	800d450 <_Bfree>
 800d506:	4644      	mov	r4, r8
 800d508:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d50c:	3501      	adds	r5, #1
 800d50e:	615e      	str	r6, [r3, #20]
 800d510:	6125      	str	r5, [r4, #16]
 800d512:	4620      	mov	r0, r4
 800d514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d518:	0800ec0c 	.word	0x0800ec0c
 800d51c:	0800ec1d 	.word	0x0800ec1d

0800d520 <__hi0bits>:
 800d520:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d524:	4603      	mov	r3, r0
 800d526:	bf36      	itet	cc
 800d528:	0403      	lslcc	r3, r0, #16
 800d52a:	2000      	movcs	r0, #0
 800d52c:	2010      	movcc	r0, #16
 800d52e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d532:	bf3c      	itt	cc
 800d534:	021b      	lslcc	r3, r3, #8
 800d536:	3008      	addcc	r0, #8
 800d538:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d53c:	bf3c      	itt	cc
 800d53e:	011b      	lslcc	r3, r3, #4
 800d540:	3004      	addcc	r0, #4
 800d542:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d546:	bf3c      	itt	cc
 800d548:	009b      	lslcc	r3, r3, #2
 800d54a:	3002      	addcc	r0, #2
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	db05      	blt.n	800d55c <__hi0bits+0x3c>
 800d550:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d554:	f100 0001 	add.w	r0, r0, #1
 800d558:	bf08      	it	eq
 800d55a:	2020      	moveq	r0, #32
 800d55c:	4770      	bx	lr

0800d55e <__lo0bits>:
 800d55e:	6803      	ldr	r3, [r0, #0]
 800d560:	4602      	mov	r2, r0
 800d562:	f013 0007 	ands.w	r0, r3, #7
 800d566:	d00b      	beq.n	800d580 <__lo0bits+0x22>
 800d568:	07d9      	lsls	r1, r3, #31
 800d56a:	d421      	bmi.n	800d5b0 <__lo0bits+0x52>
 800d56c:	0798      	lsls	r0, r3, #30
 800d56e:	bf49      	itett	mi
 800d570:	085b      	lsrmi	r3, r3, #1
 800d572:	089b      	lsrpl	r3, r3, #2
 800d574:	2001      	movmi	r0, #1
 800d576:	6013      	strmi	r3, [r2, #0]
 800d578:	bf5c      	itt	pl
 800d57a:	6013      	strpl	r3, [r2, #0]
 800d57c:	2002      	movpl	r0, #2
 800d57e:	4770      	bx	lr
 800d580:	b299      	uxth	r1, r3
 800d582:	b909      	cbnz	r1, 800d588 <__lo0bits+0x2a>
 800d584:	0c1b      	lsrs	r3, r3, #16
 800d586:	2010      	movs	r0, #16
 800d588:	b2d9      	uxtb	r1, r3
 800d58a:	b909      	cbnz	r1, 800d590 <__lo0bits+0x32>
 800d58c:	3008      	adds	r0, #8
 800d58e:	0a1b      	lsrs	r3, r3, #8
 800d590:	0719      	lsls	r1, r3, #28
 800d592:	bf04      	itt	eq
 800d594:	091b      	lsreq	r3, r3, #4
 800d596:	3004      	addeq	r0, #4
 800d598:	0799      	lsls	r1, r3, #30
 800d59a:	bf04      	itt	eq
 800d59c:	089b      	lsreq	r3, r3, #2
 800d59e:	3002      	addeq	r0, #2
 800d5a0:	07d9      	lsls	r1, r3, #31
 800d5a2:	d403      	bmi.n	800d5ac <__lo0bits+0x4e>
 800d5a4:	085b      	lsrs	r3, r3, #1
 800d5a6:	f100 0001 	add.w	r0, r0, #1
 800d5aa:	d003      	beq.n	800d5b4 <__lo0bits+0x56>
 800d5ac:	6013      	str	r3, [r2, #0]
 800d5ae:	4770      	bx	lr
 800d5b0:	2000      	movs	r0, #0
 800d5b2:	4770      	bx	lr
 800d5b4:	2020      	movs	r0, #32
 800d5b6:	4770      	bx	lr

0800d5b8 <__i2b>:
 800d5b8:	b510      	push	{r4, lr}
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	2101      	movs	r1, #1
 800d5be:	f7ff ff07 	bl	800d3d0 <_Balloc>
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	b928      	cbnz	r0, 800d5d2 <__i2b+0x1a>
 800d5c6:	4b05      	ldr	r3, [pc, #20]	@ (800d5dc <__i2b+0x24>)
 800d5c8:	4805      	ldr	r0, [pc, #20]	@ (800d5e0 <__i2b+0x28>)
 800d5ca:	f240 1145 	movw	r1, #325	@ 0x145
 800d5ce:	f000 fcbd 	bl	800df4c <__assert_func>
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	6144      	str	r4, [r0, #20]
 800d5d6:	6103      	str	r3, [r0, #16]
 800d5d8:	bd10      	pop	{r4, pc}
 800d5da:	bf00      	nop
 800d5dc:	0800ec0c 	.word	0x0800ec0c
 800d5e0:	0800ec1d 	.word	0x0800ec1d

0800d5e4 <__multiply>:
 800d5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e8:	4614      	mov	r4, r2
 800d5ea:	690a      	ldr	r2, [r1, #16]
 800d5ec:	6923      	ldr	r3, [r4, #16]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	bfa8      	it	ge
 800d5f2:	4623      	movge	r3, r4
 800d5f4:	460f      	mov	r7, r1
 800d5f6:	bfa4      	itt	ge
 800d5f8:	460c      	movge	r4, r1
 800d5fa:	461f      	movge	r7, r3
 800d5fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d600:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d604:	68a3      	ldr	r3, [r4, #8]
 800d606:	6861      	ldr	r1, [r4, #4]
 800d608:	eb0a 0609 	add.w	r6, sl, r9
 800d60c:	42b3      	cmp	r3, r6
 800d60e:	b085      	sub	sp, #20
 800d610:	bfb8      	it	lt
 800d612:	3101      	addlt	r1, #1
 800d614:	f7ff fedc 	bl	800d3d0 <_Balloc>
 800d618:	b930      	cbnz	r0, 800d628 <__multiply+0x44>
 800d61a:	4602      	mov	r2, r0
 800d61c:	4b44      	ldr	r3, [pc, #272]	@ (800d730 <__multiply+0x14c>)
 800d61e:	4845      	ldr	r0, [pc, #276]	@ (800d734 <__multiply+0x150>)
 800d620:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d624:	f000 fc92 	bl	800df4c <__assert_func>
 800d628:	f100 0514 	add.w	r5, r0, #20
 800d62c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d630:	462b      	mov	r3, r5
 800d632:	2200      	movs	r2, #0
 800d634:	4543      	cmp	r3, r8
 800d636:	d321      	bcc.n	800d67c <__multiply+0x98>
 800d638:	f107 0114 	add.w	r1, r7, #20
 800d63c:	f104 0214 	add.w	r2, r4, #20
 800d640:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d644:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d648:	9302      	str	r3, [sp, #8]
 800d64a:	1b13      	subs	r3, r2, r4
 800d64c:	3b15      	subs	r3, #21
 800d64e:	f023 0303 	bic.w	r3, r3, #3
 800d652:	3304      	adds	r3, #4
 800d654:	f104 0715 	add.w	r7, r4, #21
 800d658:	42ba      	cmp	r2, r7
 800d65a:	bf38      	it	cc
 800d65c:	2304      	movcc	r3, #4
 800d65e:	9301      	str	r3, [sp, #4]
 800d660:	9b02      	ldr	r3, [sp, #8]
 800d662:	9103      	str	r1, [sp, #12]
 800d664:	428b      	cmp	r3, r1
 800d666:	d80c      	bhi.n	800d682 <__multiply+0x9e>
 800d668:	2e00      	cmp	r6, #0
 800d66a:	dd03      	ble.n	800d674 <__multiply+0x90>
 800d66c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d670:	2b00      	cmp	r3, #0
 800d672:	d05b      	beq.n	800d72c <__multiply+0x148>
 800d674:	6106      	str	r6, [r0, #16]
 800d676:	b005      	add	sp, #20
 800d678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d67c:	f843 2b04 	str.w	r2, [r3], #4
 800d680:	e7d8      	b.n	800d634 <__multiply+0x50>
 800d682:	f8b1 a000 	ldrh.w	sl, [r1]
 800d686:	f1ba 0f00 	cmp.w	sl, #0
 800d68a:	d024      	beq.n	800d6d6 <__multiply+0xf2>
 800d68c:	f104 0e14 	add.w	lr, r4, #20
 800d690:	46a9      	mov	r9, r5
 800d692:	f04f 0c00 	mov.w	ip, #0
 800d696:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d69a:	f8d9 3000 	ldr.w	r3, [r9]
 800d69e:	fa1f fb87 	uxth.w	fp, r7
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	fb0a 330b 	mla	r3, sl, fp, r3
 800d6a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d6ac:	f8d9 7000 	ldr.w	r7, [r9]
 800d6b0:	4463      	add	r3, ip
 800d6b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d6b6:	fb0a c70b 	mla	r7, sl, fp, ip
 800d6ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d6c4:	4572      	cmp	r2, lr
 800d6c6:	f849 3b04 	str.w	r3, [r9], #4
 800d6ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d6ce:	d8e2      	bhi.n	800d696 <__multiply+0xb2>
 800d6d0:	9b01      	ldr	r3, [sp, #4]
 800d6d2:	f845 c003 	str.w	ip, [r5, r3]
 800d6d6:	9b03      	ldr	r3, [sp, #12]
 800d6d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d6dc:	3104      	adds	r1, #4
 800d6de:	f1b9 0f00 	cmp.w	r9, #0
 800d6e2:	d021      	beq.n	800d728 <__multiply+0x144>
 800d6e4:	682b      	ldr	r3, [r5, #0]
 800d6e6:	f104 0c14 	add.w	ip, r4, #20
 800d6ea:	46ae      	mov	lr, r5
 800d6ec:	f04f 0a00 	mov.w	sl, #0
 800d6f0:	f8bc b000 	ldrh.w	fp, [ip]
 800d6f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d6f8:	fb09 770b 	mla	r7, r9, fp, r7
 800d6fc:	4457      	add	r7, sl
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d704:	f84e 3b04 	str.w	r3, [lr], #4
 800d708:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d70c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d710:	f8be 3000 	ldrh.w	r3, [lr]
 800d714:	fb09 330a 	mla	r3, r9, sl, r3
 800d718:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d71c:	4562      	cmp	r2, ip
 800d71e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d722:	d8e5      	bhi.n	800d6f0 <__multiply+0x10c>
 800d724:	9f01      	ldr	r7, [sp, #4]
 800d726:	51eb      	str	r3, [r5, r7]
 800d728:	3504      	adds	r5, #4
 800d72a:	e799      	b.n	800d660 <__multiply+0x7c>
 800d72c:	3e01      	subs	r6, #1
 800d72e:	e79b      	b.n	800d668 <__multiply+0x84>
 800d730:	0800ec0c 	.word	0x0800ec0c
 800d734:	0800ec1d 	.word	0x0800ec1d

0800d738 <__pow5mult>:
 800d738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d73c:	4615      	mov	r5, r2
 800d73e:	f012 0203 	ands.w	r2, r2, #3
 800d742:	4607      	mov	r7, r0
 800d744:	460e      	mov	r6, r1
 800d746:	d007      	beq.n	800d758 <__pow5mult+0x20>
 800d748:	4c25      	ldr	r4, [pc, #148]	@ (800d7e0 <__pow5mult+0xa8>)
 800d74a:	3a01      	subs	r2, #1
 800d74c:	2300      	movs	r3, #0
 800d74e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d752:	f7ff fe9f 	bl	800d494 <__multadd>
 800d756:	4606      	mov	r6, r0
 800d758:	10ad      	asrs	r5, r5, #2
 800d75a:	d03d      	beq.n	800d7d8 <__pow5mult+0xa0>
 800d75c:	69fc      	ldr	r4, [r7, #28]
 800d75e:	b97c      	cbnz	r4, 800d780 <__pow5mult+0x48>
 800d760:	2010      	movs	r0, #16
 800d762:	f7ff fd7f 	bl	800d264 <malloc>
 800d766:	4602      	mov	r2, r0
 800d768:	61f8      	str	r0, [r7, #28]
 800d76a:	b928      	cbnz	r0, 800d778 <__pow5mult+0x40>
 800d76c:	4b1d      	ldr	r3, [pc, #116]	@ (800d7e4 <__pow5mult+0xac>)
 800d76e:	481e      	ldr	r0, [pc, #120]	@ (800d7e8 <__pow5mult+0xb0>)
 800d770:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d774:	f000 fbea 	bl	800df4c <__assert_func>
 800d778:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d77c:	6004      	str	r4, [r0, #0]
 800d77e:	60c4      	str	r4, [r0, #12]
 800d780:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d784:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d788:	b94c      	cbnz	r4, 800d79e <__pow5mult+0x66>
 800d78a:	f240 2171 	movw	r1, #625	@ 0x271
 800d78e:	4638      	mov	r0, r7
 800d790:	f7ff ff12 	bl	800d5b8 <__i2b>
 800d794:	2300      	movs	r3, #0
 800d796:	f8c8 0008 	str.w	r0, [r8, #8]
 800d79a:	4604      	mov	r4, r0
 800d79c:	6003      	str	r3, [r0, #0]
 800d79e:	f04f 0900 	mov.w	r9, #0
 800d7a2:	07eb      	lsls	r3, r5, #31
 800d7a4:	d50a      	bpl.n	800d7bc <__pow5mult+0x84>
 800d7a6:	4631      	mov	r1, r6
 800d7a8:	4622      	mov	r2, r4
 800d7aa:	4638      	mov	r0, r7
 800d7ac:	f7ff ff1a 	bl	800d5e4 <__multiply>
 800d7b0:	4631      	mov	r1, r6
 800d7b2:	4680      	mov	r8, r0
 800d7b4:	4638      	mov	r0, r7
 800d7b6:	f7ff fe4b 	bl	800d450 <_Bfree>
 800d7ba:	4646      	mov	r6, r8
 800d7bc:	106d      	asrs	r5, r5, #1
 800d7be:	d00b      	beq.n	800d7d8 <__pow5mult+0xa0>
 800d7c0:	6820      	ldr	r0, [r4, #0]
 800d7c2:	b938      	cbnz	r0, 800d7d4 <__pow5mult+0x9c>
 800d7c4:	4622      	mov	r2, r4
 800d7c6:	4621      	mov	r1, r4
 800d7c8:	4638      	mov	r0, r7
 800d7ca:	f7ff ff0b 	bl	800d5e4 <__multiply>
 800d7ce:	6020      	str	r0, [r4, #0]
 800d7d0:	f8c0 9000 	str.w	r9, [r0]
 800d7d4:	4604      	mov	r4, r0
 800d7d6:	e7e4      	b.n	800d7a2 <__pow5mult+0x6a>
 800d7d8:	4630      	mov	r0, r6
 800d7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7de:	bf00      	nop
 800d7e0:	0800ec78 	.word	0x0800ec78
 800d7e4:	0800eb9d 	.word	0x0800eb9d
 800d7e8:	0800ec1d 	.word	0x0800ec1d

0800d7ec <__lshift>:
 800d7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7f0:	460c      	mov	r4, r1
 800d7f2:	6849      	ldr	r1, [r1, #4]
 800d7f4:	6923      	ldr	r3, [r4, #16]
 800d7f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d7fa:	68a3      	ldr	r3, [r4, #8]
 800d7fc:	4607      	mov	r7, r0
 800d7fe:	4691      	mov	r9, r2
 800d800:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d804:	f108 0601 	add.w	r6, r8, #1
 800d808:	42b3      	cmp	r3, r6
 800d80a:	db0b      	blt.n	800d824 <__lshift+0x38>
 800d80c:	4638      	mov	r0, r7
 800d80e:	f7ff fddf 	bl	800d3d0 <_Balloc>
 800d812:	4605      	mov	r5, r0
 800d814:	b948      	cbnz	r0, 800d82a <__lshift+0x3e>
 800d816:	4602      	mov	r2, r0
 800d818:	4b28      	ldr	r3, [pc, #160]	@ (800d8bc <__lshift+0xd0>)
 800d81a:	4829      	ldr	r0, [pc, #164]	@ (800d8c0 <__lshift+0xd4>)
 800d81c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d820:	f000 fb94 	bl	800df4c <__assert_func>
 800d824:	3101      	adds	r1, #1
 800d826:	005b      	lsls	r3, r3, #1
 800d828:	e7ee      	b.n	800d808 <__lshift+0x1c>
 800d82a:	2300      	movs	r3, #0
 800d82c:	f100 0114 	add.w	r1, r0, #20
 800d830:	f100 0210 	add.w	r2, r0, #16
 800d834:	4618      	mov	r0, r3
 800d836:	4553      	cmp	r3, sl
 800d838:	db33      	blt.n	800d8a2 <__lshift+0xb6>
 800d83a:	6920      	ldr	r0, [r4, #16]
 800d83c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d840:	f104 0314 	add.w	r3, r4, #20
 800d844:	f019 091f 	ands.w	r9, r9, #31
 800d848:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d84c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d850:	d02b      	beq.n	800d8aa <__lshift+0xbe>
 800d852:	f1c9 0e20 	rsb	lr, r9, #32
 800d856:	468a      	mov	sl, r1
 800d858:	2200      	movs	r2, #0
 800d85a:	6818      	ldr	r0, [r3, #0]
 800d85c:	fa00 f009 	lsl.w	r0, r0, r9
 800d860:	4310      	orrs	r0, r2
 800d862:	f84a 0b04 	str.w	r0, [sl], #4
 800d866:	f853 2b04 	ldr.w	r2, [r3], #4
 800d86a:	459c      	cmp	ip, r3
 800d86c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d870:	d8f3      	bhi.n	800d85a <__lshift+0x6e>
 800d872:	ebac 0304 	sub.w	r3, ip, r4
 800d876:	3b15      	subs	r3, #21
 800d878:	f023 0303 	bic.w	r3, r3, #3
 800d87c:	3304      	adds	r3, #4
 800d87e:	f104 0015 	add.w	r0, r4, #21
 800d882:	4584      	cmp	ip, r0
 800d884:	bf38      	it	cc
 800d886:	2304      	movcc	r3, #4
 800d888:	50ca      	str	r2, [r1, r3]
 800d88a:	b10a      	cbz	r2, 800d890 <__lshift+0xa4>
 800d88c:	f108 0602 	add.w	r6, r8, #2
 800d890:	3e01      	subs	r6, #1
 800d892:	4638      	mov	r0, r7
 800d894:	612e      	str	r6, [r5, #16]
 800d896:	4621      	mov	r1, r4
 800d898:	f7ff fdda 	bl	800d450 <_Bfree>
 800d89c:	4628      	mov	r0, r5
 800d89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	e7c5      	b.n	800d836 <__lshift+0x4a>
 800d8aa:	3904      	subs	r1, #4
 800d8ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d8b4:	459c      	cmp	ip, r3
 800d8b6:	d8f9      	bhi.n	800d8ac <__lshift+0xc0>
 800d8b8:	e7ea      	b.n	800d890 <__lshift+0xa4>
 800d8ba:	bf00      	nop
 800d8bc:	0800ec0c 	.word	0x0800ec0c
 800d8c0:	0800ec1d 	.word	0x0800ec1d

0800d8c4 <__mcmp>:
 800d8c4:	690a      	ldr	r2, [r1, #16]
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	6900      	ldr	r0, [r0, #16]
 800d8ca:	1a80      	subs	r0, r0, r2
 800d8cc:	b530      	push	{r4, r5, lr}
 800d8ce:	d10e      	bne.n	800d8ee <__mcmp+0x2a>
 800d8d0:	3314      	adds	r3, #20
 800d8d2:	3114      	adds	r1, #20
 800d8d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d8d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d8dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d8e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d8e4:	4295      	cmp	r5, r2
 800d8e6:	d003      	beq.n	800d8f0 <__mcmp+0x2c>
 800d8e8:	d205      	bcs.n	800d8f6 <__mcmp+0x32>
 800d8ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ee:	bd30      	pop	{r4, r5, pc}
 800d8f0:	42a3      	cmp	r3, r4
 800d8f2:	d3f3      	bcc.n	800d8dc <__mcmp+0x18>
 800d8f4:	e7fb      	b.n	800d8ee <__mcmp+0x2a>
 800d8f6:	2001      	movs	r0, #1
 800d8f8:	e7f9      	b.n	800d8ee <__mcmp+0x2a>
	...

0800d8fc <__mdiff>:
 800d8fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d900:	4689      	mov	r9, r1
 800d902:	4606      	mov	r6, r0
 800d904:	4611      	mov	r1, r2
 800d906:	4648      	mov	r0, r9
 800d908:	4614      	mov	r4, r2
 800d90a:	f7ff ffdb 	bl	800d8c4 <__mcmp>
 800d90e:	1e05      	subs	r5, r0, #0
 800d910:	d112      	bne.n	800d938 <__mdiff+0x3c>
 800d912:	4629      	mov	r1, r5
 800d914:	4630      	mov	r0, r6
 800d916:	f7ff fd5b 	bl	800d3d0 <_Balloc>
 800d91a:	4602      	mov	r2, r0
 800d91c:	b928      	cbnz	r0, 800d92a <__mdiff+0x2e>
 800d91e:	4b3f      	ldr	r3, [pc, #252]	@ (800da1c <__mdiff+0x120>)
 800d920:	f240 2137 	movw	r1, #567	@ 0x237
 800d924:	483e      	ldr	r0, [pc, #248]	@ (800da20 <__mdiff+0x124>)
 800d926:	f000 fb11 	bl	800df4c <__assert_func>
 800d92a:	2301      	movs	r3, #1
 800d92c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d930:	4610      	mov	r0, r2
 800d932:	b003      	add	sp, #12
 800d934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d938:	bfbc      	itt	lt
 800d93a:	464b      	movlt	r3, r9
 800d93c:	46a1      	movlt	r9, r4
 800d93e:	4630      	mov	r0, r6
 800d940:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d944:	bfba      	itte	lt
 800d946:	461c      	movlt	r4, r3
 800d948:	2501      	movlt	r5, #1
 800d94a:	2500      	movge	r5, #0
 800d94c:	f7ff fd40 	bl	800d3d0 <_Balloc>
 800d950:	4602      	mov	r2, r0
 800d952:	b918      	cbnz	r0, 800d95c <__mdiff+0x60>
 800d954:	4b31      	ldr	r3, [pc, #196]	@ (800da1c <__mdiff+0x120>)
 800d956:	f240 2145 	movw	r1, #581	@ 0x245
 800d95a:	e7e3      	b.n	800d924 <__mdiff+0x28>
 800d95c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d960:	6926      	ldr	r6, [r4, #16]
 800d962:	60c5      	str	r5, [r0, #12]
 800d964:	f109 0310 	add.w	r3, r9, #16
 800d968:	f109 0514 	add.w	r5, r9, #20
 800d96c:	f104 0e14 	add.w	lr, r4, #20
 800d970:	f100 0b14 	add.w	fp, r0, #20
 800d974:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d978:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d97c:	9301      	str	r3, [sp, #4]
 800d97e:	46d9      	mov	r9, fp
 800d980:	f04f 0c00 	mov.w	ip, #0
 800d984:	9b01      	ldr	r3, [sp, #4]
 800d986:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d98a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d98e:	9301      	str	r3, [sp, #4]
 800d990:	fa1f f38a 	uxth.w	r3, sl
 800d994:	4619      	mov	r1, r3
 800d996:	b283      	uxth	r3, r0
 800d998:	1acb      	subs	r3, r1, r3
 800d99a:	0c00      	lsrs	r0, r0, #16
 800d99c:	4463      	add	r3, ip
 800d99e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d9a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d9a6:	b29b      	uxth	r3, r3
 800d9a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d9ac:	4576      	cmp	r6, lr
 800d9ae:	f849 3b04 	str.w	r3, [r9], #4
 800d9b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d9b6:	d8e5      	bhi.n	800d984 <__mdiff+0x88>
 800d9b8:	1b33      	subs	r3, r6, r4
 800d9ba:	3b15      	subs	r3, #21
 800d9bc:	f023 0303 	bic.w	r3, r3, #3
 800d9c0:	3415      	adds	r4, #21
 800d9c2:	3304      	adds	r3, #4
 800d9c4:	42a6      	cmp	r6, r4
 800d9c6:	bf38      	it	cc
 800d9c8:	2304      	movcc	r3, #4
 800d9ca:	441d      	add	r5, r3
 800d9cc:	445b      	add	r3, fp
 800d9ce:	461e      	mov	r6, r3
 800d9d0:	462c      	mov	r4, r5
 800d9d2:	4544      	cmp	r4, r8
 800d9d4:	d30e      	bcc.n	800d9f4 <__mdiff+0xf8>
 800d9d6:	f108 0103 	add.w	r1, r8, #3
 800d9da:	1b49      	subs	r1, r1, r5
 800d9dc:	f021 0103 	bic.w	r1, r1, #3
 800d9e0:	3d03      	subs	r5, #3
 800d9e2:	45a8      	cmp	r8, r5
 800d9e4:	bf38      	it	cc
 800d9e6:	2100      	movcc	r1, #0
 800d9e8:	440b      	add	r3, r1
 800d9ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d9ee:	b191      	cbz	r1, 800da16 <__mdiff+0x11a>
 800d9f0:	6117      	str	r7, [r2, #16]
 800d9f2:	e79d      	b.n	800d930 <__mdiff+0x34>
 800d9f4:	f854 1b04 	ldr.w	r1, [r4], #4
 800d9f8:	46e6      	mov	lr, ip
 800d9fa:	0c08      	lsrs	r0, r1, #16
 800d9fc:	fa1c fc81 	uxtah	ip, ip, r1
 800da00:	4471      	add	r1, lr
 800da02:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800da06:	b289      	uxth	r1, r1
 800da08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800da0c:	f846 1b04 	str.w	r1, [r6], #4
 800da10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800da14:	e7dd      	b.n	800d9d2 <__mdiff+0xd6>
 800da16:	3f01      	subs	r7, #1
 800da18:	e7e7      	b.n	800d9ea <__mdiff+0xee>
 800da1a:	bf00      	nop
 800da1c:	0800ec0c 	.word	0x0800ec0c
 800da20:	0800ec1d 	.word	0x0800ec1d

0800da24 <__d2b>:
 800da24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da28:	460f      	mov	r7, r1
 800da2a:	2101      	movs	r1, #1
 800da2c:	ec59 8b10 	vmov	r8, r9, d0
 800da30:	4616      	mov	r6, r2
 800da32:	f7ff fccd 	bl	800d3d0 <_Balloc>
 800da36:	4604      	mov	r4, r0
 800da38:	b930      	cbnz	r0, 800da48 <__d2b+0x24>
 800da3a:	4602      	mov	r2, r0
 800da3c:	4b23      	ldr	r3, [pc, #140]	@ (800dacc <__d2b+0xa8>)
 800da3e:	4824      	ldr	r0, [pc, #144]	@ (800dad0 <__d2b+0xac>)
 800da40:	f240 310f 	movw	r1, #783	@ 0x30f
 800da44:	f000 fa82 	bl	800df4c <__assert_func>
 800da48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800da4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800da50:	b10d      	cbz	r5, 800da56 <__d2b+0x32>
 800da52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800da56:	9301      	str	r3, [sp, #4]
 800da58:	f1b8 0300 	subs.w	r3, r8, #0
 800da5c:	d023      	beq.n	800daa6 <__d2b+0x82>
 800da5e:	4668      	mov	r0, sp
 800da60:	9300      	str	r3, [sp, #0]
 800da62:	f7ff fd7c 	bl	800d55e <__lo0bits>
 800da66:	e9dd 1200 	ldrd	r1, r2, [sp]
 800da6a:	b1d0      	cbz	r0, 800daa2 <__d2b+0x7e>
 800da6c:	f1c0 0320 	rsb	r3, r0, #32
 800da70:	fa02 f303 	lsl.w	r3, r2, r3
 800da74:	430b      	orrs	r3, r1
 800da76:	40c2      	lsrs	r2, r0
 800da78:	6163      	str	r3, [r4, #20]
 800da7a:	9201      	str	r2, [sp, #4]
 800da7c:	9b01      	ldr	r3, [sp, #4]
 800da7e:	61a3      	str	r3, [r4, #24]
 800da80:	2b00      	cmp	r3, #0
 800da82:	bf0c      	ite	eq
 800da84:	2201      	moveq	r2, #1
 800da86:	2202      	movne	r2, #2
 800da88:	6122      	str	r2, [r4, #16]
 800da8a:	b1a5      	cbz	r5, 800dab6 <__d2b+0x92>
 800da8c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800da90:	4405      	add	r5, r0
 800da92:	603d      	str	r5, [r7, #0]
 800da94:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800da98:	6030      	str	r0, [r6, #0]
 800da9a:	4620      	mov	r0, r4
 800da9c:	b003      	add	sp, #12
 800da9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800daa2:	6161      	str	r1, [r4, #20]
 800daa4:	e7ea      	b.n	800da7c <__d2b+0x58>
 800daa6:	a801      	add	r0, sp, #4
 800daa8:	f7ff fd59 	bl	800d55e <__lo0bits>
 800daac:	9b01      	ldr	r3, [sp, #4]
 800daae:	6163      	str	r3, [r4, #20]
 800dab0:	3020      	adds	r0, #32
 800dab2:	2201      	movs	r2, #1
 800dab4:	e7e8      	b.n	800da88 <__d2b+0x64>
 800dab6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800daba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dabe:	6038      	str	r0, [r7, #0]
 800dac0:	6918      	ldr	r0, [r3, #16]
 800dac2:	f7ff fd2d 	bl	800d520 <__hi0bits>
 800dac6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800daca:	e7e5      	b.n	800da98 <__d2b+0x74>
 800dacc:	0800ec0c 	.word	0x0800ec0c
 800dad0:	0800ec1d 	.word	0x0800ec1d

0800dad4 <__ssputs_r>:
 800dad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dad8:	688e      	ldr	r6, [r1, #8]
 800dada:	461f      	mov	r7, r3
 800dadc:	42be      	cmp	r6, r7
 800dade:	680b      	ldr	r3, [r1, #0]
 800dae0:	4682      	mov	sl, r0
 800dae2:	460c      	mov	r4, r1
 800dae4:	4690      	mov	r8, r2
 800dae6:	d82d      	bhi.n	800db44 <__ssputs_r+0x70>
 800dae8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800daec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800daf0:	d026      	beq.n	800db40 <__ssputs_r+0x6c>
 800daf2:	6965      	ldr	r5, [r4, #20]
 800daf4:	6909      	ldr	r1, [r1, #16]
 800daf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dafa:	eba3 0901 	sub.w	r9, r3, r1
 800dafe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db02:	1c7b      	adds	r3, r7, #1
 800db04:	444b      	add	r3, r9
 800db06:	106d      	asrs	r5, r5, #1
 800db08:	429d      	cmp	r5, r3
 800db0a:	bf38      	it	cc
 800db0c:	461d      	movcc	r5, r3
 800db0e:	0553      	lsls	r3, r2, #21
 800db10:	d527      	bpl.n	800db62 <__ssputs_r+0x8e>
 800db12:	4629      	mov	r1, r5
 800db14:	f7ff fbd0 	bl	800d2b8 <_malloc_r>
 800db18:	4606      	mov	r6, r0
 800db1a:	b360      	cbz	r0, 800db76 <__ssputs_r+0xa2>
 800db1c:	6921      	ldr	r1, [r4, #16]
 800db1e:	464a      	mov	r2, r9
 800db20:	f000 fa06 	bl	800df30 <memcpy>
 800db24:	89a3      	ldrh	r3, [r4, #12]
 800db26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800db2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db2e:	81a3      	strh	r3, [r4, #12]
 800db30:	6126      	str	r6, [r4, #16]
 800db32:	6165      	str	r5, [r4, #20]
 800db34:	444e      	add	r6, r9
 800db36:	eba5 0509 	sub.w	r5, r5, r9
 800db3a:	6026      	str	r6, [r4, #0]
 800db3c:	60a5      	str	r5, [r4, #8]
 800db3e:	463e      	mov	r6, r7
 800db40:	42be      	cmp	r6, r7
 800db42:	d900      	bls.n	800db46 <__ssputs_r+0x72>
 800db44:	463e      	mov	r6, r7
 800db46:	6820      	ldr	r0, [r4, #0]
 800db48:	4632      	mov	r2, r6
 800db4a:	4641      	mov	r1, r8
 800db4c:	f000 f9c6 	bl	800dedc <memmove>
 800db50:	68a3      	ldr	r3, [r4, #8]
 800db52:	1b9b      	subs	r3, r3, r6
 800db54:	60a3      	str	r3, [r4, #8]
 800db56:	6823      	ldr	r3, [r4, #0]
 800db58:	4433      	add	r3, r6
 800db5a:	6023      	str	r3, [r4, #0]
 800db5c:	2000      	movs	r0, #0
 800db5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db62:	462a      	mov	r2, r5
 800db64:	f000 fa36 	bl	800dfd4 <_realloc_r>
 800db68:	4606      	mov	r6, r0
 800db6a:	2800      	cmp	r0, #0
 800db6c:	d1e0      	bne.n	800db30 <__ssputs_r+0x5c>
 800db6e:	6921      	ldr	r1, [r4, #16]
 800db70:	4650      	mov	r0, sl
 800db72:	f7ff fb2d 	bl	800d1d0 <_free_r>
 800db76:	230c      	movs	r3, #12
 800db78:	f8ca 3000 	str.w	r3, [sl]
 800db7c:	89a3      	ldrh	r3, [r4, #12]
 800db7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db82:	81a3      	strh	r3, [r4, #12]
 800db84:	f04f 30ff 	mov.w	r0, #4294967295
 800db88:	e7e9      	b.n	800db5e <__ssputs_r+0x8a>
	...

0800db8c <_svfiprintf_r>:
 800db8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db90:	4698      	mov	r8, r3
 800db92:	898b      	ldrh	r3, [r1, #12]
 800db94:	061b      	lsls	r3, r3, #24
 800db96:	b09d      	sub	sp, #116	@ 0x74
 800db98:	4607      	mov	r7, r0
 800db9a:	460d      	mov	r5, r1
 800db9c:	4614      	mov	r4, r2
 800db9e:	d510      	bpl.n	800dbc2 <_svfiprintf_r+0x36>
 800dba0:	690b      	ldr	r3, [r1, #16]
 800dba2:	b973      	cbnz	r3, 800dbc2 <_svfiprintf_r+0x36>
 800dba4:	2140      	movs	r1, #64	@ 0x40
 800dba6:	f7ff fb87 	bl	800d2b8 <_malloc_r>
 800dbaa:	6028      	str	r0, [r5, #0]
 800dbac:	6128      	str	r0, [r5, #16]
 800dbae:	b930      	cbnz	r0, 800dbbe <_svfiprintf_r+0x32>
 800dbb0:	230c      	movs	r3, #12
 800dbb2:	603b      	str	r3, [r7, #0]
 800dbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb8:	b01d      	add	sp, #116	@ 0x74
 800dbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbbe:	2340      	movs	r3, #64	@ 0x40
 800dbc0:	616b      	str	r3, [r5, #20]
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbc6:	2320      	movs	r3, #32
 800dbc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dbcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbd0:	2330      	movs	r3, #48	@ 0x30
 800dbd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dd70 <_svfiprintf_r+0x1e4>
 800dbd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dbda:	f04f 0901 	mov.w	r9, #1
 800dbde:	4623      	mov	r3, r4
 800dbe0:	469a      	mov	sl, r3
 800dbe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbe6:	b10a      	cbz	r2, 800dbec <_svfiprintf_r+0x60>
 800dbe8:	2a25      	cmp	r2, #37	@ 0x25
 800dbea:	d1f9      	bne.n	800dbe0 <_svfiprintf_r+0x54>
 800dbec:	ebba 0b04 	subs.w	fp, sl, r4
 800dbf0:	d00b      	beq.n	800dc0a <_svfiprintf_r+0x7e>
 800dbf2:	465b      	mov	r3, fp
 800dbf4:	4622      	mov	r2, r4
 800dbf6:	4629      	mov	r1, r5
 800dbf8:	4638      	mov	r0, r7
 800dbfa:	f7ff ff6b 	bl	800dad4 <__ssputs_r>
 800dbfe:	3001      	adds	r0, #1
 800dc00:	f000 80a7 	beq.w	800dd52 <_svfiprintf_r+0x1c6>
 800dc04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc06:	445a      	add	r2, fp
 800dc08:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc0a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	f000 809f 	beq.w	800dd52 <_svfiprintf_r+0x1c6>
 800dc14:	2300      	movs	r3, #0
 800dc16:	f04f 32ff 	mov.w	r2, #4294967295
 800dc1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc1e:	f10a 0a01 	add.w	sl, sl, #1
 800dc22:	9304      	str	r3, [sp, #16]
 800dc24:	9307      	str	r3, [sp, #28]
 800dc26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc2a:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc2c:	4654      	mov	r4, sl
 800dc2e:	2205      	movs	r2, #5
 800dc30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc34:	484e      	ldr	r0, [pc, #312]	@ (800dd70 <_svfiprintf_r+0x1e4>)
 800dc36:	f7f2 fad3 	bl	80001e0 <memchr>
 800dc3a:	9a04      	ldr	r2, [sp, #16]
 800dc3c:	b9d8      	cbnz	r0, 800dc76 <_svfiprintf_r+0xea>
 800dc3e:	06d0      	lsls	r0, r2, #27
 800dc40:	bf44      	itt	mi
 800dc42:	2320      	movmi	r3, #32
 800dc44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc48:	0711      	lsls	r1, r2, #28
 800dc4a:	bf44      	itt	mi
 800dc4c:	232b      	movmi	r3, #43	@ 0x2b
 800dc4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc52:	f89a 3000 	ldrb.w	r3, [sl]
 800dc56:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc58:	d015      	beq.n	800dc86 <_svfiprintf_r+0xfa>
 800dc5a:	9a07      	ldr	r2, [sp, #28]
 800dc5c:	4654      	mov	r4, sl
 800dc5e:	2000      	movs	r0, #0
 800dc60:	f04f 0c0a 	mov.w	ip, #10
 800dc64:	4621      	mov	r1, r4
 800dc66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc6a:	3b30      	subs	r3, #48	@ 0x30
 800dc6c:	2b09      	cmp	r3, #9
 800dc6e:	d94b      	bls.n	800dd08 <_svfiprintf_r+0x17c>
 800dc70:	b1b0      	cbz	r0, 800dca0 <_svfiprintf_r+0x114>
 800dc72:	9207      	str	r2, [sp, #28]
 800dc74:	e014      	b.n	800dca0 <_svfiprintf_r+0x114>
 800dc76:	eba0 0308 	sub.w	r3, r0, r8
 800dc7a:	fa09 f303 	lsl.w	r3, r9, r3
 800dc7e:	4313      	orrs	r3, r2
 800dc80:	9304      	str	r3, [sp, #16]
 800dc82:	46a2      	mov	sl, r4
 800dc84:	e7d2      	b.n	800dc2c <_svfiprintf_r+0xa0>
 800dc86:	9b03      	ldr	r3, [sp, #12]
 800dc88:	1d19      	adds	r1, r3, #4
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	9103      	str	r1, [sp, #12]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	bfbb      	ittet	lt
 800dc92:	425b      	neglt	r3, r3
 800dc94:	f042 0202 	orrlt.w	r2, r2, #2
 800dc98:	9307      	strge	r3, [sp, #28]
 800dc9a:	9307      	strlt	r3, [sp, #28]
 800dc9c:	bfb8      	it	lt
 800dc9e:	9204      	strlt	r2, [sp, #16]
 800dca0:	7823      	ldrb	r3, [r4, #0]
 800dca2:	2b2e      	cmp	r3, #46	@ 0x2e
 800dca4:	d10a      	bne.n	800dcbc <_svfiprintf_r+0x130>
 800dca6:	7863      	ldrb	r3, [r4, #1]
 800dca8:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcaa:	d132      	bne.n	800dd12 <_svfiprintf_r+0x186>
 800dcac:	9b03      	ldr	r3, [sp, #12]
 800dcae:	1d1a      	adds	r2, r3, #4
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	9203      	str	r2, [sp, #12]
 800dcb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dcb8:	3402      	adds	r4, #2
 800dcba:	9305      	str	r3, [sp, #20]
 800dcbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dd80 <_svfiprintf_r+0x1f4>
 800dcc0:	7821      	ldrb	r1, [r4, #0]
 800dcc2:	2203      	movs	r2, #3
 800dcc4:	4650      	mov	r0, sl
 800dcc6:	f7f2 fa8b 	bl	80001e0 <memchr>
 800dcca:	b138      	cbz	r0, 800dcdc <_svfiprintf_r+0x150>
 800dccc:	9b04      	ldr	r3, [sp, #16]
 800dcce:	eba0 000a 	sub.w	r0, r0, sl
 800dcd2:	2240      	movs	r2, #64	@ 0x40
 800dcd4:	4082      	lsls	r2, r0
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	3401      	adds	r4, #1
 800dcda:	9304      	str	r3, [sp, #16]
 800dcdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dce0:	4824      	ldr	r0, [pc, #144]	@ (800dd74 <_svfiprintf_r+0x1e8>)
 800dce2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dce6:	2206      	movs	r2, #6
 800dce8:	f7f2 fa7a 	bl	80001e0 <memchr>
 800dcec:	2800      	cmp	r0, #0
 800dcee:	d036      	beq.n	800dd5e <_svfiprintf_r+0x1d2>
 800dcf0:	4b21      	ldr	r3, [pc, #132]	@ (800dd78 <_svfiprintf_r+0x1ec>)
 800dcf2:	bb1b      	cbnz	r3, 800dd3c <_svfiprintf_r+0x1b0>
 800dcf4:	9b03      	ldr	r3, [sp, #12]
 800dcf6:	3307      	adds	r3, #7
 800dcf8:	f023 0307 	bic.w	r3, r3, #7
 800dcfc:	3308      	adds	r3, #8
 800dcfe:	9303      	str	r3, [sp, #12]
 800dd00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd02:	4433      	add	r3, r6
 800dd04:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd06:	e76a      	b.n	800dbde <_svfiprintf_r+0x52>
 800dd08:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd0c:	460c      	mov	r4, r1
 800dd0e:	2001      	movs	r0, #1
 800dd10:	e7a8      	b.n	800dc64 <_svfiprintf_r+0xd8>
 800dd12:	2300      	movs	r3, #0
 800dd14:	3401      	adds	r4, #1
 800dd16:	9305      	str	r3, [sp, #20]
 800dd18:	4619      	mov	r1, r3
 800dd1a:	f04f 0c0a 	mov.w	ip, #10
 800dd1e:	4620      	mov	r0, r4
 800dd20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd24:	3a30      	subs	r2, #48	@ 0x30
 800dd26:	2a09      	cmp	r2, #9
 800dd28:	d903      	bls.n	800dd32 <_svfiprintf_r+0x1a6>
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d0c6      	beq.n	800dcbc <_svfiprintf_r+0x130>
 800dd2e:	9105      	str	r1, [sp, #20]
 800dd30:	e7c4      	b.n	800dcbc <_svfiprintf_r+0x130>
 800dd32:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd36:	4604      	mov	r4, r0
 800dd38:	2301      	movs	r3, #1
 800dd3a:	e7f0      	b.n	800dd1e <_svfiprintf_r+0x192>
 800dd3c:	ab03      	add	r3, sp, #12
 800dd3e:	9300      	str	r3, [sp, #0]
 800dd40:	462a      	mov	r2, r5
 800dd42:	4b0e      	ldr	r3, [pc, #56]	@ (800dd7c <_svfiprintf_r+0x1f0>)
 800dd44:	a904      	add	r1, sp, #16
 800dd46:	4638      	mov	r0, r7
 800dd48:	f7fd fe84 	bl	800ba54 <_printf_float>
 800dd4c:	1c42      	adds	r2, r0, #1
 800dd4e:	4606      	mov	r6, r0
 800dd50:	d1d6      	bne.n	800dd00 <_svfiprintf_r+0x174>
 800dd52:	89ab      	ldrh	r3, [r5, #12]
 800dd54:	065b      	lsls	r3, r3, #25
 800dd56:	f53f af2d 	bmi.w	800dbb4 <_svfiprintf_r+0x28>
 800dd5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd5c:	e72c      	b.n	800dbb8 <_svfiprintf_r+0x2c>
 800dd5e:	ab03      	add	r3, sp, #12
 800dd60:	9300      	str	r3, [sp, #0]
 800dd62:	462a      	mov	r2, r5
 800dd64:	4b05      	ldr	r3, [pc, #20]	@ (800dd7c <_svfiprintf_r+0x1f0>)
 800dd66:	a904      	add	r1, sp, #16
 800dd68:	4638      	mov	r0, r7
 800dd6a:	f7fe f90b 	bl	800bf84 <_printf_i>
 800dd6e:	e7ed      	b.n	800dd4c <_svfiprintf_r+0x1c0>
 800dd70:	0800ed78 	.word	0x0800ed78
 800dd74:	0800ed82 	.word	0x0800ed82
 800dd78:	0800ba55 	.word	0x0800ba55
 800dd7c:	0800dad5 	.word	0x0800dad5
 800dd80:	0800ed7e 	.word	0x0800ed7e

0800dd84 <__sflush_r>:
 800dd84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd8c:	0716      	lsls	r6, r2, #28
 800dd8e:	4605      	mov	r5, r0
 800dd90:	460c      	mov	r4, r1
 800dd92:	d454      	bmi.n	800de3e <__sflush_r+0xba>
 800dd94:	684b      	ldr	r3, [r1, #4]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	dc02      	bgt.n	800dda0 <__sflush_r+0x1c>
 800dd9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	dd48      	ble.n	800de32 <__sflush_r+0xae>
 800dda0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dda2:	2e00      	cmp	r6, #0
 800dda4:	d045      	beq.n	800de32 <__sflush_r+0xae>
 800dda6:	2300      	movs	r3, #0
 800dda8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ddac:	682f      	ldr	r7, [r5, #0]
 800ddae:	6a21      	ldr	r1, [r4, #32]
 800ddb0:	602b      	str	r3, [r5, #0]
 800ddb2:	d030      	beq.n	800de16 <__sflush_r+0x92>
 800ddb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ddb6:	89a3      	ldrh	r3, [r4, #12]
 800ddb8:	0759      	lsls	r1, r3, #29
 800ddba:	d505      	bpl.n	800ddc8 <__sflush_r+0x44>
 800ddbc:	6863      	ldr	r3, [r4, #4]
 800ddbe:	1ad2      	subs	r2, r2, r3
 800ddc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ddc2:	b10b      	cbz	r3, 800ddc8 <__sflush_r+0x44>
 800ddc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ddc6:	1ad2      	subs	r2, r2, r3
 800ddc8:	2300      	movs	r3, #0
 800ddca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ddcc:	6a21      	ldr	r1, [r4, #32]
 800ddce:	4628      	mov	r0, r5
 800ddd0:	47b0      	blx	r6
 800ddd2:	1c43      	adds	r3, r0, #1
 800ddd4:	89a3      	ldrh	r3, [r4, #12]
 800ddd6:	d106      	bne.n	800dde6 <__sflush_r+0x62>
 800ddd8:	6829      	ldr	r1, [r5, #0]
 800ddda:	291d      	cmp	r1, #29
 800dddc:	d82b      	bhi.n	800de36 <__sflush_r+0xb2>
 800ddde:	4a2a      	ldr	r2, [pc, #168]	@ (800de88 <__sflush_r+0x104>)
 800dde0:	410a      	asrs	r2, r1
 800dde2:	07d6      	lsls	r6, r2, #31
 800dde4:	d427      	bmi.n	800de36 <__sflush_r+0xb2>
 800dde6:	2200      	movs	r2, #0
 800dde8:	6062      	str	r2, [r4, #4]
 800ddea:	04d9      	lsls	r1, r3, #19
 800ddec:	6922      	ldr	r2, [r4, #16]
 800ddee:	6022      	str	r2, [r4, #0]
 800ddf0:	d504      	bpl.n	800ddfc <__sflush_r+0x78>
 800ddf2:	1c42      	adds	r2, r0, #1
 800ddf4:	d101      	bne.n	800ddfa <__sflush_r+0x76>
 800ddf6:	682b      	ldr	r3, [r5, #0]
 800ddf8:	b903      	cbnz	r3, 800ddfc <__sflush_r+0x78>
 800ddfa:	6560      	str	r0, [r4, #84]	@ 0x54
 800ddfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ddfe:	602f      	str	r7, [r5, #0]
 800de00:	b1b9      	cbz	r1, 800de32 <__sflush_r+0xae>
 800de02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de06:	4299      	cmp	r1, r3
 800de08:	d002      	beq.n	800de10 <__sflush_r+0x8c>
 800de0a:	4628      	mov	r0, r5
 800de0c:	f7ff f9e0 	bl	800d1d0 <_free_r>
 800de10:	2300      	movs	r3, #0
 800de12:	6363      	str	r3, [r4, #52]	@ 0x34
 800de14:	e00d      	b.n	800de32 <__sflush_r+0xae>
 800de16:	2301      	movs	r3, #1
 800de18:	4628      	mov	r0, r5
 800de1a:	47b0      	blx	r6
 800de1c:	4602      	mov	r2, r0
 800de1e:	1c50      	adds	r0, r2, #1
 800de20:	d1c9      	bne.n	800ddb6 <__sflush_r+0x32>
 800de22:	682b      	ldr	r3, [r5, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d0c6      	beq.n	800ddb6 <__sflush_r+0x32>
 800de28:	2b1d      	cmp	r3, #29
 800de2a:	d001      	beq.n	800de30 <__sflush_r+0xac>
 800de2c:	2b16      	cmp	r3, #22
 800de2e:	d11e      	bne.n	800de6e <__sflush_r+0xea>
 800de30:	602f      	str	r7, [r5, #0]
 800de32:	2000      	movs	r0, #0
 800de34:	e022      	b.n	800de7c <__sflush_r+0xf8>
 800de36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de3a:	b21b      	sxth	r3, r3
 800de3c:	e01b      	b.n	800de76 <__sflush_r+0xf2>
 800de3e:	690f      	ldr	r7, [r1, #16]
 800de40:	2f00      	cmp	r7, #0
 800de42:	d0f6      	beq.n	800de32 <__sflush_r+0xae>
 800de44:	0793      	lsls	r3, r2, #30
 800de46:	680e      	ldr	r6, [r1, #0]
 800de48:	bf08      	it	eq
 800de4a:	694b      	ldreq	r3, [r1, #20]
 800de4c:	600f      	str	r7, [r1, #0]
 800de4e:	bf18      	it	ne
 800de50:	2300      	movne	r3, #0
 800de52:	eba6 0807 	sub.w	r8, r6, r7
 800de56:	608b      	str	r3, [r1, #8]
 800de58:	f1b8 0f00 	cmp.w	r8, #0
 800de5c:	dde9      	ble.n	800de32 <__sflush_r+0xae>
 800de5e:	6a21      	ldr	r1, [r4, #32]
 800de60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800de62:	4643      	mov	r3, r8
 800de64:	463a      	mov	r2, r7
 800de66:	4628      	mov	r0, r5
 800de68:	47b0      	blx	r6
 800de6a:	2800      	cmp	r0, #0
 800de6c:	dc08      	bgt.n	800de80 <__sflush_r+0xfc>
 800de6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de76:	81a3      	strh	r3, [r4, #12]
 800de78:	f04f 30ff 	mov.w	r0, #4294967295
 800de7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de80:	4407      	add	r7, r0
 800de82:	eba8 0800 	sub.w	r8, r8, r0
 800de86:	e7e7      	b.n	800de58 <__sflush_r+0xd4>
 800de88:	dfbffffe 	.word	0xdfbffffe

0800de8c <_fflush_r>:
 800de8c:	b538      	push	{r3, r4, r5, lr}
 800de8e:	690b      	ldr	r3, [r1, #16]
 800de90:	4605      	mov	r5, r0
 800de92:	460c      	mov	r4, r1
 800de94:	b913      	cbnz	r3, 800de9c <_fflush_r+0x10>
 800de96:	2500      	movs	r5, #0
 800de98:	4628      	mov	r0, r5
 800de9a:	bd38      	pop	{r3, r4, r5, pc}
 800de9c:	b118      	cbz	r0, 800dea6 <_fflush_r+0x1a>
 800de9e:	6a03      	ldr	r3, [r0, #32]
 800dea0:	b90b      	cbnz	r3, 800dea6 <_fflush_r+0x1a>
 800dea2:	f7fe fa1b 	bl	800c2dc <__sinit>
 800dea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d0f3      	beq.n	800de96 <_fflush_r+0xa>
 800deae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800deb0:	07d0      	lsls	r0, r2, #31
 800deb2:	d404      	bmi.n	800debe <_fflush_r+0x32>
 800deb4:	0599      	lsls	r1, r3, #22
 800deb6:	d402      	bmi.n	800debe <_fflush_r+0x32>
 800deb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800deba:	f7fe fb3a 	bl	800c532 <__retarget_lock_acquire_recursive>
 800debe:	4628      	mov	r0, r5
 800dec0:	4621      	mov	r1, r4
 800dec2:	f7ff ff5f 	bl	800dd84 <__sflush_r>
 800dec6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dec8:	07da      	lsls	r2, r3, #31
 800deca:	4605      	mov	r5, r0
 800decc:	d4e4      	bmi.n	800de98 <_fflush_r+0xc>
 800dece:	89a3      	ldrh	r3, [r4, #12]
 800ded0:	059b      	lsls	r3, r3, #22
 800ded2:	d4e1      	bmi.n	800de98 <_fflush_r+0xc>
 800ded4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ded6:	f7fe fb2d 	bl	800c534 <__retarget_lock_release_recursive>
 800deda:	e7dd      	b.n	800de98 <_fflush_r+0xc>

0800dedc <memmove>:
 800dedc:	4288      	cmp	r0, r1
 800dede:	b510      	push	{r4, lr}
 800dee0:	eb01 0402 	add.w	r4, r1, r2
 800dee4:	d902      	bls.n	800deec <memmove+0x10>
 800dee6:	4284      	cmp	r4, r0
 800dee8:	4623      	mov	r3, r4
 800deea:	d807      	bhi.n	800defc <memmove+0x20>
 800deec:	1e43      	subs	r3, r0, #1
 800deee:	42a1      	cmp	r1, r4
 800def0:	d008      	beq.n	800df04 <memmove+0x28>
 800def2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800def6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800defa:	e7f8      	b.n	800deee <memmove+0x12>
 800defc:	4402      	add	r2, r0
 800defe:	4601      	mov	r1, r0
 800df00:	428a      	cmp	r2, r1
 800df02:	d100      	bne.n	800df06 <memmove+0x2a>
 800df04:	bd10      	pop	{r4, pc}
 800df06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df0e:	e7f7      	b.n	800df00 <memmove+0x24>

0800df10 <_sbrk_r>:
 800df10:	b538      	push	{r3, r4, r5, lr}
 800df12:	4d06      	ldr	r5, [pc, #24]	@ (800df2c <_sbrk_r+0x1c>)
 800df14:	2300      	movs	r3, #0
 800df16:	4604      	mov	r4, r0
 800df18:	4608      	mov	r0, r1
 800df1a:	602b      	str	r3, [r5, #0]
 800df1c:	f7f4 f8d0 	bl	80020c0 <_sbrk>
 800df20:	1c43      	adds	r3, r0, #1
 800df22:	d102      	bne.n	800df2a <_sbrk_r+0x1a>
 800df24:	682b      	ldr	r3, [r5, #0]
 800df26:	b103      	cbz	r3, 800df2a <_sbrk_r+0x1a>
 800df28:	6023      	str	r3, [r4, #0]
 800df2a:	bd38      	pop	{r3, r4, r5, pc}
 800df2c:	200021a0 	.word	0x200021a0

0800df30 <memcpy>:
 800df30:	440a      	add	r2, r1
 800df32:	4291      	cmp	r1, r2
 800df34:	f100 33ff 	add.w	r3, r0, #4294967295
 800df38:	d100      	bne.n	800df3c <memcpy+0xc>
 800df3a:	4770      	bx	lr
 800df3c:	b510      	push	{r4, lr}
 800df3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df46:	4291      	cmp	r1, r2
 800df48:	d1f9      	bne.n	800df3e <memcpy+0xe>
 800df4a:	bd10      	pop	{r4, pc}

0800df4c <__assert_func>:
 800df4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df4e:	4614      	mov	r4, r2
 800df50:	461a      	mov	r2, r3
 800df52:	4b09      	ldr	r3, [pc, #36]	@ (800df78 <__assert_func+0x2c>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4605      	mov	r5, r0
 800df58:	68d8      	ldr	r0, [r3, #12]
 800df5a:	b954      	cbnz	r4, 800df72 <__assert_func+0x26>
 800df5c:	4b07      	ldr	r3, [pc, #28]	@ (800df7c <__assert_func+0x30>)
 800df5e:	461c      	mov	r4, r3
 800df60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df64:	9100      	str	r1, [sp, #0]
 800df66:	462b      	mov	r3, r5
 800df68:	4905      	ldr	r1, [pc, #20]	@ (800df80 <__assert_func+0x34>)
 800df6a:	f000 f86f 	bl	800e04c <fiprintf>
 800df6e:	f000 f87f 	bl	800e070 <abort>
 800df72:	4b04      	ldr	r3, [pc, #16]	@ (800df84 <__assert_func+0x38>)
 800df74:	e7f4      	b.n	800df60 <__assert_func+0x14>
 800df76:	bf00      	nop
 800df78:	2000010c 	.word	0x2000010c
 800df7c:	0800edce 	.word	0x0800edce
 800df80:	0800eda0 	.word	0x0800eda0
 800df84:	0800ed93 	.word	0x0800ed93

0800df88 <_calloc_r>:
 800df88:	b570      	push	{r4, r5, r6, lr}
 800df8a:	fba1 5402 	umull	r5, r4, r1, r2
 800df8e:	b93c      	cbnz	r4, 800dfa0 <_calloc_r+0x18>
 800df90:	4629      	mov	r1, r5
 800df92:	f7ff f991 	bl	800d2b8 <_malloc_r>
 800df96:	4606      	mov	r6, r0
 800df98:	b928      	cbnz	r0, 800dfa6 <_calloc_r+0x1e>
 800df9a:	2600      	movs	r6, #0
 800df9c:	4630      	mov	r0, r6
 800df9e:	bd70      	pop	{r4, r5, r6, pc}
 800dfa0:	220c      	movs	r2, #12
 800dfa2:	6002      	str	r2, [r0, #0]
 800dfa4:	e7f9      	b.n	800df9a <_calloc_r+0x12>
 800dfa6:	462a      	mov	r2, r5
 800dfa8:	4621      	mov	r1, r4
 800dfaa:	f7fe fa44 	bl	800c436 <memset>
 800dfae:	e7f5      	b.n	800df9c <_calloc_r+0x14>

0800dfb0 <__ascii_mbtowc>:
 800dfb0:	b082      	sub	sp, #8
 800dfb2:	b901      	cbnz	r1, 800dfb6 <__ascii_mbtowc+0x6>
 800dfb4:	a901      	add	r1, sp, #4
 800dfb6:	b142      	cbz	r2, 800dfca <__ascii_mbtowc+0x1a>
 800dfb8:	b14b      	cbz	r3, 800dfce <__ascii_mbtowc+0x1e>
 800dfba:	7813      	ldrb	r3, [r2, #0]
 800dfbc:	600b      	str	r3, [r1, #0]
 800dfbe:	7812      	ldrb	r2, [r2, #0]
 800dfc0:	1e10      	subs	r0, r2, #0
 800dfc2:	bf18      	it	ne
 800dfc4:	2001      	movne	r0, #1
 800dfc6:	b002      	add	sp, #8
 800dfc8:	4770      	bx	lr
 800dfca:	4610      	mov	r0, r2
 800dfcc:	e7fb      	b.n	800dfc6 <__ascii_mbtowc+0x16>
 800dfce:	f06f 0001 	mvn.w	r0, #1
 800dfd2:	e7f8      	b.n	800dfc6 <__ascii_mbtowc+0x16>

0800dfd4 <_realloc_r>:
 800dfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfd8:	4680      	mov	r8, r0
 800dfda:	4615      	mov	r5, r2
 800dfdc:	460c      	mov	r4, r1
 800dfde:	b921      	cbnz	r1, 800dfea <_realloc_r+0x16>
 800dfe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfe4:	4611      	mov	r1, r2
 800dfe6:	f7ff b967 	b.w	800d2b8 <_malloc_r>
 800dfea:	b92a      	cbnz	r2, 800dff8 <_realloc_r+0x24>
 800dfec:	f7ff f8f0 	bl	800d1d0 <_free_r>
 800dff0:	2400      	movs	r4, #0
 800dff2:	4620      	mov	r0, r4
 800dff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dff8:	f000 f841 	bl	800e07e <_malloc_usable_size_r>
 800dffc:	4285      	cmp	r5, r0
 800dffe:	4606      	mov	r6, r0
 800e000:	d802      	bhi.n	800e008 <_realloc_r+0x34>
 800e002:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e006:	d8f4      	bhi.n	800dff2 <_realloc_r+0x1e>
 800e008:	4629      	mov	r1, r5
 800e00a:	4640      	mov	r0, r8
 800e00c:	f7ff f954 	bl	800d2b8 <_malloc_r>
 800e010:	4607      	mov	r7, r0
 800e012:	2800      	cmp	r0, #0
 800e014:	d0ec      	beq.n	800dff0 <_realloc_r+0x1c>
 800e016:	42b5      	cmp	r5, r6
 800e018:	462a      	mov	r2, r5
 800e01a:	4621      	mov	r1, r4
 800e01c:	bf28      	it	cs
 800e01e:	4632      	movcs	r2, r6
 800e020:	f7ff ff86 	bl	800df30 <memcpy>
 800e024:	4621      	mov	r1, r4
 800e026:	4640      	mov	r0, r8
 800e028:	f7ff f8d2 	bl	800d1d0 <_free_r>
 800e02c:	463c      	mov	r4, r7
 800e02e:	e7e0      	b.n	800dff2 <_realloc_r+0x1e>

0800e030 <__ascii_wctomb>:
 800e030:	4603      	mov	r3, r0
 800e032:	4608      	mov	r0, r1
 800e034:	b141      	cbz	r1, 800e048 <__ascii_wctomb+0x18>
 800e036:	2aff      	cmp	r2, #255	@ 0xff
 800e038:	d904      	bls.n	800e044 <__ascii_wctomb+0x14>
 800e03a:	228a      	movs	r2, #138	@ 0x8a
 800e03c:	601a      	str	r2, [r3, #0]
 800e03e:	f04f 30ff 	mov.w	r0, #4294967295
 800e042:	4770      	bx	lr
 800e044:	700a      	strb	r2, [r1, #0]
 800e046:	2001      	movs	r0, #1
 800e048:	4770      	bx	lr
	...

0800e04c <fiprintf>:
 800e04c:	b40e      	push	{r1, r2, r3}
 800e04e:	b503      	push	{r0, r1, lr}
 800e050:	4601      	mov	r1, r0
 800e052:	ab03      	add	r3, sp, #12
 800e054:	4805      	ldr	r0, [pc, #20]	@ (800e06c <fiprintf+0x20>)
 800e056:	f853 2b04 	ldr.w	r2, [r3], #4
 800e05a:	6800      	ldr	r0, [r0, #0]
 800e05c:	9301      	str	r3, [sp, #4]
 800e05e:	f000 f83f 	bl	800e0e0 <_vfiprintf_r>
 800e062:	b002      	add	sp, #8
 800e064:	f85d eb04 	ldr.w	lr, [sp], #4
 800e068:	b003      	add	sp, #12
 800e06a:	4770      	bx	lr
 800e06c:	2000010c 	.word	0x2000010c

0800e070 <abort>:
 800e070:	b508      	push	{r3, lr}
 800e072:	2006      	movs	r0, #6
 800e074:	f000 fa08 	bl	800e488 <raise>
 800e078:	2001      	movs	r0, #1
 800e07a:	f7f3 ffa9 	bl	8001fd0 <_exit>

0800e07e <_malloc_usable_size_r>:
 800e07e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e082:	1f18      	subs	r0, r3, #4
 800e084:	2b00      	cmp	r3, #0
 800e086:	bfbc      	itt	lt
 800e088:	580b      	ldrlt	r3, [r1, r0]
 800e08a:	18c0      	addlt	r0, r0, r3
 800e08c:	4770      	bx	lr

0800e08e <__sfputc_r>:
 800e08e:	6893      	ldr	r3, [r2, #8]
 800e090:	3b01      	subs	r3, #1
 800e092:	2b00      	cmp	r3, #0
 800e094:	b410      	push	{r4}
 800e096:	6093      	str	r3, [r2, #8]
 800e098:	da08      	bge.n	800e0ac <__sfputc_r+0x1e>
 800e09a:	6994      	ldr	r4, [r2, #24]
 800e09c:	42a3      	cmp	r3, r4
 800e09e:	db01      	blt.n	800e0a4 <__sfputc_r+0x16>
 800e0a0:	290a      	cmp	r1, #10
 800e0a2:	d103      	bne.n	800e0ac <__sfputc_r+0x1e>
 800e0a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0a8:	f000 b932 	b.w	800e310 <__swbuf_r>
 800e0ac:	6813      	ldr	r3, [r2, #0]
 800e0ae:	1c58      	adds	r0, r3, #1
 800e0b0:	6010      	str	r0, [r2, #0]
 800e0b2:	7019      	strb	r1, [r3, #0]
 800e0b4:	4608      	mov	r0, r1
 800e0b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0ba:	4770      	bx	lr

0800e0bc <__sfputs_r>:
 800e0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0be:	4606      	mov	r6, r0
 800e0c0:	460f      	mov	r7, r1
 800e0c2:	4614      	mov	r4, r2
 800e0c4:	18d5      	adds	r5, r2, r3
 800e0c6:	42ac      	cmp	r4, r5
 800e0c8:	d101      	bne.n	800e0ce <__sfputs_r+0x12>
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	e007      	b.n	800e0de <__sfputs_r+0x22>
 800e0ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0d2:	463a      	mov	r2, r7
 800e0d4:	4630      	mov	r0, r6
 800e0d6:	f7ff ffda 	bl	800e08e <__sfputc_r>
 800e0da:	1c43      	adds	r3, r0, #1
 800e0dc:	d1f3      	bne.n	800e0c6 <__sfputs_r+0xa>
 800e0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e0e0 <_vfiprintf_r>:
 800e0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e4:	460d      	mov	r5, r1
 800e0e6:	b09d      	sub	sp, #116	@ 0x74
 800e0e8:	4614      	mov	r4, r2
 800e0ea:	4698      	mov	r8, r3
 800e0ec:	4606      	mov	r6, r0
 800e0ee:	b118      	cbz	r0, 800e0f8 <_vfiprintf_r+0x18>
 800e0f0:	6a03      	ldr	r3, [r0, #32]
 800e0f2:	b90b      	cbnz	r3, 800e0f8 <_vfiprintf_r+0x18>
 800e0f4:	f7fe f8f2 	bl	800c2dc <__sinit>
 800e0f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0fa:	07d9      	lsls	r1, r3, #31
 800e0fc:	d405      	bmi.n	800e10a <_vfiprintf_r+0x2a>
 800e0fe:	89ab      	ldrh	r3, [r5, #12]
 800e100:	059a      	lsls	r2, r3, #22
 800e102:	d402      	bmi.n	800e10a <_vfiprintf_r+0x2a>
 800e104:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e106:	f7fe fa14 	bl	800c532 <__retarget_lock_acquire_recursive>
 800e10a:	89ab      	ldrh	r3, [r5, #12]
 800e10c:	071b      	lsls	r3, r3, #28
 800e10e:	d501      	bpl.n	800e114 <_vfiprintf_r+0x34>
 800e110:	692b      	ldr	r3, [r5, #16]
 800e112:	b99b      	cbnz	r3, 800e13c <_vfiprintf_r+0x5c>
 800e114:	4629      	mov	r1, r5
 800e116:	4630      	mov	r0, r6
 800e118:	f000 f938 	bl	800e38c <__swsetup_r>
 800e11c:	b170      	cbz	r0, 800e13c <_vfiprintf_r+0x5c>
 800e11e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e120:	07dc      	lsls	r4, r3, #31
 800e122:	d504      	bpl.n	800e12e <_vfiprintf_r+0x4e>
 800e124:	f04f 30ff 	mov.w	r0, #4294967295
 800e128:	b01d      	add	sp, #116	@ 0x74
 800e12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e12e:	89ab      	ldrh	r3, [r5, #12]
 800e130:	0598      	lsls	r0, r3, #22
 800e132:	d4f7      	bmi.n	800e124 <_vfiprintf_r+0x44>
 800e134:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e136:	f7fe f9fd 	bl	800c534 <__retarget_lock_release_recursive>
 800e13a:	e7f3      	b.n	800e124 <_vfiprintf_r+0x44>
 800e13c:	2300      	movs	r3, #0
 800e13e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e140:	2320      	movs	r3, #32
 800e142:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e146:	f8cd 800c 	str.w	r8, [sp, #12]
 800e14a:	2330      	movs	r3, #48	@ 0x30
 800e14c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e2fc <_vfiprintf_r+0x21c>
 800e150:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e154:	f04f 0901 	mov.w	r9, #1
 800e158:	4623      	mov	r3, r4
 800e15a:	469a      	mov	sl, r3
 800e15c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e160:	b10a      	cbz	r2, 800e166 <_vfiprintf_r+0x86>
 800e162:	2a25      	cmp	r2, #37	@ 0x25
 800e164:	d1f9      	bne.n	800e15a <_vfiprintf_r+0x7a>
 800e166:	ebba 0b04 	subs.w	fp, sl, r4
 800e16a:	d00b      	beq.n	800e184 <_vfiprintf_r+0xa4>
 800e16c:	465b      	mov	r3, fp
 800e16e:	4622      	mov	r2, r4
 800e170:	4629      	mov	r1, r5
 800e172:	4630      	mov	r0, r6
 800e174:	f7ff ffa2 	bl	800e0bc <__sfputs_r>
 800e178:	3001      	adds	r0, #1
 800e17a:	f000 80a7 	beq.w	800e2cc <_vfiprintf_r+0x1ec>
 800e17e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e180:	445a      	add	r2, fp
 800e182:	9209      	str	r2, [sp, #36]	@ 0x24
 800e184:	f89a 3000 	ldrb.w	r3, [sl]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	f000 809f 	beq.w	800e2cc <_vfiprintf_r+0x1ec>
 800e18e:	2300      	movs	r3, #0
 800e190:	f04f 32ff 	mov.w	r2, #4294967295
 800e194:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e198:	f10a 0a01 	add.w	sl, sl, #1
 800e19c:	9304      	str	r3, [sp, #16]
 800e19e:	9307      	str	r3, [sp, #28]
 800e1a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e1a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e1a6:	4654      	mov	r4, sl
 800e1a8:	2205      	movs	r2, #5
 800e1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1ae:	4853      	ldr	r0, [pc, #332]	@ (800e2fc <_vfiprintf_r+0x21c>)
 800e1b0:	f7f2 f816 	bl	80001e0 <memchr>
 800e1b4:	9a04      	ldr	r2, [sp, #16]
 800e1b6:	b9d8      	cbnz	r0, 800e1f0 <_vfiprintf_r+0x110>
 800e1b8:	06d1      	lsls	r1, r2, #27
 800e1ba:	bf44      	itt	mi
 800e1bc:	2320      	movmi	r3, #32
 800e1be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1c2:	0713      	lsls	r3, r2, #28
 800e1c4:	bf44      	itt	mi
 800e1c6:	232b      	movmi	r3, #43	@ 0x2b
 800e1c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1cc:	f89a 3000 	ldrb.w	r3, [sl]
 800e1d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1d2:	d015      	beq.n	800e200 <_vfiprintf_r+0x120>
 800e1d4:	9a07      	ldr	r2, [sp, #28]
 800e1d6:	4654      	mov	r4, sl
 800e1d8:	2000      	movs	r0, #0
 800e1da:	f04f 0c0a 	mov.w	ip, #10
 800e1de:	4621      	mov	r1, r4
 800e1e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1e4:	3b30      	subs	r3, #48	@ 0x30
 800e1e6:	2b09      	cmp	r3, #9
 800e1e8:	d94b      	bls.n	800e282 <_vfiprintf_r+0x1a2>
 800e1ea:	b1b0      	cbz	r0, 800e21a <_vfiprintf_r+0x13a>
 800e1ec:	9207      	str	r2, [sp, #28]
 800e1ee:	e014      	b.n	800e21a <_vfiprintf_r+0x13a>
 800e1f0:	eba0 0308 	sub.w	r3, r0, r8
 800e1f4:	fa09 f303 	lsl.w	r3, r9, r3
 800e1f8:	4313      	orrs	r3, r2
 800e1fa:	9304      	str	r3, [sp, #16]
 800e1fc:	46a2      	mov	sl, r4
 800e1fe:	e7d2      	b.n	800e1a6 <_vfiprintf_r+0xc6>
 800e200:	9b03      	ldr	r3, [sp, #12]
 800e202:	1d19      	adds	r1, r3, #4
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	9103      	str	r1, [sp, #12]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	bfbb      	ittet	lt
 800e20c:	425b      	neglt	r3, r3
 800e20e:	f042 0202 	orrlt.w	r2, r2, #2
 800e212:	9307      	strge	r3, [sp, #28]
 800e214:	9307      	strlt	r3, [sp, #28]
 800e216:	bfb8      	it	lt
 800e218:	9204      	strlt	r2, [sp, #16]
 800e21a:	7823      	ldrb	r3, [r4, #0]
 800e21c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e21e:	d10a      	bne.n	800e236 <_vfiprintf_r+0x156>
 800e220:	7863      	ldrb	r3, [r4, #1]
 800e222:	2b2a      	cmp	r3, #42	@ 0x2a
 800e224:	d132      	bne.n	800e28c <_vfiprintf_r+0x1ac>
 800e226:	9b03      	ldr	r3, [sp, #12]
 800e228:	1d1a      	adds	r2, r3, #4
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	9203      	str	r2, [sp, #12]
 800e22e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e232:	3402      	adds	r4, #2
 800e234:	9305      	str	r3, [sp, #20]
 800e236:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e30c <_vfiprintf_r+0x22c>
 800e23a:	7821      	ldrb	r1, [r4, #0]
 800e23c:	2203      	movs	r2, #3
 800e23e:	4650      	mov	r0, sl
 800e240:	f7f1 ffce 	bl	80001e0 <memchr>
 800e244:	b138      	cbz	r0, 800e256 <_vfiprintf_r+0x176>
 800e246:	9b04      	ldr	r3, [sp, #16]
 800e248:	eba0 000a 	sub.w	r0, r0, sl
 800e24c:	2240      	movs	r2, #64	@ 0x40
 800e24e:	4082      	lsls	r2, r0
 800e250:	4313      	orrs	r3, r2
 800e252:	3401      	adds	r4, #1
 800e254:	9304      	str	r3, [sp, #16]
 800e256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e25a:	4829      	ldr	r0, [pc, #164]	@ (800e300 <_vfiprintf_r+0x220>)
 800e25c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e260:	2206      	movs	r2, #6
 800e262:	f7f1 ffbd 	bl	80001e0 <memchr>
 800e266:	2800      	cmp	r0, #0
 800e268:	d03f      	beq.n	800e2ea <_vfiprintf_r+0x20a>
 800e26a:	4b26      	ldr	r3, [pc, #152]	@ (800e304 <_vfiprintf_r+0x224>)
 800e26c:	bb1b      	cbnz	r3, 800e2b6 <_vfiprintf_r+0x1d6>
 800e26e:	9b03      	ldr	r3, [sp, #12]
 800e270:	3307      	adds	r3, #7
 800e272:	f023 0307 	bic.w	r3, r3, #7
 800e276:	3308      	adds	r3, #8
 800e278:	9303      	str	r3, [sp, #12]
 800e27a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e27c:	443b      	add	r3, r7
 800e27e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e280:	e76a      	b.n	800e158 <_vfiprintf_r+0x78>
 800e282:	fb0c 3202 	mla	r2, ip, r2, r3
 800e286:	460c      	mov	r4, r1
 800e288:	2001      	movs	r0, #1
 800e28a:	e7a8      	b.n	800e1de <_vfiprintf_r+0xfe>
 800e28c:	2300      	movs	r3, #0
 800e28e:	3401      	adds	r4, #1
 800e290:	9305      	str	r3, [sp, #20]
 800e292:	4619      	mov	r1, r3
 800e294:	f04f 0c0a 	mov.w	ip, #10
 800e298:	4620      	mov	r0, r4
 800e29a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e29e:	3a30      	subs	r2, #48	@ 0x30
 800e2a0:	2a09      	cmp	r2, #9
 800e2a2:	d903      	bls.n	800e2ac <_vfiprintf_r+0x1cc>
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d0c6      	beq.n	800e236 <_vfiprintf_r+0x156>
 800e2a8:	9105      	str	r1, [sp, #20]
 800e2aa:	e7c4      	b.n	800e236 <_vfiprintf_r+0x156>
 800e2ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2b0:	4604      	mov	r4, r0
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	e7f0      	b.n	800e298 <_vfiprintf_r+0x1b8>
 800e2b6:	ab03      	add	r3, sp, #12
 800e2b8:	9300      	str	r3, [sp, #0]
 800e2ba:	462a      	mov	r2, r5
 800e2bc:	4b12      	ldr	r3, [pc, #72]	@ (800e308 <_vfiprintf_r+0x228>)
 800e2be:	a904      	add	r1, sp, #16
 800e2c0:	4630      	mov	r0, r6
 800e2c2:	f7fd fbc7 	bl	800ba54 <_printf_float>
 800e2c6:	4607      	mov	r7, r0
 800e2c8:	1c78      	adds	r0, r7, #1
 800e2ca:	d1d6      	bne.n	800e27a <_vfiprintf_r+0x19a>
 800e2cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2ce:	07d9      	lsls	r1, r3, #31
 800e2d0:	d405      	bmi.n	800e2de <_vfiprintf_r+0x1fe>
 800e2d2:	89ab      	ldrh	r3, [r5, #12]
 800e2d4:	059a      	lsls	r2, r3, #22
 800e2d6:	d402      	bmi.n	800e2de <_vfiprintf_r+0x1fe>
 800e2d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2da:	f7fe f92b 	bl	800c534 <__retarget_lock_release_recursive>
 800e2de:	89ab      	ldrh	r3, [r5, #12]
 800e2e0:	065b      	lsls	r3, r3, #25
 800e2e2:	f53f af1f 	bmi.w	800e124 <_vfiprintf_r+0x44>
 800e2e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e2e8:	e71e      	b.n	800e128 <_vfiprintf_r+0x48>
 800e2ea:	ab03      	add	r3, sp, #12
 800e2ec:	9300      	str	r3, [sp, #0]
 800e2ee:	462a      	mov	r2, r5
 800e2f0:	4b05      	ldr	r3, [pc, #20]	@ (800e308 <_vfiprintf_r+0x228>)
 800e2f2:	a904      	add	r1, sp, #16
 800e2f4:	4630      	mov	r0, r6
 800e2f6:	f7fd fe45 	bl	800bf84 <_printf_i>
 800e2fa:	e7e4      	b.n	800e2c6 <_vfiprintf_r+0x1e6>
 800e2fc:	0800ed78 	.word	0x0800ed78
 800e300:	0800ed82 	.word	0x0800ed82
 800e304:	0800ba55 	.word	0x0800ba55
 800e308:	0800e0bd 	.word	0x0800e0bd
 800e30c:	0800ed7e 	.word	0x0800ed7e

0800e310 <__swbuf_r>:
 800e310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e312:	460e      	mov	r6, r1
 800e314:	4614      	mov	r4, r2
 800e316:	4605      	mov	r5, r0
 800e318:	b118      	cbz	r0, 800e322 <__swbuf_r+0x12>
 800e31a:	6a03      	ldr	r3, [r0, #32]
 800e31c:	b90b      	cbnz	r3, 800e322 <__swbuf_r+0x12>
 800e31e:	f7fd ffdd 	bl	800c2dc <__sinit>
 800e322:	69a3      	ldr	r3, [r4, #24]
 800e324:	60a3      	str	r3, [r4, #8]
 800e326:	89a3      	ldrh	r3, [r4, #12]
 800e328:	071a      	lsls	r2, r3, #28
 800e32a:	d501      	bpl.n	800e330 <__swbuf_r+0x20>
 800e32c:	6923      	ldr	r3, [r4, #16]
 800e32e:	b943      	cbnz	r3, 800e342 <__swbuf_r+0x32>
 800e330:	4621      	mov	r1, r4
 800e332:	4628      	mov	r0, r5
 800e334:	f000 f82a 	bl	800e38c <__swsetup_r>
 800e338:	b118      	cbz	r0, 800e342 <__swbuf_r+0x32>
 800e33a:	f04f 37ff 	mov.w	r7, #4294967295
 800e33e:	4638      	mov	r0, r7
 800e340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e342:	6823      	ldr	r3, [r4, #0]
 800e344:	6922      	ldr	r2, [r4, #16]
 800e346:	1a98      	subs	r0, r3, r2
 800e348:	6963      	ldr	r3, [r4, #20]
 800e34a:	b2f6      	uxtb	r6, r6
 800e34c:	4283      	cmp	r3, r0
 800e34e:	4637      	mov	r7, r6
 800e350:	dc05      	bgt.n	800e35e <__swbuf_r+0x4e>
 800e352:	4621      	mov	r1, r4
 800e354:	4628      	mov	r0, r5
 800e356:	f7ff fd99 	bl	800de8c <_fflush_r>
 800e35a:	2800      	cmp	r0, #0
 800e35c:	d1ed      	bne.n	800e33a <__swbuf_r+0x2a>
 800e35e:	68a3      	ldr	r3, [r4, #8]
 800e360:	3b01      	subs	r3, #1
 800e362:	60a3      	str	r3, [r4, #8]
 800e364:	6823      	ldr	r3, [r4, #0]
 800e366:	1c5a      	adds	r2, r3, #1
 800e368:	6022      	str	r2, [r4, #0]
 800e36a:	701e      	strb	r6, [r3, #0]
 800e36c:	6962      	ldr	r2, [r4, #20]
 800e36e:	1c43      	adds	r3, r0, #1
 800e370:	429a      	cmp	r2, r3
 800e372:	d004      	beq.n	800e37e <__swbuf_r+0x6e>
 800e374:	89a3      	ldrh	r3, [r4, #12]
 800e376:	07db      	lsls	r3, r3, #31
 800e378:	d5e1      	bpl.n	800e33e <__swbuf_r+0x2e>
 800e37a:	2e0a      	cmp	r6, #10
 800e37c:	d1df      	bne.n	800e33e <__swbuf_r+0x2e>
 800e37e:	4621      	mov	r1, r4
 800e380:	4628      	mov	r0, r5
 800e382:	f7ff fd83 	bl	800de8c <_fflush_r>
 800e386:	2800      	cmp	r0, #0
 800e388:	d0d9      	beq.n	800e33e <__swbuf_r+0x2e>
 800e38a:	e7d6      	b.n	800e33a <__swbuf_r+0x2a>

0800e38c <__swsetup_r>:
 800e38c:	b538      	push	{r3, r4, r5, lr}
 800e38e:	4b29      	ldr	r3, [pc, #164]	@ (800e434 <__swsetup_r+0xa8>)
 800e390:	4605      	mov	r5, r0
 800e392:	6818      	ldr	r0, [r3, #0]
 800e394:	460c      	mov	r4, r1
 800e396:	b118      	cbz	r0, 800e3a0 <__swsetup_r+0x14>
 800e398:	6a03      	ldr	r3, [r0, #32]
 800e39a:	b90b      	cbnz	r3, 800e3a0 <__swsetup_r+0x14>
 800e39c:	f7fd ff9e 	bl	800c2dc <__sinit>
 800e3a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3a4:	0719      	lsls	r1, r3, #28
 800e3a6:	d422      	bmi.n	800e3ee <__swsetup_r+0x62>
 800e3a8:	06da      	lsls	r2, r3, #27
 800e3aa:	d407      	bmi.n	800e3bc <__swsetup_r+0x30>
 800e3ac:	2209      	movs	r2, #9
 800e3ae:	602a      	str	r2, [r5, #0]
 800e3b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3b4:	81a3      	strh	r3, [r4, #12]
 800e3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ba:	e033      	b.n	800e424 <__swsetup_r+0x98>
 800e3bc:	0758      	lsls	r0, r3, #29
 800e3be:	d512      	bpl.n	800e3e6 <__swsetup_r+0x5a>
 800e3c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e3c2:	b141      	cbz	r1, 800e3d6 <__swsetup_r+0x4a>
 800e3c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e3c8:	4299      	cmp	r1, r3
 800e3ca:	d002      	beq.n	800e3d2 <__swsetup_r+0x46>
 800e3cc:	4628      	mov	r0, r5
 800e3ce:	f7fe feff 	bl	800d1d0 <_free_r>
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	6363      	str	r3, [r4, #52]	@ 0x34
 800e3d6:	89a3      	ldrh	r3, [r4, #12]
 800e3d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e3dc:	81a3      	strh	r3, [r4, #12]
 800e3de:	2300      	movs	r3, #0
 800e3e0:	6063      	str	r3, [r4, #4]
 800e3e2:	6923      	ldr	r3, [r4, #16]
 800e3e4:	6023      	str	r3, [r4, #0]
 800e3e6:	89a3      	ldrh	r3, [r4, #12]
 800e3e8:	f043 0308 	orr.w	r3, r3, #8
 800e3ec:	81a3      	strh	r3, [r4, #12]
 800e3ee:	6923      	ldr	r3, [r4, #16]
 800e3f0:	b94b      	cbnz	r3, 800e406 <__swsetup_r+0x7a>
 800e3f2:	89a3      	ldrh	r3, [r4, #12]
 800e3f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e3f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3fc:	d003      	beq.n	800e406 <__swsetup_r+0x7a>
 800e3fe:	4621      	mov	r1, r4
 800e400:	4628      	mov	r0, r5
 800e402:	f000 f883 	bl	800e50c <__smakebuf_r>
 800e406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e40a:	f013 0201 	ands.w	r2, r3, #1
 800e40e:	d00a      	beq.n	800e426 <__swsetup_r+0x9a>
 800e410:	2200      	movs	r2, #0
 800e412:	60a2      	str	r2, [r4, #8]
 800e414:	6962      	ldr	r2, [r4, #20]
 800e416:	4252      	negs	r2, r2
 800e418:	61a2      	str	r2, [r4, #24]
 800e41a:	6922      	ldr	r2, [r4, #16]
 800e41c:	b942      	cbnz	r2, 800e430 <__swsetup_r+0xa4>
 800e41e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e422:	d1c5      	bne.n	800e3b0 <__swsetup_r+0x24>
 800e424:	bd38      	pop	{r3, r4, r5, pc}
 800e426:	0799      	lsls	r1, r3, #30
 800e428:	bf58      	it	pl
 800e42a:	6962      	ldrpl	r2, [r4, #20]
 800e42c:	60a2      	str	r2, [r4, #8]
 800e42e:	e7f4      	b.n	800e41a <__swsetup_r+0x8e>
 800e430:	2000      	movs	r0, #0
 800e432:	e7f7      	b.n	800e424 <__swsetup_r+0x98>
 800e434:	2000010c 	.word	0x2000010c

0800e438 <_raise_r>:
 800e438:	291f      	cmp	r1, #31
 800e43a:	b538      	push	{r3, r4, r5, lr}
 800e43c:	4605      	mov	r5, r0
 800e43e:	460c      	mov	r4, r1
 800e440:	d904      	bls.n	800e44c <_raise_r+0x14>
 800e442:	2316      	movs	r3, #22
 800e444:	6003      	str	r3, [r0, #0]
 800e446:	f04f 30ff 	mov.w	r0, #4294967295
 800e44a:	bd38      	pop	{r3, r4, r5, pc}
 800e44c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e44e:	b112      	cbz	r2, 800e456 <_raise_r+0x1e>
 800e450:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e454:	b94b      	cbnz	r3, 800e46a <_raise_r+0x32>
 800e456:	4628      	mov	r0, r5
 800e458:	f000 f830 	bl	800e4bc <_getpid_r>
 800e45c:	4622      	mov	r2, r4
 800e45e:	4601      	mov	r1, r0
 800e460:	4628      	mov	r0, r5
 800e462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e466:	f000 b817 	b.w	800e498 <_kill_r>
 800e46a:	2b01      	cmp	r3, #1
 800e46c:	d00a      	beq.n	800e484 <_raise_r+0x4c>
 800e46e:	1c59      	adds	r1, r3, #1
 800e470:	d103      	bne.n	800e47a <_raise_r+0x42>
 800e472:	2316      	movs	r3, #22
 800e474:	6003      	str	r3, [r0, #0]
 800e476:	2001      	movs	r0, #1
 800e478:	e7e7      	b.n	800e44a <_raise_r+0x12>
 800e47a:	2100      	movs	r1, #0
 800e47c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e480:	4620      	mov	r0, r4
 800e482:	4798      	blx	r3
 800e484:	2000      	movs	r0, #0
 800e486:	e7e0      	b.n	800e44a <_raise_r+0x12>

0800e488 <raise>:
 800e488:	4b02      	ldr	r3, [pc, #8]	@ (800e494 <raise+0xc>)
 800e48a:	4601      	mov	r1, r0
 800e48c:	6818      	ldr	r0, [r3, #0]
 800e48e:	f7ff bfd3 	b.w	800e438 <_raise_r>
 800e492:	bf00      	nop
 800e494:	2000010c 	.word	0x2000010c

0800e498 <_kill_r>:
 800e498:	b538      	push	{r3, r4, r5, lr}
 800e49a:	4d07      	ldr	r5, [pc, #28]	@ (800e4b8 <_kill_r+0x20>)
 800e49c:	2300      	movs	r3, #0
 800e49e:	4604      	mov	r4, r0
 800e4a0:	4608      	mov	r0, r1
 800e4a2:	4611      	mov	r1, r2
 800e4a4:	602b      	str	r3, [r5, #0]
 800e4a6:	f7f3 fd83 	bl	8001fb0 <_kill>
 800e4aa:	1c43      	adds	r3, r0, #1
 800e4ac:	d102      	bne.n	800e4b4 <_kill_r+0x1c>
 800e4ae:	682b      	ldr	r3, [r5, #0]
 800e4b0:	b103      	cbz	r3, 800e4b4 <_kill_r+0x1c>
 800e4b2:	6023      	str	r3, [r4, #0]
 800e4b4:	bd38      	pop	{r3, r4, r5, pc}
 800e4b6:	bf00      	nop
 800e4b8:	200021a0 	.word	0x200021a0

0800e4bc <_getpid_r>:
 800e4bc:	f7f3 bd70 	b.w	8001fa0 <_getpid>

0800e4c0 <__swhatbuf_r>:
 800e4c0:	b570      	push	{r4, r5, r6, lr}
 800e4c2:	460c      	mov	r4, r1
 800e4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4c8:	2900      	cmp	r1, #0
 800e4ca:	b096      	sub	sp, #88	@ 0x58
 800e4cc:	4615      	mov	r5, r2
 800e4ce:	461e      	mov	r6, r3
 800e4d0:	da0d      	bge.n	800e4ee <__swhatbuf_r+0x2e>
 800e4d2:	89a3      	ldrh	r3, [r4, #12]
 800e4d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e4d8:	f04f 0100 	mov.w	r1, #0
 800e4dc:	bf14      	ite	ne
 800e4de:	2340      	movne	r3, #64	@ 0x40
 800e4e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e4e4:	2000      	movs	r0, #0
 800e4e6:	6031      	str	r1, [r6, #0]
 800e4e8:	602b      	str	r3, [r5, #0]
 800e4ea:	b016      	add	sp, #88	@ 0x58
 800e4ec:	bd70      	pop	{r4, r5, r6, pc}
 800e4ee:	466a      	mov	r2, sp
 800e4f0:	f000 f848 	bl	800e584 <_fstat_r>
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	dbec      	blt.n	800e4d2 <__swhatbuf_r+0x12>
 800e4f8:	9901      	ldr	r1, [sp, #4]
 800e4fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e4fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e502:	4259      	negs	r1, r3
 800e504:	4159      	adcs	r1, r3
 800e506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e50a:	e7eb      	b.n	800e4e4 <__swhatbuf_r+0x24>

0800e50c <__smakebuf_r>:
 800e50c:	898b      	ldrh	r3, [r1, #12]
 800e50e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e510:	079d      	lsls	r5, r3, #30
 800e512:	4606      	mov	r6, r0
 800e514:	460c      	mov	r4, r1
 800e516:	d507      	bpl.n	800e528 <__smakebuf_r+0x1c>
 800e518:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e51c:	6023      	str	r3, [r4, #0]
 800e51e:	6123      	str	r3, [r4, #16]
 800e520:	2301      	movs	r3, #1
 800e522:	6163      	str	r3, [r4, #20]
 800e524:	b003      	add	sp, #12
 800e526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e528:	ab01      	add	r3, sp, #4
 800e52a:	466a      	mov	r2, sp
 800e52c:	f7ff ffc8 	bl	800e4c0 <__swhatbuf_r>
 800e530:	9f00      	ldr	r7, [sp, #0]
 800e532:	4605      	mov	r5, r0
 800e534:	4639      	mov	r1, r7
 800e536:	4630      	mov	r0, r6
 800e538:	f7fe febe 	bl	800d2b8 <_malloc_r>
 800e53c:	b948      	cbnz	r0, 800e552 <__smakebuf_r+0x46>
 800e53e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e542:	059a      	lsls	r2, r3, #22
 800e544:	d4ee      	bmi.n	800e524 <__smakebuf_r+0x18>
 800e546:	f023 0303 	bic.w	r3, r3, #3
 800e54a:	f043 0302 	orr.w	r3, r3, #2
 800e54e:	81a3      	strh	r3, [r4, #12]
 800e550:	e7e2      	b.n	800e518 <__smakebuf_r+0xc>
 800e552:	89a3      	ldrh	r3, [r4, #12]
 800e554:	6020      	str	r0, [r4, #0]
 800e556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e55a:	81a3      	strh	r3, [r4, #12]
 800e55c:	9b01      	ldr	r3, [sp, #4]
 800e55e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e562:	b15b      	cbz	r3, 800e57c <__smakebuf_r+0x70>
 800e564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e568:	4630      	mov	r0, r6
 800e56a:	f000 f81d 	bl	800e5a8 <_isatty_r>
 800e56e:	b128      	cbz	r0, 800e57c <__smakebuf_r+0x70>
 800e570:	89a3      	ldrh	r3, [r4, #12]
 800e572:	f023 0303 	bic.w	r3, r3, #3
 800e576:	f043 0301 	orr.w	r3, r3, #1
 800e57a:	81a3      	strh	r3, [r4, #12]
 800e57c:	89a3      	ldrh	r3, [r4, #12]
 800e57e:	431d      	orrs	r5, r3
 800e580:	81a5      	strh	r5, [r4, #12]
 800e582:	e7cf      	b.n	800e524 <__smakebuf_r+0x18>

0800e584 <_fstat_r>:
 800e584:	b538      	push	{r3, r4, r5, lr}
 800e586:	4d07      	ldr	r5, [pc, #28]	@ (800e5a4 <_fstat_r+0x20>)
 800e588:	2300      	movs	r3, #0
 800e58a:	4604      	mov	r4, r0
 800e58c:	4608      	mov	r0, r1
 800e58e:	4611      	mov	r1, r2
 800e590:	602b      	str	r3, [r5, #0]
 800e592:	f7f3 fd6d 	bl	8002070 <_fstat>
 800e596:	1c43      	adds	r3, r0, #1
 800e598:	d102      	bne.n	800e5a0 <_fstat_r+0x1c>
 800e59a:	682b      	ldr	r3, [r5, #0]
 800e59c:	b103      	cbz	r3, 800e5a0 <_fstat_r+0x1c>
 800e59e:	6023      	str	r3, [r4, #0]
 800e5a0:	bd38      	pop	{r3, r4, r5, pc}
 800e5a2:	bf00      	nop
 800e5a4:	200021a0 	.word	0x200021a0

0800e5a8 <_isatty_r>:
 800e5a8:	b538      	push	{r3, r4, r5, lr}
 800e5aa:	4d06      	ldr	r5, [pc, #24]	@ (800e5c4 <_isatty_r+0x1c>)
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	4608      	mov	r0, r1
 800e5b2:	602b      	str	r3, [r5, #0]
 800e5b4:	f7f3 fd6c 	bl	8002090 <_isatty>
 800e5b8:	1c43      	adds	r3, r0, #1
 800e5ba:	d102      	bne.n	800e5c2 <_isatty_r+0x1a>
 800e5bc:	682b      	ldr	r3, [r5, #0]
 800e5be:	b103      	cbz	r3, 800e5c2 <_isatty_r+0x1a>
 800e5c0:	6023      	str	r3, [r4, #0]
 800e5c2:	bd38      	pop	{r3, r4, r5, pc}
 800e5c4:	200021a0 	.word	0x200021a0

0800e5c8 <atan2>:
 800e5c8:	f000 b802 	b.w	800e5d0 <__ieee754_atan2>
 800e5cc:	0000      	movs	r0, r0
	...

0800e5d0 <__ieee754_atan2>:
 800e5d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5d4:	ec57 6b11 	vmov	r6, r7, d1
 800e5d8:	4273      	negs	r3, r6
 800e5da:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800e758 <__ieee754_atan2+0x188>
 800e5de:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800e5e2:	4333      	orrs	r3, r6
 800e5e4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e5e8:	4543      	cmp	r3, r8
 800e5ea:	ec51 0b10 	vmov	r0, r1, d0
 800e5ee:	4635      	mov	r5, r6
 800e5f0:	d809      	bhi.n	800e606 <__ieee754_atan2+0x36>
 800e5f2:	4244      	negs	r4, r0
 800e5f4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e5f8:	4304      	orrs	r4, r0
 800e5fa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e5fe:	4544      	cmp	r4, r8
 800e600:	468e      	mov	lr, r1
 800e602:	4681      	mov	r9, r0
 800e604:	d907      	bls.n	800e616 <__ieee754_atan2+0x46>
 800e606:	4632      	mov	r2, r6
 800e608:	463b      	mov	r3, r7
 800e60a:	f7f1 fe47 	bl	800029c <__adddf3>
 800e60e:	ec41 0b10 	vmov	d0, r0, r1
 800e612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e616:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800e61a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800e61e:	4334      	orrs	r4, r6
 800e620:	d103      	bne.n	800e62a <__ieee754_atan2+0x5a>
 800e622:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e626:	f000 b89b 	b.w	800e760 <atan>
 800e62a:	17bc      	asrs	r4, r7, #30
 800e62c:	f004 0402 	and.w	r4, r4, #2
 800e630:	ea53 0909 	orrs.w	r9, r3, r9
 800e634:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e638:	d107      	bne.n	800e64a <__ieee754_atan2+0x7a>
 800e63a:	2c02      	cmp	r4, #2
 800e63c:	d05f      	beq.n	800e6fe <__ieee754_atan2+0x12e>
 800e63e:	2c03      	cmp	r4, #3
 800e640:	d1e5      	bne.n	800e60e <__ieee754_atan2+0x3e>
 800e642:	a141      	add	r1, pc, #260	@ (adr r1, 800e748 <__ieee754_atan2+0x178>)
 800e644:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e648:	e7e1      	b.n	800e60e <__ieee754_atan2+0x3e>
 800e64a:	4315      	orrs	r5, r2
 800e64c:	d106      	bne.n	800e65c <__ieee754_atan2+0x8c>
 800e64e:	f1be 0f00 	cmp.w	lr, #0
 800e652:	da5f      	bge.n	800e714 <__ieee754_atan2+0x144>
 800e654:	a13e      	add	r1, pc, #248	@ (adr r1, 800e750 <__ieee754_atan2+0x180>)
 800e656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e65a:	e7d8      	b.n	800e60e <__ieee754_atan2+0x3e>
 800e65c:	4542      	cmp	r2, r8
 800e65e:	d10f      	bne.n	800e680 <__ieee754_atan2+0xb0>
 800e660:	4293      	cmp	r3, r2
 800e662:	f104 34ff 	add.w	r4, r4, #4294967295
 800e666:	d107      	bne.n	800e678 <__ieee754_atan2+0xa8>
 800e668:	2c02      	cmp	r4, #2
 800e66a:	d84c      	bhi.n	800e706 <__ieee754_atan2+0x136>
 800e66c:	4b34      	ldr	r3, [pc, #208]	@ (800e740 <__ieee754_atan2+0x170>)
 800e66e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e672:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e676:	e7ca      	b.n	800e60e <__ieee754_atan2+0x3e>
 800e678:	2c02      	cmp	r4, #2
 800e67a:	d848      	bhi.n	800e70e <__ieee754_atan2+0x13e>
 800e67c:	4b31      	ldr	r3, [pc, #196]	@ (800e744 <__ieee754_atan2+0x174>)
 800e67e:	e7f6      	b.n	800e66e <__ieee754_atan2+0x9e>
 800e680:	4543      	cmp	r3, r8
 800e682:	d0e4      	beq.n	800e64e <__ieee754_atan2+0x7e>
 800e684:	1a9b      	subs	r3, r3, r2
 800e686:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800e68a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e68e:	da1e      	bge.n	800e6ce <__ieee754_atan2+0xfe>
 800e690:	2f00      	cmp	r7, #0
 800e692:	da01      	bge.n	800e698 <__ieee754_atan2+0xc8>
 800e694:	323c      	adds	r2, #60	@ 0x3c
 800e696:	db1e      	blt.n	800e6d6 <__ieee754_atan2+0x106>
 800e698:	4632      	mov	r2, r6
 800e69a:	463b      	mov	r3, r7
 800e69c:	f7f2 f8de 	bl	800085c <__aeabi_ddiv>
 800e6a0:	ec41 0b10 	vmov	d0, r0, r1
 800e6a4:	f000 f9f4 	bl	800ea90 <fabs>
 800e6a8:	f000 f85a 	bl	800e760 <atan>
 800e6ac:	ec51 0b10 	vmov	r0, r1, d0
 800e6b0:	2c01      	cmp	r4, #1
 800e6b2:	d013      	beq.n	800e6dc <__ieee754_atan2+0x10c>
 800e6b4:	2c02      	cmp	r4, #2
 800e6b6:	d015      	beq.n	800e6e4 <__ieee754_atan2+0x114>
 800e6b8:	2c00      	cmp	r4, #0
 800e6ba:	d0a8      	beq.n	800e60e <__ieee754_atan2+0x3e>
 800e6bc:	a318      	add	r3, pc, #96	@ (adr r3, 800e720 <__ieee754_atan2+0x150>)
 800e6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c2:	f7f1 fde9 	bl	8000298 <__aeabi_dsub>
 800e6c6:	a318      	add	r3, pc, #96	@ (adr r3, 800e728 <__ieee754_atan2+0x158>)
 800e6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6cc:	e014      	b.n	800e6f8 <__ieee754_atan2+0x128>
 800e6ce:	a118      	add	r1, pc, #96	@ (adr r1, 800e730 <__ieee754_atan2+0x160>)
 800e6d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6d4:	e7ec      	b.n	800e6b0 <__ieee754_atan2+0xe0>
 800e6d6:	2000      	movs	r0, #0
 800e6d8:	2100      	movs	r1, #0
 800e6da:	e7e9      	b.n	800e6b0 <__ieee754_atan2+0xe0>
 800e6dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	e794      	b.n	800e60e <__ieee754_atan2+0x3e>
 800e6e4:	a30e      	add	r3, pc, #56	@ (adr r3, 800e720 <__ieee754_atan2+0x150>)
 800e6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ea:	f7f1 fdd5 	bl	8000298 <__aeabi_dsub>
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	a10d      	add	r1, pc, #52	@ (adr r1, 800e728 <__ieee754_atan2+0x158>)
 800e6f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6f8:	f7f1 fdce 	bl	8000298 <__aeabi_dsub>
 800e6fc:	e787      	b.n	800e60e <__ieee754_atan2+0x3e>
 800e6fe:	a10a      	add	r1, pc, #40	@ (adr r1, 800e728 <__ieee754_atan2+0x158>)
 800e700:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e704:	e783      	b.n	800e60e <__ieee754_atan2+0x3e>
 800e706:	a10c      	add	r1, pc, #48	@ (adr r1, 800e738 <__ieee754_atan2+0x168>)
 800e708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e70c:	e77f      	b.n	800e60e <__ieee754_atan2+0x3e>
 800e70e:	2000      	movs	r0, #0
 800e710:	2100      	movs	r1, #0
 800e712:	e77c      	b.n	800e60e <__ieee754_atan2+0x3e>
 800e714:	a106      	add	r1, pc, #24	@ (adr r1, 800e730 <__ieee754_atan2+0x160>)
 800e716:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e71a:	e778      	b.n	800e60e <__ieee754_atan2+0x3e>
 800e71c:	f3af 8000 	nop.w
 800e720:	33145c07 	.word	0x33145c07
 800e724:	3ca1a626 	.word	0x3ca1a626
 800e728:	54442d18 	.word	0x54442d18
 800e72c:	400921fb 	.word	0x400921fb
 800e730:	54442d18 	.word	0x54442d18
 800e734:	3ff921fb 	.word	0x3ff921fb
 800e738:	54442d18 	.word	0x54442d18
 800e73c:	3fe921fb 	.word	0x3fe921fb
 800e740:	0800eee8 	.word	0x0800eee8
 800e744:	0800eed0 	.word	0x0800eed0
 800e748:	54442d18 	.word	0x54442d18
 800e74c:	c00921fb 	.word	0xc00921fb
 800e750:	54442d18 	.word	0x54442d18
 800e754:	bff921fb 	.word	0xbff921fb
 800e758:	7ff00000 	.word	0x7ff00000
 800e75c:	00000000 	.word	0x00000000

0800e760 <atan>:
 800e760:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e764:	ec55 4b10 	vmov	r4, r5, d0
 800e768:	4bbf      	ldr	r3, [pc, #764]	@ (800ea68 <atan+0x308>)
 800e76a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e76e:	429e      	cmp	r6, r3
 800e770:	46ab      	mov	fp, r5
 800e772:	d918      	bls.n	800e7a6 <atan+0x46>
 800e774:	4bbd      	ldr	r3, [pc, #756]	@ (800ea6c <atan+0x30c>)
 800e776:	429e      	cmp	r6, r3
 800e778:	d801      	bhi.n	800e77e <atan+0x1e>
 800e77a:	d109      	bne.n	800e790 <atan+0x30>
 800e77c:	b144      	cbz	r4, 800e790 <atan+0x30>
 800e77e:	4622      	mov	r2, r4
 800e780:	462b      	mov	r3, r5
 800e782:	4620      	mov	r0, r4
 800e784:	4629      	mov	r1, r5
 800e786:	f7f1 fd89 	bl	800029c <__adddf3>
 800e78a:	4604      	mov	r4, r0
 800e78c:	460d      	mov	r5, r1
 800e78e:	e006      	b.n	800e79e <atan+0x3e>
 800e790:	f1bb 0f00 	cmp.w	fp, #0
 800e794:	f340 812b 	ble.w	800e9ee <atan+0x28e>
 800e798:	a597      	add	r5, pc, #604	@ (adr r5, 800e9f8 <atan+0x298>)
 800e79a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e79e:	ec45 4b10 	vmov	d0, r4, r5
 800e7a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7a6:	4bb2      	ldr	r3, [pc, #712]	@ (800ea70 <atan+0x310>)
 800e7a8:	429e      	cmp	r6, r3
 800e7aa:	d813      	bhi.n	800e7d4 <atan+0x74>
 800e7ac:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800e7b0:	429e      	cmp	r6, r3
 800e7b2:	d80c      	bhi.n	800e7ce <atan+0x6e>
 800e7b4:	a392      	add	r3, pc, #584	@ (adr r3, 800ea00 <atan+0x2a0>)
 800e7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	4629      	mov	r1, r5
 800e7be:	f7f1 fd6d 	bl	800029c <__adddf3>
 800e7c2:	4bac      	ldr	r3, [pc, #688]	@ (800ea74 <atan+0x314>)
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	f7f2 f9af 	bl	8000b28 <__aeabi_dcmpgt>
 800e7ca:	2800      	cmp	r0, #0
 800e7cc:	d1e7      	bne.n	800e79e <atan+0x3e>
 800e7ce:	f04f 3aff 	mov.w	sl, #4294967295
 800e7d2:	e029      	b.n	800e828 <atan+0xc8>
 800e7d4:	f000 f95c 	bl	800ea90 <fabs>
 800e7d8:	4ba7      	ldr	r3, [pc, #668]	@ (800ea78 <atan+0x318>)
 800e7da:	429e      	cmp	r6, r3
 800e7dc:	ec55 4b10 	vmov	r4, r5, d0
 800e7e0:	f200 80bc 	bhi.w	800e95c <atan+0x1fc>
 800e7e4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800e7e8:	429e      	cmp	r6, r3
 800e7ea:	f200 809e 	bhi.w	800e92a <atan+0x1ca>
 800e7ee:	4622      	mov	r2, r4
 800e7f0:	462b      	mov	r3, r5
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	4629      	mov	r1, r5
 800e7f6:	f7f1 fd51 	bl	800029c <__adddf3>
 800e7fa:	4b9e      	ldr	r3, [pc, #632]	@ (800ea74 <atan+0x314>)
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f7f1 fd4b 	bl	8000298 <__aeabi_dsub>
 800e802:	2200      	movs	r2, #0
 800e804:	4606      	mov	r6, r0
 800e806:	460f      	mov	r7, r1
 800e808:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e80c:	4620      	mov	r0, r4
 800e80e:	4629      	mov	r1, r5
 800e810:	f7f1 fd44 	bl	800029c <__adddf3>
 800e814:	4602      	mov	r2, r0
 800e816:	460b      	mov	r3, r1
 800e818:	4630      	mov	r0, r6
 800e81a:	4639      	mov	r1, r7
 800e81c:	f7f2 f81e 	bl	800085c <__aeabi_ddiv>
 800e820:	f04f 0a00 	mov.w	sl, #0
 800e824:	4604      	mov	r4, r0
 800e826:	460d      	mov	r5, r1
 800e828:	4622      	mov	r2, r4
 800e82a:	462b      	mov	r3, r5
 800e82c:	4620      	mov	r0, r4
 800e82e:	4629      	mov	r1, r5
 800e830:	f7f1 feea 	bl	8000608 <__aeabi_dmul>
 800e834:	4602      	mov	r2, r0
 800e836:	460b      	mov	r3, r1
 800e838:	4680      	mov	r8, r0
 800e83a:	4689      	mov	r9, r1
 800e83c:	f7f1 fee4 	bl	8000608 <__aeabi_dmul>
 800e840:	a371      	add	r3, pc, #452	@ (adr r3, 800ea08 <atan+0x2a8>)
 800e842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e846:	4606      	mov	r6, r0
 800e848:	460f      	mov	r7, r1
 800e84a:	f7f1 fedd 	bl	8000608 <__aeabi_dmul>
 800e84e:	a370      	add	r3, pc, #448	@ (adr r3, 800ea10 <atan+0x2b0>)
 800e850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e854:	f7f1 fd22 	bl	800029c <__adddf3>
 800e858:	4632      	mov	r2, r6
 800e85a:	463b      	mov	r3, r7
 800e85c:	f7f1 fed4 	bl	8000608 <__aeabi_dmul>
 800e860:	a36d      	add	r3, pc, #436	@ (adr r3, 800ea18 <atan+0x2b8>)
 800e862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e866:	f7f1 fd19 	bl	800029c <__adddf3>
 800e86a:	4632      	mov	r2, r6
 800e86c:	463b      	mov	r3, r7
 800e86e:	f7f1 fecb 	bl	8000608 <__aeabi_dmul>
 800e872:	a36b      	add	r3, pc, #428	@ (adr r3, 800ea20 <atan+0x2c0>)
 800e874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e878:	f7f1 fd10 	bl	800029c <__adddf3>
 800e87c:	4632      	mov	r2, r6
 800e87e:	463b      	mov	r3, r7
 800e880:	f7f1 fec2 	bl	8000608 <__aeabi_dmul>
 800e884:	a368      	add	r3, pc, #416	@ (adr r3, 800ea28 <atan+0x2c8>)
 800e886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e88a:	f7f1 fd07 	bl	800029c <__adddf3>
 800e88e:	4632      	mov	r2, r6
 800e890:	463b      	mov	r3, r7
 800e892:	f7f1 feb9 	bl	8000608 <__aeabi_dmul>
 800e896:	a366      	add	r3, pc, #408	@ (adr r3, 800ea30 <atan+0x2d0>)
 800e898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89c:	f7f1 fcfe 	bl	800029c <__adddf3>
 800e8a0:	4642      	mov	r2, r8
 800e8a2:	464b      	mov	r3, r9
 800e8a4:	f7f1 feb0 	bl	8000608 <__aeabi_dmul>
 800e8a8:	a363      	add	r3, pc, #396	@ (adr r3, 800ea38 <atan+0x2d8>)
 800e8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ae:	4680      	mov	r8, r0
 800e8b0:	4689      	mov	r9, r1
 800e8b2:	4630      	mov	r0, r6
 800e8b4:	4639      	mov	r1, r7
 800e8b6:	f7f1 fea7 	bl	8000608 <__aeabi_dmul>
 800e8ba:	a361      	add	r3, pc, #388	@ (adr r3, 800ea40 <atan+0x2e0>)
 800e8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c0:	f7f1 fcea 	bl	8000298 <__aeabi_dsub>
 800e8c4:	4632      	mov	r2, r6
 800e8c6:	463b      	mov	r3, r7
 800e8c8:	f7f1 fe9e 	bl	8000608 <__aeabi_dmul>
 800e8cc:	a35e      	add	r3, pc, #376	@ (adr r3, 800ea48 <atan+0x2e8>)
 800e8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d2:	f7f1 fce1 	bl	8000298 <__aeabi_dsub>
 800e8d6:	4632      	mov	r2, r6
 800e8d8:	463b      	mov	r3, r7
 800e8da:	f7f1 fe95 	bl	8000608 <__aeabi_dmul>
 800e8de:	a35c      	add	r3, pc, #368	@ (adr r3, 800ea50 <atan+0x2f0>)
 800e8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e4:	f7f1 fcd8 	bl	8000298 <__aeabi_dsub>
 800e8e8:	4632      	mov	r2, r6
 800e8ea:	463b      	mov	r3, r7
 800e8ec:	f7f1 fe8c 	bl	8000608 <__aeabi_dmul>
 800e8f0:	a359      	add	r3, pc, #356	@ (adr r3, 800ea58 <atan+0x2f8>)
 800e8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f6:	f7f1 fccf 	bl	8000298 <__aeabi_dsub>
 800e8fa:	4632      	mov	r2, r6
 800e8fc:	463b      	mov	r3, r7
 800e8fe:	f7f1 fe83 	bl	8000608 <__aeabi_dmul>
 800e902:	4602      	mov	r2, r0
 800e904:	460b      	mov	r3, r1
 800e906:	4640      	mov	r0, r8
 800e908:	4649      	mov	r1, r9
 800e90a:	f7f1 fcc7 	bl	800029c <__adddf3>
 800e90e:	4622      	mov	r2, r4
 800e910:	462b      	mov	r3, r5
 800e912:	f7f1 fe79 	bl	8000608 <__aeabi_dmul>
 800e916:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e91a:	4602      	mov	r2, r0
 800e91c:	460b      	mov	r3, r1
 800e91e:	d148      	bne.n	800e9b2 <atan+0x252>
 800e920:	4620      	mov	r0, r4
 800e922:	4629      	mov	r1, r5
 800e924:	f7f1 fcb8 	bl	8000298 <__aeabi_dsub>
 800e928:	e72f      	b.n	800e78a <atan+0x2a>
 800e92a:	4b52      	ldr	r3, [pc, #328]	@ (800ea74 <atan+0x314>)
 800e92c:	2200      	movs	r2, #0
 800e92e:	4620      	mov	r0, r4
 800e930:	4629      	mov	r1, r5
 800e932:	f7f1 fcb1 	bl	8000298 <__aeabi_dsub>
 800e936:	4b4f      	ldr	r3, [pc, #316]	@ (800ea74 <atan+0x314>)
 800e938:	4606      	mov	r6, r0
 800e93a:	460f      	mov	r7, r1
 800e93c:	2200      	movs	r2, #0
 800e93e:	4620      	mov	r0, r4
 800e940:	4629      	mov	r1, r5
 800e942:	f7f1 fcab 	bl	800029c <__adddf3>
 800e946:	4602      	mov	r2, r0
 800e948:	460b      	mov	r3, r1
 800e94a:	4630      	mov	r0, r6
 800e94c:	4639      	mov	r1, r7
 800e94e:	f7f1 ff85 	bl	800085c <__aeabi_ddiv>
 800e952:	f04f 0a01 	mov.w	sl, #1
 800e956:	4604      	mov	r4, r0
 800e958:	460d      	mov	r5, r1
 800e95a:	e765      	b.n	800e828 <atan+0xc8>
 800e95c:	4b47      	ldr	r3, [pc, #284]	@ (800ea7c <atan+0x31c>)
 800e95e:	429e      	cmp	r6, r3
 800e960:	d21c      	bcs.n	800e99c <atan+0x23c>
 800e962:	4b47      	ldr	r3, [pc, #284]	@ (800ea80 <atan+0x320>)
 800e964:	2200      	movs	r2, #0
 800e966:	4620      	mov	r0, r4
 800e968:	4629      	mov	r1, r5
 800e96a:	f7f1 fc95 	bl	8000298 <__aeabi_dsub>
 800e96e:	4b44      	ldr	r3, [pc, #272]	@ (800ea80 <atan+0x320>)
 800e970:	4606      	mov	r6, r0
 800e972:	460f      	mov	r7, r1
 800e974:	2200      	movs	r2, #0
 800e976:	4620      	mov	r0, r4
 800e978:	4629      	mov	r1, r5
 800e97a:	f7f1 fe45 	bl	8000608 <__aeabi_dmul>
 800e97e:	4b3d      	ldr	r3, [pc, #244]	@ (800ea74 <atan+0x314>)
 800e980:	2200      	movs	r2, #0
 800e982:	f7f1 fc8b 	bl	800029c <__adddf3>
 800e986:	4602      	mov	r2, r0
 800e988:	460b      	mov	r3, r1
 800e98a:	4630      	mov	r0, r6
 800e98c:	4639      	mov	r1, r7
 800e98e:	f7f1 ff65 	bl	800085c <__aeabi_ddiv>
 800e992:	f04f 0a02 	mov.w	sl, #2
 800e996:	4604      	mov	r4, r0
 800e998:	460d      	mov	r5, r1
 800e99a:	e745      	b.n	800e828 <atan+0xc8>
 800e99c:	4622      	mov	r2, r4
 800e99e:	462b      	mov	r3, r5
 800e9a0:	4938      	ldr	r1, [pc, #224]	@ (800ea84 <atan+0x324>)
 800e9a2:	2000      	movs	r0, #0
 800e9a4:	f7f1 ff5a 	bl	800085c <__aeabi_ddiv>
 800e9a8:	f04f 0a03 	mov.w	sl, #3
 800e9ac:	4604      	mov	r4, r0
 800e9ae:	460d      	mov	r5, r1
 800e9b0:	e73a      	b.n	800e828 <atan+0xc8>
 800e9b2:	4b35      	ldr	r3, [pc, #212]	@ (800ea88 <atan+0x328>)
 800e9b4:	4e35      	ldr	r6, [pc, #212]	@ (800ea8c <atan+0x32c>)
 800e9b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9be:	f7f1 fc6b 	bl	8000298 <__aeabi_dsub>
 800e9c2:	4622      	mov	r2, r4
 800e9c4:	462b      	mov	r3, r5
 800e9c6:	f7f1 fc67 	bl	8000298 <__aeabi_dsub>
 800e9ca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e9ce:	4602      	mov	r2, r0
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e9d6:	f7f1 fc5f 	bl	8000298 <__aeabi_dsub>
 800e9da:	f1bb 0f00 	cmp.w	fp, #0
 800e9de:	4604      	mov	r4, r0
 800e9e0:	460d      	mov	r5, r1
 800e9e2:	f6bf aedc 	bge.w	800e79e <atan+0x3e>
 800e9e6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e9ea:	461d      	mov	r5, r3
 800e9ec:	e6d7      	b.n	800e79e <atan+0x3e>
 800e9ee:	a51c      	add	r5, pc, #112	@ (adr r5, 800ea60 <atan+0x300>)
 800e9f0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e9f4:	e6d3      	b.n	800e79e <atan+0x3e>
 800e9f6:	bf00      	nop
 800e9f8:	54442d18 	.word	0x54442d18
 800e9fc:	3ff921fb 	.word	0x3ff921fb
 800ea00:	8800759c 	.word	0x8800759c
 800ea04:	7e37e43c 	.word	0x7e37e43c
 800ea08:	e322da11 	.word	0xe322da11
 800ea0c:	3f90ad3a 	.word	0x3f90ad3a
 800ea10:	24760deb 	.word	0x24760deb
 800ea14:	3fa97b4b 	.word	0x3fa97b4b
 800ea18:	a0d03d51 	.word	0xa0d03d51
 800ea1c:	3fb10d66 	.word	0x3fb10d66
 800ea20:	c54c206e 	.word	0xc54c206e
 800ea24:	3fb745cd 	.word	0x3fb745cd
 800ea28:	920083ff 	.word	0x920083ff
 800ea2c:	3fc24924 	.word	0x3fc24924
 800ea30:	5555550d 	.word	0x5555550d
 800ea34:	3fd55555 	.word	0x3fd55555
 800ea38:	2c6a6c2f 	.word	0x2c6a6c2f
 800ea3c:	bfa2b444 	.word	0xbfa2b444
 800ea40:	52defd9a 	.word	0x52defd9a
 800ea44:	3fadde2d 	.word	0x3fadde2d
 800ea48:	af749a6d 	.word	0xaf749a6d
 800ea4c:	3fb3b0f2 	.word	0x3fb3b0f2
 800ea50:	fe231671 	.word	0xfe231671
 800ea54:	3fbc71c6 	.word	0x3fbc71c6
 800ea58:	9998ebc4 	.word	0x9998ebc4
 800ea5c:	3fc99999 	.word	0x3fc99999
 800ea60:	54442d18 	.word	0x54442d18
 800ea64:	bff921fb 	.word	0xbff921fb
 800ea68:	440fffff 	.word	0x440fffff
 800ea6c:	7ff00000 	.word	0x7ff00000
 800ea70:	3fdbffff 	.word	0x3fdbffff
 800ea74:	3ff00000 	.word	0x3ff00000
 800ea78:	3ff2ffff 	.word	0x3ff2ffff
 800ea7c:	40038000 	.word	0x40038000
 800ea80:	3ff80000 	.word	0x3ff80000
 800ea84:	bff00000 	.word	0xbff00000
 800ea88:	0800ef00 	.word	0x0800ef00
 800ea8c:	0800ef20 	.word	0x0800ef20

0800ea90 <fabs>:
 800ea90:	ec51 0b10 	vmov	r0, r1, d0
 800ea94:	4602      	mov	r2, r0
 800ea96:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ea9a:	ec43 2b10 	vmov	d0, r2, r3
 800ea9e:	4770      	bx	lr

0800eaa0 <_init>:
 800eaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaa2:	bf00      	nop
 800eaa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaa6:	bc08      	pop	{r3}
 800eaa8:	469e      	mov	lr, r3
 800eaaa:	4770      	bx	lr

0800eaac <_fini>:
 800eaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaae:	bf00      	nop
 800eab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eab2:	bc08      	pop	{r3}
 800eab4:	469e      	mov	lr, r3
 800eab6:	4770      	bx	lr
