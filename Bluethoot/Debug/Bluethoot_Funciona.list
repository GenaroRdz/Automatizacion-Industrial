
Bluethoot_Funciona.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800e440  0800e440  0000f440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8c8  0800e8c8  000102c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8c8  0800e8c8  0000f8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8d0  0800e8d0  000102c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8d0  0800e8d0  0000f8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e8d4  0800e8d4  0000f8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800e8d8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e94  200002c4  0800eb9c  000102c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002158  0800eb9c  00011158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019fd6  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c6e  00000000  00000000  0002a2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  0002df38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001222  00000000  00000000  0002f688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aac1  00000000  00000000  000308aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d808  00000000  00000000  0004b36b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000973ce  00000000  00000000  00068b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fff41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007560  00000000  00000000  000fff84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001074e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e428 	.word	0x0800e428

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	0800e428 	.word	0x0800e428

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <QMC5883L_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void QMC5883L_Init() {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af02      	add	r7, sp, #8
    uint8_t data[2];
    data[0] = 0x0B; // Registro de configuración 2
 8000f4e:	230b      	movs	r3, #11
 8000f50:	713b      	strb	r3, [r7, #4]
    data[1] = 0x01; // Reinicio de software
 8000f52:	2301      	movs	r3, #1
 8000f54:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c2, QMC5883L_ADDR, data, 2, HAL_MAX_DELAY);
 8000f56:	1d3a      	adds	r2, r7, #4
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2302      	movs	r3, #2
 8000f60:	211a      	movs	r1, #26
 8000f62:	480a      	ldr	r0, [pc, #40]	@ (8000f8c <QMC5883L_Init+0x44>)
 8000f64:	f001 fcaa 	bl	80028bc <HAL_I2C_Master_Transmit>

    data[0] = 0x09; // Registro de control
 8000f68:	2309      	movs	r3, #9
 8000f6a:	713b      	strb	r3, [r7, #4]
    data[1] = 0x1D; // Configuración (ODR = 50Hz, RNG = 2G, OSR = 512)
 8000f6c:	231d      	movs	r3, #29
 8000f6e:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c2, QMC5883L_ADDR, data, 2, HAL_MAX_DELAY);
 8000f70:	1d3a      	adds	r2, r7, #4
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2302      	movs	r3, #2
 8000f7a:	211a      	movs	r1, #26
 8000f7c:	4803      	ldr	r0, [pc, #12]	@ (8000f8c <QMC5883L_Init+0x44>)
 8000f7e:	f001 fc9d 	bl	80028bc <HAL_I2C_Master_Transmit>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200002ec 	.word	0x200002ec

08000f90 <QMC5883L_Read>:
// Función para leer los datos de los ejes X, Y, Z
void QMC5883L_Read(int16_t *x, int16_t *y, int16_t *z, float *angulo) {
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b08a      	sub	sp, #40	@ 0x28
 8000f94:	af04      	add	r7, sp, #16
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	603b      	str	r3, [r7, #0]
    uint8_t data[6];
    HAL_I2C_Mem_Read(&hi2c2, QMC5883L_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, data, 6, HAL_MAX_DELAY);
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	2306      	movs	r3, #6
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	211a      	movs	r1, #26
 8000fb4:	483c      	ldr	r0, [pc, #240]	@ (80010a8 <QMC5883L_Read+0x118>)
 8000fb6:	f001 fd7f 	bl	8002ab8 <HAL_I2C_Mem_Read>

    *x = (int16_t)((data[1] << 8) | data[0]) - x_offset;
 8000fba:	7c7b      	ldrb	r3, [r7, #17]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	7c3b      	ldrb	r3, [r7, #16]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	4b38      	ldr	r3, [pc, #224]	@ (80010ac <QMC5883L_Read+0x11c>)
 8000fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((data[3] << 8) | data[2]) - y_offset;
 8000fdc:	7cfb      	ldrb	r3, [r7, #19]
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	7cbb      	ldrb	r3, [r7, #18]
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	4b30      	ldr	r3, [pc, #192]	@ (80010b0 <QMC5883L_Read+0x120>)
 8000fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((data[5] << 8) | data[4]);
 8000ffe:	7d7b      	ldrb	r3, [r7, #21]
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	b21a      	sxth	r2, r3
 8001004:	7d3b      	ldrb	r3, [r7, #20]
 8001006:	b21b      	sxth	r3, r3
 8001008:	4313      	orrs	r3, r2
 800100a:	b21a      	sxth	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	801a      	strh	r2, [r3, #0]

    // Calcular el ángulo en grados
    *angulo = atan2((float)*y, (float)*x) * (180.0 / M_PI);
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101e:	ee17 0a90 	vmov	r0, s15
 8001022:	f7ff fa99 	bl	8000558 <__aeabi_f2d>
 8001026:	4604      	mov	r4, r0
 8001028:	460d      	mov	r5, r1
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001038:	ee17 0a90 	vmov	r0, s15
 800103c:	f7ff fa8c 	bl	8000558 <__aeabi_f2d>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	ec43 2b11 	vmov	d1, r2, r3
 8001048:	ec45 4b10 	vmov	d0, r4, r5
 800104c:	f00c ff80 	bl	800df50 <atan2>
 8001050:	ec51 0b10 	vmov	r0, r1, d0
 8001054:	a312      	add	r3, pc, #72	@ (adr r3, 80010a0 <QMC5883L_Read+0x110>)
 8001056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105a:	f7ff fad5 	bl	8000608 <__aeabi_dmul>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4610      	mov	r0, r2
 8001064:	4619      	mov	r1, r3
 8001066:	f7ff fda7 	bl	8000bb8 <__aeabi_d2f>
 800106a:	4602      	mov	r2, r0
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	601a      	str	r2, [r3, #0]
    if (*angulo < 0) {
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	edd3 7a00 	vldr	s15, [r3]
 8001076:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800107a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107e:	d400      	bmi.n	8001082 <QMC5883L_Read+0xf2>
        *angulo += 360.0;  // Ajuste para obtener el ángulo en [0, 360] grados
    }
}
 8001080:	e009      	b.n	8001096 <QMC5883L_Read+0x106>
        *angulo += 360.0;  // Ajuste para obtener el ángulo en [0, 360] grados
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	edd3 7a00 	vldr	s15, [r3]
 8001088:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80010b4 <QMC5883L_Read+0x124>
 800108c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	edc3 7a00 	vstr	s15, [r3]
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	1a63c1f8 	.word	0x1a63c1f8
 80010a4:	404ca5dc 	.word	0x404ca5dc
 80010a8:	200002ec 	.word	0x200002ec
 80010ac:	200002e0 	.word	0x200002e0
 80010b0:	200002e2 	.word	0x200002e2
 80010b4:	43b40000 	.word	0x43b40000

080010b8 <Calibrate_Sensor>:
void Calibrate_Sensor() {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b094      	sub	sp, #80	@ 0x50
 80010bc:	af00      	add	r7, sp, #0
    int16_t x_min = 32767, x_max = -32768;
 80010be:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80010c2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80010c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010ca:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    int16_t y_min = 32767, y_max = -32768;
 80010ce:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80010d2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80010d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010da:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    uint32_t calibration_duration = HAL_GetTick() + 10000; // 10 segundos de calibración
 80010de:	f000 ff37 	bl	8001f50 <HAL_GetTick>
 80010e2:	4603      	mov	r3, r0
 80010e4:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80010e8:	3310      	adds	r3, #16
 80010ea:	647b      	str	r3, [r7, #68]	@ 0x44
    char buffer[64];

    snprintf(buffer, sizeof(buffer), "Calibrando... Gire el sensor 360 grados\r\n");
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4a3c      	ldr	r2, [pc, #240]	@ (80011e0 <Calibrate_Sensor+0x128>)
 80010f0:	2140      	movs	r1, #64	@ 0x40
 80010f2:	4618      	mov	r0, r3
 80010f4:	f00a fdec 	bl	800bcd0 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f8c0 	bl	8000280 <strlen>
 8001100:	4603      	mov	r3, r0
 8001102:	b29a      	uxth	r2, r3
 8001104:	1d39      	adds	r1, r7, #4
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	4836      	ldr	r0, [pc, #216]	@ (80011e4 <Calibrate_Sensor+0x12c>)
 800110c:	f005 f8fc 	bl	8006308 <HAL_UART_Transmit>

    while (HAL_GetTick() < calibration_duration) {
 8001110:	e034      	b.n	800117c <Calibrate_Sensor+0xc4>
        QMC5883L_Read(&x, &y, &z, NULL);
 8001112:	2300      	movs	r3, #0
 8001114:	4a34      	ldr	r2, [pc, #208]	@ (80011e8 <Calibrate_Sensor+0x130>)
 8001116:	4935      	ldr	r1, [pc, #212]	@ (80011ec <Calibrate_Sensor+0x134>)
 8001118:	4835      	ldr	r0, [pc, #212]	@ (80011f0 <Calibrate_Sensor+0x138>)
 800111a:	f7ff ff39 	bl	8000f90 <QMC5883L_Read>

        if (x < x_min) x_min = x;
 800111e:	4b34      	ldr	r3, [pc, #208]	@ (80011f0 <Calibrate_Sensor+0x138>)
 8001120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001124:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 8001128:	429a      	cmp	r2, r3
 800112a:	dd03      	ble.n	8001134 <Calibrate_Sensor+0x7c>
 800112c:	4b30      	ldr	r3, [pc, #192]	@ (80011f0 <Calibrate_Sensor+0x138>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
        if (x > x_max) x_max = x;
 8001134:	4b2e      	ldr	r3, [pc, #184]	@ (80011f0 <Calibrate_Sensor+0x138>)
 8001136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113a:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 800113e:	429a      	cmp	r2, r3
 8001140:	da03      	bge.n	800114a <Calibrate_Sensor+0x92>
 8001142:	4b2b      	ldr	r3, [pc, #172]	@ (80011f0 <Calibrate_Sensor+0x138>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
        if (y < y_min) y_min = y;
 800114a:	4b28      	ldr	r3, [pc, #160]	@ (80011ec <Calibrate_Sensor+0x134>)
 800114c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001150:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 8001154:	429a      	cmp	r2, r3
 8001156:	dd03      	ble.n	8001160 <Calibrate_Sensor+0xa8>
 8001158:	4b24      	ldr	r3, [pc, #144]	@ (80011ec <Calibrate_Sensor+0x134>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        if (y > y_max) y_max = y;
 8001160:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <Calibrate_Sensor+0x134>)
 8001162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001166:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 800116a:	429a      	cmp	r2, r3
 800116c:	da03      	bge.n	8001176 <Calibrate_Sensor+0xbe>
 800116e:	4b1f      	ldr	r3, [pc, #124]	@ (80011ec <Calibrate_Sensor+0x134>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

        HAL_Delay(100); // Esperar antes de la siguiente lectura
 8001176:	2064      	movs	r0, #100	@ 0x64
 8001178:	f000 fef6 	bl	8001f68 <HAL_Delay>
    while (HAL_GetTick() < calibration_duration) {
 800117c:	f000 fee8 	bl	8001f50 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001184:	4293      	cmp	r3, r2
 8001186:	d8c4      	bhi.n	8001112 <Calibrate_Sensor+0x5a>
    }

    // Calcular los offsets para centrar en cero
    x_offset = (x_max + x_min) / 2;
 8001188:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 800118c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8001190:	4413      	add	r3, r2
 8001192:	0fda      	lsrs	r2, r3, #31
 8001194:	4413      	add	r3, r2
 8001196:	105b      	asrs	r3, r3, #1
 8001198:	b21a      	sxth	r2, r3
 800119a:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <Calibrate_Sensor+0x13c>)
 800119c:	801a      	strh	r2, [r3, #0]
    y_offset = (y_max + y_min) / 2;
 800119e:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 80011a2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80011a6:	4413      	add	r3, r2
 80011a8:	0fda      	lsrs	r2, r3, #31
 80011aa:	4413      	add	r3, r2
 80011ac:	105b      	asrs	r3, r3, #1
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <Calibrate_Sensor+0x140>)
 80011b2:	801a      	strh	r2, [r3, #0]

    snprintf(buffer, sizeof(buffer), "Calibracion completa.\r\n");
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	4a11      	ldr	r2, [pc, #68]	@ (80011fc <Calibrate_Sensor+0x144>)
 80011b8:	2140      	movs	r1, #64	@ 0x40
 80011ba:	4618      	mov	r0, r3
 80011bc:	f00a fd88 	bl	800bcd0 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f85c 	bl	8000280 <strlen>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	1d39      	adds	r1, r7, #4
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	4804      	ldr	r0, [pc, #16]	@ (80011e4 <Calibrate_Sensor+0x12c>)
 80011d4:	f005 f898 	bl	8006308 <HAL_UART_Transmit>
}
 80011d8:	bf00      	nop
 80011da:	3750      	adds	r7, #80	@ 0x50
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	0800e440 	.word	0x0800e440
 80011e4:	200003d0 	.word	0x200003d0
 80011e8:	200002e8 	.word	0x200002e8
 80011ec:	200002e6 	.word	0x200002e6
 80011f0:	200002e4 	.word	0x200002e4
 80011f4:	200002e0 	.word	0x200002e0
 80011f8:	200002e2 	.word	0x200002e2
 80011fc:	0800e46c 	.word	0x0800e46c

08001200 <Motor_forward>:
void Motor_forward() {
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	2120      	movs	r1, #32
 8001208:	4804      	ldr	r0, [pc, #16]	@ (800121c <Motor_forward+0x1c>)
 800120a:	f001 f9f9 	bl	8002600 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2110      	movs	r1, #16
 8001212:	4802      	ldr	r0, [pc, #8]	@ (800121c <Motor_forward+0x1c>)
 8001214:	f001 f9f4 	bl	8002600 <HAL_GPIO_WritePin>
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40020400 	.word	0x40020400

08001220 <Motor_SetSpeed>:
    // Dirección hacia adelante
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
}
// Función para configurar la velocidad del motor (PWM)
void Motor_SetSpeed(uint8_t speed) {
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
    if (speed > 100) speed = 100; // Limita el valor máximo a 100%
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b64      	cmp	r3, #100	@ 0x64
 800122e:	d901      	bls.n	8001234 <Motor_SetSpeed+0x14>
 8001230:	2364      	movs	r3, #100	@ 0x64
 8001232:	71fb      	strb	r3, [r7, #7]
    if (speed < 0) speed = 0; // Limita el valor minimo a 0%
    // Calcula el valor de comparación para el duty cycle
    uint32_t pulse = (speed * __HAL_TIM_GET_AUTORELOAD(&htim2)) / 100;
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <Motor_SetSpeed+0x40>)
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800123c:	fb02 f303 	mul.w	r3, r2, r3
 8001240:	4a08      	ldr	r2, [pc, #32]	@ (8001264 <Motor_SetSpeed+0x44>)
 8001242:	fba2 2303 	umull	r2, r3, r2, r3
 8001246:	095b      	lsrs	r3, r3, #5
 8001248:	60fb      	str	r3, [r7, #12]

    // Establece el duty cycle
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse);
 800124a:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <Motor_SetSpeed+0x40>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000340 	.word	0x20000340
 8001264:	51eb851f 	.word	0x51eb851f

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b094      	sub	sp, #80	@ 0x50
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126e:	f000 fe09 	bl	8001e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001272:	f000 f867 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001276:	f000 f9fd 	bl	8001674 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800127a:	f000 f9d1 	bl	8001620 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800127e:	f000 f8f7 	bl	8001470 <MX_TIM2_Init>
  MX_I2C2_Init();
 8001282:	f000 f8c7 	bl	8001414 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8001286:	f009 fb1f 	bl	800a8c8 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 800128a:	f000 f975 	bl	8001578 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001294:	4825      	ldr	r0, [pc, #148]	@ (800132c <main+0xc4>)
 8001296:	f001 f9b3 	bl	8002600 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive
 800129a:	2201      	movs	r2, #1
 800129c:	4924      	ldr	r1, [pc, #144]	@ (8001330 <main+0xc8>)
 800129e:	4825      	ldr	r0, [pc, #148]	@ (8001334 <main+0xcc>)
 80012a0:	f005 f8bd 	bl	800641e <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Servo motor
 80012a4:	2100      	movs	r1, #0
 80012a6:	4824      	ldr	r0, [pc, #144]	@ (8001338 <main+0xd0>)
 80012a8:	f004 f92a 	bl	8005500 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Velocidad de motor
 80012ac:	2104      	movs	r1, #4
 80012ae:	4822      	ldr	r0, [pc, #136]	@ (8001338 <main+0xd0>)
 80012b0:	f004 f926 	bl	8005500 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80012b4:	213c      	movs	r1, #60	@ 0x3c
 80012b6:	4821      	ldr	r0, [pc, #132]	@ (800133c <main+0xd4>)
 80012b8:	f004 fa78 	bl	80057ac <HAL_TIM_Encoder_Start>
    // Inicializa el motor
  htim2.Instance -> CCR1 = 500;
 80012bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <main+0xd0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80012c4:	635a      	str	r2, [r3, #52]	@ 0x34
  QMC5883L_Init();
 80012c6:	f7ff fe3f 	bl	8000f48 <QMC5883L_Init>
  Calibrate_Sensor(); // Llamar a la función de calibración al inicio
 80012ca:	f7ff fef5 	bl	80010b8 <Calibrate_Sensor>
  int16_t x, y, z;
  float angle;
  char buffer[64];
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012d4:	4815      	ldr	r0, [pc, #84]	@ (800132c <main+0xc4>)
 80012d6:	f001 f993 	bl	8002600 <HAL_GPIO_WritePin>
  HAL_Delay(3000);
 80012da:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80012de:	f000 fe43 	bl	8001f68 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012e8:	4810      	ldr	r0, [pc, #64]	@ (800132c <main+0xc4>)
 80012ea:	f001 f989 	bl	8002600 <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 80012ee:	f241 3088 	movw	r0, #5000	@ 0x1388
 80012f2:	f000 fe39 	bl	8001f68 <HAL_Delay>
  Motor_forward();
 80012f6:	f7ff ff83 	bl	8001200 <Motor_forward>
  Motor_SetSpeed(30);
 80012fa:	201e      	movs	r0, #30
 80012fc:	f7ff ff90 	bl	8001220 <Motor_SetSpeed>
  QMC5883L_Read(&x, &y, &z, &angle);
 8001300:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001304:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 8001308:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800130c:	f107 004e 	add.w	r0, r7, #78	@ 0x4e
 8001310:	f7ff fe3e 	bl	8000f90 <QMC5883L_Read>
  set_point = angle;
 8001314:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800131c:	ee17 3a90 	vmov	r3, s15
 8001320:	b21a      	sxth	r2, r3
 8001322:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <main+0xd8>)
 8001324:	801a      	strh	r2, [r3, #0]
  //HAL_TIM_Base_Start_IT(&htim4); // Inicia TIM4 con interrupciones
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001326:	bf00      	nop
 8001328:	e7fd      	b.n	8001326 <main+0xbe>
 800132a:	bf00      	nop
 800132c:	40020400 	.word	0x40020400
 8001330:	20000418 	.word	0x20000418
 8001334:	200003d0 	.word	0x200003d0
 8001338:	20000340 	.word	0x20000340
 800133c:	20000388 	.word	0x20000388
 8001340:	2000041e 	.word	0x2000041e

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b094      	sub	sp, #80	@ 0x50
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	2230      	movs	r2, #48	@ 0x30
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f00a fd33 	bl	800bdbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	4b27      	ldr	r3, [pc, #156]	@ (800140c <SystemClock_Config+0xc8>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001370:	4a26      	ldr	r2, [pc, #152]	@ (800140c <SystemClock_Config+0xc8>)
 8001372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001376:	6413      	str	r3, [r2, #64]	@ 0x40
 8001378:	4b24      	ldr	r3, [pc, #144]	@ (800140c <SystemClock_Config+0xc8>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	4b21      	ldr	r3, [pc, #132]	@ (8001410 <SystemClock_Config+0xcc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a20      	ldr	r2, [pc, #128]	@ (8001410 <SystemClock_Config+0xcc>)
 800138e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b1e      	ldr	r3, [pc, #120]	@ (8001410 <SystemClock_Config+0xcc>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a0:	2301      	movs	r3, #1
 80013a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013aa:	2302      	movs	r3, #2
 80013ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80013b4:	2319      	movs	r3, #25
 80013b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80013b8:	2390      	movs	r3, #144	@ 0x90
 80013ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013bc:	2302      	movs	r3, #2
 80013be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80013c0:	2303      	movs	r3, #3
 80013c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c4:	f107 0320 	add.w	r3, r7, #32
 80013c8:	4618      	mov	r0, r3
 80013ca:	f003 fb99 	bl	8004b00 <HAL_RCC_OscConfig>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013d4:	f000 fa78 	bl	80018c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d8:	230f      	movs	r3, #15
 80013da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013dc:	2302      	movs	r3, #2
 80013de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	2102      	movs	r1, #2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f003 fdfb 	bl	8004ff0 <HAL_RCC_ClockConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001400:	f000 fa62 	bl	80018c8 <Error_Handler>
  }
}
 8001404:	bf00      	nop
 8001406:	3750      	adds	r7, #80	@ 0x50
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	40007000 	.word	0x40007000

08001414 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <MX_I2C2_Init+0x50>)
 800141a:	4a13      	ldr	r2, [pc, #76]	@ (8001468 <MX_I2C2_Init+0x54>)
 800141c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_I2C2_Init+0x50>)
 8001420:	4a12      	ldr	r2, [pc, #72]	@ (800146c <MX_I2C2_Init+0x58>)
 8001422:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <MX_I2C2_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <MX_I2C2_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_I2C2_Init+0x50>)
 8001432:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001436:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001438:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <MX_I2C2_Init+0x50>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800143e:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_I2C2_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001444:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <MX_I2C2_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_I2C2_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	@ (8001464 <MX_I2C2_Init+0x50>)
 8001452:	f001 f8ef 	bl	8002634 <HAL_I2C_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800145c:	f000 fa34 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200002ec 	.word	0x200002ec
 8001468:	40005800 	.word	0x40005800
 800146c:	000186a0 	.word	0x000186a0

08001470 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08e      	sub	sp, #56	@ 0x38
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001476:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001484:	f107 0320 	add.w	r3, r7, #32
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
 800149c:	615a      	str	r2, [r3, #20]
 800149e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014a0:	4b34      	ldr	r3, [pc, #208]	@ (8001574 <MX_TIM2_Init+0x104>)
 80014a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80014a8:	4b32      	ldr	r3, [pc, #200]	@ (8001574 <MX_TIM2_Init+0x104>)
 80014aa:	2247      	movs	r2, #71	@ 0x47
 80014ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ae:	4b31      	ldr	r3, [pc, #196]	@ (8001574 <MX_TIM2_Init+0x104>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 80014b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001574 <MX_TIM2_Init+0x104>)
 80014b6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80014ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001574 <MX_TIM2_Init+0x104>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001574 <MX_TIM2_Init+0x104>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014c8:	482a      	ldr	r0, [pc, #168]	@ (8001574 <MX_TIM2_Init+0x104>)
 80014ca:	f003 ff71 	bl	80053b0 <HAL_TIM_Base_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014d4:	f000 f9f8 	bl	80018c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014e2:	4619      	mov	r1, r3
 80014e4:	4823      	ldr	r0, [pc, #140]	@ (8001574 <MX_TIM2_Init+0x104>)
 80014e6:	f004 fab1 	bl	8005a4c <HAL_TIM_ConfigClockSource>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014f0:	f000 f9ea 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014f4:	481f      	ldr	r0, [pc, #124]	@ (8001574 <MX_TIM2_Init+0x104>)
 80014f6:	f003 ffaa 	bl	800544e <HAL_TIM_PWM_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001500:	f000 f9e2 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800150c:	f107 0320 	add.w	r3, r7, #32
 8001510:	4619      	mov	r1, r3
 8001512:	4818      	ldr	r0, [pc, #96]	@ (8001574 <MX_TIM2_Init+0x104>)
 8001514:	f004 fe3a 	bl	800618c <HAL_TIMEx_MasterConfigSynchronization>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800151e:	f000 f9d3 	bl	80018c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001522:	2360      	movs	r3, #96	@ 0x60
 8001524:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001526:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800152a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	2200      	movs	r2, #0
 8001538:	4619      	mov	r1, r3
 800153a:	480e      	ldr	r0, [pc, #56]	@ (8001574 <MX_TIM2_Init+0x104>)
 800153c:	f004 f9c4 	bl	80058c8 <HAL_TIM_PWM_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001546:	f000 f9bf 	bl	80018c8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2204      	movs	r2, #4
 8001552:	4619      	mov	r1, r3
 8001554:	4807      	ldr	r0, [pc, #28]	@ (8001574 <MX_TIM2_Init+0x104>)
 8001556:	f004 f9b7 	bl	80058c8 <HAL_TIM_PWM_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8001560:	f000 f9b2 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001564:	4803      	ldr	r0, [pc, #12]	@ (8001574 <MX_TIM2_Init+0x104>)
 8001566:	f000 fa9f 	bl	8001aa8 <HAL_TIM_MspPostInit>

}
 800156a:	bf00      	nop
 800156c:	3738      	adds	r7, #56	@ 0x38
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000340 	.word	0x20000340

08001578 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	@ 0x30
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	2224      	movs	r2, #36	@ 0x24
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f00a fc19 	bl	800bdbe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001594:	4b20      	ldr	r3, [pc, #128]	@ (8001618 <MX_TIM3_Init+0xa0>)
 8001596:	4a21      	ldr	r2, [pc, #132]	@ (800161c <MX_TIM3_Init+0xa4>)
 8001598:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800159a:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <MX_TIM3_Init+0xa0>)
 800159c:	2200      	movs	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <MX_TIM3_Init+0xa0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001618 <MX_TIM3_Init+0xa0>)
 80015a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <MX_TIM3_Init+0xa0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b4:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <MX_TIM3_Init+0xa0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015ba:	2303      	movs	r3, #3
 80015bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015c2:	2301      	movs	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015d2:	2301      	movs	r3, #1
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	4619      	mov	r1, r3
 80015e4:	480c      	ldr	r0, [pc, #48]	@ (8001618 <MX_TIM3_Init+0xa0>)
 80015e6:	f004 f83b 	bl	8005660 <HAL_TIM_Encoder_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80015f0:	f000 f96a 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	4619      	mov	r1, r3
 8001600:	4805      	ldr	r0, [pc, #20]	@ (8001618 <MX_TIM3_Init+0xa0>)
 8001602:	f004 fdc3 	bl	800618c <HAL_TIMEx_MasterConfigSynchronization>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800160c:	f000 f95c 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	3730      	adds	r7, #48	@ 0x30
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000388 	.word	0x20000388
 800161c:	40000400 	.word	0x40000400

08001620 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001624:	4b11      	ldr	r3, [pc, #68]	@ (800166c <MX_USART1_UART_Init+0x4c>)
 8001626:	4a12      	ldr	r2, [pc, #72]	@ (8001670 <MX_USART1_UART_Init+0x50>)
 8001628:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800162a:	4b10      	ldr	r3, [pc, #64]	@ (800166c <MX_USART1_UART_Init+0x4c>)
 800162c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001630:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <MX_USART1_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <MX_USART1_UART_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800163e:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <MX_USART1_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b09      	ldr	r3, [pc, #36]	@ (800166c <MX_USART1_UART_Init+0x4c>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b08      	ldr	r3, [pc, #32]	@ (800166c <MX_USART1_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <MX_USART1_UART_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001656:	4805      	ldr	r0, [pc, #20]	@ (800166c <MX_USART1_UART_Init+0x4c>)
 8001658:	f004 fe06 	bl	8006268 <HAL_UART_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001662:	f000 f931 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200003d0 	.word	0x200003d0
 8001670:	40011000 	.word	0x40011000

08001674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	@ 0x28
 8001678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
 8001688:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b3b      	ldr	r3, [pc, #236]	@ (800177c <MX_GPIO_Init+0x108>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a3a      	ldr	r2, [pc, #232]	@ (800177c <MX_GPIO_Init+0x108>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b38      	ldr	r3, [pc, #224]	@ (800177c <MX_GPIO_Init+0x108>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b34      	ldr	r3, [pc, #208]	@ (800177c <MX_GPIO_Init+0x108>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a33      	ldr	r2, [pc, #204]	@ (800177c <MX_GPIO_Init+0x108>)
 80016b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b31      	ldr	r3, [pc, #196]	@ (800177c <MX_GPIO_Init+0x108>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	4b2d      	ldr	r3, [pc, #180]	@ (800177c <MX_GPIO_Init+0x108>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a2c      	ldr	r2, [pc, #176]	@ (800177c <MX_GPIO_Init+0x108>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b2a      	ldr	r3, [pc, #168]	@ (800177c <MX_GPIO_Init+0x108>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	4b26      	ldr	r3, [pc, #152]	@ (800177c <MX_GPIO_Init+0x108>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	4a25      	ldr	r2, [pc, #148]	@ (800177c <MX_GPIO_Init+0x108>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ee:	4b23      	ldr	r3, [pc, #140]	@ (800177c <MX_GPIO_Init+0x108>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001700:	481f      	ldr	r0, [pc, #124]	@ (8001780 <MX_GPIO_Init+0x10c>)
 8001702:	f000 ff7d 	bl	8002600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	2120      	movs	r1, #32
 800170a:	481e      	ldr	r0, [pc, #120]	@ (8001784 <MX_GPIO_Init+0x110>)
 800170c:	f000 ff78 	bl	8002600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	f241 0130 	movw	r1, #4144	@ 0x1030
 8001716:	481c      	ldr	r0, [pc, #112]	@ (8001788 <MX_GPIO_Init+0x114>)
 8001718:	f000 ff72 	bl	8002600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800171c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001722:	2301      	movs	r3, #1
 8001724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	4812      	ldr	r0, [pc, #72]	@ (8001780 <MX_GPIO_Init+0x10c>)
 8001736:	f000 fddf 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800173a:	2320      	movs	r3, #32
 800173c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173e:	2301      	movs	r3, #1
 8001740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	480c      	ldr	r0, [pc, #48]	@ (8001784 <MX_GPIO_Init+0x110>)
 8001752:	f000 fdd1 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_4|GPIO_PIN_5;
 8001756:	f241 0330 	movw	r3, #4144	@ 0x1030
 800175a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175c:	2301      	movs	r3, #1
 800175e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	4806      	ldr	r0, [pc, #24]	@ (8001788 <MX_GPIO_Init+0x114>)
 8001770:	f000 fdc2 	bl	80022f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001774:	bf00      	nop
 8001776:	3728      	adds	r7, #40	@ 0x28
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800
 8001780:	40020800 	.word	0x40020800
 8001784:	40020000 	.word	0x40020000
 8001788:	40020400 	.word	0x40020400

0800178c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a44      	ldr	r2, [pc, #272]	@ (80018ac <HAL_UART_RxCpltCallback+0x120>)
 800179a:	4293      	cmp	r3, r2
 800179c:	f040 8082 	bne.w	80018a4 <HAL_UART_RxCpltCallback+0x118>
  {
    if(rxData==78) // Ascii value of 'N' is 78 (N for NO)
 80017a0:	4b43      	ldr	r3, [pc, #268]	@ (80018b0 <HAL_UART_RxCpltCallback+0x124>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b4e      	cmp	r3, #78	@ 0x4e
 80017a6:	d10a      	bne.n	80017be <HAL_UART_RxCpltCallback+0x32>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80017a8:	2201      	movs	r2, #1
 80017aa:	2120      	movs	r1, #32
 80017ac:	4841      	ldr	r0, [pc, #260]	@ (80018b4 <HAL_UART_RxCpltCallback+0x128>)
 80017ae:	f000 ff27 	bl	8002600 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2110      	movs	r1, #16
 80017b6:	483f      	ldr	r0, [pc, #252]	@ (80018b4 <HAL_UART_RxCpltCallback+0x128>)
 80017b8:	f000 ff22 	bl	8002600 <HAL_GPIO_WritePin>
 80017bc:	e06d      	b.n	800189a <HAL_UART_RxCpltCallback+0x10e>

    }
    else if (rxData==89) // Ascii value of 'Y' is 89 (Y for YES)
 80017be:	4b3c      	ldr	r3, [pc, #240]	@ (80018b0 <HAL_UART_RxCpltCallback+0x124>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b59      	cmp	r3, #89	@ 0x59
 80017c4:	d10a      	bne.n	80017dc <HAL_UART_RxCpltCallback+0x50>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2120      	movs	r1, #32
 80017ca:	483a      	ldr	r0, [pc, #232]	@ (80018b4 <HAL_UART_RxCpltCallback+0x128>)
 80017cc:	f000 ff18 	bl	8002600 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80017d0:	2201      	movs	r2, #1
 80017d2:	2110      	movs	r1, #16
 80017d4:	4837      	ldr	r0, [pc, #220]	@ (80018b4 <HAL_UART_RxCpltCallback+0x128>)
 80017d6:	f000 ff13 	bl	8002600 <HAL_GPIO_WritePin>
 80017da:	e05e      	b.n	800189a <HAL_UART_RxCpltCallback+0x10e>

    }
    else if (rxData==69) // Ascii value of 'E' is 89 (E for EXIT)
 80017dc:	4b34      	ldr	r3, [pc, #208]	@ (80018b0 <HAL_UART_RxCpltCallback+0x124>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b45      	cmp	r3, #69	@ 0x45
 80017e2:	d10a      	bne.n	80017fa <HAL_UART_RxCpltCallback+0x6e>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2120      	movs	r1, #32
 80017e8:	4832      	ldr	r0, [pc, #200]	@ (80018b4 <HAL_UART_RxCpltCallback+0x128>)
 80017ea:	f000 ff09 	bl	8002600 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2110      	movs	r1, #16
 80017f2:	4830      	ldr	r0, [pc, #192]	@ (80018b4 <HAL_UART_RxCpltCallback+0x128>)
 80017f4:	f000 ff04 	bl	8002600 <HAL_GPIO_WritePin>
 80017f8:	e04f      	b.n	800189a <HAL_UART_RxCpltCallback+0x10e>

    }
    else if (rxData==67) // Ascii value of 'C' (C is for calibrate)
 80017fa:	4b2d      	ldr	r3, [pc, #180]	@ (80018b0 <HAL_UART_RxCpltCallback+0x124>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b43      	cmp	r3, #67	@ 0x43
 8001800:	d103      	bne.n	800180a <HAL_UART_RxCpltCallback+0x7e>
    {
        calibrara = 1;
 8001802:	4b2d      	ldr	r3, [pc, #180]	@ (80018b8 <HAL_UART_RxCpltCallback+0x12c>)
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
 8001808:	e047      	b.n	800189a <HAL_UART_RxCpltCallback+0x10e>

    }
    else if (rxData==89) // Ascii value of 'Y' (Speed up)
 800180a:	4b29      	ldr	r3, [pc, #164]	@ (80018b0 <HAL_UART_RxCpltCallback+0x124>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b59      	cmp	r3, #89	@ 0x59
 8001810:	d118      	bne.n	8001844 <HAL_UART_RxCpltCallback+0xb8>
    {
    	if (vel > 100){
 8001812:	4b2a      	ldr	r3, [pc, #168]	@ (80018bc <HAL_UART_RxCpltCallback+0x130>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b64      	cmp	r3, #100	@ 0x64
 8001818:	d908      	bls.n	800182c <HAL_UART_RxCpltCallback+0xa0>
    		vel = 100;
 800181a:	4b28      	ldr	r3, [pc, #160]	@ (80018bc <HAL_UART_RxCpltCallback+0x130>)
 800181c:	2264      	movs	r2, #100	@ 0x64
 800181e:	701a      	strb	r2, [r3, #0]
    		Motor_SetSpeed(vel);
 8001820:	4b26      	ldr	r3, [pc, #152]	@ (80018bc <HAL_UART_RxCpltCallback+0x130>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fcfb 	bl	8001220 <Motor_SetSpeed>
 800182a:	e036      	b.n	800189a <HAL_UART_RxCpltCallback+0x10e>
    	}
    	else{
    		vel += 10;
 800182c:	4b23      	ldr	r3, [pc, #140]	@ (80018bc <HAL_UART_RxCpltCallback+0x130>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	330a      	adds	r3, #10
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4b21      	ldr	r3, [pc, #132]	@ (80018bc <HAL_UART_RxCpltCallback+0x130>)
 8001836:	701a      	strb	r2, [r3, #0]
    		Motor_SetSpeed(vel);
 8001838:	4b20      	ldr	r3, [pc, #128]	@ (80018bc <HAL_UART_RxCpltCallback+0x130>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fcef 	bl	8001220 <Motor_SetSpeed>
 8001842:	e02a      	b.n	800189a <HAL_UART_RxCpltCallback+0x10e>
    	}
    }
    else if (rxData==90) // Ascii value of 'Z' (Speed down)
 8001844:	4b1a      	ldr	r3, [pc, #104]	@ (80018b0 <HAL_UART_RxCpltCallback+0x124>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b5a      	cmp	r3, #90	@ 0x5a
 800184a:	d10b      	bne.n	8001864 <HAL_UART_RxCpltCallback+0xd8>
    	if (vel < 0){
    		vel = 0;
    		Motor_SetSpeed(vel);
    	}
    	else{
    		vel -= 10;
 800184c:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <HAL_UART_RxCpltCallback+0x130>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	3b0a      	subs	r3, #10
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <HAL_UART_RxCpltCallback+0x130>)
 8001856:	701a      	strb	r2, [r3, #0]
    		Motor_SetSpeed(vel);
 8001858:	4b18      	ldr	r3, [pc, #96]	@ (80018bc <HAL_UART_RxCpltCallback+0x130>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fcdf 	bl	8001220 <Motor_SetSpeed>
 8001862:	e01a      	b.n	800189a <HAL_UART_RxCpltCallback+0x10e>
    	}
    }
    else if (rxData==71) // Ascii value of 'G' (Speed down)
 8001864:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <HAL_UART_RxCpltCallback+0x124>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b47      	cmp	r3, #71	@ 0x47
 800186a:	d116      	bne.n	800189a <HAL_UART_RxCpltCallback+0x10e>
    {
    	if (posicion < 9000){
 800186c:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <HAL_UART_RxCpltCallback+0x134>)
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	f242 3227 	movw	r2, #8999	@ 0x2327
 8001874:	4293      	cmp	r3, r2
 8001876:	d808      	bhi.n	800188a <HAL_UART_RxCpltCallback+0xfe>
    		vel = 10;
 8001878:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <HAL_UART_RxCpltCallback+0x130>)
 800187a:	220a      	movs	r2, #10
 800187c:	701a      	strb	r2, [r3, #0]
    		Motor_SetSpeed(vel);
 800187e:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <HAL_UART_RxCpltCallback+0x130>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fccc 	bl	8001220 <Motor_SetSpeed>
 8001888:	e007      	b.n	800189a <HAL_UART_RxCpltCallback+0x10e>
    	}
    	else{
    		vel =0;
 800188a:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <HAL_UART_RxCpltCallback+0x130>)
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
    		Motor_SetSpeed(vel);
 8001890:	4b0a      	ldr	r3, [pc, #40]	@ (80018bc <HAL_UART_RxCpltCallback+0x130>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fcc3 	bl	8001220 <Motor_SetSpeed>
    	}
    }
    HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 800189a:	2201      	movs	r2, #1
 800189c:	4904      	ldr	r1, [pc, #16]	@ (80018b0 <HAL_UART_RxCpltCallback+0x124>)
 800189e:	4809      	ldr	r0, [pc, #36]	@ (80018c4 <HAL_UART_RxCpltCallback+0x138>)
 80018a0:	f004 fdbd 	bl	800641e <HAL_UART_Receive_IT>
  }
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40011000 	.word	0x40011000
 80018b0:	20000418 	.word	0x20000418
 80018b4:	40020400 	.word	0x40020400
 80018b8:	2000041c 	.word	0x2000041c
 80018bc:	200002ea 	.word	0x200002ea
 80018c0:	2000041a 	.word	0x2000041a
 80018c4:	200003d0 	.word	0x200003d0

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <Error_Handler+0x8>

080018d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <HAL_MspInit+0x4c>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001920 <HAL_MspInit+0x4c>)
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <HAL_MspInit+0x4c>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <HAL_MspInit+0x4c>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	4a08      	ldr	r2, [pc, #32]	@ (8001920 <HAL_MspInit+0x4c>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	@ 0x40
 8001906:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_MspInit+0x4c>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800

08001924 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	@ 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a22      	ldr	r2, [pc, #136]	@ (80019cc <HAL_I2C_MspInit+0xa8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d13d      	bne.n	80019c2 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	4b21      	ldr	r3, [pc, #132]	@ (80019d0 <HAL_I2C_MspInit+0xac>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	4a20      	ldr	r2, [pc, #128]	@ (80019d0 <HAL_I2C_MspInit+0xac>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6313      	str	r3, [r2, #48]	@ 0x30
 8001956:	4b1e      	ldr	r3, [pc, #120]	@ (80019d0 <HAL_I2C_MspInit+0xac>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001962:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001968:	2312      	movs	r3, #18
 800196a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001974:	2304      	movs	r3, #4
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4619      	mov	r1, r3
 800197e:	4815      	ldr	r0, [pc, #84]	@ (80019d4 <HAL_I2C_MspInit+0xb0>)
 8001980:	f000 fcba 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001984:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800198a:	2312      	movs	r3, #18
 800198c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001996:	2309      	movs	r3, #9
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	480c      	ldr	r0, [pc, #48]	@ (80019d4 <HAL_I2C_MspInit+0xb0>)
 80019a2:	f000 fca9 	bl	80022f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <HAL_I2C_MspInit+0xac>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	4a08      	ldr	r2, [pc, #32]	@ (80019d0 <HAL_I2C_MspInit+0xac>)
 80019b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b6:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <HAL_I2C_MspInit+0xac>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80019c2:	bf00      	nop
 80019c4:	3728      	adds	r7, #40	@ 0x28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40005800 	.word	0x40005800
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020400 	.word	0x40020400

080019d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019e8:	d10d      	bne.n	8001a06 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <HAL_TIM_Base_MspInit+0x3c>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	4a08      	ldr	r2, [pc, #32]	@ (8001a14 <HAL_TIM_Base_MspInit+0x3c>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019fa:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <HAL_TIM_Base_MspInit+0x3c>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800

08001a18 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	@ 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a19      	ldr	r2, [pc, #100]	@ (8001a9c <HAL_TIM_Encoder_MspInit+0x84>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d12b      	bne.n	8001a92 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b18      	ldr	r3, [pc, #96]	@ (8001aa0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	4a17      	ldr	r2, [pc, #92]	@ (8001aa0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a10      	ldr	r2, [pc, #64]	@ (8001aa0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a72:	23c0      	movs	r3, #192	@ 0xc0
 8001a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a82:	2302      	movs	r3, #2
 8001a84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	@ (8001aa4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a8e:	f000 fc33 	bl	80022f8 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001a92:	bf00      	nop
 8001a94:	3728      	adds	r7, #40	@ 0x28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40000400 	.word	0x40000400
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020000 	.word	0x40020000

08001aa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	@ 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ac8:	d13b      	bne.n	8001b42 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	4b1f      	ldr	r3, [pc, #124]	@ (8001b4c <HAL_TIM_MspPostInit+0xa4>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b4c <HAL_TIM_MspPostInit+0xa4>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ada:	4b1c      	ldr	r3, [pc, #112]	@ (8001b4c <HAL_TIM_MspPostInit+0xa4>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <HAL_TIM_MspPostInit+0xa4>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	4a17      	ldr	r2, [pc, #92]	@ (8001b4c <HAL_TIM_MspPostInit+0xa4>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <HAL_TIM_MspPostInit+0xa4>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b02:	2301      	movs	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b12:	2301      	movs	r3, #1
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	480c      	ldr	r0, [pc, #48]	@ (8001b50 <HAL_TIM_MspPostInit+0xa8>)
 8001b1e:	f000 fbeb 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b22:	2308      	movs	r3, #8
 8001b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b32:	2301      	movs	r3, #1
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	@ (8001b54 <HAL_TIM_MspPostInit+0xac>)
 8001b3e:	f000 fbdb 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	@ 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020000 	.word	0x40020000
 8001b54:	40020400 	.word	0x40020400

08001b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	@ 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a1d      	ldr	r2, [pc, #116]	@ (8001bec <HAL_UART_MspInit+0x94>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d134      	bne.n	8001be4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf0 <HAL_UART_MspInit+0x98>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b82:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf0 <HAL_UART_MspInit+0x98>)
 8001b84:	f043 0310 	orr.w	r3, r3, #16
 8001b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b8a:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <HAL_UART_MspInit+0x98>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <HAL_UART_MspInit+0x98>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	4a14      	ldr	r2, [pc, #80]	@ (8001bf0 <HAL_UART_MspInit+0x98>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba6:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <HAL_UART_MspInit+0x98>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bb2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bc4:	2307      	movs	r3, #7
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4809      	ldr	r0, [pc, #36]	@ (8001bf4 <HAL_UART_MspInit+0x9c>)
 8001bd0:	f000 fb92 	bl	80022f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2025      	movs	r0, #37	@ 0x25
 8001bda:	f000 fac4 	bl	8002166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bde:	2025      	movs	r0, #37	@ 0x25
 8001be0:	f000 fadd 	bl	800219e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001be4:	bf00      	nop
 8001be6:	3728      	adds	r7, #40	@ 0x28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40011000 	.word	0x40011000
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020000 	.word	0x40020000

08001bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <NMI_Handler+0x4>

08001c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <HardFault_Handler+0x4>

08001c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <MemManage_Handler+0x4>

08001c10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <BusFault_Handler+0x4>

08001c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <UsageFault_Handler+0x4>

08001c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c4e:	f000 f96b 	bl	8001f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c5c:	4802      	ldr	r0, [pc, #8]	@ (8001c68 <USART1_IRQHandler+0x10>)
 8001c5e:	f004 fc03 	bl	8006468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200003d0 	.word	0x200003d0

08001c6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c70:	4802      	ldr	r0, [pc, #8]	@ (8001c7c <OTG_FS_IRQHandler+0x10>)
 8001c72:	f001 fe37 	bl	80038e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20001908 	.word	0x20001908

08001c80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return 1;
 8001c84:	2301      	movs	r3, #1
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <_kill>:

int _kill(int pid, int sig)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c9a:	f00a f8e3 	bl	800be64 <__errno>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2216      	movs	r2, #22
 8001ca2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_exit>:

void _exit (int status)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ffe7 	bl	8001c90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cc2:	bf00      	nop
 8001cc4:	e7fd      	b.n	8001cc2 <_exit+0x12>

08001cc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	e00a      	b.n	8001cee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cd8:	f3af 8000 	nop.w
 8001cdc:	4601      	mov	r1, r0
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	60ba      	str	r2, [r7, #8]
 8001ce4:	b2ca      	uxtb	r2, r1
 8001ce6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	dbf0      	blt.n	8001cd8 <_read+0x12>
  }

  return len;
 8001cf6:	687b      	ldr	r3, [r7, #4]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	e009      	b.n	8001d26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	60ba      	str	r2, [r7, #8]
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3301      	adds	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	dbf1      	blt.n	8001d12 <_write+0x12>
  }
  return len;
 8001d2e:	687b      	ldr	r3, [r7, #4]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_close>:

int _close(int file)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d60:	605a      	str	r2, [r3, #4]
  return 0;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_isatty>:

int _isatty(int file)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d78:	2301      	movs	r3, #1
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da8:	4a14      	ldr	r2, [pc, #80]	@ (8001dfc <_sbrk+0x5c>)
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <_sbrk+0x60>)
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db4:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <_sbrk+0x64>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	@ (8001e08 <_sbrk+0x68>)
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc2:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d207      	bcs.n	8001de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd0:	f00a f848 	bl	800be64 <__errno>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	e009      	b.n	8001df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de0:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de6:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a05      	ldr	r2, [pc, #20]	@ (8001e04 <_sbrk+0x64>)
 8001df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20020000 	.word	0x20020000
 8001e00:	00000400 	.word	0x00000400
 8001e04:	20000420 	.word	0x20000420
 8001e08:	20002158 	.word	0x20002158

08001e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <SystemInit+0x20>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e16:	4a05      	ldr	r2, [pc, #20]	@ (8001e2c <SystemInit+0x20>)
 8001e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e34:	f7ff ffea 	bl	8001e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e38:	480c      	ldr	r0, [pc, #48]	@ (8001e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e3a:	490d      	ldr	r1, [pc, #52]	@ (8001e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e40:	e002      	b.n	8001e48 <LoopCopyDataInit>

08001e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e46:	3304      	adds	r3, #4

08001e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e4c:	d3f9      	bcc.n	8001e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e50:	4c0a      	ldr	r4, [pc, #40]	@ (8001e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e54:	e001      	b.n	8001e5a <LoopFillZerobss>

08001e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e58:	3204      	adds	r2, #4

08001e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e5c:	d3fb      	bcc.n	8001e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e5e:	f00a f807 	bl	800be70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e62:	f7ff fa01 	bl	8001268 <main>
  bx  lr    
 8001e66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e70:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001e74:	0800e8d8 	.word	0x0800e8d8
  ldr r2, =_sbss
 8001e78:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001e7c:	20002158 	.word	0x20002158

08001e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e80:	e7fe      	b.n	8001e80 <ADC_IRQHandler>
	...

08001e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e88:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec4 <HAL_Init+0x40>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec4 <HAL_Init+0x40>)
 8001e8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <HAL_Init+0x40>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec4 <HAL_Init+0x40>)
 8001e9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea0:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <HAL_Init+0x40>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	@ (8001ec4 <HAL_Init+0x40>)
 8001ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eac:	2003      	movs	r0, #3
 8001eae:	f000 f94f 	bl	8002150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eb2:	200f      	movs	r0, #15
 8001eb4:	f000 f808 	bl	8001ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb8:	f7ff fd0c 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023c00 	.word	0x40023c00

08001ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed0:	4b12      	ldr	r3, [pc, #72]	@ (8001f1c <HAL_InitTick+0x54>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <HAL_InitTick+0x58>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f967 	bl	80021ba <HAL_SYSTICK_Config>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00e      	b.n	8001f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b0f      	cmp	r3, #15
 8001efa:	d80a      	bhi.n	8001f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efc:	2200      	movs	r2, #0
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f000 f92f 	bl	8002166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f08:	4a06      	ldr	r2, [pc, #24]	@ (8001f24 <HAL_InitTick+0x5c>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e000      	b.n	8001f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	20000008 	.word	0x20000008
 8001f24:	20000004 	.word	0x20000004

08001f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <HAL_IncTick+0x20>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_IncTick+0x24>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a04      	ldr	r2, [pc, #16]	@ (8001f4c <HAL_IncTick+0x24>)
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000008 	.word	0x20000008
 8001f4c:	20000424 	.word	0x20000424

08001f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return uwTick;
 8001f54:	4b03      	ldr	r3, [pc, #12]	@ (8001f64 <HAL_GetTick+0x14>)
 8001f56:	681b      	ldr	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000424 	.word	0x20000424

08001f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff ffee 	bl	8001f50 <HAL_GetTick>
 8001f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d005      	beq.n	8001f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f82:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <HAL_Delay+0x44>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f8e:	bf00      	nop
 8001f90:	f7ff ffde 	bl	8001f50 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d8f7      	bhi.n	8001f90 <HAL_Delay+0x28>
  {
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000008 	.word	0x20000008

08001fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fe2:	4a04      	ldr	r2, [pc, #16]	@ (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	60d3      	str	r3, [r2, #12]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ffc:	4b04      	ldr	r3, [pc, #16]	@ (8002010 <__NVIC_GetPriorityGrouping+0x18>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	f003 0307 	and.w	r3, r3, #7
}
 8002006:	4618      	mov	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	2b00      	cmp	r3, #0
 8002024:	db0b      	blt.n	800203e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	f003 021f 	and.w	r2, r3, #31
 800202c:	4907      	ldr	r1, [pc, #28]	@ (800204c <__NVIC_EnableIRQ+0x38>)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	2001      	movs	r0, #1
 8002036:	fa00 f202 	lsl.w	r2, r0, r2
 800203a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000e100 	.word	0xe000e100

08002050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	6039      	str	r1, [r7, #0]
 800205a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002060:	2b00      	cmp	r3, #0
 8002062:	db0a      	blt.n	800207a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	b2da      	uxtb	r2, r3
 8002068:	490c      	ldr	r1, [pc, #48]	@ (800209c <__NVIC_SetPriority+0x4c>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	0112      	lsls	r2, r2, #4
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	440b      	add	r3, r1
 8002074:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002078:	e00a      	b.n	8002090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4908      	ldr	r1, [pc, #32]	@ (80020a0 <__NVIC_SetPriority+0x50>)
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	3b04      	subs	r3, #4
 8002088:	0112      	lsls	r2, r2, #4
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	440b      	add	r3, r1
 800208e:	761a      	strb	r2, [r3, #24]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000e100 	.word	0xe000e100
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b089      	sub	sp, #36	@ 0x24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f1c3 0307 	rsb	r3, r3, #7
 80020be:	2b04      	cmp	r3, #4
 80020c0:	bf28      	it	cs
 80020c2:	2304      	movcs	r3, #4
 80020c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3304      	adds	r3, #4
 80020ca:	2b06      	cmp	r3, #6
 80020cc:	d902      	bls.n	80020d4 <NVIC_EncodePriority+0x30>
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3b03      	subs	r3, #3
 80020d2:	e000      	b.n	80020d6 <NVIC_EncodePriority+0x32>
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	f04f 32ff 	mov.w	r2, #4294967295
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43da      	mvns	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	401a      	ands	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ec:	f04f 31ff 	mov.w	r1, #4294967295
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	fa01 f303 	lsl.w	r3, r1, r3
 80020f6:	43d9      	mvns	r1, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fc:	4313      	orrs	r3, r2
         );
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3724      	adds	r7, #36	@ 0x24
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
	...

0800210c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800211c:	d301      	bcc.n	8002122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800211e:	2301      	movs	r3, #1
 8002120:	e00f      	b.n	8002142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002122:	4a0a      	ldr	r2, [pc, #40]	@ (800214c <SysTick_Config+0x40>)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3b01      	subs	r3, #1
 8002128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800212a:	210f      	movs	r1, #15
 800212c:	f04f 30ff 	mov.w	r0, #4294967295
 8002130:	f7ff ff8e 	bl	8002050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002134:	4b05      	ldr	r3, [pc, #20]	@ (800214c <SysTick_Config+0x40>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800213a:	4b04      	ldr	r3, [pc, #16]	@ (800214c <SysTick_Config+0x40>)
 800213c:	2207      	movs	r2, #7
 800213e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	e000e010 	.word	0xe000e010

08002150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff ff29 	bl	8001fb0 <__NVIC_SetPriorityGrouping>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002166:	b580      	push	{r7, lr}
 8002168:	b086      	sub	sp, #24
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002178:	f7ff ff3e 	bl	8001ff8 <__NVIC_GetPriorityGrouping>
 800217c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	6978      	ldr	r0, [r7, #20]
 8002184:	f7ff ff8e 	bl	80020a4 <NVIC_EncodePriority>
 8002188:	4602      	mov	r2, r0
 800218a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff5d 	bl	8002050 <__NVIC_SetPriority>
}
 8002196:	bf00      	nop
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff31 	bl	8002014 <__NVIC_EnableIRQ>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ffa2 	bl	800210c <SysTick_Config>
 80021c8:	4603      	mov	r3, r0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021e0:	f7ff feb6 	bl	8001f50 <HAL_GetTick>
 80021e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d008      	beq.n	8002204 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2280      	movs	r2, #128	@ 0x80
 80021f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e052      	b.n	80022aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0216 	bic.w	r2, r2, #22
 8002212:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695a      	ldr	r2, [r3, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002222:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002228:	2b00      	cmp	r3, #0
 800222a:	d103      	bne.n	8002234 <HAL_DMA_Abort+0x62>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002230:	2b00      	cmp	r3, #0
 8002232:	d007      	beq.n	8002244 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0208 	bic.w	r2, r2, #8
 8002242:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002254:	e013      	b.n	800227e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002256:	f7ff fe7b 	bl	8001f50 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b05      	cmp	r3, #5
 8002262:	d90c      	bls.n	800227e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2220      	movs	r2, #32
 8002268:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2203      	movs	r2, #3
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e015      	b.n	80022aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1e4      	bne.n	8002256 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002290:	223f      	movs	r2, #63	@ 0x3f
 8002292:	409a      	lsls	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d004      	beq.n	80022d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2280      	movs	r2, #128	@ 0x80
 80022ca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e00c      	b.n	80022ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2205      	movs	r2, #5
 80022d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	@ 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	e159      	b.n	80025c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	429a      	cmp	r2, r3
 800232e:	f040 8148 	bne.w	80025c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b01      	cmp	r3, #1
 800233c:	d005      	beq.n	800234a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002346:	2b02      	cmp	r3, #2
 8002348:	d130      	bne.n	80023ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 0201 	and.w	r2, r3, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d017      	beq.n	80023e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d123      	bne.n	800243c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	08da      	lsrs	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3208      	adds	r2, #8
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	69b9      	ldr	r1, [r7, #24]
 8002438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0203 	and.w	r2, r3, #3
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80a2 	beq.w	80025c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b57      	ldr	r3, [pc, #348]	@ (80025e0 <HAL_GPIO_Init+0x2e8>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002486:	4a56      	ldr	r2, [pc, #344]	@ (80025e0 <HAL_GPIO_Init+0x2e8>)
 8002488:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800248c:	6453      	str	r3, [r2, #68]	@ 0x44
 800248e:	4b54      	ldr	r3, [pc, #336]	@ (80025e0 <HAL_GPIO_Init+0x2e8>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800249a:	4a52      	ldr	r2, [pc, #328]	@ (80025e4 <HAL_GPIO_Init+0x2ec>)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3302      	adds	r3, #2
 80024a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a49      	ldr	r2, [pc, #292]	@ (80025e8 <HAL_GPIO_Init+0x2f0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d019      	beq.n	80024fa <HAL_GPIO_Init+0x202>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a48      	ldr	r2, [pc, #288]	@ (80025ec <HAL_GPIO_Init+0x2f4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d013      	beq.n	80024f6 <HAL_GPIO_Init+0x1fe>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a47      	ldr	r2, [pc, #284]	@ (80025f0 <HAL_GPIO_Init+0x2f8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00d      	beq.n	80024f2 <HAL_GPIO_Init+0x1fa>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a46      	ldr	r2, [pc, #280]	@ (80025f4 <HAL_GPIO_Init+0x2fc>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d007      	beq.n	80024ee <HAL_GPIO_Init+0x1f6>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a45      	ldr	r2, [pc, #276]	@ (80025f8 <HAL_GPIO_Init+0x300>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d101      	bne.n	80024ea <HAL_GPIO_Init+0x1f2>
 80024e6:	2304      	movs	r3, #4
 80024e8:	e008      	b.n	80024fc <HAL_GPIO_Init+0x204>
 80024ea:	2307      	movs	r3, #7
 80024ec:	e006      	b.n	80024fc <HAL_GPIO_Init+0x204>
 80024ee:	2303      	movs	r3, #3
 80024f0:	e004      	b.n	80024fc <HAL_GPIO_Init+0x204>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e002      	b.n	80024fc <HAL_GPIO_Init+0x204>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <HAL_GPIO_Init+0x204>
 80024fa:	2300      	movs	r3, #0
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	f002 0203 	and.w	r2, r2, #3
 8002502:	0092      	lsls	r2, r2, #2
 8002504:	4093      	lsls	r3, r2
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800250c:	4935      	ldr	r1, [pc, #212]	@ (80025e4 <HAL_GPIO_Init+0x2ec>)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800251a:	4b38      	ldr	r3, [pc, #224]	@ (80025fc <HAL_GPIO_Init+0x304>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800253e:	4a2f      	ldr	r2, [pc, #188]	@ (80025fc <HAL_GPIO_Init+0x304>)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002544:	4b2d      	ldr	r3, [pc, #180]	@ (80025fc <HAL_GPIO_Init+0x304>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002568:	4a24      	ldr	r2, [pc, #144]	@ (80025fc <HAL_GPIO_Init+0x304>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800256e:	4b23      	ldr	r3, [pc, #140]	@ (80025fc <HAL_GPIO_Init+0x304>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002592:	4a1a      	ldr	r2, [pc, #104]	@ (80025fc <HAL_GPIO_Init+0x304>)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002598:	4b18      	ldr	r3, [pc, #96]	@ (80025fc <HAL_GPIO_Init+0x304>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025bc:	4a0f      	ldr	r2, [pc, #60]	@ (80025fc <HAL_GPIO_Init+0x304>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3301      	adds	r3, #1
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	2b0f      	cmp	r3, #15
 80025cc:	f67f aea2 	bls.w	8002314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	3724      	adds	r7, #36	@ 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40013800 	.word	0x40013800
 80025e8:	40020000 	.word	0x40020000
 80025ec:	40020400 	.word	0x40020400
 80025f0:	40020800 	.word	0x40020800
 80025f4:	40020c00 	.word	0x40020c00
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40013c00 	.word	0x40013c00

08002600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
 800260c:	4613      	mov	r3, r2
 800260e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002610:	787b      	ldrb	r3, [r7, #1]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002616:	887a      	ldrh	r2, [r7, #2]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800261c:	e003      	b.n	8002626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800261e:	887b      	ldrh	r3, [r7, #2]
 8002620:	041a      	lsls	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	619a      	str	r2, [r3, #24]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e12b      	b.n	800289e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff f962 	bl	8001924 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2224      	movs	r2, #36	@ 0x24
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0201 	bic.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002686:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002696:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002698:	f002 fe62 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 800269c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4a81      	ldr	r2, [pc, #516]	@ (80028a8 <HAL_I2C_Init+0x274>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d807      	bhi.n	80026b8 <HAL_I2C_Init+0x84>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4a80      	ldr	r2, [pc, #512]	@ (80028ac <HAL_I2C_Init+0x278>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	bf94      	ite	ls
 80026b0:	2301      	movls	r3, #1
 80026b2:	2300      	movhi	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	e006      	b.n	80026c6 <HAL_I2C_Init+0x92>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4a7d      	ldr	r2, [pc, #500]	@ (80028b0 <HAL_I2C_Init+0x27c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	bf94      	ite	ls
 80026c0:	2301      	movls	r3, #1
 80026c2:	2300      	movhi	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e0e7      	b.n	800289e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4a78      	ldr	r2, [pc, #480]	@ (80028b4 <HAL_I2C_Init+0x280>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	0c9b      	lsrs	r3, r3, #18
 80026d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4a6a      	ldr	r2, [pc, #424]	@ (80028a8 <HAL_I2C_Init+0x274>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d802      	bhi.n	8002708 <HAL_I2C_Init+0xd4>
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	3301      	adds	r3, #1
 8002706:	e009      	b.n	800271c <HAL_I2C_Init+0xe8>
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	4a69      	ldr	r2, [pc, #420]	@ (80028b8 <HAL_I2C_Init+0x284>)
 8002714:	fba2 2303 	umull	r2, r3, r2, r3
 8002718:	099b      	lsrs	r3, r3, #6
 800271a:	3301      	adds	r3, #1
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	430b      	orrs	r3, r1
 8002722:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800272e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	495c      	ldr	r1, [pc, #368]	@ (80028a8 <HAL_I2C_Init+0x274>)
 8002738:	428b      	cmp	r3, r1
 800273a:	d819      	bhi.n	8002770 <HAL_I2C_Init+0x13c>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1e59      	subs	r1, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	fbb1 f3f3 	udiv	r3, r1, r3
 800274a:	1c59      	adds	r1, r3, #1
 800274c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002750:	400b      	ands	r3, r1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <HAL_I2C_Init+0x138>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1e59      	subs	r1, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	fbb1 f3f3 	udiv	r3, r1, r3
 8002764:	3301      	adds	r3, #1
 8002766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800276a:	e051      	b.n	8002810 <HAL_I2C_Init+0x1dc>
 800276c:	2304      	movs	r3, #4
 800276e:	e04f      	b.n	8002810 <HAL_I2C_Init+0x1dc>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d111      	bne.n	800279c <HAL_I2C_Init+0x168>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1e58      	subs	r0, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	440b      	add	r3, r1
 8002786:	fbb0 f3f3 	udiv	r3, r0, r3
 800278a:	3301      	adds	r3, #1
 800278c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002790:	2b00      	cmp	r3, #0
 8002792:	bf0c      	ite	eq
 8002794:	2301      	moveq	r3, #1
 8002796:	2300      	movne	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	e012      	b.n	80027c2 <HAL_I2C_Init+0x18e>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1e58      	subs	r0, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	0099      	lsls	r1, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b2:	3301      	adds	r3, #1
 80027b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	bf0c      	ite	eq
 80027bc:	2301      	moveq	r3, #1
 80027be:	2300      	movne	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_I2C_Init+0x196>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e022      	b.n	8002810 <HAL_I2C_Init+0x1dc>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10e      	bne.n	80027f0 <HAL_I2C_Init+0x1bc>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1e58      	subs	r0, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6859      	ldr	r1, [r3, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	440b      	add	r3, r1
 80027e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e4:	3301      	adds	r3, #1
 80027e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027ee:	e00f      	b.n	8002810 <HAL_I2C_Init+0x1dc>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1e58      	subs	r0, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6859      	ldr	r1, [r3, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	0099      	lsls	r1, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	fbb0 f3f3 	udiv	r3, r0, r3
 8002806:	3301      	adds	r3, #1
 8002808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	6809      	ldr	r1, [r1, #0]
 8002814:	4313      	orrs	r3, r2
 8002816:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69da      	ldr	r2, [r3, #28]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800283e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6911      	ldr	r1, [r2, #16]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68d2      	ldr	r2, [r2, #12]
 800284a:	4311      	orrs	r1, r2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	430b      	orrs	r3, r1
 8002852:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695a      	ldr	r2, [r3, #20]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	000186a0 	.word	0x000186a0
 80028ac:	001e847f 	.word	0x001e847f
 80028b0:	003d08ff 	.word	0x003d08ff
 80028b4:	431bde83 	.word	0x431bde83
 80028b8:	10624dd3 	.word	0x10624dd3

080028bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	461a      	mov	r2, r3
 80028c8:	460b      	mov	r3, r1
 80028ca:	817b      	strh	r3, [r7, #10]
 80028cc:	4613      	mov	r3, r2
 80028ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028d0:	f7ff fb3e 	bl	8001f50 <HAL_GetTick>
 80028d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b20      	cmp	r3, #32
 80028e0:	f040 80e0 	bne.w	8002aa4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	2319      	movs	r3, #25
 80028ea:	2201      	movs	r2, #1
 80028ec:	4970      	ldr	r1, [pc, #448]	@ (8002ab0 <HAL_I2C_Master_Transmit+0x1f4>)
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fc7e 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028fa:	2302      	movs	r3, #2
 80028fc:	e0d3      	b.n	8002aa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_I2C_Master_Transmit+0x50>
 8002908:	2302      	movs	r3, #2
 800290a:	e0cc      	b.n	8002aa6 <HAL_I2C_Master_Transmit+0x1ea>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b01      	cmp	r3, #1
 8002920:	d007      	beq.n	8002932 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 0201 	orr.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002940:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2221      	movs	r2, #33	@ 0x21
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2210      	movs	r2, #16
 800294e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	893a      	ldrh	r2, [r7, #8]
 8002962:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4a50      	ldr	r2, [pc, #320]	@ (8002ab4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002972:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002974:	8979      	ldrh	r1, [r7, #10]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	6a3a      	ldr	r2, [r7, #32]
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 face 	bl	8002f1c <I2C_MasterRequestWrite>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e08d      	b.n	8002aa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029a0:	e066      	b.n	8002a70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	6a39      	ldr	r1, [r7, #32]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 fd3c 	bl	8003424 <I2C_WaitOnTXEFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00d      	beq.n	80029ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d107      	bne.n	80029ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e06b      	b.n	8002aa6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d2:	781a      	ldrb	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d11b      	bne.n	8002a44 <HAL_I2C_Master_Transmit+0x188>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d017      	beq.n	8002a44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	781a      	ldrb	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	6a39      	ldr	r1, [r7, #32]
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 fd33 	bl	80034b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00d      	beq.n	8002a70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d107      	bne.n	8002a6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e01a      	b.n	8002aa6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d194      	bne.n	80029a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	e000      	b.n	8002aa6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002aa4:	2302      	movs	r3, #2
  }
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	00100002 	.word	0x00100002
 8002ab4:	ffff0000 	.word	0xffff0000

08002ab8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08c      	sub	sp, #48	@ 0x30
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	4608      	mov	r0, r1
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	817b      	strh	r3, [r7, #10]
 8002aca:	460b      	mov	r3, r1
 8002acc:	813b      	strh	r3, [r7, #8]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ad2:	f7ff fa3d 	bl	8001f50 <HAL_GetTick>
 8002ad6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	f040 8214 	bne.w	8002f0e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	2319      	movs	r3, #25
 8002aec:	2201      	movs	r2, #1
 8002aee:	497b      	ldr	r1, [pc, #492]	@ (8002cdc <HAL_I2C_Mem_Read+0x224>)
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 fb7d 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
 8002afe:	e207      	b.n	8002f10 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_I2C_Mem_Read+0x56>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e200      	b.n	8002f10 <HAL_I2C_Mem_Read+0x458>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d007      	beq.n	8002b34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2222      	movs	r2, #34	@ 0x22
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2240      	movs	r2, #64	@ 0x40
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002b64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4a5b      	ldr	r2, [pc, #364]	@ (8002ce0 <HAL_I2C_Mem_Read+0x228>)
 8002b74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b76:	88f8      	ldrh	r0, [r7, #6]
 8002b78:	893a      	ldrh	r2, [r7, #8]
 8002b7a:	8979      	ldrh	r1, [r7, #10]
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	4603      	mov	r3, r0
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 fa4a 	bl	8003020 <I2C_RequestMemoryRead>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e1bc      	b.n	8002f10 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d113      	bne.n	8002bc6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	623b      	str	r3, [r7, #32]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	623b      	str	r3, [r7, #32]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	623b      	str	r3, [r7, #32]
 8002bb2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	e190      	b.n	8002ee8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d11b      	bne.n	8002c06 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	e170      	b.n	8002ee8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d11b      	bne.n	8002c46 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61bb      	str	r3, [r7, #24]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	61bb      	str	r3, [r7, #24]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	e150      	b.n	8002ee8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c5c:	e144      	b.n	8002ee8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	f200 80f1 	bhi.w	8002e4a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d123      	bne.n	8002cb8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 fc65 	bl	8003544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e145      	b.n	8002f10 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cb6:	e117      	b.n	8002ee8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d14e      	bne.n	8002d5e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	4906      	ldr	r1, [pc, #24]	@ (8002ce4 <HAL_I2C_Mem_Read+0x22c>)
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 fa90 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d008      	beq.n	8002ce8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e11a      	b.n	8002f10 <HAL_I2C_Mem_Read+0x458>
 8002cda:	bf00      	nop
 8002cdc:	00100002 	.word	0x00100002
 8002ce0:	ffff0000 	.word	0xffff0000
 8002ce4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d5c:	e0c4      	b.n	8002ee8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d64:	2200      	movs	r2, #0
 8002d66:	496c      	ldr	r1, [pc, #432]	@ (8002f18 <HAL_I2C_Mem_Read+0x460>)
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 fa41 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0cb      	b.n	8002f10 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	4955      	ldr	r1, [pc, #340]	@ (8002f18 <HAL_I2C_Mem_Read+0x460>)
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fa13 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e09d      	b.n	8002f10 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002de2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691a      	ldr	r2, [r3, #16]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e48:	e04e      	b.n	8002ee8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e4c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fb78 	bl	8003544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e058      	b.n	8002f10 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d124      	bne.n	8002ee8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d107      	bne.n	8002eb6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f47f aeb6 	bne.w	8002c5e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e000      	b.n	8002f10 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002f0e:	2302      	movs	r3, #2
  }
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3728      	adds	r7, #40	@ 0x28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	00010004 	.word	0x00010004

08002f1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	607a      	str	r2, [r7, #4]
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d006      	beq.n	8002f46 <I2C_MasterRequestWrite+0x2a>
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d003      	beq.n	8002f46 <I2C_MasterRequestWrite+0x2a>
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f44:	d108      	bne.n	8002f58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	e00b      	b.n	8002f70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5c:	2b12      	cmp	r3, #18
 8002f5e:	d107      	bne.n	8002f70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 f937 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00d      	beq.n	8002fa4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f96:	d103      	bne.n	8002fa0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e035      	b.n	8003010 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fac:	d108      	bne.n	8002fc0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fae:	897b      	ldrh	r3, [r7, #10]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002fbc:	611a      	str	r2, [r3, #16]
 8002fbe:	e01b      	b.n	8002ff8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fc0:	897b      	ldrh	r3, [r7, #10]
 8002fc2:	11db      	asrs	r3, r3, #7
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	f003 0306 	and.w	r3, r3, #6
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f063 030f 	orn	r3, r3, #15
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	490e      	ldr	r1, [pc, #56]	@ (8003018 <I2C_MasterRequestWrite+0xfc>)
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f980 	bl	80032e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e010      	b.n	8003010 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fee:	897b      	ldrh	r3, [r7, #10]
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	4907      	ldr	r1, [pc, #28]	@ (800301c <I2C_MasterRequestWrite+0x100>)
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 f970 	bl	80032e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	00010008 	.word	0x00010008
 800301c:	00010002 	.word	0x00010002

08003020 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af02      	add	r7, sp, #8
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	4608      	mov	r0, r1
 800302a:	4611      	mov	r1, r2
 800302c:	461a      	mov	r2, r3
 800302e:	4603      	mov	r3, r0
 8003030:	817b      	strh	r3, [r7, #10]
 8003032:	460b      	mov	r3, r1
 8003034:	813b      	strh	r3, [r7, #8]
 8003036:	4613      	mov	r3, r2
 8003038:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003048:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003058:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800305a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	2200      	movs	r2, #0
 8003062:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f8c2 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00d      	beq.n	800308e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003080:	d103      	bne.n	800308a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003088:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e0aa      	b.n	80031e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800308e:	897b      	ldrh	r3, [r7, #10]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800309c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	6a3a      	ldr	r2, [r7, #32]
 80030a2:	4952      	ldr	r1, [pc, #328]	@ (80031ec <I2C_RequestMemoryRead+0x1cc>)
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f91d 	bl	80032e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e097      	b.n	80031e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030cc:	6a39      	ldr	r1, [r7, #32]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f9a8 	bl	8003424 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00d      	beq.n	80030f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d107      	bne.n	80030f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e076      	b.n	80031e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d105      	bne.n	8003108 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030fc:	893b      	ldrh	r3, [r7, #8]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	611a      	str	r2, [r3, #16]
 8003106:	e021      	b.n	800314c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003108:	893b      	ldrh	r3, [r7, #8]
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	b29b      	uxth	r3, r3
 800310e:	b2da      	uxtb	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003118:	6a39      	ldr	r1, [r7, #32]
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f982 	bl	8003424 <I2C_WaitOnTXEFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00d      	beq.n	8003142 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	2b04      	cmp	r3, #4
 800312c:	d107      	bne.n	800313e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800313c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e050      	b.n	80031e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003142:	893b      	ldrh	r3, [r7, #8]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800314c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800314e:	6a39      	ldr	r1, [r7, #32]
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f967 	bl	8003424 <I2C_WaitOnTXEFlagUntilTimeout>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00d      	beq.n	8003178 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003160:	2b04      	cmp	r3, #4
 8003162:	d107      	bne.n	8003174 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003172:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e035      	b.n	80031e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003186:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	2200      	movs	r2, #0
 8003190:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f82b 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00d      	beq.n	80031bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ae:	d103      	bne.n	80031b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e013      	b.n	80031e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031bc:	897b      	ldrh	r3, [r7, #10]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ce:	6a3a      	ldr	r2, [r7, #32]
 80031d0:	4906      	ldr	r1, [pc, #24]	@ (80031ec <I2C_RequestMemoryRead+0x1cc>)
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f886 	bl	80032e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	00010002 	.word	0x00010002

080031f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	603b      	str	r3, [r7, #0]
 80031fc:	4613      	mov	r3, r2
 80031fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003200:	e048      	b.n	8003294 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003208:	d044      	beq.n	8003294 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320a:	f7fe fea1 	bl	8001f50 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d302      	bcc.n	8003220 <I2C_WaitOnFlagUntilTimeout+0x30>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d139      	bne.n	8003294 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	0c1b      	lsrs	r3, r3, #16
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b01      	cmp	r3, #1
 8003228:	d10d      	bne.n	8003246 <I2C_WaitOnFlagUntilTimeout+0x56>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	43da      	mvns	r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4013      	ands	r3, r2
 8003236:	b29b      	uxth	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	e00c      	b.n	8003260 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	43da      	mvns	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	4013      	ands	r3, r2
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	429a      	cmp	r2, r3
 8003264:	d116      	bne.n	8003294 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	f043 0220 	orr.w	r2, r3, #32
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e023      	b.n	80032dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	0c1b      	lsrs	r3, r3, #16
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	d10d      	bne.n	80032ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	43da      	mvns	r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	4013      	ands	r3, r2
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	e00c      	b.n	80032d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	43da      	mvns	r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	4013      	ands	r3, r2
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d093      	beq.n	8003202 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032f2:	e071      	b.n	80033d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003302:	d123      	bne.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003312:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800331c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003338:	f043 0204 	orr.w	r2, r3, #4
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e067      	b.n	800341c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d041      	beq.n	80033d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003354:	f7fe fdfc 	bl	8001f50 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	429a      	cmp	r2, r3
 8003362:	d302      	bcc.n	800336a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d136      	bne.n	80033d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	0c1b      	lsrs	r3, r3, #16
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	d10c      	bne.n	800338e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	43da      	mvns	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4013      	ands	r3, r2
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	bf14      	ite	ne
 8003386:	2301      	movne	r3, #1
 8003388:	2300      	moveq	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	e00b      	b.n	80033a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	43da      	mvns	r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	4013      	ands	r3, r2
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	bf14      	ite	ne
 80033a0:	2301      	movne	r3, #1
 80033a2:	2300      	moveq	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d016      	beq.n	80033d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	f043 0220 	orr.w	r2, r3, #32
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e021      	b.n	800341c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	0c1b      	lsrs	r3, r3, #16
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d10c      	bne.n	80033fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	43da      	mvns	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	4013      	ands	r3, r2
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf14      	ite	ne
 80033f4:	2301      	movne	r3, #1
 80033f6:	2300      	moveq	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	e00b      	b.n	8003414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	43da      	mvns	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4013      	ands	r3, r2
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	bf14      	ite	ne
 800340e:	2301      	movne	r3, #1
 8003410:	2300      	moveq	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	f47f af6d 	bne.w	80032f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003430:	e034      	b.n	800349c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f8e3 	bl	80035fe <I2C_IsAcknowledgeFailed>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e034      	b.n	80034ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d028      	beq.n	800349c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344a:	f7fe fd81 	bl	8001f50 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	429a      	cmp	r2, r3
 8003458:	d302      	bcc.n	8003460 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d11d      	bne.n	800349c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800346a:	2b80      	cmp	r3, #128	@ 0x80
 800346c:	d016      	beq.n	800349c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003488:	f043 0220 	orr.w	r2, r3, #32
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e007      	b.n	80034ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a6:	2b80      	cmp	r3, #128	@ 0x80
 80034a8:	d1c3      	bne.n	8003432 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034c0:	e034      	b.n	800352c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f89b 	bl	80035fe <I2C_IsAcknowledgeFailed>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e034      	b.n	800353c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d028      	beq.n	800352c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034da:	f7fe fd39 	bl	8001f50 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d302      	bcc.n	80034f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d11d      	bne.n	800352c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d016      	beq.n	800352c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003518:	f043 0220 	orr.w	r2, r3, #32
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e007      	b.n	800353c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b04      	cmp	r3, #4
 8003538:	d1c3      	bne.n	80034c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003550:	e049      	b.n	80035e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	2b10      	cmp	r3, #16
 800355e:	d119      	bne.n	8003594 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0210 	mvn.w	r2, #16
 8003568:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e030      	b.n	80035f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003594:	f7fe fcdc 	bl	8001f50 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d302      	bcc.n	80035aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d11d      	bne.n	80035e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b4:	2b40      	cmp	r3, #64	@ 0x40
 80035b6:	d016      	beq.n	80035e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f043 0220 	orr.w	r2, r3, #32
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e007      	b.n	80035f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f0:	2b40      	cmp	r3, #64	@ 0x40
 80035f2:	d1ae      	bne.n	8003552 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003614:	d11b      	bne.n	800364e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800361e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	f043 0204 	orr.w	r2, r3, #4
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af02      	add	r7, sp, #8
 8003662:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e101      	b.n	8003872 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d106      	bne.n	800368e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f007 fafd 	bl	800ac88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2203      	movs	r2, #3
 8003692:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800369c:	d102      	bne.n	80036a4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f003 ff4a 	bl	8007542 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	7c1a      	ldrb	r2, [r3, #16]
 80036b6:	f88d 2000 	strb.w	r2, [sp]
 80036ba:	3304      	adds	r3, #4
 80036bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036be:	f003 fe29 	bl	8007314 <USB_CoreInit>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0ce      	b.n	8003872 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f003 ff42 	bl	8007564 <USB_SetCurrentMode>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2202      	movs	r2, #2
 80036ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e0bf      	b.n	8003872 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	73fb      	strb	r3, [r7, #15]
 80036f6:	e04a      	b.n	800378e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036f8:	7bfa      	ldrb	r2, [r7, #15]
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	3315      	adds	r3, #21
 8003708:	2201      	movs	r2, #1
 800370a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800370c:	7bfa      	ldrb	r2, [r7, #15]
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	3314      	adds	r3, #20
 800371c:	7bfa      	ldrb	r2, [r7, #15]
 800371e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003720:	7bfa      	ldrb	r2, [r7, #15]
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	b298      	uxth	r0, r3
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	4613      	mov	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	332e      	adds	r3, #46	@ 0x2e
 8003734:	4602      	mov	r2, r0
 8003736:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003738:	7bfa      	ldrb	r2, [r7, #15]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	3318      	adds	r3, #24
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800374c:	7bfa      	ldrb	r2, [r7, #15]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	331c      	adds	r3, #28
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003760:	7bfa      	ldrb	r2, [r7, #15]
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	3320      	adds	r3, #32
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003774:	7bfa      	ldrb	r2, [r7, #15]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	3324      	adds	r3, #36	@ 0x24
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	3301      	adds	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	791b      	ldrb	r3, [r3, #4]
 8003792:	7bfa      	ldrb	r2, [r7, #15]
 8003794:	429a      	cmp	r2, r3
 8003796:	d3af      	bcc.n	80036f8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003798:	2300      	movs	r3, #0
 800379a:	73fb      	strb	r3, [r7, #15]
 800379c:	e044      	b.n	8003828 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800379e:	7bfa      	ldrb	r2, [r7, #15]
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037b4:	7bfa      	ldrb	r2, [r7, #15]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80037c6:	7bfa      	ldrb	r2, [r7, #15]
 80037c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037ca:	7bfa      	ldrb	r2, [r7, #15]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	4413      	add	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037e0:	7bfa      	ldrb	r2, [r7, #15]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037f6:	7bfa      	ldrb	r2, [r7, #15]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800380c:	7bfa      	ldrb	r2, [r7, #15]
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	3301      	adds	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	791b      	ldrb	r3, [r3, #4]
 800382c:	7bfa      	ldrb	r2, [r7, #15]
 800382e:	429a      	cmp	r2, r3
 8003830:	d3b5      	bcc.n	800379e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	7c1a      	ldrb	r2, [r3, #16]
 800383a:	f88d 2000 	strb.w	r2, [sp]
 800383e:	3304      	adds	r3, #4
 8003840:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003842:	f003 fedb 	bl	80075fc <USB_DevInit>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e00c      	b.n	8003872 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f004 ff25 	bl	80086ba <USB_DevDisconnect>

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_PCD_Start+0x1c>
 8003892:	2302      	movs	r3, #2
 8003894:	e022      	b.n	80038dc <HAL_PCD_Start+0x62>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d105      	bne.n	80038be <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f003 fe2c 	bl	8007520 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f004 fed3 	bl	8008678 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038e4:	b590      	push	{r4, r7, lr}
 80038e6:	b08d      	sub	sp, #52	@ 0x34
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f004 ff91 	bl	8008822 <USB_GetMode>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	f040 848c 	bne.w	8004220 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f004 fef5 	bl	80086fc <USB_ReadInterrupts>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 8482 	beq.w	800421e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	0a1b      	lsrs	r3, r3, #8
 8003924:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f004 fee2 	bl	80086fc <USB_ReadInterrupts>
 8003938:	4603      	mov	r3, r0
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b02      	cmp	r3, #2
 8003940:	d107      	bne.n	8003952 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695a      	ldr	r2, [r3, #20]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f002 0202 	and.w	r2, r2, #2
 8003950:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f004 fed0 	bl	80086fc <USB_ReadInterrupts>
 800395c:	4603      	mov	r3, r0
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b10      	cmp	r3, #16
 8003964:	d161      	bne.n	8003a2a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699a      	ldr	r2, [r3, #24]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0210 	bic.w	r2, r2, #16
 8003974:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	f003 020f 	and.w	r2, r3, #15
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	4413      	add	r3, r2
 8003992:	3304      	adds	r3, #4
 8003994:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	0c5b      	lsrs	r3, r3, #17
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d124      	bne.n	80039ec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d035      	beq.n	8003a1a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039bc:	b29b      	uxth	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	6a38      	ldr	r0, [r7, #32]
 80039c2:	f004 fd07 	bl	80083d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039d2:	441a      	add	r2, r3
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	695a      	ldr	r2, [r3, #20]
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	091b      	lsrs	r3, r3, #4
 80039e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039e4:	441a      	add	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	615a      	str	r2, [r3, #20]
 80039ea:	e016      	b.n	8003a1a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	0c5b      	lsrs	r3, r3, #17
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	2b06      	cmp	r3, #6
 80039f6:	d110      	bne.n	8003a1a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039fe:	2208      	movs	r2, #8
 8003a00:	4619      	mov	r1, r3
 8003a02:	6a38      	ldr	r0, [r7, #32]
 8003a04:	f004 fce6 	bl	80083d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	695a      	ldr	r2, [r3, #20]
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a14:	441a      	add	r2, r3
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699a      	ldr	r2, [r3, #24]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0210 	orr.w	r2, r2, #16
 8003a28:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f004 fe64 	bl	80086fc <USB_ReadInterrupts>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a3a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a3e:	f040 80a7 	bne.w	8003b90 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f004 fe69 	bl	8008722 <USB_ReadDevAllOutEpInterrupt>
 8003a50:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003a52:	e099      	b.n	8003b88 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 808e 	beq.w	8003b7c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	4611      	mov	r1, r2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f004 fe8d 	bl	800878a <USB_ReadDevOutEPInterrupt>
 8003a70:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00c      	beq.n	8003a96 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a88:	461a      	mov	r2, r3
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fea3 	bl	80047dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00c      	beq.n	8003aba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aac:	461a      	mov	r2, r3
 8003aae:	2308      	movs	r3, #8
 8003ab0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003ab2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 ff79 	bl	80049ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	2310      	movs	r3, #16
 8003ad4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d030      	beq.n	8003b42 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae8:	2b80      	cmp	r3, #128	@ 0x80
 8003aea:	d109      	bne.n	8003b00 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003afa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003afe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b02:	4613      	mov	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4413      	add	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	4413      	add	r3, r2
 8003b12:	3304      	adds	r3, #4
 8003b14:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	78db      	ldrb	r3, [r3, #3]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d108      	bne.n	8003b30 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2200      	movs	r2, #0
 8003b22:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	4619      	mov	r1, r3
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f007 f9a8 	bl	800ae80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2302      	movs	r3, #2
 8003b40:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b58:	461a      	mov	r2, r3
 8003b5a:	2320      	movs	r3, #32
 8003b5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d009      	beq.n	8003b7c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b74:	461a      	mov	r2, r3
 8003b76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b7a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	3301      	adds	r3, #1
 8003b80:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b84:	085b      	lsrs	r3, r3, #1
 8003b86:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f47f af62 	bne.w	8003a54 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f004 fdb1 	bl	80086fc <USB_ReadInterrupts>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ba0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ba4:	f040 80db 	bne.w	8003d5e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f004 fdd2 	bl	8008756 <USB_ReadDevAllInEpInterrupt>
 8003bb2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003bb8:	e0cd      	b.n	8003d56 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 80c2 	beq.w	8003d4a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	4611      	mov	r1, r2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f004 fdf8 	bl	80087c6 <USB_ReadDevInEPInterrupt>
 8003bd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d057      	beq.n	8003c92 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	2201      	movs	r2, #1
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	69f9      	ldr	r1, [r7, #28]
 8003bfe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c02:	4013      	ands	r3, r2
 8003c04:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c12:	461a      	mov	r2, r3
 8003c14:	2301      	movs	r3, #1
 8003c16:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	799b      	ldrb	r3, [r3, #6]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d132      	bne.n	8003c86 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c24:	4613      	mov	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	3320      	adds	r3, #32
 8003c30:	6819      	ldr	r1, [r3, #0]
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c36:	4613      	mov	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4403      	add	r3, r0
 8003c40:	331c      	adds	r3, #28
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4419      	add	r1, r3
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4403      	add	r3, r0
 8003c54:	3320      	adds	r3, #32
 8003c56:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d113      	bne.n	8003c86 <HAL_PCD_IRQHandler+0x3a2>
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	3324      	adds	r3, #36	@ 0x24
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d108      	bne.n	8003c86 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c7e:	461a      	mov	r2, r3
 8003c80:	2101      	movs	r1, #1
 8003c82:	f004 fdff 	bl	8008884 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f007 f87c 	bl	800ad8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2308      	movs	r3, #8
 8003cac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	2310      	movs	r3, #16
 8003cc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d008      	beq.n	8003ce6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2340      	movs	r3, #64	@ 0x40
 8003ce4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d023      	beq.n	8003d38 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003cf0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cf2:	6a38      	ldr	r0, [r7, #32]
 8003cf4:	f003 fde6 	bl	80078c4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	3310      	adds	r3, #16
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	4413      	add	r3, r2
 8003d08:	3304      	adds	r3, #4
 8003d0a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	78db      	ldrb	r3, [r3, #3]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d108      	bne.n	8003d26 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2200      	movs	r2, #0
 8003d18:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	4619      	mov	r1, r3
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f007 f8bf 	bl	800aea4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d32:	461a      	mov	r2, r3
 8003d34:	2302      	movs	r3, #2
 8003d36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fcbd 	bl	80046c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d52:	085b      	lsrs	r3, r3, #1
 8003d54:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f47f af2e 	bne.w	8003bba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f004 fcca 	bl	80086fc <USB_ReadInterrupts>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d72:	d122      	bne.n	8003dba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d82:	f023 0301 	bic.w	r3, r3, #1
 8003d86:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d108      	bne.n	8003da4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fea3 	bl	8004ae8 <HAL_PCDEx_LPM_Callback>
 8003da2:	e002      	b.n	8003daa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f007 f85d 	bl	800ae64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003db8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f004 fc9c 	bl	80086fc <USB_ReadInterrupts>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dce:	d112      	bne.n	8003df6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d102      	bne.n	8003de6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f007 f819 	bl	800ae18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003df4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f004 fc7e 	bl	80086fc <USB_ReadInterrupts>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e0a:	f040 80b7 	bne.w	8003f7c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	69fa      	ldr	r2, [r7, #28]
 8003e18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e1c:	f023 0301 	bic.w	r3, r3, #1
 8003e20:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2110      	movs	r1, #16
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f003 fd4b 	bl	80078c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e2e:	2300      	movs	r3, #0
 8003e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e32:	e046      	b.n	8003ec2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e40:	461a      	mov	r2, r3
 8003e42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e46:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e58:	0151      	lsls	r1, r2, #5
 8003e5a:	69fa      	ldr	r2, [r7, #28]
 8003e5c:	440a      	add	r2, r1
 8003e5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e74:	461a      	mov	r2, r3
 8003e76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e7a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e8c:	0151      	lsls	r1, r2, #5
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	440a      	add	r2, r1
 8003e92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eac:	0151      	lsls	r1, r2, #5
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	440a      	add	r2, r1
 8003eb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003eb6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003eba:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	791b      	ldrb	r3, [r3, #4]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d3b2      	bcc.n	8003e34 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003edc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003ee0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	7bdb      	ldrb	r3, [r3, #15]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d016      	beq.n	8003f18 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003efa:	f043 030b 	orr.w	r3, r3, #11
 8003efe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f10:	f043 030b 	orr.w	r3, r3, #11
 8003f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f16:	e015      	b.n	8003f44 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f26:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003f2a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003f2e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f3e:	f043 030b 	orr.w	r3, r3, #11
 8003f42:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	69fa      	ldr	r2, [r7, #28]
 8003f4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f52:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003f56:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6818      	ldr	r0, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f66:	461a      	mov	r2, r3
 8003f68:	f004 fc8c 	bl	8008884 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003f7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f004 fbbb 	bl	80086fc <USB_ReadInterrupts>
 8003f86:	4603      	mov	r3, r0
 8003f88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f90:	d123      	bne.n	8003fda <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f004 fc51 	bl	800883e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f003 fd08 	bl	80079b6 <USB_GetDevSpeed>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	461a      	mov	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681c      	ldr	r4, [r3, #0]
 8003fb2:	f001 f9c9 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8003fb6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f003 fa0c 	bl	80073dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f006 ff08 	bl	800adda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003fd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f004 fb8c 	bl	80086fc <USB_ReadInterrupts>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d10a      	bne.n	8004004 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f006 fee5 	bl	800adbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f002 0208 	and.w	r2, r2, #8
 8004002:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f004 fb77 	bl	80086fc <USB_ReadInterrupts>
 800400e:	4603      	mov	r3, r0
 8004010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004014:	2b80      	cmp	r3, #128	@ 0x80
 8004016:	d123      	bne.n	8004060 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004024:	2301      	movs	r3, #1
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
 8004028:	e014      	b.n	8004054 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800402e:	4613      	mov	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d105      	bne.n	800404e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004044:	b2db      	uxtb	r3, r3
 8004046:	4619      	mov	r1, r3
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 fb0a 	bl	8004662 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	3301      	adds	r3, #1
 8004052:	627b      	str	r3, [r7, #36]	@ 0x24
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	791b      	ldrb	r3, [r3, #4]
 8004058:	461a      	mov	r2, r3
 800405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405c:	4293      	cmp	r3, r2
 800405e:	d3e4      	bcc.n	800402a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f004 fb49 	bl	80086fc <USB_ReadInterrupts>
 800406a:	4603      	mov	r3, r0
 800406c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004070:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004074:	d13c      	bne.n	80040f0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004076:	2301      	movs	r3, #1
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24
 800407a:	e02b      	b.n	80040d4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004090:	4613      	mov	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	3318      	adds	r3, #24
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d115      	bne.n	80040ce <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80040a2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	da12      	bge.n	80040ce <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ac:	4613      	mov	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	3317      	adds	r3, #23
 80040b8:	2201      	movs	r2, #1
 80040ba:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80040bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	4619      	mov	r1, r3
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 faca 	bl	8004662 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	3301      	adds	r3, #1
 80040d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	791b      	ldrb	r3, [r3, #4]
 80040d8:	461a      	mov	r2, r3
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	4293      	cmp	r3, r2
 80040de:	d3cd      	bcc.n	800407c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695a      	ldr	r2, [r3, #20]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80040ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f004 fb01 	bl	80086fc <USB_ReadInterrupts>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004100:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004104:	d156      	bne.n	80041b4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004106:	2301      	movs	r3, #1
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
 800410a:	e045      	b.n	8004198 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004120:	4613      	mov	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d12e      	bne.n	8004192 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004134:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004136:	2b00      	cmp	r3, #0
 8004138:	da2b      	bge.n	8004192 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004146:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800414a:	429a      	cmp	r2, r3
 800414c:	d121      	bne.n	8004192 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004152:	4613      	mov	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004160:	2201      	movs	r2, #1
 8004162:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800418a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800418e:	6053      	str	r3, [r2, #4]
            break;
 8004190:	e008      	b.n	80041a4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	3301      	adds	r3, #1
 8004196:	627b      	str	r3, [r7, #36]	@ 0x24
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	791b      	ldrb	r3, [r3, #4]
 800419c:	461a      	mov	r2, r3
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d3b3      	bcc.n	800410c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695a      	ldr	r2, [r3, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80041b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f004 fa9f 	bl	80086fc <USB_ReadInterrupts>
 80041be:	4603      	mov	r3, r0
 80041c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80041c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c8:	d10a      	bne.n	80041e0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f006 fe7c 	bl	800aec8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80041de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f004 fa89 	bl	80086fc <USB_ReadInterrupts>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d115      	bne.n	8004220 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f006 fe6c 	bl	800aee4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6859      	ldr	r1, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	430a      	orrs	r2, r1
 800421a:	605a      	str	r2, [r3, #4]
 800421c:	e000      	b.n	8004220 <HAL_PCD_IRQHandler+0x93c>
      return;
 800421e:	bf00      	nop
    }
  }
}
 8004220:	3734      	adds	r7, #52	@ 0x34
 8004222:	46bd      	mov	sp, r7
 8004224:	bd90      	pop	{r4, r7, pc}

08004226 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	460b      	mov	r3, r1
 8004230:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_PCD_SetAddress+0x1a>
 800423c:	2302      	movs	r3, #2
 800423e:	e012      	b.n	8004266 <HAL_PCD_SetAddress+0x40>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	78fa      	ldrb	r2, [r7, #3]
 800424c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	78fa      	ldrb	r2, [r7, #3]
 8004254:	4611      	mov	r1, r2
 8004256:	4618      	mov	r0, r3
 8004258:	f004 f9e8 	bl	800862c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	4608      	mov	r0, r1
 8004278:	4611      	mov	r1, r2
 800427a:	461a      	mov	r2, r3
 800427c:	4603      	mov	r3, r0
 800427e:	70fb      	strb	r3, [r7, #3]
 8004280:	460b      	mov	r3, r1
 8004282:	803b      	strh	r3, [r7, #0]
 8004284:	4613      	mov	r3, r2
 8004286:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800428c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004290:	2b00      	cmp	r3, #0
 8004292:	da0f      	bge.n	80042b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	f003 020f 	and.w	r2, r3, #15
 800429a:	4613      	mov	r3, r2
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	4413      	add	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	3310      	adds	r3, #16
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	4413      	add	r3, r2
 80042a8:	3304      	adds	r3, #4
 80042aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	705a      	strb	r2, [r3, #1]
 80042b2:	e00f      	b.n	80042d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	f003 020f 	and.w	r2, r3, #15
 80042ba:	4613      	mov	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	4413      	add	r3, r2
 80042ca:	3304      	adds	r3, #4
 80042cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80042e0:	883b      	ldrh	r3, [r7, #0]
 80042e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	78ba      	ldrb	r2, [r7, #2]
 80042ee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	785b      	ldrb	r3, [r3, #1]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d004      	beq.n	8004302 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004302:	78bb      	ldrb	r3, [r7, #2]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d102      	bne.n	800430e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_PCD_EP_Open+0xae>
 8004318:	2302      	movs	r3, #2
 800431a:	e00e      	b.n	800433a <HAL_PCD_EP_Open+0xcc>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68f9      	ldr	r1, [r7, #12]
 800432a:	4618      	mov	r0, r3
 800432c:	f003 fb68 	bl	8007a00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004338:	7afb      	ldrb	r3, [r7, #11]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	460b      	mov	r3, r1
 800434c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800434e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004352:	2b00      	cmp	r3, #0
 8004354:	da0f      	bge.n	8004376 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	f003 020f 	and.w	r2, r3, #15
 800435c:	4613      	mov	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	4413      	add	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	3310      	adds	r3, #16
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	4413      	add	r3, r2
 800436a:	3304      	adds	r3, #4
 800436c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	705a      	strb	r2, [r3, #1]
 8004374:	e00f      	b.n	8004396 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004376:	78fb      	ldrb	r3, [r7, #3]
 8004378:	f003 020f 	and.w	r2, r3, #15
 800437c:	4613      	mov	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	4413      	add	r3, r2
 800438c:	3304      	adds	r3, #4
 800438e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	b2da      	uxtb	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_PCD_EP_Close+0x6e>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e00e      	b.n	80043ce <HAL_PCD_EP_Close+0x8c>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68f9      	ldr	r1, [r7, #12]
 80043be:	4618      	mov	r0, r3
 80043c0:	f003 fba6 	bl	8007b10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b086      	sub	sp, #24
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]
 80043e2:	460b      	mov	r3, r1
 80043e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043e6:	7afb      	ldrb	r3, [r7, #11]
 80043e8:	f003 020f 	and.w	r2, r3, #15
 80043ec:	4613      	mov	r3, r2
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	4413      	add	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	3304      	adds	r3, #4
 80043fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2200      	movs	r2, #0
 8004410:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2200      	movs	r2, #0
 8004416:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004418:	7afb      	ldrb	r3, [r7, #11]
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	b2da      	uxtb	r2, r3
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	799b      	ldrb	r3, [r3, #6]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d102      	bne.n	8004432 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	799b      	ldrb	r3, [r3, #6]
 800443a:	461a      	mov	r2, r3
 800443c:	6979      	ldr	r1, [r7, #20]
 800443e:	f003 fc43 	bl	8007cc8 <USB_EPStartXfer>

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	f003 020f 	and.w	r2, r3, #15
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4413      	add	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800446e:	681b      	ldr	r3, [r3, #0]
}
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	460b      	mov	r3, r1
 800448a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800448c:	7afb      	ldrb	r3, [r7, #11]
 800448e:	f003 020f 	and.w	r2, r3, #15
 8004492:	4613      	mov	r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	3310      	adds	r3, #16
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4413      	add	r3, r2
 80044a0:	3304      	adds	r3, #4
 80044a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2200      	movs	r2, #0
 80044b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2201      	movs	r2, #1
 80044ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044bc:	7afb      	ldrb	r3, [r7, #11]
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	799b      	ldrb	r3, [r3, #6]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d102      	bne.n	80044d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	799b      	ldrb	r3, [r3, #6]
 80044de:	461a      	mov	r2, r3
 80044e0:	6979      	ldr	r1, [r7, #20]
 80044e2:	f003 fbf1 	bl	8007cc8 <USB_EPStartXfer>

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	7912      	ldrb	r2, [r2, #4]
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e04f      	b.n	80045ae <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800450e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004512:	2b00      	cmp	r3, #0
 8004514:	da0f      	bge.n	8004536 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004516:	78fb      	ldrb	r3, [r7, #3]
 8004518:	f003 020f 	and.w	r2, r3, #15
 800451c:	4613      	mov	r3, r2
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	4413      	add	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	3310      	adds	r3, #16
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	4413      	add	r3, r2
 800452a:	3304      	adds	r3, #4
 800452c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2201      	movs	r2, #1
 8004532:	705a      	strb	r2, [r3, #1]
 8004534:	e00d      	b.n	8004552 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004536:	78fa      	ldrb	r2, [r7, #3]
 8004538:	4613      	mov	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	4413      	add	r3, r2
 8004548:	3304      	adds	r3, #4
 800454a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	b2da      	uxtb	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <HAL_PCD_EP_SetStall+0x82>
 800456e:	2302      	movs	r3, #2
 8004570:	e01d      	b.n	80045ae <HAL_PCD_EP_SetStall+0xbe>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68f9      	ldr	r1, [r7, #12]
 8004580:	4618      	mov	r0, r3
 8004582:	f003 ff7f 	bl	8008484 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004586:	78fb      	ldrb	r3, [r7, #3]
 8004588:	f003 030f 	and.w	r3, r3, #15
 800458c:	2b00      	cmp	r3, #0
 800458e:	d109      	bne.n	80045a4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	7999      	ldrb	r1, [r3, #6]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800459e:	461a      	mov	r2, r3
 80045a0:	f004 f970 	bl	8008884 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	460b      	mov	r3, r1
 80045c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80045c2:	78fb      	ldrb	r3, [r7, #3]
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	7912      	ldrb	r2, [r2, #4]
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d901      	bls.n	80045d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e042      	b.n	800465a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	da0f      	bge.n	80045fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	f003 020f 	and.w	r2, r3, #15
 80045e2:	4613      	mov	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	3310      	adds	r3, #16
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	4413      	add	r3, r2
 80045f0:	3304      	adds	r3, #4
 80045f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2201      	movs	r2, #1
 80045f8:	705a      	strb	r2, [r3, #1]
 80045fa:	e00f      	b.n	800461c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	f003 020f 	and.w	r2, r3, #15
 8004602:	4613      	mov	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4413      	add	r3, r2
 8004612:	3304      	adds	r3, #4
 8004614:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	b2da      	uxtb	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_PCD_EP_ClrStall+0x86>
 8004638:	2302      	movs	r3, #2
 800463a:	e00e      	b.n	800465a <HAL_PCD_EP_ClrStall+0xa4>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68f9      	ldr	r1, [r7, #12]
 800464a:	4618      	mov	r0, r3
 800464c:	f003 ff88 	bl	8008560 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b084      	sub	sp, #16
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	460b      	mov	r3, r1
 800466c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800466e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004672:	2b00      	cmp	r3, #0
 8004674:	da0c      	bge.n	8004690 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004676:	78fb      	ldrb	r3, [r7, #3]
 8004678:	f003 020f 	and.w	r2, r3, #15
 800467c:	4613      	mov	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	4413      	add	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	3310      	adds	r3, #16
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	4413      	add	r3, r2
 800468a:	3304      	adds	r3, #4
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	e00c      	b.n	80046aa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004690:	78fb      	ldrb	r3, [r7, #3]
 8004692:	f003 020f 	and.w	r2, r3, #15
 8004696:	4613      	mov	r3, r2
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	4413      	add	r3, r2
 80046a6:	3304      	adds	r3, #4
 80046a8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68f9      	ldr	r1, [r7, #12]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f003 fda7 	bl	8008204 <USB_EPStopXfer>
 80046b6:	4603      	mov	r3, r0
 80046b8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80046ba:	7afb      	ldrb	r3, [r7, #11]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08a      	sub	sp, #40	@ 0x28
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	4613      	mov	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	3310      	adds	r3, #16
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	4413      	add	r3, r2
 80046e8:	3304      	adds	r3, #4
 80046ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	695a      	ldr	r2, [r3, #20]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d901      	bls.n	80046fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e06b      	b.n	80047d4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	69fa      	ldr	r2, [r7, #28]
 800470e:	429a      	cmp	r2, r3
 8004710:	d902      	bls.n	8004718 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	3303      	adds	r3, #3
 800471c:	089b      	lsrs	r3, r3, #2
 800471e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004720:	e02a      	b.n	8004778 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	429a      	cmp	r2, r3
 8004736:	d902      	bls.n	800473e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	3303      	adds	r3, #3
 8004742:	089b      	lsrs	r3, r3, #2
 8004744:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	68d9      	ldr	r1, [r3, #12]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	b2da      	uxtb	r2, r3
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	4603      	mov	r3, r0
 800475a:	6978      	ldr	r0, [r7, #20]
 800475c:	f003 fdfc 	bl	8008358 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	441a      	add	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	695a      	ldr	r2, [r3, #20]
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	441a      	add	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	429a      	cmp	r2, r3
 800478c:	d809      	bhi.n	80047a2 <PCD_WriteEmptyTxFifo+0xde>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	695a      	ldr	r2, [r3, #20]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004796:	429a      	cmp	r2, r3
 8004798:	d203      	bcs.n	80047a2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1bf      	bne.n	8004722 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	691a      	ldr	r2, [r3, #16]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d811      	bhi.n	80047d2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	2201      	movs	r2, #1
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	43db      	mvns	r3, r3
 80047c8:	6939      	ldr	r1, [r7, #16]
 80047ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047ce:	4013      	ands	r3, r2
 80047d0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3720      	adds	r7, #32
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	333c      	adds	r3, #60	@ 0x3c
 80047f4:	3304      	adds	r3, #4
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	799b      	ldrb	r3, [r3, #6]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d17b      	bne.n	800490a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d015      	beq.n	8004848 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	4a61      	ldr	r2, [pc, #388]	@ (80049a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004820:	4293      	cmp	r3, r2
 8004822:	f240 80b9 	bls.w	8004998 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 80b3 	beq.w	8004998 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800483e:	461a      	mov	r2, r3
 8004840:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004844:	6093      	str	r3, [r2, #8]
 8004846:	e0a7      	b.n	8004998 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800485e:	461a      	mov	r2, r3
 8004860:	2320      	movs	r3, #32
 8004862:	6093      	str	r3, [r2, #8]
 8004864:	e098      	b.n	8004998 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800486c:	2b00      	cmp	r3, #0
 800486e:	f040 8093 	bne.w	8004998 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	4a4b      	ldr	r2, [pc, #300]	@ (80049a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d90f      	bls.n	800489a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004890:	461a      	mov	r2, r3
 8004892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004896:	6093      	str	r3, [r2, #8]
 8004898:	e07e      	b.n	8004998 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	4613      	mov	r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	4413      	add	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	4413      	add	r3, r2
 80048ac:	3304      	adds	r3, #4
 80048ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a1a      	ldr	r2, [r3, #32]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	0159      	lsls	r1, r3, #5
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	440b      	add	r3, r1
 80048bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c6:	1ad2      	subs	r2, r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d114      	bne.n	80048fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048e4:	461a      	mov	r2, r3
 80048e6:	2101      	movs	r1, #1
 80048e8:	f003 ffcc 	bl	8008884 <USB_EP0_OutStart>
 80048ec:	e006      	b.n	80048fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	441a      	add	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	4619      	mov	r1, r3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f006 fa26 	bl	800ad54 <HAL_PCD_DataOutStageCallback>
 8004908:	e046      	b.n	8004998 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	4a26      	ldr	r2, [pc, #152]	@ (80049a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d124      	bne.n	800495c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004928:	461a      	mov	r2, r3
 800492a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800492e:	6093      	str	r3, [r2, #8]
 8004930:	e032      	b.n	8004998 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	d008      	beq.n	800494e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004948:	461a      	mov	r2, r3
 800494a:	2320      	movs	r3, #32
 800494c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	4619      	mov	r1, r3
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f006 f9fd 	bl	800ad54 <HAL_PCD_DataOutStageCallback>
 800495a:	e01d      	b.n	8004998 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d114      	bne.n	800498c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	4613      	mov	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d108      	bne.n	800498c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004984:	461a      	mov	r2, r3
 8004986:	2100      	movs	r1, #0
 8004988:	f003 ff7c 	bl	8008884 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	4619      	mov	r1, r3
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f006 f9de 	bl	800ad54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3720      	adds	r7, #32
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	4f54300a 	.word	0x4f54300a
 80049a8:	4f54310a 	.word	0x4f54310a

080049ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	333c      	adds	r3, #60	@ 0x3c
 80049c4:	3304      	adds	r3, #4
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a15      	ldr	r2, [pc, #84]	@ (8004a34 <PCD_EP_OutSetupPacket_int+0x88>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d90e      	bls.n	8004a00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d009      	beq.n	8004a00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f8:	461a      	mov	r2, r3
 80049fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f006 f995 	bl	800ad30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4a0a      	ldr	r2, [pc, #40]	@ (8004a34 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d90c      	bls.n	8004a28 <PCD_EP_OutSetupPacket_int+0x7c>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	799b      	ldrb	r3, [r3, #6]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d108      	bne.n	8004a28 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a20:	461a      	mov	r2, r3
 8004a22:	2101      	movs	r1, #1
 8004a24:	f003 ff2e 	bl	8008884 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	4f54300a 	.word	0x4f54300a

08004a38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	70fb      	strb	r3, [r7, #3]
 8004a44:	4613      	mov	r3, r2
 8004a46:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d107      	bne.n	8004a66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a56:	883b      	ldrh	r3, [r7, #0]
 8004a58:	0419      	lsls	r1, r3, #16
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a64:	e028      	b.n	8004ab8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6c:	0c1b      	lsrs	r3, r3, #16
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	4413      	add	r3, r2
 8004a72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a74:	2300      	movs	r3, #0
 8004a76:	73fb      	strb	r3, [r7, #15]
 8004a78:	e00d      	b.n	8004a96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
 8004a80:	3340      	adds	r3, #64	@ 0x40
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	0c1b      	lsrs	r3, r3, #16
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	3301      	adds	r3, #1
 8004a94:	73fb      	strb	r3, [r7, #15]
 8004a96:	7bfa      	ldrb	r2, [r7, #15]
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d3ec      	bcc.n	8004a7a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004aa0:	883b      	ldrh	r3, [r7, #0]
 8004aa2:	0418      	lsls	r0, r3, #16
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6819      	ldr	r1, [r3, #0]
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	4302      	orrs	r2, r0
 8004ab0:	3340      	adds	r3, #64	@ 0x40
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	887a      	ldrh	r2, [r7, #2]
 8004ad8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e267      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d075      	beq.n	8004c0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b1e:	4b88      	ldr	r3, [pc, #544]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d00c      	beq.n	8004b44 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b2a:	4b85      	ldr	r3, [pc, #532]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d112      	bne.n	8004b5c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b36:	4b82      	ldr	r3, [pc, #520]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b42:	d10b      	bne.n	8004b5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b44:	4b7e      	ldr	r3, [pc, #504]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d05b      	beq.n	8004c08 <HAL_RCC_OscConfig+0x108>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d157      	bne.n	8004c08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e242      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b64:	d106      	bne.n	8004b74 <HAL_RCC_OscConfig+0x74>
 8004b66:	4b76      	ldr	r3, [pc, #472]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a75      	ldr	r2, [pc, #468]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	e01d      	b.n	8004bb0 <HAL_RCC_OscConfig+0xb0>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b7c:	d10c      	bne.n	8004b98 <HAL_RCC_OscConfig+0x98>
 8004b7e:	4b70      	ldr	r3, [pc, #448]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a6f      	ldr	r2, [pc, #444]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a6c      	ldr	r2, [pc, #432]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	e00b      	b.n	8004bb0 <HAL_RCC_OscConfig+0xb0>
 8004b98:	4b69      	ldr	r3, [pc, #420]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a68      	ldr	r2, [pc, #416]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	4b66      	ldr	r3, [pc, #408]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a65      	ldr	r2, [pc, #404]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004baa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d013      	beq.n	8004be0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb8:	f7fd f9ca 	bl	8001f50 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bc0:	f7fd f9c6 	bl	8001f50 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b64      	cmp	r3, #100	@ 0x64
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e207      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f0      	beq.n	8004bc0 <HAL_RCC_OscConfig+0xc0>
 8004bde:	e014      	b.n	8004c0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be0:	f7fd f9b6 	bl	8001f50 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be8:	f7fd f9b2 	bl	8001f50 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b64      	cmp	r3, #100	@ 0x64
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e1f3      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bfa:	4b51      	ldr	r3, [pc, #324]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f0      	bne.n	8004be8 <HAL_RCC_OscConfig+0xe8>
 8004c06:	e000      	b.n	8004c0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d063      	beq.n	8004cde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c16:	4b4a      	ldr	r3, [pc, #296]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00b      	beq.n	8004c3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c22:	4b47      	ldr	r3, [pc, #284]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d11c      	bne.n	8004c68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c2e:	4b44      	ldr	r3, [pc, #272]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d116      	bne.n	8004c68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c3a:	4b41      	ldr	r3, [pc, #260]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <HAL_RCC_OscConfig+0x152>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d001      	beq.n	8004c52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e1c7      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c52:	4b3b      	ldr	r3, [pc, #236]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4937      	ldr	r1, [pc, #220]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c66:	e03a      	b.n	8004cde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d020      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c70:	4b34      	ldr	r3, [pc, #208]	@ (8004d44 <HAL_RCC_OscConfig+0x244>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c76:	f7fd f96b 	bl	8001f50 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c7e:	f7fd f967 	bl	8001f50 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e1a8      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c90:	4b2b      	ldr	r3, [pc, #172]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9c:	4b28      	ldr	r3, [pc, #160]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	4925      	ldr	r1, [pc, #148]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	600b      	str	r3, [r1, #0]
 8004cb0:	e015      	b.n	8004cde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cb2:	4b24      	ldr	r3, [pc, #144]	@ (8004d44 <HAL_RCC_OscConfig+0x244>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fd f94a 	bl	8001f50 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cc0:	f7fd f946 	bl	8001f50 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e187      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d036      	beq.n	8004d58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d016      	beq.n	8004d20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cf2:	4b15      	ldr	r3, [pc, #84]	@ (8004d48 <HAL_RCC_OscConfig+0x248>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf8:	f7fd f92a 	bl	8001f50 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d00:	f7fd f926 	bl	8001f50 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e167      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d12:	4b0b      	ldr	r3, [pc, #44]	@ (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0f0      	beq.n	8004d00 <HAL_RCC_OscConfig+0x200>
 8004d1e:	e01b      	b.n	8004d58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d20:	4b09      	ldr	r3, [pc, #36]	@ (8004d48 <HAL_RCC_OscConfig+0x248>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d26:	f7fd f913 	bl	8001f50 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d2c:	e00e      	b.n	8004d4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d2e:	f7fd f90f 	bl	8001f50 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d907      	bls.n	8004d4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e150      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
 8004d40:	40023800 	.word	0x40023800
 8004d44:	42470000 	.word	0x42470000
 8004d48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d4c:	4b88      	ldr	r3, [pc, #544]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1ea      	bne.n	8004d2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8097 	beq.w	8004e94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d66:	2300      	movs	r3, #0
 8004d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d6a:	4b81      	ldr	r3, [pc, #516]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10f      	bne.n	8004d96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d76:	2300      	movs	r3, #0
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	4b7d      	ldr	r3, [pc, #500]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7e:	4a7c      	ldr	r2, [pc, #496]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d86:	4b7a      	ldr	r3, [pc, #488]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d92:	2301      	movs	r3, #1
 8004d94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d96:	4b77      	ldr	r3, [pc, #476]	@ (8004f74 <HAL_RCC_OscConfig+0x474>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d118      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004da2:	4b74      	ldr	r3, [pc, #464]	@ (8004f74 <HAL_RCC_OscConfig+0x474>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a73      	ldr	r2, [pc, #460]	@ (8004f74 <HAL_RCC_OscConfig+0x474>)
 8004da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dae:	f7fd f8cf 	bl	8001f50 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db6:	f7fd f8cb 	bl	8001f50 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e10c      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc8:	4b6a      	ldr	r3, [pc, #424]	@ (8004f74 <HAL_RCC_OscConfig+0x474>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0f0      	beq.n	8004db6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d106      	bne.n	8004dea <HAL_RCC_OscConfig+0x2ea>
 8004ddc:	4b64      	ldr	r3, [pc, #400]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de0:	4a63      	ldr	r2, [pc, #396]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004de8:	e01c      	b.n	8004e24 <HAL_RCC_OscConfig+0x324>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b05      	cmp	r3, #5
 8004df0:	d10c      	bne.n	8004e0c <HAL_RCC_OscConfig+0x30c>
 8004df2:	4b5f      	ldr	r3, [pc, #380]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df6:	4a5e      	ldr	r2, [pc, #376]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004df8:	f043 0304 	orr.w	r3, r3, #4
 8004dfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dfe:	4b5c      	ldr	r3, [pc, #368]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e02:	4a5b      	ldr	r2, [pc, #364]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e0a:	e00b      	b.n	8004e24 <HAL_RCC_OscConfig+0x324>
 8004e0c:	4b58      	ldr	r3, [pc, #352]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e10:	4a57      	ldr	r2, [pc, #348]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e18:	4b55      	ldr	r3, [pc, #340]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1c:	4a54      	ldr	r2, [pc, #336]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e1e:	f023 0304 	bic.w	r3, r3, #4
 8004e22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d015      	beq.n	8004e58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2c:	f7fd f890 	bl	8001f50 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e32:	e00a      	b.n	8004e4a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e34:	f7fd f88c 	bl	8001f50 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e0cb      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e4a:	4b49      	ldr	r3, [pc, #292]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0ee      	beq.n	8004e34 <HAL_RCC_OscConfig+0x334>
 8004e56:	e014      	b.n	8004e82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e58:	f7fd f87a 	bl	8001f50 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e5e:	e00a      	b.n	8004e76 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e60:	f7fd f876 	bl	8001f50 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e0b5      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e76:	4b3e      	ldr	r3, [pc, #248]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1ee      	bne.n	8004e60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d105      	bne.n	8004e94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e88:	4b39      	ldr	r3, [pc, #228]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8c:	4a38      	ldr	r2, [pc, #224]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80a1 	beq.w	8004fe0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e9e:	4b34      	ldr	r3, [pc, #208]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d05c      	beq.n	8004f64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d141      	bne.n	8004f36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb2:	4b31      	ldr	r3, [pc, #196]	@ (8004f78 <HAL_RCC_OscConfig+0x478>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb8:	f7fd f84a 	bl	8001f50 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec0:	f7fd f846 	bl	8001f50 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e087      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ed2:	4b27      	ldr	r3, [pc, #156]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f0      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69da      	ldr	r2, [r3, #28]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	019b      	lsls	r3, r3, #6
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	041b      	lsls	r3, r3, #16
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f00:	061b      	lsls	r3, r3, #24
 8004f02:	491b      	ldr	r1, [pc, #108]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f08:	4b1b      	ldr	r3, [pc, #108]	@ (8004f78 <HAL_RCC_OscConfig+0x478>)
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0e:	f7fd f81f 	bl	8001f50 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f16:	f7fd f81b 	bl	8001f50 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e05c      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f28:	4b11      	ldr	r3, [pc, #68]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCC_OscConfig+0x416>
 8004f34:	e054      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f36:	4b10      	ldr	r3, [pc, #64]	@ (8004f78 <HAL_RCC_OscConfig+0x478>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3c:	f7fd f808 	bl	8001f50 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f44:	f7fd f804 	bl	8001f50 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e045      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f56:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0x444>
 8004f62:	e03d      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d107      	bne.n	8004f7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e038      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
 8004f70:	40023800 	.word	0x40023800
 8004f74:	40007000 	.word	0x40007000
 8004f78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fec <HAL_RCC_OscConfig+0x4ec>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d028      	beq.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d121      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d11a      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004fac:	4013      	ands	r3, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d111      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc2:	085b      	lsrs	r3, r3, #1
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d107      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d001      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40023800 	.word	0x40023800

08004ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e0cc      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005004:	4b68      	ldr	r3, [pc, #416]	@ (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d90c      	bls.n	800502c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005012:	4b65      	ldr	r3, [pc, #404]	@ (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800501a:	4b63      	ldr	r3, [pc, #396]	@ (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d001      	beq.n	800502c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0b8      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d020      	beq.n	800507a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005044:	4b59      	ldr	r3, [pc, #356]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	4a58      	ldr	r2, [pc, #352]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800504e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800505c:	4b53      	ldr	r3, [pc, #332]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4a52      	ldr	r2, [pc, #328]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005068:	4b50      	ldr	r3, [pc, #320]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	494d      	ldr	r1, [pc, #308]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	4313      	orrs	r3, r2
 8005078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d044      	beq.n	8005110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d107      	bne.n	800509e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508e:	4b47      	ldr	r3, [pc, #284]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d119      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e07f      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d003      	beq.n	80050ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d107      	bne.n	80050be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ae:	4b3f      	ldr	r3, [pc, #252]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e06f      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050be:	4b3b      	ldr	r3, [pc, #236]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e067      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ce:	4b37      	ldr	r3, [pc, #220]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f023 0203 	bic.w	r2, r3, #3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	4934      	ldr	r1, [pc, #208]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050e0:	f7fc ff36 	bl	8001f50 <HAL_GetTick>
 80050e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e6:	e00a      	b.n	80050fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e8:	f7fc ff32 	bl	8001f50 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e04f      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fe:	4b2b      	ldr	r3, [pc, #172]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 020c 	and.w	r2, r3, #12
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	429a      	cmp	r2, r3
 800510e:	d1eb      	bne.n	80050e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005110:	4b25      	ldr	r3, [pc, #148]	@ (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d20c      	bcs.n	8005138 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511e:	4b22      	ldr	r3, [pc, #136]	@ (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005126:	4b20      	ldr	r3, [pc, #128]	@ (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d001      	beq.n	8005138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e032      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	d008      	beq.n	8005156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005144:	4b19      	ldr	r3, [pc, #100]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	4916      	ldr	r1, [pc, #88]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	4313      	orrs	r3, r2
 8005154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d009      	beq.n	8005176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005162:	4b12      	ldr	r3, [pc, #72]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	490e      	ldr	r1, [pc, #56]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	4313      	orrs	r3, r2
 8005174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005176:	f000 f821 	bl	80051bc <HAL_RCC_GetSysClockFreq>
 800517a:	4602      	mov	r2, r0
 800517c:	4b0b      	ldr	r3, [pc, #44]	@ (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	490a      	ldr	r1, [pc, #40]	@ (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005188:	5ccb      	ldrb	r3, [r1, r3]
 800518a:	fa22 f303 	lsr.w	r3, r2, r3
 800518e:	4a09      	ldr	r2, [pc, #36]	@ (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005192:	4b09      	ldr	r3, [pc, #36]	@ (80051b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f7fc fe96 	bl	8001ec8 <HAL_InitTick>

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40023c00 	.word	0x40023c00
 80051ac:	40023800 	.word	0x40023800
 80051b0:	0800e4cc 	.word	0x0800e4cc
 80051b4:	20000000 	.word	0x20000000
 80051b8:	20000004 	.word	0x20000004

080051bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c0:	b090      	sub	sp, #64	@ 0x40
 80051c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051d4:	4b59      	ldr	r3, [pc, #356]	@ (800533c <HAL_RCC_GetSysClockFreq+0x180>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 030c 	and.w	r3, r3, #12
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d00d      	beq.n	80051fc <HAL_RCC_GetSysClockFreq+0x40>
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	f200 80a1 	bhi.w	8005328 <HAL_RCC_GetSysClockFreq+0x16c>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <HAL_RCC_GetSysClockFreq+0x34>
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d003      	beq.n	80051f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80051ee:	e09b      	b.n	8005328 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051f0:	4b53      	ldr	r3, [pc, #332]	@ (8005340 <HAL_RCC_GetSysClockFreq+0x184>)
 80051f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80051f4:	e09b      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051f6:	4b53      	ldr	r3, [pc, #332]	@ (8005344 <HAL_RCC_GetSysClockFreq+0x188>)
 80051f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80051fa:	e098      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051fc:	4b4f      	ldr	r3, [pc, #316]	@ (800533c <HAL_RCC_GetSysClockFreq+0x180>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005204:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005206:	4b4d      	ldr	r3, [pc, #308]	@ (800533c <HAL_RCC_GetSysClockFreq+0x180>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d028      	beq.n	8005264 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005212:	4b4a      	ldr	r3, [pc, #296]	@ (800533c <HAL_RCC_GetSysClockFreq+0x180>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	099b      	lsrs	r3, r3, #6
 8005218:	2200      	movs	r2, #0
 800521a:	623b      	str	r3, [r7, #32]
 800521c:	627a      	str	r2, [r7, #36]	@ 0x24
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005224:	2100      	movs	r1, #0
 8005226:	4b47      	ldr	r3, [pc, #284]	@ (8005344 <HAL_RCC_GetSysClockFreq+0x188>)
 8005228:	fb03 f201 	mul.w	r2, r3, r1
 800522c:	2300      	movs	r3, #0
 800522e:	fb00 f303 	mul.w	r3, r0, r3
 8005232:	4413      	add	r3, r2
 8005234:	4a43      	ldr	r2, [pc, #268]	@ (8005344 <HAL_RCC_GetSysClockFreq+0x188>)
 8005236:	fba0 1202 	umull	r1, r2, r0, r2
 800523a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800523c:	460a      	mov	r2, r1
 800523e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005240:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005242:	4413      	add	r3, r2
 8005244:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005248:	2200      	movs	r2, #0
 800524a:	61bb      	str	r3, [r7, #24]
 800524c:	61fa      	str	r2, [r7, #28]
 800524e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005252:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005256:	f7fb fcff 	bl	8000c58 <__aeabi_uldivmod>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	4613      	mov	r3, r2
 8005260:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005262:	e053      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005264:	4b35      	ldr	r3, [pc, #212]	@ (800533c <HAL_RCC_GetSysClockFreq+0x180>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	099b      	lsrs	r3, r3, #6
 800526a:	2200      	movs	r2, #0
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	617a      	str	r2, [r7, #20]
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005276:	f04f 0b00 	mov.w	fp, #0
 800527a:	4652      	mov	r2, sl
 800527c:	465b      	mov	r3, fp
 800527e:	f04f 0000 	mov.w	r0, #0
 8005282:	f04f 0100 	mov.w	r1, #0
 8005286:	0159      	lsls	r1, r3, #5
 8005288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800528c:	0150      	lsls	r0, r2, #5
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	ebb2 080a 	subs.w	r8, r2, sl
 8005296:	eb63 090b 	sbc.w	r9, r3, fp
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80052a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80052aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80052ae:	ebb2 0408 	subs.w	r4, r2, r8
 80052b2:	eb63 0509 	sbc.w	r5, r3, r9
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	00eb      	lsls	r3, r5, #3
 80052c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052c4:	00e2      	lsls	r2, r4, #3
 80052c6:	4614      	mov	r4, r2
 80052c8:	461d      	mov	r5, r3
 80052ca:	eb14 030a 	adds.w	r3, r4, sl
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	eb45 030b 	adc.w	r3, r5, fp
 80052d4:	607b      	str	r3, [r7, #4]
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052e2:	4629      	mov	r1, r5
 80052e4:	028b      	lsls	r3, r1, #10
 80052e6:	4621      	mov	r1, r4
 80052e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052ec:	4621      	mov	r1, r4
 80052ee:	028a      	lsls	r2, r1, #10
 80052f0:	4610      	mov	r0, r2
 80052f2:	4619      	mov	r1, r3
 80052f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f6:	2200      	movs	r2, #0
 80052f8:	60bb      	str	r3, [r7, #8]
 80052fa:	60fa      	str	r2, [r7, #12]
 80052fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005300:	f7fb fcaa 	bl	8000c58 <__aeabi_uldivmod>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4613      	mov	r3, r2
 800530a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800530c:	4b0b      	ldr	r3, [pc, #44]	@ (800533c <HAL_RCC_GetSysClockFreq+0x180>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	0c1b      	lsrs	r3, r3, #16
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	3301      	adds	r3, #1
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800531c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800531e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005320:	fbb2 f3f3 	udiv	r3, r2, r3
 8005324:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005326:	e002      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005328:	4b05      	ldr	r3, [pc, #20]	@ (8005340 <HAL_RCC_GetSysClockFreq+0x184>)
 800532a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800532c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800532e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005330:	4618      	mov	r0, r3
 8005332:	3740      	adds	r7, #64	@ 0x40
 8005334:	46bd      	mov	sp, r7
 8005336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800533a:	bf00      	nop
 800533c:	40023800 	.word	0x40023800
 8005340:	00f42400 	.word	0x00f42400
 8005344:	017d7840 	.word	0x017d7840

08005348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800534c:	4b03      	ldr	r3, [pc, #12]	@ (800535c <HAL_RCC_GetHCLKFreq+0x14>)
 800534e:	681b      	ldr	r3, [r3, #0]
}
 8005350:	4618      	mov	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	20000000 	.word	0x20000000

08005360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005364:	f7ff fff0 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005368:	4602      	mov	r2, r0
 800536a:	4b05      	ldr	r3, [pc, #20]	@ (8005380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	0a9b      	lsrs	r3, r3, #10
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	4903      	ldr	r1, [pc, #12]	@ (8005384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005376:	5ccb      	ldrb	r3, [r1, r3]
 8005378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800537c:	4618      	mov	r0, r3
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40023800 	.word	0x40023800
 8005384:	0800e4dc 	.word	0x0800e4dc

08005388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800538c:	f7ff ffdc 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005390:	4602      	mov	r2, r0
 8005392:	4b05      	ldr	r3, [pc, #20]	@ (80053a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	0b5b      	lsrs	r3, r3, #13
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	4903      	ldr	r1, [pc, #12]	@ (80053ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800539e:	5ccb      	ldrb	r3, [r1, r3]
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40023800 	.word	0x40023800
 80053ac:	0800e4dc 	.word	0x0800e4dc

080053b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e041      	b.n	8005446 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d106      	bne.n	80053dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fc fafe 	bl	80019d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3304      	adds	r3, #4
 80053ec:	4619      	mov	r1, r3
 80053ee:	4610      	mov	r0, r2
 80053f0:	f000 fbf4 	bl	8005bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b082      	sub	sp, #8
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e041      	b.n	80054e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d106      	bne.n	800547a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f839 	bl	80054ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2202      	movs	r2, #2
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3304      	adds	r3, #4
 800548a:	4619      	mov	r1, r3
 800548c:	4610      	mov	r0, r2
 800548e:	f000 fba5 	bl	8005bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d109      	bne.n	8005524 <HAL_TIM_PWM_Start+0x24>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	bf14      	ite	ne
 800551c:	2301      	movne	r3, #1
 800551e:	2300      	moveq	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	e022      	b.n	800556a <HAL_TIM_PWM_Start+0x6a>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2b04      	cmp	r3, #4
 8005528:	d109      	bne.n	800553e <HAL_TIM_PWM_Start+0x3e>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b01      	cmp	r3, #1
 8005534:	bf14      	ite	ne
 8005536:	2301      	movne	r3, #1
 8005538:	2300      	moveq	r3, #0
 800553a:	b2db      	uxtb	r3, r3
 800553c:	e015      	b.n	800556a <HAL_TIM_PWM_Start+0x6a>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b08      	cmp	r3, #8
 8005542:	d109      	bne.n	8005558 <HAL_TIM_PWM_Start+0x58>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b01      	cmp	r3, #1
 800554e:	bf14      	ite	ne
 8005550:	2301      	movne	r3, #1
 8005552:	2300      	moveq	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	e008      	b.n	800556a <HAL_TIM_PWM_Start+0x6a>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b01      	cmp	r3, #1
 8005562:	bf14      	ite	ne
 8005564:	2301      	movne	r3, #1
 8005566:	2300      	moveq	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e068      	b.n	8005644 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d104      	bne.n	8005582 <HAL_TIM_PWM_Start+0x82>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005580:	e013      	b.n	80055aa <HAL_TIM_PWM_Start+0xaa>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b04      	cmp	r3, #4
 8005586:	d104      	bne.n	8005592 <HAL_TIM_PWM_Start+0x92>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005590:	e00b      	b.n	80055aa <HAL_TIM_PWM_Start+0xaa>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b08      	cmp	r3, #8
 8005596:	d104      	bne.n	80055a2 <HAL_TIM_PWM_Start+0xa2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055a0:	e003      	b.n	80055aa <HAL_TIM_PWM_Start+0xaa>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2202      	movs	r2, #2
 80055a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2201      	movs	r2, #1
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fdc4 	bl	8006140 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a23      	ldr	r2, [pc, #140]	@ (800564c <HAL_TIM_PWM_Start+0x14c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d107      	bne.n	80055d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a1d      	ldr	r2, [pc, #116]	@ (800564c <HAL_TIM_PWM_Start+0x14c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d018      	beq.n	800560e <HAL_TIM_PWM_Start+0x10e>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e4:	d013      	beq.n	800560e <HAL_TIM_PWM_Start+0x10e>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a19      	ldr	r2, [pc, #100]	@ (8005650 <HAL_TIM_PWM_Start+0x150>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00e      	beq.n	800560e <HAL_TIM_PWM_Start+0x10e>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a17      	ldr	r2, [pc, #92]	@ (8005654 <HAL_TIM_PWM_Start+0x154>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d009      	beq.n	800560e <HAL_TIM_PWM_Start+0x10e>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a16      	ldr	r2, [pc, #88]	@ (8005658 <HAL_TIM_PWM_Start+0x158>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d004      	beq.n	800560e <HAL_TIM_PWM_Start+0x10e>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a14      	ldr	r2, [pc, #80]	@ (800565c <HAL_TIM_PWM_Start+0x15c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d111      	bne.n	8005632 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b06      	cmp	r3, #6
 800561e:	d010      	beq.n	8005642 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005630:	e007      	b.n	8005642 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f042 0201 	orr.w	r2, r2, #1
 8005640:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40010000 	.word	0x40010000
 8005650:	40000400 	.word	0x40000400
 8005654:	40000800 	.word	0x40000800
 8005658:	40000c00 	.word	0x40000c00
 800565c:	40014000 	.word	0x40014000

08005660 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e097      	b.n	80057a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d106      	bne.n	800568e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7fc f9c5 	bl	8001a18 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2202      	movs	r2, #2
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6812      	ldr	r2, [r2, #0]
 80056a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056a4:	f023 0307 	bic.w	r3, r3, #7
 80056a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	3304      	adds	r3, #4
 80056b2:	4619      	mov	r1, r3
 80056b4:	4610      	mov	r0, r2
 80056b6:	f000 fa91 	bl	8005bdc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056e2:	f023 0303 	bic.w	r3, r3, #3
 80056e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	021b      	lsls	r3, r3, #8
 80056f2:	4313      	orrs	r3, r2
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005700:	f023 030c 	bic.w	r3, r3, #12
 8005704:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800570c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005710:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	021b      	lsls	r3, r3, #8
 800571c:	4313      	orrs	r3, r2
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	011a      	lsls	r2, r3, #4
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	031b      	lsls	r3, r3, #12
 8005730:	4313      	orrs	r3, r2
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	4313      	orrs	r3, r2
 8005736:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800573e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005746:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	4313      	orrs	r3, r2
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80057d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d110      	bne.n	80057fe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d102      	bne.n	80057e8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80057e2:	7b7b      	ldrb	r3, [r7, #13]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d001      	beq.n	80057ec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e069      	b.n	80058c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057fc:	e031      	b.n	8005862 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2b04      	cmp	r3, #4
 8005802:	d110      	bne.n	8005826 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005804:	7bbb      	ldrb	r3, [r7, #14]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d102      	bne.n	8005810 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800580a:	7b3b      	ldrb	r3, [r7, #12]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d001      	beq.n	8005814 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e055      	b.n	80058c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005824:	e01d      	b.n	8005862 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d108      	bne.n	800583e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800582c:	7bbb      	ldrb	r3, [r7, #14]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d105      	bne.n	800583e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005832:	7b7b      	ldrb	r3, [r7, #13]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d102      	bne.n	800583e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005838:	7b3b      	ldrb	r3, [r7, #12]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d001      	beq.n	8005842 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e03e      	b.n	80058c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2202      	movs	r2, #2
 8005846:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2202      	movs	r2, #2
 800584e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2202      	movs	r2, #2
 8005856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2202      	movs	r2, #2
 800585e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <HAL_TIM_Encoder_Start+0xc4>
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2b04      	cmp	r3, #4
 800586c:	d008      	beq.n	8005880 <HAL_TIM_Encoder_Start+0xd4>
 800586e:	e00f      	b.n	8005890 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2201      	movs	r2, #1
 8005876:	2100      	movs	r1, #0
 8005878:	4618      	mov	r0, r3
 800587a:	f000 fc61 	bl	8006140 <TIM_CCxChannelCmd>
      break;
 800587e:	e016      	b.n	80058ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2201      	movs	r2, #1
 8005886:	2104      	movs	r1, #4
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fc59 	bl	8006140 <TIM_CCxChannelCmd>
      break;
 800588e:	e00e      	b.n	80058ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2201      	movs	r2, #1
 8005896:	2100      	movs	r1, #0
 8005898:	4618      	mov	r0, r3
 800589a:	f000 fc51 	bl	8006140 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2201      	movs	r2, #1
 80058a4:	2104      	movs	r1, #4
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fc4a 	bl	8006140 <TIM_CCxChannelCmd>
      break;
 80058ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f042 0201 	orr.w	r2, r2, #1
 80058bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d101      	bne.n	80058e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058e2:	2302      	movs	r3, #2
 80058e4:	e0ae      	b.n	8005a44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b0c      	cmp	r3, #12
 80058f2:	f200 809f 	bhi.w	8005a34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058f6:	a201      	add	r2, pc, #4	@ (adr r2, 80058fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fc:	08005931 	.word	0x08005931
 8005900:	08005a35 	.word	0x08005a35
 8005904:	08005a35 	.word	0x08005a35
 8005908:	08005a35 	.word	0x08005a35
 800590c:	08005971 	.word	0x08005971
 8005910:	08005a35 	.word	0x08005a35
 8005914:	08005a35 	.word	0x08005a35
 8005918:	08005a35 	.word	0x08005a35
 800591c:	080059b3 	.word	0x080059b3
 8005920:	08005a35 	.word	0x08005a35
 8005924:	08005a35 	.word	0x08005a35
 8005928:	08005a35 	.word	0x08005a35
 800592c:	080059f3 	.word	0x080059f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	4618      	mov	r0, r3
 8005938:	f000 f9dc 	bl	8005cf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0208 	orr.w	r2, r2, #8
 800594a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0204 	bic.w	r2, r2, #4
 800595a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6999      	ldr	r1, [r3, #24]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	619a      	str	r2, [r3, #24]
      break;
 800596e:	e064      	b.n	8005a3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68b9      	ldr	r1, [r7, #8]
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fa22 	bl	8005dc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800598a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699a      	ldr	r2, [r3, #24]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800599a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6999      	ldr	r1, [r3, #24]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	021a      	lsls	r2, r3, #8
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	619a      	str	r2, [r3, #24]
      break;
 80059b0:	e043      	b.n	8005a3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68b9      	ldr	r1, [r7, #8]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 fa6d 	bl	8005e98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69da      	ldr	r2, [r3, #28]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f042 0208 	orr.w	r2, r2, #8
 80059cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69da      	ldr	r2, [r3, #28]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0204 	bic.w	r2, r2, #4
 80059dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69d9      	ldr	r1, [r3, #28]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	61da      	str	r2, [r3, #28]
      break;
 80059f0:	e023      	b.n	8005a3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68b9      	ldr	r1, [r7, #8]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 fab7 	bl	8005f6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69da      	ldr	r2, [r3, #28]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69da      	ldr	r2, [r3, #28]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69d9      	ldr	r1, [r3, #28]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	021a      	lsls	r2, r3, #8
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	61da      	str	r2, [r3, #28]
      break;
 8005a32:	e002      	b.n	8005a3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	75fb      	strb	r3, [r7, #23]
      break;
 8005a38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d101      	bne.n	8005a68 <HAL_TIM_ConfigClockSource+0x1c>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e0b4      	b.n	8005bd2 <HAL_TIM_ConfigClockSource+0x186>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aa0:	d03e      	beq.n	8005b20 <HAL_TIM_ConfigClockSource+0xd4>
 8005aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aa6:	f200 8087 	bhi.w	8005bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aae:	f000 8086 	beq.w	8005bbe <HAL_TIM_ConfigClockSource+0x172>
 8005ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab6:	d87f      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab8:	2b70      	cmp	r3, #112	@ 0x70
 8005aba:	d01a      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0xa6>
 8005abc:	2b70      	cmp	r3, #112	@ 0x70
 8005abe:	d87b      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac0:	2b60      	cmp	r3, #96	@ 0x60
 8005ac2:	d050      	beq.n	8005b66 <HAL_TIM_ConfigClockSource+0x11a>
 8005ac4:	2b60      	cmp	r3, #96	@ 0x60
 8005ac6:	d877      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac8:	2b50      	cmp	r3, #80	@ 0x50
 8005aca:	d03c      	beq.n	8005b46 <HAL_TIM_ConfigClockSource+0xfa>
 8005acc:	2b50      	cmp	r3, #80	@ 0x50
 8005ace:	d873      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad0:	2b40      	cmp	r3, #64	@ 0x40
 8005ad2:	d058      	beq.n	8005b86 <HAL_TIM_ConfigClockSource+0x13a>
 8005ad4:	2b40      	cmp	r3, #64	@ 0x40
 8005ad6:	d86f      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad8:	2b30      	cmp	r3, #48	@ 0x30
 8005ada:	d064      	beq.n	8005ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8005adc:	2b30      	cmp	r3, #48	@ 0x30
 8005ade:	d86b      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	d060      	beq.n	8005ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8005ae4:	2b20      	cmp	r3, #32
 8005ae6:	d867      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d05c      	beq.n	8005ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8005aec:	2b10      	cmp	r3, #16
 8005aee:	d05a      	beq.n	8005ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8005af0:	e062      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b02:	f000 fafd 	bl	8006100 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	609a      	str	r2, [r3, #8]
      break;
 8005b1e:	e04f      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b30:	f000 fae6 	bl	8006100 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b42:	609a      	str	r2, [r3, #8]
      break;
 8005b44:	e03c      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b52:	461a      	mov	r2, r3
 8005b54:	f000 fa5a 	bl	800600c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2150      	movs	r1, #80	@ 0x50
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 fab3 	bl	80060ca <TIM_ITRx_SetConfig>
      break;
 8005b64:	e02c      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b72:	461a      	mov	r2, r3
 8005b74:	f000 fa79 	bl	800606a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2160      	movs	r1, #96	@ 0x60
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 faa3 	bl	80060ca <TIM_ITRx_SetConfig>
      break;
 8005b84:	e01c      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b92:	461a      	mov	r2, r3
 8005b94:	f000 fa3a 	bl	800600c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2140      	movs	r1, #64	@ 0x40
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 fa93 	bl	80060ca <TIM_ITRx_SetConfig>
      break;
 8005ba4:	e00c      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	f000 fa8a 	bl	80060ca <TIM_ITRx_SetConfig>
      break;
 8005bb6:	e003      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	73fb      	strb	r3, [r7, #15]
      break;
 8005bbc:	e000      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a3a      	ldr	r2, [pc, #232]	@ (8005cd8 <TIM_Base_SetConfig+0xfc>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d00f      	beq.n	8005c14 <TIM_Base_SetConfig+0x38>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bfa:	d00b      	beq.n	8005c14 <TIM_Base_SetConfig+0x38>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a37      	ldr	r2, [pc, #220]	@ (8005cdc <TIM_Base_SetConfig+0x100>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d007      	beq.n	8005c14 <TIM_Base_SetConfig+0x38>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a36      	ldr	r2, [pc, #216]	@ (8005ce0 <TIM_Base_SetConfig+0x104>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d003      	beq.n	8005c14 <TIM_Base_SetConfig+0x38>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a35      	ldr	r2, [pc, #212]	@ (8005ce4 <TIM_Base_SetConfig+0x108>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d108      	bne.n	8005c26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a2b      	ldr	r2, [pc, #172]	@ (8005cd8 <TIM_Base_SetConfig+0xfc>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d01b      	beq.n	8005c66 <TIM_Base_SetConfig+0x8a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c34:	d017      	beq.n	8005c66 <TIM_Base_SetConfig+0x8a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a28      	ldr	r2, [pc, #160]	@ (8005cdc <TIM_Base_SetConfig+0x100>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d013      	beq.n	8005c66 <TIM_Base_SetConfig+0x8a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a27      	ldr	r2, [pc, #156]	@ (8005ce0 <TIM_Base_SetConfig+0x104>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00f      	beq.n	8005c66 <TIM_Base_SetConfig+0x8a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a26      	ldr	r2, [pc, #152]	@ (8005ce4 <TIM_Base_SetConfig+0x108>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00b      	beq.n	8005c66 <TIM_Base_SetConfig+0x8a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a25      	ldr	r2, [pc, #148]	@ (8005ce8 <TIM_Base_SetConfig+0x10c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d007      	beq.n	8005c66 <TIM_Base_SetConfig+0x8a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a24      	ldr	r2, [pc, #144]	@ (8005cec <TIM_Base_SetConfig+0x110>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d003      	beq.n	8005c66 <TIM_Base_SetConfig+0x8a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a23      	ldr	r2, [pc, #140]	@ (8005cf0 <TIM_Base_SetConfig+0x114>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d108      	bne.n	8005c78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8005cd8 <TIM_Base_SetConfig+0xfc>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d103      	bne.n	8005cac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d105      	bne.n	8005cca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f023 0201 	bic.w	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	611a      	str	r2, [r3, #16]
  }
}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40010000 	.word	0x40010000
 8005cdc:	40000400 	.word	0x40000400
 8005ce0:	40000800 	.word	0x40000800
 8005ce4:	40000c00 	.word	0x40000c00
 8005ce8:	40014000 	.word	0x40014000
 8005cec:	40014400 	.word	0x40014400
 8005cf0:	40014800 	.word	0x40014800

08005cf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	f023 0201 	bic.w	r2, r3, #1
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0303 	bic.w	r3, r3, #3
 8005d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f023 0302 	bic.w	r3, r3, #2
 8005d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8005dbc <TIM_OC1_SetConfig+0xc8>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d10c      	bne.n	8005d6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f023 0308 	bic.w	r3, r3, #8
 8005d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f023 0304 	bic.w	r3, r3, #4
 8005d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a13      	ldr	r2, [pc, #76]	@ (8005dbc <TIM_OC1_SetConfig+0xc8>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d111      	bne.n	8005d96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	621a      	str	r2, [r3, #32]
}
 8005db0:	bf00      	nop
 8005db2:	371c      	adds	r7, #28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	40010000 	.word	0x40010000

08005dc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	f023 0210 	bic.w	r2, r3, #16
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	021b      	lsls	r3, r3, #8
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f023 0320 	bic.w	r3, r3, #32
 8005e0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	011b      	lsls	r3, r3, #4
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8005e94 <TIM_OC2_SetConfig+0xd4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d10d      	bne.n	8005e3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	011b      	lsls	r3, r3, #4
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a15      	ldr	r2, [pc, #84]	@ (8005e94 <TIM_OC2_SetConfig+0xd4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d113      	bne.n	8005e6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	621a      	str	r2, [r3, #32]
}
 8005e86:	bf00      	nop
 8005e88:	371c      	adds	r7, #28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40010000 	.word	0x40010000

08005e98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 0303 	bic.w	r3, r3, #3
 8005ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	021b      	lsls	r3, r3, #8
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f68 <TIM_OC3_SetConfig+0xd0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d10d      	bne.n	8005f12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	021b      	lsls	r3, r3, #8
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a14      	ldr	r2, [pc, #80]	@ (8005f68 <TIM_OC3_SetConfig+0xd0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d113      	bne.n	8005f42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	621a      	str	r2, [r3, #32]
}
 8005f5c:	bf00      	nop
 8005f5e:	371c      	adds	r7, #28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	40010000 	.word	0x40010000

08005f6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b087      	sub	sp, #28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	021b      	lsls	r3, r3, #8
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	031b      	lsls	r3, r3, #12
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a10      	ldr	r2, [pc, #64]	@ (8006008 <TIM_OC4_SetConfig+0x9c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d109      	bne.n	8005fe0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	019b      	lsls	r3, r3, #6
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	621a      	str	r2, [r3, #32]
}
 8005ffa:	bf00      	nop
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	40010000 	.word	0x40010000

0800600c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	f023 0201 	bic.w	r2, r3, #1
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	4313      	orrs	r3, r2
 8006040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f023 030a 	bic.w	r3, r3, #10
 8006048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4313      	orrs	r3, r2
 8006050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	621a      	str	r2, [r3, #32]
}
 800605e:	bf00      	nop
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800606a:	b480      	push	{r7}
 800606c:	b087      	sub	sp, #28
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	f023 0210 	bic.w	r2, r3, #16
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006094:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	031b      	lsls	r3, r3, #12
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4313      	orrs	r3, r2
 800609e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80060a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b085      	sub	sp, #20
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f043 0307 	orr.w	r3, r3, #7
 80060ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	609a      	str	r2, [r3, #8]
}
 80060f4:	bf00      	nop
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
 800610c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800611a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	021a      	lsls	r2, r3, #8
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	431a      	orrs	r2, r3
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	4313      	orrs	r3, r2
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	609a      	str	r2, [r3, #8]
}
 8006134:	bf00      	nop
 8006136:	371c      	adds	r7, #28
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f003 031f 	and.w	r3, r3, #31
 8006152:	2201      	movs	r2, #1
 8006154:	fa02 f303 	lsl.w	r3, r2, r3
 8006158:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6a1a      	ldr	r2, [r3, #32]
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	43db      	mvns	r3, r3
 8006162:	401a      	ands	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a1a      	ldr	r2, [r3, #32]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f003 031f 	and.w	r3, r3, #31
 8006172:	6879      	ldr	r1, [r7, #4]
 8006174:	fa01 f303 	lsl.w	r3, r1, r3
 8006178:	431a      	orrs	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	621a      	str	r2, [r3, #32]
}
 800617e:	bf00      	nop
 8006180:	371c      	adds	r7, #28
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
	...

0800618c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800619c:	2b01      	cmp	r3, #1
 800619e:	d101      	bne.n	80061a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061a0:	2302      	movs	r3, #2
 80061a2:	e050      	b.n	8006246 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d018      	beq.n	800621a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f0:	d013      	beq.n	800621a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a18      	ldr	r2, [pc, #96]	@ (8006258 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d00e      	beq.n	800621a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a16      	ldr	r2, [pc, #88]	@ (800625c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d009      	beq.n	800621a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a15      	ldr	r2, [pc, #84]	@ (8006260 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d004      	beq.n	800621a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a13      	ldr	r2, [pc, #76]	@ (8006264 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d10c      	bne.n	8006234 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006220:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	4313      	orrs	r3, r2
 800622a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	40010000 	.word	0x40010000
 8006258:	40000400 	.word	0x40000400
 800625c:	40000800 	.word	0x40000800
 8006260:	40000c00 	.word	0x40000c00
 8006264:	40014000 	.word	0x40014000

08006268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e042      	b.n	8006300 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d106      	bne.n	8006294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7fb fc62 	bl	8001b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2224      	movs	r2, #36	@ 0x24
 8006298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fdbd 	bl	8006e2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	691a      	ldr	r2, [r3, #16]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	695a      	ldr	r2, [r3, #20]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b08a      	sub	sp, #40	@ 0x28
 800630c:	af02      	add	r7, sp, #8
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	603b      	str	r3, [r7, #0]
 8006314:	4613      	mov	r3, r2
 8006316:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b20      	cmp	r3, #32
 8006326:	d175      	bne.n	8006414 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <HAL_UART_Transmit+0x2c>
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e06e      	b.n	8006416 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2221      	movs	r2, #33	@ 0x21
 8006342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006346:	f7fb fe03 	bl	8001f50 <HAL_GetTick>
 800634a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	88fa      	ldrh	r2, [r7, #6]
 8006350:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	88fa      	ldrh	r2, [r7, #6]
 8006356:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006360:	d108      	bne.n	8006374 <HAL_UART_Transmit+0x6c>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d104      	bne.n	8006374 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800636a:	2300      	movs	r3, #0
 800636c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	61bb      	str	r3, [r7, #24]
 8006372:	e003      	b.n	800637c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006378:	2300      	movs	r3, #0
 800637a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800637c:	e02e      	b.n	80063dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2200      	movs	r2, #0
 8006386:	2180      	movs	r1, #128	@ 0x80
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 fb1f 	bl	80069cc <UART_WaitOnFlagUntilTimeout>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e03a      	b.n	8006416 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10b      	bne.n	80063be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	3302      	adds	r3, #2
 80063ba:	61bb      	str	r3, [r7, #24]
 80063bc:	e007      	b.n	80063ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	781a      	ldrb	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	3301      	adds	r3, #1
 80063cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1cb      	bne.n	800637e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2200      	movs	r2, #0
 80063ee:	2140      	movs	r1, #64	@ 0x40
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 faeb 	bl	80069cc <UART_WaitOnFlagUntilTimeout>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d005      	beq.n	8006408 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2220      	movs	r2, #32
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e006      	b.n	8006416 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	e000      	b.n	8006416 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006414:	2302      	movs	r3, #2
  }
}
 8006416:	4618      	mov	r0, r3
 8006418:	3720      	adds	r7, #32
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	60f8      	str	r0, [r7, #12]
 8006426:	60b9      	str	r1, [r7, #8]
 8006428:	4613      	mov	r3, r2
 800642a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b20      	cmp	r3, #32
 8006436:	d112      	bne.n	800645e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <HAL_UART_Receive_IT+0x26>
 800643e:	88fb      	ldrh	r3, [r7, #6]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e00b      	b.n	8006460 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800644e:	88fb      	ldrh	r3, [r7, #6]
 8006450:	461a      	mov	r2, r3
 8006452:	68b9      	ldr	r1, [r7, #8]
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 fb12 	bl	8006a7e <UART_Start_Receive_IT>
 800645a:	4603      	mov	r3, r0
 800645c:	e000      	b.n	8006460 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800645e:	2302      	movs	r3, #2
  }
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b0ba      	sub	sp, #232	@ 0xe8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800648e:	2300      	movs	r3, #0
 8006490:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006494:	2300      	movs	r3, #0
 8006496:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800649a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80064a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10f      	bne.n	80064ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <HAL_UART_IRQHandler+0x66>
 80064ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064be:	f003 0320 	and.w	r3, r3, #32
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fbf2 	bl	8006cb0 <UART_Receive_IT>
      return;
 80064cc:	e25b      	b.n	8006986 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80064ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 80de 	beq.w	8006694 <HAL_UART_IRQHandler+0x22c>
 80064d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d106      	bne.n	80064f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 80d1 	beq.w	8006694 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00b      	beq.n	8006516 <HAL_UART_IRQHandler+0xae>
 80064fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006506:	2b00      	cmp	r3, #0
 8006508:	d005      	beq.n	8006516 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800650e:	f043 0201 	orr.w	r2, r3, #1
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800651a:	f003 0304 	and.w	r3, r3, #4
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00b      	beq.n	800653a <HAL_UART_IRQHandler+0xd2>
 8006522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d005      	beq.n	800653a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006532:	f043 0202 	orr.w	r2, r3, #2
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800653a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00b      	beq.n	800655e <HAL_UART_IRQHandler+0xf6>
 8006546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d005      	beq.n	800655e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006556:	f043 0204 	orr.w	r2, r3, #4
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800655e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	2b00      	cmp	r3, #0
 8006568:	d011      	beq.n	800658e <HAL_UART_IRQHandler+0x126>
 800656a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b00      	cmp	r3, #0
 8006574:	d105      	bne.n	8006582 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d005      	beq.n	800658e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006586:	f043 0208 	orr.w	r2, r3, #8
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 81f2 	beq.w	800697c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d008      	beq.n	80065b6 <HAL_UART_IRQHandler+0x14e>
 80065a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065a8:	f003 0320 	and.w	r3, r3, #32
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fb7d 	bl	8006cb0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c0:	2b40      	cmp	r3, #64	@ 0x40
 80065c2:	bf0c      	ite	eq
 80065c4:	2301      	moveq	r3, #1
 80065c6:	2300      	movne	r3, #0
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d103      	bne.n	80065e2 <HAL_UART_IRQHandler+0x17a>
 80065da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d04f      	beq.n	8006682 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fa85 	bl	8006af2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f2:	2b40      	cmp	r3, #64	@ 0x40
 80065f4:	d141      	bne.n	800667a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3314      	adds	r3, #20
 80065fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800660c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006614:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3314      	adds	r3, #20
 800661e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006622:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006626:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800662e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800663a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1d9      	bne.n	80065f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006646:	2b00      	cmp	r3, #0
 8006648:	d013      	beq.n	8006672 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800664e:	4a7e      	ldr	r2, [pc, #504]	@ (8006848 <HAL_UART_IRQHandler+0x3e0>)
 8006650:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006656:	4618      	mov	r0, r3
 8006658:	f7fb fe2b 	bl	80022b2 <HAL_DMA_Abort_IT>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d016      	beq.n	8006690 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800666c:	4610      	mov	r0, r2
 800666e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006670:	e00e      	b.n	8006690 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f994 	bl	80069a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006678:	e00a      	b.n	8006690 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f990 	bl	80069a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006680:	e006      	b.n	8006690 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f98c 	bl	80069a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800668e:	e175      	b.n	800697c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006690:	bf00      	nop
    return;
 8006692:	e173      	b.n	800697c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006698:	2b01      	cmp	r3, #1
 800669a:	f040 814f 	bne.w	800693c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800669e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066a2:	f003 0310 	and.w	r3, r3, #16
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 8148 	beq.w	800693c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80066ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066b0:	f003 0310 	and.w	r3, r3, #16
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 8141 	beq.w	800693c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066ba:	2300      	movs	r3, #0
 80066bc:	60bb      	str	r3, [r7, #8]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	60bb      	str	r3, [r7, #8]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	60bb      	str	r3, [r7, #8]
 80066ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066da:	2b40      	cmp	r3, #64	@ 0x40
 80066dc:	f040 80b6 	bne.w	800684c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 8145 	beq.w	8006980 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066fe:	429a      	cmp	r2, r3
 8006700:	f080 813e 	bcs.w	8006980 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800670a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006716:	f000 8088 	beq.w	800682a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	330c      	adds	r3, #12
 8006720:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006728:	e853 3f00 	ldrex	r3, [r3]
 800672c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006730:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006738:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	330c      	adds	r3, #12
 8006742:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006746:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800674a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006752:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006756:	e841 2300 	strex	r3, r2, [r1]
 800675a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800675e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1d9      	bne.n	800671a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3314      	adds	r3, #20
 800676c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006776:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006778:	f023 0301 	bic.w	r3, r3, #1
 800677c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3314      	adds	r3, #20
 8006786:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800678a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800678e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006790:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006792:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006796:	e841 2300 	strex	r3, r2, [r1]
 800679a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800679c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1e1      	bne.n	8006766 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3314      	adds	r3, #20
 80067a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067ac:	e853 3f00 	ldrex	r3, [r3]
 80067b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80067b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3314      	adds	r3, #20
 80067c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80067c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80067c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80067cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80067d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e3      	bne.n	80067a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	330c      	adds	r3, #12
 80067ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067f2:	e853 3f00 	ldrex	r3, [r3]
 80067f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067fa:	f023 0310 	bic.w	r3, r3, #16
 80067fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	330c      	adds	r3, #12
 8006808:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800680c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800680e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006812:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800681a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e3      	bne.n	80067e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006824:	4618      	mov	r0, r3
 8006826:	f7fb fcd4 	bl	80021d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2202      	movs	r2, #2
 800682e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006838:	b29b      	uxth	r3, r3
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	b29b      	uxth	r3, r3
 800683e:	4619      	mov	r1, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f8b7 	bl	80069b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006846:	e09b      	b.n	8006980 <HAL_UART_IRQHandler+0x518>
 8006848:	08006bb9 	.word	0x08006bb9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006854:	b29b      	uxth	r3, r3
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006860:	b29b      	uxth	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 808e 	beq.w	8006984 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006868:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 8089 	beq.w	8006984 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	330c      	adds	r3, #12
 8006878:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006884:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006888:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	330c      	adds	r3, #12
 8006892:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006896:	647a      	str	r2, [r7, #68]	@ 0x44
 8006898:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800689c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800689e:	e841 2300 	strex	r3, r2, [r1]
 80068a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e3      	bne.n	8006872 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3314      	adds	r3, #20
 80068b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	623b      	str	r3, [r7, #32]
   return(result);
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	f023 0301 	bic.w	r3, r3, #1
 80068c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3314      	adds	r3, #20
 80068ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80068ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80068d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068d6:	e841 2300 	strex	r3, r2, [r1]
 80068da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1e3      	bne.n	80068aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2220      	movs	r2, #32
 80068e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	330c      	adds	r3, #12
 80068f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f023 0310 	bic.w	r3, r3, #16
 8006906:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	330c      	adds	r3, #12
 8006910:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006914:	61fa      	str	r2, [r7, #28]
 8006916:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	69b9      	ldr	r1, [r7, #24]
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	617b      	str	r3, [r7, #20]
   return(result);
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e3      	bne.n	80068f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800692e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f83d 	bl	80069b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800693a:	e023      	b.n	8006984 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800693c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006944:	2b00      	cmp	r3, #0
 8006946:	d009      	beq.n	800695c <HAL_UART_IRQHandler+0x4f4>
 8006948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800694c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006950:	2b00      	cmp	r3, #0
 8006952:	d003      	beq.n	800695c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f943 	bl	8006be0 <UART_Transmit_IT>
    return;
 800695a:	e014      	b.n	8006986 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800695c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00e      	beq.n	8006986 <HAL_UART_IRQHandler+0x51e>
 8006968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800696c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006970:	2b00      	cmp	r3, #0
 8006972:	d008      	beq.n	8006986 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f983 	bl	8006c80 <UART_EndTransmit_IT>
    return;
 800697a:	e004      	b.n	8006986 <HAL_UART_IRQHandler+0x51e>
    return;
 800697c:	bf00      	nop
 800697e:	e002      	b.n	8006986 <HAL_UART_IRQHandler+0x51e>
      return;
 8006980:	bf00      	nop
 8006982:	e000      	b.n	8006986 <HAL_UART_IRQHandler+0x51e>
      return;
 8006984:	bf00      	nop
  }
}
 8006986:	37e8      	adds	r7, #232	@ 0xe8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	4613      	mov	r3, r2
 80069da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069dc:	e03b      	b.n	8006a56 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e4:	d037      	beq.n	8006a56 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e6:	f7fb fab3 	bl	8001f50 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	6a3a      	ldr	r2, [r7, #32]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d302      	bcc.n	80069fc <UART_WaitOnFlagUntilTimeout+0x30>
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e03a      	b.n	8006a76 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d023      	beq.n	8006a56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b80      	cmp	r3, #128	@ 0x80
 8006a12:	d020      	beq.n	8006a56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b40      	cmp	r3, #64	@ 0x40
 8006a18:	d01d      	beq.n	8006a56 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0308 	and.w	r3, r3, #8
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d116      	bne.n	8006a56 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006a28:	2300      	movs	r3, #0
 8006a2a:	617b      	str	r3, [r7, #20]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 f857 	bl	8006af2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2208      	movs	r2, #8
 8006a48:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e00f      	b.n	8006a76 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	bf0c      	ite	eq
 8006a66:	2301      	moveq	r3, #1
 8006a68:	2300      	movne	r3, #0
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	79fb      	ldrb	r3, [r7, #7]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d0b4      	beq.n	80069de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b085      	sub	sp, #20
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	60f8      	str	r0, [r7, #12]
 8006a86:	60b9      	str	r1, [r7, #8]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	88fa      	ldrh	r2, [r7, #6]
 8006a96:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	88fa      	ldrh	r2, [r7, #6]
 8006a9c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2222      	movs	r2, #34	@ 0x22
 8006aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d007      	beq.n	8006ac4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68da      	ldr	r2, [r3, #12]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ac2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	695a      	ldr	r2, [r3, #20]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0201 	orr.w	r2, r2, #1
 8006ad2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68da      	ldr	r2, [r3, #12]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0220 	orr.w	r2, r2, #32
 8006ae2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b095      	sub	sp, #84	@ 0x54
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	330c      	adds	r3, #12
 8006b00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	330c      	adds	r3, #12
 8006b18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b1a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e5      	bne.n	8006afa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3314      	adds	r3, #20
 8006b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	f023 0301 	bic.w	r3, r3, #1
 8006b44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3314      	adds	r3, #20
 8006b4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e5      	bne.n	8006b2e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d119      	bne.n	8006b9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	330c      	adds	r3, #12
 8006b70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f023 0310 	bic.w	r3, r3, #16
 8006b80:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	330c      	adds	r3, #12
 8006b88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b8a:	61ba      	str	r2, [r7, #24]
 8006b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	6979      	ldr	r1, [r7, #20]
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	613b      	str	r3, [r7, #16]
   return(result);
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e5      	bne.n	8006b6a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006bac:	bf00      	nop
 8006bae:	3754      	adds	r7, #84	@ 0x54
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f7ff fee4 	bl	80069a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bd8:	bf00      	nop
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b21      	cmp	r3, #33	@ 0x21
 8006bf2:	d13e      	bne.n	8006c72 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bfc:	d114      	bne.n	8006c28 <UART_Transmit_IT+0x48>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d110      	bne.n	8006c28 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	461a      	mov	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c1a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	1c9a      	adds	r2, r3, #2
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	621a      	str	r2, [r3, #32]
 8006c26:	e008      	b.n	8006c3a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	1c59      	adds	r1, r3, #1
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	6211      	str	r1, [r2, #32]
 8006c32:	781a      	ldrb	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	3b01      	subs	r3, #1
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	4619      	mov	r1, r3
 8006c48:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10f      	bne.n	8006c6e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68da      	ldr	r2, [r3, #12]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68da      	ldr	r2, [r3, #12]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	e000      	b.n	8006c74 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c72:	2302      	movs	r3, #2
  }
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68da      	ldr	r2, [r3, #12]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c96:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f7ff fe73 	bl	800698c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08c      	sub	sp, #48	@ 0x30
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b22      	cmp	r3, #34	@ 0x22
 8006cc2:	f040 80ae 	bne.w	8006e22 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cce:	d117      	bne.n	8006d00 <UART_Receive_IT+0x50>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d113      	bne.n	8006d00 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf8:	1c9a      	adds	r2, r3, #2
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	629a      	str	r2, [r3, #40]	@ 0x28
 8006cfe:	e026      	b.n	8006d4e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d12:	d007      	beq.n	8006d24 <UART_Receive_IT+0x74>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10a      	bne.n	8006d32 <UART_Receive_IT+0x82>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d106      	bne.n	8006d32 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d2e:	701a      	strb	r2, [r3, #0]
 8006d30:	e008      	b.n	8006d44 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d42:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	3b01      	subs	r3, #1
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d15d      	bne.n	8006e1e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68da      	ldr	r2, [r3, #12]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0220 	bic.w	r2, r2, #32
 8006d70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	695a      	ldr	r2, [r3, #20]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0201 	bic.w	r2, r2, #1
 8006d90:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2220      	movs	r2, #32
 8006d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d135      	bne.n	8006e14 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	330c      	adds	r3, #12
 8006db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	e853 3f00 	ldrex	r3, [r3]
 8006dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f023 0310 	bic.w	r3, r3, #16
 8006dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	330c      	adds	r3, #12
 8006dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dce:	623a      	str	r2, [r7, #32]
 8006dd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd2:	69f9      	ldr	r1, [r7, #28]
 8006dd4:	6a3a      	ldr	r2, [r7, #32]
 8006dd6:	e841 2300 	strex	r3, r2, [r1]
 8006dda:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1e5      	bne.n	8006dae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0310 	and.w	r3, r3, #16
 8006dec:	2b10      	cmp	r3, #16
 8006dee:	d10a      	bne.n	8006e06 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006df0:	2300      	movs	r3, #0
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7ff fdd1 	bl	80069b4 <HAL_UARTEx_RxEventCallback>
 8006e12:	e002      	b.n	8006e1a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7fa fcb9 	bl	800178c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	e002      	b.n	8006e24 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	e000      	b.n	8006e24 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006e22:	2302      	movs	r3, #2
  }
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3730      	adds	r7, #48	@ 0x30
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e30:	b0c0      	sub	sp, #256	@ 0x100
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e48:	68d9      	ldr	r1, [r3, #12]
 8006e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	ea40 0301 	orr.w	r3, r0, r1
 8006e54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	431a      	orrs	r2, r3
 8006e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006e84:	f021 010c 	bic.w	r1, r1, #12
 8006e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e92:	430b      	orrs	r3, r1
 8006e94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea6:	6999      	ldr	r1, [r3, #24]
 8006ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	ea40 0301 	orr.w	r3, r0, r1
 8006eb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	4b8f      	ldr	r3, [pc, #572]	@ (80070f8 <UART_SetConfig+0x2cc>)
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d005      	beq.n	8006ecc <UART_SetConfig+0xa0>
 8006ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	4b8d      	ldr	r3, [pc, #564]	@ (80070fc <UART_SetConfig+0x2d0>)
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d104      	bne.n	8006ed6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ecc:	f7fe fa5c 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 8006ed0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006ed4:	e003      	b.n	8006ede <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ed6:	f7fe fa43 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8006eda:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ee8:	f040 810c 	bne.w	8007104 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ef6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006efa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006efe:	4622      	mov	r2, r4
 8006f00:	462b      	mov	r3, r5
 8006f02:	1891      	adds	r1, r2, r2
 8006f04:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006f06:	415b      	adcs	r3, r3
 8006f08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006f0e:	4621      	mov	r1, r4
 8006f10:	eb12 0801 	adds.w	r8, r2, r1
 8006f14:	4629      	mov	r1, r5
 8006f16:	eb43 0901 	adc.w	r9, r3, r1
 8006f1a:	f04f 0200 	mov.w	r2, #0
 8006f1e:	f04f 0300 	mov.w	r3, #0
 8006f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f2e:	4690      	mov	r8, r2
 8006f30:	4699      	mov	r9, r3
 8006f32:	4623      	mov	r3, r4
 8006f34:	eb18 0303 	adds.w	r3, r8, r3
 8006f38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f3c:	462b      	mov	r3, r5
 8006f3e:	eb49 0303 	adc.w	r3, r9, r3
 8006f42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f52:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006f56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	18db      	adds	r3, r3, r3
 8006f5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f60:	4613      	mov	r3, r2
 8006f62:	eb42 0303 	adc.w	r3, r2, r3
 8006f66:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006f6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006f70:	f7f9 fe72 	bl	8000c58 <__aeabi_uldivmod>
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	4b61      	ldr	r3, [pc, #388]	@ (8007100 <UART_SetConfig+0x2d4>)
 8006f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	011c      	lsls	r4, r3, #4
 8006f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f8c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006f90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006f94:	4642      	mov	r2, r8
 8006f96:	464b      	mov	r3, r9
 8006f98:	1891      	adds	r1, r2, r2
 8006f9a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006f9c:	415b      	adcs	r3, r3
 8006f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fa0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006fa4:	4641      	mov	r1, r8
 8006fa6:	eb12 0a01 	adds.w	sl, r2, r1
 8006faa:	4649      	mov	r1, r9
 8006fac:	eb43 0b01 	adc.w	fp, r3, r1
 8006fb0:	f04f 0200 	mov.w	r2, #0
 8006fb4:	f04f 0300 	mov.w	r3, #0
 8006fb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006fbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006fc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fc4:	4692      	mov	sl, r2
 8006fc6:	469b      	mov	fp, r3
 8006fc8:	4643      	mov	r3, r8
 8006fca:	eb1a 0303 	adds.w	r3, sl, r3
 8006fce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	eb4b 0303 	adc.w	r3, fp, r3
 8006fd8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006fe8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006fec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	18db      	adds	r3, r3, r3
 8006ff4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	eb42 0303 	adc.w	r3, r2, r3
 8006ffc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ffe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007002:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007006:	f7f9 fe27 	bl	8000c58 <__aeabi_uldivmod>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	4611      	mov	r1, r2
 8007010:	4b3b      	ldr	r3, [pc, #236]	@ (8007100 <UART_SetConfig+0x2d4>)
 8007012:	fba3 2301 	umull	r2, r3, r3, r1
 8007016:	095b      	lsrs	r3, r3, #5
 8007018:	2264      	movs	r2, #100	@ 0x64
 800701a:	fb02 f303 	mul.w	r3, r2, r3
 800701e:	1acb      	subs	r3, r1, r3
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007026:	4b36      	ldr	r3, [pc, #216]	@ (8007100 <UART_SetConfig+0x2d4>)
 8007028:	fba3 2302 	umull	r2, r3, r3, r2
 800702c:	095b      	lsrs	r3, r3, #5
 800702e:	005b      	lsls	r3, r3, #1
 8007030:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007034:	441c      	add	r4, r3
 8007036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800703a:	2200      	movs	r2, #0
 800703c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007040:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007044:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007048:	4642      	mov	r2, r8
 800704a:	464b      	mov	r3, r9
 800704c:	1891      	adds	r1, r2, r2
 800704e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007050:	415b      	adcs	r3, r3
 8007052:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007054:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007058:	4641      	mov	r1, r8
 800705a:	1851      	adds	r1, r2, r1
 800705c:	6339      	str	r1, [r7, #48]	@ 0x30
 800705e:	4649      	mov	r1, r9
 8007060:	414b      	adcs	r3, r1
 8007062:	637b      	str	r3, [r7, #52]	@ 0x34
 8007064:	f04f 0200 	mov.w	r2, #0
 8007068:	f04f 0300 	mov.w	r3, #0
 800706c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007070:	4659      	mov	r1, fp
 8007072:	00cb      	lsls	r3, r1, #3
 8007074:	4651      	mov	r1, sl
 8007076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800707a:	4651      	mov	r1, sl
 800707c:	00ca      	lsls	r2, r1, #3
 800707e:	4610      	mov	r0, r2
 8007080:	4619      	mov	r1, r3
 8007082:	4603      	mov	r3, r0
 8007084:	4642      	mov	r2, r8
 8007086:	189b      	adds	r3, r3, r2
 8007088:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800708c:	464b      	mov	r3, r9
 800708e:	460a      	mov	r2, r1
 8007090:	eb42 0303 	adc.w	r3, r2, r3
 8007094:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80070a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80070a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80070ac:	460b      	mov	r3, r1
 80070ae:	18db      	adds	r3, r3, r3
 80070b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070b2:	4613      	mov	r3, r2
 80070b4:	eb42 0303 	adc.w	r3, r2, r3
 80070b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80070be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80070c2:	f7f9 fdc9 	bl	8000c58 <__aeabi_uldivmod>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007100 <UART_SetConfig+0x2d4>)
 80070cc:	fba3 1302 	umull	r1, r3, r3, r2
 80070d0:	095b      	lsrs	r3, r3, #5
 80070d2:	2164      	movs	r1, #100	@ 0x64
 80070d4:	fb01 f303 	mul.w	r3, r1, r3
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	3332      	adds	r3, #50	@ 0x32
 80070de:	4a08      	ldr	r2, [pc, #32]	@ (8007100 <UART_SetConfig+0x2d4>)
 80070e0:	fba2 2303 	umull	r2, r3, r2, r3
 80070e4:	095b      	lsrs	r3, r3, #5
 80070e6:	f003 0207 	and.w	r2, r3, #7
 80070ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4422      	add	r2, r4
 80070f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80070f4:	e106      	b.n	8007304 <UART_SetConfig+0x4d8>
 80070f6:	bf00      	nop
 80070f8:	40011000 	.word	0x40011000
 80070fc:	40011400 	.word	0x40011400
 8007100:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007108:	2200      	movs	r2, #0
 800710a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800710e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007112:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007116:	4642      	mov	r2, r8
 8007118:	464b      	mov	r3, r9
 800711a:	1891      	adds	r1, r2, r2
 800711c:	6239      	str	r1, [r7, #32]
 800711e:	415b      	adcs	r3, r3
 8007120:	627b      	str	r3, [r7, #36]	@ 0x24
 8007122:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007126:	4641      	mov	r1, r8
 8007128:	1854      	adds	r4, r2, r1
 800712a:	4649      	mov	r1, r9
 800712c:	eb43 0501 	adc.w	r5, r3, r1
 8007130:	f04f 0200 	mov.w	r2, #0
 8007134:	f04f 0300 	mov.w	r3, #0
 8007138:	00eb      	lsls	r3, r5, #3
 800713a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800713e:	00e2      	lsls	r2, r4, #3
 8007140:	4614      	mov	r4, r2
 8007142:	461d      	mov	r5, r3
 8007144:	4643      	mov	r3, r8
 8007146:	18e3      	adds	r3, r4, r3
 8007148:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800714c:	464b      	mov	r3, r9
 800714e:	eb45 0303 	adc.w	r3, r5, r3
 8007152:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007162:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007166:	f04f 0200 	mov.w	r2, #0
 800716a:	f04f 0300 	mov.w	r3, #0
 800716e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007172:	4629      	mov	r1, r5
 8007174:	008b      	lsls	r3, r1, #2
 8007176:	4621      	mov	r1, r4
 8007178:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800717c:	4621      	mov	r1, r4
 800717e:	008a      	lsls	r2, r1, #2
 8007180:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007184:	f7f9 fd68 	bl	8000c58 <__aeabi_uldivmod>
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	4b60      	ldr	r3, [pc, #384]	@ (8007310 <UART_SetConfig+0x4e4>)
 800718e:	fba3 2302 	umull	r2, r3, r3, r2
 8007192:	095b      	lsrs	r3, r3, #5
 8007194:	011c      	lsls	r4, r3, #4
 8007196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800719a:	2200      	movs	r2, #0
 800719c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80071a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80071a8:	4642      	mov	r2, r8
 80071aa:	464b      	mov	r3, r9
 80071ac:	1891      	adds	r1, r2, r2
 80071ae:	61b9      	str	r1, [r7, #24]
 80071b0:	415b      	adcs	r3, r3
 80071b2:	61fb      	str	r3, [r7, #28]
 80071b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071b8:	4641      	mov	r1, r8
 80071ba:	1851      	adds	r1, r2, r1
 80071bc:	6139      	str	r1, [r7, #16]
 80071be:	4649      	mov	r1, r9
 80071c0:	414b      	adcs	r3, r1
 80071c2:	617b      	str	r3, [r7, #20]
 80071c4:	f04f 0200 	mov.w	r2, #0
 80071c8:	f04f 0300 	mov.w	r3, #0
 80071cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071d0:	4659      	mov	r1, fp
 80071d2:	00cb      	lsls	r3, r1, #3
 80071d4:	4651      	mov	r1, sl
 80071d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071da:	4651      	mov	r1, sl
 80071dc:	00ca      	lsls	r2, r1, #3
 80071de:	4610      	mov	r0, r2
 80071e0:	4619      	mov	r1, r3
 80071e2:	4603      	mov	r3, r0
 80071e4:	4642      	mov	r2, r8
 80071e6:	189b      	adds	r3, r3, r2
 80071e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80071ec:	464b      	mov	r3, r9
 80071ee:	460a      	mov	r2, r1
 80071f0:	eb42 0303 	adc.w	r3, r2, r3
 80071f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80071f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007202:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	f04f 0300 	mov.w	r3, #0
 800720c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007210:	4649      	mov	r1, r9
 8007212:	008b      	lsls	r3, r1, #2
 8007214:	4641      	mov	r1, r8
 8007216:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800721a:	4641      	mov	r1, r8
 800721c:	008a      	lsls	r2, r1, #2
 800721e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007222:	f7f9 fd19 	bl	8000c58 <__aeabi_uldivmod>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	4611      	mov	r1, r2
 800722c:	4b38      	ldr	r3, [pc, #224]	@ (8007310 <UART_SetConfig+0x4e4>)
 800722e:	fba3 2301 	umull	r2, r3, r3, r1
 8007232:	095b      	lsrs	r3, r3, #5
 8007234:	2264      	movs	r2, #100	@ 0x64
 8007236:	fb02 f303 	mul.w	r3, r2, r3
 800723a:	1acb      	subs	r3, r1, r3
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	3332      	adds	r3, #50	@ 0x32
 8007240:	4a33      	ldr	r2, [pc, #204]	@ (8007310 <UART_SetConfig+0x4e4>)
 8007242:	fba2 2303 	umull	r2, r3, r2, r3
 8007246:	095b      	lsrs	r3, r3, #5
 8007248:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800724c:	441c      	add	r4, r3
 800724e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007252:	2200      	movs	r2, #0
 8007254:	673b      	str	r3, [r7, #112]	@ 0x70
 8007256:	677a      	str	r2, [r7, #116]	@ 0x74
 8007258:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800725c:	4642      	mov	r2, r8
 800725e:	464b      	mov	r3, r9
 8007260:	1891      	adds	r1, r2, r2
 8007262:	60b9      	str	r1, [r7, #8]
 8007264:	415b      	adcs	r3, r3
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800726c:	4641      	mov	r1, r8
 800726e:	1851      	adds	r1, r2, r1
 8007270:	6039      	str	r1, [r7, #0]
 8007272:	4649      	mov	r1, r9
 8007274:	414b      	adcs	r3, r1
 8007276:	607b      	str	r3, [r7, #4]
 8007278:	f04f 0200 	mov.w	r2, #0
 800727c:	f04f 0300 	mov.w	r3, #0
 8007280:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007284:	4659      	mov	r1, fp
 8007286:	00cb      	lsls	r3, r1, #3
 8007288:	4651      	mov	r1, sl
 800728a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800728e:	4651      	mov	r1, sl
 8007290:	00ca      	lsls	r2, r1, #3
 8007292:	4610      	mov	r0, r2
 8007294:	4619      	mov	r1, r3
 8007296:	4603      	mov	r3, r0
 8007298:	4642      	mov	r2, r8
 800729a:	189b      	adds	r3, r3, r2
 800729c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800729e:	464b      	mov	r3, r9
 80072a0:	460a      	mov	r2, r1
 80072a2:	eb42 0303 	adc.w	r3, r2, r3
 80072a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80072a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80072b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80072b4:	f04f 0200 	mov.w	r2, #0
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80072c0:	4649      	mov	r1, r9
 80072c2:	008b      	lsls	r3, r1, #2
 80072c4:	4641      	mov	r1, r8
 80072c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072ca:	4641      	mov	r1, r8
 80072cc:	008a      	lsls	r2, r1, #2
 80072ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80072d2:	f7f9 fcc1 	bl	8000c58 <__aeabi_uldivmod>
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	4b0d      	ldr	r3, [pc, #52]	@ (8007310 <UART_SetConfig+0x4e4>)
 80072dc:	fba3 1302 	umull	r1, r3, r3, r2
 80072e0:	095b      	lsrs	r3, r3, #5
 80072e2:	2164      	movs	r1, #100	@ 0x64
 80072e4:	fb01 f303 	mul.w	r3, r1, r3
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	3332      	adds	r3, #50	@ 0x32
 80072ee:	4a08      	ldr	r2, [pc, #32]	@ (8007310 <UART_SetConfig+0x4e4>)
 80072f0:	fba2 2303 	umull	r2, r3, r2, r3
 80072f4:	095b      	lsrs	r3, r3, #5
 80072f6:	f003 020f 	and.w	r2, r3, #15
 80072fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4422      	add	r2, r4
 8007302:	609a      	str	r2, [r3, #8]
}
 8007304:	bf00      	nop
 8007306:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800730a:	46bd      	mov	sp, r7
 800730c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007310:	51eb851f 	.word	0x51eb851f

08007314 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007314:	b084      	sub	sp, #16
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	f107 001c 	add.w	r0, r7, #28
 8007322:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007326:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800732a:	2b01      	cmp	r3, #1
 800732c:	d123      	bne.n	8007376 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007332:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007342:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007356:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800735a:	2b01      	cmp	r3, #1
 800735c:	d105      	bne.n	800736a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f001 fae8 	bl	8008940 <USB_CoreReset>
 8007370:	4603      	mov	r3, r0
 8007372:	73fb      	strb	r3, [r7, #15]
 8007374:	e01b      	b.n	80073ae <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f001 fadc 	bl	8008940 <USB_CoreReset>
 8007388:	4603      	mov	r3, r0
 800738a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800738c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007390:	2b00      	cmp	r3, #0
 8007392:	d106      	bne.n	80073a2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007398:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	639a      	str	r2, [r3, #56]	@ 0x38
 80073a0:	e005      	b.n	80073ae <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80073ae:	7fbb      	ldrb	r3, [r7, #30]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d10b      	bne.n	80073cc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f043 0206 	orr.w	r2, r3, #6
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f043 0220 	orr.w	r2, r3, #32
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073d8:	b004      	add	sp, #16
 80073da:	4770      	bx	lr

080073dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	4613      	mov	r3, r2
 80073e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80073ea:	79fb      	ldrb	r3, [r7, #7]
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d165      	bne.n	80074bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	4a41      	ldr	r2, [pc, #260]	@ (80074f8 <USB_SetTurnaroundTime+0x11c>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d906      	bls.n	8007406 <USB_SetTurnaroundTime+0x2a>
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	4a40      	ldr	r2, [pc, #256]	@ (80074fc <USB_SetTurnaroundTime+0x120>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d202      	bcs.n	8007406 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007400:	230f      	movs	r3, #15
 8007402:	617b      	str	r3, [r7, #20]
 8007404:	e062      	b.n	80074cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	4a3c      	ldr	r2, [pc, #240]	@ (80074fc <USB_SetTurnaroundTime+0x120>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d306      	bcc.n	800741c <USB_SetTurnaroundTime+0x40>
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	4a3b      	ldr	r2, [pc, #236]	@ (8007500 <USB_SetTurnaroundTime+0x124>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d202      	bcs.n	800741c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007416:	230e      	movs	r3, #14
 8007418:	617b      	str	r3, [r7, #20]
 800741a:	e057      	b.n	80074cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	4a38      	ldr	r2, [pc, #224]	@ (8007500 <USB_SetTurnaroundTime+0x124>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d306      	bcc.n	8007432 <USB_SetTurnaroundTime+0x56>
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	4a37      	ldr	r2, [pc, #220]	@ (8007504 <USB_SetTurnaroundTime+0x128>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d202      	bcs.n	8007432 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800742c:	230d      	movs	r3, #13
 800742e:	617b      	str	r3, [r7, #20]
 8007430:	e04c      	b.n	80074cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	4a33      	ldr	r2, [pc, #204]	@ (8007504 <USB_SetTurnaroundTime+0x128>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d306      	bcc.n	8007448 <USB_SetTurnaroundTime+0x6c>
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	4a32      	ldr	r2, [pc, #200]	@ (8007508 <USB_SetTurnaroundTime+0x12c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d802      	bhi.n	8007448 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007442:	230c      	movs	r3, #12
 8007444:	617b      	str	r3, [r7, #20]
 8007446:	e041      	b.n	80074cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4a2f      	ldr	r2, [pc, #188]	@ (8007508 <USB_SetTurnaroundTime+0x12c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d906      	bls.n	800745e <USB_SetTurnaroundTime+0x82>
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	4a2e      	ldr	r2, [pc, #184]	@ (800750c <USB_SetTurnaroundTime+0x130>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d802      	bhi.n	800745e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007458:	230b      	movs	r3, #11
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	e036      	b.n	80074cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	4a2a      	ldr	r2, [pc, #168]	@ (800750c <USB_SetTurnaroundTime+0x130>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d906      	bls.n	8007474 <USB_SetTurnaroundTime+0x98>
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	4a29      	ldr	r2, [pc, #164]	@ (8007510 <USB_SetTurnaroundTime+0x134>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d802      	bhi.n	8007474 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800746e:	230a      	movs	r3, #10
 8007470:	617b      	str	r3, [r7, #20]
 8007472:	e02b      	b.n	80074cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	4a26      	ldr	r2, [pc, #152]	@ (8007510 <USB_SetTurnaroundTime+0x134>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d906      	bls.n	800748a <USB_SetTurnaroundTime+0xae>
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	4a25      	ldr	r2, [pc, #148]	@ (8007514 <USB_SetTurnaroundTime+0x138>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d202      	bcs.n	800748a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007484:	2309      	movs	r3, #9
 8007486:	617b      	str	r3, [r7, #20]
 8007488:	e020      	b.n	80074cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	4a21      	ldr	r2, [pc, #132]	@ (8007514 <USB_SetTurnaroundTime+0x138>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d306      	bcc.n	80074a0 <USB_SetTurnaroundTime+0xc4>
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	4a20      	ldr	r2, [pc, #128]	@ (8007518 <USB_SetTurnaroundTime+0x13c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d802      	bhi.n	80074a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800749a:	2308      	movs	r3, #8
 800749c:	617b      	str	r3, [r7, #20]
 800749e:	e015      	b.n	80074cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	4a1d      	ldr	r2, [pc, #116]	@ (8007518 <USB_SetTurnaroundTime+0x13c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d906      	bls.n	80074b6 <USB_SetTurnaroundTime+0xda>
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	4a1c      	ldr	r2, [pc, #112]	@ (800751c <USB_SetTurnaroundTime+0x140>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d202      	bcs.n	80074b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80074b0:	2307      	movs	r3, #7
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	e00a      	b.n	80074cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80074b6:	2306      	movs	r3, #6
 80074b8:	617b      	str	r3, [r7, #20]
 80074ba:	e007      	b.n	80074cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80074bc:	79fb      	ldrb	r3, [r7, #7]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d102      	bne.n	80074c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80074c2:	2309      	movs	r3, #9
 80074c4:	617b      	str	r3, [r7, #20]
 80074c6:	e001      	b.n	80074cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80074c8:	2309      	movs	r3, #9
 80074ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	68da      	ldr	r2, [r3, #12]
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	029b      	lsls	r3, r3, #10
 80074e0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80074e4:	431a      	orrs	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	371c      	adds	r7, #28
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	00d8acbf 	.word	0x00d8acbf
 80074fc:	00e4e1c0 	.word	0x00e4e1c0
 8007500:	00f42400 	.word	0x00f42400
 8007504:	01067380 	.word	0x01067380
 8007508:	011a499f 	.word	0x011a499f
 800750c:	01312cff 	.word	0x01312cff
 8007510:	014ca43f 	.word	0x014ca43f
 8007514:	016e3600 	.word	0x016e3600
 8007518:	01a6ab1f 	.word	0x01a6ab1f
 800751c:	01e84800 	.word	0x01e84800

08007520 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f043 0201 	orr.w	r2, r3, #1
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007542:	b480      	push	{r7}
 8007544:	b083      	sub	sp, #12
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f023 0201 	bic.w	r2, r3, #1
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	460b      	mov	r3, r1
 800756e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d115      	bne.n	80075b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007592:	200a      	movs	r0, #10
 8007594:	f7fa fce8 	bl	8001f68 <HAL_Delay>
      ms += 10U;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	330a      	adds	r3, #10
 800759c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f001 f93f 	bl	8008822 <USB_GetMode>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d01e      	beq.n	80075e8 <USB_SetCurrentMode+0x84>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2bc7      	cmp	r3, #199	@ 0xc7
 80075ae:	d9f0      	bls.n	8007592 <USB_SetCurrentMode+0x2e>
 80075b0:	e01a      	b.n	80075e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80075b2:	78fb      	ldrb	r3, [r7, #3]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d115      	bne.n	80075e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80075c4:	200a      	movs	r0, #10
 80075c6:	f7fa fccf 	bl	8001f68 <HAL_Delay>
      ms += 10U;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	330a      	adds	r3, #10
 80075ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f001 f926 	bl	8008822 <USB_GetMode>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d005      	beq.n	80075e8 <USB_SetCurrentMode+0x84>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2bc7      	cmp	r3, #199	@ 0xc7
 80075e0:	d9f0      	bls.n	80075c4 <USB_SetCurrentMode+0x60>
 80075e2:	e001      	b.n	80075e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e005      	b.n	80075f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2bc8      	cmp	r3, #200	@ 0xc8
 80075ec:	d101      	bne.n	80075f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e000      	b.n	80075f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075fc:	b084      	sub	sp, #16
 80075fe:	b580      	push	{r7, lr}
 8007600:	b086      	sub	sp, #24
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800760a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007616:	2300      	movs	r3, #0
 8007618:	613b      	str	r3, [r7, #16]
 800761a:	e009      	b.n	8007630 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	3340      	adds	r3, #64	@ 0x40
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	2200      	movs	r2, #0
 8007628:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	3301      	adds	r3, #1
 800762e:	613b      	str	r3, [r7, #16]
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	2b0e      	cmp	r3, #14
 8007634:	d9f2      	bls.n	800761c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007636:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800763a:	2b00      	cmp	r3, #0
 800763c:	d11c      	bne.n	8007678 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800764c:	f043 0302 	orr.w	r3, r3, #2
 8007650:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007656:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007662:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800766e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	639a      	str	r2, [r3, #56]	@ 0x38
 8007676:	e00b      	b.n	8007690 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007688:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007696:	461a      	mov	r2, r3
 8007698:	2300      	movs	r3, #0
 800769a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800769c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d10d      	bne.n	80076c0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80076a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d104      	bne.n	80076b6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80076ac:	2100      	movs	r1, #0
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f968 	bl	8007984 <USB_SetDevSpeed>
 80076b4:	e008      	b.n	80076c8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80076b6:	2101      	movs	r1, #1
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f963 	bl	8007984 <USB_SetDevSpeed>
 80076be:	e003      	b.n	80076c8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80076c0:	2103      	movs	r1, #3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f95e 	bl	8007984 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80076c8:	2110      	movs	r1, #16
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f8fa 	bl	80078c4 <USB_FlushTxFifo>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f924 	bl	8007928 <USB_FlushRxFifo>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076f0:	461a      	mov	r2, r3
 80076f2:	2300      	movs	r3, #0
 80076f4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076fc:	461a      	mov	r2, r3
 80076fe:	2300      	movs	r3, #0
 8007700:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007708:	461a      	mov	r2, r3
 800770a:	2300      	movs	r3, #0
 800770c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800770e:	2300      	movs	r3, #0
 8007710:	613b      	str	r3, [r7, #16]
 8007712:	e043      	b.n	800779c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007726:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800772a:	d118      	bne.n	800775e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10a      	bne.n	8007748 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4413      	add	r3, r2
 800773a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800773e:	461a      	mov	r2, r3
 8007740:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	e013      	b.n	8007770 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4413      	add	r3, r2
 8007750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007754:	461a      	mov	r2, r3
 8007756:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800775a:	6013      	str	r3, [r2, #0]
 800775c:	e008      	b.n	8007770 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	4413      	add	r3, r2
 8007766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800776a:	461a      	mov	r2, r3
 800776c:	2300      	movs	r3, #0
 800776e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800777c:	461a      	mov	r2, r3
 800777e:	2300      	movs	r3, #0
 8007780:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	4413      	add	r3, r2
 800778a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800778e:	461a      	mov	r2, r3
 8007790:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007794:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	3301      	adds	r3, #1
 800779a:	613b      	str	r3, [r7, #16]
 800779c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80077a0:	461a      	mov	r2, r3
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d3b5      	bcc.n	8007714 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077a8:	2300      	movs	r3, #0
 80077aa:	613b      	str	r3, [r7, #16]
 80077ac:	e043      	b.n	8007836 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077c4:	d118      	bne.n	80077f8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077d8:	461a      	mov	r2, r3
 80077da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	e013      	b.n	800780a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ee:	461a      	mov	r2, r3
 80077f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80077f4:	6013      	str	r3, [r2, #0]
 80077f6:	e008      	b.n	800780a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007804:	461a      	mov	r2, r3
 8007806:	2300      	movs	r3, #0
 8007808:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4413      	add	r3, r2
 8007812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007816:	461a      	mov	r2, r3
 8007818:	2300      	movs	r3, #0
 800781a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007828:	461a      	mov	r2, r3
 800782a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800782e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	3301      	adds	r3, #1
 8007834:	613b      	str	r3, [r7, #16]
 8007836:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800783a:	461a      	mov	r2, r3
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	4293      	cmp	r3, r2
 8007840:	d3b5      	bcc.n	80077ae <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007850:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007854:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007862:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007864:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007868:	2b00      	cmp	r3, #0
 800786a:	d105      	bne.n	8007878 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	f043 0210 	orr.w	r2, r3, #16
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	699a      	ldr	r2, [r3, #24]
 800787c:	4b10      	ldr	r3, [pc, #64]	@ (80078c0 <USB_DevInit+0x2c4>)
 800787e:	4313      	orrs	r3, r2
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007884:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007888:	2b00      	cmp	r3, #0
 800788a:	d005      	beq.n	8007898 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	f043 0208 	orr.w	r2, r3, #8
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007898:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800789c:	2b01      	cmp	r3, #1
 800789e:	d107      	bne.n	80078b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078a8:	f043 0304 	orr.w	r3, r3, #4
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80078b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3718      	adds	r7, #24
 80078b6:	46bd      	mov	sp, r7
 80078b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078bc:	b004      	add	sp, #16
 80078be:	4770      	bx	lr
 80078c0:	803c3800 	.word	0x803c3800

080078c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80078ce:	2300      	movs	r3, #0
 80078d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	3301      	adds	r3, #1
 80078d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078de:	d901      	bls.n	80078e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e01b      	b.n	800791c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	daf2      	bge.n	80078d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	019b      	lsls	r3, r3, #6
 80078f4:	f043 0220 	orr.w	r2, r3, #32
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	3301      	adds	r3, #1
 8007900:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007908:	d901      	bls.n	800790e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e006      	b.n	800791c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	f003 0320 	and.w	r3, r3, #32
 8007916:	2b20      	cmp	r3, #32
 8007918:	d0f0      	beq.n	80078fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007930:	2300      	movs	r3, #0
 8007932:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3301      	adds	r3, #1
 8007938:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007940:	d901      	bls.n	8007946 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e018      	b.n	8007978 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	daf2      	bge.n	8007934 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2210      	movs	r2, #16
 8007956:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	3301      	adds	r3, #1
 800795c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007964:	d901      	bls.n	800796a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e006      	b.n	8007978 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	f003 0310 	and.w	r3, r3, #16
 8007972:	2b10      	cmp	r3, #16
 8007974:	d0f0      	beq.n	8007958 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	460b      	mov	r3, r1
 800798e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	78fb      	ldrb	r3, [r7, #3]
 800799e:	68f9      	ldr	r1, [r7, #12]
 80079a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079a4:	4313      	orrs	r3, r2
 80079a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b087      	sub	sp, #28
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f003 0306 	and.w	r3, r3, #6
 80079ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d102      	bne.n	80079dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80079d6:	2300      	movs	r3, #0
 80079d8:	75fb      	strb	r3, [r7, #23]
 80079da:	e00a      	b.n	80079f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d002      	beq.n	80079e8 <USB_GetDevSpeed+0x32>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2b06      	cmp	r3, #6
 80079e6:	d102      	bne.n	80079ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80079e8:	2302      	movs	r3, #2
 80079ea:	75fb      	strb	r3, [r7, #23]
 80079ec:	e001      	b.n	80079f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80079ee:	230f      	movs	r3, #15
 80079f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	371c      	adds	r7, #28
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	785b      	ldrb	r3, [r3, #1]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d13a      	bne.n	8007a92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a22:	69da      	ldr	r2, [r3, #28]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	f003 030f 	and.w	r3, r3, #15
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	68f9      	ldr	r1, [r7, #12]
 8007a36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	015a      	lsls	r2, r3, #5
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	4413      	add	r3, r2
 8007a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d155      	bne.n	8007b00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	791b      	ldrb	r3, [r3, #4]
 8007a6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	059b      	lsls	r3, r3, #22
 8007a76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	0151      	lsls	r1, r2, #5
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	440a      	add	r2, r1
 8007a82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a8e:	6013      	str	r3, [r2, #0]
 8007a90:	e036      	b.n	8007b00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a98:	69da      	ldr	r2, [r3, #28]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	f003 030f 	and.w	r3, r3, #15
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa8:	041b      	lsls	r3, r3, #16
 8007aaa:	68f9      	ldr	r1, [r7, #12]
 8007aac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d11a      	bne.n	8007b00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	791b      	ldrb	r3, [r3, #4]
 8007ae4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ae6:	430b      	orrs	r3, r1
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	0151      	lsls	r1, r2, #5
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	440a      	add	r2, r1
 8007af2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007af6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007afa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007afe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
	...

08007b10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	785b      	ldrb	r3, [r3, #1]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d161      	bne.n	8007bf0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b42:	d11f      	bne.n	8007b84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	0151      	lsls	r1, r2, #5
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	440a      	add	r2, r1
 8007b5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b5e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007b62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	0151      	lsls	r1, r2, #5
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	440a      	add	r2, r1
 8007b7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	f003 030f 	and.w	r3, r3, #15
 8007b94:	2101      	movs	r1, #1
 8007b96:	fa01 f303 	lsl.w	r3, r1, r3
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	43db      	mvns	r3, r3
 8007b9e:	68f9      	ldr	r1, [r7, #12]
 8007ba0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bae:	69da      	ldr	r2, [r3, #28]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	f003 030f 	and.w	r3, r3, #15
 8007bb8:	2101      	movs	r1, #1
 8007bba:	fa01 f303 	lsl.w	r3, r1, r3
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	43db      	mvns	r3, r3
 8007bc2:	68f9      	ldr	r1, [r7, #12]
 8007bc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bc8:	4013      	ands	r3, r2
 8007bca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	015a      	lsls	r2, r3, #5
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	0159      	lsls	r1, r3, #5
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	440b      	add	r3, r1
 8007be2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007be6:	4619      	mov	r1, r3
 8007be8:	4b35      	ldr	r3, [pc, #212]	@ (8007cc0 <USB_DeactivateEndpoint+0x1b0>)
 8007bea:	4013      	ands	r3, r2
 8007bec:	600b      	str	r3, [r1, #0]
 8007bee:	e060      	b.n	8007cb2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c06:	d11f      	bne.n	8007c48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007c26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	0151      	lsls	r1, r2, #5
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	440a      	add	r2, r1
 8007c3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	f003 030f 	and.w	r3, r3, #15
 8007c58:	2101      	movs	r1, #1
 8007c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c5e:	041b      	lsls	r3, r3, #16
 8007c60:	43db      	mvns	r3, r3
 8007c62:	68f9      	ldr	r1, [r7, #12]
 8007c64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c68:	4013      	ands	r3, r2
 8007c6a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c72:	69da      	ldr	r2, [r3, #28]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	f003 030f 	and.w	r3, r3, #15
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c82:	041b      	lsls	r3, r3, #16
 8007c84:	43db      	mvns	r3, r3
 8007c86:	68f9      	ldr	r1, [r7, #12]
 8007c88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	015a      	lsls	r2, r3, #5
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	4413      	add	r3, r2
 8007c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	0159      	lsls	r1, r3, #5
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	440b      	add	r3, r1
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007caa:	4619      	mov	r1, r3
 8007cac:	4b05      	ldr	r3, [pc, #20]	@ (8007cc4 <USB_DeactivateEndpoint+0x1b4>)
 8007cae:	4013      	ands	r3, r2
 8007cb0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	ec337800 	.word	0xec337800
 8007cc4:	eff37800 	.word	0xeff37800

08007cc8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b08a      	sub	sp, #40	@ 0x28
 8007ccc:	af02      	add	r7, sp, #8
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	785b      	ldrb	r3, [r3, #1]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	f040 817f 	bne.w	8007fe8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d132      	bne.n	8007d58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	015a      	lsls	r2, r3, #5
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	0151      	lsls	r1, r2, #5
 8007d04:	69fa      	ldr	r2, [r7, #28]
 8007d06:	440a      	add	r2, r1
 8007d08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d0c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007d10:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007d14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	015a      	lsls	r2, r3, #5
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	0151      	lsls	r1, r2, #5
 8007d28:	69fa      	ldr	r2, [r7, #28]
 8007d2a:	440a      	add	r2, r1
 8007d2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	015a      	lsls	r2, r3, #5
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	69ba      	ldr	r2, [r7, #24]
 8007d46:	0151      	lsls	r1, r2, #5
 8007d48:	69fa      	ldr	r2, [r7, #28]
 8007d4a:	440a      	add	r2, r1
 8007d4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d50:	0cdb      	lsrs	r3, r3, #19
 8007d52:	04db      	lsls	r3, r3, #19
 8007d54:	6113      	str	r3, [r2, #16]
 8007d56:	e097      	b.n	8007e88 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	69ba      	ldr	r2, [r7, #24]
 8007d68:	0151      	lsls	r1, r2, #5
 8007d6a:	69fa      	ldr	r2, [r7, #28]
 8007d6c:	440a      	add	r2, r1
 8007d6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d72:	0cdb      	lsrs	r3, r3, #19
 8007d74:	04db      	lsls	r3, r3, #19
 8007d76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	69ba      	ldr	r2, [r7, #24]
 8007d88:	0151      	lsls	r1, r2, #5
 8007d8a:	69fa      	ldr	r2, [r7, #28]
 8007d8c:	440a      	add	r2, r1
 8007d8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d92:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007d96:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007d9a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d11a      	bne.n	8007dd8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	691a      	ldr	r2, [r3, #16]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d903      	bls.n	8007db6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	689a      	ldr	r2, [r3, #8]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	015a      	lsls	r2, r3, #5
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	0151      	lsls	r1, r2, #5
 8007dc8:	69fa      	ldr	r2, [r7, #28]
 8007dca:	440a      	add	r2, r1
 8007dcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007dd4:	6113      	str	r3, [r2, #16]
 8007dd6:	e044      	b.n	8007e62 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	691a      	ldr	r2, [r3, #16]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	4413      	add	r3, r2
 8007de2:	1e5a      	subs	r2, r3, #1
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dec:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dfa:	691a      	ldr	r2, [r3, #16]
 8007dfc:	8afb      	ldrh	r3, [r7, #22]
 8007dfe:	04d9      	lsls	r1, r3, #19
 8007e00:	4ba4      	ldr	r3, [pc, #656]	@ (8008094 <USB_EPStartXfer+0x3cc>)
 8007e02:	400b      	ands	r3, r1
 8007e04:	69b9      	ldr	r1, [r7, #24]
 8007e06:	0148      	lsls	r0, r1, #5
 8007e08:	69f9      	ldr	r1, [r7, #28]
 8007e0a:	4401      	add	r1, r0
 8007e0c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007e10:	4313      	orrs	r3, r2
 8007e12:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	791b      	ldrb	r3, [r3, #4]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d122      	bne.n	8007e62 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	0151      	lsls	r1, r2, #5
 8007e2e:	69fa      	ldr	r2, [r7, #28]
 8007e30:	440a      	add	r2, r1
 8007e32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e36:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007e3a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e48:	691a      	ldr	r2, [r3, #16]
 8007e4a:	8afb      	ldrh	r3, [r7, #22]
 8007e4c:	075b      	lsls	r3, r3, #29
 8007e4e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007e52:	69b9      	ldr	r1, [r7, #24]
 8007e54:	0148      	lsls	r0, r1, #5
 8007e56:	69f9      	ldr	r1, [r7, #28]
 8007e58:	4401      	add	r1, r0
 8007e5a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e6e:	691a      	ldr	r2, [r3, #16]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e78:	69b9      	ldr	r1, [r7, #24]
 8007e7a:	0148      	lsls	r0, r1, #5
 8007e7c:	69f9      	ldr	r1, [r7, #28]
 8007e7e:	4401      	add	r1, r0
 8007e80:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007e84:	4313      	orrs	r3, r2
 8007e86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007e88:	79fb      	ldrb	r3, [r7, #7]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d14b      	bne.n	8007f26 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d009      	beq.n	8007eaa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	791b      	ldrb	r3, [r3, #4]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d128      	bne.n	8007f04 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d110      	bne.n	8007ee4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	0151      	lsls	r1, r2, #5
 8007ed4:	69fa      	ldr	r2, [r7, #28]
 8007ed6:	440a      	add	r2, r1
 8007ed8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007edc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ee0:	6013      	str	r3, [r2, #0]
 8007ee2:	e00f      	b.n	8007f04 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	69ba      	ldr	r2, [r7, #24]
 8007ef4:	0151      	lsls	r1, r2, #5
 8007ef6:	69fa      	ldr	r2, [r7, #28]
 8007ef8:	440a      	add	r2, r1
 8007efa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f02:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	0151      	lsls	r1, r2, #5
 8007f16:	69fa      	ldr	r2, [r7, #28]
 8007f18:	440a      	add	r2, r1
 8007f1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f1e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007f22:	6013      	str	r3, [r2, #0]
 8007f24:	e166      	b.n	80081f4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	015a      	lsls	r2, r3, #5
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	69ba      	ldr	r2, [r7, #24]
 8007f36:	0151      	lsls	r1, r2, #5
 8007f38:	69fa      	ldr	r2, [r7, #28]
 8007f3a:	440a      	add	r2, r1
 8007f3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f40:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007f44:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	791b      	ldrb	r3, [r3, #4]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d015      	beq.n	8007f7a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 814e 	beq.w	80081f4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	f003 030f 	and.w	r3, r3, #15
 8007f68:	2101      	movs	r1, #1
 8007f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f6e:	69f9      	ldr	r1, [r7, #28]
 8007f70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f74:	4313      	orrs	r3, r2
 8007f76:	634b      	str	r3, [r1, #52]	@ 0x34
 8007f78:	e13c      	b.n	80081f4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d110      	bne.n	8007fac <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	015a      	lsls	r2, r3, #5
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	4413      	add	r3, r2
 8007f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	0151      	lsls	r1, r2, #5
 8007f9c:	69fa      	ldr	r2, [r7, #28]
 8007f9e:	440a      	add	r2, r1
 8007fa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fa4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007fa8:	6013      	str	r3, [r2, #0]
 8007faa:	e00f      	b.n	8007fcc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	69ba      	ldr	r2, [r7, #24]
 8007fbc:	0151      	lsls	r1, r2, #5
 8007fbe:	69fa      	ldr	r2, [r7, #28]
 8007fc0:	440a      	add	r2, r1
 8007fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fca:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	68d9      	ldr	r1, [r3, #12]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	781a      	ldrb	r2, [r3, #0]
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	b298      	uxth	r0, r3
 8007fda:	79fb      	ldrb	r3, [r7, #7]
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	4603      	mov	r3, r0
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f000 f9b9 	bl	8008358 <USB_WritePacket>
 8007fe6:	e105      	b.n	80081f4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	69ba      	ldr	r2, [r7, #24]
 8007ff8:	0151      	lsls	r1, r2, #5
 8007ffa:	69fa      	ldr	r2, [r7, #28]
 8007ffc:	440a      	add	r2, r1
 8007ffe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008002:	0cdb      	lsrs	r3, r3, #19
 8008004:	04db      	lsls	r3, r3, #19
 8008006:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	69ba      	ldr	r2, [r7, #24]
 8008018:	0151      	lsls	r1, r2, #5
 800801a:	69fa      	ldr	r2, [r7, #28]
 800801c:	440a      	add	r2, r1
 800801e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008022:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008026:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800802a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d132      	bne.n	8008098 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	689a      	ldr	r2, [r3, #8]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	689a      	ldr	r2, [r3, #8]
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	015a      	lsls	r2, r3, #5
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	4413      	add	r3, r2
 8008052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008056:	691a      	ldr	r2, [r3, #16]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	6a1b      	ldr	r3, [r3, #32]
 800805c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008060:	69b9      	ldr	r1, [r7, #24]
 8008062:	0148      	lsls	r0, r1, #5
 8008064:	69f9      	ldr	r1, [r7, #28]
 8008066:	4401      	add	r1, r0
 8008068:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800806c:	4313      	orrs	r3, r2
 800806e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	4413      	add	r3, r2
 8008078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	69ba      	ldr	r2, [r7, #24]
 8008080:	0151      	lsls	r1, r2, #5
 8008082:	69fa      	ldr	r2, [r7, #28]
 8008084:	440a      	add	r2, r1
 8008086:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800808a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800808e:	6113      	str	r3, [r2, #16]
 8008090:	e062      	b.n	8008158 <USB_EPStartXfer+0x490>
 8008092:	bf00      	nop
 8008094:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d123      	bne.n	80080e8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ac:	691a      	ldr	r2, [r3, #16]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080b6:	69b9      	ldr	r1, [r7, #24]
 80080b8:	0148      	lsls	r0, r1, #5
 80080ba:	69f9      	ldr	r1, [r7, #28]
 80080bc:	4401      	add	r1, r0
 80080be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80080c2:	4313      	orrs	r3, r2
 80080c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	69ba      	ldr	r2, [r7, #24]
 80080d6:	0151      	lsls	r1, r2, #5
 80080d8:	69fa      	ldr	r2, [r7, #28]
 80080da:	440a      	add	r2, r1
 80080dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080e4:	6113      	str	r3, [r2, #16]
 80080e6:	e037      	b.n	8008158 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	691a      	ldr	r2, [r3, #16]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	4413      	add	r3, r2
 80080f2:	1e5a      	subs	r2, r3, #1
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	8afa      	ldrh	r2, [r7, #22]
 8008104:	fb03 f202 	mul.w	r2, r3, r2
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008118:	691a      	ldr	r2, [r3, #16]
 800811a:	8afb      	ldrh	r3, [r7, #22]
 800811c:	04d9      	lsls	r1, r3, #19
 800811e:	4b38      	ldr	r3, [pc, #224]	@ (8008200 <USB_EPStartXfer+0x538>)
 8008120:	400b      	ands	r3, r1
 8008122:	69b9      	ldr	r1, [r7, #24]
 8008124:	0148      	lsls	r0, r1, #5
 8008126:	69f9      	ldr	r1, [r7, #28]
 8008128:	4401      	add	r1, r0
 800812a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800812e:	4313      	orrs	r3, r2
 8008130:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	4413      	add	r3, r2
 800813a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800813e:	691a      	ldr	r2, [r3, #16]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	6a1b      	ldr	r3, [r3, #32]
 8008144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008148:	69b9      	ldr	r1, [r7, #24]
 800814a:	0148      	lsls	r0, r1, #5
 800814c:	69f9      	ldr	r1, [r7, #28]
 800814e:	4401      	add	r1, r0
 8008150:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008154:	4313      	orrs	r3, r2
 8008156:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008158:	79fb      	ldrb	r3, [r7, #7]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d10d      	bne.n	800817a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d009      	beq.n	800817a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	68d9      	ldr	r1, [r3, #12]
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	4413      	add	r3, r2
 8008172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008176:	460a      	mov	r2, r1
 8008178:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	791b      	ldrb	r3, [r3, #4]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d128      	bne.n	80081d4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800818e:	2b00      	cmp	r3, #0
 8008190:	d110      	bne.n	80081b4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	015a      	lsls	r2, r3, #5
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	4413      	add	r3, r2
 800819a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	69ba      	ldr	r2, [r7, #24]
 80081a2:	0151      	lsls	r1, r2, #5
 80081a4:	69fa      	ldr	r2, [r7, #28]
 80081a6:	440a      	add	r2, r1
 80081a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80081b0:	6013      	str	r3, [r2, #0]
 80081b2:	e00f      	b.n	80081d4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	0151      	lsls	r1, r2, #5
 80081c6:	69fa      	ldr	r2, [r7, #28]
 80081c8:	440a      	add	r2, r1
 80081ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	015a      	lsls	r2, r3, #5
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	4413      	add	r3, r2
 80081dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69ba      	ldr	r2, [r7, #24]
 80081e4:	0151      	lsls	r1, r2, #5
 80081e6:	69fa      	ldr	r2, [r7, #28]
 80081e8:	440a      	add	r2, r1
 80081ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80081f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3720      	adds	r7, #32
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	1ff80000 	.word	0x1ff80000

08008204 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008204:	b480      	push	{r7}
 8008206:	b087      	sub	sp, #28
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800820e:	2300      	movs	r3, #0
 8008210:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	785b      	ldrb	r3, [r3, #1]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d14a      	bne.n	80082b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008236:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800823a:	f040 8086 	bne.w	800834a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	4413      	add	r3, r2
 8008248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	7812      	ldrb	r2, [r2, #0]
 8008252:	0151      	lsls	r1, r2, #5
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	440a      	add	r2, r1
 8008258:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800825c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008260:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	7812      	ldrb	r2, [r2, #0]
 8008276:	0151      	lsls	r1, r2, #5
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	440a      	add	r2, r1
 800827c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008280:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008284:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	3301      	adds	r3, #1
 800828a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008292:	4293      	cmp	r3, r2
 8008294:	d902      	bls.n	800829c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	75fb      	strb	r3, [r7, #23]
          break;
 800829a:	e056      	b.n	800834a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082b4:	d0e7      	beq.n	8008286 <USB_EPStopXfer+0x82>
 80082b6:	e048      	b.n	800834a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082d0:	d13b      	bne.n	800834a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	7812      	ldrb	r2, [r2, #0]
 80082e6:	0151      	lsls	r1, r2, #5
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	440a      	add	r2, r1
 80082ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80082f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	7812      	ldrb	r2, [r2, #0]
 800830a:	0151      	lsls	r1, r2, #5
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	440a      	add	r2, r1
 8008310:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008314:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008318:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3301      	adds	r3, #1
 800831e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008326:	4293      	cmp	r3, r2
 8008328:	d902      	bls.n	8008330 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	75fb      	strb	r3, [r7, #23]
          break;
 800832e:	e00c      	b.n	800834a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	4413      	add	r3, r2
 800833a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008344:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008348:	d0e7      	beq.n	800831a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800834a:	7dfb      	ldrb	r3, [r7, #23]
}
 800834c:	4618      	mov	r0, r3
 800834e:	371c      	adds	r7, #28
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008358:	b480      	push	{r7}
 800835a:	b089      	sub	sp, #36	@ 0x24
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	4611      	mov	r1, r2
 8008364:	461a      	mov	r2, r3
 8008366:	460b      	mov	r3, r1
 8008368:	71fb      	strb	r3, [r7, #7]
 800836a:	4613      	mov	r3, r2
 800836c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008376:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800837a:	2b00      	cmp	r3, #0
 800837c:	d123      	bne.n	80083c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800837e:	88bb      	ldrh	r3, [r7, #4]
 8008380:	3303      	adds	r3, #3
 8008382:	089b      	lsrs	r3, r3, #2
 8008384:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008386:	2300      	movs	r3, #0
 8008388:	61bb      	str	r3, [r7, #24]
 800838a:	e018      	b.n	80083be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800838c:	79fb      	ldrb	r3, [r7, #7]
 800838e:	031a      	lsls	r2, r3, #12
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	4413      	add	r3, r2
 8008394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008398:	461a      	mov	r2, r3
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	3301      	adds	r3, #1
 80083a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	3301      	adds	r3, #1
 80083aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	3301      	adds	r3, #1
 80083b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	3301      	adds	r3, #1
 80083b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	3301      	adds	r3, #1
 80083bc:	61bb      	str	r3, [r7, #24]
 80083be:	69ba      	ldr	r2, [r7, #24]
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d3e2      	bcc.n	800838c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3724      	adds	r7, #36	@ 0x24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b08b      	sub	sp, #44	@ 0x2c
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	4613      	mov	r3, r2
 80083e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80083ea:	88fb      	ldrh	r3, [r7, #6]
 80083ec:	089b      	lsrs	r3, r3, #2
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80083f2:	88fb      	ldrh	r3, [r7, #6]
 80083f4:	f003 0303 	and.w	r3, r3, #3
 80083f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80083fa:	2300      	movs	r3, #0
 80083fc:	623b      	str	r3, [r7, #32]
 80083fe:	e014      	b.n	800842a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840a:	601a      	str	r2, [r3, #0]
    pDest++;
 800840c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840e:	3301      	adds	r3, #1
 8008410:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008414:	3301      	adds	r3, #1
 8008416:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800841a:	3301      	adds	r3, #1
 800841c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800841e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008420:	3301      	adds	r3, #1
 8008422:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	3301      	adds	r3, #1
 8008428:	623b      	str	r3, [r7, #32]
 800842a:	6a3a      	ldr	r2, [r7, #32]
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	429a      	cmp	r2, r3
 8008430:	d3e6      	bcc.n	8008400 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008432:	8bfb      	ldrh	r3, [r7, #30]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01e      	beq.n	8008476 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008438:	2300      	movs	r3, #0
 800843a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008442:	461a      	mov	r2, r3
 8008444:	f107 0310 	add.w	r3, r7, #16
 8008448:	6812      	ldr	r2, [r2, #0]
 800844a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	b2db      	uxtb	r3, r3
 8008452:	00db      	lsls	r3, r3, #3
 8008454:	fa22 f303 	lsr.w	r3, r2, r3
 8008458:	b2da      	uxtb	r2, r3
 800845a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845c:	701a      	strb	r2, [r3, #0]
      i++;
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	3301      	adds	r3, #1
 8008462:	623b      	str	r3, [r7, #32]
      pDest++;
 8008464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008466:	3301      	adds	r3, #1
 8008468:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800846a:	8bfb      	ldrh	r3, [r7, #30]
 800846c:	3b01      	subs	r3, #1
 800846e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008470:	8bfb      	ldrh	r3, [r7, #30]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1ea      	bne.n	800844c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008478:	4618      	mov	r0, r3
 800847a:	372c      	adds	r7, #44	@ 0x2c
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	785b      	ldrb	r3, [r3, #1]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d12c      	bne.n	80084fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	015a      	lsls	r2, r3, #5
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	4413      	add	r3, r2
 80084a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	db12      	blt.n	80084d8 <USB_EPSetStall+0x54>
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00f      	beq.n	80084d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	0151      	lsls	r1, r2, #5
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	440a      	add	r2, r1
 80084ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80084d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	0151      	lsls	r1, r2, #5
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	440a      	add	r2, r1
 80084ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80084f6:	6013      	str	r3, [r2, #0]
 80084f8:	e02b      	b.n	8008552 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	4413      	add	r3, r2
 8008502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	db12      	blt.n	8008532 <USB_EPSetStall+0xae>
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00f      	beq.n	8008532 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	015a      	lsls	r2, r3, #5
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	4413      	add	r3, r2
 800851a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	0151      	lsls	r1, r2, #5
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	440a      	add	r2, r1
 8008528:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800852c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008530:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	4413      	add	r3, r2
 800853a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	0151      	lsls	r1, r2, #5
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	440a      	add	r2, r1
 8008548:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800854c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008550:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	785b      	ldrb	r3, [r3, #1]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d128      	bne.n	80085ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	015a      	lsls	r2, r3, #5
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	4413      	add	r3, r2
 8008584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	0151      	lsls	r1, r2, #5
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	440a      	add	r2, r1
 8008592:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008596:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800859a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	791b      	ldrb	r3, [r3, #4]
 80085a0:	2b03      	cmp	r3, #3
 80085a2:	d003      	beq.n	80085ac <USB_EPClearStall+0x4c>
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	791b      	ldrb	r3, [r3, #4]
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d138      	bne.n	800861e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	015a      	lsls	r2, r3, #5
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	0151      	lsls	r1, r2, #5
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	440a      	add	r2, r1
 80085c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085ca:	6013      	str	r3, [r2, #0]
 80085cc:	e027      	b.n	800861e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	015a      	lsls	r2, r3, #5
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	4413      	add	r3, r2
 80085d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	0151      	lsls	r1, r2, #5
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	440a      	add	r2, r1
 80085e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80085ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	791b      	ldrb	r3, [r3, #4]
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d003      	beq.n	80085fe <USB_EPClearStall+0x9e>
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	791b      	ldrb	r3, [r3, #4]
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d10f      	bne.n	800861e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	4413      	add	r3, r2
 8008606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	0151      	lsls	r1, r2, #5
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	440a      	add	r2, r1
 8008614:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800861c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	460b      	mov	r3, r1
 8008636:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800864a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800864e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	78fb      	ldrb	r3, [r7, #3]
 800865a:	011b      	lsls	r3, r3, #4
 800865c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008660:	68f9      	ldr	r1, [r7, #12]
 8008662:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008666:	4313      	orrs	r3, r2
 8008668:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008692:	f023 0303 	bic.w	r3, r3, #3
 8008696:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80086a6:	f023 0302 	bic.w	r3, r3, #2
 80086aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b085      	sub	sp, #20
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80086d4:	f023 0303 	bic.w	r3, r3, #3
 80086d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80086e8:	f043 0302 	orr.w	r3, r3, #2
 80086ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	4013      	ands	r3, r2
 8008712:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008714:	68fb      	ldr	r3, [r7, #12]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008722:	b480      	push	{r7}
 8008724:	b085      	sub	sp, #20
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800873e:	69db      	ldr	r3, [r3, #28]
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	4013      	ands	r3, r2
 8008744:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	0c1b      	lsrs	r3, r3, #16
}
 800874a:	4618      	mov	r0, r3
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr

08008756 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008756:	b480      	push	{r7}
 8008758:	b085      	sub	sp, #20
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008772:	69db      	ldr	r3, [r3, #28]
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	4013      	ands	r3, r2
 8008778:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	b29b      	uxth	r3, r3
}
 800877e:	4618      	mov	r0, r3
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr

0800878a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800878a:	b480      	push	{r7}
 800878c:	b085      	sub	sp, #20
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	460b      	mov	r3, r1
 8008794:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800879a:	78fb      	ldrb	r3, [r7, #3]
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	4013      	ands	r3, r2
 80087b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80087b8:	68bb      	ldr	r3, [r7, #8]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3714      	adds	r7, #20
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b087      	sub	sp, #28
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	460b      	mov	r3, r1
 80087d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80087ea:	78fb      	ldrb	r3, [r7, #3]
 80087ec:	f003 030f 	and.w	r3, r3, #15
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	fa22 f303 	lsr.w	r3, r2, r3
 80087f6:	01db      	lsls	r3, r3, #7
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008800:	78fb      	ldrb	r3, [r7, #3]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	4013      	ands	r3, r2
 8008812:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008814:	68bb      	ldr	r3, [r7, #8]
}
 8008816:	4618      	mov	r0, r3
 8008818:	371c      	adds	r7, #28
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008822:	b480      	push	{r7}
 8008824:	b083      	sub	sp, #12
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	f003 0301 	and.w	r3, r3, #1
}
 8008832:	4618      	mov	r0, r3
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800883e:	b480      	push	{r7}
 8008840:	b085      	sub	sp, #20
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008858:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800885c:	f023 0307 	bic.w	r3, r3, #7
 8008860:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008874:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008884:	b480      	push	{r7}
 8008886:	b087      	sub	sp, #28
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	460b      	mov	r3, r1
 800888e:	607a      	str	r2, [r7, #4]
 8008890:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	333c      	adds	r3, #60	@ 0x3c
 800889a:	3304      	adds	r3, #4
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	4a26      	ldr	r2, [pc, #152]	@ (800893c <USB_EP0_OutStart+0xb8>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d90a      	bls.n	80088be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088b8:	d101      	bne.n	80088be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	e037      	b.n	800892e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088c4:	461a      	mov	r2, r3
 80088c6:	2300      	movs	r3, #0
 80088c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80088dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088ec:	f043 0318 	orr.w	r3, r3, #24
 80088f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008900:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008904:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008906:	7afb      	ldrb	r3, [r7, #11]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d10f      	bne.n	800892c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008912:	461a      	mov	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008926:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800892a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	371c      	adds	r7, #28
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	4f54300a 	.word	0x4f54300a

08008940 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008948:	2300      	movs	r3, #0
 800894a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	3301      	adds	r3, #1
 8008950:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008958:	d901      	bls.n	800895e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e01b      	b.n	8008996 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	2b00      	cmp	r3, #0
 8008964:	daf2      	bge.n	800894c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008966:	2300      	movs	r3, #0
 8008968:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	f043 0201 	orr.w	r2, r3, #1
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3301      	adds	r3, #1
 800897a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008982:	d901      	bls.n	8008988 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e006      	b.n	8008996 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	2b01      	cmp	r3, #1
 8008992:	d0f0      	beq.n	8008976 <USB_CoreReset+0x36>

  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
	...

080089a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	460b      	mov	r3, r1
 80089ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80089b0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80089b4:	f002 fc2e 	bl	800b214 <USBD_static_malloc>
 80089b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d109      	bne.n	80089d4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	32b0      	adds	r2, #176	@ 0xb0
 80089ca:	2100      	movs	r1, #0
 80089cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80089d0:	2302      	movs	r3, #2
 80089d2:	e0d4      	b.n	8008b7e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80089d4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80089d8:	2100      	movs	r1, #0
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f003 f9ef 	bl	800bdbe <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	32b0      	adds	r2, #176	@ 0xb0
 80089ea:	68f9      	ldr	r1, [r7, #12]
 80089ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	32b0      	adds	r2, #176	@ 0xb0
 80089fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	7c1b      	ldrb	r3, [r3, #16]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d138      	bne.n	8008a7e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008a0c:	4b5e      	ldr	r3, [pc, #376]	@ (8008b88 <USBD_CDC_Init+0x1e4>)
 8008a0e:	7819      	ldrb	r1, [r3, #0]
 8008a10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a14:	2202      	movs	r2, #2
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f002 fad9 	bl	800afce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008a1c:	4b5a      	ldr	r3, [pc, #360]	@ (8008b88 <USBD_CDC_Init+0x1e4>)
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	f003 020f 	and.w	r2, r3, #15
 8008a24:	6879      	ldr	r1, [r7, #4]
 8008a26:	4613      	mov	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	440b      	add	r3, r1
 8008a30:	3324      	adds	r3, #36	@ 0x24
 8008a32:	2201      	movs	r2, #1
 8008a34:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008a36:	4b55      	ldr	r3, [pc, #340]	@ (8008b8c <USBD_CDC_Init+0x1e8>)
 8008a38:	7819      	ldrb	r1, [r3, #0]
 8008a3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a3e:	2202      	movs	r2, #2
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f002 fac4 	bl	800afce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008a46:	4b51      	ldr	r3, [pc, #324]	@ (8008b8c <USBD_CDC_Init+0x1e8>)
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	f003 020f 	and.w	r2, r3, #15
 8008a4e:	6879      	ldr	r1, [r7, #4]
 8008a50:	4613      	mov	r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4413      	add	r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	440b      	add	r3, r1
 8008a5a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a5e:	2201      	movs	r2, #1
 8008a60:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008a62:	4b4b      	ldr	r3, [pc, #300]	@ (8008b90 <USBD_CDC_Init+0x1ec>)
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	f003 020f 	and.w	r2, r3, #15
 8008a6a:	6879      	ldr	r1, [r7, #4]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	440b      	add	r3, r1
 8008a76:	3326      	adds	r3, #38	@ 0x26
 8008a78:	2210      	movs	r2, #16
 8008a7a:	801a      	strh	r2, [r3, #0]
 8008a7c:	e035      	b.n	8008aea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008a7e:	4b42      	ldr	r3, [pc, #264]	@ (8008b88 <USBD_CDC_Init+0x1e4>)
 8008a80:	7819      	ldrb	r1, [r3, #0]
 8008a82:	2340      	movs	r3, #64	@ 0x40
 8008a84:	2202      	movs	r2, #2
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f002 faa1 	bl	800afce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008a8c:	4b3e      	ldr	r3, [pc, #248]	@ (8008b88 <USBD_CDC_Init+0x1e4>)
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	f003 020f 	and.w	r2, r3, #15
 8008a94:	6879      	ldr	r1, [r7, #4]
 8008a96:	4613      	mov	r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	440b      	add	r3, r1
 8008aa0:	3324      	adds	r3, #36	@ 0x24
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008aa6:	4b39      	ldr	r3, [pc, #228]	@ (8008b8c <USBD_CDC_Init+0x1e8>)
 8008aa8:	7819      	ldrb	r1, [r3, #0]
 8008aaa:	2340      	movs	r3, #64	@ 0x40
 8008aac:	2202      	movs	r2, #2
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f002 fa8d 	bl	800afce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008ab4:	4b35      	ldr	r3, [pc, #212]	@ (8008b8c <USBD_CDC_Init+0x1e8>)
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	f003 020f 	and.w	r2, r3, #15
 8008abc:	6879      	ldr	r1, [r7, #4]
 8008abe:	4613      	mov	r3, r2
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	440b      	add	r3, r1
 8008ac8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008acc:	2201      	movs	r2, #1
 8008ace:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8008b90 <USBD_CDC_Init+0x1ec>)
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	f003 020f 	and.w	r2, r3, #15
 8008ad8:	6879      	ldr	r1, [r7, #4]
 8008ada:	4613      	mov	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	440b      	add	r3, r1
 8008ae4:	3326      	adds	r3, #38	@ 0x26
 8008ae6:	2210      	movs	r2, #16
 8008ae8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008aea:	4b29      	ldr	r3, [pc, #164]	@ (8008b90 <USBD_CDC_Init+0x1ec>)
 8008aec:	7819      	ldrb	r1, [r3, #0]
 8008aee:	2308      	movs	r3, #8
 8008af0:	2203      	movs	r2, #3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f002 fa6b 	bl	800afce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008af8:	4b25      	ldr	r3, [pc, #148]	@ (8008b90 <USBD_CDC_Init+0x1ec>)
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	f003 020f 	and.w	r2, r3, #15
 8008b00:	6879      	ldr	r1, [r7, #4]
 8008b02:	4613      	mov	r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4413      	add	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	440b      	add	r3, r1
 8008b0c:	3324      	adds	r3, #36	@ 0x24
 8008b0e:	2201      	movs	r2, #1
 8008b10:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	33b0      	adds	r3, #176	@ 0xb0
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	4413      	add	r3, r2
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d101      	bne.n	8008b4c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008b48:	2302      	movs	r3, #2
 8008b4a:	e018      	b.n	8008b7e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	7c1b      	ldrb	r3, [r3, #16]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10a      	bne.n	8008b6a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b54:	4b0d      	ldr	r3, [pc, #52]	@ (8008b8c <USBD_CDC_Init+0x1e8>)
 8008b56:	7819      	ldrb	r1, [r3, #0]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f002 fb22 	bl	800b1ac <USBD_LL_PrepareReceive>
 8008b68:	e008      	b.n	8008b7c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b6a:	4b08      	ldr	r3, [pc, #32]	@ (8008b8c <USBD_CDC_Init+0x1e8>)
 8008b6c:	7819      	ldrb	r1, [r3, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b74:	2340      	movs	r3, #64	@ 0x40
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f002 fb18 	bl	800b1ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	20000093 	.word	0x20000093
 8008b8c:	20000094 	.word	0x20000094
 8008b90:	20000095 	.word	0x20000095

08008b94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8008c8c <USBD_CDC_DeInit+0xf8>)
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f002 fa37 	bl	800b01a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008bac:	4b37      	ldr	r3, [pc, #220]	@ (8008c8c <USBD_CDC_DeInit+0xf8>)
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	f003 020f 	and.w	r2, r3, #15
 8008bb4:	6879      	ldr	r1, [r7, #4]
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	440b      	add	r3, r1
 8008bc0:	3324      	adds	r3, #36	@ 0x24
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008bc6:	4b32      	ldr	r3, [pc, #200]	@ (8008c90 <USBD_CDC_DeInit+0xfc>)
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f002 fa24 	bl	800b01a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8008c90 <USBD_CDC_DeInit+0xfc>)
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	f003 020f 	and.w	r2, r3, #15
 8008bda:	6879      	ldr	r1, [r7, #4]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	440b      	add	r3, r1
 8008be6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008bea:	2200      	movs	r2, #0
 8008bec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008bee:	4b29      	ldr	r3, [pc, #164]	@ (8008c94 <USBD_CDC_DeInit+0x100>)
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f002 fa10 	bl	800b01a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008bfa:	4b26      	ldr	r3, [pc, #152]	@ (8008c94 <USBD_CDC_DeInit+0x100>)
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	f003 020f 	and.w	r2, r3, #15
 8008c02:	6879      	ldr	r1, [r7, #4]
 8008c04:	4613      	mov	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4413      	add	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	440b      	add	r3, r1
 8008c0e:	3324      	adds	r3, #36	@ 0x24
 8008c10:	2200      	movs	r2, #0
 8008c12:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008c14:	4b1f      	ldr	r3, [pc, #124]	@ (8008c94 <USBD_CDC_DeInit+0x100>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	f003 020f 	and.w	r2, r3, #15
 8008c1c:	6879      	ldr	r1, [r7, #4]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	440b      	add	r3, r1
 8008c28:	3326      	adds	r3, #38	@ 0x26
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	32b0      	adds	r2, #176	@ 0xb0
 8008c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d01f      	beq.n	8008c80 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	33b0      	adds	r3, #176	@ 0xb0
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	32b0      	adds	r2, #176	@ 0xb0
 8008c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f002 fae4 	bl	800b230 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	32b0      	adds	r2, #176	@ 0xb0
 8008c72:	2100      	movs	r1, #0
 8008c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	20000093 	.word	0x20000093
 8008c90:	20000094 	.word	0x20000094
 8008c94:	20000095 	.word	0x20000095

08008c98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	32b0      	adds	r2, #176	@ 0xb0
 8008cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e0bf      	b.n	8008e48 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d050      	beq.n	8008d76 <USBD_CDC_Setup+0xde>
 8008cd4:	2b20      	cmp	r3, #32
 8008cd6:	f040 80af 	bne.w	8008e38 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	88db      	ldrh	r3, [r3, #6]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d03a      	beq.n	8008d58 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	b25b      	sxtb	r3, r3
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	da1b      	bge.n	8008d24 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	33b0      	adds	r3, #176	@ 0xb0
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4413      	add	r3, r2
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	683a      	ldr	r2, [r7, #0]
 8008d00:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008d02:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008d04:	683a      	ldr	r2, [r7, #0]
 8008d06:	88d2      	ldrh	r2, [r2, #6]
 8008d08:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	88db      	ldrh	r3, [r3, #6]
 8008d0e:	2b07      	cmp	r3, #7
 8008d10:	bf28      	it	cs
 8008d12:	2307      	movcs	r3, #7
 8008d14:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	89fa      	ldrh	r2, [r7, #14]
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f001 fd53 	bl	800a7c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008d22:	e090      	b.n	8008e46 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	785a      	ldrb	r2, [r3, #1]
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	88db      	ldrh	r3, [r3, #6]
 8008d32:	2b3f      	cmp	r3, #63	@ 0x3f
 8008d34:	d803      	bhi.n	8008d3e <USBD_CDC_Setup+0xa6>
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	88db      	ldrh	r3, [r3, #6]
 8008d3a:	b2da      	uxtb	r2, r3
 8008d3c:	e000      	b.n	8008d40 <USBD_CDC_Setup+0xa8>
 8008d3e:	2240      	movs	r2, #64	@ 0x40
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008d46:	6939      	ldr	r1, [r7, #16]
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008d4e:	461a      	mov	r2, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f001 fd65 	bl	800a820 <USBD_CtlPrepareRx>
      break;
 8008d56:	e076      	b.n	8008e46 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	33b0      	adds	r3, #176	@ 0xb0
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	7850      	ldrb	r0, [r2, #1]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	4798      	blx	r3
      break;
 8008d74:	e067      	b.n	8008e46 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	785b      	ldrb	r3, [r3, #1]
 8008d7a:	2b0b      	cmp	r3, #11
 8008d7c:	d851      	bhi.n	8008e22 <USBD_CDC_Setup+0x18a>
 8008d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d84 <USBD_CDC_Setup+0xec>)
 8008d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d84:	08008db5 	.word	0x08008db5
 8008d88:	08008e31 	.word	0x08008e31
 8008d8c:	08008e23 	.word	0x08008e23
 8008d90:	08008e23 	.word	0x08008e23
 8008d94:	08008e23 	.word	0x08008e23
 8008d98:	08008e23 	.word	0x08008e23
 8008d9c:	08008e23 	.word	0x08008e23
 8008da0:	08008e23 	.word	0x08008e23
 8008da4:	08008e23 	.word	0x08008e23
 8008da8:	08008e23 	.word	0x08008e23
 8008dac:	08008ddf 	.word	0x08008ddf
 8008db0:	08008e09 	.word	0x08008e09
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b03      	cmp	r3, #3
 8008dbe:	d107      	bne.n	8008dd0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008dc0:	f107 030a 	add.w	r3, r7, #10
 8008dc4:	2202      	movs	r2, #2
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f001 fcfd 	bl	800a7c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008dce:	e032      	b.n	8008e36 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f001 fc7b 	bl	800a6ce <USBD_CtlError>
            ret = USBD_FAIL;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	75fb      	strb	r3, [r7, #23]
          break;
 8008ddc:	e02b      	b.n	8008e36 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	d107      	bne.n	8008dfa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008dea:	f107 030d 	add.w	r3, r7, #13
 8008dee:	2201      	movs	r2, #1
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f001 fce8 	bl	800a7c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008df8:	e01d      	b.n	8008e36 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f001 fc66 	bl	800a6ce <USBD_CtlError>
            ret = USBD_FAIL;
 8008e02:	2303      	movs	r3, #3
 8008e04:	75fb      	strb	r3, [r7, #23]
          break;
 8008e06:	e016      	b.n	8008e36 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b03      	cmp	r3, #3
 8008e12:	d00f      	beq.n	8008e34 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f001 fc59 	bl	800a6ce <USBD_CtlError>
            ret = USBD_FAIL;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008e20:	e008      	b.n	8008e34 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008e22:	6839      	ldr	r1, [r7, #0]
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f001 fc52 	bl	800a6ce <USBD_CtlError>
          ret = USBD_FAIL;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	75fb      	strb	r3, [r7, #23]
          break;
 8008e2e:	e002      	b.n	8008e36 <USBD_CDC_Setup+0x19e>
          break;
 8008e30:	bf00      	nop
 8008e32:	e008      	b.n	8008e46 <USBD_CDC_Setup+0x1ae>
          break;
 8008e34:	bf00      	nop
      }
      break;
 8008e36:	e006      	b.n	8008e46 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f001 fc47 	bl	800a6ce <USBD_CtlError>
      ret = USBD_FAIL;
 8008e40:	2303      	movs	r3, #3
 8008e42:	75fb      	strb	r3, [r7, #23]
      break;
 8008e44:	bf00      	nop
  }

  return (uint8_t)ret;
 8008e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3718      	adds	r7, #24
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	460b      	mov	r3, r1
 8008e5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	32b0      	adds	r2, #176	@ 0xb0
 8008e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d101      	bne.n	8008e7a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e065      	b.n	8008f46 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	32b0      	adds	r2, #176	@ 0xb0
 8008e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e88:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008e8a:	78fb      	ldrb	r3, [r7, #3]
 8008e8c:	f003 020f 	and.w	r2, r3, #15
 8008e90:	6879      	ldr	r1, [r7, #4]
 8008e92:	4613      	mov	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	4413      	add	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	440b      	add	r3, r1
 8008e9c:	3318      	adds	r3, #24
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d02f      	beq.n	8008f04 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008ea4:	78fb      	ldrb	r3, [r7, #3]
 8008ea6:	f003 020f 	and.w	r2, r3, #15
 8008eaa:	6879      	ldr	r1, [r7, #4]
 8008eac:	4613      	mov	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	4413      	add	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	440b      	add	r3, r1
 8008eb6:	3318      	adds	r3, #24
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	f003 010f 	and.w	r1, r3, #15
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	00db      	lsls	r3, r3, #3
 8008ec6:	440b      	add	r3, r1
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	4403      	add	r3, r0
 8008ecc:	331c      	adds	r3, #28
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	fbb2 f1f3 	udiv	r1, r2, r3
 8008ed4:	fb01 f303 	mul.w	r3, r1, r3
 8008ed8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d112      	bne.n	8008f04 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008ede:	78fb      	ldrb	r3, [r7, #3]
 8008ee0:	f003 020f 	and.w	r2, r3, #15
 8008ee4:	6879      	ldr	r1, [r7, #4]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	4413      	add	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	440b      	add	r3, r1
 8008ef0:	3318      	adds	r3, #24
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008ef6:	78f9      	ldrb	r1, [r7, #3]
 8008ef8:	2300      	movs	r3, #0
 8008efa:	2200      	movs	r2, #0
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f002 f934 	bl	800b16a <USBD_LL_Transmit>
 8008f02:	e01f      	b.n	8008f44 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	33b0      	adds	r3, #176	@ 0xb0
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d010      	beq.n	8008f44 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	33b0      	adds	r3, #176	@ 0xb0
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4413      	add	r3, r2
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008f40:	78fa      	ldrb	r2, [r7, #3]
 8008f42:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	460b      	mov	r3, r1
 8008f58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	32b0      	adds	r2, #176	@ 0xb0
 8008f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	32b0      	adds	r2, #176	@ 0xb0
 8008f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	e01a      	b.n	8008fb6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008f80:	78fb      	ldrb	r3, [r7, #3]
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f002 f932 	bl	800b1ee <USBD_LL_GetRxDataSize>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	33b0      	adds	r3, #176	@ 0xb0
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	4413      	add	r3, r2
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	32b0      	adds	r2, #176	@ 0xb0
 8008fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fd4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d101      	bne.n	8008fe0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e024      	b.n	800902a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	33b0      	adds	r3, #176	@ 0xb0
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	4413      	add	r3, r2
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d019      	beq.n	8009028 <USBD_CDC_EP0_RxReady+0x6a>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008ffa:	2bff      	cmp	r3, #255	@ 0xff
 8008ffc:	d014      	beq.n	8009028 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	33b0      	adds	r3, #176	@ 0xb0
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	4413      	add	r3, r2
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009016:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800901e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	22ff      	movs	r2, #255	@ 0xff
 8009024:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
	...

08009034 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800903c:	2182      	movs	r1, #130	@ 0x82
 800903e:	4818      	ldr	r0, [pc, #96]	@ (80090a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009040:	f000 fd0f 	bl	8009a62 <USBD_GetEpDesc>
 8009044:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009046:	2101      	movs	r1, #1
 8009048:	4815      	ldr	r0, [pc, #84]	@ (80090a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800904a:	f000 fd0a 	bl	8009a62 <USBD_GetEpDesc>
 800904e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009050:	2181      	movs	r1, #129	@ 0x81
 8009052:	4813      	ldr	r0, [pc, #76]	@ (80090a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009054:	f000 fd05 	bl	8009a62 <USBD_GetEpDesc>
 8009058:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	2210      	movs	r2, #16
 8009064:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d006      	beq.n	800907a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	2200      	movs	r2, #0
 8009070:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009074:	711a      	strb	r2, [r3, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d006      	beq.n	800908e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009088:	711a      	strb	r2, [r3, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2243      	movs	r2, #67	@ 0x43
 8009092:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009094:	4b02      	ldr	r3, [pc, #8]	@ (80090a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009096:	4618      	mov	r0, r3
 8009098:	3718      	adds	r7, #24
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	20000050 	.word	0x20000050

080090a4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b086      	sub	sp, #24
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80090ac:	2182      	movs	r1, #130	@ 0x82
 80090ae:	4818      	ldr	r0, [pc, #96]	@ (8009110 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80090b0:	f000 fcd7 	bl	8009a62 <USBD_GetEpDesc>
 80090b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80090b6:	2101      	movs	r1, #1
 80090b8:	4815      	ldr	r0, [pc, #84]	@ (8009110 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80090ba:	f000 fcd2 	bl	8009a62 <USBD_GetEpDesc>
 80090be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80090c0:	2181      	movs	r1, #129	@ 0x81
 80090c2:	4813      	ldr	r0, [pc, #76]	@ (8009110 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80090c4:	f000 fccd 	bl	8009a62 <USBD_GetEpDesc>
 80090c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	2210      	movs	r2, #16
 80090d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d006      	beq.n	80090ea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	2200      	movs	r2, #0
 80090e0:	711a      	strb	r2, [r3, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f042 0202 	orr.w	r2, r2, #2
 80090e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d006      	beq.n	80090fe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	711a      	strb	r2, [r3, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f042 0202 	orr.w	r2, r2, #2
 80090fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2243      	movs	r2, #67	@ 0x43
 8009102:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009104:	4b02      	ldr	r3, [pc, #8]	@ (8009110 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	20000050 	.word	0x20000050

08009114 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800911c:	2182      	movs	r1, #130	@ 0x82
 800911e:	4818      	ldr	r0, [pc, #96]	@ (8009180 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009120:	f000 fc9f 	bl	8009a62 <USBD_GetEpDesc>
 8009124:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009126:	2101      	movs	r1, #1
 8009128:	4815      	ldr	r0, [pc, #84]	@ (8009180 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800912a:	f000 fc9a 	bl	8009a62 <USBD_GetEpDesc>
 800912e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009130:	2181      	movs	r1, #129	@ 0x81
 8009132:	4813      	ldr	r0, [pc, #76]	@ (8009180 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009134:	f000 fc95 	bl	8009a62 <USBD_GetEpDesc>
 8009138:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	2210      	movs	r2, #16
 8009144:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d006      	beq.n	800915a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	2200      	movs	r2, #0
 8009150:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009154:	711a      	strb	r2, [r3, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d006      	beq.n	800916e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2200      	movs	r2, #0
 8009164:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009168:	711a      	strb	r2, [r3, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2243      	movs	r2, #67	@ 0x43
 8009172:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009174:	4b02      	ldr	r3, [pc, #8]	@ (8009180 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009176:	4618      	mov	r0, r3
 8009178:	3718      	adds	r7, #24
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	20000050 	.word	0x20000050

08009184 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	220a      	movs	r2, #10
 8009190:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009192:	4b03      	ldr	r3, [pc, #12]	@ (80091a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009194:	4618      	mov	r0, r3
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	2000000c 	.word	0x2000000c

080091a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d101      	bne.n	80091b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80091b4:	2303      	movs	r3, #3
 80091b6:	e009      	b.n	80091cc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	33b0      	adds	r3, #176	@ 0xb0
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80091d8:	b480      	push	{r7}
 80091da:	b087      	sub	sp, #28
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	32b0      	adds	r2, #176	@ 0xb0
 80091ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e008      	b.n	8009210 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800920e:	2300      	movs	r3, #0
}
 8009210:	4618      	mov	r0, r3
 8009212:	371c      	adds	r7, #28
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	32b0      	adds	r2, #176	@ 0xb0
 8009230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009234:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d101      	bne.n	8009240 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800923c:	2303      	movs	r3, #3
 800923e:	e004      	b.n	800924a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3714      	adds	r7, #20
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
	...

08009258 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	32b0      	adds	r2, #176	@ 0xb0
 800926a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	32b0      	adds	r2, #176	@ 0xb0
 800927a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d101      	bne.n	8009286 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009282:	2303      	movs	r3, #3
 8009284:	e018      	b.n	80092b8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	7c1b      	ldrb	r3, [r3, #16]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10a      	bne.n	80092a4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800928e:	4b0c      	ldr	r3, [pc, #48]	@ (80092c0 <USBD_CDC_ReceivePacket+0x68>)
 8009290:	7819      	ldrb	r1, [r3, #0]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009298:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f001 ff85 	bl	800b1ac <USBD_LL_PrepareReceive>
 80092a2:	e008      	b.n	80092b6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80092a4:	4b06      	ldr	r3, [pc, #24]	@ (80092c0 <USBD_CDC_ReceivePacket+0x68>)
 80092a6:	7819      	ldrb	r1, [r3, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80092ae:	2340      	movs	r3, #64	@ 0x40
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f001 ff7b 	bl	800b1ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	20000094 	.word	0x20000094

080092c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	4613      	mov	r3, r2
 80092d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80092d8:	2303      	movs	r3, #3
 80092da:	e01f      	b.n	800931c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	79fa      	ldrb	r2, [r7, #7]
 800930e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f001 fdf5 	bl	800af00 <USBD_LL_Init>
 8009316:	4603      	mov	r3, r0
 8009318:	75fb      	strb	r3, [r7, #23]

  return ret;
 800931a:	7dfb      	ldrb	r3, [r7, #23]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800932e:	2300      	movs	r3, #0
 8009330:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d101      	bne.n	800933c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009338:	2303      	movs	r3, #3
 800933a:	e025      	b.n	8009388 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	32ae      	adds	r2, #174	@ 0xae
 800934e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00f      	beq.n	8009378 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	32ae      	adds	r2, #174	@ 0xae
 8009362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009368:	f107 020e 	add.w	r2, r7, #14
 800936c:	4610      	mov	r0, r2
 800936e:	4798      	blx	r3
 8009370:	4602      	mov	r2, r0
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800937e:	1c5a      	adds	r2, r3, #1
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f001 fdfd 	bl	800af98 <USBD_LL_Start>
 800939e:	4603      	mov	r3, r0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80093b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	370c      	adds	r7, #12
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b084      	sub	sp, #16
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	460b      	mov	r3, r1
 80093c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d009      	beq.n	80093ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	78fa      	ldrb	r2, [r7, #3]
 80093e2:	4611      	mov	r1, r2
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	4798      	blx	r3
 80093e8:	4603      	mov	r3, r0
 80093ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b084      	sub	sp, #16
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	460b      	mov	r3, r1
 8009400:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009402:	2300      	movs	r3, #0
 8009404:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	78fa      	ldrb	r2, [r7, #3]
 8009410:	4611      	mov	r1, r2
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	4798      	blx	r3
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800941c:	2303      	movs	r3, #3
 800941e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009420:	7bfb      	ldrb	r3, [r7, #15]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b084      	sub	sp, #16
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	4618      	mov	r0, r3
 800943e:	f001 f90c 	bl	800a65a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2201      	movs	r2, #1
 8009446:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009450:	461a      	mov	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800945e:	f003 031f 	and.w	r3, r3, #31
 8009462:	2b02      	cmp	r3, #2
 8009464:	d01a      	beq.n	800949c <USBD_LL_SetupStage+0x72>
 8009466:	2b02      	cmp	r3, #2
 8009468:	d822      	bhi.n	80094b0 <USBD_LL_SetupStage+0x86>
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <USBD_LL_SetupStage+0x4a>
 800946e:	2b01      	cmp	r3, #1
 8009470:	d00a      	beq.n	8009488 <USBD_LL_SetupStage+0x5e>
 8009472:	e01d      	b.n	80094b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800947a:	4619      	mov	r1, r3
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fb63 	bl	8009b48 <USBD_StdDevReq>
 8009482:	4603      	mov	r3, r0
 8009484:	73fb      	strb	r3, [r7, #15]
      break;
 8009486:	e020      	b.n	80094ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fbcb 	bl	8009c2c <USBD_StdItfReq>
 8009496:	4603      	mov	r3, r0
 8009498:	73fb      	strb	r3, [r7, #15]
      break;
 800949a:	e016      	b.n	80094ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80094a2:	4619      	mov	r1, r3
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fc2d 	bl	8009d04 <USBD_StdEPReq>
 80094aa:	4603      	mov	r3, r0
 80094ac:	73fb      	strb	r3, [r7, #15]
      break;
 80094ae:	e00c      	b.n	80094ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80094b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	4619      	mov	r1, r3
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f001 fdca 	bl	800b058 <USBD_LL_StallEP>
 80094c4:	4603      	mov	r3, r0
 80094c6:	73fb      	strb	r3, [r7, #15]
      break;
 80094c8:	bf00      	nop
  }

  return ret;
 80094ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	460b      	mov	r3, r1
 80094de:	607a      	str	r2, [r7, #4]
 80094e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80094e6:	7afb      	ldrb	r3, [r7, #11]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d16e      	bne.n	80095ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80094f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	f040 8098 	bne.w	8009630 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	689a      	ldr	r2, [r3, #8]
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	429a      	cmp	r2, r3
 800950a:	d913      	bls.n	8009534 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	689a      	ldr	r2, [r3, #8]
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	1ad2      	subs	r2, r2, r3
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	68da      	ldr	r2, [r3, #12]
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	4293      	cmp	r3, r2
 8009524:	bf28      	it	cs
 8009526:	4613      	movcs	r3, r2
 8009528:	461a      	mov	r2, r3
 800952a:	6879      	ldr	r1, [r7, #4]
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f001 f994 	bl	800a85a <USBD_CtlContinueRx>
 8009532:	e07d      	b.n	8009630 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800953a:	f003 031f 	and.w	r3, r3, #31
 800953e:	2b02      	cmp	r3, #2
 8009540:	d014      	beq.n	800956c <USBD_LL_DataOutStage+0x98>
 8009542:	2b02      	cmp	r3, #2
 8009544:	d81d      	bhi.n	8009582 <USBD_LL_DataOutStage+0xae>
 8009546:	2b00      	cmp	r3, #0
 8009548:	d002      	beq.n	8009550 <USBD_LL_DataOutStage+0x7c>
 800954a:	2b01      	cmp	r3, #1
 800954c:	d003      	beq.n	8009556 <USBD_LL_DataOutStage+0x82>
 800954e:	e018      	b.n	8009582 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009550:	2300      	movs	r3, #0
 8009552:	75bb      	strb	r3, [r7, #22]
            break;
 8009554:	e018      	b.n	8009588 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800955c:	b2db      	uxtb	r3, r3
 800955e:	4619      	mov	r1, r3
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f000 fa64 	bl	8009a2e <USBD_CoreFindIF>
 8009566:	4603      	mov	r3, r0
 8009568:	75bb      	strb	r3, [r7, #22]
            break;
 800956a:	e00d      	b.n	8009588 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009572:	b2db      	uxtb	r3, r3
 8009574:	4619      	mov	r1, r3
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f000 fa66 	bl	8009a48 <USBD_CoreFindEP>
 800957c:	4603      	mov	r3, r0
 800957e:	75bb      	strb	r3, [r7, #22]
            break;
 8009580:	e002      	b.n	8009588 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009582:	2300      	movs	r3, #0
 8009584:	75bb      	strb	r3, [r7, #22]
            break;
 8009586:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009588:	7dbb      	ldrb	r3, [r7, #22]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d119      	bne.n	80095c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b03      	cmp	r3, #3
 8009598:	d113      	bne.n	80095c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800959a:	7dba      	ldrb	r2, [r7, #22]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	32ae      	adds	r2, #174	@ 0xae
 80095a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00b      	beq.n	80095c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80095aa:	7dba      	ldrb	r2, [r7, #22]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80095b2:	7dba      	ldrb	r2, [r7, #22]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	32ae      	adds	r2, #174	@ 0xae
 80095b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f001 f95a 	bl	800a87c <USBD_CtlSendStatus>
 80095c8:	e032      	b.n	8009630 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80095ca:	7afb      	ldrb	r3, [r7, #11]
 80095cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	4619      	mov	r1, r3
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f000 fa37 	bl	8009a48 <USBD_CoreFindEP>
 80095da:	4603      	mov	r3, r0
 80095dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095de:	7dbb      	ldrb	r3, [r7, #22]
 80095e0:	2bff      	cmp	r3, #255	@ 0xff
 80095e2:	d025      	beq.n	8009630 <USBD_LL_DataOutStage+0x15c>
 80095e4:	7dbb      	ldrb	r3, [r7, #22]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d122      	bne.n	8009630 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	d117      	bne.n	8009626 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80095f6:	7dba      	ldrb	r2, [r7, #22]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	32ae      	adds	r2, #174	@ 0xae
 80095fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00f      	beq.n	8009626 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009606:	7dba      	ldrb	r2, [r7, #22]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800960e:	7dba      	ldrb	r2, [r7, #22]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	32ae      	adds	r2, #174	@ 0xae
 8009614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	7afa      	ldrb	r2, [r7, #11]
 800961c:	4611      	mov	r1, r2
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	4798      	blx	r3
 8009622:	4603      	mov	r3, r0
 8009624:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009626:	7dfb      	ldrb	r3, [r7, #23]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800962c:	7dfb      	ldrb	r3, [r7, #23]
 800962e:	e000      	b.n	8009632 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3718      	adds	r7, #24
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b086      	sub	sp, #24
 800963e:	af00      	add	r7, sp, #0
 8009640:	60f8      	str	r0, [r7, #12]
 8009642:	460b      	mov	r3, r1
 8009644:	607a      	str	r2, [r7, #4]
 8009646:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009648:	7afb      	ldrb	r3, [r7, #11]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d16f      	bne.n	800972e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	3314      	adds	r3, #20
 8009652:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800965a:	2b02      	cmp	r3, #2
 800965c:	d15a      	bne.n	8009714 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	689a      	ldr	r2, [r3, #8]
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	429a      	cmp	r2, r3
 8009668:	d914      	bls.n	8009694 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	689a      	ldr	r2, [r3, #8]
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	1ad2      	subs	r2, r2, r3
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	461a      	mov	r2, r3
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f001 f8bc 	bl	800a7fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009686:	2300      	movs	r3, #0
 8009688:	2200      	movs	r2, #0
 800968a:	2100      	movs	r1, #0
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f001 fd8d 	bl	800b1ac <USBD_LL_PrepareReceive>
 8009692:	e03f      	b.n	8009714 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	68da      	ldr	r2, [r3, #12]
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	429a      	cmp	r2, r3
 800969e:	d11c      	bne.n	80096da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	685a      	ldr	r2, [r3, #4]
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d316      	bcc.n	80096da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	685a      	ldr	r2, [r3, #4]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d20f      	bcs.n	80096da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80096ba:	2200      	movs	r2, #0
 80096bc:	2100      	movs	r1, #0
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f001 f89d 	bl	800a7fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096cc:	2300      	movs	r3, #0
 80096ce:	2200      	movs	r2, #0
 80096d0:	2100      	movs	r1, #0
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f001 fd6a 	bl	800b1ac <USBD_LL_PrepareReceive>
 80096d8:	e01c      	b.n	8009714 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b03      	cmp	r3, #3
 80096e4:	d10f      	bne.n	8009706 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d009      	beq.n	8009706 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009706:	2180      	movs	r1, #128	@ 0x80
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f001 fca5 	bl	800b058 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f001 f8c7 	bl	800a8a2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d03a      	beq.n	8009794 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f7ff fe42 	bl	80093a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2200      	movs	r2, #0
 8009728:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800972c:	e032      	b.n	8009794 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800972e:	7afb      	ldrb	r3, [r7, #11]
 8009730:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009734:	b2db      	uxtb	r3, r3
 8009736:	4619      	mov	r1, r3
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f000 f985 	bl	8009a48 <USBD_CoreFindEP>
 800973e:	4603      	mov	r3, r0
 8009740:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009742:	7dfb      	ldrb	r3, [r7, #23]
 8009744:	2bff      	cmp	r3, #255	@ 0xff
 8009746:	d025      	beq.n	8009794 <USBD_LL_DataInStage+0x15a>
 8009748:	7dfb      	ldrb	r3, [r7, #23]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d122      	bne.n	8009794 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b03      	cmp	r3, #3
 8009758:	d11c      	bne.n	8009794 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800975a:	7dfa      	ldrb	r2, [r7, #23]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	32ae      	adds	r2, #174	@ 0xae
 8009760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d014      	beq.n	8009794 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800976a:	7dfa      	ldrb	r2, [r7, #23]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009772:	7dfa      	ldrb	r2, [r7, #23]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	32ae      	adds	r2, #174	@ 0xae
 8009778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800977c:	695b      	ldr	r3, [r3, #20]
 800977e:	7afa      	ldrb	r2, [r7, #11]
 8009780:	4611      	mov	r1, r2
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	4798      	blx	r3
 8009786:	4603      	mov	r3, r0
 8009788:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800978a:	7dbb      	ldrb	r3, [r7, #22]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d001      	beq.n	8009794 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009790:	7dbb      	ldrb	r3, [r7, #22]
 8009792:	e000      	b.n	8009796 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b084      	sub	sp, #16
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80097a6:	2300      	movs	r3, #0
 80097a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d014      	beq.n	8009804 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00e      	beq.n	8009804 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	6852      	ldr	r2, [r2, #4]
 80097f2:	b2d2      	uxtb	r2, r2
 80097f4:	4611      	mov	r1, r2
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	4798      	blx	r3
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d001      	beq.n	8009804 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009800:	2303      	movs	r3, #3
 8009802:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009804:	2340      	movs	r3, #64	@ 0x40
 8009806:	2200      	movs	r2, #0
 8009808:	2100      	movs	r1, #0
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f001 fbdf 	bl	800afce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2240      	movs	r2, #64	@ 0x40
 800981c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009820:	2340      	movs	r3, #64	@ 0x40
 8009822:	2200      	movs	r2, #0
 8009824:	2180      	movs	r1, #128	@ 0x80
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f001 fbd1 	bl	800afce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2240      	movs	r2, #64	@ 0x40
 8009836:	621a      	str	r2, [r3, #32]

  return ret;
 8009838:	7bfb      	ldrb	r3, [r7, #15]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009842:	b480      	push	{r7}
 8009844:	b083      	sub	sp, #12
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	460b      	mov	r3, r1
 800984c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	78fa      	ldrb	r2, [r7, #3]
 8009852:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	370c      	adds	r7, #12
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr

08009862 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009862:	b480      	push	{r7}
 8009864:	b083      	sub	sp, #12
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b04      	cmp	r3, #4
 8009874:	d006      	beq.n	8009884 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800987c:	b2da      	uxtb	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2204      	movs	r2, #4
 8009888:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	370c      	adds	r7, #12
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr

0800989a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800989a:	b480      	push	{r7}
 800989c:	b083      	sub	sp, #12
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b04      	cmp	r3, #4
 80098ac:	d106      	bne.n	80098bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80098b4:	b2da      	uxtb	r2, r3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	370c      	adds	r7, #12
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b082      	sub	sp, #8
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	2b03      	cmp	r3, #3
 80098dc:	d110      	bne.n	8009900 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d00b      	beq.n	8009900 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098ee:	69db      	ldr	r3, [r3, #28]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d005      	beq.n	8009900 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b082      	sub	sp, #8
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	460b      	mov	r3, r1
 8009914:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	32ae      	adds	r2, #174	@ 0xae
 8009920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d101      	bne.n	800992c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009928:	2303      	movs	r3, #3
 800992a:	e01c      	b.n	8009966 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009932:	b2db      	uxtb	r3, r3
 8009934:	2b03      	cmp	r3, #3
 8009936:	d115      	bne.n	8009964 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	32ae      	adds	r2, #174	@ 0xae
 8009942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009946:	6a1b      	ldr	r3, [r3, #32]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00b      	beq.n	8009964 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	32ae      	adds	r2, #174	@ 0xae
 8009956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800995a:	6a1b      	ldr	r3, [r3, #32]
 800995c:	78fa      	ldrb	r2, [r7, #3]
 800995e:	4611      	mov	r1, r2
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b082      	sub	sp, #8
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	460b      	mov	r3, r1
 8009978:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	32ae      	adds	r2, #174	@ 0xae
 8009984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d101      	bne.n	8009990 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800998c:	2303      	movs	r3, #3
 800998e:	e01c      	b.n	80099ca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009996:	b2db      	uxtb	r3, r3
 8009998:	2b03      	cmp	r3, #3
 800999a:	d115      	bne.n	80099c8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	32ae      	adds	r2, #174	@ 0xae
 80099a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00b      	beq.n	80099c8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	32ae      	adds	r2, #174	@ 0xae
 80099ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099c0:	78fa      	ldrb	r2, [r7, #3]
 80099c2:	4611      	mov	r1, r2
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b083      	sub	sp, #12
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00e      	beq.n	8009a24 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	6852      	ldr	r2, [r2, #4]
 8009a12:	b2d2      	uxtb	r2, r2
 8009a14:	4611      	mov	r1, r2
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	4798      	blx	r3
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d001      	beq.n	8009a24 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009a20:	2303      	movs	r3, #3
 8009a22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009a2e:	b480      	push	{r7}
 8009a30:	b083      	sub	sp, #12
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	460b      	mov	r3, r1
 8009a38:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009a3a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	460b      	mov	r3, r1
 8009a52:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009a54:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	370c      	adds	r7, #12
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr

08009a62 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b086      	sub	sp, #24
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009a76:	2300      	movs	r3, #0
 8009a78:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	885b      	ldrh	r3, [r3, #2]
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	7812      	ldrb	r2, [r2, #0]
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d91f      	bls.n	8009ac8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009a8e:	e013      	b.n	8009ab8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009a90:	f107 030a 	add.w	r3, r7, #10
 8009a94:	4619      	mov	r1, r3
 8009a96:	6978      	ldr	r0, [r7, #20]
 8009a98:	f000 f81b 	bl	8009ad2 <USBD_GetNextDesc>
 8009a9c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	785b      	ldrb	r3, [r3, #1]
 8009aa2:	2b05      	cmp	r3, #5
 8009aa4:	d108      	bne.n	8009ab8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	789b      	ldrb	r3, [r3, #2]
 8009aae:	78fa      	ldrb	r2, [r7, #3]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d008      	beq.n	8009ac6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	885b      	ldrh	r3, [r3, #2]
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	897b      	ldrh	r3, [r7, #10]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d8e5      	bhi.n	8009a90 <USBD_GetEpDesc+0x2e>
 8009ac4:	e000      	b.n	8009ac8 <USBD_GetEpDesc+0x66>
          break;
 8009ac6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009ac8:	693b      	ldr	r3, [r7, #16]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3718      	adds	r7, #24
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b085      	sub	sp, #20
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	881b      	ldrh	r3, [r3, #0]
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	7812      	ldrb	r2, [r2, #0]
 8009ae8:	4413      	add	r3, r2
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	461a      	mov	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4413      	add	r3, r2
 8009afa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009afc:	68fb      	ldr	r3, [r7, #12]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr

08009b0a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009b0a:	b480      	push	{r7}
 8009b0c:	b087      	sub	sp, #28
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009b28:	8a3b      	ldrh	r3, [r7, #16]
 8009b2a:	021b      	lsls	r3, r3, #8
 8009b2c:	b21a      	sxth	r2, r3
 8009b2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	b21b      	sxth	r3, r3
 8009b36:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009b38:	89fb      	ldrh	r3, [r7, #14]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	371c      	adds	r7, #28
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
	...

08009b48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b52:	2300      	movs	r3, #0
 8009b54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b5e:	2b40      	cmp	r3, #64	@ 0x40
 8009b60:	d005      	beq.n	8009b6e <USBD_StdDevReq+0x26>
 8009b62:	2b40      	cmp	r3, #64	@ 0x40
 8009b64:	d857      	bhi.n	8009c16 <USBD_StdDevReq+0xce>
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00f      	beq.n	8009b8a <USBD_StdDevReq+0x42>
 8009b6a:	2b20      	cmp	r3, #32
 8009b6c:	d153      	bne.n	8009c16 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	32ae      	adds	r2, #174	@ 0xae
 8009b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	4798      	blx	r3
 8009b84:	4603      	mov	r3, r0
 8009b86:	73fb      	strb	r3, [r7, #15]
      break;
 8009b88:	e04a      	b.n	8009c20 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	785b      	ldrb	r3, [r3, #1]
 8009b8e:	2b09      	cmp	r3, #9
 8009b90:	d83b      	bhi.n	8009c0a <USBD_StdDevReq+0xc2>
 8009b92:	a201      	add	r2, pc, #4	@ (adr r2, 8009b98 <USBD_StdDevReq+0x50>)
 8009b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b98:	08009bed 	.word	0x08009bed
 8009b9c:	08009c01 	.word	0x08009c01
 8009ba0:	08009c0b 	.word	0x08009c0b
 8009ba4:	08009bf7 	.word	0x08009bf7
 8009ba8:	08009c0b 	.word	0x08009c0b
 8009bac:	08009bcb 	.word	0x08009bcb
 8009bb0:	08009bc1 	.word	0x08009bc1
 8009bb4:	08009c0b 	.word	0x08009c0b
 8009bb8:	08009be3 	.word	0x08009be3
 8009bbc:	08009bd5 	.word	0x08009bd5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fa3c 	bl	800a040 <USBD_GetDescriptor>
          break;
 8009bc8:	e024      	b.n	8009c14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009bca:	6839      	ldr	r1, [r7, #0]
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 fba1 	bl	800a314 <USBD_SetAddress>
          break;
 8009bd2:	e01f      	b.n	8009c14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009bd4:	6839      	ldr	r1, [r7, #0]
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fbe0 	bl	800a39c <USBD_SetConfig>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	73fb      	strb	r3, [r7, #15]
          break;
 8009be0:	e018      	b.n	8009c14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009be2:	6839      	ldr	r1, [r7, #0]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fc83 	bl	800a4f0 <USBD_GetConfig>
          break;
 8009bea:	e013      	b.n	8009c14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fcb4 	bl	800a55c <USBD_GetStatus>
          break;
 8009bf4:	e00e      	b.n	8009c14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 fce3 	bl	800a5c4 <USBD_SetFeature>
          break;
 8009bfe:	e009      	b.n	8009c14 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fd07 	bl	800a616 <USBD_ClrFeature>
          break;
 8009c08:	e004      	b.n	8009c14 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009c0a:	6839      	ldr	r1, [r7, #0]
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fd5e 	bl	800a6ce <USBD_CtlError>
          break;
 8009c12:	bf00      	nop
      }
      break;
 8009c14:	e004      	b.n	8009c20 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 fd58 	bl	800a6ce <USBD_CtlError>
      break;
 8009c1e:	bf00      	nop
  }

  return ret;
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop

08009c2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c36:	2300      	movs	r3, #0
 8009c38:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c42:	2b40      	cmp	r3, #64	@ 0x40
 8009c44:	d005      	beq.n	8009c52 <USBD_StdItfReq+0x26>
 8009c46:	2b40      	cmp	r3, #64	@ 0x40
 8009c48:	d852      	bhi.n	8009cf0 <USBD_StdItfReq+0xc4>
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <USBD_StdItfReq+0x26>
 8009c4e:	2b20      	cmp	r3, #32
 8009c50:	d14e      	bne.n	8009cf0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d840      	bhi.n	8009ce2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	889b      	ldrh	r3, [r3, #4]
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d836      	bhi.n	8009cd8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	889b      	ldrh	r3, [r3, #4]
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	4619      	mov	r1, r3
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7ff fedb 	bl	8009a2e <USBD_CoreFindIF>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c7c:	7bbb      	ldrb	r3, [r7, #14]
 8009c7e:	2bff      	cmp	r3, #255	@ 0xff
 8009c80:	d01d      	beq.n	8009cbe <USBD_StdItfReq+0x92>
 8009c82:	7bbb      	ldrb	r3, [r7, #14]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d11a      	bne.n	8009cbe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009c88:	7bba      	ldrb	r2, [r7, #14]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	32ae      	adds	r2, #174	@ 0xae
 8009c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00f      	beq.n	8009cb8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009c98:	7bba      	ldrb	r2, [r7, #14]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009ca0:	7bba      	ldrb	r2, [r7, #14]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	32ae      	adds	r2, #174	@ 0xae
 8009ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	4798      	blx	r3
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009cb6:	e004      	b.n	8009cc2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009cbc:	e001      	b.n	8009cc2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	88db      	ldrh	r3, [r3, #6]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d110      	bne.n	8009cec <USBD_StdItfReq+0xc0>
 8009cca:	7bfb      	ldrb	r3, [r7, #15]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10d      	bne.n	8009cec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 fdd3 	bl	800a87c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009cd6:	e009      	b.n	8009cec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009cd8:	6839      	ldr	r1, [r7, #0]
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fcf7 	bl	800a6ce <USBD_CtlError>
          break;
 8009ce0:	e004      	b.n	8009cec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009ce2:	6839      	ldr	r1, [r7, #0]
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fcf2 	bl	800a6ce <USBD_CtlError>
          break;
 8009cea:	e000      	b.n	8009cee <USBD_StdItfReq+0xc2>
          break;
 8009cec:	bf00      	nop
      }
      break;
 8009cee:	e004      	b.n	8009cfa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fceb 	bl	800a6ce <USBD_CtlError>
      break;
 8009cf8:	bf00      	nop
  }

  return ret;
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	889b      	ldrh	r3, [r3, #4]
 8009d16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d20:	2b40      	cmp	r3, #64	@ 0x40
 8009d22:	d007      	beq.n	8009d34 <USBD_StdEPReq+0x30>
 8009d24:	2b40      	cmp	r3, #64	@ 0x40
 8009d26:	f200 817f 	bhi.w	800a028 <USBD_StdEPReq+0x324>
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d02a      	beq.n	8009d84 <USBD_StdEPReq+0x80>
 8009d2e:	2b20      	cmp	r3, #32
 8009d30:	f040 817a 	bne.w	800a028 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d34:	7bbb      	ldrb	r3, [r7, #14]
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7ff fe85 	bl	8009a48 <USBD_CoreFindEP>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d42:	7b7b      	ldrb	r3, [r7, #13]
 8009d44:	2bff      	cmp	r3, #255	@ 0xff
 8009d46:	f000 8174 	beq.w	800a032 <USBD_StdEPReq+0x32e>
 8009d4a:	7b7b      	ldrb	r3, [r7, #13]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f040 8170 	bne.w	800a032 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009d52:	7b7a      	ldrb	r2, [r7, #13]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009d5a:	7b7a      	ldrb	r2, [r7, #13]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	32ae      	adds	r2, #174	@ 0xae
 8009d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f000 8163 	beq.w	800a032 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009d6c:	7b7a      	ldrb	r2, [r7, #13]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	32ae      	adds	r2, #174	@ 0xae
 8009d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	6839      	ldr	r1, [r7, #0]
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	4798      	blx	r3
 8009d7e:	4603      	mov	r3, r0
 8009d80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009d82:	e156      	b.n	800a032 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	785b      	ldrb	r3, [r3, #1]
 8009d88:	2b03      	cmp	r3, #3
 8009d8a:	d008      	beq.n	8009d9e <USBD_StdEPReq+0x9a>
 8009d8c:	2b03      	cmp	r3, #3
 8009d8e:	f300 8145 	bgt.w	800a01c <USBD_StdEPReq+0x318>
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f000 809b 	beq.w	8009ece <USBD_StdEPReq+0x1ca>
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d03c      	beq.n	8009e16 <USBD_StdEPReq+0x112>
 8009d9c:	e13e      	b.n	800a01c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d002      	beq.n	8009db0 <USBD_StdEPReq+0xac>
 8009daa:	2b03      	cmp	r3, #3
 8009dac:	d016      	beq.n	8009ddc <USBD_StdEPReq+0xd8>
 8009dae:	e02c      	b.n	8009e0a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009db0:	7bbb      	ldrb	r3, [r7, #14]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00d      	beq.n	8009dd2 <USBD_StdEPReq+0xce>
 8009db6:	7bbb      	ldrb	r3, [r7, #14]
 8009db8:	2b80      	cmp	r3, #128	@ 0x80
 8009dba:	d00a      	beq.n	8009dd2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009dbc:	7bbb      	ldrb	r3, [r7, #14]
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f001 f949 	bl	800b058 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dc6:	2180      	movs	r1, #128	@ 0x80
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f001 f945 	bl	800b058 <USBD_LL_StallEP>
 8009dce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009dd0:	e020      	b.n	8009e14 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 fc7a 	bl	800a6ce <USBD_CtlError>
              break;
 8009dda:	e01b      	b.n	8009e14 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	885b      	ldrh	r3, [r3, #2]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10e      	bne.n	8009e02 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00b      	beq.n	8009e02 <USBD_StdEPReq+0xfe>
 8009dea:	7bbb      	ldrb	r3, [r7, #14]
 8009dec:	2b80      	cmp	r3, #128	@ 0x80
 8009dee:	d008      	beq.n	8009e02 <USBD_StdEPReq+0xfe>
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	88db      	ldrh	r3, [r3, #6]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d104      	bne.n	8009e02 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009df8:	7bbb      	ldrb	r3, [r7, #14]
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f001 f92b 	bl	800b058 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fd3a 	bl	800a87c <USBD_CtlSendStatus>

              break;
 8009e08:	e004      	b.n	8009e14 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009e0a:	6839      	ldr	r1, [r7, #0]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 fc5e 	bl	800a6ce <USBD_CtlError>
              break;
 8009e12:	bf00      	nop
          }
          break;
 8009e14:	e107      	b.n	800a026 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d002      	beq.n	8009e28 <USBD_StdEPReq+0x124>
 8009e22:	2b03      	cmp	r3, #3
 8009e24:	d016      	beq.n	8009e54 <USBD_StdEPReq+0x150>
 8009e26:	e04b      	b.n	8009ec0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e28:	7bbb      	ldrb	r3, [r7, #14]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00d      	beq.n	8009e4a <USBD_StdEPReq+0x146>
 8009e2e:	7bbb      	ldrb	r3, [r7, #14]
 8009e30:	2b80      	cmp	r3, #128	@ 0x80
 8009e32:	d00a      	beq.n	8009e4a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e34:	7bbb      	ldrb	r3, [r7, #14]
 8009e36:	4619      	mov	r1, r3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f001 f90d 	bl	800b058 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e3e:	2180      	movs	r1, #128	@ 0x80
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f001 f909 	bl	800b058 <USBD_LL_StallEP>
 8009e46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e48:	e040      	b.n	8009ecc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 fc3e 	bl	800a6ce <USBD_CtlError>
              break;
 8009e52:	e03b      	b.n	8009ecc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	885b      	ldrh	r3, [r3, #2]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d136      	bne.n	8009eca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e5c:	7bbb      	ldrb	r3, [r7, #14]
 8009e5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d004      	beq.n	8009e70 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e66:	7bbb      	ldrb	r3, [r7, #14]
 8009e68:	4619      	mov	r1, r3
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f001 f913 	bl	800b096 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fd03 	bl	800a87c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009e76:	7bbb      	ldrb	r3, [r7, #14]
 8009e78:	4619      	mov	r1, r3
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7ff fde4 	bl	8009a48 <USBD_CoreFindEP>
 8009e80:	4603      	mov	r3, r0
 8009e82:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e84:	7b7b      	ldrb	r3, [r7, #13]
 8009e86:	2bff      	cmp	r3, #255	@ 0xff
 8009e88:	d01f      	beq.n	8009eca <USBD_StdEPReq+0x1c6>
 8009e8a:	7b7b      	ldrb	r3, [r7, #13]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d11c      	bne.n	8009eca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009e90:	7b7a      	ldrb	r2, [r7, #13]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009e98:	7b7a      	ldrb	r2, [r7, #13]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	32ae      	adds	r2, #174	@ 0xae
 8009e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d010      	beq.n	8009eca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009ea8:	7b7a      	ldrb	r2, [r7, #13]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	32ae      	adds	r2, #174	@ 0xae
 8009eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	6839      	ldr	r1, [r7, #0]
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	4798      	blx	r3
 8009eba:	4603      	mov	r3, r0
 8009ebc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009ebe:	e004      	b.n	8009eca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009ec0:	6839      	ldr	r1, [r7, #0]
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fc03 	bl	800a6ce <USBD_CtlError>
              break;
 8009ec8:	e000      	b.n	8009ecc <USBD_StdEPReq+0x1c8>
              break;
 8009eca:	bf00      	nop
          }
          break;
 8009ecc:	e0ab      	b.n	800a026 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	d002      	beq.n	8009ee0 <USBD_StdEPReq+0x1dc>
 8009eda:	2b03      	cmp	r3, #3
 8009edc:	d032      	beq.n	8009f44 <USBD_StdEPReq+0x240>
 8009ede:	e097      	b.n	800a010 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ee0:	7bbb      	ldrb	r3, [r7, #14]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d007      	beq.n	8009ef6 <USBD_StdEPReq+0x1f2>
 8009ee6:	7bbb      	ldrb	r3, [r7, #14]
 8009ee8:	2b80      	cmp	r3, #128	@ 0x80
 8009eea:	d004      	beq.n	8009ef6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009eec:	6839      	ldr	r1, [r7, #0]
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fbed 	bl	800a6ce <USBD_CtlError>
                break;
 8009ef4:	e091      	b.n	800a01a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ef6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	da0b      	bge.n	8009f16 <USBD_StdEPReq+0x212>
 8009efe:	7bbb      	ldrb	r3, [r7, #14]
 8009f00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f04:	4613      	mov	r3, r2
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	3310      	adds	r3, #16
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	4413      	add	r3, r2
 8009f12:	3304      	adds	r3, #4
 8009f14:	e00b      	b.n	8009f2e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f16:	7bbb      	ldrb	r3, [r7, #14]
 8009f18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	2202      	movs	r2, #2
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fc43 	bl	800a7c8 <USBD_CtlSendData>
              break;
 8009f42:	e06a      	b.n	800a01a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	da11      	bge.n	8009f70 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f4c:	7bbb      	ldrb	r3, [r7, #14]
 8009f4e:	f003 020f 	and.w	r2, r3, #15
 8009f52:	6879      	ldr	r1, [r7, #4]
 8009f54:	4613      	mov	r3, r2
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	4413      	add	r3, r2
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	440b      	add	r3, r1
 8009f5e:	3324      	adds	r3, #36	@ 0x24
 8009f60:	881b      	ldrh	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d117      	bne.n	8009f96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fbb0 	bl	800a6ce <USBD_CtlError>
                  break;
 8009f6e:	e054      	b.n	800a01a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f70:	7bbb      	ldrb	r3, [r7, #14]
 8009f72:	f003 020f 	and.w	r2, r3, #15
 8009f76:	6879      	ldr	r1, [r7, #4]
 8009f78:	4613      	mov	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4413      	add	r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	440b      	add	r3, r1
 8009f82:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009f86:	881b      	ldrh	r3, [r3, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d104      	bne.n	8009f96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fb9d 	bl	800a6ce <USBD_CtlError>
                  break;
 8009f94:	e041      	b.n	800a01a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	da0b      	bge.n	8009fb6 <USBD_StdEPReq+0x2b2>
 8009f9e:	7bbb      	ldrb	r3, [r7, #14]
 8009fa0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	3310      	adds	r3, #16
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	e00b      	b.n	8009fce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009fb6:	7bbb      	ldrb	r3, [r7, #14]
 8009fb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	4413      	add	r3, r2
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	4413      	add	r3, r2
 8009fcc:	3304      	adds	r3, #4
 8009fce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009fd0:	7bbb      	ldrb	r3, [r7, #14]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d002      	beq.n	8009fdc <USBD_StdEPReq+0x2d8>
 8009fd6:	7bbb      	ldrb	r3, [r7, #14]
 8009fd8:	2b80      	cmp	r3, #128	@ 0x80
 8009fda:	d103      	bne.n	8009fe4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	601a      	str	r2, [r3, #0]
 8009fe2:	e00e      	b.n	800a002 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009fe4:	7bbb      	ldrb	r3, [r7, #14]
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f001 f873 	bl	800b0d4 <USBD_LL_IsStallEP>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d003      	beq.n	8009ffc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	601a      	str	r2, [r3, #0]
 8009ffa:	e002      	b.n	800a002 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	2200      	movs	r2, #0
 800a000:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	2202      	movs	r2, #2
 800a006:	4619      	mov	r1, r3
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 fbdd 	bl	800a7c8 <USBD_CtlSendData>
              break;
 800a00e:	e004      	b.n	800a01a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a010:	6839      	ldr	r1, [r7, #0]
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 fb5b 	bl	800a6ce <USBD_CtlError>
              break;
 800a018:	bf00      	nop
          }
          break;
 800a01a:	e004      	b.n	800a026 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a01c:	6839      	ldr	r1, [r7, #0]
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 fb55 	bl	800a6ce <USBD_CtlError>
          break;
 800a024:	bf00      	nop
      }
      break;
 800a026:	e005      	b.n	800a034 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a028:	6839      	ldr	r1, [r7, #0]
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 fb4f 	bl	800a6ce <USBD_CtlError>
      break;
 800a030:	e000      	b.n	800a034 <USBD_StdEPReq+0x330>
      break;
 800a032:	bf00      	nop
  }

  return ret;
 800a034:	7bfb      	ldrb	r3, [r7, #15]
}
 800a036:	4618      	mov	r0, r3
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
	...

0800a040 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a04a:	2300      	movs	r3, #0
 800a04c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a04e:	2300      	movs	r3, #0
 800a050:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a052:	2300      	movs	r3, #0
 800a054:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	885b      	ldrh	r3, [r3, #2]
 800a05a:	0a1b      	lsrs	r3, r3, #8
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	3b01      	subs	r3, #1
 800a060:	2b06      	cmp	r3, #6
 800a062:	f200 8128 	bhi.w	800a2b6 <USBD_GetDescriptor+0x276>
 800a066:	a201      	add	r2, pc, #4	@ (adr r2, 800a06c <USBD_GetDescriptor+0x2c>)
 800a068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06c:	0800a089 	.word	0x0800a089
 800a070:	0800a0a1 	.word	0x0800a0a1
 800a074:	0800a0e1 	.word	0x0800a0e1
 800a078:	0800a2b7 	.word	0x0800a2b7
 800a07c:	0800a2b7 	.word	0x0800a2b7
 800a080:	0800a257 	.word	0x0800a257
 800a084:	0800a283 	.word	0x0800a283
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	7c12      	ldrb	r2, [r2, #16]
 800a094:	f107 0108 	add.w	r1, r7, #8
 800a098:	4610      	mov	r0, r2
 800a09a:	4798      	blx	r3
 800a09c:	60f8      	str	r0, [r7, #12]
      break;
 800a09e:	e112      	b.n	800a2c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	7c1b      	ldrb	r3, [r3, #16]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d10d      	bne.n	800a0c4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b0:	f107 0208 	add.w	r2, r7, #8
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	4798      	blx	r3
 800a0b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	2202      	movs	r2, #2
 800a0c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a0c2:	e100      	b.n	800a2c6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0cc:	f107 0208 	add.w	r2, r7, #8
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4798      	blx	r3
 800a0d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	2202      	movs	r2, #2
 800a0dc:	701a      	strb	r2, [r3, #0]
      break;
 800a0de:	e0f2      	b.n	800a2c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	885b      	ldrh	r3, [r3, #2]
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	2b05      	cmp	r3, #5
 800a0e8:	f200 80ac 	bhi.w	800a244 <USBD_GetDescriptor+0x204>
 800a0ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f4 <USBD_GetDescriptor+0xb4>)
 800a0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f2:	bf00      	nop
 800a0f4:	0800a10d 	.word	0x0800a10d
 800a0f8:	0800a141 	.word	0x0800a141
 800a0fc:	0800a175 	.word	0x0800a175
 800a100:	0800a1a9 	.word	0x0800a1a9
 800a104:	0800a1dd 	.word	0x0800a1dd
 800a108:	0800a211 	.word	0x0800a211
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00b      	beq.n	800a130 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	7c12      	ldrb	r2, [r2, #16]
 800a124:	f107 0108 	add.w	r1, r7, #8
 800a128:	4610      	mov	r0, r2
 800a12a:	4798      	blx	r3
 800a12c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a12e:	e091      	b.n	800a254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 facb 	bl	800a6ce <USBD_CtlError>
            err++;
 800a138:	7afb      	ldrb	r3, [r7, #11]
 800a13a:	3301      	adds	r3, #1
 800a13c:	72fb      	strb	r3, [r7, #11]
          break;
 800a13e:	e089      	b.n	800a254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00b      	beq.n	800a164 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	7c12      	ldrb	r2, [r2, #16]
 800a158:	f107 0108 	add.w	r1, r7, #8
 800a15c:	4610      	mov	r0, r2
 800a15e:	4798      	blx	r3
 800a160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a162:	e077      	b.n	800a254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a164:	6839      	ldr	r1, [r7, #0]
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fab1 	bl	800a6ce <USBD_CtlError>
            err++;
 800a16c:	7afb      	ldrb	r3, [r7, #11]
 800a16e:	3301      	adds	r3, #1
 800a170:	72fb      	strb	r3, [r7, #11]
          break;
 800a172:	e06f      	b.n	800a254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00b      	beq.n	800a198 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	7c12      	ldrb	r2, [r2, #16]
 800a18c:	f107 0108 	add.w	r1, r7, #8
 800a190:	4610      	mov	r0, r2
 800a192:	4798      	blx	r3
 800a194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a196:	e05d      	b.n	800a254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a198:	6839      	ldr	r1, [r7, #0]
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 fa97 	bl	800a6ce <USBD_CtlError>
            err++;
 800a1a0:	7afb      	ldrb	r3, [r7, #11]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1a6:	e055      	b.n	800a254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00b      	beq.n	800a1cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	7c12      	ldrb	r2, [r2, #16]
 800a1c0:	f107 0108 	add.w	r1, r7, #8
 800a1c4:	4610      	mov	r0, r2
 800a1c6:	4798      	blx	r3
 800a1c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1ca:	e043      	b.n	800a254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1cc:	6839      	ldr	r1, [r7, #0]
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fa7d 	bl	800a6ce <USBD_CtlError>
            err++;
 800a1d4:	7afb      	ldrb	r3, [r7, #11]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a1da:	e03b      	b.n	800a254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1e2:	695b      	ldr	r3, [r3, #20]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00b      	beq.n	800a200 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ee:	695b      	ldr	r3, [r3, #20]
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	7c12      	ldrb	r2, [r2, #16]
 800a1f4:	f107 0108 	add.w	r1, r7, #8
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	4798      	blx	r3
 800a1fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1fe:	e029      	b.n	800a254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a200:	6839      	ldr	r1, [r7, #0]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 fa63 	bl	800a6ce <USBD_CtlError>
            err++;
 800a208:	7afb      	ldrb	r3, [r7, #11]
 800a20a:	3301      	adds	r3, #1
 800a20c:	72fb      	strb	r3, [r7, #11]
          break;
 800a20e:	e021      	b.n	800a254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a216:	699b      	ldr	r3, [r3, #24]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00b      	beq.n	800a234 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a222:	699b      	ldr	r3, [r3, #24]
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	7c12      	ldrb	r2, [r2, #16]
 800a228:	f107 0108 	add.w	r1, r7, #8
 800a22c:	4610      	mov	r0, r2
 800a22e:	4798      	blx	r3
 800a230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a232:	e00f      	b.n	800a254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a234:	6839      	ldr	r1, [r7, #0]
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 fa49 	bl	800a6ce <USBD_CtlError>
            err++;
 800a23c:	7afb      	ldrb	r3, [r7, #11]
 800a23e:	3301      	adds	r3, #1
 800a240:	72fb      	strb	r3, [r7, #11]
          break;
 800a242:	e007      	b.n	800a254 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fa41 	bl	800a6ce <USBD_CtlError>
          err++;
 800a24c:	7afb      	ldrb	r3, [r7, #11]
 800a24e:	3301      	adds	r3, #1
 800a250:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a252:	bf00      	nop
      }
      break;
 800a254:	e037      	b.n	800a2c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	7c1b      	ldrb	r3, [r3, #16]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d109      	bne.n	800a272 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a266:	f107 0208 	add.w	r2, r7, #8
 800a26a:	4610      	mov	r0, r2
 800a26c:	4798      	blx	r3
 800a26e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a270:	e029      	b.n	800a2c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a272:	6839      	ldr	r1, [r7, #0]
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 fa2a 	bl	800a6ce <USBD_CtlError>
        err++;
 800a27a:	7afb      	ldrb	r3, [r7, #11]
 800a27c:	3301      	adds	r3, #1
 800a27e:	72fb      	strb	r3, [r7, #11]
      break;
 800a280:	e021      	b.n	800a2c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	7c1b      	ldrb	r3, [r3, #16]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d10d      	bne.n	800a2a6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a292:	f107 0208 	add.w	r2, r7, #8
 800a296:	4610      	mov	r0, r2
 800a298:	4798      	blx	r3
 800a29a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	2207      	movs	r2, #7
 800a2a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2a4:	e00f      	b.n	800a2c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a2a6:	6839      	ldr	r1, [r7, #0]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fa10 	bl	800a6ce <USBD_CtlError>
        err++;
 800a2ae:	7afb      	ldrb	r3, [r7, #11]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	72fb      	strb	r3, [r7, #11]
      break;
 800a2b4:	e007      	b.n	800a2c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 fa08 	bl	800a6ce <USBD_CtlError>
      err++;
 800a2be:	7afb      	ldrb	r3, [r7, #11]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	72fb      	strb	r3, [r7, #11]
      break;
 800a2c4:	bf00      	nop
  }

  if (err != 0U)
 800a2c6:	7afb      	ldrb	r3, [r7, #11]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d11e      	bne.n	800a30a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	88db      	ldrh	r3, [r3, #6]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d016      	beq.n	800a302 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a2d4:	893b      	ldrh	r3, [r7, #8]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00e      	beq.n	800a2f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	88da      	ldrh	r2, [r3, #6]
 800a2de:	893b      	ldrh	r3, [r7, #8]
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	bf28      	it	cs
 800a2e4:	4613      	movcs	r3, r2
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2ea:	893b      	ldrh	r3, [r7, #8]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	68f9      	ldr	r1, [r7, #12]
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 fa69 	bl	800a7c8 <USBD_CtlSendData>
 800a2f6:	e009      	b.n	800a30c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a2f8:	6839      	ldr	r1, [r7, #0]
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 f9e7 	bl	800a6ce <USBD_CtlError>
 800a300:	e004      	b.n	800a30c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 faba 	bl	800a87c <USBD_CtlSendStatus>
 800a308:	e000      	b.n	800a30c <USBD_GetDescriptor+0x2cc>
    return;
 800a30a:	bf00      	nop
  }
}
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop

0800a314 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	889b      	ldrh	r3, [r3, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d131      	bne.n	800a38a <USBD_SetAddress+0x76>
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	88db      	ldrh	r3, [r3, #6]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d12d      	bne.n	800a38a <USBD_SetAddress+0x76>
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	885b      	ldrh	r3, [r3, #2]
 800a332:	2b7f      	cmp	r3, #127	@ 0x7f
 800a334:	d829      	bhi.n	800a38a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	885b      	ldrh	r3, [r3, #2]
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a340:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b03      	cmp	r3, #3
 800a34c:	d104      	bne.n	800a358 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 f9bc 	bl	800a6ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a356:	e01d      	b.n	800a394 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	7bfa      	ldrb	r2, [r7, #15]
 800a35c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a360:	7bfb      	ldrb	r3, [r7, #15]
 800a362:	4619      	mov	r1, r3
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 fee1 	bl	800b12c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 fa86 	bl	800a87c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a370:	7bfb      	ldrb	r3, [r7, #15]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d004      	beq.n	800a380 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2202      	movs	r2, #2
 800a37a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a37e:	e009      	b.n	800a394 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a388:	e004      	b.n	800a394 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a38a:	6839      	ldr	r1, [r7, #0]
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 f99e 	bl	800a6ce <USBD_CtlError>
  }
}
 800a392:	bf00      	nop
 800a394:	bf00      	nop
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	885b      	ldrh	r3, [r3, #2]
 800a3ae:	b2da      	uxtb	r2, r3
 800a3b0:	4b4e      	ldr	r3, [pc, #312]	@ (800a4ec <USBD_SetConfig+0x150>)
 800a3b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a3b4:	4b4d      	ldr	r3, [pc, #308]	@ (800a4ec <USBD_SetConfig+0x150>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d905      	bls.n	800a3c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f985 	bl	800a6ce <USBD_CtlError>
    return USBD_FAIL;
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	e08c      	b.n	800a4e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d002      	beq.n	800a3da <USBD_SetConfig+0x3e>
 800a3d4:	2b03      	cmp	r3, #3
 800a3d6:	d029      	beq.n	800a42c <USBD_SetConfig+0x90>
 800a3d8:	e075      	b.n	800a4c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a3da:	4b44      	ldr	r3, [pc, #272]	@ (800a4ec <USBD_SetConfig+0x150>)
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d020      	beq.n	800a424 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a3e2:	4b42      	ldr	r3, [pc, #264]	@ (800a4ec <USBD_SetConfig+0x150>)
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3ec:	4b3f      	ldr	r3, [pc, #252]	@ (800a4ec <USBD_SetConfig+0x150>)
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f7fe ffe3 	bl	80093be <USBD_SetClassConfig>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d008      	beq.n	800a414 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a402:	6839      	ldr	r1, [r7, #0]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 f962 	bl	800a6ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2202      	movs	r2, #2
 800a40e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a412:	e065      	b.n	800a4e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 fa31 	bl	800a87c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2203      	movs	r2, #3
 800a41e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a422:	e05d      	b.n	800a4e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 fa29 	bl	800a87c <USBD_CtlSendStatus>
      break;
 800a42a:	e059      	b.n	800a4e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a42c:	4b2f      	ldr	r3, [pc, #188]	@ (800a4ec <USBD_SetConfig+0x150>)
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d112      	bne.n	800a45a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2202      	movs	r2, #2
 800a438:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a43c:	4b2b      	ldr	r3, [pc, #172]	@ (800a4ec <USBD_SetConfig+0x150>)
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	461a      	mov	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a446:	4b29      	ldr	r3, [pc, #164]	@ (800a4ec <USBD_SetConfig+0x150>)
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	4619      	mov	r1, r3
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f7fe ffd2 	bl	80093f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fa12 	bl	800a87c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a458:	e042      	b.n	800a4e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a45a:	4b24      	ldr	r3, [pc, #144]	@ (800a4ec <USBD_SetConfig+0x150>)
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	461a      	mov	r2, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	429a      	cmp	r2, r3
 800a466:	d02a      	beq.n	800a4be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	4619      	mov	r1, r3
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f7fe ffc0 	bl	80093f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a476:	4b1d      	ldr	r3, [pc, #116]	@ (800a4ec <USBD_SetConfig+0x150>)
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	461a      	mov	r2, r3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a480:	4b1a      	ldr	r3, [pc, #104]	@ (800a4ec <USBD_SetConfig+0x150>)
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	4619      	mov	r1, r3
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7fe ff99 	bl	80093be <USBD_SetClassConfig>
 800a48c:	4603      	mov	r3, r0
 800a48e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a490:	7bfb      	ldrb	r3, [r7, #15]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00f      	beq.n	800a4b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a496:	6839      	ldr	r1, [r7, #0]
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 f918 	bl	800a6ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7fe ffa5 	bl	80093f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2202      	movs	r2, #2
 800a4b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a4b4:	e014      	b.n	800a4e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f9e0 	bl	800a87c <USBD_CtlSendStatus>
      break;
 800a4bc:	e010      	b.n	800a4e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f9dc 	bl	800a87c <USBD_CtlSendStatus>
      break;
 800a4c4:	e00c      	b.n	800a4e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a4c6:	6839      	ldr	r1, [r7, #0]
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 f900 	bl	800a6ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4ce:	4b07      	ldr	r3, [pc, #28]	@ (800a4ec <USBD_SetConfig+0x150>)
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f7fe ff8e 	bl	80093f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a4da:	2303      	movs	r3, #3
 800a4dc:	73fb      	strb	r3, [r7, #15]
      break;
 800a4de:	bf00      	nop
  }

  return ret;
 800a4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	20000428 	.word	0x20000428

0800a4f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	88db      	ldrh	r3, [r3, #6]
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d004      	beq.n	800a50c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a502:	6839      	ldr	r1, [r7, #0]
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 f8e2 	bl	800a6ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a50a:	e023      	b.n	800a554 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a512:	b2db      	uxtb	r3, r3
 800a514:	2b02      	cmp	r3, #2
 800a516:	dc02      	bgt.n	800a51e <USBD_GetConfig+0x2e>
 800a518:	2b00      	cmp	r3, #0
 800a51a:	dc03      	bgt.n	800a524 <USBD_GetConfig+0x34>
 800a51c:	e015      	b.n	800a54a <USBD_GetConfig+0x5a>
 800a51e:	2b03      	cmp	r3, #3
 800a520:	d00b      	beq.n	800a53a <USBD_GetConfig+0x4a>
 800a522:	e012      	b.n	800a54a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	3308      	adds	r3, #8
 800a52e:	2201      	movs	r2, #1
 800a530:	4619      	mov	r1, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 f948 	bl	800a7c8 <USBD_CtlSendData>
        break;
 800a538:	e00c      	b.n	800a554 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	3304      	adds	r3, #4
 800a53e:	2201      	movs	r2, #1
 800a540:	4619      	mov	r1, r3
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 f940 	bl	800a7c8 <USBD_CtlSendData>
        break;
 800a548:	e004      	b.n	800a554 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a54a:	6839      	ldr	r1, [r7, #0]
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 f8be 	bl	800a6ce <USBD_CtlError>
        break;
 800a552:	bf00      	nop
}
 800a554:	bf00      	nop
 800a556:	3708      	adds	r7, #8
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	3b01      	subs	r3, #1
 800a570:	2b02      	cmp	r3, #2
 800a572:	d81e      	bhi.n	800a5b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	88db      	ldrh	r3, [r3, #6]
 800a578:	2b02      	cmp	r3, #2
 800a57a:	d004      	beq.n	800a586 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a57c:	6839      	ldr	r1, [r7, #0]
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f8a5 	bl	800a6ce <USBD_CtlError>
        break;
 800a584:	e01a      	b.n	800a5bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a592:	2b00      	cmp	r3, #0
 800a594:	d005      	beq.n	800a5a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	68db      	ldr	r3, [r3, #12]
 800a59a:	f043 0202 	orr.w	r2, r3, #2
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	330c      	adds	r3, #12
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f90c 	bl	800a7c8 <USBD_CtlSendData>
      break;
 800a5b0:	e004      	b.n	800a5bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a5b2:	6839      	ldr	r1, [r7, #0]
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 f88a 	bl	800a6ce <USBD_CtlError>
      break;
 800a5ba:	bf00      	nop
  }
}
 800a5bc:	bf00      	nop
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	885b      	ldrh	r3, [r3, #2]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d107      	bne.n	800a5e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f94c 	bl	800a87c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a5e4:	e013      	b.n	800a60e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	885b      	ldrh	r3, [r3, #2]
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d10b      	bne.n	800a606 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	889b      	ldrh	r3, [r3, #4]
 800a5f2:	0a1b      	lsrs	r3, r3, #8
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f93c 	bl	800a87c <USBD_CtlSendStatus>
}
 800a604:	e003      	b.n	800a60e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a606:	6839      	ldr	r1, [r7, #0]
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 f860 	bl	800a6ce <USBD_CtlError>
}
 800a60e:	bf00      	nop
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b082      	sub	sp, #8
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a626:	b2db      	uxtb	r3, r3
 800a628:	3b01      	subs	r3, #1
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d80b      	bhi.n	800a646 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	885b      	ldrh	r3, [r3, #2]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d10c      	bne.n	800a650 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f91c 	bl	800a87c <USBD_CtlSendStatus>
      }
      break;
 800a644:	e004      	b.n	800a650 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 f840 	bl	800a6ce <USBD_CtlError>
      break;
 800a64e:	e000      	b.n	800a652 <USBD_ClrFeature+0x3c>
      break;
 800a650:	bf00      	nop
  }
}
 800a652:	bf00      	nop
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b084      	sub	sp, #16
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
 800a662:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	781a      	ldrb	r2, [r3, #0]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	3301      	adds	r3, #1
 800a674:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	781a      	ldrb	r2, [r3, #0]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	3301      	adds	r3, #1
 800a682:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f7ff fa40 	bl	8009b0a <SWAPBYTE>
 800a68a:	4603      	mov	r3, r0
 800a68c:	461a      	mov	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	3301      	adds	r3, #1
 800a696:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	3301      	adds	r3, #1
 800a69c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f7ff fa33 	bl	8009b0a <SWAPBYTE>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f7ff fa26 	bl	8009b0a <SWAPBYTE>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	80da      	strh	r2, [r3, #6]
}
 800a6c6:	bf00      	nop
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b082      	sub	sp, #8
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
 800a6d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6d8:	2180      	movs	r1, #128	@ 0x80
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 fcbc 	bl	800b058 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fcb8 	bl	800b058 <USBD_LL_StallEP>
}
 800a6e8:	bf00      	nop
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d042      	beq.n	800a78c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a70a:	6938      	ldr	r0, [r7, #16]
 800a70c:	f000 f842 	bl	800a794 <USBD_GetLen>
 800a710:	4603      	mov	r3, r0
 800a712:	3301      	adds	r3, #1
 800a714:	005b      	lsls	r3, r3, #1
 800a716:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a71a:	d808      	bhi.n	800a72e <USBD_GetString+0x3e>
 800a71c:	6938      	ldr	r0, [r7, #16]
 800a71e:	f000 f839 	bl	800a794 <USBD_GetLen>
 800a722:	4603      	mov	r3, r0
 800a724:	3301      	adds	r3, #1
 800a726:	b29b      	uxth	r3, r3
 800a728:	005b      	lsls	r3, r3, #1
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	e001      	b.n	800a732 <USBD_GetString+0x42>
 800a72e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a736:	7dfb      	ldrb	r3, [r7, #23]
 800a738:	68ba      	ldr	r2, [r7, #8]
 800a73a:	4413      	add	r3, r2
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	7812      	ldrb	r2, [r2, #0]
 800a740:	701a      	strb	r2, [r3, #0]
  idx++;
 800a742:	7dfb      	ldrb	r3, [r7, #23]
 800a744:	3301      	adds	r3, #1
 800a746:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a748:	7dfb      	ldrb	r3, [r7, #23]
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	4413      	add	r3, r2
 800a74e:	2203      	movs	r2, #3
 800a750:	701a      	strb	r2, [r3, #0]
  idx++;
 800a752:	7dfb      	ldrb	r3, [r7, #23]
 800a754:	3301      	adds	r3, #1
 800a756:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a758:	e013      	b.n	800a782 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a75a:	7dfb      	ldrb	r3, [r7, #23]
 800a75c:	68ba      	ldr	r2, [r7, #8]
 800a75e:	4413      	add	r3, r2
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	7812      	ldrb	r2, [r2, #0]
 800a764:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	3301      	adds	r3, #1
 800a76a:	613b      	str	r3, [r7, #16]
    idx++;
 800a76c:	7dfb      	ldrb	r3, [r7, #23]
 800a76e:	3301      	adds	r3, #1
 800a770:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a772:	7dfb      	ldrb	r3, [r7, #23]
 800a774:	68ba      	ldr	r2, [r7, #8]
 800a776:	4413      	add	r3, r2
 800a778:	2200      	movs	r2, #0
 800a77a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a77c:	7dfb      	ldrb	r3, [r7, #23]
 800a77e:	3301      	adds	r3, #1
 800a780:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1e7      	bne.n	800a75a <USBD_GetString+0x6a>
 800a78a:	e000      	b.n	800a78e <USBD_GetString+0x9e>
    return;
 800a78c:	bf00      	nop
  }
}
 800a78e:	3718      	adds	r7, #24
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a794:	b480      	push	{r7}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a79c:	2300      	movs	r3, #0
 800a79e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a7a4:	e005      	b.n	800a7b2 <USBD_GetLen+0x1e>
  {
    len++;
 800a7a6:	7bfb      	ldrb	r3, [r7, #15]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1f5      	bne.n	800a7a6 <USBD_GetLen+0x12>
  }

  return len;
 800a7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3714      	adds	r7, #20
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2202      	movs	r2, #2
 800a7d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	68ba      	ldr	r2, [r7, #8]
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f000 fcbb 	bl	800b16a <USBD_LL_Transmit>

  return USBD_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b084      	sub	sp, #16
 800a802:	af00      	add	r7, sp, #0
 800a804:	60f8      	str	r0, [r7, #12]
 800a806:	60b9      	str	r1, [r7, #8]
 800a808:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	2100      	movs	r1, #0
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f000 fcaa 	bl	800b16a <USBD_LL_Transmit>

  return USBD_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3710      	adds	r7, #16
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2203      	movs	r2, #3
 800a830:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	2100      	movs	r1, #0
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	f000 fcae 	bl	800b1ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b084      	sub	sp, #16
 800a85e:	af00      	add	r7, sp, #0
 800a860:	60f8      	str	r0, [r7, #12]
 800a862:	60b9      	str	r1, [r7, #8]
 800a864:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	68ba      	ldr	r2, [r7, #8]
 800a86a:	2100      	movs	r1, #0
 800a86c:	68f8      	ldr	r0, [r7, #12]
 800a86e:	f000 fc9d 	bl	800b1ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2204      	movs	r2, #4
 800a888:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a88c:	2300      	movs	r3, #0
 800a88e:	2200      	movs	r2, #0
 800a890:	2100      	movs	r1, #0
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 fc69 	bl	800b16a <USBD_LL_Transmit>

  return USBD_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b082      	sub	sp, #8
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2205      	movs	r2, #5
 800a8ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 fc77 	bl	800b1ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3708      	adds	r7, #8
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	4912      	ldr	r1, [pc, #72]	@ (800a918 <MX_USB_DEVICE_Init+0x50>)
 800a8d0:	4812      	ldr	r0, [pc, #72]	@ (800a91c <MX_USB_DEVICE_Init+0x54>)
 800a8d2:	f7fe fcf7 	bl	80092c4 <USBD_Init>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d001      	beq.n	800a8e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a8dc:	f7f6 fff4 	bl	80018c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a8e0:	490f      	ldr	r1, [pc, #60]	@ (800a920 <MX_USB_DEVICE_Init+0x58>)
 800a8e2:	480e      	ldr	r0, [pc, #56]	@ (800a91c <MX_USB_DEVICE_Init+0x54>)
 800a8e4:	f7fe fd1e 	bl	8009324 <USBD_RegisterClass>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a8ee:	f7f6 ffeb 	bl	80018c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a8f2:	490c      	ldr	r1, [pc, #48]	@ (800a924 <MX_USB_DEVICE_Init+0x5c>)
 800a8f4:	4809      	ldr	r0, [pc, #36]	@ (800a91c <MX_USB_DEVICE_Init+0x54>)
 800a8f6:	f7fe fc55 	bl	80091a4 <USBD_CDC_RegisterInterface>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a900:	f7f6 ffe2 	bl	80018c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a904:	4805      	ldr	r0, [pc, #20]	@ (800a91c <MX_USB_DEVICE_Init+0x54>)
 800a906:	f7fe fd43 	bl	8009390 <USBD_Start>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d001      	beq.n	800a914 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a910:	f7f6 ffda 	bl	80018c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a914:	bf00      	nop
 800a916:	bd80      	pop	{r7, pc}
 800a918:	200000ac 	.word	0x200000ac
 800a91c:	2000042c 	.word	0x2000042c
 800a920:	20000018 	.word	0x20000018
 800a924:	20000098 	.word	0x20000098

0800a928 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a92c:	2200      	movs	r2, #0
 800a92e:	4905      	ldr	r1, [pc, #20]	@ (800a944 <CDC_Init_FS+0x1c>)
 800a930:	4805      	ldr	r0, [pc, #20]	@ (800a948 <CDC_Init_FS+0x20>)
 800a932:	f7fe fc51 	bl	80091d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a936:	4905      	ldr	r1, [pc, #20]	@ (800a94c <CDC_Init_FS+0x24>)
 800a938:	4803      	ldr	r0, [pc, #12]	@ (800a948 <CDC_Init_FS+0x20>)
 800a93a:	f7fe fc6f 	bl	800921c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a93e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a940:	4618      	mov	r0, r3
 800a942:	bd80      	pop	{r7, pc}
 800a944:	20000f08 	.word	0x20000f08
 800a948:	2000042c 	.word	0x2000042c
 800a94c:	20000708 	.word	0x20000708

0800a950 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a950:	b480      	push	{r7}
 800a952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a954:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a956:	4618      	mov	r0, r3
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	4603      	mov	r3, r0
 800a968:	6039      	str	r1, [r7, #0]
 800a96a:	71fb      	strb	r3, [r7, #7]
 800a96c:	4613      	mov	r3, r2
 800a96e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a970:	79fb      	ldrb	r3, [r7, #7]
 800a972:	2b23      	cmp	r3, #35	@ 0x23
 800a974:	d84a      	bhi.n	800aa0c <CDC_Control_FS+0xac>
 800a976:	a201      	add	r2, pc, #4	@ (adr r2, 800a97c <CDC_Control_FS+0x1c>)
 800a978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97c:	0800aa0d 	.word	0x0800aa0d
 800a980:	0800aa0d 	.word	0x0800aa0d
 800a984:	0800aa0d 	.word	0x0800aa0d
 800a988:	0800aa0d 	.word	0x0800aa0d
 800a98c:	0800aa0d 	.word	0x0800aa0d
 800a990:	0800aa0d 	.word	0x0800aa0d
 800a994:	0800aa0d 	.word	0x0800aa0d
 800a998:	0800aa0d 	.word	0x0800aa0d
 800a99c:	0800aa0d 	.word	0x0800aa0d
 800a9a0:	0800aa0d 	.word	0x0800aa0d
 800a9a4:	0800aa0d 	.word	0x0800aa0d
 800a9a8:	0800aa0d 	.word	0x0800aa0d
 800a9ac:	0800aa0d 	.word	0x0800aa0d
 800a9b0:	0800aa0d 	.word	0x0800aa0d
 800a9b4:	0800aa0d 	.word	0x0800aa0d
 800a9b8:	0800aa0d 	.word	0x0800aa0d
 800a9bc:	0800aa0d 	.word	0x0800aa0d
 800a9c0:	0800aa0d 	.word	0x0800aa0d
 800a9c4:	0800aa0d 	.word	0x0800aa0d
 800a9c8:	0800aa0d 	.word	0x0800aa0d
 800a9cc:	0800aa0d 	.word	0x0800aa0d
 800a9d0:	0800aa0d 	.word	0x0800aa0d
 800a9d4:	0800aa0d 	.word	0x0800aa0d
 800a9d8:	0800aa0d 	.word	0x0800aa0d
 800a9dc:	0800aa0d 	.word	0x0800aa0d
 800a9e0:	0800aa0d 	.word	0x0800aa0d
 800a9e4:	0800aa0d 	.word	0x0800aa0d
 800a9e8:	0800aa0d 	.word	0x0800aa0d
 800a9ec:	0800aa0d 	.word	0x0800aa0d
 800a9f0:	0800aa0d 	.word	0x0800aa0d
 800a9f4:	0800aa0d 	.word	0x0800aa0d
 800a9f8:	0800aa0d 	.word	0x0800aa0d
 800a9fc:	0800aa0d 	.word	0x0800aa0d
 800aa00:	0800aa0d 	.word	0x0800aa0d
 800aa04:	0800aa0d 	.word	0x0800aa0d
 800aa08:	0800aa0d 	.word	0x0800aa0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aa0c:	bf00      	nop
  }

  return (USBD_OK);
 800aa0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aa26:	6879      	ldr	r1, [r7, #4]
 800aa28:	4805      	ldr	r0, [pc, #20]	@ (800aa40 <CDC_Receive_FS+0x24>)
 800aa2a:	f7fe fbf7 	bl	800921c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aa2e:	4804      	ldr	r0, [pc, #16]	@ (800aa40 <CDC_Receive_FS+0x24>)
 800aa30:	f7fe fc12 	bl	8009258 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aa34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3708      	adds	r7, #8
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	2000042c 	.word	0x2000042c

0800aa44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b087      	sub	sp, #28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	4613      	mov	r3, r2
 800aa50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aa56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	371c      	adds	r7, #28
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr
	...

0800aa68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	4603      	mov	r3, r0
 800aa70:	6039      	str	r1, [r7, #0]
 800aa72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	2212      	movs	r2, #18
 800aa78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aa7a:	4b03      	ldr	r3, [pc, #12]	@ (800aa88 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr
 800aa88:	200000c8 	.word	0x200000c8

0800aa8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	4603      	mov	r3, r0
 800aa94:	6039      	str	r1, [r7, #0]
 800aa96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	2204      	movs	r2, #4
 800aa9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa9e:	4b03      	ldr	r3, [pc, #12]	@ (800aaac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	370c      	adds	r7, #12
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr
 800aaac:	200000dc 	.word	0x200000dc

0800aab0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	4603      	mov	r3, r0
 800aab8:	6039      	str	r1, [r7, #0]
 800aaba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aabc:	79fb      	ldrb	r3, [r7, #7]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d105      	bne.n	800aace <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	4907      	ldr	r1, [pc, #28]	@ (800aae4 <USBD_FS_ProductStrDescriptor+0x34>)
 800aac6:	4808      	ldr	r0, [pc, #32]	@ (800aae8 <USBD_FS_ProductStrDescriptor+0x38>)
 800aac8:	f7ff fe12 	bl	800a6f0 <USBD_GetString>
 800aacc:	e004      	b.n	800aad8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aace:	683a      	ldr	r2, [r7, #0]
 800aad0:	4904      	ldr	r1, [pc, #16]	@ (800aae4 <USBD_FS_ProductStrDescriptor+0x34>)
 800aad2:	4805      	ldr	r0, [pc, #20]	@ (800aae8 <USBD_FS_ProductStrDescriptor+0x38>)
 800aad4:	f7ff fe0c 	bl	800a6f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aad8:	4b02      	ldr	r3, [pc, #8]	@ (800aae4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	20001708 	.word	0x20001708
 800aae8:	0800e484 	.word	0x0800e484

0800aaec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	6039      	str	r1, [r7, #0]
 800aaf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aaf8:	683a      	ldr	r2, [r7, #0]
 800aafa:	4904      	ldr	r1, [pc, #16]	@ (800ab0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aafc:	4804      	ldr	r0, [pc, #16]	@ (800ab10 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aafe:	f7ff fdf7 	bl	800a6f0 <USBD_GetString>
  return USBD_StrDesc;
 800ab02:	4b02      	ldr	r3, [pc, #8]	@ (800ab0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3708      	adds	r7, #8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	20001708 	.word	0x20001708
 800ab10:	0800e49c 	.word	0x0800e49c

0800ab14 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	6039      	str	r1, [r7, #0]
 800ab1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	221a      	movs	r2, #26
 800ab24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab26:	f000 f843 	bl	800abb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ab2a:	4b02      	ldr	r3, [pc, #8]	@ (800ab34 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3708      	adds	r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	200000e0 	.word	0x200000e0

0800ab38 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	4603      	mov	r3, r0
 800ab40:	6039      	str	r1, [r7, #0]
 800ab42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab44:	79fb      	ldrb	r3, [r7, #7]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d105      	bne.n	800ab56 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab4a:	683a      	ldr	r2, [r7, #0]
 800ab4c:	4907      	ldr	r1, [pc, #28]	@ (800ab6c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab4e:	4808      	ldr	r0, [pc, #32]	@ (800ab70 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab50:	f7ff fdce 	bl	800a6f0 <USBD_GetString>
 800ab54:	e004      	b.n	800ab60 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab56:	683a      	ldr	r2, [r7, #0]
 800ab58:	4904      	ldr	r1, [pc, #16]	@ (800ab6c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab5a:	4805      	ldr	r0, [pc, #20]	@ (800ab70 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab5c:	f7ff fdc8 	bl	800a6f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab60:	4b02      	ldr	r3, [pc, #8]	@ (800ab6c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3708      	adds	r7, #8
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	20001708 	.word	0x20001708
 800ab70:	0800e4b0 	.word	0x0800e4b0

0800ab74 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	6039      	str	r1, [r7, #0]
 800ab7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab80:	79fb      	ldrb	r3, [r7, #7]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d105      	bne.n	800ab92 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab86:	683a      	ldr	r2, [r7, #0]
 800ab88:	4907      	ldr	r1, [pc, #28]	@ (800aba8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab8a:	4808      	ldr	r0, [pc, #32]	@ (800abac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab8c:	f7ff fdb0 	bl	800a6f0 <USBD_GetString>
 800ab90:	e004      	b.n	800ab9c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab92:	683a      	ldr	r2, [r7, #0]
 800ab94:	4904      	ldr	r1, [pc, #16]	@ (800aba8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab96:	4805      	ldr	r0, [pc, #20]	@ (800abac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab98:	f7ff fdaa 	bl	800a6f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab9c:	4b02      	ldr	r3, [pc, #8]	@ (800aba8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	20001708 	.word	0x20001708
 800abac:	0800e4bc 	.word	0x0800e4bc

0800abb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800abb6:	4b0f      	ldr	r3, [pc, #60]	@ (800abf4 <Get_SerialNum+0x44>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800abbc:	4b0e      	ldr	r3, [pc, #56]	@ (800abf8 <Get_SerialNum+0x48>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800abc2:	4b0e      	ldr	r3, [pc, #56]	@ (800abfc <Get_SerialNum+0x4c>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800abc8:	68fa      	ldr	r2, [r7, #12]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4413      	add	r3, r2
 800abce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d009      	beq.n	800abea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800abd6:	2208      	movs	r2, #8
 800abd8:	4909      	ldr	r1, [pc, #36]	@ (800ac00 <Get_SerialNum+0x50>)
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f000 f814 	bl	800ac08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800abe0:	2204      	movs	r2, #4
 800abe2:	4908      	ldr	r1, [pc, #32]	@ (800ac04 <Get_SerialNum+0x54>)
 800abe4:	68b8      	ldr	r0, [r7, #8]
 800abe6:	f000 f80f 	bl	800ac08 <IntToUnicode>
  }
}
 800abea:	bf00      	nop
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	1fff7a10 	.word	0x1fff7a10
 800abf8:	1fff7a14 	.word	0x1fff7a14
 800abfc:	1fff7a18 	.word	0x1fff7a18
 800ac00:	200000e2 	.word	0x200000e2
 800ac04:	200000f2 	.word	0x200000f2

0800ac08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b087      	sub	sp, #28
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	4613      	mov	r3, r2
 800ac14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac16:	2300      	movs	r3, #0
 800ac18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	75fb      	strb	r3, [r7, #23]
 800ac1e:	e027      	b.n	800ac70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	0f1b      	lsrs	r3, r3, #28
 800ac24:	2b09      	cmp	r3, #9
 800ac26:	d80b      	bhi.n	800ac40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	0f1b      	lsrs	r3, r3, #28
 800ac2c:	b2da      	uxtb	r2, r3
 800ac2e:	7dfb      	ldrb	r3, [r7, #23]
 800ac30:	005b      	lsls	r3, r3, #1
 800ac32:	4619      	mov	r1, r3
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	440b      	add	r3, r1
 800ac38:	3230      	adds	r2, #48	@ 0x30
 800ac3a:	b2d2      	uxtb	r2, r2
 800ac3c:	701a      	strb	r2, [r3, #0]
 800ac3e:	e00a      	b.n	800ac56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	0f1b      	lsrs	r3, r3, #28
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	7dfb      	ldrb	r3, [r7, #23]
 800ac48:	005b      	lsls	r3, r3, #1
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	440b      	add	r3, r1
 800ac50:	3237      	adds	r2, #55	@ 0x37
 800ac52:	b2d2      	uxtb	r2, r2
 800ac54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	011b      	lsls	r3, r3, #4
 800ac5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac5c:	7dfb      	ldrb	r3, [r7, #23]
 800ac5e:	005b      	lsls	r3, r3, #1
 800ac60:	3301      	adds	r3, #1
 800ac62:	68ba      	ldr	r2, [r7, #8]
 800ac64:	4413      	add	r3, r2
 800ac66:	2200      	movs	r2, #0
 800ac68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac6a:	7dfb      	ldrb	r3, [r7, #23]
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	75fb      	strb	r3, [r7, #23]
 800ac70:	7dfa      	ldrb	r2, [r7, #23]
 800ac72:	79fb      	ldrb	r3, [r7, #7]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d3d3      	bcc.n	800ac20 <IntToUnicode+0x18>
  }
}
 800ac78:	bf00      	nop
 800ac7a:	bf00      	nop
 800ac7c:	371c      	adds	r7, #28
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
	...

0800ac88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b08a      	sub	sp, #40	@ 0x28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac90:	f107 0314 	add.w	r3, r7, #20
 800ac94:	2200      	movs	r2, #0
 800ac96:	601a      	str	r2, [r3, #0]
 800ac98:	605a      	str	r2, [r3, #4]
 800ac9a:	609a      	str	r2, [r3, #8]
 800ac9c:	60da      	str	r2, [r3, #12]
 800ac9e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aca8:	d13a      	bne.n	800ad20 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acaa:	2300      	movs	r3, #0
 800acac:	613b      	str	r3, [r7, #16]
 800acae:	4b1e      	ldr	r3, [pc, #120]	@ (800ad28 <HAL_PCD_MspInit+0xa0>)
 800acb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acb2:	4a1d      	ldr	r2, [pc, #116]	@ (800ad28 <HAL_PCD_MspInit+0xa0>)
 800acb4:	f043 0301 	orr.w	r3, r3, #1
 800acb8:	6313      	str	r3, [r2, #48]	@ 0x30
 800acba:	4b1b      	ldr	r3, [pc, #108]	@ (800ad28 <HAL_PCD_MspInit+0xa0>)
 800acbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acbe:	f003 0301 	and.w	r3, r3, #1
 800acc2:	613b      	str	r3, [r7, #16]
 800acc4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800acc6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800acca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800accc:	2302      	movs	r3, #2
 800acce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acd0:	2300      	movs	r3, #0
 800acd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acd4:	2303      	movs	r3, #3
 800acd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800acd8:	230a      	movs	r3, #10
 800acda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acdc:	f107 0314 	add.w	r3, r7, #20
 800ace0:	4619      	mov	r1, r3
 800ace2:	4812      	ldr	r0, [pc, #72]	@ (800ad2c <HAL_PCD_MspInit+0xa4>)
 800ace4:	f7f7 fb08 	bl	80022f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ace8:	4b0f      	ldr	r3, [pc, #60]	@ (800ad28 <HAL_PCD_MspInit+0xa0>)
 800acea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acec:	4a0e      	ldr	r2, [pc, #56]	@ (800ad28 <HAL_PCD_MspInit+0xa0>)
 800acee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acf2:	6353      	str	r3, [r2, #52]	@ 0x34
 800acf4:	2300      	movs	r3, #0
 800acf6:	60fb      	str	r3, [r7, #12]
 800acf8:	4b0b      	ldr	r3, [pc, #44]	@ (800ad28 <HAL_PCD_MspInit+0xa0>)
 800acfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acfc:	4a0a      	ldr	r2, [pc, #40]	@ (800ad28 <HAL_PCD_MspInit+0xa0>)
 800acfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ad02:	6453      	str	r3, [r2, #68]	@ 0x44
 800ad04:	4b08      	ldr	r3, [pc, #32]	@ (800ad28 <HAL_PCD_MspInit+0xa0>)
 800ad06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad0c:	60fb      	str	r3, [r7, #12]
 800ad0e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ad10:	2200      	movs	r2, #0
 800ad12:	2100      	movs	r1, #0
 800ad14:	2043      	movs	r0, #67	@ 0x43
 800ad16:	f7f7 fa26 	bl	8002166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ad1a:	2043      	movs	r0, #67	@ 0x43
 800ad1c:	f7f7 fa3f 	bl	800219e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ad20:	bf00      	nop
 800ad22:	3728      	adds	r7, #40	@ 0x28
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	40023800 	.word	0x40023800
 800ad2c:	40020000 	.word	0x40020000

0800ad30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ad44:	4619      	mov	r1, r3
 800ad46:	4610      	mov	r0, r2
 800ad48:	f7fe fb6f 	bl	800942a <USBD_LL_SetupStage>
}
 800ad4c:	bf00      	nop
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ad66:	78fa      	ldrb	r2, [r7, #3]
 800ad68:	6879      	ldr	r1, [r7, #4]
 800ad6a:	4613      	mov	r3, r2
 800ad6c:	00db      	lsls	r3, r3, #3
 800ad6e:	4413      	add	r3, r2
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	440b      	add	r3, r1
 800ad74:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	78fb      	ldrb	r3, [r7, #3]
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	f7fe fba9 	bl	80094d4 <USBD_LL_DataOutStage>
}
 800ad82:	bf00      	nop
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b082      	sub	sp, #8
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
 800ad92:	460b      	mov	r3, r1
 800ad94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ad9c:	78fa      	ldrb	r2, [r7, #3]
 800ad9e:	6879      	ldr	r1, [r7, #4]
 800ada0:	4613      	mov	r3, r2
 800ada2:	00db      	lsls	r3, r3, #3
 800ada4:	4413      	add	r3, r2
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	440b      	add	r3, r1
 800adaa:	3320      	adds	r3, #32
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	78fb      	ldrb	r3, [r7, #3]
 800adb0:	4619      	mov	r1, r3
 800adb2:	f7fe fc42 	bl	800963a <USBD_LL_DataInStage>
}
 800adb6:	bf00      	nop
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b082      	sub	sp, #8
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fe fd7c 	bl	80098ca <USBD_LL_SOF>
}
 800add2:	bf00      	nop
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b084      	sub	sp, #16
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ade2:	2301      	movs	r3, #1
 800ade4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	79db      	ldrb	r3, [r3, #7]
 800adea:	2b02      	cmp	r3, #2
 800adec:	d001      	beq.n	800adf2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800adee:	f7f6 fd6b 	bl	80018c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800adf8:	7bfa      	ldrb	r2, [r7, #15]
 800adfa:	4611      	mov	r1, r2
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7fe fd20 	bl	8009842 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7fe fcc8 	bl	800979e <USBD_LL_Reset>
}
 800ae0e:	bf00      	nop
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
	...

0800ae18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7fe fd1b 	bl	8009862 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	6812      	ldr	r2, [r2, #0]
 800ae3a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ae3e:	f043 0301 	orr.w	r3, r3, #1
 800ae42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	7adb      	ldrb	r3, [r3, #11]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d005      	beq.n	800ae58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae4c:	4b04      	ldr	r3, [pc, #16]	@ (800ae60 <HAL_PCD_SuspendCallback+0x48>)
 800ae4e:	691b      	ldr	r3, [r3, #16]
 800ae50:	4a03      	ldr	r2, [pc, #12]	@ (800ae60 <HAL_PCD_SuspendCallback+0x48>)
 800ae52:	f043 0306 	orr.w	r3, r3, #6
 800ae56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ae58:	bf00      	nop
 800ae5a:	3708      	adds	r7, #8
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	e000ed00 	.word	0xe000ed00

0800ae64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fe fd11 	bl	800989a <USBD_LL_Resume>
}
 800ae78:	bf00      	nop
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	460b      	mov	r3, r1
 800ae8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae92:	78fa      	ldrb	r2, [r7, #3]
 800ae94:	4611      	mov	r1, r2
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7fe fd69 	bl	800996e <USBD_LL_IsoOUTIncomplete>
}
 800ae9c:	bf00      	nop
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	460b      	mov	r3, r1
 800aeae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aeb6:	78fa      	ldrb	r2, [r7, #3]
 800aeb8:	4611      	mov	r1, r2
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7fe fd25 	bl	800990a <USBD_LL_IsoINIncomplete>
}
 800aec0:	bf00      	nop
 800aec2:	3708      	adds	r7, #8
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7fe fd7b 	bl	80099d2 <USBD_LL_DevConnected>
}
 800aedc:	bf00      	nop
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7fe fd78 	bl	80099e8 <USBD_LL_DevDisconnected>
}
 800aef8:	bf00      	nop
 800aefa:	3708      	adds	r7, #8
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d13c      	bne.n	800af8a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800af10:	4a20      	ldr	r2, [pc, #128]	@ (800af94 <USBD_LL_Init+0x94>)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4a1e      	ldr	r2, [pc, #120]	@ (800af94 <USBD_LL_Init+0x94>)
 800af1c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af20:	4b1c      	ldr	r3, [pc, #112]	@ (800af94 <USBD_LL_Init+0x94>)
 800af22:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800af26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800af28:	4b1a      	ldr	r3, [pc, #104]	@ (800af94 <USBD_LL_Init+0x94>)
 800af2a:	2204      	movs	r2, #4
 800af2c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800af2e:	4b19      	ldr	r3, [pc, #100]	@ (800af94 <USBD_LL_Init+0x94>)
 800af30:	2202      	movs	r2, #2
 800af32:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800af34:	4b17      	ldr	r3, [pc, #92]	@ (800af94 <USBD_LL_Init+0x94>)
 800af36:	2200      	movs	r2, #0
 800af38:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af3a:	4b16      	ldr	r3, [pc, #88]	@ (800af94 <USBD_LL_Init+0x94>)
 800af3c:	2202      	movs	r2, #2
 800af3e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800af40:	4b14      	ldr	r3, [pc, #80]	@ (800af94 <USBD_LL_Init+0x94>)
 800af42:	2200      	movs	r2, #0
 800af44:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800af46:	4b13      	ldr	r3, [pc, #76]	@ (800af94 <USBD_LL_Init+0x94>)
 800af48:	2200      	movs	r2, #0
 800af4a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800af4c:	4b11      	ldr	r3, [pc, #68]	@ (800af94 <USBD_LL_Init+0x94>)
 800af4e:	2200      	movs	r2, #0
 800af50:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800af52:	4b10      	ldr	r3, [pc, #64]	@ (800af94 <USBD_LL_Init+0x94>)
 800af54:	2200      	movs	r2, #0
 800af56:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800af58:	4b0e      	ldr	r3, [pc, #56]	@ (800af94 <USBD_LL_Init+0x94>)
 800af5a:	2200      	movs	r2, #0
 800af5c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800af5e:	480d      	ldr	r0, [pc, #52]	@ (800af94 <USBD_LL_Init+0x94>)
 800af60:	f7f8 fb7c 	bl	800365c <HAL_PCD_Init>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800af6a:	f7f6 fcad 	bl	80018c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800af6e:	2180      	movs	r1, #128	@ 0x80
 800af70:	4808      	ldr	r0, [pc, #32]	@ (800af94 <USBD_LL_Init+0x94>)
 800af72:	f7f9 fda8 	bl	8004ac6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800af76:	2240      	movs	r2, #64	@ 0x40
 800af78:	2100      	movs	r1, #0
 800af7a:	4806      	ldr	r0, [pc, #24]	@ (800af94 <USBD_LL_Init+0x94>)
 800af7c:	f7f9 fd5c 	bl	8004a38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800af80:	2280      	movs	r2, #128	@ 0x80
 800af82:	2101      	movs	r1, #1
 800af84:	4803      	ldr	r0, [pc, #12]	@ (800af94 <USBD_LL_Init+0x94>)
 800af86:	f7f9 fd57 	bl	8004a38 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	20001908 	.word	0x20001908

0800af98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afa4:	2300      	movs	r3, #0
 800afa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800afae:	4618      	mov	r0, r3
 800afb0:	f7f8 fc63 	bl	800387a <HAL_PCD_Start>
 800afb4:	4603      	mov	r3, r0
 800afb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
 800afba:	4618      	mov	r0, r3
 800afbc:	f000 f942 	bl	800b244 <USBD_Get_USB_Status>
 800afc0:	4603      	mov	r3, r0
 800afc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b084      	sub	sp, #16
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
 800afd6:	4608      	mov	r0, r1
 800afd8:	4611      	mov	r1, r2
 800afda:	461a      	mov	r2, r3
 800afdc:	4603      	mov	r3, r0
 800afde:	70fb      	strb	r3, [r7, #3]
 800afe0:	460b      	mov	r3, r1
 800afe2:	70bb      	strb	r3, [r7, #2]
 800afe4:	4613      	mov	r3, r2
 800afe6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aff6:	78bb      	ldrb	r3, [r7, #2]
 800aff8:	883a      	ldrh	r2, [r7, #0]
 800affa:	78f9      	ldrb	r1, [r7, #3]
 800affc:	f7f9 f937 	bl	800426e <HAL_PCD_EP_Open>
 800b000:	4603      	mov	r3, r0
 800b002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b004:	7bfb      	ldrb	r3, [r7, #15]
 800b006:	4618      	mov	r0, r3
 800b008:	f000 f91c 	bl	800b244 <USBD_Get_USB_Status>
 800b00c:	4603      	mov	r3, r0
 800b00e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b010:	7bbb      	ldrb	r3, [r7, #14]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b084      	sub	sp, #16
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
 800b022:	460b      	mov	r3, r1
 800b024:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b026:	2300      	movs	r3, #0
 800b028:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b034:	78fa      	ldrb	r2, [r7, #3]
 800b036:	4611      	mov	r1, r2
 800b038:	4618      	mov	r0, r3
 800b03a:	f7f9 f982 	bl	8004342 <HAL_PCD_EP_Close>
 800b03e:	4603      	mov	r3, r0
 800b040:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b042:	7bfb      	ldrb	r3, [r7, #15]
 800b044:	4618      	mov	r0, r3
 800b046:	f000 f8fd 	bl	800b244 <USBD_Get_USB_Status>
 800b04a:	4603      	mov	r3, r0
 800b04c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b04e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b050:	4618      	mov	r0, r3
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	460b      	mov	r3, r1
 800b062:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b068:	2300      	movs	r3, #0
 800b06a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b072:	78fa      	ldrb	r2, [r7, #3]
 800b074:	4611      	mov	r1, r2
 800b076:	4618      	mov	r0, r3
 800b078:	f7f9 fa3a 	bl	80044f0 <HAL_PCD_EP_SetStall>
 800b07c:	4603      	mov	r3, r0
 800b07e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b080:	7bfb      	ldrb	r3, [r7, #15]
 800b082:	4618      	mov	r0, r3
 800b084:	f000 f8de 	bl	800b244 <USBD_Get_USB_Status>
 800b088:	4603      	mov	r3, r0
 800b08a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b08c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b084      	sub	sp, #16
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
 800b09e:	460b      	mov	r3, r1
 800b0a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b0b0:	78fa      	ldrb	r2, [r7, #3]
 800b0b2:	4611      	mov	r1, r2
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7f9 fa7e 	bl	80045b6 <HAL_PCD_EP_ClrStall>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0be:	7bfb      	ldrb	r3, [r7, #15]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f000 f8bf 	bl	800b244 <USBD_Get_USB_Status>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	460b      	mov	r3, r1
 800b0de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b0e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b0e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	da0b      	bge.n	800b108 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b0f0:	78fb      	ldrb	r3, [r7, #3]
 800b0f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0f6:	68f9      	ldr	r1, [r7, #12]
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	00db      	lsls	r3, r3, #3
 800b0fc:	4413      	add	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	440b      	add	r3, r1
 800b102:	3316      	adds	r3, #22
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	e00b      	b.n	800b120 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b108:	78fb      	ldrb	r3, [r7, #3]
 800b10a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b10e:	68f9      	ldr	r1, [r7, #12]
 800b110:	4613      	mov	r3, r2
 800b112:	00db      	lsls	r3, r3, #3
 800b114:	4413      	add	r3, r2
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	440b      	add	r3, r1
 800b11a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b11e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b120:	4618      	mov	r0, r3
 800b122:	3714      	adds	r7, #20
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr

0800b12c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	460b      	mov	r3, r1
 800b136:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b138:	2300      	movs	r3, #0
 800b13a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b13c:	2300      	movs	r3, #0
 800b13e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b146:	78fa      	ldrb	r2, [r7, #3]
 800b148:	4611      	mov	r1, r2
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7f9 f86b 	bl	8004226 <HAL_PCD_SetAddress>
 800b150:	4603      	mov	r3, r0
 800b152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b154:	7bfb      	ldrb	r3, [r7, #15]
 800b156:	4618      	mov	r0, r3
 800b158:	f000 f874 	bl	800b244 <USBD_Get_USB_Status>
 800b15c:	4603      	mov	r3, r0
 800b15e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b160:	7bbb      	ldrb	r3, [r7, #14]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b086      	sub	sp, #24
 800b16e:	af00      	add	r7, sp, #0
 800b170:	60f8      	str	r0, [r7, #12]
 800b172:	607a      	str	r2, [r7, #4]
 800b174:	603b      	str	r3, [r7, #0]
 800b176:	460b      	mov	r3, r1
 800b178:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b17a:	2300      	movs	r3, #0
 800b17c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b17e:	2300      	movs	r3, #0
 800b180:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b188:	7af9      	ldrb	r1, [r7, #11]
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	f7f9 f975 	bl	800447c <HAL_PCD_EP_Transmit>
 800b192:	4603      	mov	r3, r0
 800b194:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b196:	7dfb      	ldrb	r3, [r7, #23]
 800b198:	4618      	mov	r0, r3
 800b19a:	f000 f853 	bl	800b244 <USBD_Get_USB_Status>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1a2:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3718      	adds	r7, #24
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b086      	sub	sp, #24
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	607a      	str	r2, [r7, #4]
 800b1b6:	603b      	str	r3, [r7, #0]
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b1ca:	7af9      	ldrb	r1, [r7, #11]
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	f7f9 f901 	bl	80043d6 <HAL_PCD_EP_Receive>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1d8:	7dfb      	ldrb	r3, [r7, #23]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f000 f832 	bl	800b244 <USBD_Get_USB_Status>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1e4:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3718      	adds	r7, #24
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b082      	sub	sp, #8
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b200:	78fa      	ldrb	r2, [r7, #3]
 800b202:	4611      	mov	r1, r2
 800b204:	4618      	mov	r0, r3
 800b206:	f7f9 f921 	bl	800444c <HAL_PCD_EP_GetRxCount>
 800b20a:	4603      	mov	r3, r0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3708      	adds	r7, #8
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b21c:	4b03      	ldr	r3, [pc, #12]	@ (800b22c <USBD_static_malloc+0x18>)
}
 800b21e:	4618      	mov	r0, r3
 800b220:	370c      	adds	r7, #12
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr
 800b22a:	bf00      	nop
 800b22c:	20001dec 	.word	0x20001dec

0800b230 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]

}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b244:	b480      	push	{r7}
 800b246:	b085      	sub	sp, #20
 800b248:	af00      	add	r7, sp, #0
 800b24a:	4603      	mov	r3, r0
 800b24c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b24e:	2300      	movs	r3, #0
 800b250:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b252:	79fb      	ldrb	r3, [r7, #7]
 800b254:	2b03      	cmp	r3, #3
 800b256:	d817      	bhi.n	800b288 <USBD_Get_USB_Status+0x44>
 800b258:	a201      	add	r2, pc, #4	@ (adr r2, 800b260 <USBD_Get_USB_Status+0x1c>)
 800b25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b25e:	bf00      	nop
 800b260:	0800b271 	.word	0x0800b271
 800b264:	0800b277 	.word	0x0800b277
 800b268:	0800b27d 	.word	0x0800b27d
 800b26c:	0800b283 	.word	0x0800b283
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b270:	2300      	movs	r3, #0
 800b272:	73fb      	strb	r3, [r7, #15]
    break;
 800b274:	e00b      	b.n	800b28e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b276:	2303      	movs	r3, #3
 800b278:	73fb      	strb	r3, [r7, #15]
    break;
 800b27a:	e008      	b.n	800b28e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b27c:	2301      	movs	r3, #1
 800b27e:	73fb      	strb	r3, [r7, #15]
    break;
 800b280:	e005      	b.n	800b28e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b282:	2303      	movs	r3, #3
 800b284:	73fb      	strb	r3, [r7, #15]
    break;
 800b286:	e002      	b.n	800b28e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b288:	2303      	movs	r3, #3
 800b28a:	73fb      	strb	r3, [r7, #15]
    break;
 800b28c:	bf00      	nop
  }
  return usb_status;
 800b28e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b290:	4618      	mov	r0, r3
 800b292:	3714      	adds	r7, #20
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <__cvt>:
 800b29c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2a0:	ec57 6b10 	vmov	r6, r7, d0
 800b2a4:	2f00      	cmp	r7, #0
 800b2a6:	460c      	mov	r4, r1
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	463b      	mov	r3, r7
 800b2ac:	bfbb      	ittet	lt
 800b2ae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b2b2:	461f      	movlt	r7, r3
 800b2b4:	2300      	movge	r3, #0
 800b2b6:	232d      	movlt	r3, #45	@ 0x2d
 800b2b8:	700b      	strb	r3, [r1, #0]
 800b2ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2bc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b2c0:	4691      	mov	r9, r2
 800b2c2:	f023 0820 	bic.w	r8, r3, #32
 800b2c6:	bfbc      	itt	lt
 800b2c8:	4632      	movlt	r2, r6
 800b2ca:	4616      	movlt	r6, r2
 800b2cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b2d0:	d005      	beq.n	800b2de <__cvt+0x42>
 800b2d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b2d6:	d100      	bne.n	800b2da <__cvt+0x3e>
 800b2d8:	3401      	adds	r4, #1
 800b2da:	2102      	movs	r1, #2
 800b2dc:	e000      	b.n	800b2e0 <__cvt+0x44>
 800b2de:	2103      	movs	r1, #3
 800b2e0:	ab03      	add	r3, sp, #12
 800b2e2:	9301      	str	r3, [sp, #4]
 800b2e4:	ab02      	add	r3, sp, #8
 800b2e6:	9300      	str	r3, [sp, #0]
 800b2e8:	ec47 6b10 	vmov	d0, r6, r7
 800b2ec:	4653      	mov	r3, sl
 800b2ee:	4622      	mov	r2, r4
 800b2f0:	f000 fe6e 	bl	800bfd0 <_dtoa_r>
 800b2f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b2f8:	4605      	mov	r5, r0
 800b2fa:	d119      	bne.n	800b330 <__cvt+0x94>
 800b2fc:	f019 0f01 	tst.w	r9, #1
 800b300:	d00e      	beq.n	800b320 <__cvt+0x84>
 800b302:	eb00 0904 	add.w	r9, r0, r4
 800b306:	2200      	movs	r2, #0
 800b308:	2300      	movs	r3, #0
 800b30a:	4630      	mov	r0, r6
 800b30c:	4639      	mov	r1, r7
 800b30e:	f7f5 fbe3 	bl	8000ad8 <__aeabi_dcmpeq>
 800b312:	b108      	cbz	r0, 800b318 <__cvt+0x7c>
 800b314:	f8cd 900c 	str.w	r9, [sp, #12]
 800b318:	2230      	movs	r2, #48	@ 0x30
 800b31a:	9b03      	ldr	r3, [sp, #12]
 800b31c:	454b      	cmp	r3, r9
 800b31e:	d31e      	bcc.n	800b35e <__cvt+0xc2>
 800b320:	9b03      	ldr	r3, [sp, #12]
 800b322:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b324:	1b5b      	subs	r3, r3, r5
 800b326:	4628      	mov	r0, r5
 800b328:	6013      	str	r3, [r2, #0]
 800b32a:	b004      	add	sp, #16
 800b32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b330:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b334:	eb00 0904 	add.w	r9, r0, r4
 800b338:	d1e5      	bne.n	800b306 <__cvt+0x6a>
 800b33a:	7803      	ldrb	r3, [r0, #0]
 800b33c:	2b30      	cmp	r3, #48	@ 0x30
 800b33e:	d10a      	bne.n	800b356 <__cvt+0xba>
 800b340:	2200      	movs	r2, #0
 800b342:	2300      	movs	r3, #0
 800b344:	4630      	mov	r0, r6
 800b346:	4639      	mov	r1, r7
 800b348:	f7f5 fbc6 	bl	8000ad8 <__aeabi_dcmpeq>
 800b34c:	b918      	cbnz	r0, 800b356 <__cvt+0xba>
 800b34e:	f1c4 0401 	rsb	r4, r4, #1
 800b352:	f8ca 4000 	str.w	r4, [sl]
 800b356:	f8da 3000 	ldr.w	r3, [sl]
 800b35a:	4499      	add	r9, r3
 800b35c:	e7d3      	b.n	800b306 <__cvt+0x6a>
 800b35e:	1c59      	adds	r1, r3, #1
 800b360:	9103      	str	r1, [sp, #12]
 800b362:	701a      	strb	r2, [r3, #0]
 800b364:	e7d9      	b.n	800b31a <__cvt+0x7e>

0800b366 <__exponent>:
 800b366:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b368:	2900      	cmp	r1, #0
 800b36a:	bfba      	itte	lt
 800b36c:	4249      	neglt	r1, r1
 800b36e:	232d      	movlt	r3, #45	@ 0x2d
 800b370:	232b      	movge	r3, #43	@ 0x2b
 800b372:	2909      	cmp	r1, #9
 800b374:	7002      	strb	r2, [r0, #0]
 800b376:	7043      	strb	r3, [r0, #1]
 800b378:	dd29      	ble.n	800b3ce <__exponent+0x68>
 800b37a:	f10d 0307 	add.w	r3, sp, #7
 800b37e:	461d      	mov	r5, r3
 800b380:	270a      	movs	r7, #10
 800b382:	461a      	mov	r2, r3
 800b384:	fbb1 f6f7 	udiv	r6, r1, r7
 800b388:	fb07 1416 	mls	r4, r7, r6, r1
 800b38c:	3430      	adds	r4, #48	@ 0x30
 800b38e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b392:	460c      	mov	r4, r1
 800b394:	2c63      	cmp	r4, #99	@ 0x63
 800b396:	f103 33ff 	add.w	r3, r3, #4294967295
 800b39a:	4631      	mov	r1, r6
 800b39c:	dcf1      	bgt.n	800b382 <__exponent+0x1c>
 800b39e:	3130      	adds	r1, #48	@ 0x30
 800b3a0:	1e94      	subs	r4, r2, #2
 800b3a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b3a6:	1c41      	adds	r1, r0, #1
 800b3a8:	4623      	mov	r3, r4
 800b3aa:	42ab      	cmp	r3, r5
 800b3ac:	d30a      	bcc.n	800b3c4 <__exponent+0x5e>
 800b3ae:	f10d 0309 	add.w	r3, sp, #9
 800b3b2:	1a9b      	subs	r3, r3, r2
 800b3b4:	42ac      	cmp	r4, r5
 800b3b6:	bf88      	it	hi
 800b3b8:	2300      	movhi	r3, #0
 800b3ba:	3302      	adds	r3, #2
 800b3bc:	4403      	add	r3, r0
 800b3be:	1a18      	subs	r0, r3, r0
 800b3c0:	b003      	add	sp, #12
 800b3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b3c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b3cc:	e7ed      	b.n	800b3aa <__exponent+0x44>
 800b3ce:	2330      	movs	r3, #48	@ 0x30
 800b3d0:	3130      	adds	r1, #48	@ 0x30
 800b3d2:	7083      	strb	r3, [r0, #2]
 800b3d4:	70c1      	strb	r1, [r0, #3]
 800b3d6:	1d03      	adds	r3, r0, #4
 800b3d8:	e7f1      	b.n	800b3be <__exponent+0x58>
	...

0800b3dc <_printf_float>:
 800b3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e0:	b08d      	sub	sp, #52	@ 0x34
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b3e8:	4616      	mov	r6, r2
 800b3ea:	461f      	mov	r7, r3
 800b3ec:	4605      	mov	r5, r0
 800b3ee:	f000 fcef 	bl	800bdd0 <_localeconv_r>
 800b3f2:	6803      	ldr	r3, [r0, #0]
 800b3f4:	9304      	str	r3, [sp, #16]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7f4 ff42 	bl	8000280 <strlen>
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800b400:	f8d8 3000 	ldr.w	r3, [r8]
 800b404:	9005      	str	r0, [sp, #20]
 800b406:	3307      	adds	r3, #7
 800b408:	f023 0307 	bic.w	r3, r3, #7
 800b40c:	f103 0208 	add.w	r2, r3, #8
 800b410:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b414:	f8d4 b000 	ldr.w	fp, [r4]
 800b418:	f8c8 2000 	str.w	r2, [r8]
 800b41c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b420:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b424:	9307      	str	r3, [sp, #28]
 800b426:	f8cd 8018 	str.w	r8, [sp, #24]
 800b42a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b42e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b432:	4b9c      	ldr	r3, [pc, #624]	@ (800b6a4 <_printf_float+0x2c8>)
 800b434:	f04f 32ff 	mov.w	r2, #4294967295
 800b438:	f7f5 fb80 	bl	8000b3c <__aeabi_dcmpun>
 800b43c:	bb70      	cbnz	r0, 800b49c <_printf_float+0xc0>
 800b43e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b442:	4b98      	ldr	r3, [pc, #608]	@ (800b6a4 <_printf_float+0x2c8>)
 800b444:	f04f 32ff 	mov.w	r2, #4294967295
 800b448:	f7f5 fb5a 	bl	8000b00 <__aeabi_dcmple>
 800b44c:	bb30      	cbnz	r0, 800b49c <_printf_float+0xc0>
 800b44e:	2200      	movs	r2, #0
 800b450:	2300      	movs	r3, #0
 800b452:	4640      	mov	r0, r8
 800b454:	4649      	mov	r1, r9
 800b456:	f7f5 fb49 	bl	8000aec <__aeabi_dcmplt>
 800b45a:	b110      	cbz	r0, 800b462 <_printf_float+0x86>
 800b45c:	232d      	movs	r3, #45	@ 0x2d
 800b45e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b462:	4a91      	ldr	r2, [pc, #580]	@ (800b6a8 <_printf_float+0x2cc>)
 800b464:	4b91      	ldr	r3, [pc, #580]	@ (800b6ac <_printf_float+0x2d0>)
 800b466:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b46a:	bf94      	ite	ls
 800b46c:	4690      	movls	r8, r2
 800b46e:	4698      	movhi	r8, r3
 800b470:	2303      	movs	r3, #3
 800b472:	6123      	str	r3, [r4, #16]
 800b474:	f02b 0304 	bic.w	r3, fp, #4
 800b478:	6023      	str	r3, [r4, #0]
 800b47a:	f04f 0900 	mov.w	r9, #0
 800b47e:	9700      	str	r7, [sp, #0]
 800b480:	4633      	mov	r3, r6
 800b482:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b484:	4621      	mov	r1, r4
 800b486:	4628      	mov	r0, r5
 800b488:	f000 f9d2 	bl	800b830 <_printf_common>
 800b48c:	3001      	adds	r0, #1
 800b48e:	f040 808d 	bne.w	800b5ac <_printf_float+0x1d0>
 800b492:	f04f 30ff 	mov.w	r0, #4294967295
 800b496:	b00d      	add	sp, #52	@ 0x34
 800b498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b49c:	4642      	mov	r2, r8
 800b49e:	464b      	mov	r3, r9
 800b4a0:	4640      	mov	r0, r8
 800b4a2:	4649      	mov	r1, r9
 800b4a4:	f7f5 fb4a 	bl	8000b3c <__aeabi_dcmpun>
 800b4a8:	b140      	cbz	r0, 800b4bc <_printf_float+0xe0>
 800b4aa:	464b      	mov	r3, r9
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	bfbc      	itt	lt
 800b4b0:	232d      	movlt	r3, #45	@ 0x2d
 800b4b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b4b6:	4a7e      	ldr	r2, [pc, #504]	@ (800b6b0 <_printf_float+0x2d4>)
 800b4b8:	4b7e      	ldr	r3, [pc, #504]	@ (800b6b4 <_printf_float+0x2d8>)
 800b4ba:	e7d4      	b.n	800b466 <_printf_float+0x8a>
 800b4bc:	6863      	ldr	r3, [r4, #4]
 800b4be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b4c2:	9206      	str	r2, [sp, #24]
 800b4c4:	1c5a      	adds	r2, r3, #1
 800b4c6:	d13b      	bne.n	800b540 <_printf_float+0x164>
 800b4c8:	2306      	movs	r3, #6
 800b4ca:	6063      	str	r3, [r4, #4]
 800b4cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	6022      	str	r2, [r4, #0]
 800b4d4:	9303      	str	r3, [sp, #12]
 800b4d6:	ab0a      	add	r3, sp, #40	@ 0x28
 800b4d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b4dc:	ab09      	add	r3, sp, #36	@ 0x24
 800b4de:	9300      	str	r3, [sp, #0]
 800b4e0:	6861      	ldr	r1, [r4, #4]
 800b4e2:	ec49 8b10 	vmov	d0, r8, r9
 800b4e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b4ea:	4628      	mov	r0, r5
 800b4ec:	f7ff fed6 	bl	800b29c <__cvt>
 800b4f0:	9b06      	ldr	r3, [sp, #24]
 800b4f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b4f4:	2b47      	cmp	r3, #71	@ 0x47
 800b4f6:	4680      	mov	r8, r0
 800b4f8:	d129      	bne.n	800b54e <_printf_float+0x172>
 800b4fa:	1cc8      	adds	r0, r1, #3
 800b4fc:	db02      	blt.n	800b504 <_printf_float+0x128>
 800b4fe:	6863      	ldr	r3, [r4, #4]
 800b500:	4299      	cmp	r1, r3
 800b502:	dd41      	ble.n	800b588 <_printf_float+0x1ac>
 800b504:	f1aa 0a02 	sub.w	sl, sl, #2
 800b508:	fa5f fa8a 	uxtb.w	sl, sl
 800b50c:	3901      	subs	r1, #1
 800b50e:	4652      	mov	r2, sl
 800b510:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b514:	9109      	str	r1, [sp, #36]	@ 0x24
 800b516:	f7ff ff26 	bl	800b366 <__exponent>
 800b51a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b51c:	1813      	adds	r3, r2, r0
 800b51e:	2a01      	cmp	r2, #1
 800b520:	4681      	mov	r9, r0
 800b522:	6123      	str	r3, [r4, #16]
 800b524:	dc02      	bgt.n	800b52c <_printf_float+0x150>
 800b526:	6822      	ldr	r2, [r4, #0]
 800b528:	07d2      	lsls	r2, r2, #31
 800b52a:	d501      	bpl.n	800b530 <_printf_float+0x154>
 800b52c:	3301      	adds	r3, #1
 800b52e:	6123      	str	r3, [r4, #16]
 800b530:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b534:	2b00      	cmp	r3, #0
 800b536:	d0a2      	beq.n	800b47e <_printf_float+0xa2>
 800b538:	232d      	movs	r3, #45	@ 0x2d
 800b53a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b53e:	e79e      	b.n	800b47e <_printf_float+0xa2>
 800b540:	9a06      	ldr	r2, [sp, #24]
 800b542:	2a47      	cmp	r2, #71	@ 0x47
 800b544:	d1c2      	bne.n	800b4cc <_printf_float+0xf0>
 800b546:	2b00      	cmp	r3, #0
 800b548:	d1c0      	bne.n	800b4cc <_printf_float+0xf0>
 800b54a:	2301      	movs	r3, #1
 800b54c:	e7bd      	b.n	800b4ca <_printf_float+0xee>
 800b54e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b552:	d9db      	bls.n	800b50c <_printf_float+0x130>
 800b554:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b558:	d118      	bne.n	800b58c <_printf_float+0x1b0>
 800b55a:	2900      	cmp	r1, #0
 800b55c:	6863      	ldr	r3, [r4, #4]
 800b55e:	dd0b      	ble.n	800b578 <_printf_float+0x19c>
 800b560:	6121      	str	r1, [r4, #16]
 800b562:	b913      	cbnz	r3, 800b56a <_printf_float+0x18e>
 800b564:	6822      	ldr	r2, [r4, #0]
 800b566:	07d0      	lsls	r0, r2, #31
 800b568:	d502      	bpl.n	800b570 <_printf_float+0x194>
 800b56a:	3301      	adds	r3, #1
 800b56c:	440b      	add	r3, r1
 800b56e:	6123      	str	r3, [r4, #16]
 800b570:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b572:	f04f 0900 	mov.w	r9, #0
 800b576:	e7db      	b.n	800b530 <_printf_float+0x154>
 800b578:	b913      	cbnz	r3, 800b580 <_printf_float+0x1a4>
 800b57a:	6822      	ldr	r2, [r4, #0]
 800b57c:	07d2      	lsls	r2, r2, #31
 800b57e:	d501      	bpl.n	800b584 <_printf_float+0x1a8>
 800b580:	3302      	adds	r3, #2
 800b582:	e7f4      	b.n	800b56e <_printf_float+0x192>
 800b584:	2301      	movs	r3, #1
 800b586:	e7f2      	b.n	800b56e <_printf_float+0x192>
 800b588:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b58c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b58e:	4299      	cmp	r1, r3
 800b590:	db05      	blt.n	800b59e <_printf_float+0x1c2>
 800b592:	6823      	ldr	r3, [r4, #0]
 800b594:	6121      	str	r1, [r4, #16]
 800b596:	07d8      	lsls	r0, r3, #31
 800b598:	d5ea      	bpl.n	800b570 <_printf_float+0x194>
 800b59a:	1c4b      	adds	r3, r1, #1
 800b59c:	e7e7      	b.n	800b56e <_printf_float+0x192>
 800b59e:	2900      	cmp	r1, #0
 800b5a0:	bfd4      	ite	le
 800b5a2:	f1c1 0202 	rsble	r2, r1, #2
 800b5a6:	2201      	movgt	r2, #1
 800b5a8:	4413      	add	r3, r2
 800b5aa:	e7e0      	b.n	800b56e <_printf_float+0x192>
 800b5ac:	6823      	ldr	r3, [r4, #0]
 800b5ae:	055a      	lsls	r2, r3, #21
 800b5b0:	d407      	bmi.n	800b5c2 <_printf_float+0x1e6>
 800b5b2:	6923      	ldr	r3, [r4, #16]
 800b5b4:	4642      	mov	r2, r8
 800b5b6:	4631      	mov	r1, r6
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	47b8      	blx	r7
 800b5bc:	3001      	adds	r0, #1
 800b5be:	d12b      	bne.n	800b618 <_printf_float+0x23c>
 800b5c0:	e767      	b.n	800b492 <_printf_float+0xb6>
 800b5c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b5c6:	f240 80dd 	bls.w	800b784 <_printf_float+0x3a8>
 800b5ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	f7f5 fa81 	bl	8000ad8 <__aeabi_dcmpeq>
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d033      	beq.n	800b642 <_printf_float+0x266>
 800b5da:	4a37      	ldr	r2, [pc, #220]	@ (800b6b8 <_printf_float+0x2dc>)
 800b5dc:	2301      	movs	r3, #1
 800b5de:	4631      	mov	r1, r6
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	47b8      	blx	r7
 800b5e4:	3001      	adds	r0, #1
 800b5e6:	f43f af54 	beq.w	800b492 <_printf_float+0xb6>
 800b5ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b5ee:	4543      	cmp	r3, r8
 800b5f0:	db02      	blt.n	800b5f8 <_printf_float+0x21c>
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	07d8      	lsls	r0, r3, #31
 800b5f6:	d50f      	bpl.n	800b618 <_printf_float+0x23c>
 800b5f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5fc:	4631      	mov	r1, r6
 800b5fe:	4628      	mov	r0, r5
 800b600:	47b8      	blx	r7
 800b602:	3001      	adds	r0, #1
 800b604:	f43f af45 	beq.w	800b492 <_printf_float+0xb6>
 800b608:	f04f 0900 	mov.w	r9, #0
 800b60c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b610:	f104 0a1a 	add.w	sl, r4, #26
 800b614:	45c8      	cmp	r8, r9
 800b616:	dc09      	bgt.n	800b62c <_printf_float+0x250>
 800b618:	6823      	ldr	r3, [r4, #0]
 800b61a:	079b      	lsls	r3, r3, #30
 800b61c:	f100 8103 	bmi.w	800b826 <_printf_float+0x44a>
 800b620:	68e0      	ldr	r0, [r4, #12]
 800b622:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b624:	4298      	cmp	r0, r3
 800b626:	bfb8      	it	lt
 800b628:	4618      	movlt	r0, r3
 800b62a:	e734      	b.n	800b496 <_printf_float+0xba>
 800b62c:	2301      	movs	r3, #1
 800b62e:	4652      	mov	r2, sl
 800b630:	4631      	mov	r1, r6
 800b632:	4628      	mov	r0, r5
 800b634:	47b8      	blx	r7
 800b636:	3001      	adds	r0, #1
 800b638:	f43f af2b 	beq.w	800b492 <_printf_float+0xb6>
 800b63c:	f109 0901 	add.w	r9, r9, #1
 800b640:	e7e8      	b.n	800b614 <_printf_float+0x238>
 800b642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b644:	2b00      	cmp	r3, #0
 800b646:	dc39      	bgt.n	800b6bc <_printf_float+0x2e0>
 800b648:	4a1b      	ldr	r2, [pc, #108]	@ (800b6b8 <_printf_float+0x2dc>)
 800b64a:	2301      	movs	r3, #1
 800b64c:	4631      	mov	r1, r6
 800b64e:	4628      	mov	r0, r5
 800b650:	47b8      	blx	r7
 800b652:	3001      	adds	r0, #1
 800b654:	f43f af1d 	beq.w	800b492 <_printf_float+0xb6>
 800b658:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b65c:	ea59 0303 	orrs.w	r3, r9, r3
 800b660:	d102      	bne.n	800b668 <_printf_float+0x28c>
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	07d9      	lsls	r1, r3, #31
 800b666:	d5d7      	bpl.n	800b618 <_printf_float+0x23c>
 800b668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b66c:	4631      	mov	r1, r6
 800b66e:	4628      	mov	r0, r5
 800b670:	47b8      	blx	r7
 800b672:	3001      	adds	r0, #1
 800b674:	f43f af0d 	beq.w	800b492 <_printf_float+0xb6>
 800b678:	f04f 0a00 	mov.w	sl, #0
 800b67c:	f104 0b1a 	add.w	fp, r4, #26
 800b680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b682:	425b      	negs	r3, r3
 800b684:	4553      	cmp	r3, sl
 800b686:	dc01      	bgt.n	800b68c <_printf_float+0x2b0>
 800b688:	464b      	mov	r3, r9
 800b68a:	e793      	b.n	800b5b4 <_printf_float+0x1d8>
 800b68c:	2301      	movs	r3, #1
 800b68e:	465a      	mov	r2, fp
 800b690:	4631      	mov	r1, r6
 800b692:	4628      	mov	r0, r5
 800b694:	47b8      	blx	r7
 800b696:	3001      	adds	r0, #1
 800b698:	f43f aefb 	beq.w	800b492 <_printf_float+0xb6>
 800b69c:	f10a 0a01 	add.w	sl, sl, #1
 800b6a0:	e7ee      	b.n	800b680 <_printf_float+0x2a4>
 800b6a2:	bf00      	nop
 800b6a4:	7fefffff 	.word	0x7fefffff
 800b6a8:	0800e4e4 	.word	0x0800e4e4
 800b6ac:	0800e4e8 	.word	0x0800e4e8
 800b6b0:	0800e4ec 	.word	0x0800e4ec
 800b6b4:	0800e4f0 	.word	0x0800e4f0
 800b6b8:	0800e4f4 	.word	0x0800e4f4
 800b6bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b6be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b6c2:	4553      	cmp	r3, sl
 800b6c4:	bfa8      	it	ge
 800b6c6:	4653      	movge	r3, sl
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	4699      	mov	r9, r3
 800b6cc:	dc36      	bgt.n	800b73c <_printf_float+0x360>
 800b6ce:	f04f 0b00 	mov.w	fp, #0
 800b6d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6d6:	f104 021a 	add.w	r2, r4, #26
 800b6da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b6dc:	9306      	str	r3, [sp, #24]
 800b6de:	eba3 0309 	sub.w	r3, r3, r9
 800b6e2:	455b      	cmp	r3, fp
 800b6e4:	dc31      	bgt.n	800b74a <_printf_float+0x36e>
 800b6e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6e8:	459a      	cmp	sl, r3
 800b6ea:	dc3a      	bgt.n	800b762 <_printf_float+0x386>
 800b6ec:	6823      	ldr	r3, [r4, #0]
 800b6ee:	07da      	lsls	r2, r3, #31
 800b6f0:	d437      	bmi.n	800b762 <_printf_float+0x386>
 800b6f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6f4:	ebaa 0903 	sub.w	r9, sl, r3
 800b6f8:	9b06      	ldr	r3, [sp, #24]
 800b6fa:	ebaa 0303 	sub.w	r3, sl, r3
 800b6fe:	4599      	cmp	r9, r3
 800b700:	bfa8      	it	ge
 800b702:	4699      	movge	r9, r3
 800b704:	f1b9 0f00 	cmp.w	r9, #0
 800b708:	dc33      	bgt.n	800b772 <_printf_float+0x396>
 800b70a:	f04f 0800 	mov.w	r8, #0
 800b70e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b712:	f104 0b1a 	add.w	fp, r4, #26
 800b716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b718:	ebaa 0303 	sub.w	r3, sl, r3
 800b71c:	eba3 0309 	sub.w	r3, r3, r9
 800b720:	4543      	cmp	r3, r8
 800b722:	f77f af79 	ble.w	800b618 <_printf_float+0x23c>
 800b726:	2301      	movs	r3, #1
 800b728:	465a      	mov	r2, fp
 800b72a:	4631      	mov	r1, r6
 800b72c:	4628      	mov	r0, r5
 800b72e:	47b8      	blx	r7
 800b730:	3001      	adds	r0, #1
 800b732:	f43f aeae 	beq.w	800b492 <_printf_float+0xb6>
 800b736:	f108 0801 	add.w	r8, r8, #1
 800b73a:	e7ec      	b.n	800b716 <_printf_float+0x33a>
 800b73c:	4642      	mov	r2, r8
 800b73e:	4631      	mov	r1, r6
 800b740:	4628      	mov	r0, r5
 800b742:	47b8      	blx	r7
 800b744:	3001      	adds	r0, #1
 800b746:	d1c2      	bne.n	800b6ce <_printf_float+0x2f2>
 800b748:	e6a3      	b.n	800b492 <_printf_float+0xb6>
 800b74a:	2301      	movs	r3, #1
 800b74c:	4631      	mov	r1, r6
 800b74e:	4628      	mov	r0, r5
 800b750:	9206      	str	r2, [sp, #24]
 800b752:	47b8      	blx	r7
 800b754:	3001      	adds	r0, #1
 800b756:	f43f ae9c 	beq.w	800b492 <_printf_float+0xb6>
 800b75a:	9a06      	ldr	r2, [sp, #24]
 800b75c:	f10b 0b01 	add.w	fp, fp, #1
 800b760:	e7bb      	b.n	800b6da <_printf_float+0x2fe>
 800b762:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b766:	4631      	mov	r1, r6
 800b768:	4628      	mov	r0, r5
 800b76a:	47b8      	blx	r7
 800b76c:	3001      	adds	r0, #1
 800b76e:	d1c0      	bne.n	800b6f2 <_printf_float+0x316>
 800b770:	e68f      	b.n	800b492 <_printf_float+0xb6>
 800b772:	9a06      	ldr	r2, [sp, #24]
 800b774:	464b      	mov	r3, r9
 800b776:	4442      	add	r2, r8
 800b778:	4631      	mov	r1, r6
 800b77a:	4628      	mov	r0, r5
 800b77c:	47b8      	blx	r7
 800b77e:	3001      	adds	r0, #1
 800b780:	d1c3      	bne.n	800b70a <_printf_float+0x32e>
 800b782:	e686      	b.n	800b492 <_printf_float+0xb6>
 800b784:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b788:	f1ba 0f01 	cmp.w	sl, #1
 800b78c:	dc01      	bgt.n	800b792 <_printf_float+0x3b6>
 800b78e:	07db      	lsls	r3, r3, #31
 800b790:	d536      	bpl.n	800b800 <_printf_float+0x424>
 800b792:	2301      	movs	r3, #1
 800b794:	4642      	mov	r2, r8
 800b796:	4631      	mov	r1, r6
 800b798:	4628      	mov	r0, r5
 800b79a:	47b8      	blx	r7
 800b79c:	3001      	adds	r0, #1
 800b79e:	f43f ae78 	beq.w	800b492 <_printf_float+0xb6>
 800b7a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7a6:	4631      	mov	r1, r6
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	47b8      	blx	r7
 800b7ac:	3001      	adds	r0, #1
 800b7ae:	f43f ae70 	beq.w	800b492 <_printf_float+0xb6>
 800b7b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7be:	f7f5 f98b 	bl	8000ad8 <__aeabi_dcmpeq>
 800b7c2:	b9c0      	cbnz	r0, 800b7f6 <_printf_float+0x41a>
 800b7c4:	4653      	mov	r3, sl
 800b7c6:	f108 0201 	add.w	r2, r8, #1
 800b7ca:	4631      	mov	r1, r6
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	47b8      	blx	r7
 800b7d0:	3001      	adds	r0, #1
 800b7d2:	d10c      	bne.n	800b7ee <_printf_float+0x412>
 800b7d4:	e65d      	b.n	800b492 <_printf_float+0xb6>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	465a      	mov	r2, fp
 800b7da:	4631      	mov	r1, r6
 800b7dc:	4628      	mov	r0, r5
 800b7de:	47b8      	blx	r7
 800b7e0:	3001      	adds	r0, #1
 800b7e2:	f43f ae56 	beq.w	800b492 <_printf_float+0xb6>
 800b7e6:	f108 0801 	add.w	r8, r8, #1
 800b7ea:	45d0      	cmp	r8, sl
 800b7ec:	dbf3      	blt.n	800b7d6 <_printf_float+0x3fa>
 800b7ee:	464b      	mov	r3, r9
 800b7f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b7f4:	e6df      	b.n	800b5b6 <_printf_float+0x1da>
 800b7f6:	f04f 0800 	mov.w	r8, #0
 800b7fa:	f104 0b1a 	add.w	fp, r4, #26
 800b7fe:	e7f4      	b.n	800b7ea <_printf_float+0x40e>
 800b800:	2301      	movs	r3, #1
 800b802:	4642      	mov	r2, r8
 800b804:	e7e1      	b.n	800b7ca <_printf_float+0x3ee>
 800b806:	2301      	movs	r3, #1
 800b808:	464a      	mov	r2, r9
 800b80a:	4631      	mov	r1, r6
 800b80c:	4628      	mov	r0, r5
 800b80e:	47b8      	blx	r7
 800b810:	3001      	adds	r0, #1
 800b812:	f43f ae3e 	beq.w	800b492 <_printf_float+0xb6>
 800b816:	f108 0801 	add.w	r8, r8, #1
 800b81a:	68e3      	ldr	r3, [r4, #12]
 800b81c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b81e:	1a5b      	subs	r3, r3, r1
 800b820:	4543      	cmp	r3, r8
 800b822:	dcf0      	bgt.n	800b806 <_printf_float+0x42a>
 800b824:	e6fc      	b.n	800b620 <_printf_float+0x244>
 800b826:	f04f 0800 	mov.w	r8, #0
 800b82a:	f104 0919 	add.w	r9, r4, #25
 800b82e:	e7f4      	b.n	800b81a <_printf_float+0x43e>

0800b830 <_printf_common>:
 800b830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b834:	4616      	mov	r6, r2
 800b836:	4698      	mov	r8, r3
 800b838:	688a      	ldr	r2, [r1, #8]
 800b83a:	690b      	ldr	r3, [r1, #16]
 800b83c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b840:	4293      	cmp	r3, r2
 800b842:	bfb8      	it	lt
 800b844:	4613      	movlt	r3, r2
 800b846:	6033      	str	r3, [r6, #0]
 800b848:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b84c:	4607      	mov	r7, r0
 800b84e:	460c      	mov	r4, r1
 800b850:	b10a      	cbz	r2, 800b856 <_printf_common+0x26>
 800b852:	3301      	adds	r3, #1
 800b854:	6033      	str	r3, [r6, #0]
 800b856:	6823      	ldr	r3, [r4, #0]
 800b858:	0699      	lsls	r1, r3, #26
 800b85a:	bf42      	ittt	mi
 800b85c:	6833      	ldrmi	r3, [r6, #0]
 800b85e:	3302      	addmi	r3, #2
 800b860:	6033      	strmi	r3, [r6, #0]
 800b862:	6825      	ldr	r5, [r4, #0]
 800b864:	f015 0506 	ands.w	r5, r5, #6
 800b868:	d106      	bne.n	800b878 <_printf_common+0x48>
 800b86a:	f104 0a19 	add.w	sl, r4, #25
 800b86e:	68e3      	ldr	r3, [r4, #12]
 800b870:	6832      	ldr	r2, [r6, #0]
 800b872:	1a9b      	subs	r3, r3, r2
 800b874:	42ab      	cmp	r3, r5
 800b876:	dc26      	bgt.n	800b8c6 <_printf_common+0x96>
 800b878:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b87c:	6822      	ldr	r2, [r4, #0]
 800b87e:	3b00      	subs	r3, #0
 800b880:	bf18      	it	ne
 800b882:	2301      	movne	r3, #1
 800b884:	0692      	lsls	r2, r2, #26
 800b886:	d42b      	bmi.n	800b8e0 <_printf_common+0xb0>
 800b888:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b88c:	4641      	mov	r1, r8
 800b88e:	4638      	mov	r0, r7
 800b890:	47c8      	blx	r9
 800b892:	3001      	adds	r0, #1
 800b894:	d01e      	beq.n	800b8d4 <_printf_common+0xa4>
 800b896:	6823      	ldr	r3, [r4, #0]
 800b898:	6922      	ldr	r2, [r4, #16]
 800b89a:	f003 0306 	and.w	r3, r3, #6
 800b89e:	2b04      	cmp	r3, #4
 800b8a0:	bf02      	ittt	eq
 800b8a2:	68e5      	ldreq	r5, [r4, #12]
 800b8a4:	6833      	ldreq	r3, [r6, #0]
 800b8a6:	1aed      	subeq	r5, r5, r3
 800b8a8:	68a3      	ldr	r3, [r4, #8]
 800b8aa:	bf0c      	ite	eq
 800b8ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8b0:	2500      	movne	r5, #0
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	bfc4      	itt	gt
 800b8b6:	1a9b      	subgt	r3, r3, r2
 800b8b8:	18ed      	addgt	r5, r5, r3
 800b8ba:	2600      	movs	r6, #0
 800b8bc:	341a      	adds	r4, #26
 800b8be:	42b5      	cmp	r5, r6
 800b8c0:	d11a      	bne.n	800b8f8 <_printf_common+0xc8>
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	e008      	b.n	800b8d8 <_printf_common+0xa8>
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	4652      	mov	r2, sl
 800b8ca:	4641      	mov	r1, r8
 800b8cc:	4638      	mov	r0, r7
 800b8ce:	47c8      	blx	r9
 800b8d0:	3001      	adds	r0, #1
 800b8d2:	d103      	bne.n	800b8dc <_printf_common+0xac>
 800b8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8dc:	3501      	adds	r5, #1
 800b8de:	e7c6      	b.n	800b86e <_printf_common+0x3e>
 800b8e0:	18e1      	adds	r1, r4, r3
 800b8e2:	1c5a      	adds	r2, r3, #1
 800b8e4:	2030      	movs	r0, #48	@ 0x30
 800b8e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b8ea:	4422      	add	r2, r4
 800b8ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b8f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b8f4:	3302      	adds	r3, #2
 800b8f6:	e7c7      	b.n	800b888 <_printf_common+0x58>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	4622      	mov	r2, r4
 800b8fc:	4641      	mov	r1, r8
 800b8fe:	4638      	mov	r0, r7
 800b900:	47c8      	blx	r9
 800b902:	3001      	adds	r0, #1
 800b904:	d0e6      	beq.n	800b8d4 <_printf_common+0xa4>
 800b906:	3601      	adds	r6, #1
 800b908:	e7d9      	b.n	800b8be <_printf_common+0x8e>
	...

0800b90c <_printf_i>:
 800b90c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b910:	7e0f      	ldrb	r7, [r1, #24]
 800b912:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b914:	2f78      	cmp	r7, #120	@ 0x78
 800b916:	4691      	mov	r9, r2
 800b918:	4680      	mov	r8, r0
 800b91a:	460c      	mov	r4, r1
 800b91c:	469a      	mov	sl, r3
 800b91e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b922:	d807      	bhi.n	800b934 <_printf_i+0x28>
 800b924:	2f62      	cmp	r7, #98	@ 0x62
 800b926:	d80a      	bhi.n	800b93e <_printf_i+0x32>
 800b928:	2f00      	cmp	r7, #0
 800b92a:	f000 80d2 	beq.w	800bad2 <_printf_i+0x1c6>
 800b92e:	2f58      	cmp	r7, #88	@ 0x58
 800b930:	f000 80b9 	beq.w	800baa6 <_printf_i+0x19a>
 800b934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b938:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b93c:	e03a      	b.n	800b9b4 <_printf_i+0xa8>
 800b93e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b942:	2b15      	cmp	r3, #21
 800b944:	d8f6      	bhi.n	800b934 <_printf_i+0x28>
 800b946:	a101      	add	r1, pc, #4	@ (adr r1, 800b94c <_printf_i+0x40>)
 800b948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b94c:	0800b9a5 	.word	0x0800b9a5
 800b950:	0800b9b9 	.word	0x0800b9b9
 800b954:	0800b935 	.word	0x0800b935
 800b958:	0800b935 	.word	0x0800b935
 800b95c:	0800b935 	.word	0x0800b935
 800b960:	0800b935 	.word	0x0800b935
 800b964:	0800b9b9 	.word	0x0800b9b9
 800b968:	0800b935 	.word	0x0800b935
 800b96c:	0800b935 	.word	0x0800b935
 800b970:	0800b935 	.word	0x0800b935
 800b974:	0800b935 	.word	0x0800b935
 800b978:	0800bab9 	.word	0x0800bab9
 800b97c:	0800b9e3 	.word	0x0800b9e3
 800b980:	0800ba73 	.word	0x0800ba73
 800b984:	0800b935 	.word	0x0800b935
 800b988:	0800b935 	.word	0x0800b935
 800b98c:	0800badb 	.word	0x0800badb
 800b990:	0800b935 	.word	0x0800b935
 800b994:	0800b9e3 	.word	0x0800b9e3
 800b998:	0800b935 	.word	0x0800b935
 800b99c:	0800b935 	.word	0x0800b935
 800b9a0:	0800ba7b 	.word	0x0800ba7b
 800b9a4:	6833      	ldr	r3, [r6, #0]
 800b9a6:	1d1a      	adds	r2, r3, #4
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	6032      	str	r2, [r6, #0]
 800b9ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b9b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e09d      	b.n	800baf4 <_printf_i+0x1e8>
 800b9b8:	6833      	ldr	r3, [r6, #0]
 800b9ba:	6820      	ldr	r0, [r4, #0]
 800b9bc:	1d19      	adds	r1, r3, #4
 800b9be:	6031      	str	r1, [r6, #0]
 800b9c0:	0606      	lsls	r6, r0, #24
 800b9c2:	d501      	bpl.n	800b9c8 <_printf_i+0xbc>
 800b9c4:	681d      	ldr	r5, [r3, #0]
 800b9c6:	e003      	b.n	800b9d0 <_printf_i+0xc4>
 800b9c8:	0645      	lsls	r5, r0, #25
 800b9ca:	d5fb      	bpl.n	800b9c4 <_printf_i+0xb8>
 800b9cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b9d0:	2d00      	cmp	r5, #0
 800b9d2:	da03      	bge.n	800b9dc <_printf_i+0xd0>
 800b9d4:	232d      	movs	r3, #45	@ 0x2d
 800b9d6:	426d      	negs	r5, r5
 800b9d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9dc:	4859      	ldr	r0, [pc, #356]	@ (800bb44 <_printf_i+0x238>)
 800b9de:	230a      	movs	r3, #10
 800b9e0:	e011      	b.n	800ba06 <_printf_i+0xfa>
 800b9e2:	6821      	ldr	r1, [r4, #0]
 800b9e4:	6833      	ldr	r3, [r6, #0]
 800b9e6:	0608      	lsls	r0, r1, #24
 800b9e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b9ec:	d402      	bmi.n	800b9f4 <_printf_i+0xe8>
 800b9ee:	0649      	lsls	r1, r1, #25
 800b9f0:	bf48      	it	mi
 800b9f2:	b2ad      	uxthmi	r5, r5
 800b9f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b9f6:	4853      	ldr	r0, [pc, #332]	@ (800bb44 <_printf_i+0x238>)
 800b9f8:	6033      	str	r3, [r6, #0]
 800b9fa:	bf14      	ite	ne
 800b9fc:	230a      	movne	r3, #10
 800b9fe:	2308      	moveq	r3, #8
 800ba00:	2100      	movs	r1, #0
 800ba02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ba06:	6866      	ldr	r6, [r4, #4]
 800ba08:	60a6      	str	r6, [r4, #8]
 800ba0a:	2e00      	cmp	r6, #0
 800ba0c:	bfa2      	ittt	ge
 800ba0e:	6821      	ldrge	r1, [r4, #0]
 800ba10:	f021 0104 	bicge.w	r1, r1, #4
 800ba14:	6021      	strge	r1, [r4, #0]
 800ba16:	b90d      	cbnz	r5, 800ba1c <_printf_i+0x110>
 800ba18:	2e00      	cmp	r6, #0
 800ba1a:	d04b      	beq.n	800bab4 <_printf_i+0x1a8>
 800ba1c:	4616      	mov	r6, r2
 800ba1e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba22:	fb03 5711 	mls	r7, r3, r1, r5
 800ba26:	5dc7      	ldrb	r7, [r0, r7]
 800ba28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba2c:	462f      	mov	r7, r5
 800ba2e:	42bb      	cmp	r3, r7
 800ba30:	460d      	mov	r5, r1
 800ba32:	d9f4      	bls.n	800ba1e <_printf_i+0x112>
 800ba34:	2b08      	cmp	r3, #8
 800ba36:	d10b      	bne.n	800ba50 <_printf_i+0x144>
 800ba38:	6823      	ldr	r3, [r4, #0]
 800ba3a:	07df      	lsls	r7, r3, #31
 800ba3c:	d508      	bpl.n	800ba50 <_printf_i+0x144>
 800ba3e:	6923      	ldr	r3, [r4, #16]
 800ba40:	6861      	ldr	r1, [r4, #4]
 800ba42:	4299      	cmp	r1, r3
 800ba44:	bfde      	ittt	le
 800ba46:	2330      	movle	r3, #48	@ 0x30
 800ba48:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba50:	1b92      	subs	r2, r2, r6
 800ba52:	6122      	str	r2, [r4, #16]
 800ba54:	f8cd a000 	str.w	sl, [sp]
 800ba58:	464b      	mov	r3, r9
 800ba5a:	aa03      	add	r2, sp, #12
 800ba5c:	4621      	mov	r1, r4
 800ba5e:	4640      	mov	r0, r8
 800ba60:	f7ff fee6 	bl	800b830 <_printf_common>
 800ba64:	3001      	adds	r0, #1
 800ba66:	d14a      	bne.n	800bafe <_printf_i+0x1f2>
 800ba68:	f04f 30ff 	mov.w	r0, #4294967295
 800ba6c:	b004      	add	sp, #16
 800ba6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba72:	6823      	ldr	r3, [r4, #0]
 800ba74:	f043 0320 	orr.w	r3, r3, #32
 800ba78:	6023      	str	r3, [r4, #0]
 800ba7a:	4833      	ldr	r0, [pc, #204]	@ (800bb48 <_printf_i+0x23c>)
 800ba7c:	2778      	movs	r7, #120	@ 0x78
 800ba7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba82:	6823      	ldr	r3, [r4, #0]
 800ba84:	6831      	ldr	r1, [r6, #0]
 800ba86:	061f      	lsls	r7, r3, #24
 800ba88:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba8c:	d402      	bmi.n	800ba94 <_printf_i+0x188>
 800ba8e:	065f      	lsls	r7, r3, #25
 800ba90:	bf48      	it	mi
 800ba92:	b2ad      	uxthmi	r5, r5
 800ba94:	6031      	str	r1, [r6, #0]
 800ba96:	07d9      	lsls	r1, r3, #31
 800ba98:	bf44      	itt	mi
 800ba9a:	f043 0320 	orrmi.w	r3, r3, #32
 800ba9e:	6023      	strmi	r3, [r4, #0]
 800baa0:	b11d      	cbz	r5, 800baaa <_printf_i+0x19e>
 800baa2:	2310      	movs	r3, #16
 800baa4:	e7ac      	b.n	800ba00 <_printf_i+0xf4>
 800baa6:	4827      	ldr	r0, [pc, #156]	@ (800bb44 <_printf_i+0x238>)
 800baa8:	e7e9      	b.n	800ba7e <_printf_i+0x172>
 800baaa:	6823      	ldr	r3, [r4, #0]
 800baac:	f023 0320 	bic.w	r3, r3, #32
 800bab0:	6023      	str	r3, [r4, #0]
 800bab2:	e7f6      	b.n	800baa2 <_printf_i+0x196>
 800bab4:	4616      	mov	r6, r2
 800bab6:	e7bd      	b.n	800ba34 <_printf_i+0x128>
 800bab8:	6833      	ldr	r3, [r6, #0]
 800baba:	6825      	ldr	r5, [r4, #0]
 800babc:	6961      	ldr	r1, [r4, #20]
 800babe:	1d18      	adds	r0, r3, #4
 800bac0:	6030      	str	r0, [r6, #0]
 800bac2:	062e      	lsls	r6, r5, #24
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	d501      	bpl.n	800bacc <_printf_i+0x1c0>
 800bac8:	6019      	str	r1, [r3, #0]
 800baca:	e002      	b.n	800bad2 <_printf_i+0x1c6>
 800bacc:	0668      	lsls	r0, r5, #25
 800bace:	d5fb      	bpl.n	800bac8 <_printf_i+0x1bc>
 800bad0:	8019      	strh	r1, [r3, #0]
 800bad2:	2300      	movs	r3, #0
 800bad4:	6123      	str	r3, [r4, #16]
 800bad6:	4616      	mov	r6, r2
 800bad8:	e7bc      	b.n	800ba54 <_printf_i+0x148>
 800bada:	6833      	ldr	r3, [r6, #0]
 800badc:	1d1a      	adds	r2, r3, #4
 800bade:	6032      	str	r2, [r6, #0]
 800bae0:	681e      	ldr	r6, [r3, #0]
 800bae2:	6862      	ldr	r2, [r4, #4]
 800bae4:	2100      	movs	r1, #0
 800bae6:	4630      	mov	r0, r6
 800bae8:	f7f4 fb7a 	bl	80001e0 <memchr>
 800baec:	b108      	cbz	r0, 800baf2 <_printf_i+0x1e6>
 800baee:	1b80      	subs	r0, r0, r6
 800baf0:	6060      	str	r0, [r4, #4]
 800baf2:	6863      	ldr	r3, [r4, #4]
 800baf4:	6123      	str	r3, [r4, #16]
 800baf6:	2300      	movs	r3, #0
 800baf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bafc:	e7aa      	b.n	800ba54 <_printf_i+0x148>
 800bafe:	6923      	ldr	r3, [r4, #16]
 800bb00:	4632      	mov	r2, r6
 800bb02:	4649      	mov	r1, r9
 800bb04:	4640      	mov	r0, r8
 800bb06:	47d0      	blx	sl
 800bb08:	3001      	adds	r0, #1
 800bb0a:	d0ad      	beq.n	800ba68 <_printf_i+0x15c>
 800bb0c:	6823      	ldr	r3, [r4, #0]
 800bb0e:	079b      	lsls	r3, r3, #30
 800bb10:	d413      	bmi.n	800bb3a <_printf_i+0x22e>
 800bb12:	68e0      	ldr	r0, [r4, #12]
 800bb14:	9b03      	ldr	r3, [sp, #12]
 800bb16:	4298      	cmp	r0, r3
 800bb18:	bfb8      	it	lt
 800bb1a:	4618      	movlt	r0, r3
 800bb1c:	e7a6      	b.n	800ba6c <_printf_i+0x160>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	4632      	mov	r2, r6
 800bb22:	4649      	mov	r1, r9
 800bb24:	4640      	mov	r0, r8
 800bb26:	47d0      	blx	sl
 800bb28:	3001      	adds	r0, #1
 800bb2a:	d09d      	beq.n	800ba68 <_printf_i+0x15c>
 800bb2c:	3501      	adds	r5, #1
 800bb2e:	68e3      	ldr	r3, [r4, #12]
 800bb30:	9903      	ldr	r1, [sp, #12]
 800bb32:	1a5b      	subs	r3, r3, r1
 800bb34:	42ab      	cmp	r3, r5
 800bb36:	dcf2      	bgt.n	800bb1e <_printf_i+0x212>
 800bb38:	e7eb      	b.n	800bb12 <_printf_i+0x206>
 800bb3a:	2500      	movs	r5, #0
 800bb3c:	f104 0619 	add.w	r6, r4, #25
 800bb40:	e7f5      	b.n	800bb2e <_printf_i+0x222>
 800bb42:	bf00      	nop
 800bb44:	0800e4f6 	.word	0x0800e4f6
 800bb48:	0800e507 	.word	0x0800e507

0800bb4c <std>:
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	b510      	push	{r4, lr}
 800bb50:	4604      	mov	r4, r0
 800bb52:	e9c0 3300 	strd	r3, r3, [r0]
 800bb56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb5a:	6083      	str	r3, [r0, #8]
 800bb5c:	8181      	strh	r1, [r0, #12]
 800bb5e:	6643      	str	r3, [r0, #100]	@ 0x64
 800bb60:	81c2      	strh	r2, [r0, #14]
 800bb62:	6183      	str	r3, [r0, #24]
 800bb64:	4619      	mov	r1, r3
 800bb66:	2208      	movs	r2, #8
 800bb68:	305c      	adds	r0, #92	@ 0x5c
 800bb6a:	f000 f928 	bl	800bdbe <memset>
 800bb6e:	4b0d      	ldr	r3, [pc, #52]	@ (800bba4 <std+0x58>)
 800bb70:	6263      	str	r3, [r4, #36]	@ 0x24
 800bb72:	4b0d      	ldr	r3, [pc, #52]	@ (800bba8 <std+0x5c>)
 800bb74:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bb76:	4b0d      	ldr	r3, [pc, #52]	@ (800bbac <std+0x60>)
 800bb78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bb7a:	4b0d      	ldr	r3, [pc, #52]	@ (800bbb0 <std+0x64>)
 800bb7c:	6323      	str	r3, [r4, #48]	@ 0x30
 800bb7e:	4b0d      	ldr	r3, [pc, #52]	@ (800bbb4 <std+0x68>)
 800bb80:	6224      	str	r4, [r4, #32]
 800bb82:	429c      	cmp	r4, r3
 800bb84:	d006      	beq.n	800bb94 <std+0x48>
 800bb86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bb8a:	4294      	cmp	r4, r2
 800bb8c:	d002      	beq.n	800bb94 <std+0x48>
 800bb8e:	33d0      	adds	r3, #208	@ 0xd0
 800bb90:	429c      	cmp	r4, r3
 800bb92:	d105      	bne.n	800bba0 <std+0x54>
 800bb94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bb98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb9c:	f000 b98c 	b.w	800beb8 <__retarget_lock_init_recursive>
 800bba0:	bd10      	pop	{r4, pc}
 800bba2:	bf00      	nop
 800bba4:	0800bd39 	.word	0x0800bd39
 800bba8:	0800bd5b 	.word	0x0800bd5b
 800bbac:	0800bd93 	.word	0x0800bd93
 800bbb0:	0800bdb7 	.word	0x0800bdb7
 800bbb4:	2000200c 	.word	0x2000200c

0800bbb8 <stdio_exit_handler>:
 800bbb8:	4a02      	ldr	r2, [pc, #8]	@ (800bbc4 <stdio_exit_handler+0xc>)
 800bbba:	4903      	ldr	r1, [pc, #12]	@ (800bbc8 <stdio_exit_handler+0x10>)
 800bbbc:	4803      	ldr	r0, [pc, #12]	@ (800bbcc <stdio_exit_handler+0x14>)
 800bbbe:	f000 b869 	b.w	800bc94 <_fwalk_sglue>
 800bbc2:	bf00      	nop
 800bbc4:	200000fc 	.word	0x200000fc
 800bbc8:	0800d815 	.word	0x0800d815
 800bbcc:	2000010c 	.word	0x2000010c

0800bbd0 <cleanup_stdio>:
 800bbd0:	6841      	ldr	r1, [r0, #4]
 800bbd2:	4b0c      	ldr	r3, [pc, #48]	@ (800bc04 <cleanup_stdio+0x34>)
 800bbd4:	4299      	cmp	r1, r3
 800bbd6:	b510      	push	{r4, lr}
 800bbd8:	4604      	mov	r4, r0
 800bbda:	d001      	beq.n	800bbe0 <cleanup_stdio+0x10>
 800bbdc:	f001 fe1a 	bl	800d814 <_fflush_r>
 800bbe0:	68a1      	ldr	r1, [r4, #8]
 800bbe2:	4b09      	ldr	r3, [pc, #36]	@ (800bc08 <cleanup_stdio+0x38>)
 800bbe4:	4299      	cmp	r1, r3
 800bbe6:	d002      	beq.n	800bbee <cleanup_stdio+0x1e>
 800bbe8:	4620      	mov	r0, r4
 800bbea:	f001 fe13 	bl	800d814 <_fflush_r>
 800bbee:	68e1      	ldr	r1, [r4, #12]
 800bbf0:	4b06      	ldr	r3, [pc, #24]	@ (800bc0c <cleanup_stdio+0x3c>)
 800bbf2:	4299      	cmp	r1, r3
 800bbf4:	d004      	beq.n	800bc00 <cleanup_stdio+0x30>
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbfc:	f001 be0a 	b.w	800d814 <_fflush_r>
 800bc00:	bd10      	pop	{r4, pc}
 800bc02:	bf00      	nop
 800bc04:	2000200c 	.word	0x2000200c
 800bc08:	20002074 	.word	0x20002074
 800bc0c:	200020dc 	.word	0x200020dc

0800bc10 <global_stdio_init.part.0>:
 800bc10:	b510      	push	{r4, lr}
 800bc12:	4b0b      	ldr	r3, [pc, #44]	@ (800bc40 <global_stdio_init.part.0+0x30>)
 800bc14:	4c0b      	ldr	r4, [pc, #44]	@ (800bc44 <global_stdio_init.part.0+0x34>)
 800bc16:	4a0c      	ldr	r2, [pc, #48]	@ (800bc48 <global_stdio_init.part.0+0x38>)
 800bc18:	601a      	str	r2, [r3, #0]
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	2104      	movs	r1, #4
 800bc20:	f7ff ff94 	bl	800bb4c <std>
 800bc24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bc28:	2201      	movs	r2, #1
 800bc2a:	2109      	movs	r1, #9
 800bc2c:	f7ff ff8e 	bl	800bb4c <std>
 800bc30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bc34:	2202      	movs	r2, #2
 800bc36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc3a:	2112      	movs	r1, #18
 800bc3c:	f7ff bf86 	b.w	800bb4c <std>
 800bc40:	20002144 	.word	0x20002144
 800bc44:	2000200c 	.word	0x2000200c
 800bc48:	0800bbb9 	.word	0x0800bbb9

0800bc4c <__sfp_lock_acquire>:
 800bc4c:	4801      	ldr	r0, [pc, #4]	@ (800bc54 <__sfp_lock_acquire+0x8>)
 800bc4e:	f000 b934 	b.w	800beba <__retarget_lock_acquire_recursive>
 800bc52:	bf00      	nop
 800bc54:	2000214d 	.word	0x2000214d

0800bc58 <__sfp_lock_release>:
 800bc58:	4801      	ldr	r0, [pc, #4]	@ (800bc60 <__sfp_lock_release+0x8>)
 800bc5a:	f000 b92f 	b.w	800bebc <__retarget_lock_release_recursive>
 800bc5e:	bf00      	nop
 800bc60:	2000214d 	.word	0x2000214d

0800bc64 <__sinit>:
 800bc64:	b510      	push	{r4, lr}
 800bc66:	4604      	mov	r4, r0
 800bc68:	f7ff fff0 	bl	800bc4c <__sfp_lock_acquire>
 800bc6c:	6a23      	ldr	r3, [r4, #32]
 800bc6e:	b11b      	cbz	r3, 800bc78 <__sinit+0x14>
 800bc70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc74:	f7ff bff0 	b.w	800bc58 <__sfp_lock_release>
 800bc78:	4b04      	ldr	r3, [pc, #16]	@ (800bc8c <__sinit+0x28>)
 800bc7a:	6223      	str	r3, [r4, #32]
 800bc7c:	4b04      	ldr	r3, [pc, #16]	@ (800bc90 <__sinit+0x2c>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d1f5      	bne.n	800bc70 <__sinit+0xc>
 800bc84:	f7ff ffc4 	bl	800bc10 <global_stdio_init.part.0>
 800bc88:	e7f2      	b.n	800bc70 <__sinit+0xc>
 800bc8a:	bf00      	nop
 800bc8c:	0800bbd1 	.word	0x0800bbd1
 800bc90:	20002144 	.word	0x20002144

0800bc94 <_fwalk_sglue>:
 800bc94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc98:	4607      	mov	r7, r0
 800bc9a:	4688      	mov	r8, r1
 800bc9c:	4614      	mov	r4, r2
 800bc9e:	2600      	movs	r6, #0
 800bca0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bca4:	f1b9 0901 	subs.w	r9, r9, #1
 800bca8:	d505      	bpl.n	800bcb6 <_fwalk_sglue+0x22>
 800bcaa:	6824      	ldr	r4, [r4, #0]
 800bcac:	2c00      	cmp	r4, #0
 800bcae:	d1f7      	bne.n	800bca0 <_fwalk_sglue+0xc>
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcb6:	89ab      	ldrh	r3, [r5, #12]
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d907      	bls.n	800bccc <_fwalk_sglue+0x38>
 800bcbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	d003      	beq.n	800bccc <_fwalk_sglue+0x38>
 800bcc4:	4629      	mov	r1, r5
 800bcc6:	4638      	mov	r0, r7
 800bcc8:	47c0      	blx	r8
 800bcca:	4306      	orrs	r6, r0
 800bccc:	3568      	adds	r5, #104	@ 0x68
 800bcce:	e7e9      	b.n	800bca4 <_fwalk_sglue+0x10>

0800bcd0 <sniprintf>:
 800bcd0:	b40c      	push	{r2, r3}
 800bcd2:	b530      	push	{r4, r5, lr}
 800bcd4:	4b17      	ldr	r3, [pc, #92]	@ (800bd34 <sniprintf+0x64>)
 800bcd6:	1e0c      	subs	r4, r1, #0
 800bcd8:	681d      	ldr	r5, [r3, #0]
 800bcda:	b09d      	sub	sp, #116	@ 0x74
 800bcdc:	da08      	bge.n	800bcf0 <sniprintf+0x20>
 800bcde:	238b      	movs	r3, #139	@ 0x8b
 800bce0:	602b      	str	r3, [r5, #0]
 800bce2:	f04f 30ff 	mov.w	r0, #4294967295
 800bce6:	b01d      	add	sp, #116	@ 0x74
 800bce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcec:	b002      	add	sp, #8
 800bcee:	4770      	bx	lr
 800bcf0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bcf4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bcf8:	bf14      	ite	ne
 800bcfa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bcfe:	4623      	moveq	r3, r4
 800bd00:	9304      	str	r3, [sp, #16]
 800bd02:	9307      	str	r3, [sp, #28]
 800bd04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bd08:	9002      	str	r0, [sp, #8]
 800bd0a:	9006      	str	r0, [sp, #24]
 800bd0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bd10:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bd12:	ab21      	add	r3, sp, #132	@ 0x84
 800bd14:	a902      	add	r1, sp, #8
 800bd16:	4628      	mov	r0, r5
 800bd18:	9301      	str	r3, [sp, #4]
 800bd1a:	f001 fbfb 	bl	800d514 <_svfiprintf_r>
 800bd1e:	1c43      	adds	r3, r0, #1
 800bd20:	bfbc      	itt	lt
 800bd22:	238b      	movlt	r3, #139	@ 0x8b
 800bd24:	602b      	strlt	r3, [r5, #0]
 800bd26:	2c00      	cmp	r4, #0
 800bd28:	d0dd      	beq.n	800bce6 <sniprintf+0x16>
 800bd2a:	9b02      	ldr	r3, [sp, #8]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	701a      	strb	r2, [r3, #0]
 800bd30:	e7d9      	b.n	800bce6 <sniprintf+0x16>
 800bd32:	bf00      	nop
 800bd34:	20000108 	.word	0x20000108

0800bd38 <__sread>:
 800bd38:	b510      	push	{r4, lr}
 800bd3a:	460c      	mov	r4, r1
 800bd3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd40:	f000 f86c 	bl	800be1c <_read_r>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	bfab      	itete	ge
 800bd48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bd4a:	89a3      	ldrhlt	r3, [r4, #12]
 800bd4c:	181b      	addge	r3, r3, r0
 800bd4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bd52:	bfac      	ite	ge
 800bd54:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bd56:	81a3      	strhlt	r3, [r4, #12]
 800bd58:	bd10      	pop	{r4, pc}

0800bd5a <__swrite>:
 800bd5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd5e:	461f      	mov	r7, r3
 800bd60:	898b      	ldrh	r3, [r1, #12]
 800bd62:	05db      	lsls	r3, r3, #23
 800bd64:	4605      	mov	r5, r0
 800bd66:	460c      	mov	r4, r1
 800bd68:	4616      	mov	r6, r2
 800bd6a:	d505      	bpl.n	800bd78 <__swrite+0x1e>
 800bd6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd70:	2302      	movs	r3, #2
 800bd72:	2200      	movs	r2, #0
 800bd74:	f000 f840 	bl	800bdf8 <_lseek_r>
 800bd78:	89a3      	ldrh	r3, [r4, #12]
 800bd7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd82:	81a3      	strh	r3, [r4, #12]
 800bd84:	4632      	mov	r2, r6
 800bd86:	463b      	mov	r3, r7
 800bd88:	4628      	mov	r0, r5
 800bd8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd8e:	f000 b857 	b.w	800be40 <_write_r>

0800bd92 <__sseek>:
 800bd92:	b510      	push	{r4, lr}
 800bd94:	460c      	mov	r4, r1
 800bd96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd9a:	f000 f82d 	bl	800bdf8 <_lseek_r>
 800bd9e:	1c43      	adds	r3, r0, #1
 800bda0:	89a3      	ldrh	r3, [r4, #12]
 800bda2:	bf15      	itete	ne
 800bda4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bda6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bdaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bdae:	81a3      	strheq	r3, [r4, #12]
 800bdb0:	bf18      	it	ne
 800bdb2:	81a3      	strhne	r3, [r4, #12]
 800bdb4:	bd10      	pop	{r4, pc}

0800bdb6 <__sclose>:
 800bdb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdba:	f000 b80d 	b.w	800bdd8 <_close_r>

0800bdbe <memset>:
 800bdbe:	4402      	add	r2, r0
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d100      	bne.n	800bdc8 <memset+0xa>
 800bdc6:	4770      	bx	lr
 800bdc8:	f803 1b01 	strb.w	r1, [r3], #1
 800bdcc:	e7f9      	b.n	800bdc2 <memset+0x4>
	...

0800bdd0 <_localeconv_r>:
 800bdd0:	4800      	ldr	r0, [pc, #0]	@ (800bdd4 <_localeconv_r+0x4>)
 800bdd2:	4770      	bx	lr
 800bdd4:	20000248 	.word	0x20000248

0800bdd8 <_close_r>:
 800bdd8:	b538      	push	{r3, r4, r5, lr}
 800bdda:	4d06      	ldr	r5, [pc, #24]	@ (800bdf4 <_close_r+0x1c>)
 800bddc:	2300      	movs	r3, #0
 800bdde:	4604      	mov	r4, r0
 800bde0:	4608      	mov	r0, r1
 800bde2:	602b      	str	r3, [r5, #0]
 800bde4:	f7f5 ffa8 	bl	8001d38 <_close>
 800bde8:	1c43      	adds	r3, r0, #1
 800bdea:	d102      	bne.n	800bdf2 <_close_r+0x1a>
 800bdec:	682b      	ldr	r3, [r5, #0]
 800bdee:	b103      	cbz	r3, 800bdf2 <_close_r+0x1a>
 800bdf0:	6023      	str	r3, [r4, #0]
 800bdf2:	bd38      	pop	{r3, r4, r5, pc}
 800bdf4:	20002148 	.word	0x20002148

0800bdf8 <_lseek_r>:
 800bdf8:	b538      	push	{r3, r4, r5, lr}
 800bdfa:	4d07      	ldr	r5, [pc, #28]	@ (800be18 <_lseek_r+0x20>)
 800bdfc:	4604      	mov	r4, r0
 800bdfe:	4608      	mov	r0, r1
 800be00:	4611      	mov	r1, r2
 800be02:	2200      	movs	r2, #0
 800be04:	602a      	str	r2, [r5, #0]
 800be06:	461a      	mov	r2, r3
 800be08:	f7f5 ffbd 	bl	8001d86 <_lseek>
 800be0c:	1c43      	adds	r3, r0, #1
 800be0e:	d102      	bne.n	800be16 <_lseek_r+0x1e>
 800be10:	682b      	ldr	r3, [r5, #0]
 800be12:	b103      	cbz	r3, 800be16 <_lseek_r+0x1e>
 800be14:	6023      	str	r3, [r4, #0]
 800be16:	bd38      	pop	{r3, r4, r5, pc}
 800be18:	20002148 	.word	0x20002148

0800be1c <_read_r>:
 800be1c:	b538      	push	{r3, r4, r5, lr}
 800be1e:	4d07      	ldr	r5, [pc, #28]	@ (800be3c <_read_r+0x20>)
 800be20:	4604      	mov	r4, r0
 800be22:	4608      	mov	r0, r1
 800be24:	4611      	mov	r1, r2
 800be26:	2200      	movs	r2, #0
 800be28:	602a      	str	r2, [r5, #0]
 800be2a:	461a      	mov	r2, r3
 800be2c:	f7f5 ff4b 	bl	8001cc6 <_read>
 800be30:	1c43      	adds	r3, r0, #1
 800be32:	d102      	bne.n	800be3a <_read_r+0x1e>
 800be34:	682b      	ldr	r3, [r5, #0]
 800be36:	b103      	cbz	r3, 800be3a <_read_r+0x1e>
 800be38:	6023      	str	r3, [r4, #0]
 800be3a:	bd38      	pop	{r3, r4, r5, pc}
 800be3c:	20002148 	.word	0x20002148

0800be40 <_write_r>:
 800be40:	b538      	push	{r3, r4, r5, lr}
 800be42:	4d07      	ldr	r5, [pc, #28]	@ (800be60 <_write_r+0x20>)
 800be44:	4604      	mov	r4, r0
 800be46:	4608      	mov	r0, r1
 800be48:	4611      	mov	r1, r2
 800be4a:	2200      	movs	r2, #0
 800be4c:	602a      	str	r2, [r5, #0]
 800be4e:	461a      	mov	r2, r3
 800be50:	f7f5 ff56 	bl	8001d00 <_write>
 800be54:	1c43      	adds	r3, r0, #1
 800be56:	d102      	bne.n	800be5e <_write_r+0x1e>
 800be58:	682b      	ldr	r3, [r5, #0]
 800be5a:	b103      	cbz	r3, 800be5e <_write_r+0x1e>
 800be5c:	6023      	str	r3, [r4, #0]
 800be5e:	bd38      	pop	{r3, r4, r5, pc}
 800be60:	20002148 	.word	0x20002148

0800be64 <__errno>:
 800be64:	4b01      	ldr	r3, [pc, #4]	@ (800be6c <__errno+0x8>)
 800be66:	6818      	ldr	r0, [r3, #0]
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	20000108 	.word	0x20000108

0800be70 <__libc_init_array>:
 800be70:	b570      	push	{r4, r5, r6, lr}
 800be72:	4d0d      	ldr	r5, [pc, #52]	@ (800bea8 <__libc_init_array+0x38>)
 800be74:	4c0d      	ldr	r4, [pc, #52]	@ (800beac <__libc_init_array+0x3c>)
 800be76:	1b64      	subs	r4, r4, r5
 800be78:	10a4      	asrs	r4, r4, #2
 800be7a:	2600      	movs	r6, #0
 800be7c:	42a6      	cmp	r6, r4
 800be7e:	d109      	bne.n	800be94 <__libc_init_array+0x24>
 800be80:	4d0b      	ldr	r5, [pc, #44]	@ (800beb0 <__libc_init_array+0x40>)
 800be82:	4c0c      	ldr	r4, [pc, #48]	@ (800beb4 <__libc_init_array+0x44>)
 800be84:	f002 fad0 	bl	800e428 <_init>
 800be88:	1b64      	subs	r4, r4, r5
 800be8a:	10a4      	asrs	r4, r4, #2
 800be8c:	2600      	movs	r6, #0
 800be8e:	42a6      	cmp	r6, r4
 800be90:	d105      	bne.n	800be9e <__libc_init_array+0x2e>
 800be92:	bd70      	pop	{r4, r5, r6, pc}
 800be94:	f855 3b04 	ldr.w	r3, [r5], #4
 800be98:	4798      	blx	r3
 800be9a:	3601      	adds	r6, #1
 800be9c:	e7ee      	b.n	800be7c <__libc_init_array+0xc>
 800be9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bea2:	4798      	blx	r3
 800bea4:	3601      	adds	r6, #1
 800bea6:	e7f2      	b.n	800be8e <__libc_init_array+0x1e>
 800bea8:	0800e8d0 	.word	0x0800e8d0
 800beac:	0800e8d0 	.word	0x0800e8d0
 800beb0:	0800e8d0 	.word	0x0800e8d0
 800beb4:	0800e8d4 	.word	0x0800e8d4

0800beb8 <__retarget_lock_init_recursive>:
 800beb8:	4770      	bx	lr

0800beba <__retarget_lock_acquire_recursive>:
 800beba:	4770      	bx	lr

0800bebc <__retarget_lock_release_recursive>:
 800bebc:	4770      	bx	lr

0800bebe <quorem>:
 800bebe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec2:	6903      	ldr	r3, [r0, #16]
 800bec4:	690c      	ldr	r4, [r1, #16]
 800bec6:	42a3      	cmp	r3, r4
 800bec8:	4607      	mov	r7, r0
 800beca:	db7e      	blt.n	800bfca <quorem+0x10c>
 800becc:	3c01      	subs	r4, #1
 800bece:	f101 0814 	add.w	r8, r1, #20
 800bed2:	00a3      	lsls	r3, r4, #2
 800bed4:	f100 0514 	add.w	r5, r0, #20
 800bed8:	9300      	str	r3, [sp, #0]
 800beda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bede:	9301      	str	r3, [sp, #4]
 800bee0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bee4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bee8:	3301      	adds	r3, #1
 800beea:	429a      	cmp	r2, r3
 800beec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bef0:	fbb2 f6f3 	udiv	r6, r2, r3
 800bef4:	d32e      	bcc.n	800bf54 <quorem+0x96>
 800bef6:	f04f 0a00 	mov.w	sl, #0
 800befa:	46c4      	mov	ip, r8
 800befc:	46ae      	mov	lr, r5
 800befe:	46d3      	mov	fp, sl
 800bf00:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bf04:	b298      	uxth	r0, r3
 800bf06:	fb06 a000 	mla	r0, r6, r0, sl
 800bf0a:	0c02      	lsrs	r2, r0, #16
 800bf0c:	0c1b      	lsrs	r3, r3, #16
 800bf0e:	fb06 2303 	mla	r3, r6, r3, r2
 800bf12:	f8de 2000 	ldr.w	r2, [lr]
 800bf16:	b280      	uxth	r0, r0
 800bf18:	b292      	uxth	r2, r2
 800bf1a:	1a12      	subs	r2, r2, r0
 800bf1c:	445a      	add	r2, fp
 800bf1e:	f8de 0000 	ldr.w	r0, [lr]
 800bf22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bf2c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bf30:	b292      	uxth	r2, r2
 800bf32:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bf36:	45e1      	cmp	r9, ip
 800bf38:	f84e 2b04 	str.w	r2, [lr], #4
 800bf3c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bf40:	d2de      	bcs.n	800bf00 <quorem+0x42>
 800bf42:	9b00      	ldr	r3, [sp, #0]
 800bf44:	58eb      	ldr	r3, [r5, r3]
 800bf46:	b92b      	cbnz	r3, 800bf54 <quorem+0x96>
 800bf48:	9b01      	ldr	r3, [sp, #4]
 800bf4a:	3b04      	subs	r3, #4
 800bf4c:	429d      	cmp	r5, r3
 800bf4e:	461a      	mov	r2, r3
 800bf50:	d32f      	bcc.n	800bfb2 <quorem+0xf4>
 800bf52:	613c      	str	r4, [r7, #16]
 800bf54:	4638      	mov	r0, r7
 800bf56:	f001 f979 	bl	800d24c <__mcmp>
 800bf5a:	2800      	cmp	r0, #0
 800bf5c:	db25      	blt.n	800bfaa <quorem+0xec>
 800bf5e:	4629      	mov	r1, r5
 800bf60:	2000      	movs	r0, #0
 800bf62:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf66:	f8d1 c000 	ldr.w	ip, [r1]
 800bf6a:	fa1f fe82 	uxth.w	lr, r2
 800bf6e:	fa1f f38c 	uxth.w	r3, ip
 800bf72:	eba3 030e 	sub.w	r3, r3, lr
 800bf76:	4403      	add	r3, r0
 800bf78:	0c12      	lsrs	r2, r2, #16
 800bf7a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bf7e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf88:	45c1      	cmp	r9, r8
 800bf8a:	f841 3b04 	str.w	r3, [r1], #4
 800bf8e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bf92:	d2e6      	bcs.n	800bf62 <quorem+0xa4>
 800bf94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf9c:	b922      	cbnz	r2, 800bfa8 <quorem+0xea>
 800bf9e:	3b04      	subs	r3, #4
 800bfa0:	429d      	cmp	r5, r3
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	d30b      	bcc.n	800bfbe <quorem+0x100>
 800bfa6:	613c      	str	r4, [r7, #16]
 800bfa8:	3601      	adds	r6, #1
 800bfaa:	4630      	mov	r0, r6
 800bfac:	b003      	add	sp, #12
 800bfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb2:	6812      	ldr	r2, [r2, #0]
 800bfb4:	3b04      	subs	r3, #4
 800bfb6:	2a00      	cmp	r2, #0
 800bfb8:	d1cb      	bne.n	800bf52 <quorem+0x94>
 800bfba:	3c01      	subs	r4, #1
 800bfbc:	e7c6      	b.n	800bf4c <quorem+0x8e>
 800bfbe:	6812      	ldr	r2, [r2, #0]
 800bfc0:	3b04      	subs	r3, #4
 800bfc2:	2a00      	cmp	r2, #0
 800bfc4:	d1ef      	bne.n	800bfa6 <quorem+0xe8>
 800bfc6:	3c01      	subs	r4, #1
 800bfc8:	e7ea      	b.n	800bfa0 <quorem+0xe2>
 800bfca:	2000      	movs	r0, #0
 800bfcc:	e7ee      	b.n	800bfac <quorem+0xee>
	...

0800bfd0 <_dtoa_r>:
 800bfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd4:	69c7      	ldr	r7, [r0, #28]
 800bfd6:	b099      	sub	sp, #100	@ 0x64
 800bfd8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bfdc:	ec55 4b10 	vmov	r4, r5, d0
 800bfe0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bfe2:	9109      	str	r1, [sp, #36]	@ 0x24
 800bfe4:	4683      	mov	fp, r0
 800bfe6:	920e      	str	r2, [sp, #56]	@ 0x38
 800bfe8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bfea:	b97f      	cbnz	r7, 800c00c <_dtoa_r+0x3c>
 800bfec:	2010      	movs	r0, #16
 800bfee:	f000 fdfd 	bl	800cbec <malloc>
 800bff2:	4602      	mov	r2, r0
 800bff4:	f8cb 001c 	str.w	r0, [fp, #28]
 800bff8:	b920      	cbnz	r0, 800c004 <_dtoa_r+0x34>
 800bffa:	4ba7      	ldr	r3, [pc, #668]	@ (800c298 <_dtoa_r+0x2c8>)
 800bffc:	21ef      	movs	r1, #239	@ 0xef
 800bffe:	48a7      	ldr	r0, [pc, #668]	@ (800c29c <_dtoa_r+0x2cc>)
 800c000:	f001 fc68 	bl	800d8d4 <__assert_func>
 800c004:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c008:	6007      	str	r7, [r0, #0]
 800c00a:	60c7      	str	r7, [r0, #12]
 800c00c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c010:	6819      	ldr	r1, [r3, #0]
 800c012:	b159      	cbz	r1, 800c02c <_dtoa_r+0x5c>
 800c014:	685a      	ldr	r2, [r3, #4]
 800c016:	604a      	str	r2, [r1, #4]
 800c018:	2301      	movs	r3, #1
 800c01a:	4093      	lsls	r3, r2
 800c01c:	608b      	str	r3, [r1, #8]
 800c01e:	4658      	mov	r0, fp
 800c020:	f000 feda 	bl	800cdd8 <_Bfree>
 800c024:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c028:	2200      	movs	r2, #0
 800c02a:	601a      	str	r2, [r3, #0]
 800c02c:	1e2b      	subs	r3, r5, #0
 800c02e:	bfb9      	ittee	lt
 800c030:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c034:	9303      	strlt	r3, [sp, #12]
 800c036:	2300      	movge	r3, #0
 800c038:	6033      	strge	r3, [r6, #0]
 800c03a:	9f03      	ldr	r7, [sp, #12]
 800c03c:	4b98      	ldr	r3, [pc, #608]	@ (800c2a0 <_dtoa_r+0x2d0>)
 800c03e:	bfbc      	itt	lt
 800c040:	2201      	movlt	r2, #1
 800c042:	6032      	strlt	r2, [r6, #0]
 800c044:	43bb      	bics	r3, r7
 800c046:	d112      	bne.n	800c06e <_dtoa_r+0x9e>
 800c048:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c04a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c04e:	6013      	str	r3, [r2, #0]
 800c050:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c054:	4323      	orrs	r3, r4
 800c056:	f000 854d 	beq.w	800caf4 <_dtoa_r+0xb24>
 800c05a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c05c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c2b4 <_dtoa_r+0x2e4>
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 854f 	beq.w	800cb04 <_dtoa_r+0xb34>
 800c066:	f10a 0303 	add.w	r3, sl, #3
 800c06a:	f000 bd49 	b.w	800cb00 <_dtoa_r+0xb30>
 800c06e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c072:	2200      	movs	r2, #0
 800c074:	ec51 0b17 	vmov	r0, r1, d7
 800c078:	2300      	movs	r3, #0
 800c07a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c07e:	f7f4 fd2b 	bl	8000ad8 <__aeabi_dcmpeq>
 800c082:	4680      	mov	r8, r0
 800c084:	b158      	cbz	r0, 800c09e <_dtoa_r+0xce>
 800c086:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c088:	2301      	movs	r3, #1
 800c08a:	6013      	str	r3, [r2, #0]
 800c08c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c08e:	b113      	cbz	r3, 800c096 <_dtoa_r+0xc6>
 800c090:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c092:	4b84      	ldr	r3, [pc, #528]	@ (800c2a4 <_dtoa_r+0x2d4>)
 800c094:	6013      	str	r3, [r2, #0]
 800c096:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c2b8 <_dtoa_r+0x2e8>
 800c09a:	f000 bd33 	b.w	800cb04 <_dtoa_r+0xb34>
 800c09e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c0a2:	aa16      	add	r2, sp, #88	@ 0x58
 800c0a4:	a917      	add	r1, sp, #92	@ 0x5c
 800c0a6:	4658      	mov	r0, fp
 800c0a8:	f001 f980 	bl	800d3ac <__d2b>
 800c0ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c0b0:	4681      	mov	r9, r0
 800c0b2:	2e00      	cmp	r6, #0
 800c0b4:	d077      	beq.n	800c1a6 <_dtoa_r+0x1d6>
 800c0b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c0b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c0bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c0c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c0c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c0cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	4b74      	ldr	r3, [pc, #464]	@ (800c2a8 <_dtoa_r+0x2d8>)
 800c0d6:	f7f4 f8df 	bl	8000298 <__aeabi_dsub>
 800c0da:	a369      	add	r3, pc, #420	@ (adr r3, 800c280 <_dtoa_r+0x2b0>)
 800c0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e0:	f7f4 fa92 	bl	8000608 <__aeabi_dmul>
 800c0e4:	a368      	add	r3, pc, #416	@ (adr r3, 800c288 <_dtoa_r+0x2b8>)
 800c0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ea:	f7f4 f8d7 	bl	800029c <__adddf3>
 800c0ee:	4604      	mov	r4, r0
 800c0f0:	4630      	mov	r0, r6
 800c0f2:	460d      	mov	r5, r1
 800c0f4:	f7f4 fa1e 	bl	8000534 <__aeabi_i2d>
 800c0f8:	a365      	add	r3, pc, #404	@ (adr r3, 800c290 <_dtoa_r+0x2c0>)
 800c0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fe:	f7f4 fa83 	bl	8000608 <__aeabi_dmul>
 800c102:	4602      	mov	r2, r0
 800c104:	460b      	mov	r3, r1
 800c106:	4620      	mov	r0, r4
 800c108:	4629      	mov	r1, r5
 800c10a:	f7f4 f8c7 	bl	800029c <__adddf3>
 800c10e:	4604      	mov	r4, r0
 800c110:	460d      	mov	r5, r1
 800c112:	f7f4 fd29 	bl	8000b68 <__aeabi_d2iz>
 800c116:	2200      	movs	r2, #0
 800c118:	4607      	mov	r7, r0
 800c11a:	2300      	movs	r3, #0
 800c11c:	4620      	mov	r0, r4
 800c11e:	4629      	mov	r1, r5
 800c120:	f7f4 fce4 	bl	8000aec <__aeabi_dcmplt>
 800c124:	b140      	cbz	r0, 800c138 <_dtoa_r+0x168>
 800c126:	4638      	mov	r0, r7
 800c128:	f7f4 fa04 	bl	8000534 <__aeabi_i2d>
 800c12c:	4622      	mov	r2, r4
 800c12e:	462b      	mov	r3, r5
 800c130:	f7f4 fcd2 	bl	8000ad8 <__aeabi_dcmpeq>
 800c134:	b900      	cbnz	r0, 800c138 <_dtoa_r+0x168>
 800c136:	3f01      	subs	r7, #1
 800c138:	2f16      	cmp	r7, #22
 800c13a:	d851      	bhi.n	800c1e0 <_dtoa_r+0x210>
 800c13c:	4b5b      	ldr	r3, [pc, #364]	@ (800c2ac <_dtoa_r+0x2dc>)
 800c13e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c14a:	f7f4 fccf 	bl	8000aec <__aeabi_dcmplt>
 800c14e:	2800      	cmp	r0, #0
 800c150:	d048      	beq.n	800c1e4 <_dtoa_r+0x214>
 800c152:	3f01      	subs	r7, #1
 800c154:	2300      	movs	r3, #0
 800c156:	9312      	str	r3, [sp, #72]	@ 0x48
 800c158:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c15a:	1b9b      	subs	r3, r3, r6
 800c15c:	1e5a      	subs	r2, r3, #1
 800c15e:	bf44      	itt	mi
 800c160:	f1c3 0801 	rsbmi	r8, r3, #1
 800c164:	2300      	movmi	r3, #0
 800c166:	9208      	str	r2, [sp, #32]
 800c168:	bf54      	ite	pl
 800c16a:	f04f 0800 	movpl.w	r8, #0
 800c16e:	9308      	strmi	r3, [sp, #32]
 800c170:	2f00      	cmp	r7, #0
 800c172:	db39      	blt.n	800c1e8 <_dtoa_r+0x218>
 800c174:	9b08      	ldr	r3, [sp, #32]
 800c176:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c178:	443b      	add	r3, r7
 800c17a:	9308      	str	r3, [sp, #32]
 800c17c:	2300      	movs	r3, #0
 800c17e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c182:	2b09      	cmp	r3, #9
 800c184:	d864      	bhi.n	800c250 <_dtoa_r+0x280>
 800c186:	2b05      	cmp	r3, #5
 800c188:	bfc4      	itt	gt
 800c18a:	3b04      	subgt	r3, #4
 800c18c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c18e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c190:	f1a3 0302 	sub.w	r3, r3, #2
 800c194:	bfcc      	ite	gt
 800c196:	2400      	movgt	r4, #0
 800c198:	2401      	movle	r4, #1
 800c19a:	2b03      	cmp	r3, #3
 800c19c:	d863      	bhi.n	800c266 <_dtoa_r+0x296>
 800c19e:	e8df f003 	tbb	[pc, r3]
 800c1a2:	372a      	.short	0x372a
 800c1a4:	5535      	.short	0x5535
 800c1a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c1aa:	441e      	add	r6, r3
 800c1ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c1b0:	2b20      	cmp	r3, #32
 800c1b2:	bfc1      	itttt	gt
 800c1b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c1b8:	409f      	lslgt	r7, r3
 800c1ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c1be:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c1c2:	bfd6      	itet	le
 800c1c4:	f1c3 0320 	rsble	r3, r3, #32
 800c1c8:	ea47 0003 	orrgt.w	r0, r7, r3
 800c1cc:	fa04 f003 	lslle.w	r0, r4, r3
 800c1d0:	f7f4 f9a0 	bl	8000514 <__aeabi_ui2d>
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c1da:	3e01      	subs	r6, #1
 800c1dc:	9214      	str	r2, [sp, #80]	@ 0x50
 800c1de:	e777      	b.n	800c0d0 <_dtoa_r+0x100>
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	e7b8      	b.n	800c156 <_dtoa_r+0x186>
 800c1e4:	9012      	str	r0, [sp, #72]	@ 0x48
 800c1e6:	e7b7      	b.n	800c158 <_dtoa_r+0x188>
 800c1e8:	427b      	negs	r3, r7
 800c1ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	eba8 0807 	sub.w	r8, r8, r7
 800c1f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c1f4:	e7c4      	b.n	800c180 <_dtoa_r+0x1b0>
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	dc35      	bgt.n	800c26c <_dtoa_r+0x29c>
 800c200:	2301      	movs	r3, #1
 800c202:	9300      	str	r3, [sp, #0]
 800c204:	9307      	str	r3, [sp, #28]
 800c206:	461a      	mov	r2, r3
 800c208:	920e      	str	r2, [sp, #56]	@ 0x38
 800c20a:	e00b      	b.n	800c224 <_dtoa_r+0x254>
 800c20c:	2301      	movs	r3, #1
 800c20e:	e7f3      	b.n	800c1f8 <_dtoa_r+0x228>
 800c210:	2300      	movs	r3, #0
 800c212:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c214:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c216:	18fb      	adds	r3, r7, r3
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	3301      	adds	r3, #1
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	9307      	str	r3, [sp, #28]
 800c220:	bfb8      	it	lt
 800c222:	2301      	movlt	r3, #1
 800c224:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c228:	2100      	movs	r1, #0
 800c22a:	2204      	movs	r2, #4
 800c22c:	f102 0514 	add.w	r5, r2, #20
 800c230:	429d      	cmp	r5, r3
 800c232:	d91f      	bls.n	800c274 <_dtoa_r+0x2a4>
 800c234:	6041      	str	r1, [r0, #4]
 800c236:	4658      	mov	r0, fp
 800c238:	f000 fd8e 	bl	800cd58 <_Balloc>
 800c23c:	4682      	mov	sl, r0
 800c23e:	2800      	cmp	r0, #0
 800c240:	d13c      	bne.n	800c2bc <_dtoa_r+0x2ec>
 800c242:	4b1b      	ldr	r3, [pc, #108]	@ (800c2b0 <_dtoa_r+0x2e0>)
 800c244:	4602      	mov	r2, r0
 800c246:	f240 11af 	movw	r1, #431	@ 0x1af
 800c24a:	e6d8      	b.n	800bffe <_dtoa_r+0x2e>
 800c24c:	2301      	movs	r3, #1
 800c24e:	e7e0      	b.n	800c212 <_dtoa_r+0x242>
 800c250:	2401      	movs	r4, #1
 800c252:	2300      	movs	r3, #0
 800c254:	9309      	str	r3, [sp, #36]	@ 0x24
 800c256:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c258:	f04f 33ff 	mov.w	r3, #4294967295
 800c25c:	9300      	str	r3, [sp, #0]
 800c25e:	9307      	str	r3, [sp, #28]
 800c260:	2200      	movs	r2, #0
 800c262:	2312      	movs	r3, #18
 800c264:	e7d0      	b.n	800c208 <_dtoa_r+0x238>
 800c266:	2301      	movs	r3, #1
 800c268:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c26a:	e7f5      	b.n	800c258 <_dtoa_r+0x288>
 800c26c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	9307      	str	r3, [sp, #28]
 800c272:	e7d7      	b.n	800c224 <_dtoa_r+0x254>
 800c274:	3101      	adds	r1, #1
 800c276:	0052      	lsls	r2, r2, #1
 800c278:	e7d8      	b.n	800c22c <_dtoa_r+0x25c>
 800c27a:	bf00      	nop
 800c27c:	f3af 8000 	nop.w
 800c280:	636f4361 	.word	0x636f4361
 800c284:	3fd287a7 	.word	0x3fd287a7
 800c288:	8b60c8b3 	.word	0x8b60c8b3
 800c28c:	3fc68a28 	.word	0x3fc68a28
 800c290:	509f79fb 	.word	0x509f79fb
 800c294:	3fd34413 	.word	0x3fd34413
 800c298:	0800e525 	.word	0x0800e525
 800c29c:	0800e53c 	.word	0x0800e53c
 800c2a0:	7ff00000 	.word	0x7ff00000
 800c2a4:	0800e4f5 	.word	0x0800e4f5
 800c2a8:	3ff80000 	.word	0x3ff80000
 800c2ac:	0800e638 	.word	0x0800e638
 800c2b0:	0800e594 	.word	0x0800e594
 800c2b4:	0800e521 	.word	0x0800e521
 800c2b8:	0800e4f4 	.word	0x0800e4f4
 800c2bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c2c0:	6018      	str	r0, [r3, #0]
 800c2c2:	9b07      	ldr	r3, [sp, #28]
 800c2c4:	2b0e      	cmp	r3, #14
 800c2c6:	f200 80a4 	bhi.w	800c412 <_dtoa_r+0x442>
 800c2ca:	2c00      	cmp	r4, #0
 800c2cc:	f000 80a1 	beq.w	800c412 <_dtoa_r+0x442>
 800c2d0:	2f00      	cmp	r7, #0
 800c2d2:	dd33      	ble.n	800c33c <_dtoa_r+0x36c>
 800c2d4:	4bad      	ldr	r3, [pc, #692]	@ (800c58c <_dtoa_r+0x5bc>)
 800c2d6:	f007 020f 	and.w	r2, r7, #15
 800c2da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2de:	ed93 7b00 	vldr	d7, [r3]
 800c2e2:	05f8      	lsls	r0, r7, #23
 800c2e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c2e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c2ec:	d516      	bpl.n	800c31c <_dtoa_r+0x34c>
 800c2ee:	4ba8      	ldr	r3, [pc, #672]	@ (800c590 <_dtoa_r+0x5c0>)
 800c2f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c2f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c2f8:	f7f4 fab0 	bl	800085c <__aeabi_ddiv>
 800c2fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c300:	f004 040f 	and.w	r4, r4, #15
 800c304:	2603      	movs	r6, #3
 800c306:	4da2      	ldr	r5, [pc, #648]	@ (800c590 <_dtoa_r+0x5c0>)
 800c308:	b954      	cbnz	r4, 800c320 <_dtoa_r+0x350>
 800c30a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c30e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c312:	f7f4 faa3 	bl	800085c <__aeabi_ddiv>
 800c316:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c31a:	e028      	b.n	800c36e <_dtoa_r+0x39e>
 800c31c:	2602      	movs	r6, #2
 800c31e:	e7f2      	b.n	800c306 <_dtoa_r+0x336>
 800c320:	07e1      	lsls	r1, r4, #31
 800c322:	d508      	bpl.n	800c336 <_dtoa_r+0x366>
 800c324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c328:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c32c:	f7f4 f96c 	bl	8000608 <__aeabi_dmul>
 800c330:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c334:	3601      	adds	r6, #1
 800c336:	1064      	asrs	r4, r4, #1
 800c338:	3508      	adds	r5, #8
 800c33a:	e7e5      	b.n	800c308 <_dtoa_r+0x338>
 800c33c:	f000 80d2 	beq.w	800c4e4 <_dtoa_r+0x514>
 800c340:	427c      	negs	r4, r7
 800c342:	4b92      	ldr	r3, [pc, #584]	@ (800c58c <_dtoa_r+0x5bc>)
 800c344:	4d92      	ldr	r5, [pc, #584]	@ (800c590 <_dtoa_r+0x5c0>)
 800c346:	f004 020f 	and.w	r2, r4, #15
 800c34a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c352:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c356:	f7f4 f957 	bl	8000608 <__aeabi_dmul>
 800c35a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c35e:	1124      	asrs	r4, r4, #4
 800c360:	2300      	movs	r3, #0
 800c362:	2602      	movs	r6, #2
 800c364:	2c00      	cmp	r4, #0
 800c366:	f040 80b2 	bne.w	800c4ce <_dtoa_r+0x4fe>
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d1d3      	bne.n	800c316 <_dtoa_r+0x346>
 800c36e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c370:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c374:	2b00      	cmp	r3, #0
 800c376:	f000 80b7 	beq.w	800c4e8 <_dtoa_r+0x518>
 800c37a:	4b86      	ldr	r3, [pc, #536]	@ (800c594 <_dtoa_r+0x5c4>)
 800c37c:	2200      	movs	r2, #0
 800c37e:	4620      	mov	r0, r4
 800c380:	4629      	mov	r1, r5
 800c382:	f7f4 fbb3 	bl	8000aec <__aeabi_dcmplt>
 800c386:	2800      	cmp	r0, #0
 800c388:	f000 80ae 	beq.w	800c4e8 <_dtoa_r+0x518>
 800c38c:	9b07      	ldr	r3, [sp, #28]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	f000 80aa 	beq.w	800c4e8 <_dtoa_r+0x518>
 800c394:	9b00      	ldr	r3, [sp, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	dd37      	ble.n	800c40a <_dtoa_r+0x43a>
 800c39a:	1e7b      	subs	r3, r7, #1
 800c39c:	9304      	str	r3, [sp, #16]
 800c39e:	4620      	mov	r0, r4
 800c3a0:	4b7d      	ldr	r3, [pc, #500]	@ (800c598 <_dtoa_r+0x5c8>)
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	4629      	mov	r1, r5
 800c3a6:	f7f4 f92f 	bl	8000608 <__aeabi_dmul>
 800c3aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3ae:	9c00      	ldr	r4, [sp, #0]
 800c3b0:	3601      	adds	r6, #1
 800c3b2:	4630      	mov	r0, r6
 800c3b4:	f7f4 f8be 	bl	8000534 <__aeabi_i2d>
 800c3b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3bc:	f7f4 f924 	bl	8000608 <__aeabi_dmul>
 800c3c0:	4b76      	ldr	r3, [pc, #472]	@ (800c59c <_dtoa_r+0x5cc>)
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f7f3 ff6a 	bl	800029c <__adddf3>
 800c3c8:	4605      	mov	r5, r0
 800c3ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c3ce:	2c00      	cmp	r4, #0
 800c3d0:	f040 808d 	bne.w	800c4ee <_dtoa_r+0x51e>
 800c3d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3d8:	4b71      	ldr	r3, [pc, #452]	@ (800c5a0 <_dtoa_r+0x5d0>)
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f7f3 ff5c 	bl	8000298 <__aeabi_dsub>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c3e8:	462a      	mov	r2, r5
 800c3ea:	4633      	mov	r3, r6
 800c3ec:	f7f4 fb9c 	bl	8000b28 <__aeabi_dcmpgt>
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	f040 828b 	bne.w	800c90c <_dtoa_r+0x93c>
 800c3f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3fa:	462a      	mov	r2, r5
 800c3fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c400:	f7f4 fb74 	bl	8000aec <__aeabi_dcmplt>
 800c404:	2800      	cmp	r0, #0
 800c406:	f040 8128 	bne.w	800c65a <_dtoa_r+0x68a>
 800c40a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c40e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c412:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c414:	2b00      	cmp	r3, #0
 800c416:	f2c0 815a 	blt.w	800c6ce <_dtoa_r+0x6fe>
 800c41a:	2f0e      	cmp	r7, #14
 800c41c:	f300 8157 	bgt.w	800c6ce <_dtoa_r+0x6fe>
 800c420:	4b5a      	ldr	r3, [pc, #360]	@ (800c58c <_dtoa_r+0x5bc>)
 800c422:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c426:	ed93 7b00 	vldr	d7, [r3]
 800c42a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	ed8d 7b00 	vstr	d7, [sp]
 800c432:	da03      	bge.n	800c43c <_dtoa_r+0x46c>
 800c434:	9b07      	ldr	r3, [sp, #28]
 800c436:	2b00      	cmp	r3, #0
 800c438:	f340 8101 	ble.w	800c63e <_dtoa_r+0x66e>
 800c43c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c440:	4656      	mov	r6, sl
 800c442:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c446:	4620      	mov	r0, r4
 800c448:	4629      	mov	r1, r5
 800c44a:	f7f4 fa07 	bl	800085c <__aeabi_ddiv>
 800c44e:	f7f4 fb8b 	bl	8000b68 <__aeabi_d2iz>
 800c452:	4680      	mov	r8, r0
 800c454:	f7f4 f86e 	bl	8000534 <__aeabi_i2d>
 800c458:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c45c:	f7f4 f8d4 	bl	8000608 <__aeabi_dmul>
 800c460:	4602      	mov	r2, r0
 800c462:	460b      	mov	r3, r1
 800c464:	4620      	mov	r0, r4
 800c466:	4629      	mov	r1, r5
 800c468:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c46c:	f7f3 ff14 	bl	8000298 <__aeabi_dsub>
 800c470:	f806 4b01 	strb.w	r4, [r6], #1
 800c474:	9d07      	ldr	r5, [sp, #28]
 800c476:	eba6 040a 	sub.w	r4, r6, sl
 800c47a:	42a5      	cmp	r5, r4
 800c47c:	4602      	mov	r2, r0
 800c47e:	460b      	mov	r3, r1
 800c480:	f040 8117 	bne.w	800c6b2 <_dtoa_r+0x6e2>
 800c484:	f7f3 ff0a 	bl	800029c <__adddf3>
 800c488:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c48c:	4604      	mov	r4, r0
 800c48e:	460d      	mov	r5, r1
 800c490:	f7f4 fb4a 	bl	8000b28 <__aeabi_dcmpgt>
 800c494:	2800      	cmp	r0, #0
 800c496:	f040 80f9 	bne.w	800c68c <_dtoa_r+0x6bc>
 800c49a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c49e:	4620      	mov	r0, r4
 800c4a0:	4629      	mov	r1, r5
 800c4a2:	f7f4 fb19 	bl	8000ad8 <__aeabi_dcmpeq>
 800c4a6:	b118      	cbz	r0, 800c4b0 <_dtoa_r+0x4e0>
 800c4a8:	f018 0f01 	tst.w	r8, #1
 800c4ac:	f040 80ee 	bne.w	800c68c <_dtoa_r+0x6bc>
 800c4b0:	4649      	mov	r1, r9
 800c4b2:	4658      	mov	r0, fp
 800c4b4:	f000 fc90 	bl	800cdd8 <_Bfree>
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	7033      	strb	r3, [r6, #0]
 800c4bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c4be:	3701      	adds	r7, #1
 800c4c0:	601f      	str	r7, [r3, #0]
 800c4c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	f000 831d 	beq.w	800cb04 <_dtoa_r+0xb34>
 800c4ca:	601e      	str	r6, [r3, #0]
 800c4cc:	e31a      	b.n	800cb04 <_dtoa_r+0xb34>
 800c4ce:	07e2      	lsls	r2, r4, #31
 800c4d0:	d505      	bpl.n	800c4de <_dtoa_r+0x50e>
 800c4d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c4d6:	f7f4 f897 	bl	8000608 <__aeabi_dmul>
 800c4da:	3601      	adds	r6, #1
 800c4dc:	2301      	movs	r3, #1
 800c4de:	1064      	asrs	r4, r4, #1
 800c4e0:	3508      	adds	r5, #8
 800c4e2:	e73f      	b.n	800c364 <_dtoa_r+0x394>
 800c4e4:	2602      	movs	r6, #2
 800c4e6:	e742      	b.n	800c36e <_dtoa_r+0x39e>
 800c4e8:	9c07      	ldr	r4, [sp, #28]
 800c4ea:	9704      	str	r7, [sp, #16]
 800c4ec:	e761      	b.n	800c3b2 <_dtoa_r+0x3e2>
 800c4ee:	4b27      	ldr	r3, [pc, #156]	@ (800c58c <_dtoa_r+0x5bc>)
 800c4f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c4f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c4f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c4fa:	4454      	add	r4, sl
 800c4fc:	2900      	cmp	r1, #0
 800c4fe:	d053      	beq.n	800c5a8 <_dtoa_r+0x5d8>
 800c500:	4928      	ldr	r1, [pc, #160]	@ (800c5a4 <_dtoa_r+0x5d4>)
 800c502:	2000      	movs	r0, #0
 800c504:	f7f4 f9aa 	bl	800085c <__aeabi_ddiv>
 800c508:	4633      	mov	r3, r6
 800c50a:	462a      	mov	r2, r5
 800c50c:	f7f3 fec4 	bl	8000298 <__aeabi_dsub>
 800c510:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c514:	4656      	mov	r6, sl
 800c516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c51a:	f7f4 fb25 	bl	8000b68 <__aeabi_d2iz>
 800c51e:	4605      	mov	r5, r0
 800c520:	f7f4 f808 	bl	8000534 <__aeabi_i2d>
 800c524:	4602      	mov	r2, r0
 800c526:	460b      	mov	r3, r1
 800c528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c52c:	f7f3 feb4 	bl	8000298 <__aeabi_dsub>
 800c530:	3530      	adds	r5, #48	@ 0x30
 800c532:	4602      	mov	r2, r0
 800c534:	460b      	mov	r3, r1
 800c536:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c53a:	f806 5b01 	strb.w	r5, [r6], #1
 800c53e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c542:	f7f4 fad3 	bl	8000aec <__aeabi_dcmplt>
 800c546:	2800      	cmp	r0, #0
 800c548:	d171      	bne.n	800c62e <_dtoa_r+0x65e>
 800c54a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c54e:	4911      	ldr	r1, [pc, #68]	@ (800c594 <_dtoa_r+0x5c4>)
 800c550:	2000      	movs	r0, #0
 800c552:	f7f3 fea1 	bl	8000298 <__aeabi_dsub>
 800c556:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c55a:	f7f4 fac7 	bl	8000aec <__aeabi_dcmplt>
 800c55e:	2800      	cmp	r0, #0
 800c560:	f040 8095 	bne.w	800c68e <_dtoa_r+0x6be>
 800c564:	42a6      	cmp	r6, r4
 800c566:	f43f af50 	beq.w	800c40a <_dtoa_r+0x43a>
 800c56a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c56e:	4b0a      	ldr	r3, [pc, #40]	@ (800c598 <_dtoa_r+0x5c8>)
 800c570:	2200      	movs	r2, #0
 800c572:	f7f4 f849 	bl	8000608 <__aeabi_dmul>
 800c576:	4b08      	ldr	r3, [pc, #32]	@ (800c598 <_dtoa_r+0x5c8>)
 800c578:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c57c:	2200      	movs	r2, #0
 800c57e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c582:	f7f4 f841 	bl	8000608 <__aeabi_dmul>
 800c586:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c58a:	e7c4      	b.n	800c516 <_dtoa_r+0x546>
 800c58c:	0800e638 	.word	0x0800e638
 800c590:	0800e610 	.word	0x0800e610
 800c594:	3ff00000 	.word	0x3ff00000
 800c598:	40240000 	.word	0x40240000
 800c59c:	401c0000 	.word	0x401c0000
 800c5a0:	40140000 	.word	0x40140000
 800c5a4:	3fe00000 	.word	0x3fe00000
 800c5a8:	4631      	mov	r1, r6
 800c5aa:	4628      	mov	r0, r5
 800c5ac:	f7f4 f82c 	bl	8000608 <__aeabi_dmul>
 800c5b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c5b4:	9415      	str	r4, [sp, #84]	@ 0x54
 800c5b6:	4656      	mov	r6, sl
 800c5b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5bc:	f7f4 fad4 	bl	8000b68 <__aeabi_d2iz>
 800c5c0:	4605      	mov	r5, r0
 800c5c2:	f7f3 ffb7 	bl	8000534 <__aeabi_i2d>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5ce:	f7f3 fe63 	bl	8000298 <__aeabi_dsub>
 800c5d2:	3530      	adds	r5, #48	@ 0x30
 800c5d4:	f806 5b01 	strb.w	r5, [r6], #1
 800c5d8:	4602      	mov	r2, r0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	42a6      	cmp	r6, r4
 800c5de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c5e2:	f04f 0200 	mov.w	r2, #0
 800c5e6:	d124      	bne.n	800c632 <_dtoa_r+0x662>
 800c5e8:	4bac      	ldr	r3, [pc, #688]	@ (800c89c <_dtoa_r+0x8cc>)
 800c5ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c5ee:	f7f3 fe55 	bl	800029c <__adddf3>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5fa:	f7f4 fa95 	bl	8000b28 <__aeabi_dcmpgt>
 800c5fe:	2800      	cmp	r0, #0
 800c600:	d145      	bne.n	800c68e <_dtoa_r+0x6be>
 800c602:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c606:	49a5      	ldr	r1, [pc, #660]	@ (800c89c <_dtoa_r+0x8cc>)
 800c608:	2000      	movs	r0, #0
 800c60a:	f7f3 fe45 	bl	8000298 <__aeabi_dsub>
 800c60e:	4602      	mov	r2, r0
 800c610:	460b      	mov	r3, r1
 800c612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c616:	f7f4 fa69 	bl	8000aec <__aeabi_dcmplt>
 800c61a:	2800      	cmp	r0, #0
 800c61c:	f43f aef5 	beq.w	800c40a <_dtoa_r+0x43a>
 800c620:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c622:	1e73      	subs	r3, r6, #1
 800c624:	9315      	str	r3, [sp, #84]	@ 0x54
 800c626:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c62a:	2b30      	cmp	r3, #48	@ 0x30
 800c62c:	d0f8      	beq.n	800c620 <_dtoa_r+0x650>
 800c62e:	9f04      	ldr	r7, [sp, #16]
 800c630:	e73e      	b.n	800c4b0 <_dtoa_r+0x4e0>
 800c632:	4b9b      	ldr	r3, [pc, #620]	@ (800c8a0 <_dtoa_r+0x8d0>)
 800c634:	f7f3 ffe8 	bl	8000608 <__aeabi_dmul>
 800c638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c63c:	e7bc      	b.n	800c5b8 <_dtoa_r+0x5e8>
 800c63e:	d10c      	bne.n	800c65a <_dtoa_r+0x68a>
 800c640:	4b98      	ldr	r3, [pc, #608]	@ (800c8a4 <_dtoa_r+0x8d4>)
 800c642:	2200      	movs	r2, #0
 800c644:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c648:	f7f3 ffde 	bl	8000608 <__aeabi_dmul>
 800c64c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c650:	f7f4 fa60 	bl	8000b14 <__aeabi_dcmpge>
 800c654:	2800      	cmp	r0, #0
 800c656:	f000 8157 	beq.w	800c908 <_dtoa_r+0x938>
 800c65a:	2400      	movs	r4, #0
 800c65c:	4625      	mov	r5, r4
 800c65e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c660:	43db      	mvns	r3, r3
 800c662:	9304      	str	r3, [sp, #16]
 800c664:	4656      	mov	r6, sl
 800c666:	2700      	movs	r7, #0
 800c668:	4621      	mov	r1, r4
 800c66a:	4658      	mov	r0, fp
 800c66c:	f000 fbb4 	bl	800cdd8 <_Bfree>
 800c670:	2d00      	cmp	r5, #0
 800c672:	d0dc      	beq.n	800c62e <_dtoa_r+0x65e>
 800c674:	b12f      	cbz	r7, 800c682 <_dtoa_r+0x6b2>
 800c676:	42af      	cmp	r7, r5
 800c678:	d003      	beq.n	800c682 <_dtoa_r+0x6b2>
 800c67a:	4639      	mov	r1, r7
 800c67c:	4658      	mov	r0, fp
 800c67e:	f000 fbab 	bl	800cdd8 <_Bfree>
 800c682:	4629      	mov	r1, r5
 800c684:	4658      	mov	r0, fp
 800c686:	f000 fba7 	bl	800cdd8 <_Bfree>
 800c68a:	e7d0      	b.n	800c62e <_dtoa_r+0x65e>
 800c68c:	9704      	str	r7, [sp, #16]
 800c68e:	4633      	mov	r3, r6
 800c690:	461e      	mov	r6, r3
 800c692:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c696:	2a39      	cmp	r2, #57	@ 0x39
 800c698:	d107      	bne.n	800c6aa <_dtoa_r+0x6da>
 800c69a:	459a      	cmp	sl, r3
 800c69c:	d1f8      	bne.n	800c690 <_dtoa_r+0x6c0>
 800c69e:	9a04      	ldr	r2, [sp, #16]
 800c6a0:	3201      	adds	r2, #1
 800c6a2:	9204      	str	r2, [sp, #16]
 800c6a4:	2230      	movs	r2, #48	@ 0x30
 800c6a6:	f88a 2000 	strb.w	r2, [sl]
 800c6aa:	781a      	ldrb	r2, [r3, #0]
 800c6ac:	3201      	adds	r2, #1
 800c6ae:	701a      	strb	r2, [r3, #0]
 800c6b0:	e7bd      	b.n	800c62e <_dtoa_r+0x65e>
 800c6b2:	4b7b      	ldr	r3, [pc, #492]	@ (800c8a0 <_dtoa_r+0x8d0>)
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f7f3 ffa7 	bl	8000608 <__aeabi_dmul>
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	2300      	movs	r3, #0
 800c6be:	4604      	mov	r4, r0
 800c6c0:	460d      	mov	r5, r1
 800c6c2:	f7f4 fa09 	bl	8000ad8 <__aeabi_dcmpeq>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	f43f aebb 	beq.w	800c442 <_dtoa_r+0x472>
 800c6cc:	e6f0      	b.n	800c4b0 <_dtoa_r+0x4e0>
 800c6ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c6d0:	2a00      	cmp	r2, #0
 800c6d2:	f000 80db 	beq.w	800c88c <_dtoa_r+0x8bc>
 800c6d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6d8:	2a01      	cmp	r2, #1
 800c6da:	f300 80bf 	bgt.w	800c85c <_dtoa_r+0x88c>
 800c6de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c6e0:	2a00      	cmp	r2, #0
 800c6e2:	f000 80b7 	beq.w	800c854 <_dtoa_r+0x884>
 800c6e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c6ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c6ec:	4646      	mov	r6, r8
 800c6ee:	9a08      	ldr	r2, [sp, #32]
 800c6f0:	2101      	movs	r1, #1
 800c6f2:	441a      	add	r2, r3
 800c6f4:	4658      	mov	r0, fp
 800c6f6:	4498      	add	r8, r3
 800c6f8:	9208      	str	r2, [sp, #32]
 800c6fa:	f000 fc21 	bl	800cf40 <__i2b>
 800c6fe:	4605      	mov	r5, r0
 800c700:	b15e      	cbz	r6, 800c71a <_dtoa_r+0x74a>
 800c702:	9b08      	ldr	r3, [sp, #32]
 800c704:	2b00      	cmp	r3, #0
 800c706:	dd08      	ble.n	800c71a <_dtoa_r+0x74a>
 800c708:	42b3      	cmp	r3, r6
 800c70a:	9a08      	ldr	r2, [sp, #32]
 800c70c:	bfa8      	it	ge
 800c70e:	4633      	movge	r3, r6
 800c710:	eba8 0803 	sub.w	r8, r8, r3
 800c714:	1af6      	subs	r6, r6, r3
 800c716:	1ad3      	subs	r3, r2, r3
 800c718:	9308      	str	r3, [sp, #32]
 800c71a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c71c:	b1f3      	cbz	r3, 800c75c <_dtoa_r+0x78c>
 800c71e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c720:	2b00      	cmp	r3, #0
 800c722:	f000 80b7 	beq.w	800c894 <_dtoa_r+0x8c4>
 800c726:	b18c      	cbz	r4, 800c74c <_dtoa_r+0x77c>
 800c728:	4629      	mov	r1, r5
 800c72a:	4622      	mov	r2, r4
 800c72c:	4658      	mov	r0, fp
 800c72e:	f000 fcc7 	bl	800d0c0 <__pow5mult>
 800c732:	464a      	mov	r2, r9
 800c734:	4601      	mov	r1, r0
 800c736:	4605      	mov	r5, r0
 800c738:	4658      	mov	r0, fp
 800c73a:	f000 fc17 	bl	800cf6c <__multiply>
 800c73e:	4649      	mov	r1, r9
 800c740:	9004      	str	r0, [sp, #16]
 800c742:	4658      	mov	r0, fp
 800c744:	f000 fb48 	bl	800cdd8 <_Bfree>
 800c748:	9b04      	ldr	r3, [sp, #16]
 800c74a:	4699      	mov	r9, r3
 800c74c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c74e:	1b1a      	subs	r2, r3, r4
 800c750:	d004      	beq.n	800c75c <_dtoa_r+0x78c>
 800c752:	4649      	mov	r1, r9
 800c754:	4658      	mov	r0, fp
 800c756:	f000 fcb3 	bl	800d0c0 <__pow5mult>
 800c75a:	4681      	mov	r9, r0
 800c75c:	2101      	movs	r1, #1
 800c75e:	4658      	mov	r0, fp
 800c760:	f000 fbee 	bl	800cf40 <__i2b>
 800c764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c766:	4604      	mov	r4, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f000 81cf 	beq.w	800cb0c <_dtoa_r+0xb3c>
 800c76e:	461a      	mov	r2, r3
 800c770:	4601      	mov	r1, r0
 800c772:	4658      	mov	r0, fp
 800c774:	f000 fca4 	bl	800d0c0 <__pow5mult>
 800c778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	4604      	mov	r4, r0
 800c77e:	f300 8095 	bgt.w	800c8ac <_dtoa_r+0x8dc>
 800c782:	9b02      	ldr	r3, [sp, #8]
 800c784:	2b00      	cmp	r3, #0
 800c786:	f040 8087 	bne.w	800c898 <_dtoa_r+0x8c8>
 800c78a:	9b03      	ldr	r3, [sp, #12]
 800c78c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c790:	2b00      	cmp	r3, #0
 800c792:	f040 8089 	bne.w	800c8a8 <_dtoa_r+0x8d8>
 800c796:	9b03      	ldr	r3, [sp, #12]
 800c798:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c79c:	0d1b      	lsrs	r3, r3, #20
 800c79e:	051b      	lsls	r3, r3, #20
 800c7a0:	b12b      	cbz	r3, 800c7ae <_dtoa_r+0x7de>
 800c7a2:	9b08      	ldr	r3, [sp, #32]
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	9308      	str	r3, [sp, #32]
 800c7a8:	f108 0801 	add.w	r8, r8, #1
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	f000 81b0 	beq.w	800cb18 <_dtoa_r+0xb48>
 800c7b8:	6923      	ldr	r3, [r4, #16]
 800c7ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c7be:	6918      	ldr	r0, [r3, #16]
 800c7c0:	f000 fb72 	bl	800cea8 <__hi0bits>
 800c7c4:	f1c0 0020 	rsb	r0, r0, #32
 800c7c8:	9b08      	ldr	r3, [sp, #32]
 800c7ca:	4418      	add	r0, r3
 800c7cc:	f010 001f 	ands.w	r0, r0, #31
 800c7d0:	d077      	beq.n	800c8c2 <_dtoa_r+0x8f2>
 800c7d2:	f1c0 0320 	rsb	r3, r0, #32
 800c7d6:	2b04      	cmp	r3, #4
 800c7d8:	dd6b      	ble.n	800c8b2 <_dtoa_r+0x8e2>
 800c7da:	9b08      	ldr	r3, [sp, #32]
 800c7dc:	f1c0 001c 	rsb	r0, r0, #28
 800c7e0:	4403      	add	r3, r0
 800c7e2:	4480      	add	r8, r0
 800c7e4:	4406      	add	r6, r0
 800c7e6:	9308      	str	r3, [sp, #32]
 800c7e8:	f1b8 0f00 	cmp.w	r8, #0
 800c7ec:	dd05      	ble.n	800c7fa <_dtoa_r+0x82a>
 800c7ee:	4649      	mov	r1, r9
 800c7f0:	4642      	mov	r2, r8
 800c7f2:	4658      	mov	r0, fp
 800c7f4:	f000 fcbe 	bl	800d174 <__lshift>
 800c7f8:	4681      	mov	r9, r0
 800c7fa:	9b08      	ldr	r3, [sp, #32]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	dd05      	ble.n	800c80c <_dtoa_r+0x83c>
 800c800:	4621      	mov	r1, r4
 800c802:	461a      	mov	r2, r3
 800c804:	4658      	mov	r0, fp
 800c806:	f000 fcb5 	bl	800d174 <__lshift>
 800c80a:	4604      	mov	r4, r0
 800c80c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d059      	beq.n	800c8c6 <_dtoa_r+0x8f6>
 800c812:	4621      	mov	r1, r4
 800c814:	4648      	mov	r0, r9
 800c816:	f000 fd19 	bl	800d24c <__mcmp>
 800c81a:	2800      	cmp	r0, #0
 800c81c:	da53      	bge.n	800c8c6 <_dtoa_r+0x8f6>
 800c81e:	1e7b      	subs	r3, r7, #1
 800c820:	9304      	str	r3, [sp, #16]
 800c822:	4649      	mov	r1, r9
 800c824:	2300      	movs	r3, #0
 800c826:	220a      	movs	r2, #10
 800c828:	4658      	mov	r0, fp
 800c82a:	f000 faf7 	bl	800ce1c <__multadd>
 800c82e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c830:	4681      	mov	r9, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	f000 8172 	beq.w	800cb1c <_dtoa_r+0xb4c>
 800c838:	2300      	movs	r3, #0
 800c83a:	4629      	mov	r1, r5
 800c83c:	220a      	movs	r2, #10
 800c83e:	4658      	mov	r0, fp
 800c840:	f000 faec 	bl	800ce1c <__multadd>
 800c844:	9b00      	ldr	r3, [sp, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	4605      	mov	r5, r0
 800c84a:	dc67      	bgt.n	800c91c <_dtoa_r+0x94c>
 800c84c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c84e:	2b02      	cmp	r3, #2
 800c850:	dc41      	bgt.n	800c8d6 <_dtoa_r+0x906>
 800c852:	e063      	b.n	800c91c <_dtoa_r+0x94c>
 800c854:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c856:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c85a:	e746      	b.n	800c6ea <_dtoa_r+0x71a>
 800c85c:	9b07      	ldr	r3, [sp, #28]
 800c85e:	1e5c      	subs	r4, r3, #1
 800c860:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c862:	42a3      	cmp	r3, r4
 800c864:	bfbf      	itttt	lt
 800c866:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c868:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c86a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c86c:	1ae3      	sublt	r3, r4, r3
 800c86e:	bfb4      	ite	lt
 800c870:	18d2      	addlt	r2, r2, r3
 800c872:	1b1c      	subge	r4, r3, r4
 800c874:	9b07      	ldr	r3, [sp, #28]
 800c876:	bfbc      	itt	lt
 800c878:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c87a:	2400      	movlt	r4, #0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	bfb5      	itete	lt
 800c880:	eba8 0603 	sublt.w	r6, r8, r3
 800c884:	9b07      	ldrge	r3, [sp, #28]
 800c886:	2300      	movlt	r3, #0
 800c888:	4646      	movge	r6, r8
 800c88a:	e730      	b.n	800c6ee <_dtoa_r+0x71e>
 800c88c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c88e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c890:	4646      	mov	r6, r8
 800c892:	e735      	b.n	800c700 <_dtoa_r+0x730>
 800c894:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c896:	e75c      	b.n	800c752 <_dtoa_r+0x782>
 800c898:	2300      	movs	r3, #0
 800c89a:	e788      	b.n	800c7ae <_dtoa_r+0x7de>
 800c89c:	3fe00000 	.word	0x3fe00000
 800c8a0:	40240000 	.word	0x40240000
 800c8a4:	40140000 	.word	0x40140000
 800c8a8:	9b02      	ldr	r3, [sp, #8]
 800c8aa:	e780      	b.n	800c7ae <_dtoa_r+0x7de>
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8b0:	e782      	b.n	800c7b8 <_dtoa_r+0x7e8>
 800c8b2:	d099      	beq.n	800c7e8 <_dtoa_r+0x818>
 800c8b4:	9a08      	ldr	r2, [sp, #32]
 800c8b6:	331c      	adds	r3, #28
 800c8b8:	441a      	add	r2, r3
 800c8ba:	4498      	add	r8, r3
 800c8bc:	441e      	add	r6, r3
 800c8be:	9208      	str	r2, [sp, #32]
 800c8c0:	e792      	b.n	800c7e8 <_dtoa_r+0x818>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	e7f6      	b.n	800c8b4 <_dtoa_r+0x8e4>
 800c8c6:	9b07      	ldr	r3, [sp, #28]
 800c8c8:	9704      	str	r7, [sp, #16]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	dc20      	bgt.n	800c910 <_dtoa_r+0x940>
 800c8ce:	9300      	str	r3, [sp, #0]
 800c8d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	dd1e      	ble.n	800c914 <_dtoa_r+0x944>
 800c8d6:	9b00      	ldr	r3, [sp, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	f47f aec0 	bne.w	800c65e <_dtoa_r+0x68e>
 800c8de:	4621      	mov	r1, r4
 800c8e0:	2205      	movs	r2, #5
 800c8e2:	4658      	mov	r0, fp
 800c8e4:	f000 fa9a 	bl	800ce1c <__multadd>
 800c8e8:	4601      	mov	r1, r0
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	4648      	mov	r0, r9
 800c8ee:	f000 fcad 	bl	800d24c <__mcmp>
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	f77f aeb3 	ble.w	800c65e <_dtoa_r+0x68e>
 800c8f8:	4656      	mov	r6, sl
 800c8fa:	2331      	movs	r3, #49	@ 0x31
 800c8fc:	f806 3b01 	strb.w	r3, [r6], #1
 800c900:	9b04      	ldr	r3, [sp, #16]
 800c902:	3301      	adds	r3, #1
 800c904:	9304      	str	r3, [sp, #16]
 800c906:	e6ae      	b.n	800c666 <_dtoa_r+0x696>
 800c908:	9c07      	ldr	r4, [sp, #28]
 800c90a:	9704      	str	r7, [sp, #16]
 800c90c:	4625      	mov	r5, r4
 800c90e:	e7f3      	b.n	800c8f8 <_dtoa_r+0x928>
 800c910:	9b07      	ldr	r3, [sp, #28]
 800c912:	9300      	str	r3, [sp, #0]
 800c914:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c916:	2b00      	cmp	r3, #0
 800c918:	f000 8104 	beq.w	800cb24 <_dtoa_r+0xb54>
 800c91c:	2e00      	cmp	r6, #0
 800c91e:	dd05      	ble.n	800c92c <_dtoa_r+0x95c>
 800c920:	4629      	mov	r1, r5
 800c922:	4632      	mov	r2, r6
 800c924:	4658      	mov	r0, fp
 800c926:	f000 fc25 	bl	800d174 <__lshift>
 800c92a:	4605      	mov	r5, r0
 800c92c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d05a      	beq.n	800c9e8 <_dtoa_r+0xa18>
 800c932:	6869      	ldr	r1, [r5, #4]
 800c934:	4658      	mov	r0, fp
 800c936:	f000 fa0f 	bl	800cd58 <_Balloc>
 800c93a:	4606      	mov	r6, r0
 800c93c:	b928      	cbnz	r0, 800c94a <_dtoa_r+0x97a>
 800c93e:	4b84      	ldr	r3, [pc, #528]	@ (800cb50 <_dtoa_r+0xb80>)
 800c940:	4602      	mov	r2, r0
 800c942:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c946:	f7ff bb5a 	b.w	800bffe <_dtoa_r+0x2e>
 800c94a:	692a      	ldr	r2, [r5, #16]
 800c94c:	3202      	adds	r2, #2
 800c94e:	0092      	lsls	r2, r2, #2
 800c950:	f105 010c 	add.w	r1, r5, #12
 800c954:	300c      	adds	r0, #12
 800c956:	f000 ffaf 	bl	800d8b8 <memcpy>
 800c95a:	2201      	movs	r2, #1
 800c95c:	4631      	mov	r1, r6
 800c95e:	4658      	mov	r0, fp
 800c960:	f000 fc08 	bl	800d174 <__lshift>
 800c964:	f10a 0301 	add.w	r3, sl, #1
 800c968:	9307      	str	r3, [sp, #28]
 800c96a:	9b00      	ldr	r3, [sp, #0]
 800c96c:	4453      	add	r3, sl
 800c96e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c970:	9b02      	ldr	r3, [sp, #8]
 800c972:	f003 0301 	and.w	r3, r3, #1
 800c976:	462f      	mov	r7, r5
 800c978:	930a      	str	r3, [sp, #40]	@ 0x28
 800c97a:	4605      	mov	r5, r0
 800c97c:	9b07      	ldr	r3, [sp, #28]
 800c97e:	4621      	mov	r1, r4
 800c980:	3b01      	subs	r3, #1
 800c982:	4648      	mov	r0, r9
 800c984:	9300      	str	r3, [sp, #0]
 800c986:	f7ff fa9a 	bl	800bebe <quorem>
 800c98a:	4639      	mov	r1, r7
 800c98c:	9002      	str	r0, [sp, #8]
 800c98e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c992:	4648      	mov	r0, r9
 800c994:	f000 fc5a 	bl	800d24c <__mcmp>
 800c998:	462a      	mov	r2, r5
 800c99a:	9008      	str	r0, [sp, #32]
 800c99c:	4621      	mov	r1, r4
 800c99e:	4658      	mov	r0, fp
 800c9a0:	f000 fc70 	bl	800d284 <__mdiff>
 800c9a4:	68c2      	ldr	r2, [r0, #12]
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	bb02      	cbnz	r2, 800c9ec <_dtoa_r+0xa1c>
 800c9aa:	4601      	mov	r1, r0
 800c9ac:	4648      	mov	r0, r9
 800c9ae:	f000 fc4d 	bl	800d24c <__mcmp>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	4631      	mov	r1, r6
 800c9b6:	4658      	mov	r0, fp
 800c9b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c9ba:	f000 fa0d 	bl	800cdd8 <_Bfree>
 800c9be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9c2:	9e07      	ldr	r6, [sp, #28]
 800c9c4:	ea43 0102 	orr.w	r1, r3, r2
 800c9c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9ca:	4319      	orrs	r1, r3
 800c9cc:	d110      	bne.n	800c9f0 <_dtoa_r+0xa20>
 800c9ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c9d2:	d029      	beq.n	800ca28 <_dtoa_r+0xa58>
 800c9d4:	9b08      	ldr	r3, [sp, #32]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	dd02      	ble.n	800c9e0 <_dtoa_r+0xa10>
 800c9da:	9b02      	ldr	r3, [sp, #8]
 800c9dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c9e0:	9b00      	ldr	r3, [sp, #0]
 800c9e2:	f883 8000 	strb.w	r8, [r3]
 800c9e6:	e63f      	b.n	800c668 <_dtoa_r+0x698>
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	e7bb      	b.n	800c964 <_dtoa_r+0x994>
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	e7e1      	b.n	800c9b4 <_dtoa_r+0x9e4>
 800c9f0:	9b08      	ldr	r3, [sp, #32]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	db04      	blt.n	800ca00 <_dtoa_r+0xa30>
 800c9f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c9f8:	430b      	orrs	r3, r1
 800c9fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c9fc:	430b      	orrs	r3, r1
 800c9fe:	d120      	bne.n	800ca42 <_dtoa_r+0xa72>
 800ca00:	2a00      	cmp	r2, #0
 800ca02:	dded      	ble.n	800c9e0 <_dtoa_r+0xa10>
 800ca04:	4649      	mov	r1, r9
 800ca06:	2201      	movs	r2, #1
 800ca08:	4658      	mov	r0, fp
 800ca0a:	f000 fbb3 	bl	800d174 <__lshift>
 800ca0e:	4621      	mov	r1, r4
 800ca10:	4681      	mov	r9, r0
 800ca12:	f000 fc1b 	bl	800d24c <__mcmp>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	dc03      	bgt.n	800ca22 <_dtoa_r+0xa52>
 800ca1a:	d1e1      	bne.n	800c9e0 <_dtoa_r+0xa10>
 800ca1c:	f018 0f01 	tst.w	r8, #1
 800ca20:	d0de      	beq.n	800c9e0 <_dtoa_r+0xa10>
 800ca22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ca26:	d1d8      	bne.n	800c9da <_dtoa_r+0xa0a>
 800ca28:	9a00      	ldr	r2, [sp, #0]
 800ca2a:	2339      	movs	r3, #57	@ 0x39
 800ca2c:	7013      	strb	r3, [r2, #0]
 800ca2e:	4633      	mov	r3, r6
 800ca30:	461e      	mov	r6, r3
 800ca32:	3b01      	subs	r3, #1
 800ca34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ca38:	2a39      	cmp	r2, #57	@ 0x39
 800ca3a:	d052      	beq.n	800cae2 <_dtoa_r+0xb12>
 800ca3c:	3201      	adds	r2, #1
 800ca3e:	701a      	strb	r2, [r3, #0]
 800ca40:	e612      	b.n	800c668 <_dtoa_r+0x698>
 800ca42:	2a00      	cmp	r2, #0
 800ca44:	dd07      	ble.n	800ca56 <_dtoa_r+0xa86>
 800ca46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ca4a:	d0ed      	beq.n	800ca28 <_dtoa_r+0xa58>
 800ca4c:	9a00      	ldr	r2, [sp, #0]
 800ca4e:	f108 0301 	add.w	r3, r8, #1
 800ca52:	7013      	strb	r3, [r2, #0]
 800ca54:	e608      	b.n	800c668 <_dtoa_r+0x698>
 800ca56:	9b07      	ldr	r3, [sp, #28]
 800ca58:	9a07      	ldr	r2, [sp, #28]
 800ca5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ca5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d028      	beq.n	800cab6 <_dtoa_r+0xae6>
 800ca64:	4649      	mov	r1, r9
 800ca66:	2300      	movs	r3, #0
 800ca68:	220a      	movs	r2, #10
 800ca6a:	4658      	mov	r0, fp
 800ca6c:	f000 f9d6 	bl	800ce1c <__multadd>
 800ca70:	42af      	cmp	r7, r5
 800ca72:	4681      	mov	r9, r0
 800ca74:	f04f 0300 	mov.w	r3, #0
 800ca78:	f04f 020a 	mov.w	r2, #10
 800ca7c:	4639      	mov	r1, r7
 800ca7e:	4658      	mov	r0, fp
 800ca80:	d107      	bne.n	800ca92 <_dtoa_r+0xac2>
 800ca82:	f000 f9cb 	bl	800ce1c <__multadd>
 800ca86:	4607      	mov	r7, r0
 800ca88:	4605      	mov	r5, r0
 800ca8a:	9b07      	ldr	r3, [sp, #28]
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	9307      	str	r3, [sp, #28]
 800ca90:	e774      	b.n	800c97c <_dtoa_r+0x9ac>
 800ca92:	f000 f9c3 	bl	800ce1c <__multadd>
 800ca96:	4629      	mov	r1, r5
 800ca98:	4607      	mov	r7, r0
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	220a      	movs	r2, #10
 800ca9e:	4658      	mov	r0, fp
 800caa0:	f000 f9bc 	bl	800ce1c <__multadd>
 800caa4:	4605      	mov	r5, r0
 800caa6:	e7f0      	b.n	800ca8a <_dtoa_r+0xaba>
 800caa8:	9b00      	ldr	r3, [sp, #0]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	bfcc      	ite	gt
 800caae:	461e      	movgt	r6, r3
 800cab0:	2601      	movle	r6, #1
 800cab2:	4456      	add	r6, sl
 800cab4:	2700      	movs	r7, #0
 800cab6:	4649      	mov	r1, r9
 800cab8:	2201      	movs	r2, #1
 800caba:	4658      	mov	r0, fp
 800cabc:	f000 fb5a 	bl	800d174 <__lshift>
 800cac0:	4621      	mov	r1, r4
 800cac2:	4681      	mov	r9, r0
 800cac4:	f000 fbc2 	bl	800d24c <__mcmp>
 800cac8:	2800      	cmp	r0, #0
 800caca:	dcb0      	bgt.n	800ca2e <_dtoa_r+0xa5e>
 800cacc:	d102      	bne.n	800cad4 <_dtoa_r+0xb04>
 800cace:	f018 0f01 	tst.w	r8, #1
 800cad2:	d1ac      	bne.n	800ca2e <_dtoa_r+0xa5e>
 800cad4:	4633      	mov	r3, r6
 800cad6:	461e      	mov	r6, r3
 800cad8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cadc:	2a30      	cmp	r2, #48	@ 0x30
 800cade:	d0fa      	beq.n	800cad6 <_dtoa_r+0xb06>
 800cae0:	e5c2      	b.n	800c668 <_dtoa_r+0x698>
 800cae2:	459a      	cmp	sl, r3
 800cae4:	d1a4      	bne.n	800ca30 <_dtoa_r+0xa60>
 800cae6:	9b04      	ldr	r3, [sp, #16]
 800cae8:	3301      	adds	r3, #1
 800caea:	9304      	str	r3, [sp, #16]
 800caec:	2331      	movs	r3, #49	@ 0x31
 800caee:	f88a 3000 	strb.w	r3, [sl]
 800caf2:	e5b9      	b.n	800c668 <_dtoa_r+0x698>
 800caf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800caf6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cb54 <_dtoa_r+0xb84>
 800cafa:	b11b      	cbz	r3, 800cb04 <_dtoa_r+0xb34>
 800cafc:	f10a 0308 	add.w	r3, sl, #8
 800cb00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cb02:	6013      	str	r3, [r2, #0]
 800cb04:	4650      	mov	r0, sl
 800cb06:	b019      	add	sp, #100	@ 0x64
 800cb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	f77f ae37 	ble.w	800c782 <_dtoa_r+0x7b2>
 800cb14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb16:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb18:	2001      	movs	r0, #1
 800cb1a:	e655      	b.n	800c7c8 <_dtoa_r+0x7f8>
 800cb1c:	9b00      	ldr	r3, [sp, #0]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	f77f aed6 	ble.w	800c8d0 <_dtoa_r+0x900>
 800cb24:	4656      	mov	r6, sl
 800cb26:	4621      	mov	r1, r4
 800cb28:	4648      	mov	r0, r9
 800cb2a:	f7ff f9c8 	bl	800bebe <quorem>
 800cb2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cb32:	f806 8b01 	strb.w	r8, [r6], #1
 800cb36:	9b00      	ldr	r3, [sp, #0]
 800cb38:	eba6 020a 	sub.w	r2, r6, sl
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	ddb3      	ble.n	800caa8 <_dtoa_r+0xad8>
 800cb40:	4649      	mov	r1, r9
 800cb42:	2300      	movs	r3, #0
 800cb44:	220a      	movs	r2, #10
 800cb46:	4658      	mov	r0, fp
 800cb48:	f000 f968 	bl	800ce1c <__multadd>
 800cb4c:	4681      	mov	r9, r0
 800cb4e:	e7ea      	b.n	800cb26 <_dtoa_r+0xb56>
 800cb50:	0800e594 	.word	0x0800e594
 800cb54:	0800e518 	.word	0x0800e518

0800cb58 <_free_r>:
 800cb58:	b538      	push	{r3, r4, r5, lr}
 800cb5a:	4605      	mov	r5, r0
 800cb5c:	2900      	cmp	r1, #0
 800cb5e:	d041      	beq.n	800cbe4 <_free_r+0x8c>
 800cb60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb64:	1f0c      	subs	r4, r1, #4
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	bfb8      	it	lt
 800cb6a:	18e4      	addlt	r4, r4, r3
 800cb6c:	f000 f8e8 	bl	800cd40 <__malloc_lock>
 800cb70:	4a1d      	ldr	r2, [pc, #116]	@ (800cbe8 <_free_r+0x90>)
 800cb72:	6813      	ldr	r3, [r2, #0]
 800cb74:	b933      	cbnz	r3, 800cb84 <_free_r+0x2c>
 800cb76:	6063      	str	r3, [r4, #4]
 800cb78:	6014      	str	r4, [r2, #0]
 800cb7a:	4628      	mov	r0, r5
 800cb7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb80:	f000 b8e4 	b.w	800cd4c <__malloc_unlock>
 800cb84:	42a3      	cmp	r3, r4
 800cb86:	d908      	bls.n	800cb9a <_free_r+0x42>
 800cb88:	6820      	ldr	r0, [r4, #0]
 800cb8a:	1821      	adds	r1, r4, r0
 800cb8c:	428b      	cmp	r3, r1
 800cb8e:	bf01      	itttt	eq
 800cb90:	6819      	ldreq	r1, [r3, #0]
 800cb92:	685b      	ldreq	r3, [r3, #4]
 800cb94:	1809      	addeq	r1, r1, r0
 800cb96:	6021      	streq	r1, [r4, #0]
 800cb98:	e7ed      	b.n	800cb76 <_free_r+0x1e>
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	b10b      	cbz	r3, 800cba4 <_free_r+0x4c>
 800cba0:	42a3      	cmp	r3, r4
 800cba2:	d9fa      	bls.n	800cb9a <_free_r+0x42>
 800cba4:	6811      	ldr	r1, [r2, #0]
 800cba6:	1850      	adds	r0, r2, r1
 800cba8:	42a0      	cmp	r0, r4
 800cbaa:	d10b      	bne.n	800cbc4 <_free_r+0x6c>
 800cbac:	6820      	ldr	r0, [r4, #0]
 800cbae:	4401      	add	r1, r0
 800cbb0:	1850      	adds	r0, r2, r1
 800cbb2:	4283      	cmp	r3, r0
 800cbb4:	6011      	str	r1, [r2, #0]
 800cbb6:	d1e0      	bne.n	800cb7a <_free_r+0x22>
 800cbb8:	6818      	ldr	r0, [r3, #0]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	6053      	str	r3, [r2, #4]
 800cbbe:	4408      	add	r0, r1
 800cbc0:	6010      	str	r0, [r2, #0]
 800cbc2:	e7da      	b.n	800cb7a <_free_r+0x22>
 800cbc4:	d902      	bls.n	800cbcc <_free_r+0x74>
 800cbc6:	230c      	movs	r3, #12
 800cbc8:	602b      	str	r3, [r5, #0]
 800cbca:	e7d6      	b.n	800cb7a <_free_r+0x22>
 800cbcc:	6820      	ldr	r0, [r4, #0]
 800cbce:	1821      	adds	r1, r4, r0
 800cbd0:	428b      	cmp	r3, r1
 800cbd2:	bf04      	itt	eq
 800cbd4:	6819      	ldreq	r1, [r3, #0]
 800cbd6:	685b      	ldreq	r3, [r3, #4]
 800cbd8:	6063      	str	r3, [r4, #4]
 800cbda:	bf04      	itt	eq
 800cbdc:	1809      	addeq	r1, r1, r0
 800cbde:	6021      	streq	r1, [r4, #0]
 800cbe0:	6054      	str	r4, [r2, #4]
 800cbe2:	e7ca      	b.n	800cb7a <_free_r+0x22>
 800cbe4:	bd38      	pop	{r3, r4, r5, pc}
 800cbe6:	bf00      	nop
 800cbe8:	20002154 	.word	0x20002154

0800cbec <malloc>:
 800cbec:	4b02      	ldr	r3, [pc, #8]	@ (800cbf8 <malloc+0xc>)
 800cbee:	4601      	mov	r1, r0
 800cbf0:	6818      	ldr	r0, [r3, #0]
 800cbf2:	f000 b825 	b.w	800cc40 <_malloc_r>
 800cbf6:	bf00      	nop
 800cbf8:	20000108 	.word	0x20000108

0800cbfc <sbrk_aligned>:
 800cbfc:	b570      	push	{r4, r5, r6, lr}
 800cbfe:	4e0f      	ldr	r6, [pc, #60]	@ (800cc3c <sbrk_aligned+0x40>)
 800cc00:	460c      	mov	r4, r1
 800cc02:	6831      	ldr	r1, [r6, #0]
 800cc04:	4605      	mov	r5, r0
 800cc06:	b911      	cbnz	r1, 800cc0e <sbrk_aligned+0x12>
 800cc08:	f000 fe46 	bl	800d898 <_sbrk_r>
 800cc0c:	6030      	str	r0, [r6, #0]
 800cc0e:	4621      	mov	r1, r4
 800cc10:	4628      	mov	r0, r5
 800cc12:	f000 fe41 	bl	800d898 <_sbrk_r>
 800cc16:	1c43      	adds	r3, r0, #1
 800cc18:	d103      	bne.n	800cc22 <sbrk_aligned+0x26>
 800cc1a:	f04f 34ff 	mov.w	r4, #4294967295
 800cc1e:	4620      	mov	r0, r4
 800cc20:	bd70      	pop	{r4, r5, r6, pc}
 800cc22:	1cc4      	adds	r4, r0, #3
 800cc24:	f024 0403 	bic.w	r4, r4, #3
 800cc28:	42a0      	cmp	r0, r4
 800cc2a:	d0f8      	beq.n	800cc1e <sbrk_aligned+0x22>
 800cc2c:	1a21      	subs	r1, r4, r0
 800cc2e:	4628      	mov	r0, r5
 800cc30:	f000 fe32 	bl	800d898 <_sbrk_r>
 800cc34:	3001      	adds	r0, #1
 800cc36:	d1f2      	bne.n	800cc1e <sbrk_aligned+0x22>
 800cc38:	e7ef      	b.n	800cc1a <sbrk_aligned+0x1e>
 800cc3a:	bf00      	nop
 800cc3c:	20002150 	.word	0x20002150

0800cc40 <_malloc_r>:
 800cc40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc44:	1ccd      	adds	r5, r1, #3
 800cc46:	f025 0503 	bic.w	r5, r5, #3
 800cc4a:	3508      	adds	r5, #8
 800cc4c:	2d0c      	cmp	r5, #12
 800cc4e:	bf38      	it	cc
 800cc50:	250c      	movcc	r5, #12
 800cc52:	2d00      	cmp	r5, #0
 800cc54:	4606      	mov	r6, r0
 800cc56:	db01      	blt.n	800cc5c <_malloc_r+0x1c>
 800cc58:	42a9      	cmp	r1, r5
 800cc5a:	d904      	bls.n	800cc66 <_malloc_r+0x26>
 800cc5c:	230c      	movs	r3, #12
 800cc5e:	6033      	str	r3, [r6, #0]
 800cc60:	2000      	movs	r0, #0
 800cc62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cd3c <_malloc_r+0xfc>
 800cc6a:	f000 f869 	bl	800cd40 <__malloc_lock>
 800cc6e:	f8d8 3000 	ldr.w	r3, [r8]
 800cc72:	461c      	mov	r4, r3
 800cc74:	bb44      	cbnz	r4, 800ccc8 <_malloc_r+0x88>
 800cc76:	4629      	mov	r1, r5
 800cc78:	4630      	mov	r0, r6
 800cc7a:	f7ff ffbf 	bl	800cbfc <sbrk_aligned>
 800cc7e:	1c43      	adds	r3, r0, #1
 800cc80:	4604      	mov	r4, r0
 800cc82:	d158      	bne.n	800cd36 <_malloc_r+0xf6>
 800cc84:	f8d8 4000 	ldr.w	r4, [r8]
 800cc88:	4627      	mov	r7, r4
 800cc8a:	2f00      	cmp	r7, #0
 800cc8c:	d143      	bne.n	800cd16 <_malloc_r+0xd6>
 800cc8e:	2c00      	cmp	r4, #0
 800cc90:	d04b      	beq.n	800cd2a <_malloc_r+0xea>
 800cc92:	6823      	ldr	r3, [r4, #0]
 800cc94:	4639      	mov	r1, r7
 800cc96:	4630      	mov	r0, r6
 800cc98:	eb04 0903 	add.w	r9, r4, r3
 800cc9c:	f000 fdfc 	bl	800d898 <_sbrk_r>
 800cca0:	4581      	cmp	r9, r0
 800cca2:	d142      	bne.n	800cd2a <_malloc_r+0xea>
 800cca4:	6821      	ldr	r1, [r4, #0]
 800cca6:	1a6d      	subs	r5, r5, r1
 800cca8:	4629      	mov	r1, r5
 800ccaa:	4630      	mov	r0, r6
 800ccac:	f7ff ffa6 	bl	800cbfc <sbrk_aligned>
 800ccb0:	3001      	adds	r0, #1
 800ccb2:	d03a      	beq.n	800cd2a <_malloc_r+0xea>
 800ccb4:	6823      	ldr	r3, [r4, #0]
 800ccb6:	442b      	add	r3, r5
 800ccb8:	6023      	str	r3, [r4, #0]
 800ccba:	f8d8 3000 	ldr.w	r3, [r8]
 800ccbe:	685a      	ldr	r2, [r3, #4]
 800ccc0:	bb62      	cbnz	r2, 800cd1c <_malloc_r+0xdc>
 800ccc2:	f8c8 7000 	str.w	r7, [r8]
 800ccc6:	e00f      	b.n	800cce8 <_malloc_r+0xa8>
 800ccc8:	6822      	ldr	r2, [r4, #0]
 800ccca:	1b52      	subs	r2, r2, r5
 800cccc:	d420      	bmi.n	800cd10 <_malloc_r+0xd0>
 800ccce:	2a0b      	cmp	r2, #11
 800ccd0:	d917      	bls.n	800cd02 <_malloc_r+0xc2>
 800ccd2:	1961      	adds	r1, r4, r5
 800ccd4:	42a3      	cmp	r3, r4
 800ccd6:	6025      	str	r5, [r4, #0]
 800ccd8:	bf18      	it	ne
 800ccda:	6059      	strne	r1, [r3, #4]
 800ccdc:	6863      	ldr	r3, [r4, #4]
 800ccde:	bf08      	it	eq
 800cce0:	f8c8 1000 	streq.w	r1, [r8]
 800cce4:	5162      	str	r2, [r4, r5]
 800cce6:	604b      	str	r3, [r1, #4]
 800cce8:	4630      	mov	r0, r6
 800ccea:	f000 f82f 	bl	800cd4c <__malloc_unlock>
 800ccee:	f104 000b 	add.w	r0, r4, #11
 800ccf2:	1d23      	adds	r3, r4, #4
 800ccf4:	f020 0007 	bic.w	r0, r0, #7
 800ccf8:	1ac2      	subs	r2, r0, r3
 800ccfa:	bf1c      	itt	ne
 800ccfc:	1a1b      	subne	r3, r3, r0
 800ccfe:	50a3      	strne	r3, [r4, r2]
 800cd00:	e7af      	b.n	800cc62 <_malloc_r+0x22>
 800cd02:	6862      	ldr	r2, [r4, #4]
 800cd04:	42a3      	cmp	r3, r4
 800cd06:	bf0c      	ite	eq
 800cd08:	f8c8 2000 	streq.w	r2, [r8]
 800cd0c:	605a      	strne	r2, [r3, #4]
 800cd0e:	e7eb      	b.n	800cce8 <_malloc_r+0xa8>
 800cd10:	4623      	mov	r3, r4
 800cd12:	6864      	ldr	r4, [r4, #4]
 800cd14:	e7ae      	b.n	800cc74 <_malloc_r+0x34>
 800cd16:	463c      	mov	r4, r7
 800cd18:	687f      	ldr	r7, [r7, #4]
 800cd1a:	e7b6      	b.n	800cc8a <_malloc_r+0x4a>
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	42a3      	cmp	r3, r4
 800cd22:	d1fb      	bne.n	800cd1c <_malloc_r+0xdc>
 800cd24:	2300      	movs	r3, #0
 800cd26:	6053      	str	r3, [r2, #4]
 800cd28:	e7de      	b.n	800cce8 <_malloc_r+0xa8>
 800cd2a:	230c      	movs	r3, #12
 800cd2c:	6033      	str	r3, [r6, #0]
 800cd2e:	4630      	mov	r0, r6
 800cd30:	f000 f80c 	bl	800cd4c <__malloc_unlock>
 800cd34:	e794      	b.n	800cc60 <_malloc_r+0x20>
 800cd36:	6005      	str	r5, [r0, #0]
 800cd38:	e7d6      	b.n	800cce8 <_malloc_r+0xa8>
 800cd3a:	bf00      	nop
 800cd3c:	20002154 	.word	0x20002154

0800cd40 <__malloc_lock>:
 800cd40:	4801      	ldr	r0, [pc, #4]	@ (800cd48 <__malloc_lock+0x8>)
 800cd42:	f7ff b8ba 	b.w	800beba <__retarget_lock_acquire_recursive>
 800cd46:	bf00      	nop
 800cd48:	2000214c 	.word	0x2000214c

0800cd4c <__malloc_unlock>:
 800cd4c:	4801      	ldr	r0, [pc, #4]	@ (800cd54 <__malloc_unlock+0x8>)
 800cd4e:	f7ff b8b5 	b.w	800bebc <__retarget_lock_release_recursive>
 800cd52:	bf00      	nop
 800cd54:	2000214c 	.word	0x2000214c

0800cd58 <_Balloc>:
 800cd58:	b570      	push	{r4, r5, r6, lr}
 800cd5a:	69c6      	ldr	r6, [r0, #28]
 800cd5c:	4604      	mov	r4, r0
 800cd5e:	460d      	mov	r5, r1
 800cd60:	b976      	cbnz	r6, 800cd80 <_Balloc+0x28>
 800cd62:	2010      	movs	r0, #16
 800cd64:	f7ff ff42 	bl	800cbec <malloc>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	61e0      	str	r0, [r4, #28]
 800cd6c:	b920      	cbnz	r0, 800cd78 <_Balloc+0x20>
 800cd6e:	4b18      	ldr	r3, [pc, #96]	@ (800cdd0 <_Balloc+0x78>)
 800cd70:	4818      	ldr	r0, [pc, #96]	@ (800cdd4 <_Balloc+0x7c>)
 800cd72:	216b      	movs	r1, #107	@ 0x6b
 800cd74:	f000 fdae 	bl	800d8d4 <__assert_func>
 800cd78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd7c:	6006      	str	r6, [r0, #0]
 800cd7e:	60c6      	str	r6, [r0, #12]
 800cd80:	69e6      	ldr	r6, [r4, #28]
 800cd82:	68f3      	ldr	r3, [r6, #12]
 800cd84:	b183      	cbz	r3, 800cda8 <_Balloc+0x50>
 800cd86:	69e3      	ldr	r3, [r4, #28]
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd8e:	b9b8      	cbnz	r0, 800cdc0 <_Balloc+0x68>
 800cd90:	2101      	movs	r1, #1
 800cd92:	fa01 f605 	lsl.w	r6, r1, r5
 800cd96:	1d72      	adds	r2, r6, #5
 800cd98:	0092      	lsls	r2, r2, #2
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f000 fdb8 	bl	800d910 <_calloc_r>
 800cda0:	b160      	cbz	r0, 800cdbc <_Balloc+0x64>
 800cda2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cda6:	e00e      	b.n	800cdc6 <_Balloc+0x6e>
 800cda8:	2221      	movs	r2, #33	@ 0x21
 800cdaa:	2104      	movs	r1, #4
 800cdac:	4620      	mov	r0, r4
 800cdae:	f000 fdaf 	bl	800d910 <_calloc_r>
 800cdb2:	69e3      	ldr	r3, [r4, #28]
 800cdb4:	60f0      	str	r0, [r6, #12]
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d1e4      	bne.n	800cd86 <_Balloc+0x2e>
 800cdbc:	2000      	movs	r0, #0
 800cdbe:	bd70      	pop	{r4, r5, r6, pc}
 800cdc0:	6802      	ldr	r2, [r0, #0]
 800cdc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cdcc:	e7f7      	b.n	800cdbe <_Balloc+0x66>
 800cdce:	bf00      	nop
 800cdd0:	0800e525 	.word	0x0800e525
 800cdd4:	0800e5a5 	.word	0x0800e5a5

0800cdd8 <_Bfree>:
 800cdd8:	b570      	push	{r4, r5, r6, lr}
 800cdda:	69c6      	ldr	r6, [r0, #28]
 800cddc:	4605      	mov	r5, r0
 800cdde:	460c      	mov	r4, r1
 800cde0:	b976      	cbnz	r6, 800ce00 <_Bfree+0x28>
 800cde2:	2010      	movs	r0, #16
 800cde4:	f7ff ff02 	bl	800cbec <malloc>
 800cde8:	4602      	mov	r2, r0
 800cdea:	61e8      	str	r0, [r5, #28]
 800cdec:	b920      	cbnz	r0, 800cdf8 <_Bfree+0x20>
 800cdee:	4b09      	ldr	r3, [pc, #36]	@ (800ce14 <_Bfree+0x3c>)
 800cdf0:	4809      	ldr	r0, [pc, #36]	@ (800ce18 <_Bfree+0x40>)
 800cdf2:	218f      	movs	r1, #143	@ 0x8f
 800cdf4:	f000 fd6e 	bl	800d8d4 <__assert_func>
 800cdf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cdfc:	6006      	str	r6, [r0, #0]
 800cdfe:	60c6      	str	r6, [r0, #12]
 800ce00:	b13c      	cbz	r4, 800ce12 <_Bfree+0x3a>
 800ce02:	69eb      	ldr	r3, [r5, #28]
 800ce04:	6862      	ldr	r2, [r4, #4]
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce0c:	6021      	str	r1, [r4, #0]
 800ce0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce12:	bd70      	pop	{r4, r5, r6, pc}
 800ce14:	0800e525 	.word	0x0800e525
 800ce18:	0800e5a5 	.word	0x0800e5a5

0800ce1c <__multadd>:
 800ce1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce20:	690d      	ldr	r5, [r1, #16]
 800ce22:	4607      	mov	r7, r0
 800ce24:	460c      	mov	r4, r1
 800ce26:	461e      	mov	r6, r3
 800ce28:	f101 0c14 	add.w	ip, r1, #20
 800ce2c:	2000      	movs	r0, #0
 800ce2e:	f8dc 3000 	ldr.w	r3, [ip]
 800ce32:	b299      	uxth	r1, r3
 800ce34:	fb02 6101 	mla	r1, r2, r1, r6
 800ce38:	0c1e      	lsrs	r6, r3, #16
 800ce3a:	0c0b      	lsrs	r3, r1, #16
 800ce3c:	fb02 3306 	mla	r3, r2, r6, r3
 800ce40:	b289      	uxth	r1, r1
 800ce42:	3001      	adds	r0, #1
 800ce44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ce48:	4285      	cmp	r5, r0
 800ce4a:	f84c 1b04 	str.w	r1, [ip], #4
 800ce4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce52:	dcec      	bgt.n	800ce2e <__multadd+0x12>
 800ce54:	b30e      	cbz	r6, 800ce9a <__multadd+0x7e>
 800ce56:	68a3      	ldr	r3, [r4, #8]
 800ce58:	42ab      	cmp	r3, r5
 800ce5a:	dc19      	bgt.n	800ce90 <__multadd+0x74>
 800ce5c:	6861      	ldr	r1, [r4, #4]
 800ce5e:	4638      	mov	r0, r7
 800ce60:	3101      	adds	r1, #1
 800ce62:	f7ff ff79 	bl	800cd58 <_Balloc>
 800ce66:	4680      	mov	r8, r0
 800ce68:	b928      	cbnz	r0, 800ce76 <__multadd+0x5a>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	4b0c      	ldr	r3, [pc, #48]	@ (800cea0 <__multadd+0x84>)
 800ce6e:	480d      	ldr	r0, [pc, #52]	@ (800cea4 <__multadd+0x88>)
 800ce70:	21ba      	movs	r1, #186	@ 0xba
 800ce72:	f000 fd2f 	bl	800d8d4 <__assert_func>
 800ce76:	6922      	ldr	r2, [r4, #16]
 800ce78:	3202      	adds	r2, #2
 800ce7a:	f104 010c 	add.w	r1, r4, #12
 800ce7e:	0092      	lsls	r2, r2, #2
 800ce80:	300c      	adds	r0, #12
 800ce82:	f000 fd19 	bl	800d8b8 <memcpy>
 800ce86:	4621      	mov	r1, r4
 800ce88:	4638      	mov	r0, r7
 800ce8a:	f7ff ffa5 	bl	800cdd8 <_Bfree>
 800ce8e:	4644      	mov	r4, r8
 800ce90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ce94:	3501      	adds	r5, #1
 800ce96:	615e      	str	r6, [r3, #20]
 800ce98:	6125      	str	r5, [r4, #16]
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cea0:	0800e594 	.word	0x0800e594
 800cea4:	0800e5a5 	.word	0x0800e5a5

0800cea8 <__hi0bits>:
 800cea8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ceac:	4603      	mov	r3, r0
 800ceae:	bf36      	itet	cc
 800ceb0:	0403      	lslcc	r3, r0, #16
 800ceb2:	2000      	movcs	r0, #0
 800ceb4:	2010      	movcc	r0, #16
 800ceb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ceba:	bf3c      	itt	cc
 800cebc:	021b      	lslcc	r3, r3, #8
 800cebe:	3008      	addcc	r0, #8
 800cec0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cec4:	bf3c      	itt	cc
 800cec6:	011b      	lslcc	r3, r3, #4
 800cec8:	3004      	addcc	r0, #4
 800ceca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cece:	bf3c      	itt	cc
 800ced0:	009b      	lslcc	r3, r3, #2
 800ced2:	3002      	addcc	r0, #2
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	db05      	blt.n	800cee4 <__hi0bits+0x3c>
 800ced8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cedc:	f100 0001 	add.w	r0, r0, #1
 800cee0:	bf08      	it	eq
 800cee2:	2020      	moveq	r0, #32
 800cee4:	4770      	bx	lr

0800cee6 <__lo0bits>:
 800cee6:	6803      	ldr	r3, [r0, #0]
 800cee8:	4602      	mov	r2, r0
 800ceea:	f013 0007 	ands.w	r0, r3, #7
 800ceee:	d00b      	beq.n	800cf08 <__lo0bits+0x22>
 800cef0:	07d9      	lsls	r1, r3, #31
 800cef2:	d421      	bmi.n	800cf38 <__lo0bits+0x52>
 800cef4:	0798      	lsls	r0, r3, #30
 800cef6:	bf49      	itett	mi
 800cef8:	085b      	lsrmi	r3, r3, #1
 800cefa:	089b      	lsrpl	r3, r3, #2
 800cefc:	2001      	movmi	r0, #1
 800cefe:	6013      	strmi	r3, [r2, #0]
 800cf00:	bf5c      	itt	pl
 800cf02:	6013      	strpl	r3, [r2, #0]
 800cf04:	2002      	movpl	r0, #2
 800cf06:	4770      	bx	lr
 800cf08:	b299      	uxth	r1, r3
 800cf0a:	b909      	cbnz	r1, 800cf10 <__lo0bits+0x2a>
 800cf0c:	0c1b      	lsrs	r3, r3, #16
 800cf0e:	2010      	movs	r0, #16
 800cf10:	b2d9      	uxtb	r1, r3
 800cf12:	b909      	cbnz	r1, 800cf18 <__lo0bits+0x32>
 800cf14:	3008      	adds	r0, #8
 800cf16:	0a1b      	lsrs	r3, r3, #8
 800cf18:	0719      	lsls	r1, r3, #28
 800cf1a:	bf04      	itt	eq
 800cf1c:	091b      	lsreq	r3, r3, #4
 800cf1e:	3004      	addeq	r0, #4
 800cf20:	0799      	lsls	r1, r3, #30
 800cf22:	bf04      	itt	eq
 800cf24:	089b      	lsreq	r3, r3, #2
 800cf26:	3002      	addeq	r0, #2
 800cf28:	07d9      	lsls	r1, r3, #31
 800cf2a:	d403      	bmi.n	800cf34 <__lo0bits+0x4e>
 800cf2c:	085b      	lsrs	r3, r3, #1
 800cf2e:	f100 0001 	add.w	r0, r0, #1
 800cf32:	d003      	beq.n	800cf3c <__lo0bits+0x56>
 800cf34:	6013      	str	r3, [r2, #0]
 800cf36:	4770      	bx	lr
 800cf38:	2000      	movs	r0, #0
 800cf3a:	4770      	bx	lr
 800cf3c:	2020      	movs	r0, #32
 800cf3e:	4770      	bx	lr

0800cf40 <__i2b>:
 800cf40:	b510      	push	{r4, lr}
 800cf42:	460c      	mov	r4, r1
 800cf44:	2101      	movs	r1, #1
 800cf46:	f7ff ff07 	bl	800cd58 <_Balloc>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	b928      	cbnz	r0, 800cf5a <__i2b+0x1a>
 800cf4e:	4b05      	ldr	r3, [pc, #20]	@ (800cf64 <__i2b+0x24>)
 800cf50:	4805      	ldr	r0, [pc, #20]	@ (800cf68 <__i2b+0x28>)
 800cf52:	f240 1145 	movw	r1, #325	@ 0x145
 800cf56:	f000 fcbd 	bl	800d8d4 <__assert_func>
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	6144      	str	r4, [r0, #20]
 800cf5e:	6103      	str	r3, [r0, #16]
 800cf60:	bd10      	pop	{r4, pc}
 800cf62:	bf00      	nop
 800cf64:	0800e594 	.word	0x0800e594
 800cf68:	0800e5a5 	.word	0x0800e5a5

0800cf6c <__multiply>:
 800cf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf70:	4614      	mov	r4, r2
 800cf72:	690a      	ldr	r2, [r1, #16]
 800cf74:	6923      	ldr	r3, [r4, #16]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	bfa8      	it	ge
 800cf7a:	4623      	movge	r3, r4
 800cf7c:	460f      	mov	r7, r1
 800cf7e:	bfa4      	itt	ge
 800cf80:	460c      	movge	r4, r1
 800cf82:	461f      	movge	r7, r3
 800cf84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cf88:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cf8c:	68a3      	ldr	r3, [r4, #8]
 800cf8e:	6861      	ldr	r1, [r4, #4]
 800cf90:	eb0a 0609 	add.w	r6, sl, r9
 800cf94:	42b3      	cmp	r3, r6
 800cf96:	b085      	sub	sp, #20
 800cf98:	bfb8      	it	lt
 800cf9a:	3101      	addlt	r1, #1
 800cf9c:	f7ff fedc 	bl	800cd58 <_Balloc>
 800cfa0:	b930      	cbnz	r0, 800cfb0 <__multiply+0x44>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	4b44      	ldr	r3, [pc, #272]	@ (800d0b8 <__multiply+0x14c>)
 800cfa6:	4845      	ldr	r0, [pc, #276]	@ (800d0bc <__multiply+0x150>)
 800cfa8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cfac:	f000 fc92 	bl	800d8d4 <__assert_func>
 800cfb0:	f100 0514 	add.w	r5, r0, #20
 800cfb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cfb8:	462b      	mov	r3, r5
 800cfba:	2200      	movs	r2, #0
 800cfbc:	4543      	cmp	r3, r8
 800cfbe:	d321      	bcc.n	800d004 <__multiply+0x98>
 800cfc0:	f107 0114 	add.w	r1, r7, #20
 800cfc4:	f104 0214 	add.w	r2, r4, #20
 800cfc8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cfcc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cfd0:	9302      	str	r3, [sp, #8]
 800cfd2:	1b13      	subs	r3, r2, r4
 800cfd4:	3b15      	subs	r3, #21
 800cfd6:	f023 0303 	bic.w	r3, r3, #3
 800cfda:	3304      	adds	r3, #4
 800cfdc:	f104 0715 	add.w	r7, r4, #21
 800cfe0:	42ba      	cmp	r2, r7
 800cfe2:	bf38      	it	cc
 800cfe4:	2304      	movcc	r3, #4
 800cfe6:	9301      	str	r3, [sp, #4]
 800cfe8:	9b02      	ldr	r3, [sp, #8]
 800cfea:	9103      	str	r1, [sp, #12]
 800cfec:	428b      	cmp	r3, r1
 800cfee:	d80c      	bhi.n	800d00a <__multiply+0x9e>
 800cff0:	2e00      	cmp	r6, #0
 800cff2:	dd03      	ble.n	800cffc <__multiply+0x90>
 800cff4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d05b      	beq.n	800d0b4 <__multiply+0x148>
 800cffc:	6106      	str	r6, [r0, #16]
 800cffe:	b005      	add	sp, #20
 800d000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d004:	f843 2b04 	str.w	r2, [r3], #4
 800d008:	e7d8      	b.n	800cfbc <__multiply+0x50>
 800d00a:	f8b1 a000 	ldrh.w	sl, [r1]
 800d00e:	f1ba 0f00 	cmp.w	sl, #0
 800d012:	d024      	beq.n	800d05e <__multiply+0xf2>
 800d014:	f104 0e14 	add.w	lr, r4, #20
 800d018:	46a9      	mov	r9, r5
 800d01a:	f04f 0c00 	mov.w	ip, #0
 800d01e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d022:	f8d9 3000 	ldr.w	r3, [r9]
 800d026:	fa1f fb87 	uxth.w	fp, r7
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d030:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d034:	f8d9 7000 	ldr.w	r7, [r9]
 800d038:	4463      	add	r3, ip
 800d03a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d03e:	fb0a c70b 	mla	r7, sl, fp, ip
 800d042:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d046:	b29b      	uxth	r3, r3
 800d048:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d04c:	4572      	cmp	r2, lr
 800d04e:	f849 3b04 	str.w	r3, [r9], #4
 800d052:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d056:	d8e2      	bhi.n	800d01e <__multiply+0xb2>
 800d058:	9b01      	ldr	r3, [sp, #4]
 800d05a:	f845 c003 	str.w	ip, [r5, r3]
 800d05e:	9b03      	ldr	r3, [sp, #12]
 800d060:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d064:	3104      	adds	r1, #4
 800d066:	f1b9 0f00 	cmp.w	r9, #0
 800d06a:	d021      	beq.n	800d0b0 <__multiply+0x144>
 800d06c:	682b      	ldr	r3, [r5, #0]
 800d06e:	f104 0c14 	add.w	ip, r4, #20
 800d072:	46ae      	mov	lr, r5
 800d074:	f04f 0a00 	mov.w	sl, #0
 800d078:	f8bc b000 	ldrh.w	fp, [ip]
 800d07c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d080:	fb09 770b 	mla	r7, r9, fp, r7
 800d084:	4457      	add	r7, sl
 800d086:	b29b      	uxth	r3, r3
 800d088:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d08c:	f84e 3b04 	str.w	r3, [lr], #4
 800d090:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d094:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d098:	f8be 3000 	ldrh.w	r3, [lr]
 800d09c:	fb09 330a 	mla	r3, r9, sl, r3
 800d0a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d0a4:	4562      	cmp	r2, ip
 800d0a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d0aa:	d8e5      	bhi.n	800d078 <__multiply+0x10c>
 800d0ac:	9f01      	ldr	r7, [sp, #4]
 800d0ae:	51eb      	str	r3, [r5, r7]
 800d0b0:	3504      	adds	r5, #4
 800d0b2:	e799      	b.n	800cfe8 <__multiply+0x7c>
 800d0b4:	3e01      	subs	r6, #1
 800d0b6:	e79b      	b.n	800cff0 <__multiply+0x84>
 800d0b8:	0800e594 	.word	0x0800e594
 800d0bc:	0800e5a5 	.word	0x0800e5a5

0800d0c0 <__pow5mult>:
 800d0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0c4:	4615      	mov	r5, r2
 800d0c6:	f012 0203 	ands.w	r2, r2, #3
 800d0ca:	4607      	mov	r7, r0
 800d0cc:	460e      	mov	r6, r1
 800d0ce:	d007      	beq.n	800d0e0 <__pow5mult+0x20>
 800d0d0:	4c25      	ldr	r4, [pc, #148]	@ (800d168 <__pow5mult+0xa8>)
 800d0d2:	3a01      	subs	r2, #1
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d0da:	f7ff fe9f 	bl	800ce1c <__multadd>
 800d0de:	4606      	mov	r6, r0
 800d0e0:	10ad      	asrs	r5, r5, #2
 800d0e2:	d03d      	beq.n	800d160 <__pow5mult+0xa0>
 800d0e4:	69fc      	ldr	r4, [r7, #28]
 800d0e6:	b97c      	cbnz	r4, 800d108 <__pow5mult+0x48>
 800d0e8:	2010      	movs	r0, #16
 800d0ea:	f7ff fd7f 	bl	800cbec <malloc>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	61f8      	str	r0, [r7, #28]
 800d0f2:	b928      	cbnz	r0, 800d100 <__pow5mult+0x40>
 800d0f4:	4b1d      	ldr	r3, [pc, #116]	@ (800d16c <__pow5mult+0xac>)
 800d0f6:	481e      	ldr	r0, [pc, #120]	@ (800d170 <__pow5mult+0xb0>)
 800d0f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d0fc:	f000 fbea 	bl	800d8d4 <__assert_func>
 800d100:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d104:	6004      	str	r4, [r0, #0]
 800d106:	60c4      	str	r4, [r0, #12]
 800d108:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d10c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d110:	b94c      	cbnz	r4, 800d126 <__pow5mult+0x66>
 800d112:	f240 2171 	movw	r1, #625	@ 0x271
 800d116:	4638      	mov	r0, r7
 800d118:	f7ff ff12 	bl	800cf40 <__i2b>
 800d11c:	2300      	movs	r3, #0
 800d11e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d122:	4604      	mov	r4, r0
 800d124:	6003      	str	r3, [r0, #0]
 800d126:	f04f 0900 	mov.w	r9, #0
 800d12a:	07eb      	lsls	r3, r5, #31
 800d12c:	d50a      	bpl.n	800d144 <__pow5mult+0x84>
 800d12e:	4631      	mov	r1, r6
 800d130:	4622      	mov	r2, r4
 800d132:	4638      	mov	r0, r7
 800d134:	f7ff ff1a 	bl	800cf6c <__multiply>
 800d138:	4631      	mov	r1, r6
 800d13a:	4680      	mov	r8, r0
 800d13c:	4638      	mov	r0, r7
 800d13e:	f7ff fe4b 	bl	800cdd8 <_Bfree>
 800d142:	4646      	mov	r6, r8
 800d144:	106d      	asrs	r5, r5, #1
 800d146:	d00b      	beq.n	800d160 <__pow5mult+0xa0>
 800d148:	6820      	ldr	r0, [r4, #0]
 800d14a:	b938      	cbnz	r0, 800d15c <__pow5mult+0x9c>
 800d14c:	4622      	mov	r2, r4
 800d14e:	4621      	mov	r1, r4
 800d150:	4638      	mov	r0, r7
 800d152:	f7ff ff0b 	bl	800cf6c <__multiply>
 800d156:	6020      	str	r0, [r4, #0]
 800d158:	f8c0 9000 	str.w	r9, [r0]
 800d15c:	4604      	mov	r4, r0
 800d15e:	e7e4      	b.n	800d12a <__pow5mult+0x6a>
 800d160:	4630      	mov	r0, r6
 800d162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d166:	bf00      	nop
 800d168:	0800e600 	.word	0x0800e600
 800d16c:	0800e525 	.word	0x0800e525
 800d170:	0800e5a5 	.word	0x0800e5a5

0800d174 <__lshift>:
 800d174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d178:	460c      	mov	r4, r1
 800d17a:	6849      	ldr	r1, [r1, #4]
 800d17c:	6923      	ldr	r3, [r4, #16]
 800d17e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d182:	68a3      	ldr	r3, [r4, #8]
 800d184:	4607      	mov	r7, r0
 800d186:	4691      	mov	r9, r2
 800d188:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d18c:	f108 0601 	add.w	r6, r8, #1
 800d190:	42b3      	cmp	r3, r6
 800d192:	db0b      	blt.n	800d1ac <__lshift+0x38>
 800d194:	4638      	mov	r0, r7
 800d196:	f7ff fddf 	bl	800cd58 <_Balloc>
 800d19a:	4605      	mov	r5, r0
 800d19c:	b948      	cbnz	r0, 800d1b2 <__lshift+0x3e>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	4b28      	ldr	r3, [pc, #160]	@ (800d244 <__lshift+0xd0>)
 800d1a2:	4829      	ldr	r0, [pc, #164]	@ (800d248 <__lshift+0xd4>)
 800d1a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d1a8:	f000 fb94 	bl	800d8d4 <__assert_func>
 800d1ac:	3101      	adds	r1, #1
 800d1ae:	005b      	lsls	r3, r3, #1
 800d1b0:	e7ee      	b.n	800d190 <__lshift+0x1c>
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	f100 0114 	add.w	r1, r0, #20
 800d1b8:	f100 0210 	add.w	r2, r0, #16
 800d1bc:	4618      	mov	r0, r3
 800d1be:	4553      	cmp	r3, sl
 800d1c0:	db33      	blt.n	800d22a <__lshift+0xb6>
 800d1c2:	6920      	ldr	r0, [r4, #16]
 800d1c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d1c8:	f104 0314 	add.w	r3, r4, #20
 800d1cc:	f019 091f 	ands.w	r9, r9, #31
 800d1d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d1d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d1d8:	d02b      	beq.n	800d232 <__lshift+0xbe>
 800d1da:	f1c9 0e20 	rsb	lr, r9, #32
 800d1de:	468a      	mov	sl, r1
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	6818      	ldr	r0, [r3, #0]
 800d1e4:	fa00 f009 	lsl.w	r0, r0, r9
 800d1e8:	4310      	orrs	r0, r2
 800d1ea:	f84a 0b04 	str.w	r0, [sl], #4
 800d1ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1f2:	459c      	cmp	ip, r3
 800d1f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d1f8:	d8f3      	bhi.n	800d1e2 <__lshift+0x6e>
 800d1fa:	ebac 0304 	sub.w	r3, ip, r4
 800d1fe:	3b15      	subs	r3, #21
 800d200:	f023 0303 	bic.w	r3, r3, #3
 800d204:	3304      	adds	r3, #4
 800d206:	f104 0015 	add.w	r0, r4, #21
 800d20a:	4584      	cmp	ip, r0
 800d20c:	bf38      	it	cc
 800d20e:	2304      	movcc	r3, #4
 800d210:	50ca      	str	r2, [r1, r3]
 800d212:	b10a      	cbz	r2, 800d218 <__lshift+0xa4>
 800d214:	f108 0602 	add.w	r6, r8, #2
 800d218:	3e01      	subs	r6, #1
 800d21a:	4638      	mov	r0, r7
 800d21c:	612e      	str	r6, [r5, #16]
 800d21e:	4621      	mov	r1, r4
 800d220:	f7ff fdda 	bl	800cdd8 <_Bfree>
 800d224:	4628      	mov	r0, r5
 800d226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d22a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d22e:	3301      	adds	r3, #1
 800d230:	e7c5      	b.n	800d1be <__lshift+0x4a>
 800d232:	3904      	subs	r1, #4
 800d234:	f853 2b04 	ldr.w	r2, [r3], #4
 800d238:	f841 2f04 	str.w	r2, [r1, #4]!
 800d23c:	459c      	cmp	ip, r3
 800d23e:	d8f9      	bhi.n	800d234 <__lshift+0xc0>
 800d240:	e7ea      	b.n	800d218 <__lshift+0xa4>
 800d242:	bf00      	nop
 800d244:	0800e594 	.word	0x0800e594
 800d248:	0800e5a5 	.word	0x0800e5a5

0800d24c <__mcmp>:
 800d24c:	690a      	ldr	r2, [r1, #16]
 800d24e:	4603      	mov	r3, r0
 800d250:	6900      	ldr	r0, [r0, #16]
 800d252:	1a80      	subs	r0, r0, r2
 800d254:	b530      	push	{r4, r5, lr}
 800d256:	d10e      	bne.n	800d276 <__mcmp+0x2a>
 800d258:	3314      	adds	r3, #20
 800d25a:	3114      	adds	r1, #20
 800d25c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d260:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d264:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d268:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d26c:	4295      	cmp	r5, r2
 800d26e:	d003      	beq.n	800d278 <__mcmp+0x2c>
 800d270:	d205      	bcs.n	800d27e <__mcmp+0x32>
 800d272:	f04f 30ff 	mov.w	r0, #4294967295
 800d276:	bd30      	pop	{r4, r5, pc}
 800d278:	42a3      	cmp	r3, r4
 800d27a:	d3f3      	bcc.n	800d264 <__mcmp+0x18>
 800d27c:	e7fb      	b.n	800d276 <__mcmp+0x2a>
 800d27e:	2001      	movs	r0, #1
 800d280:	e7f9      	b.n	800d276 <__mcmp+0x2a>
	...

0800d284 <__mdiff>:
 800d284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d288:	4689      	mov	r9, r1
 800d28a:	4606      	mov	r6, r0
 800d28c:	4611      	mov	r1, r2
 800d28e:	4648      	mov	r0, r9
 800d290:	4614      	mov	r4, r2
 800d292:	f7ff ffdb 	bl	800d24c <__mcmp>
 800d296:	1e05      	subs	r5, r0, #0
 800d298:	d112      	bne.n	800d2c0 <__mdiff+0x3c>
 800d29a:	4629      	mov	r1, r5
 800d29c:	4630      	mov	r0, r6
 800d29e:	f7ff fd5b 	bl	800cd58 <_Balloc>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	b928      	cbnz	r0, 800d2b2 <__mdiff+0x2e>
 800d2a6:	4b3f      	ldr	r3, [pc, #252]	@ (800d3a4 <__mdiff+0x120>)
 800d2a8:	f240 2137 	movw	r1, #567	@ 0x237
 800d2ac:	483e      	ldr	r0, [pc, #248]	@ (800d3a8 <__mdiff+0x124>)
 800d2ae:	f000 fb11 	bl	800d8d4 <__assert_func>
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d2b8:	4610      	mov	r0, r2
 800d2ba:	b003      	add	sp, #12
 800d2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2c0:	bfbc      	itt	lt
 800d2c2:	464b      	movlt	r3, r9
 800d2c4:	46a1      	movlt	r9, r4
 800d2c6:	4630      	mov	r0, r6
 800d2c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d2cc:	bfba      	itte	lt
 800d2ce:	461c      	movlt	r4, r3
 800d2d0:	2501      	movlt	r5, #1
 800d2d2:	2500      	movge	r5, #0
 800d2d4:	f7ff fd40 	bl	800cd58 <_Balloc>
 800d2d8:	4602      	mov	r2, r0
 800d2da:	b918      	cbnz	r0, 800d2e4 <__mdiff+0x60>
 800d2dc:	4b31      	ldr	r3, [pc, #196]	@ (800d3a4 <__mdiff+0x120>)
 800d2de:	f240 2145 	movw	r1, #581	@ 0x245
 800d2e2:	e7e3      	b.n	800d2ac <__mdiff+0x28>
 800d2e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d2e8:	6926      	ldr	r6, [r4, #16]
 800d2ea:	60c5      	str	r5, [r0, #12]
 800d2ec:	f109 0310 	add.w	r3, r9, #16
 800d2f0:	f109 0514 	add.w	r5, r9, #20
 800d2f4:	f104 0e14 	add.w	lr, r4, #20
 800d2f8:	f100 0b14 	add.w	fp, r0, #20
 800d2fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d300:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d304:	9301      	str	r3, [sp, #4]
 800d306:	46d9      	mov	r9, fp
 800d308:	f04f 0c00 	mov.w	ip, #0
 800d30c:	9b01      	ldr	r3, [sp, #4]
 800d30e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d312:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d316:	9301      	str	r3, [sp, #4]
 800d318:	fa1f f38a 	uxth.w	r3, sl
 800d31c:	4619      	mov	r1, r3
 800d31e:	b283      	uxth	r3, r0
 800d320:	1acb      	subs	r3, r1, r3
 800d322:	0c00      	lsrs	r0, r0, #16
 800d324:	4463      	add	r3, ip
 800d326:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d32a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d32e:	b29b      	uxth	r3, r3
 800d330:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d334:	4576      	cmp	r6, lr
 800d336:	f849 3b04 	str.w	r3, [r9], #4
 800d33a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d33e:	d8e5      	bhi.n	800d30c <__mdiff+0x88>
 800d340:	1b33      	subs	r3, r6, r4
 800d342:	3b15      	subs	r3, #21
 800d344:	f023 0303 	bic.w	r3, r3, #3
 800d348:	3415      	adds	r4, #21
 800d34a:	3304      	adds	r3, #4
 800d34c:	42a6      	cmp	r6, r4
 800d34e:	bf38      	it	cc
 800d350:	2304      	movcc	r3, #4
 800d352:	441d      	add	r5, r3
 800d354:	445b      	add	r3, fp
 800d356:	461e      	mov	r6, r3
 800d358:	462c      	mov	r4, r5
 800d35a:	4544      	cmp	r4, r8
 800d35c:	d30e      	bcc.n	800d37c <__mdiff+0xf8>
 800d35e:	f108 0103 	add.w	r1, r8, #3
 800d362:	1b49      	subs	r1, r1, r5
 800d364:	f021 0103 	bic.w	r1, r1, #3
 800d368:	3d03      	subs	r5, #3
 800d36a:	45a8      	cmp	r8, r5
 800d36c:	bf38      	it	cc
 800d36e:	2100      	movcc	r1, #0
 800d370:	440b      	add	r3, r1
 800d372:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d376:	b191      	cbz	r1, 800d39e <__mdiff+0x11a>
 800d378:	6117      	str	r7, [r2, #16]
 800d37a:	e79d      	b.n	800d2b8 <__mdiff+0x34>
 800d37c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d380:	46e6      	mov	lr, ip
 800d382:	0c08      	lsrs	r0, r1, #16
 800d384:	fa1c fc81 	uxtah	ip, ip, r1
 800d388:	4471      	add	r1, lr
 800d38a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d38e:	b289      	uxth	r1, r1
 800d390:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d394:	f846 1b04 	str.w	r1, [r6], #4
 800d398:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d39c:	e7dd      	b.n	800d35a <__mdiff+0xd6>
 800d39e:	3f01      	subs	r7, #1
 800d3a0:	e7e7      	b.n	800d372 <__mdiff+0xee>
 800d3a2:	bf00      	nop
 800d3a4:	0800e594 	.word	0x0800e594
 800d3a8:	0800e5a5 	.word	0x0800e5a5

0800d3ac <__d2b>:
 800d3ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d3b0:	460f      	mov	r7, r1
 800d3b2:	2101      	movs	r1, #1
 800d3b4:	ec59 8b10 	vmov	r8, r9, d0
 800d3b8:	4616      	mov	r6, r2
 800d3ba:	f7ff fccd 	bl	800cd58 <_Balloc>
 800d3be:	4604      	mov	r4, r0
 800d3c0:	b930      	cbnz	r0, 800d3d0 <__d2b+0x24>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	4b23      	ldr	r3, [pc, #140]	@ (800d454 <__d2b+0xa8>)
 800d3c6:	4824      	ldr	r0, [pc, #144]	@ (800d458 <__d2b+0xac>)
 800d3c8:	f240 310f 	movw	r1, #783	@ 0x30f
 800d3cc:	f000 fa82 	bl	800d8d4 <__assert_func>
 800d3d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d3d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d3d8:	b10d      	cbz	r5, 800d3de <__d2b+0x32>
 800d3da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d3de:	9301      	str	r3, [sp, #4]
 800d3e0:	f1b8 0300 	subs.w	r3, r8, #0
 800d3e4:	d023      	beq.n	800d42e <__d2b+0x82>
 800d3e6:	4668      	mov	r0, sp
 800d3e8:	9300      	str	r3, [sp, #0]
 800d3ea:	f7ff fd7c 	bl	800cee6 <__lo0bits>
 800d3ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d3f2:	b1d0      	cbz	r0, 800d42a <__d2b+0x7e>
 800d3f4:	f1c0 0320 	rsb	r3, r0, #32
 800d3f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d3fc:	430b      	orrs	r3, r1
 800d3fe:	40c2      	lsrs	r2, r0
 800d400:	6163      	str	r3, [r4, #20]
 800d402:	9201      	str	r2, [sp, #4]
 800d404:	9b01      	ldr	r3, [sp, #4]
 800d406:	61a3      	str	r3, [r4, #24]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	bf0c      	ite	eq
 800d40c:	2201      	moveq	r2, #1
 800d40e:	2202      	movne	r2, #2
 800d410:	6122      	str	r2, [r4, #16]
 800d412:	b1a5      	cbz	r5, 800d43e <__d2b+0x92>
 800d414:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d418:	4405      	add	r5, r0
 800d41a:	603d      	str	r5, [r7, #0]
 800d41c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d420:	6030      	str	r0, [r6, #0]
 800d422:	4620      	mov	r0, r4
 800d424:	b003      	add	sp, #12
 800d426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d42a:	6161      	str	r1, [r4, #20]
 800d42c:	e7ea      	b.n	800d404 <__d2b+0x58>
 800d42e:	a801      	add	r0, sp, #4
 800d430:	f7ff fd59 	bl	800cee6 <__lo0bits>
 800d434:	9b01      	ldr	r3, [sp, #4]
 800d436:	6163      	str	r3, [r4, #20]
 800d438:	3020      	adds	r0, #32
 800d43a:	2201      	movs	r2, #1
 800d43c:	e7e8      	b.n	800d410 <__d2b+0x64>
 800d43e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d442:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d446:	6038      	str	r0, [r7, #0]
 800d448:	6918      	ldr	r0, [r3, #16]
 800d44a:	f7ff fd2d 	bl	800cea8 <__hi0bits>
 800d44e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d452:	e7e5      	b.n	800d420 <__d2b+0x74>
 800d454:	0800e594 	.word	0x0800e594
 800d458:	0800e5a5 	.word	0x0800e5a5

0800d45c <__ssputs_r>:
 800d45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d460:	688e      	ldr	r6, [r1, #8]
 800d462:	461f      	mov	r7, r3
 800d464:	42be      	cmp	r6, r7
 800d466:	680b      	ldr	r3, [r1, #0]
 800d468:	4682      	mov	sl, r0
 800d46a:	460c      	mov	r4, r1
 800d46c:	4690      	mov	r8, r2
 800d46e:	d82d      	bhi.n	800d4cc <__ssputs_r+0x70>
 800d470:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d474:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d478:	d026      	beq.n	800d4c8 <__ssputs_r+0x6c>
 800d47a:	6965      	ldr	r5, [r4, #20]
 800d47c:	6909      	ldr	r1, [r1, #16]
 800d47e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d482:	eba3 0901 	sub.w	r9, r3, r1
 800d486:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d48a:	1c7b      	adds	r3, r7, #1
 800d48c:	444b      	add	r3, r9
 800d48e:	106d      	asrs	r5, r5, #1
 800d490:	429d      	cmp	r5, r3
 800d492:	bf38      	it	cc
 800d494:	461d      	movcc	r5, r3
 800d496:	0553      	lsls	r3, r2, #21
 800d498:	d527      	bpl.n	800d4ea <__ssputs_r+0x8e>
 800d49a:	4629      	mov	r1, r5
 800d49c:	f7ff fbd0 	bl	800cc40 <_malloc_r>
 800d4a0:	4606      	mov	r6, r0
 800d4a2:	b360      	cbz	r0, 800d4fe <__ssputs_r+0xa2>
 800d4a4:	6921      	ldr	r1, [r4, #16]
 800d4a6:	464a      	mov	r2, r9
 800d4a8:	f000 fa06 	bl	800d8b8 <memcpy>
 800d4ac:	89a3      	ldrh	r3, [r4, #12]
 800d4ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d4b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4b6:	81a3      	strh	r3, [r4, #12]
 800d4b8:	6126      	str	r6, [r4, #16]
 800d4ba:	6165      	str	r5, [r4, #20]
 800d4bc:	444e      	add	r6, r9
 800d4be:	eba5 0509 	sub.w	r5, r5, r9
 800d4c2:	6026      	str	r6, [r4, #0]
 800d4c4:	60a5      	str	r5, [r4, #8]
 800d4c6:	463e      	mov	r6, r7
 800d4c8:	42be      	cmp	r6, r7
 800d4ca:	d900      	bls.n	800d4ce <__ssputs_r+0x72>
 800d4cc:	463e      	mov	r6, r7
 800d4ce:	6820      	ldr	r0, [r4, #0]
 800d4d0:	4632      	mov	r2, r6
 800d4d2:	4641      	mov	r1, r8
 800d4d4:	f000 f9c6 	bl	800d864 <memmove>
 800d4d8:	68a3      	ldr	r3, [r4, #8]
 800d4da:	1b9b      	subs	r3, r3, r6
 800d4dc:	60a3      	str	r3, [r4, #8]
 800d4de:	6823      	ldr	r3, [r4, #0]
 800d4e0:	4433      	add	r3, r6
 800d4e2:	6023      	str	r3, [r4, #0]
 800d4e4:	2000      	movs	r0, #0
 800d4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4ea:	462a      	mov	r2, r5
 800d4ec:	f000 fa36 	bl	800d95c <_realloc_r>
 800d4f0:	4606      	mov	r6, r0
 800d4f2:	2800      	cmp	r0, #0
 800d4f4:	d1e0      	bne.n	800d4b8 <__ssputs_r+0x5c>
 800d4f6:	6921      	ldr	r1, [r4, #16]
 800d4f8:	4650      	mov	r0, sl
 800d4fa:	f7ff fb2d 	bl	800cb58 <_free_r>
 800d4fe:	230c      	movs	r3, #12
 800d500:	f8ca 3000 	str.w	r3, [sl]
 800d504:	89a3      	ldrh	r3, [r4, #12]
 800d506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d50a:	81a3      	strh	r3, [r4, #12]
 800d50c:	f04f 30ff 	mov.w	r0, #4294967295
 800d510:	e7e9      	b.n	800d4e6 <__ssputs_r+0x8a>
	...

0800d514 <_svfiprintf_r>:
 800d514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d518:	4698      	mov	r8, r3
 800d51a:	898b      	ldrh	r3, [r1, #12]
 800d51c:	061b      	lsls	r3, r3, #24
 800d51e:	b09d      	sub	sp, #116	@ 0x74
 800d520:	4607      	mov	r7, r0
 800d522:	460d      	mov	r5, r1
 800d524:	4614      	mov	r4, r2
 800d526:	d510      	bpl.n	800d54a <_svfiprintf_r+0x36>
 800d528:	690b      	ldr	r3, [r1, #16]
 800d52a:	b973      	cbnz	r3, 800d54a <_svfiprintf_r+0x36>
 800d52c:	2140      	movs	r1, #64	@ 0x40
 800d52e:	f7ff fb87 	bl	800cc40 <_malloc_r>
 800d532:	6028      	str	r0, [r5, #0]
 800d534:	6128      	str	r0, [r5, #16]
 800d536:	b930      	cbnz	r0, 800d546 <_svfiprintf_r+0x32>
 800d538:	230c      	movs	r3, #12
 800d53a:	603b      	str	r3, [r7, #0]
 800d53c:	f04f 30ff 	mov.w	r0, #4294967295
 800d540:	b01d      	add	sp, #116	@ 0x74
 800d542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d546:	2340      	movs	r3, #64	@ 0x40
 800d548:	616b      	str	r3, [r5, #20]
 800d54a:	2300      	movs	r3, #0
 800d54c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d54e:	2320      	movs	r3, #32
 800d550:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d554:	f8cd 800c 	str.w	r8, [sp, #12]
 800d558:	2330      	movs	r3, #48	@ 0x30
 800d55a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d6f8 <_svfiprintf_r+0x1e4>
 800d55e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d562:	f04f 0901 	mov.w	r9, #1
 800d566:	4623      	mov	r3, r4
 800d568:	469a      	mov	sl, r3
 800d56a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d56e:	b10a      	cbz	r2, 800d574 <_svfiprintf_r+0x60>
 800d570:	2a25      	cmp	r2, #37	@ 0x25
 800d572:	d1f9      	bne.n	800d568 <_svfiprintf_r+0x54>
 800d574:	ebba 0b04 	subs.w	fp, sl, r4
 800d578:	d00b      	beq.n	800d592 <_svfiprintf_r+0x7e>
 800d57a:	465b      	mov	r3, fp
 800d57c:	4622      	mov	r2, r4
 800d57e:	4629      	mov	r1, r5
 800d580:	4638      	mov	r0, r7
 800d582:	f7ff ff6b 	bl	800d45c <__ssputs_r>
 800d586:	3001      	adds	r0, #1
 800d588:	f000 80a7 	beq.w	800d6da <_svfiprintf_r+0x1c6>
 800d58c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d58e:	445a      	add	r2, fp
 800d590:	9209      	str	r2, [sp, #36]	@ 0x24
 800d592:	f89a 3000 	ldrb.w	r3, [sl]
 800d596:	2b00      	cmp	r3, #0
 800d598:	f000 809f 	beq.w	800d6da <_svfiprintf_r+0x1c6>
 800d59c:	2300      	movs	r3, #0
 800d59e:	f04f 32ff 	mov.w	r2, #4294967295
 800d5a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5a6:	f10a 0a01 	add.w	sl, sl, #1
 800d5aa:	9304      	str	r3, [sp, #16]
 800d5ac:	9307      	str	r3, [sp, #28]
 800d5ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d5b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d5b4:	4654      	mov	r4, sl
 800d5b6:	2205      	movs	r2, #5
 800d5b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5bc:	484e      	ldr	r0, [pc, #312]	@ (800d6f8 <_svfiprintf_r+0x1e4>)
 800d5be:	f7f2 fe0f 	bl	80001e0 <memchr>
 800d5c2:	9a04      	ldr	r2, [sp, #16]
 800d5c4:	b9d8      	cbnz	r0, 800d5fe <_svfiprintf_r+0xea>
 800d5c6:	06d0      	lsls	r0, r2, #27
 800d5c8:	bf44      	itt	mi
 800d5ca:	2320      	movmi	r3, #32
 800d5cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d5d0:	0711      	lsls	r1, r2, #28
 800d5d2:	bf44      	itt	mi
 800d5d4:	232b      	movmi	r3, #43	@ 0x2b
 800d5d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d5da:	f89a 3000 	ldrb.w	r3, [sl]
 800d5de:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5e0:	d015      	beq.n	800d60e <_svfiprintf_r+0xfa>
 800d5e2:	9a07      	ldr	r2, [sp, #28]
 800d5e4:	4654      	mov	r4, sl
 800d5e6:	2000      	movs	r0, #0
 800d5e8:	f04f 0c0a 	mov.w	ip, #10
 800d5ec:	4621      	mov	r1, r4
 800d5ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5f2:	3b30      	subs	r3, #48	@ 0x30
 800d5f4:	2b09      	cmp	r3, #9
 800d5f6:	d94b      	bls.n	800d690 <_svfiprintf_r+0x17c>
 800d5f8:	b1b0      	cbz	r0, 800d628 <_svfiprintf_r+0x114>
 800d5fa:	9207      	str	r2, [sp, #28]
 800d5fc:	e014      	b.n	800d628 <_svfiprintf_r+0x114>
 800d5fe:	eba0 0308 	sub.w	r3, r0, r8
 800d602:	fa09 f303 	lsl.w	r3, r9, r3
 800d606:	4313      	orrs	r3, r2
 800d608:	9304      	str	r3, [sp, #16]
 800d60a:	46a2      	mov	sl, r4
 800d60c:	e7d2      	b.n	800d5b4 <_svfiprintf_r+0xa0>
 800d60e:	9b03      	ldr	r3, [sp, #12]
 800d610:	1d19      	adds	r1, r3, #4
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	9103      	str	r1, [sp, #12]
 800d616:	2b00      	cmp	r3, #0
 800d618:	bfbb      	ittet	lt
 800d61a:	425b      	neglt	r3, r3
 800d61c:	f042 0202 	orrlt.w	r2, r2, #2
 800d620:	9307      	strge	r3, [sp, #28]
 800d622:	9307      	strlt	r3, [sp, #28]
 800d624:	bfb8      	it	lt
 800d626:	9204      	strlt	r2, [sp, #16]
 800d628:	7823      	ldrb	r3, [r4, #0]
 800d62a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d62c:	d10a      	bne.n	800d644 <_svfiprintf_r+0x130>
 800d62e:	7863      	ldrb	r3, [r4, #1]
 800d630:	2b2a      	cmp	r3, #42	@ 0x2a
 800d632:	d132      	bne.n	800d69a <_svfiprintf_r+0x186>
 800d634:	9b03      	ldr	r3, [sp, #12]
 800d636:	1d1a      	adds	r2, r3, #4
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	9203      	str	r2, [sp, #12]
 800d63c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d640:	3402      	adds	r4, #2
 800d642:	9305      	str	r3, [sp, #20]
 800d644:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d708 <_svfiprintf_r+0x1f4>
 800d648:	7821      	ldrb	r1, [r4, #0]
 800d64a:	2203      	movs	r2, #3
 800d64c:	4650      	mov	r0, sl
 800d64e:	f7f2 fdc7 	bl	80001e0 <memchr>
 800d652:	b138      	cbz	r0, 800d664 <_svfiprintf_r+0x150>
 800d654:	9b04      	ldr	r3, [sp, #16]
 800d656:	eba0 000a 	sub.w	r0, r0, sl
 800d65a:	2240      	movs	r2, #64	@ 0x40
 800d65c:	4082      	lsls	r2, r0
 800d65e:	4313      	orrs	r3, r2
 800d660:	3401      	adds	r4, #1
 800d662:	9304      	str	r3, [sp, #16]
 800d664:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d668:	4824      	ldr	r0, [pc, #144]	@ (800d6fc <_svfiprintf_r+0x1e8>)
 800d66a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d66e:	2206      	movs	r2, #6
 800d670:	f7f2 fdb6 	bl	80001e0 <memchr>
 800d674:	2800      	cmp	r0, #0
 800d676:	d036      	beq.n	800d6e6 <_svfiprintf_r+0x1d2>
 800d678:	4b21      	ldr	r3, [pc, #132]	@ (800d700 <_svfiprintf_r+0x1ec>)
 800d67a:	bb1b      	cbnz	r3, 800d6c4 <_svfiprintf_r+0x1b0>
 800d67c:	9b03      	ldr	r3, [sp, #12]
 800d67e:	3307      	adds	r3, #7
 800d680:	f023 0307 	bic.w	r3, r3, #7
 800d684:	3308      	adds	r3, #8
 800d686:	9303      	str	r3, [sp, #12]
 800d688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d68a:	4433      	add	r3, r6
 800d68c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d68e:	e76a      	b.n	800d566 <_svfiprintf_r+0x52>
 800d690:	fb0c 3202 	mla	r2, ip, r2, r3
 800d694:	460c      	mov	r4, r1
 800d696:	2001      	movs	r0, #1
 800d698:	e7a8      	b.n	800d5ec <_svfiprintf_r+0xd8>
 800d69a:	2300      	movs	r3, #0
 800d69c:	3401      	adds	r4, #1
 800d69e:	9305      	str	r3, [sp, #20]
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	f04f 0c0a 	mov.w	ip, #10
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6ac:	3a30      	subs	r2, #48	@ 0x30
 800d6ae:	2a09      	cmp	r2, #9
 800d6b0:	d903      	bls.n	800d6ba <_svfiprintf_r+0x1a6>
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d0c6      	beq.n	800d644 <_svfiprintf_r+0x130>
 800d6b6:	9105      	str	r1, [sp, #20]
 800d6b8:	e7c4      	b.n	800d644 <_svfiprintf_r+0x130>
 800d6ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6be:	4604      	mov	r4, r0
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	e7f0      	b.n	800d6a6 <_svfiprintf_r+0x192>
 800d6c4:	ab03      	add	r3, sp, #12
 800d6c6:	9300      	str	r3, [sp, #0]
 800d6c8:	462a      	mov	r2, r5
 800d6ca:	4b0e      	ldr	r3, [pc, #56]	@ (800d704 <_svfiprintf_r+0x1f0>)
 800d6cc:	a904      	add	r1, sp, #16
 800d6ce:	4638      	mov	r0, r7
 800d6d0:	f7fd fe84 	bl	800b3dc <_printf_float>
 800d6d4:	1c42      	adds	r2, r0, #1
 800d6d6:	4606      	mov	r6, r0
 800d6d8:	d1d6      	bne.n	800d688 <_svfiprintf_r+0x174>
 800d6da:	89ab      	ldrh	r3, [r5, #12]
 800d6dc:	065b      	lsls	r3, r3, #25
 800d6de:	f53f af2d 	bmi.w	800d53c <_svfiprintf_r+0x28>
 800d6e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d6e4:	e72c      	b.n	800d540 <_svfiprintf_r+0x2c>
 800d6e6:	ab03      	add	r3, sp, #12
 800d6e8:	9300      	str	r3, [sp, #0]
 800d6ea:	462a      	mov	r2, r5
 800d6ec:	4b05      	ldr	r3, [pc, #20]	@ (800d704 <_svfiprintf_r+0x1f0>)
 800d6ee:	a904      	add	r1, sp, #16
 800d6f0:	4638      	mov	r0, r7
 800d6f2:	f7fe f90b 	bl	800b90c <_printf_i>
 800d6f6:	e7ed      	b.n	800d6d4 <_svfiprintf_r+0x1c0>
 800d6f8:	0800e700 	.word	0x0800e700
 800d6fc:	0800e70a 	.word	0x0800e70a
 800d700:	0800b3dd 	.word	0x0800b3dd
 800d704:	0800d45d 	.word	0x0800d45d
 800d708:	0800e706 	.word	0x0800e706

0800d70c <__sflush_r>:
 800d70c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d714:	0716      	lsls	r6, r2, #28
 800d716:	4605      	mov	r5, r0
 800d718:	460c      	mov	r4, r1
 800d71a:	d454      	bmi.n	800d7c6 <__sflush_r+0xba>
 800d71c:	684b      	ldr	r3, [r1, #4]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	dc02      	bgt.n	800d728 <__sflush_r+0x1c>
 800d722:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d724:	2b00      	cmp	r3, #0
 800d726:	dd48      	ble.n	800d7ba <__sflush_r+0xae>
 800d728:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d72a:	2e00      	cmp	r6, #0
 800d72c:	d045      	beq.n	800d7ba <__sflush_r+0xae>
 800d72e:	2300      	movs	r3, #0
 800d730:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d734:	682f      	ldr	r7, [r5, #0]
 800d736:	6a21      	ldr	r1, [r4, #32]
 800d738:	602b      	str	r3, [r5, #0]
 800d73a:	d030      	beq.n	800d79e <__sflush_r+0x92>
 800d73c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d73e:	89a3      	ldrh	r3, [r4, #12]
 800d740:	0759      	lsls	r1, r3, #29
 800d742:	d505      	bpl.n	800d750 <__sflush_r+0x44>
 800d744:	6863      	ldr	r3, [r4, #4]
 800d746:	1ad2      	subs	r2, r2, r3
 800d748:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d74a:	b10b      	cbz	r3, 800d750 <__sflush_r+0x44>
 800d74c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d74e:	1ad2      	subs	r2, r2, r3
 800d750:	2300      	movs	r3, #0
 800d752:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d754:	6a21      	ldr	r1, [r4, #32]
 800d756:	4628      	mov	r0, r5
 800d758:	47b0      	blx	r6
 800d75a:	1c43      	adds	r3, r0, #1
 800d75c:	89a3      	ldrh	r3, [r4, #12]
 800d75e:	d106      	bne.n	800d76e <__sflush_r+0x62>
 800d760:	6829      	ldr	r1, [r5, #0]
 800d762:	291d      	cmp	r1, #29
 800d764:	d82b      	bhi.n	800d7be <__sflush_r+0xb2>
 800d766:	4a2a      	ldr	r2, [pc, #168]	@ (800d810 <__sflush_r+0x104>)
 800d768:	410a      	asrs	r2, r1
 800d76a:	07d6      	lsls	r6, r2, #31
 800d76c:	d427      	bmi.n	800d7be <__sflush_r+0xb2>
 800d76e:	2200      	movs	r2, #0
 800d770:	6062      	str	r2, [r4, #4]
 800d772:	04d9      	lsls	r1, r3, #19
 800d774:	6922      	ldr	r2, [r4, #16]
 800d776:	6022      	str	r2, [r4, #0]
 800d778:	d504      	bpl.n	800d784 <__sflush_r+0x78>
 800d77a:	1c42      	adds	r2, r0, #1
 800d77c:	d101      	bne.n	800d782 <__sflush_r+0x76>
 800d77e:	682b      	ldr	r3, [r5, #0]
 800d780:	b903      	cbnz	r3, 800d784 <__sflush_r+0x78>
 800d782:	6560      	str	r0, [r4, #84]	@ 0x54
 800d784:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d786:	602f      	str	r7, [r5, #0]
 800d788:	b1b9      	cbz	r1, 800d7ba <__sflush_r+0xae>
 800d78a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d78e:	4299      	cmp	r1, r3
 800d790:	d002      	beq.n	800d798 <__sflush_r+0x8c>
 800d792:	4628      	mov	r0, r5
 800d794:	f7ff f9e0 	bl	800cb58 <_free_r>
 800d798:	2300      	movs	r3, #0
 800d79a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d79c:	e00d      	b.n	800d7ba <__sflush_r+0xae>
 800d79e:	2301      	movs	r3, #1
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	47b0      	blx	r6
 800d7a4:	4602      	mov	r2, r0
 800d7a6:	1c50      	adds	r0, r2, #1
 800d7a8:	d1c9      	bne.n	800d73e <__sflush_r+0x32>
 800d7aa:	682b      	ldr	r3, [r5, #0]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d0c6      	beq.n	800d73e <__sflush_r+0x32>
 800d7b0:	2b1d      	cmp	r3, #29
 800d7b2:	d001      	beq.n	800d7b8 <__sflush_r+0xac>
 800d7b4:	2b16      	cmp	r3, #22
 800d7b6:	d11e      	bne.n	800d7f6 <__sflush_r+0xea>
 800d7b8:	602f      	str	r7, [r5, #0]
 800d7ba:	2000      	movs	r0, #0
 800d7bc:	e022      	b.n	800d804 <__sflush_r+0xf8>
 800d7be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7c2:	b21b      	sxth	r3, r3
 800d7c4:	e01b      	b.n	800d7fe <__sflush_r+0xf2>
 800d7c6:	690f      	ldr	r7, [r1, #16]
 800d7c8:	2f00      	cmp	r7, #0
 800d7ca:	d0f6      	beq.n	800d7ba <__sflush_r+0xae>
 800d7cc:	0793      	lsls	r3, r2, #30
 800d7ce:	680e      	ldr	r6, [r1, #0]
 800d7d0:	bf08      	it	eq
 800d7d2:	694b      	ldreq	r3, [r1, #20]
 800d7d4:	600f      	str	r7, [r1, #0]
 800d7d6:	bf18      	it	ne
 800d7d8:	2300      	movne	r3, #0
 800d7da:	eba6 0807 	sub.w	r8, r6, r7
 800d7de:	608b      	str	r3, [r1, #8]
 800d7e0:	f1b8 0f00 	cmp.w	r8, #0
 800d7e4:	dde9      	ble.n	800d7ba <__sflush_r+0xae>
 800d7e6:	6a21      	ldr	r1, [r4, #32]
 800d7e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d7ea:	4643      	mov	r3, r8
 800d7ec:	463a      	mov	r2, r7
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	47b0      	blx	r6
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	dc08      	bgt.n	800d808 <__sflush_r+0xfc>
 800d7f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7fe:	81a3      	strh	r3, [r4, #12]
 800d800:	f04f 30ff 	mov.w	r0, #4294967295
 800d804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d808:	4407      	add	r7, r0
 800d80a:	eba8 0800 	sub.w	r8, r8, r0
 800d80e:	e7e7      	b.n	800d7e0 <__sflush_r+0xd4>
 800d810:	dfbffffe 	.word	0xdfbffffe

0800d814 <_fflush_r>:
 800d814:	b538      	push	{r3, r4, r5, lr}
 800d816:	690b      	ldr	r3, [r1, #16]
 800d818:	4605      	mov	r5, r0
 800d81a:	460c      	mov	r4, r1
 800d81c:	b913      	cbnz	r3, 800d824 <_fflush_r+0x10>
 800d81e:	2500      	movs	r5, #0
 800d820:	4628      	mov	r0, r5
 800d822:	bd38      	pop	{r3, r4, r5, pc}
 800d824:	b118      	cbz	r0, 800d82e <_fflush_r+0x1a>
 800d826:	6a03      	ldr	r3, [r0, #32]
 800d828:	b90b      	cbnz	r3, 800d82e <_fflush_r+0x1a>
 800d82a:	f7fe fa1b 	bl	800bc64 <__sinit>
 800d82e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d0f3      	beq.n	800d81e <_fflush_r+0xa>
 800d836:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d838:	07d0      	lsls	r0, r2, #31
 800d83a:	d404      	bmi.n	800d846 <_fflush_r+0x32>
 800d83c:	0599      	lsls	r1, r3, #22
 800d83e:	d402      	bmi.n	800d846 <_fflush_r+0x32>
 800d840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d842:	f7fe fb3a 	bl	800beba <__retarget_lock_acquire_recursive>
 800d846:	4628      	mov	r0, r5
 800d848:	4621      	mov	r1, r4
 800d84a:	f7ff ff5f 	bl	800d70c <__sflush_r>
 800d84e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d850:	07da      	lsls	r2, r3, #31
 800d852:	4605      	mov	r5, r0
 800d854:	d4e4      	bmi.n	800d820 <_fflush_r+0xc>
 800d856:	89a3      	ldrh	r3, [r4, #12]
 800d858:	059b      	lsls	r3, r3, #22
 800d85a:	d4e1      	bmi.n	800d820 <_fflush_r+0xc>
 800d85c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d85e:	f7fe fb2d 	bl	800bebc <__retarget_lock_release_recursive>
 800d862:	e7dd      	b.n	800d820 <_fflush_r+0xc>

0800d864 <memmove>:
 800d864:	4288      	cmp	r0, r1
 800d866:	b510      	push	{r4, lr}
 800d868:	eb01 0402 	add.w	r4, r1, r2
 800d86c:	d902      	bls.n	800d874 <memmove+0x10>
 800d86e:	4284      	cmp	r4, r0
 800d870:	4623      	mov	r3, r4
 800d872:	d807      	bhi.n	800d884 <memmove+0x20>
 800d874:	1e43      	subs	r3, r0, #1
 800d876:	42a1      	cmp	r1, r4
 800d878:	d008      	beq.n	800d88c <memmove+0x28>
 800d87a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d87e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d882:	e7f8      	b.n	800d876 <memmove+0x12>
 800d884:	4402      	add	r2, r0
 800d886:	4601      	mov	r1, r0
 800d888:	428a      	cmp	r2, r1
 800d88a:	d100      	bne.n	800d88e <memmove+0x2a>
 800d88c:	bd10      	pop	{r4, pc}
 800d88e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d896:	e7f7      	b.n	800d888 <memmove+0x24>

0800d898 <_sbrk_r>:
 800d898:	b538      	push	{r3, r4, r5, lr}
 800d89a:	4d06      	ldr	r5, [pc, #24]	@ (800d8b4 <_sbrk_r+0x1c>)
 800d89c:	2300      	movs	r3, #0
 800d89e:	4604      	mov	r4, r0
 800d8a0:	4608      	mov	r0, r1
 800d8a2:	602b      	str	r3, [r5, #0]
 800d8a4:	f7f4 fa7c 	bl	8001da0 <_sbrk>
 800d8a8:	1c43      	adds	r3, r0, #1
 800d8aa:	d102      	bne.n	800d8b2 <_sbrk_r+0x1a>
 800d8ac:	682b      	ldr	r3, [r5, #0]
 800d8ae:	b103      	cbz	r3, 800d8b2 <_sbrk_r+0x1a>
 800d8b0:	6023      	str	r3, [r4, #0]
 800d8b2:	bd38      	pop	{r3, r4, r5, pc}
 800d8b4:	20002148 	.word	0x20002148

0800d8b8 <memcpy>:
 800d8b8:	440a      	add	r2, r1
 800d8ba:	4291      	cmp	r1, r2
 800d8bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d8c0:	d100      	bne.n	800d8c4 <memcpy+0xc>
 800d8c2:	4770      	bx	lr
 800d8c4:	b510      	push	{r4, lr}
 800d8c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8ce:	4291      	cmp	r1, r2
 800d8d0:	d1f9      	bne.n	800d8c6 <memcpy+0xe>
 800d8d2:	bd10      	pop	{r4, pc}

0800d8d4 <__assert_func>:
 800d8d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8d6:	4614      	mov	r4, r2
 800d8d8:	461a      	mov	r2, r3
 800d8da:	4b09      	ldr	r3, [pc, #36]	@ (800d900 <__assert_func+0x2c>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4605      	mov	r5, r0
 800d8e0:	68d8      	ldr	r0, [r3, #12]
 800d8e2:	b954      	cbnz	r4, 800d8fa <__assert_func+0x26>
 800d8e4:	4b07      	ldr	r3, [pc, #28]	@ (800d904 <__assert_func+0x30>)
 800d8e6:	461c      	mov	r4, r3
 800d8e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d8ec:	9100      	str	r1, [sp, #0]
 800d8ee:	462b      	mov	r3, r5
 800d8f0:	4905      	ldr	r1, [pc, #20]	@ (800d908 <__assert_func+0x34>)
 800d8f2:	f000 f86f 	bl	800d9d4 <fiprintf>
 800d8f6:	f000 f87f 	bl	800d9f8 <abort>
 800d8fa:	4b04      	ldr	r3, [pc, #16]	@ (800d90c <__assert_func+0x38>)
 800d8fc:	e7f4      	b.n	800d8e8 <__assert_func+0x14>
 800d8fe:	bf00      	nop
 800d900:	20000108 	.word	0x20000108
 800d904:	0800e756 	.word	0x0800e756
 800d908:	0800e728 	.word	0x0800e728
 800d90c:	0800e71b 	.word	0x0800e71b

0800d910 <_calloc_r>:
 800d910:	b570      	push	{r4, r5, r6, lr}
 800d912:	fba1 5402 	umull	r5, r4, r1, r2
 800d916:	b93c      	cbnz	r4, 800d928 <_calloc_r+0x18>
 800d918:	4629      	mov	r1, r5
 800d91a:	f7ff f991 	bl	800cc40 <_malloc_r>
 800d91e:	4606      	mov	r6, r0
 800d920:	b928      	cbnz	r0, 800d92e <_calloc_r+0x1e>
 800d922:	2600      	movs	r6, #0
 800d924:	4630      	mov	r0, r6
 800d926:	bd70      	pop	{r4, r5, r6, pc}
 800d928:	220c      	movs	r2, #12
 800d92a:	6002      	str	r2, [r0, #0]
 800d92c:	e7f9      	b.n	800d922 <_calloc_r+0x12>
 800d92e:	462a      	mov	r2, r5
 800d930:	4621      	mov	r1, r4
 800d932:	f7fe fa44 	bl	800bdbe <memset>
 800d936:	e7f5      	b.n	800d924 <_calloc_r+0x14>

0800d938 <__ascii_mbtowc>:
 800d938:	b082      	sub	sp, #8
 800d93a:	b901      	cbnz	r1, 800d93e <__ascii_mbtowc+0x6>
 800d93c:	a901      	add	r1, sp, #4
 800d93e:	b142      	cbz	r2, 800d952 <__ascii_mbtowc+0x1a>
 800d940:	b14b      	cbz	r3, 800d956 <__ascii_mbtowc+0x1e>
 800d942:	7813      	ldrb	r3, [r2, #0]
 800d944:	600b      	str	r3, [r1, #0]
 800d946:	7812      	ldrb	r2, [r2, #0]
 800d948:	1e10      	subs	r0, r2, #0
 800d94a:	bf18      	it	ne
 800d94c:	2001      	movne	r0, #1
 800d94e:	b002      	add	sp, #8
 800d950:	4770      	bx	lr
 800d952:	4610      	mov	r0, r2
 800d954:	e7fb      	b.n	800d94e <__ascii_mbtowc+0x16>
 800d956:	f06f 0001 	mvn.w	r0, #1
 800d95a:	e7f8      	b.n	800d94e <__ascii_mbtowc+0x16>

0800d95c <_realloc_r>:
 800d95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d960:	4680      	mov	r8, r0
 800d962:	4615      	mov	r5, r2
 800d964:	460c      	mov	r4, r1
 800d966:	b921      	cbnz	r1, 800d972 <_realloc_r+0x16>
 800d968:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d96c:	4611      	mov	r1, r2
 800d96e:	f7ff b967 	b.w	800cc40 <_malloc_r>
 800d972:	b92a      	cbnz	r2, 800d980 <_realloc_r+0x24>
 800d974:	f7ff f8f0 	bl	800cb58 <_free_r>
 800d978:	2400      	movs	r4, #0
 800d97a:	4620      	mov	r0, r4
 800d97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d980:	f000 f841 	bl	800da06 <_malloc_usable_size_r>
 800d984:	4285      	cmp	r5, r0
 800d986:	4606      	mov	r6, r0
 800d988:	d802      	bhi.n	800d990 <_realloc_r+0x34>
 800d98a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d98e:	d8f4      	bhi.n	800d97a <_realloc_r+0x1e>
 800d990:	4629      	mov	r1, r5
 800d992:	4640      	mov	r0, r8
 800d994:	f7ff f954 	bl	800cc40 <_malloc_r>
 800d998:	4607      	mov	r7, r0
 800d99a:	2800      	cmp	r0, #0
 800d99c:	d0ec      	beq.n	800d978 <_realloc_r+0x1c>
 800d99e:	42b5      	cmp	r5, r6
 800d9a0:	462a      	mov	r2, r5
 800d9a2:	4621      	mov	r1, r4
 800d9a4:	bf28      	it	cs
 800d9a6:	4632      	movcs	r2, r6
 800d9a8:	f7ff ff86 	bl	800d8b8 <memcpy>
 800d9ac:	4621      	mov	r1, r4
 800d9ae:	4640      	mov	r0, r8
 800d9b0:	f7ff f8d2 	bl	800cb58 <_free_r>
 800d9b4:	463c      	mov	r4, r7
 800d9b6:	e7e0      	b.n	800d97a <_realloc_r+0x1e>

0800d9b8 <__ascii_wctomb>:
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	4608      	mov	r0, r1
 800d9bc:	b141      	cbz	r1, 800d9d0 <__ascii_wctomb+0x18>
 800d9be:	2aff      	cmp	r2, #255	@ 0xff
 800d9c0:	d904      	bls.n	800d9cc <__ascii_wctomb+0x14>
 800d9c2:	228a      	movs	r2, #138	@ 0x8a
 800d9c4:	601a      	str	r2, [r3, #0]
 800d9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ca:	4770      	bx	lr
 800d9cc:	700a      	strb	r2, [r1, #0]
 800d9ce:	2001      	movs	r0, #1
 800d9d0:	4770      	bx	lr
	...

0800d9d4 <fiprintf>:
 800d9d4:	b40e      	push	{r1, r2, r3}
 800d9d6:	b503      	push	{r0, r1, lr}
 800d9d8:	4601      	mov	r1, r0
 800d9da:	ab03      	add	r3, sp, #12
 800d9dc:	4805      	ldr	r0, [pc, #20]	@ (800d9f4 <fiprintf+0x20>)
 800d9de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9e2:	6800      	ldr	r0, [r0, #0]
 800d9e4:	9301      	str	r3, [sp, #4]
 800d9e6:	f000 f83f 	bl	800da68 <_vfiprintf_r>
 800d9ea:	b002      	add	sp, #8
 800d9ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9f0:	b003      	add	sp, #12
 800d9f2:	4770      	bx	lr
 800d9f4:	20000108 	.word	0x20000108

0800d9f8 <abort>:
 800d9f8:	b508      	push	{r3, lr}
 800d9fa:	2006      	movs	r0, #6
 800d9fc:	f000 fa08 	bl	800de10 <raise>
 800da00:	2001      	movs	r0, #1
 800da02:	f7f4 f955 	bl	8001cb0 <_exit>

0800da06 <_malloc_usable_size_r>:
 800da06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da0a:	1f18      	subs	r0, r3, #4
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	bfbc      	itt	lt
 800da10:	580b      	ldrlt	r3, [r1, r0]
 800da12:	18c0      	addlt	r0, r0, r3
 800da14:	4770      	bx	lr

0800da16 <__sfputc_r>:
 800da16:	6893      	ldr	r3, [r2, #8]
 800da18:	3b01      	subs	r3, #1
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	b410      	push	{r4}
 800da1e:	6093      	str	r3, [r2, #8]
 800da20:	da08      	bge.n	800da34 <__sfputc_r+0x1e>
 800da22:	6994      	ldr	r4, [r2, #24]
 800da24:	42a3      	cmp	r3, r4
 800da26:	db01      	blt.n	800da2c <__sfputc_r+0x16>
 800da28:	290a      	cmp	r1, #10
 800da2a:	d103      	bne.n	800da34 <__sfputc_r+0x1e>
 800da2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da30:	f000 b932 	b.w	800dc98 <__swbuf_r>
 800da34:	6813      	ldr	r3, [r2, #0]
 800da36:	1c58      	adds	r0, r3, #1
 800da38:	6010      	str	r0, [r2, #0]
 800da3a:	7019      	strb	r1, [r3, #0]
 800da3c:	4608      	mov	r0, r1
 800da3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da42:	4770      	bx	lr

0800da44 <__sfputs_r>:
 800da44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da46:	4606      	mov	r6, r0
 800da48:	460f      	mov	r7, r1
 800da4a:	4614      	mov	r4, r2
 800da4c:	18d5      	adds	r5, r2, r3
 800da4e:	42ac      	cmp	r4, r5
 800da50:	d101      	bne.n	800da56 <__sfputs_r+0x12>
 800da52:	2000      	movs	r0, #0
 800da54:	e007      	b.n	800da66 <__sfputs_r+0x22>
 800da56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da5a:	463a      	mov	r2, r7
 800da5c:	4630      	mov	r0, r6
 800da5e:	f7ff ffda 	bl	800da16 <__sfputc_r>
 800da62:	1c43      	adds	r3, r0, #1
 800da64:	d1f3      	bne.n	800da4e <__sfputs_r+0xa>
 800da66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800da68 <_vfiprintf_r>:
 800da68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da6c:	460d      	mov	r5, r1
 800da6e:	b09d      	sub	sp, #116	@ 0x74
 800da70:	4614      	mov	r4, r2
 800da72:	4698      	mov	r8, r3
 800da74:	4606      	mov	r6, r0
 800da76:	b118      	cbz	r0, 800da80 <_vfiprintf_r+0x18>
 800da78:	6a03      	ldr	r3, [r0, #32]
 800da7a:	b90b      	cbnz	r3, 800da80 <_vfiprintf_r+0x18>
 800da7c:	f7fe f8f2 	bl	800bc64 <__sinit>
 800da80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da82:	07d9      	lsls	r1, r3, #31
 800da84:	d405      	bmi.n	800da92 <_vfiprintf_r+0x2a>
 800da86:	89ab      	ldrh	r3, [r5, #12]
 800da88:	059a      	lsls	r2, r3, #22
 800da8a:	d402      	bmi.n	800da92 <_vfiprintf_r+0x2a>
 800da8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da8e:	f7fe fa14 	bl	800beba <__retarget_lock_acquire_recursive>
 800da92:	89ab      	ldrh	r3, [r5, #12]
 800da94:	071b      	lsls	r3, r3, #28
 800da96:	d501      	bpl.n	800da9c <_vfiprintf_r+0x34>
 800da98:	692b      	ldr	r3, [r5, #16]
 800da9a:	b99b      	cbnz	r3, 800dac4 <_vfiprintf_r+0x5c>
 800da9c:	4629      	mov	r1, r5
 800da9e:	4630      	mov	r0, r6
 800daa0:	f000 f938 	bl	800dd14 <__swsetup_r>
 800daa4:	b170      	cbz	r0, 800dac4 <_vfiprintf_r+0x5c>
 800daa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800daa8:	07dc      	lsls	r4, r3, #31
 800daaa:	d504      	bpl.n	800dab6 <_vfiprintf_r+0x4e>
 800daac:	f04f 30ff 	mov.w	r0, #4294967295
 800dab0:	b01d      	add	sp, #116	@ 0x74
 800dab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dab6:	89ab      	ldrh	r3, [r5, #12]
 800dab8:	0598      	lsls	r0, r3, #22
 800daba:	d4f7      	bmi.n	800daac <_vfiprintf_r+0x44>
 800dabc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dabe:	f7fe f9fd 	bl	800bebc <__retarget_lock_release_recursive>
 800dac2:	e7f3      	b.n	800daac <_vfiprintf_r+0x44>
 800dac4:	2300      	movs	r3, #0
 800dac6:	9309      	str	r3, [sp, #36]	@ 0x24
 800dac8:	2320      	movs	r3, #32
 800daca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dace:	f8cd 800c 	str.w	r8, [sp, #12]
 800dad2:	2330      	movs	r3, #48	@ 0x30
 800dad4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dc84 <_vfiprintf_r+0x21c>
 800dad8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dadc:	f04f 0901 	mov.w	r9, #1
 800dae0:	4623      	mov	r3, r4
 800dae2:	469a      	mov	sl, r3
 800dae4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dae8:	b10a      	cbz	r2, 800daee <_vfiprintf_r+0x86>
 800daea:	2a25      	cmp	r2, #37	@ 0x25
 800daec:	d1f9      	bne.n	800dae2 <_vfiprintf_r+0x7a>
 800daee:	ebba 0b04 	subs.w	fp, sl, r4
 800daf2:	d00b      	beq.n	800db0c <_vfiprintf_r+0xa4>
 800daf4:	465b      	mov	r3, fp
 800daf6:	4622      	mov	r2, r4
 800daf8:	4629      	mov	r1, r5
 800dafa:	4630      	mov	r0, r6
 800dafc:	f7ff ffa2 	bl	800da44 <__sfputs_r>
 800db00:	3001      	adds	r0, #1
 800db02:	f000 80a7 	beq.w	800dc54 <_vfiprintf_r+0x1ec>
 800db06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db08:	445a      	add	r2, fp
 800db0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800db0c:	f89a 3000 	ldrb.w	r3, [sl]
 800db10:	2b00      	cmp	r3, #0
 800db12:	f000 809f 	beq.w	800dc54 <_vfiprintf_r+0x1ec>
 800db16:	2300      	movs	r3, #0
 800db18:	f04f 32ff 	mov.w	r2, #4294967295
 800db1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db20:	f10a 0a01 	add.w	sl, sl, #1
 800db24:	9304      	str	r3, [sp, #16]
 800db26:	9307      	str	r3, [sp, #28]
 800db28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db2c:	931a      	str	r3, [sp, #104]	@ 0x68
 800db2e:	4654      	mov	r4, sl
 800db30:	2205      	movs	r2, #5
 800db32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db36:	4853      	ldr	r0, [pc, #332]	@ (800dc84 <_vfiprintf_r+0x21c>)
 800db38:	f7f2 fb52 	bl	80001e0 <memchr>
 800db3c:	9a04      	ldr	r2, [sp, #16]
 800db3e:	b9d8      	cbnz	r0, 800db78 <_vfiprintf_r+0x110>
 800db40:	06d1      	lsls	r1, r2, #27
 800db42:	bf44      	itt	mi
 800db44:	2320      	movmi	r3, #32
 800db46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db4a:	0713      	lsls	r3, r2, #28
 800db4c:	bf44      	itt	mi
 800db4e:	232b      	movmi	r3, #43	@ 0x2b
 800db50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db54:	f89a 3000 	ldrb.w	r3, [sl]
 800db58:	2b2a      	cmp	r3, #42	@ 0x2a
 800db5a:	d015      	beq.n	800db88 <_vfiprintf_r+0x120>
 800db5c:	9a07      	ldr	r2, [sp, #28]
 800db5e:	4654      	mov	r4, sl
 800db60:	2000      	movs	r0, #0
 800db62:	f04f 0c0a 	mov.w	ip, #10
 800db66:	4621      	mov	r1, r4
 800db68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db6c:	3b30      	subs	r3, #48	@ 0x30
 800db6e:	2b09      	cmp	r3, #9
 800db70:	d94b      	bls.n	800dc0a <_vfiprintf_r+0x1a2>
 800db72:	b1b0      	cbz	r0, 800dba2 <_vfiprintf_r+0x13a>
 800db74:	9207      	str	r2, [sp, #28]
 800db76:	e014      	b.n	800dba2 <_vfiprintf_r+0x13a>
 800db78:	eba0 0308 	sub.w	r3, r0, r8
 800db7c:	fa09 f303 	lsl.w	r3, r9, r3
 800db80:	4313      	orrs	r3, r2
 800db82:	9304      	str	r3, [sp, #16]
 800db84:	46a2      	mov	sl, r4
 800db86:	e7d2      	b.n	800db2e <_vfiprintf_r+0xc6>
 800db88:	9b03      	ldr	r3, [sp, #12]
 800db8a:	1d19      	adds	r1, r3, #4
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	9103      	str	r1, [sp, #12]
 800db90:	2b00      	cmp	r3, #0
 800db92:	bfbb      	ittet	lt
 800db94:	425b      	neglt	r3, r3
 800db96:	f042 0202 	orrlt.w	r2, r2, #2
 800db9a:	9307      	strge	r3, [sp, #28]
 800db9c:	9307      	strlt	r3, [sp, #28]
 800db9e:	bfb8      	it	lt
 800dba0:	9204      	strlt	r2, [sp, #16]
 800dba2:	7823      	ldrb	r3, [r4, #0]
 800dba4:	2b2e      	cmp	r3, #46	@ 0x2e
 800dba6:	d10a      	bne.n	800dbbe <_vfiprintf_r+0x156>
 800dba8:	7863      	ldrb	r3, [r4, #1]
 800dbaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbac:	d132      	bne.n	800dc14 <_vfiprintf_r+0x1ac>
 800dbae:	9b03      	ldr	r3, [sp, #12]
 800dbb0:	1d1a      	adds	r2, r3, #4
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	9203      	str	r2, [sp, #12]
 800dbb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dbba:	3402      	adds	r4, #2
 800dbbc:	9305      	str	r3, [sp, #20]
 800dbbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dc94 <_vfiprintf_r+0x22c>
 800dbc2:	7821      	ldrb	r1, [r4, #0]
 800dbc4:	2203      	movs	r2, #3
 800dbc6:	4650      	mov	r0, sl
 800dbc8:	f7f2 fb0a 	bl	80001e0 <memchr>
 800dbcc:	b138      	cbz	r0, 800dbde <_vfiprintf_r+0x176>
 800dbce:	9b04      	ldr	r3, [sp, #16]
 800dbd0:	eba0 000a 	sub.w	r0, r0, sl
 800dbd4:	2240      	movs	r2, #64	@ 0x40
 800dbd6:	4082      	lsls	r2, r0
 800dbd8:	4313      	orrs	r3, r2
 800dbda:	3401      	adds	r4, #1
 800dbdc:	9304      	str	r3, [sp, #16]
 800dbde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbe2:	4829      	ldr	r0, [pc, #164]	@ (800dc88 <_vfiprintf_r+0x220>)
 800dbe4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dbe8:	2206      	movs	r2, #6
 800dbea:	f7f2 faf9 	bl	80001e0 <memchr>
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	d03f      	beq.n	800dc72 <_vfiprintf_r+0x20a>
 800dbf2:	4b26      	ldr	r3, [pc, #152]	@ (800dc8c <_vfiprintf_r+0x224>)
 800dbf4:	bb1b      	cbnz	r3, 800dc3e <_vfiprintf_r+0x1d6>
 800dbf6:	9b03      	ldr	r3, [sp, #12]
 800dbf8:	3307      	adds	r3, #7
 800dbfa:	f023 0307 	bic.w	r3, r3, #7
 800dbfe:	3308      	adds	r3, #8
 800dc00:	9303      	str	r3, [sp, #12]
 800dc02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc04:	443b      	add	r3, r7
 800dc06:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc08:	e76a      	b.n	800dae0 <_vfiprintf_r+0x78>
 800dc0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc0e:	460c      	mov	r4, r1
 800dc10:	2001      	movs	r0, #1
 800dc12:	e7a8      	b.n	800db66 <_vfiprintf_r+0xfe>
 800dc14:	2300      	movs	r3, #0
 800dc16:	3401      	adds	r4, #1
 800dc18:	9305      	str	r3, [sp, #20]
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	f04f 0c0a 	mov.w	ip, #10
 800dc20:	4620      	mov	r0, r4
 800dc22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc26:	3a30      	subs	r2, #48	@ 0x30
 800dc28:	2a09      	cmp	r2, #9
 800dc2a:	d903      	bls.n	800dc34 <_vfiprintf_r+0x1cc>
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d0c6      	beq.n	800dbbe <_vfiprintf_r+0x156>
 800dc30:	9105      	str	r1, [sp, #20]
 800dc32:	e7c4      	b.n	800dbbe <_vfiprintf_r+0x156>
 800dc34:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc38:	4604      	mov	r4, r0
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	e7f0      	b.n	800dc20 <_vfiprintf_r+0x1b8>
 800dc3e:	ab03      	add	r3, sp, #12
 800dc40:	9300      	str	r3, [sp, #0]
 800dc42:	462a      	mov	r2, r5
 800dc44:	4b12      	ldr	r3, [pc, #72]	@ (800dc90 <_vfiprintf_r+0x228>)
 800dc46:	a904      	add	r1, sp, #16
 800dc48:	4630      	mov	r0, r6
 800dc4a:	f7fd fbc7 	bl	800b3dc <_printf_float>
 800dc4e:	4607      	mov	r7, r0
 800dc50:	1c78      	adds	r0, r7, #1
 800dc52:	d1d6      	bne.n	800dc02 <_vfiprintf_r+0x19a>
 800dc54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc56:	07d9      	lsls	r1, r3, #31
 800dc58:	d405      	bmi.n	800dc66 <_vfiprintf_r+0x1fe>
 800dc5a:	89ab      	ldrh	r3, [r5, #12]
 800dc5c:	059a      	lsls	r2, r3, #22
 800dc5e:	d402      	bmi.n	800dc66 <_vfiprintf_r+0x1fe>
 800dc60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc62:	f7fe f92b 	bl	800bebc <__retarget_lock_release_recursive>
 800dc66:	89ab      	ldrh	r3, [r5, #12]
 800dc68:	065b      	lsls	r3, r3, #25
 800dc6a:	f53f af1f 	bmi.w	800daac <_vfiprintf_r+0x44>
 800dc6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc70:	e71e      	b.n	800dab0 <_vfiprintf_r+0x48>
 800dc72:	ab03      	add	r3, sp, #12
 800dc74:	9300      	str	r3, [sp, #0]
 800dc76:	462a      	mov	r2, r5
 800dc78:	4b05      	ldr	r3, [pc, #20]	@ (800dc90 <_vfiprintf_r+0x228>)
 800dc7a:	a904      	add	r1, sp, #16
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	f7fd fe45 	bl	800b90c <_printf_i>
 800dc82:	e7e4      	b.n	800dc4e <_vfiprintf_r+0x1e6>
 800dc84:	0800e700 	.word	0x0800e700
 800dc88:	0800e70a 	.word	0x0800e70a
 800dc8c:	0800b3dd 	.word	0x0800b3dd
 800dc90:	0800da45 	.word	0x0800da45
 800dc94:	0800e706 	.word	0x0800e706

0800dc98 <__swbuf_r>:
 800dc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc9a:	460e      	mov	r6, r1
 800dc9c:	4614      	mov	r4, r2
 800dc9e:	4605      	mov	r5, r0
 800dca0:	b118      	cbz	r0, 800dcaa <__swbuf_r+0x12>
 800dca2:	6a03      	ldr	r3, [r0, #32]
 800dca4:	b90b      	cbnz	r3, 800dcaa <__swbuf_r+0x12>
 800dca6:	f7fd ffdd 	bl	800bc64 <__sinit>
 800dcaa:	69a3      	ldr	r3, [r4, #24]
 800dcac:	60a3      	str	r3, [r4, #8]
 800dcae:	89a3      	ldrh	r3, [r4, #12]
 800dcb0:	071a      	lsls	r2, r3, #28
 800dcb2:	d501      	bpl.n	800dcb8 <__swbuf_r+0x20>
 800dcb4:	6923      	ldr	r3, [r4, #16]
 800dcb6:	b943      	cbnz	r3, 800dcca <__swbuf_r+0x32>
 800dcb8:	4621      	mov	r1, r4
 800dcba:	4628      	mov	r0, r5
 800dcbc:	f000 f82a 	bl	800dd14 <__swsetup_r>
 800dcc0:	b118      	cbz	r0, 800dcca <__swbuf_r+0x32>
 800dcc2:	f04f 37ff 	mov.w	r7, #4294967295
 800dcc6:	4638      	mov	r0, r7
 800dcc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcca:	6823      	ldr	r3, [r4, #0]
 800dccc:	6922      	ldr	r2, [r4, #16]
 800dcce:	1a98      	subs	r0, r3, r2
 800dcd0:	6963      	ldr	r3, [r4, #20]
 800dcd2:	b2f6      	uxtb	r6, r6
 800dcd4:	4283      	cmp	r3, r0
 800dcd6:	4637      	mov	r7, r6
 800dcd8:	dc05      	bgt.n	800dce6 <__swbuf_r+0x4e>
 800dcda:	4621      	mov	r1, r4
 800dcdc:	4628      	mov	r0, r5
 800dcde:	f7ff fd99 	bl	800d814 <_fflush_r>
 800dce2:	2800      	cmp	r0, #0
 800dce4:	d1ed      	bne.n	800dcc2 <__swbuf_r+0x2a>
 800dce6:	68a3      	ldr	r3, [r4, #8]
 800dce8:	3b01      	subs	r3, #1
 800dcea:	60a3      	str	r3, [r4, #8]
 800dcec:	6823      	ldr	r3, [r4, #0]
 800dcee:	1c5a      	adds	r2, r3, #1
 800dcf0:	6022      	str	r2, [r4, #0]
 800dcf2:	701e      	strb	r6, [r3, #0]
 800dcf4:	6962      	ldr	r2, [r4, #20]
 800dcf6:	1c43      	adds	r3, r0, #1
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d004      	beq.n	800dd06 <__swbuf_r+0x6e>
 800dcfc:	89a3      	ldrh	r3, [r4, #12]
 800dcfe:	07db      	lsls	r3, r3, #31
 800dd00:	d5e1      	bpl.n	800dcc6 <__swbuf_r+0x2e>
 800dd02:	2e0a      	cmp	r6, #10
 800dd04:	d1df      	bne.n	800dcc6 <__swbuf_r+0x2e>
 800dd06:	4621      	mov	r1, r4
 800dd08:	4628      	mov	r0, r5
 800dd0a:	f7ff fd83 	bl	800d814 <_fflush_r>
 800dd0e:	2800      	cmp	r0, #0
 800dd10:	d0d9      	beq.n	800dcc6 <__swbuf_r+0x2e>
 800dd12:	e7d6      	b.n	800dcc2 <__swbuf_r+0x2a>

0800dd14 <__swsetup_r>:
 800dd14:	b538      	push	{r3, r4, r5, lr}
 800dd16:	4b29      	ldr	r3, [pc, #164]	@ (800ddbc <__swsetup_r+0xa8>)
 800dd18:	4605      	mov	r5, r0
 800dd1a:	6818      	ldr	r0, [r3, #0]
 800dd1c:	460c      	mov	r4, r1
 800dd1e:	b118      	cbz	r0, 800dd28 <__swsetup_r+0x14>
 800dd20:	6a03      	ldr	r3, [r0, #32]
 800dd22:	b90b      	cbnz	r3, 800dd28 <__swsetup_r+0x14>
 800dd24:	f7fd ff9e 	bl	800bc64 <__sinit>
 800dd28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd2c:	0719      	lsls	r1, r3, #28
 800dd2e:	d422      	bmi.n	800dd76 <__swsetup_r+0x62>
 800dd30:	06da      	lsls	r2, r3, #27
 800dd32:	d407      	bmi.n	800dd44 <__swsetup_r+0x30>
 800dd34:	2209      	movs	r2, #9
 800dd36:	602a      	str	r2, [r5, #0]
 800dd38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd3c:	81a3      	strh	r3, [r4, #12]
 800dd3e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd42:	e033      	b.n	800ddac <__swsetup_r+0x98>
 800dd44:	0758      	lsls	r0, r3, #29
 800dd46:	d512      	bpl.n	800dd6e <__swsetup_r+0x5a>
 800dd48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd4a:	b141      	cbz	r1, 800dd5e <__swsetup_r+0x4a>
 800dd4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd50:	4299      	cmp	r1, r3
 800dd52:	d002      	beq.n	800dd5a <__swsetup_r+0x46>
 800dd54:	4628      	mov	r0, r5
 800dd56:	f7fe feff 	bl	800cb58 <_free_r>
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd5e:	89a3      	ldrh	r3, [r4, #12]
 800dd60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dd64:	81a3      	strh	r3, [r4, #12]
 800dd66:	2300      	movs	r3, #0
 800dd68:	6063      	str	r3, [r4, #4]
 800dd6a:	6923      	ldr	r3, [r4, #16]
 800dd6c:	6023      	str	r3, [r4, #0]
 800dd6e:	89a3      	ldrh	r3, [r4, #12]
 800dd70:	f043 0308 	orr.w	r3, r3, #8
 800dd74:	81a3      	strh	r3, [r4, #12]
 800dd76:	6923      	ldr	r3, [r4, #16]
 800dd78:	b94b      	cbnz	r3, 800dd8e <__swsetup_r+0x7a>
 800dd7a:	89a3      	ldrh	r3, [r4, #12]
 800dd7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dd80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd84:	d003      	beq.n	800dd8e <__swsetup_r+0x7a>
 800dd86:	4621      	mov	r1, r4
 800dd88:	4628      	mov	r0, r5
 800dd8a:	f000 f883 	bl	800de94 <__smakebuf_r>
 800dd8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd92:	f013 0201 	ands.w	r2, r3, #1
 800dd96:	d00a      	beq.n	800ddae <__swsetup_r+0x9a>
 800dd98:	2200      	movs	r2, #0
 800dd9a:	60a2      	str	r2, [r4, #8]
 800dd9c:	6962      	ldr	r2, [r4, #20]
 800dd9e:	4252      	negs	r2, r2
 800dda0:	61a2      	str	r2, [r4, #24]
 800dda2:	6922      	ldr	r2, [r4, #16]
 800dda4:	b942      	cbnz	r2, 800ddb8 <__swsetup_r+0xa4>
 800dda6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ddaa:	d1c5      	bne.n	800dd38 <__swsetup_r+0x24>
 800ddac:	bd38      	pop	{r3, r4, r5, pc}
 800ddae:	0799      	lsls	r1, r3, #30
 800ddb0:	bf58      	it	pl
 800ddb2:	6962      	ldrpl	r2, [r4, #20]
 800ddb4:	60a2      	str	r2, [r4, #8]
 800ddb6:	e7f4      	b.n	800dda2 <__swsetup_r+0x8e>
 800ddb8:	2000      	movs	r0, #0
 800ddba:	e7f7      	b.n	800ddac <__swsetup_r+0x98>
 800ddbc:	20000108 	.word	0x20000108

0800ddc0 <_raise_r>:
 800ddc0:	291f      	cmp	r1, #31
 800ddc2:	b538      	push	{r3, r4, r5, lr}
 800ddc4:	4605      	mov	r5, r0
 800ddc6:	460c      	mov	r4, r1
 800ddc8:	d904      	bls.n	800ddd4 <_raise_r+0x14>
 800ddca:	2316      	movs	r3, #22
 800ddcc:	6003      	str	r3, [r0, #0]
 800ddce:	f04f 30ff 	mov.w	r0, #4294967295
 800ddd2:	bd38      	pop	{r3, r4, r5, pc}
 800ddd4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ddd6:	b112      	cbz	r2, 800ddde <_raise_r+0x1e>
 800ddd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dddc:	b94b      	cbnz	r3, 800ddf2 <_raise_r+0x32>
 800ddde:	4628      	mov	r0, r5
 800dde0:	f000 f830 	bl	800de44 <_getpid_r>
 800dde4:	4622      	mov	r2, r4
 800dde6:	4601      	mov	r1, r0
 800dde8:	4628      	mov	r0, r5
 800ddea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddee:	f000 b817 	b.w	800de20 <_kill_r>
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	d00a      	beq.n	800de0c <_raise_r+0x4c>
 800ddf6:	1c59      	adds	r1, r3, #1
 800ddf8:	d103      	bne.n	800de02 <_raise_r+0x42>
 800ddfa:	2316      	movs	r3, #22
 800ddfc:	6003      	str	r3, [r0, #0]
 800ddfe:	2001      	movs	r0, #1
 800de00:	e7e7      	b.n	800ddd2 <_raise_r+0x12>
 800de02:	2100      	movs	r1, #0
 800de04:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800de08:	4620      	mov	r0, r4
 800de0a:	4798      	blx	r3
 800de0c:	2000      	movs	r0, #0
 800de0e:	e7e0      	b.n	800ddd2 <_raise_r+0x12>

0800de10 <raise>:
 800de10:	4b02      	ldr	r3, [pc, #8]	@ (800de1c <raise+0xc>)
 800de12:	4601      	mov	r1, r0
 800de14:	6818      	ldr	r0, [r3, #0]
 800de16:	f7ff bfd3 	b.w	800ddc0 <_raise_r>
 800de1a:	bf00      	nop
 800de1c:	20000108 	.word	0x20000108

0800de20 <_kill_r>:
 800de20:	b538      	push	{r3, r4, r5, lr}
 800de22:	4d07      	ldr	r5, [pc, #28]	@ (800de40 <_kill_r+0x20>)
 800de24:	2300      	movs	r3, #0
 800de26:	4604      	mov	r4, r0
 800de28:	4608      	mov	r0, r1
 800de2a:	4611      	mov	r1, r2
 800de2c:	602b      	str	r3, [r5, #0]
 800de2e:	f7f3 ff2f 	bl	8001c90 <_kill>
 800de32:	1c43      	adds	r3, r0, #1
 800de34:	d102      	bne.n	800de3c <_kill_r+0x1c>
 800de36:	682b      	ldr	r3, [r5, #0]
 800de38:	b103      	cbz	r3, 800de3c <_kill_r+0x1c>
 800de3a:	6023      	str	r3, [r4, #0]
 800de3c:	bd38      	pop	{r3, r4, r5, pc}
 800de3e:	bf00      	nop
 800de40:	20002148 	.word	0x20002148

0800de44 <_getpid_r>:
 800de44:	f7f3 bf1c 	b.w	8001c80 <_getpid>

0800de48 <__swhatbuf_r>:
 800de48:	b570      	push	{r4, r5, r6, lr}
 800de4a:	460c      	mov	r4, r1
 800de4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de50:	2900      	cmp	r1, #0
 800de52:	b096      	sub	sp, #88	@ 0x58
 800de54:	4615      	mov	r5, r2
 800de56:	461e      	mov	r6, r3
 800de58:	da0d      	bge.n	800de76 <__swhatbuf_r+0x2e>
 800de5a:	89a3      	ldrh	r3, [r4, #12]
 800de5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800de60:	f04f 0100 	mov.w	r1, #0
 800de64:	bf14      	ite	ne
 800de66:	2340      	movne	r3, #64	@ 0x40
 800de68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800de6c:	2000      	movs	r0, #0
 800de6e:	6031      	str	r1, [r6, #0]
 800de70:	602b      	str	r3, [r5, #0]
 800de72:	b016      	add	sp, #88	@ 0x58
 800de74:	bd70      	pop	{r4, r5, r6, pc}
 800de76:	466a      	mov	r2, sp
 800de78:	f000 f848 	bl	800df0c <_fstat_r>
 800de7c:	2800      	cmp	r0, #0
 800de7e:	dbec      	blt.n	800de5a <__swhatbuf_r+0x12>
 800de80:	9901      	ldr	r1, [sp, #4]
 800de82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800de86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800de8a:	4259      	negs	r1, r3
 800de8c:	4159      	adcs	r1, r3
 800de8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de92:	e7eb      	b.n	800de6c <__swhatbuf_r+0x24>

0800de94 <__smakebuf_r>:
 800de94:	898b      	ldrh	r3, [r1, #12]
 800de96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de98:	079d      	lsls	r5, r3, #30
 800de9a:	4606      	mov	r6, r0
 800de9c:	460c      	mov	r4, r1
 800de9e:	d507      	bpl.n	800deb0 <__smakebuf_r+0x1c>
 800dea0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dea4:	6023      	str	r3, [r4, #0]
 800dea6:	6123      	str	r3, [r4, #16]
 800dea8:	2301      	movs	r3, #1
 800deaa:	6163      	str	r3, [r4, #20]
 800deac:	b003      	add	sp, #12
 800deae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deb0:	ab01      	add	r3, sp, #4
 800deb2:	466a      	mov	r2, sp
 800deb4:	f7ff ffc8 	bl	800de48 <__swhatbuf_r>
 800deb8:	9f00      	ldr	r7, [sp, #0]
 800deba:	4605      	mov	r5, r0
 800debc:	4639      	mov	r1, r7
 800debe:	4630      	mov	r0, r6
 800dec0:	f7fe febe 	bl	800cc40 <_malloc_r>
 800dec4:	b948      	cbnz	r0, 800deda <__smakebuf_r+0x46>
 800dec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800deca:	059a      	lsls	r2, r3, #22
 800decc:	d4ee      	bmi.n	800deac <__smakebuf_r+0x18>
 800dece:	f023 0303 	bic.w	r3, r3, #3
 800ded2:	f043 0302 	orr.w	r3, r3, #2
 800ded6:	81a3      	strh	r3, [r4, #12]
 800ded8:	e7e2      	b.n	800dea0 <__smakebuf_r+0xc>
 800deda:	89a3      	ldrh	r3, [r4, #12]
 800dedc:	6020      	str	r0, [r4, #0]
 800dede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dee2:	81a3      	strh	r3, [r4, #12]
 800dee4:	9b01      	ldr	r3, [sp, #4]
 800dee6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800deea:	b15b      	cbz	r3, 800df04 <__smakebuf_r+0x70>
 800deec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800def0:	4630      	mov	r0, r6
 800def2:	f000 f81d 	bl	800df30 <_isatty_r>
 800def6:	b128      	cbz	r0, 800df04 <__smakebuf_r+0x70>
 800def8:	89a3      	ldrh	r3, [r4, #12]
 800defa:	f023 0303 	bic.w	r3, r3, #3
 800defe:	f043 0301 	orr.w	r3, r3, #1
 800df02:	81a3      	strh	r3, [r4, #12]
 800df04:	89a3      	ldrh	r3, [r4, #12]
 800df06:	431d      	orrs	r5, r3
 800df08:	81a5      	strh	r5, [r4, #12]
 800df0a:	e7cf      	b.n	800deac <__smakebuf_r+0x18>

0800df0c <_fstat_r>:
 800df0c:	b538      	push	{r3, r4, r5, lr}
 800df0e:	4d07      	ldr	r5, [pc, #28]	@ (800df2c <_fstat_r+0x20>)
 800df10:	2300      	movs	r3, #0
 800df12:	4604      	mov	r4, r0
 800df14:	4608      	mov	r0, r1
 800df16:	4611      	mov	r1, r2
 800df18:	602b      	str	r3, [r5, #0]
 800df1a:	f7f3 ff19 	bl	8001d50 <_fstat>
 800df1e:	1c43      	adds	r3, r0, #1
 800df20:	d102      	bne.n	800df28 <_fstat_r+0x1c>
 800df22:	682b      	ldr	r3, [r5, #0]
 800df24:	b103      	cbz	r3, 800df28 <_fstat_r+0x1c>
 800df26:	6023      	str	r3, [r4, #0]
 800df28:	bd38      	pop	{r3, r4, r5, pc}
 800df2a:	bf00      	nop
 800df2c:	20002148 	.word	0x20002148

0800df30 <_isatty_r>:
 800df30:	b538      	push	{r3, r4, r5, lr}
 800df32:	4d06      	ldr	r5, [pc, #24]	@ (800df4c <_isatty_r+0x1c>)
 800df34:	2300      	movs	r3, #0
 800df36:	4604      	mov	r4, r0
 800df38:	4608      	mov	r0, r1
 800df3a:	602b      	str	r3, [r5, #0]
 800df3c:	f7f3 ff18 	bl	8001d70 <_isatty>
 800df40:	1c43      	adds	r3, r0, #1
 800df42:	d102      	bne.n	800df4a <_isatty_r+0x1a>
 800df44:	682b      	ldr	r3, [r5, #0]
 800df46:	b103      	cbz	r3, 800df4a <_isatty_r+0x1a>
 800df48:	6023      	str	r3, [r4, #0]
 800df4a:	bd38      	pop	{r3, r4, r5, pc}
 800df4c:	20002148 	.word	0x20002148

0800df50 <atan2>:
 800df50:	f000 b802 	b.w	800df58 <__ieee754_atan2>
 800df54:	0000      	movs	r0, r0
	...

0800df58 <__ieee754_atan2>:
 800df58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df5c:	ec57 6b11 	vmov	r6, r7, d1
 800df60:	4273      	negs	r3, r6
 800df62:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800e0e0 <__ieee754_atan2+0x188>
 800df66:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800df6a:	4333      	orrs	r3, r6
 800df6c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800df70:	4543      	cmp	r3, r8
 800df72:	ec51 0b10 	vmov	r0, r1, d0
 800df76:	4635      	mov	r5, r6
 800df78:	d809      	bhi.n	800df8e <__ieee754_atan2+0x36>
 800df7a:	4244      	negs	r4, r0
 800df7c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800df80:	4304      	orrs	r4, r0
 800df82:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800df86:	4544      	cmp	r4, r8
 800df88:	468e      	mov	lr, r1
 800df8a:	4681      	mov	r9, r0
 800df8c:	d907      	bls.n	800df9e <__ieee754_atan2+0x46>
 800df8e:	4632      	mov	r2, r6
 800df90:	463b      	mov	r3, r7
 800df92:	f7f2 f983 	bl	800029c <__adddf3>
 800df96:	ec41 0b10 	vmov	d0, r0, r1
 800df9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df9e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800dfa2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800dfa6:	4334      	orrs	r4, r6
 800dfa8:	d103      	bne.n	800dfb2 <__ieee754_atan2+0x5a>
 800dfaa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfae:	f000 b89b 	b.w	800e0e8 <atan>
 800dfb2:	17bc      	asrs	r4, r7, #30
 800dfb4:	f004 0402 	and.w	r4, r4, #2
 800dfb8:	ea53 0909 	orrs.w	r9, r3, r9
 800dfbc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800dfc0:	d107      	bne.n	800dfd2 <__ieee754_atan2+0x7a>
 800dfc2:	2c02      	cmp	r4, #2
 800dfc4:	d05f      	beq.n	800e086 <__ieee754_atan2+0x12e>
 800dfc6:	2c03      	cmp	r4, #3
 800dfc8:	d1e5      	bne.n	800df96 <__ieee754_atan2+0x3e>
 800dfca:	a141      	add	r1, pc, #260	@ (adr r1, 800e0d0 <__ieee754_atan2+0x178>)
 800dfcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfd0:	e7e1      	b.n	800df96 <__ieee754_atan2+0x3e>
 800dfd2:	4315      	orrs	r5, r2
 800dfd4:	d106      	bne.n	800dfe4 <__ieee754_atan2+0x8c>
 800dfd6:	f1be 0f00 	cmp.w	lr, #0
 800dfda:	da5f      	bge.n	800e09c <__ieee754_atan2+0x144>
 800dfdc:	a13e      	add	r1, pc, #248	@ (adr r1, 800e0d8 <__ieee754_atan2+0x180>)
 800dfde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfe2:	e7d8      	b.n	800df96 <__ieee754_atan2+0x3e>
 800dfe4:	4542      	cmp	r2, r8
 800dfe6:	d10f      	bne.n	800e008 <__ieee754_atan2+0xb0>
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	f104 34ff 	add.w	r4, r4, #4294967295
 800dfee:	d107      	bne.n	800e000 <__ieee754_atan2+0xa8>
 800dff0:	2c02      	cmp	r4, #2
 800dff2:	d84c      	bhi.n	800e08e <__ieee754_atan2+0x136>
 800dff4:	4b34      	ldr	r3, [pc, #208]	@ (800e0c8 <__ieee754_atan2+0x170>)
 800dff6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dffa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dffe:	e7ca      	b.n	800df96 <__ieee754_atan2+0x3e>
 800e000:	2c02      	cmp	r4, #2
 800e002:	d848      	bhi.n	800e096 <__ieee754_atan2+0x13e>
 800e004:	4b31      	ldr	r3, [pc, #196]	@ (800e0cc <__ieee754_atan2+0x174>)
 800e006:	e7f6      	b.n	800dff6 <__ieee754_atan2+0x9e>
 800e008:	4543      	cmp	r3, r8
 800e00a:	d0e4      	beq.n	800dfd6 <__ieee754_atan2+0x7e>
 800e00c:	1a9b      	subs	r3, r3, r2
 800e00e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800e012:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e016:	da1e      	bge.n	800e056 <__ieee754_atan2+0xfe>
 800e018:	2f00      	cmp	r7, #0
 800e01a:	da01      	bge.n	800e020 <__ieee754_atan2+0xc8>
 800e01c:	323c      	adds	r2, #60	@ 0x3c
 800e01e:	db1e      	blt.n	800e05e <__ieee754_atan2+0x106>
 800e020:	4632      	mov	r2, r6
 800e022:	463b      	mov	r3, r7
 800e024:	f7f2 fc1a 	bl	800085c <__aeabi_ddiv>
 800e028:	ec41 0b10 	vmov	d0, r0, r1
 800e02c:	f000 f9f4 	bl	800e418 <fabs>
 800e030:	f000 f85a 	bl	800e0e8 <atan>
 800e034:	ec51 0b10 	vmov	r0, r1, d0
 800e038:	2c01      	cmp	r4, #1
 800e03a:	d013      	beq.n	800e064 <__ieee754_atan2+0x10c>
 800e03c:	2c02      	cmp	r4, #2
 800e03e:	d015      	beq.n	800e06c <__ieee754_atan2+0x114>
 800e040:	2c00      	cmp	r4, #0
 800e042:	d0a8      	beq.n	800df96 <__ieee754_atan2+0x3e>
 800e044:	a318      	add	r3, pc, #96	@ (adr r3, 800e0a8 <__ieee754_atan2+0x150>)
 800e046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04a:	f7f2 f925 	bl	8000298 <__aeabi_dsub>
 800e04e:	a318      	add	r3, pc, #96	@ (adr r3, 800e0b0 <__ieee754_atan2+0x158>)
 800e050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e054:	e014      	b.n	800e080 <__ieee754_atan2+0x128>
 800e056:	a118      	add	r1, pc, #96	@ (adr r1, 800e0b8 <__ieee754_atan2+0x160>)
 800e058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e05c:	e7ec      	b.n	800e038 <__ieee754_atan2+0xe0>
 800e05e:	2000      	movs	r0, #0
 800e060:	2100      	movs	r1, #0
 800e062:	e7e9      	b.n	800e038 <__ieee754_atan2+0xe0>
 800e064:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e068:	4619      	mov	r1, r3
 800e06a:	e794      	b.n	800df96 <__ieee754_atan2+0x3e>
 800e06c:	a30e      	add	r3, pc, #56	@ (adr r3, 800e0a8 <__ieee754_atan2+0x150>)
 800e06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e072:	f7f2 f911 	bl	8000298 <__aeabi_dsub>
 800e076:	4602      	mov	r2, r0
 800e078:	460b      	mov	r3, r1
 800e07a:	a10d      	add	r1, pc, #52	@ (adr r1, 800e0b0 <__ieee754_atan2+0x158>)
 800e07c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e080:	f7f2 f90a 	bl	8000298 <__aeabi_dsub>
 800e084:	e787      	b.n	800df96 <__ieee754_atan2+0x3e>
 800e086:	a10a      	add	r1, pc, #40	@ (adr r1, 800e0b0 <__ieee754_atan2+0x158>)
 800e088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e08c:	e783      	b.n	800df96 <__ieee754_atan2+0x3e>
 800e08e:	a10c      	add	r1, pc, #48	@ (adr r1, 800e0c0 <__ieee754_atan2+0x168>)
 800e090:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e094:	e77f      	b.n	800df96 <__ieee754_atan2+0x3e>
 800e096:	2000      	movs	r0, #0
 800e098:	2100      	movs	r1, #0
 800e09a:	e77c      	b.n	800df96 <__ieee754_atan2+0x3e>
 800e09c:	a106      	add	r1, pc, #24	@ (adr r1, 800e0b8 <__ieee754_atan2+0x160>)
 800e09e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0a2:	e778      	b.n	800df96 <__ieee754_atan2+0x3e>
 800e0a4:	f3af 8000 	nop.w
 800e0a8:	33145c07 	.word	0x33145c07
 800e0ac:	3ca1a626 	.word	0x3ca1a626
 800e0b0:	54442d18 	.word	0x54442d18
 800e0b4:	400921fb 	.word	0x400921fb
 800e0b8:	54442d18 	.word	0x54442d18
 800e0bc:	3ff921fb 	.word	0x3ff921fb
 800e0c0:	54442d18 	.word	0x54442d18
 800e0c4:	3fe921fb 	.word	0x3fe921fb
 800e0c8:	0800e870 	.word	0x0800e870
 800e0cc:	0800e858 	.word	0x0800e858
 800e0d0:	54442d18 	.word	0x54442d18
 800e0d4:	c00921fb 	.word	0xc00921fb
 800e0d8:	54442d18 	.word	0x54442d18
 800e0dc:	bff921fb 	.word	0xbff921fb
 800e0e0:	7ff00000 	.word	0x7ff00000
 800e0e4:	00000000 	.word	0x00000000

0800e0e8 <atan>:
 800e0e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ec:	ec55 4b10 	vmov	r4, r5, d0
 800e0f0:	4bbf      	ldr	r3, [pc, #764]	@ (800e3f0 <atan+0x308>)
 800e0f2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e0f6:	429e      	cmp	r6, r3
 800e0f8:	46ab      	mov	fp, r5
 800e0fa:	d918      	bls.n	800e12e <atan+0x46>
 800e0fc:	4bbd      	ldr	r3, [pc, #756]	@ (800e3f4 <atan+0x30c>)
 800e0fe:	429e      	cmp	r6, r3
 800e100:	d801      	bhi.n	800e106 <atan+0x1e>
 800e102:	d109      	bne.n	800e118 <atan+0x30>
 800e104:	b144      	cbz	r4, 800e118 <atan+0x30>
 800e106:	4622      	mov	r2, r4
 800e108:	462b      	mov	r3, r5
 800e10a:	4620      	mov	r0, r4
 800e10c:	4629      	mov	r1, r5
 800e10e:	f7f2 f8c5 	bl	800029c <__adddf3>
 800e112:	4604      	mov	r4, r0
 800e114:	460d      	mov	r5, r1
 800e116:	e006      	b.n	800e126 <atan+0x3e>
 800e118:	f1bb 0f00 	cmp.w	fp, #0
 800e11c:	f340 812b 	ble.w	800e376 <atan+0x28e>
 800e120:	a597      	add	r5, pc, #604	@ (adr r5, 800e380 <atan+0x298>)
 800e122:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e126:	ec45 4b10 	vmov	d0, r4, r5
 800e12a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e12e:	4bb2      	ldr	r3, [pc, #712]	@ (800e3f8 <atan+0x310>)
 800e130:	429e      	cmp	r6, r3
 800e132:	d813      	bhi.n	800e15c <atan+0x74>
 800e134:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800e138:	429e      	cmp	r6, r3
 800e13a:	d80c      	bhi.n	800e156 <atan+0x6e>
 800e13c:	a392      	add	r3, pc, #584	@ (adr r3, 800e388 <atan+0x2a0>)
 800e13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e142:	4620      	mov	r0, r4
 800e144:	4629      	mov	r1, r5
 800e146:	f7f2 f8a9 	bl	800029c <__adddf3>
 800e14a:	4bac      	ldr	r3, [pc, #688]	@ (800e3fc <atan+0x314>)
 800e14c:	2200      	movs	r2, #0
 800e14e:	f7f2 fceb 	bl	8000b28 <__aeabi_dcmpgt>
 800e152:	2800      	cmp	r0, #0
 800e154:	d1e7      	bne.n	800e126 <atan+0x3e>
 800e156:	f04f 3aff 	mov.w	sl, #4294967295
 800e15a:	e029      	b.n	800e1b0 <atan+0xc8>
 800e15c:	f000 f95c 	bl	800e418 <fabs>
 800e160:	4ba7      	ldr	r3, [pc, #668]	@ (800e400 <atan+0x318>)
 800e162:	429e      	cmp	r6, r3
 800e164:	ec55 4b10 	vmov	r4, r5, d0
 800e168:	f200 80bc 	bhi.w	800e2e4 <atan+0x1fc>
 800e16c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800e170:	429e      	cmp	r6, r3
 800e172:	f200 809e 	bhi.w	800e2b2 <atan+0x1ca>
 800e176:	4622      	mov	r2, r4
 800e178:	462b      	mov	r3, r5
 800e17a:	4620      	mov	r0, r4
 800e17c:	4629      	mov	r1, r5
 800e17e:	f7f2 f88d 	bl	800029c <__adddf3>
 800e182:	4b9e      	ldr	r3, [pc, #632]	@ (800e3fc <atan+0x314>)
 800e184:	2200      	movs	r2, #0
 800e186:	f7f2 f887 	bl	8000298 <__aeabi_dsub>
 800e18a:	2200      	movs	r2, #0
 800e18c:	4606      	mov	r6, r0
 800e18e:	460f      	mov	r7, r1
 800e190:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e194:	4620      	mov	r0, r4
 800e196:	4629      	mov	r1, r5
 800e198:	f7f2 f880 	bl	800029c <__adddf3>
 800e19c:	4602      	mov	r2, r0
 800e19e:	460b      	mov	r3, r1
 800e1a0:	4630      	mov	r0, r6
 800e1a2:	4639      	mov	r1, r7
 800e1a4:	f7f2 fb5a 	bl	800085c <__aeabi_ddiv>
 800e1a8:	f04f 0a00 	mov.w	sl, #0
 800e1ac:	4604      	mov	r4, r0
 800e1ae:	460d      	mov	r5, r1
 800e1b0:	4622      	mov	r2, r4
 800e1b2:	462b      	mov	r3, r5
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	4629      	mov	r1, r5
 800e1b8:	f7f2 fa26 	bl	8000608 <__aeabi_dmul>
 800e1bc:	4602      	mov	r2, r0
 800e1be:	460b      	mov	r3, r1
 800e1c0:	4680      	mov	r8, r0
 800e1c2:	4689      	mov	r9, r1
 800e1c4:	f7f2 fa20 	bl	8000608 <__aeabi_dmul>
 800e1c8:	a371      	add	r3, pc, #452	@ (adr r3, 800e390 <atan+0x2a8>)
 800e1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ce:	4606      	mov	r6, r0
 800e1d0:	460f      	mov	r7, r1
 800e1d2:	f7f2 fa19 	bl	8000608 <__aeabi_dmul>
 800e1d6:	a370      	add	r3, pc, #448	@ (adr r3, 800e398 <atan+0x2b0>)
 800e1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1dc:	f7f2 f85e 	bl	800029c <__adddf3>
 800e1e0:	4632      	mov	r2, r6
 800e1e2:	463b      	mov	r3, r7
 800e1e4:	f7f2 fa10 	bl	8000608 <__aeabi_dmul>
 800e1e8:	a36d      	add	r3, pc, #436	@ (adr r3, 800e3a0 <atan+0x2b8>)
 800e1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ee:	f7f2 f855 	bl	800029c <__adddf3>
 800e1f2:	4632      	mov	r2, r6
 800e1f4:	463b      	mov	r3, r7
 800e1f6:	f7f2 fa07 	bl	8000608 <__aeabi_dmul>
 800e1fa:	a36b      	add	r3, pc, #428	@ (adr r3, 800e3a8 <atan+0x2c0>)
 800e1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e200:	f7f2 f84c 	bl	800029c <__adddf3>
 800e204:	4632      	mov	r2, r6
 800e206:	463b      	mov	r3, r7
 800e208:	f7f2 f9fe 	bl	8000608 <__aeabi_dmul>
 800e20c:	a368      	add	r3, pc, #416	@ (adr r3, 800e3b0 <atan+0x2c8>)
 800e20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e212:	f7f2 f843 	bl	800029c <__adddf3>
 800e216:	4632      	mov	r2, r6
 800e218:	463b      	mov	r3, r7
 800e21a:	f7f2 f9f5 	bl	8000608 <__aeabi_dmul>
 800e21e:	a366      	add	r3, pc, #408	@ (adr r3, 800e3b8 <atan+0x2d0>)
 800e220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e224:	f7f2 f83a 	bl	800029c <__adddf3>
 800e228:	4642      	mov	r2, r8
 800e22a:	464b      	mov	r3, r9
 800e22c:	f7f2 f9ec 	bl	8000608 <__aeabi_dmul>
 800e230:	a363      	add	r3, pc, #396	@ (adr r3, 800e3c0 <atan+0x2d8>)
 800e232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e236:	4680      	mov	r8, r0
 800e238:	4689      	mov	r9, r1
 800e23a:	4630      	mov	r0, r6
 800e23c:	4639      	mov	r1, r7
 800e23e:	f7f2 f9e3 	bl	8000608 <__aeabi_dmul>
 800e242:	a361      	add	r3, pc, #388	@ (adr r3, 800e3c8 <atan+0x2e0>)
 800e244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e248:	f7f2 f826 	bl	8000298 <__aeabi_dsub>
 800e24c:	4632      	mov	r2, r6
 800e24e:	463b      	mov	r3, r7
 800e250:	f7f2 f9da 	bl	8000608 <__aeabi_dmul>
 800e254:	a35e      	add	r3, pc, #376	@ (adr r3, 800e3d0 <atan+0x2e8>)
 800e256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25a:	f7f2 f81d 	bl	8000298 <__aeabi_dsub>
 800e25e:	4632      	mov	r2, r6
 800e260:	463b      	mov	r3, r7
 800e262:	f7f2 f9d1 	bl	8000608 <__aeabi_dmul>
 800e266:	a35c      	add	r3, pc, #368	@ (adr r3, 800e3d8 <atan+0x2f0>)
 800e268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e26c:	f7f2 f814 	bl	8000298 <__aeabi_dsub>
 800e270:	4632      	mov	r2, r6
 800e272:	463b      	mov	r3, r7
 800e274:	f7f2 f9c8 	bl	8000608 <__aeabi_dmul>
 800e278:	a359      	add	r3, pc, #356	@ (adr r3, 800e3e0 <atan+0x2f8>)
 800e27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27e:	f7f2 f80b 	bl	8000298 <__aeabi_dsub>
 800e282:	4632      	mov	r2, r6
 800e284:	463b      	mov	r3, r7
 800e286:	f7f2 f9bf 	bl	8000608 <__aeabi_dmul>
 800e28a:	4602      	mov	r2, r0
 800e28c:	460b      	mov	r3, r1
 800e28e:	4640      	mov	r0, r8
 800e290:	4649      	mov	r1, r9
 800e292:	f7f2 f803 	bl	800029c <__adddf3>
 800e296:	4622      	mov	r2, r4
 800e298:	462b      	mov	r3, r5
 800e29a:	f7f2 f9b5 	bl	8000608 <__aeabi_dmul>
 800e29e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	d148      	bne.n	800e33a <atan+0x252>
 800e2a8:	4620      	mov	r0, r4
 800e2aa:	4629      	mov	r1, r5
 800e2ac:	f7f1 fff4 	bl	8000298 <__aeabi_dsub>
 800e2b0:	e72f      	b.n	800e112 <atan+0x2a>
 800e2b2:	4b52      	ldr	r3, [pc, #328]	@ (800e3fc <atan+0x314>)
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	4629      	mov	r1, r5
 800e2ba:	f7f1 ffed 	bl	8000298 <__aeabi_dsub>
 800e2be:	4b4f      	ldr	r3, [pc, #316]	@ (800e3fc <atan+0x314>)
 800e2c0:	4606      	mov	r6, r0
 800e2c2:	460f      	mov	r7, r1
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	4629      	mov	r1, r5
 800e2ca:	f7f1 ffe7 	bl	800029c <__adddf3>
 800e2ce:	4602      	mov	r2, r0
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	4630      	mov	r0, r6
 800e2d4:	4639      	mov	r1, r7
 800e2d6:	f7f2 fac1 	bl	800085c <__aeabi_ddiv>
 800e2da:	f04f 0a01 	mov.w	sl, #1
 800e2de:	4604      	mov	r4, r0
 800e2e0:	460d      	mov	r5, r1
 800e2e2:	e765      	b.n	800e1b0 <atan+0xc8>
 800e2e4:	4b47      	ldr	r3, [pc, #284]	@ (800e404 <atan+0x31c>)
 800e2e6:	429e      	cmp	r6, r3
 800e2e8:	d21c      	bcs.n	800e324 <atan+0x23c>
 800e2ea:	4b47      	ldr	r3, [pc, #284]	@ (800e408 <atan+0x320>)
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	4629      	mov	r1, r5
 800e2f2:	f7f1 ffd1 	bl	8000298 <__aeabi_dsub>
 800e2f6:	4b44      	ldr	r3, [pc, #272]	@ (800e408 <atan+0x320>)
 800e2f8:	4606      	mov	r6, r0
 800e2fa:	460f      	mov	r7, r1
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	4620      	mov	r0, r4
 800e300:	4629      	mov	r1, r5
 800e302:	f7f2 f981 	bl	8000608 <__aeabi_dmul>
 800e306:	4b3d      	ldr	r3, [pc, #244]	@ (800e3fc <atan+0x314>)
 800e308:	2200      	movs	r2, #0
 800e30a:	f7f1 ffc7 	bl	800029c <__adddf3>
 800e30e:	4602      	mov	r2, r0
 800e310:	460b      	mov	r3, r1
 800e312:	4630      	mov	r0, r6
 800e314:	4639      	mov	r1, r7
 800e316:	f7f2 faa1 	bl	800085c <__aeabi_ddiv>
 800e31a:	f04f 0a02 	mov.w	sl, #2
 800e31e:	4604      	mov	r4, r0
 800e320:	460d      	mov	r5, r1
 800e322:	e745      	b.n	800e1b0 <atan+0xc8>
 800e324:	4622      	mov	r2, r4
 800e326:	462b      	mov	r3, r5
 800e328:	4938      	ldr	r1, [pc, #224]	@ (800e40c <atan+0x324>)
 800e32a:	2000      	movs	r0, #0
 800e32c:	f7f2 fa96 	bl	800085c <__aeabi_ddiv>
 800e330:	f04f 0a03 	mov.w	sl, #3
 800e334:	4604      	mov	r4, r0
 800e336:	460d      	mov	r5, r1
 800e338:	e73a      	b.n	800e1b0 <atan+0xc8>
 800e33a:	4b35      	ldr	r3, [pc, #212]	@ (800e410 <atan+0x328>)
 800e33c:	4e35      	ldr	r6, [pc, #212]	@ (800e414 <atan+0x32c>)
 800e33e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e346:	f7f1 ffa7 	bl	8000298 <__aeabi_dsub>
 800e34a:	4622      	mov	r2, r4
 800e34c:	462b      	mov	r3, r5
 800e34e:	f7f1 ffa3 	bl	8000298 <__aeabi_dsub>
 800e352:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e356:	4602      	mov	r2, r0
 800e358:	460b      	mov	r3, r1
 800e35a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e35e:	f7f1 ff9b 	bl	8000298 <__aeabi_dsub>
 800e362:	f1bb 0f00 	cmp.w	fp, #0
 800e366:	4604      	mov	r4, r0
 800e368:	460d      	mov	r5, r1
 800e36a:	f6bf aedc 	bge.w	800e126 <atan+0x3e>
 800e36e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e372:	461d      	mov	r5, r3
 800e374:	e6d7      	b.n	800e126 <atan+0x3e>
 800e376:	a51c      	add	r5, pc, #112	@ (adr r5, 800e3e8 <atan+0x300>)
 800e378:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e37c:	e6d3      	b.n	800e126 <atan+0x3e>
 800e37e:	bf00      	nop
 800e380:	54442d18 	.word	0x54442d18
 800e384:	3ff921fb 	.word	0x3ff921fb
 800e388:	8800759c 	.word	0x8800759c
 800e38c:	7e37e43c 	.word	0x7e37e43c
 800e390:	e322da11 	.word	0xe322da11
 800e394:	3f90ad3a 	.word	0x3f90ad3a
 800e398:	24760deb 	.word	0x24760deb
 800e39c:	3fa97b4b 	.word	0x3fa97b4b
 800e3a0:	a0d03d51 	.word	0xa0d03d51
 800e3a4:	3fb10d66 	.word	0x3fb10d66
 800e3a8:	c54c206e 	.word	0xc54c206e
 800e3ac:	3fb745cd 	.word	0x3fb745cd
 800e3b0:	920083ff 	.word	0x920083ff
 800e3b4:	3fc24924 	.word	0x3fc24924
 800e3b8:	5555550d 	.word	0x5555550d
 800e3bc:	3fd55555 	.word	0x3fd55555
 800e3c0:	2c6a6c2f 	.word	0x2c6a6c2f
 800e3c4:	bfa2b444 	.word	0xbfa2b444
 800e3c8:	52defd9a 	.word	0x52defd9a
 800e3cc:	3fadde2d 	.word	0x3fadde2d
 800e3d0:	af749a6d 	.word	0xaf749a6d
 800e3d4:	3fb3b0f2 	.word	0x3fb3b0f2
 800e3d8:	fe231671 	.word	0xfe231671
 800e3dc:	3fbc71c6 	.word	0x3fbc71c6
 800e3e0:	9998ebc4 	.word	0x9998ebc4
 800e3e4:	3fc99999 	.word	0x3fc99999
 800e3e8:	54442d18 	.word	0x54442d18
 800e3ec:	bff921fb 	.word	0xbff921fb
 800e3f0:	440fffff 	.word	0x440fffff
 800e3f4:	7ff00000 	.word	0x7ff00000
 800e3f8:	3fdbffff 	.word	0x3fdbffff
 800e3fc:	3ff00000 	.word	0x3ff00000
 800e400:	3ff2ffff 	.word	0x3ff2ffff
 800e404:	40038000 	.word	0x40038000
 800e408:	3ff80000 	.word	0x3ff80000
 800e40c:	bff00000 	.word	0xbff00000
 800e410:	0800e888 	.word	0x0800e888
 800e414:	0800e8a8 	.word	0x0800e8a8

0800e418 <fabs>:
 800e418:	ec51 0b10 	vmov	r0, r1, d0
 800e41c:	4602      	mov	r2, r0
 800e41e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e422:	ec43 2b10 	vmov	d0, r2, r3
 800e426:	4770      	bx	lr

0800e428 <_init>:
 800e428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e42a:	bf00      	nop
 800e42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e42e:	bc08      	pop	{r3}
 800e430:	469e      	mov	lr, r3
 800e432:	4770      	bx	lr

0800e434 <_fini>:
 800e434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e436:	bf00      	nop
 800e438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e43a:	bc08      	pop	{r3}
 800e43c:	469e      	mov	lr, r3
 800e43e:	4770      	bx	lr
