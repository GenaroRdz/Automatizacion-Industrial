
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc80  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800be20  0800be20  0000ce20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2c0  0800c2c0  0000e2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2c0  0800c2c0  0000d2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2c8  0800c2c8  0000e2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2c8  0800c2c8  0000d2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c2cc  0800c2cc  0000d2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800c2d0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001da8  200002c4  0800c594  0000e2c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000206c  0800c594  0000f06c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e2c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f7a  00000000  00000000  0000e2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003052  00000000  00000000  0001f26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  000222c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b4f  00000000  00000000  000231c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001943a  00000000  00000000  00023d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001462a  00000000  00000000  0003d149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c238  00000000  00000000  00051773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd9ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fb0  00000000  00000000  000dd9f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e29a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800be08 	.word	0x0800be08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	0800be08 	.word	0x0800be08

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <MPU6050_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Enviar datos por USB
void MPU6050_Init(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af04      	add	r7, sp, #16
    uint8_t data;

    // Verifica el WHO_AM_I para asegurarte de que el MPU6050 está presente
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	9302      	str	r3, [sp, #8]
 8000f54:	2301      	movs	r3, #1
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	1dfb      	adds	r3, r7, #7
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	2275      	movs	r2, #117	@ 0x75
 8000f60:	21d0      	movs	r1, #208	@ 0xd0
 8000f62:	480d      	ldr	r0, [pc, #52]	@ (8000f98 <MPU6050_Init+0x50>)
 8000f64:	f001 f9e2 	bl	800232c <HAL_I2C_Mem_Read>
    if (data != 0x68) {
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b68      	cmp	r3, #104	@ 0x68
 8000f6c:	d001      	beq.n	8000f72 <MPU6050_Init+0x2a>
        while (1) {
 8000f6e:	bf00      	nop
 8000f70:	e7fd      	b.n	8000f6e <MPU6050_Init+0x26>
            // Error: MPU6050 no detectado
        }
    }

    // Salir del modo de suspensión
    data = 0x00;
 8000f72:	2300      	movs	r3, #0
 8000f74:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	9302      	str	r3, [sp, #8]
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	1dfb      	adds	r3, r7, #7
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2301      	movs	r3, #1
 8000f86:	226b      	movs	r2, #107	@ 0x6b
 8000f88:	21d0      	movs	r1, #208	@ 0xd0
 8000f8a:	4803      	ldr	r0, [pc, #12]	@ (8000f98 <MPU6050_Init+0x50>)
 8000f8c:	f001 f8d4 	bl	8002138 <HAL_I2C_Mem_Write>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200002e0 	.word	0x200002e0

08000f9c <MPU6050_ReadAccel>:

void MPU6050_ReadAccel(int16_t *accel) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af04      	add	r7, sp, #16
 8000fa2:	6078      	str	r0, [r7, #4]
    uint8_t buffer[6];

    // Leer registros de acelerómetro
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, 1, buffer, 6, HAL_MAX_DELAY);
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2306      	movs	r3, #6
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	223b      	movs	r2, #59	@ 0x3b
 8000fb8:	21d0      	movs	r1, #208	@ 0xd0
 8000fba:	4812      	ldr	r0, [pc, #72]	@ (8001004 <MPU6050_ReadAccel+0x68>)
 8000fbc:	f001 f9b6 	bl	800232c <HAL_I2C_Mem_Read>

    // Convertir datos a valores de 16 bits
    accel[0] = (int16_t)(buffer[0] << 8 | buffer[1]); // X
 8000fc0:	7a3b      	ldrb	r3, [r7, #8]
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	7a7b      	ldrb	r3, [r7, #9]
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	801a      	strh	r2, [r3, #0]
    accel[1] = (int16_t)(buffer[2] << 8 | buffer[3]); // Y
 8000fd2:	7abb      	ldrb	r3, [r7, #10]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b219      	sxth	r1, r3
 8000fd8:	7afb      	ldrb	r3, [r7, #11]
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3302      	adds	r3, #2
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	b212      	sxth	r2, r2
 8000fe4:	801a      	strh	r2, [r3, #0]
    accel[2] = (int16_t)(buffer[4] << 8 | buffer[5]); // Z
 8000fe6:	7b3b      	ldrb	r3, [r7, #12]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b219      	sxth	r1, r3
 8000fec:	7b7b      	ldrb	r3, [r7, #13]
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	b212      	sxth	r2, r2
 8000ff8:	801a      	strh	r2, [r3, #0]
}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200002e0 	.word	0x200002e0

08001008 <MPU6050_ReadGyro>:

void MPU6050_ReadGyro(int16_t *gyro) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af04      	add	r7, sp, #16
 800100e:	6078      	str	r0, [r7, #4]
    uint8_t buffer[6];

    // Leer registros de giroscopio
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H, 1, buffer, 6, HAL_MAX_DELAY);
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2306      	movs	r3, #6
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2243      	movs	r2, #67	@ 0x43
 8001024:	21d0      	movs	r1, #208	@ 0xd0
 8001026:	4812      	ldr	r0, [pc, #72]	@ (8001070 <MPU6050_ReadGyro+0x68>)
 8001028:	f001 f980 	bl	800232c <HAL_I2C_Mem_Read>

    // Convertir datos a valores de 16 bits
    gyro[0] = (int16_t)(buffer[0] << 8 | buffer[1]); // X
 800102c:	7a3b      	ldrb	r3, [r7, #8]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	b21a      	sxth	r2, r3
 8001032:	7a7b      	ldrb	r3, [r7, #9]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21a      	sxth	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	801a      	strh	r2, [r3, #0]
    gyro[1] = (int16_t)(buffer[2] << 8 | buffer[3]); // Y
 800103e:	7abb      	ldrb	r3, [r7, #10]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	b219      	sxth	r1, r3
 8001044:	7afb      	ldrb	r3, [r7, #11]
 8001046:	b21a      	sxth	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3302      	adds	r3, #2
 800104c:	430a      	orrs	r2, r1
 800104e:	b212      	sxth	r2, r2
 8001050:	801a      	strh	r2, [r3, #0]
    gyro[2] = (int16_t)(buffer[4] << 8 | buffer[5]); // Z
 8001052:	7b3b      	ldrb	r3, [r7, #12]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b219      	sxth	r1, r3
 8001058:	7b7b      	ldrb	r3, [r7, #13]
 800105a:	b21a      	sxth	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3304      	adds	r3, #4
 8001060:	430a      	orrs	r2, r1
 8001062:	b212      	sxth	r2, r2
 8001064:	801a      	strh	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200002e0 	.word	0x200002e0

08001074 <Send_Data_USB>:
    snprintf(buffer, sizeof(buffer),
             "Gyro Bias: X=%d, Y=%d, Z=%d\r\n",
             gyro_bias[0], gyro_bias[1], gyro_bias[2]);
    Send_Data_USB(buffer);
}
void Send_Data_USB(const char *data) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    CDC_Transmit_FS((uint8_t *)data, strlen(data));
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff f8ff 	bl	8000280 <strlen>
 8001082:	4603      	mov	r3, r0
 8001084:	b29b      	uxth	r3, r3
 8001086:	4619      	mov	r1, r3
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f007 f9a3 	bl	80083d4 <CDC_Transmit_FS>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <main>:
/**
  * @brief  The application entry point.
  * @retval intv
  */
int main(void)
{
 8001098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800109c:	b0b2      	sub	sp, #200	@ 0xc8
 800109e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f000 fbc0 	bl	8001824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f916 	bl	80012d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f000 f9aa 	bl	8001400 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010ac:	f000 f97a 	bl	80013a4 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80010b0:	f007 f8d2 	bl	8008258 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 80010b4:	f7ff ff48 	bl	8000f48 <MPU6050_Init>

  int16_t accel[3], gyro[3], gyro_bias[3];
  char buffer[128];
  float angle_acc, angle_gyro = 0, angle_fused = 0;
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80010c0:	f04f 0300 	mov.w	r3, #0
 80010c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  const float dt = 0.01; // Intervalo de tiempo (10 ms)
 80010c8:	4b7f      	ldr	r3, [pc, #508]	@ (80012c8 <main+0x230>)
 80010ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  const float alpha = 0.98; // Constante del filtro complementario
 80010ce:	4b7f      	ldr	r3, [pc, #508]	@ (80012cc <main+0x234>)
 80010d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      MPU6050_ReadAccel(accel);
 80010d4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5f 	bl	8000f9c <MPU6050_ReadAccel>
      MPU6050_ReadGyro(gyro);
 80010de:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff90 	bl	8001008 <MPU6050_ReadGyro>

      // Calcular el ángulo del acelerómetro (basado en la inclinación)
      angle_acc = atan2((float)accel[1], (float)accel[2]) * (180.0 / M_PI);
 80010e8:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	@ 0x96
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f4:	ee17 0a90 	vmov	r0, s15
 80010f8:	f7ff fa2e 	bl	8000558 <__aeabi_f2d>
 80010fc:	4604      	mov	r4, r0
 80010fe:	460d      	mov	r5, r1
 8001100:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	@ 0x98
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110c:	ee17 0a90 	vmov	r0, s15
 8001110:	f7ff fa22 	bl	8000558 <__aeabi_f2d>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	ec43 2b11 	vmov	d1, r2, r3
 800111c:	ec45 4b10 	vmov	d0, r4, r5
 8001120:	f00a fc06 	bl	800b930 <atan2>
 8001124:	ec51 0b10 	vmov	r0, r1, d0
 8001128:	a363      	add	r3, pc, #396	@ (adr r3, 80012b8 <main+0x220>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff fa6b 	bl	8000608 <__aeabi_dmul>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fd3d 	bl	8000bb8 <__aeabi_d2f>
 800113e:	4603      	mov	r3, r0
 8001140:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      // Corregir el sesgo del giroscopio y calcular el cambio de ángulo
      gyro[0] -= gyro_bias[0]; // Usamos solo el eje X para el giro en este caso
 8001144:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 8001148:	b29a      	uxth	r2, r3
 800114a:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	@ 0x84
 800114e:	b29b      	uxth	r3, r3
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	b29b      	uxth	r3, r3
 8001154:	b21b      	sxth	r3, r3
 8001156:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      angle_gyro += ((float)gyro[0] / 131.0) * dt; // 131.0 es la sensibilidad del giroscopio en dps
 800115a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800115e:	f7ff f9fb 	bl	8000558 <__aeabi_f2d>
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
 8001166:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 800116a:	ee07 3a90 	vmov	s15, r3
 800116e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001172:	ee17 0a90 	vmov	r0, s15
 8001176:	f7ff f9ef 	bl	8000558 <__aeabi_f2d>
 800117a:	a351      	add	r3, pc, #324	@ (adr r3, 80012c0 <main+0x228>)
 800117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001180:	f7ff fb6c 	bl	800085c <__aeabi_ddiv>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4690      	mov	r8, r2
 800118a:	4699      	mov	r9, r3
 800118c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001190:	f7ff f9e2 	bl	8000558 <__aeabi_f2d>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4640      	mov	r0, r8
 800119a:	4649      	mov	r1, r9
 800119c:	f7ff fa34 	bl	8000608 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4620      	mov	r0, r4
 80011a6:	4629      	mov	r1, r5
 80011a8:	f7ff f878 	bl	800029c <__adddf3>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fd00 	bl	8000bb8 <__aeabi_d2f>
 80011b8:	4603      	mov	r3, r0
 80011ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      // Fusión del ángulo usando el filtro complementario
      angle_fused = alpha * (angle_fused + ((float)gyro[0] / 131.0) * dt) + (1 - alpha) * angle_acc;
 80011be:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80011c2:	f7ff f9c9 	bl	8000558 <__aeabi_f2d>
 80011c6:	4604      	mov	r4, r0
 80011c8:	460d      	mov	r5, r1
 80011ca:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80011ce:	f7ff f9c3 	bl	8000558 <__aeabi_f2d>
 80011d2:	4680      	mov	r8, r0
 80011d4:	4689      	mov	r9, r1
 80011d6:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e2:	ee17 0a90 	vmov	r0, s15
 80011e6:	f7ff f9b7 	bl	8000558 <__aeabi_f2d>
 80011ea:	a335      	add	r3, pc, #212	@ (adr r3, 80012c0 <main+0x228>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff fb34 	bl	800085c <__aeabi_ddiv>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4692      	mov	sl, r2
 80011fa:	469b      	mov	fp, r3
 80011fc:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001200:	f7ff f9aa 	bl	8000558 <__aeabi_f2d>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4650      	mov	r0, sl
 800120a:	4659      	mov	r1, fp
 800120c:	f7ff f9fc 	bl	8000608 <__aeabi_dmul>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4640      	mov	r0, r8
 8001216:	4649      	mov	r1, r9
 8001218:	f7ff f840 	bl	800029c <__adddf3>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4620      	mov	r0, r4
 8001222:	4629      	mov	r1, r5
 8001224:	f7ff f9f0 	bl	8000608 <__aeabi_dmul>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4614      	mov	r4, r2
 800122e:	461d      	mov	r5, r3
 8001230:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001234:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8001238:	ee37 7a67 	vsub.f32	s14, s14, s15
 800123c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001244:	ee17 0a90 	vmov	r0, s15
 8001248:	f7ff f986 	bl	8000558 <__aeabi_f2d>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4620      	mov	r0, r4
 8001252:	4629      	mov	r1, r5
 8001254:	f7ff f822 	bl	800029c <__adddf3>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fcaa 	bl	8000bb8 <__aeabi_d2f>
 8001264:	4603      	mov	r3, r0
 8001266:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      // Formatea los datos en un buffer
      snprintf(buffer, sizeof(buffer),
 800126a:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800126e:	f7ff f973 	bl	8000558 <__aeabi_f2d>
 8001272:	4604      	mov	r4, r0
 8001274:	460d      	mov	r5, r1
 8001276:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800127a:	f7ff f96d 	bl	8000558 <__aeabi_f2d>
 800127e:	4680      	mov	r8, r0
 8001280:	4689      	mov	r9, r1
 8001282:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8001286:	f7ff f967 	bl	8000558 <__aeabi_f2d>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	1d38      	adds	r0, r7, #4
 8001290:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001294:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001298:	e9cd 4500 	strd	r4, r5, [sp]
 800129c:	4a0c      	ldr	r2, [pc, #48]	@ (80012d0 <main+0x238>)
 800129e:	2180      	movs	r1, #128	@ 0x80
 80012a0:	f008 fa04 	bl	80096ac <sniprintf>
               "Accel Angle: %.2f | Gyro Angle: %.2f | Fused Angle: %.2f\r\n",
               angle_acc, angle_gyro, angle_fused);

      // Enviar los datos por Bluetooth
      Send_Data_USB(buffer);
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fee4 	bl	8001074 <Send_Data_USB>

      HAL_Delay(10); // Espera 10 ms
 80012ac:	200a      	movs	r0, #10
 80012ae:	f000 fb2b 	bl	8001908 <HAL_Delay>
      MPU6050_ReadAccel(accel);
 80012b2:	bf00      	nop
 80012b4:	e70e      	b.n	80010d4 <main+0x3c>
 80012b6:	bf00      	nop
 80012b8:	1a63c1f8 	.word	0x1a63c1f8
 80012bc:	404ca5dc 	.word	0x404ca5dc
 80012c0:	00000000 	.word	0x00000000
 80012c4:	40606000 	.word	0x40606000
 80012c8:	3c23d70a 	.word	0x3c23d70a
 80012cc:	3f7ae148 	.word	0x3f7ae148
 80012d0:	0800be40 	.word	0x0800be40

080012d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b094      	sub	sp, #80	@ 0x50
 80012d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012da:	f107 0320 	add.w	r3, r7, #32
 80012de:	2230      	movs	r2, #48	@ 0x30
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f008 fa59 	bl	800979a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	4b27      	ldr	r3, [pc, #156]	@ (800139c <SystemClock_Config+0xc8>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001300:	4a26      	ldr	r2, [pc, #152]	@ (800139c <SystemClock_Config+0xc8>)
 8001302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001306:	6413      	str	r3, [r2, #64]	@ 0x40
 8001308:	4b24      	ldr	r3, [pc, #144]	@ (800139c <SystemClock_Config+0xc8>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	4b21      	ldr	r3, [pc, #132]	@ (80013a0 <SystemClock_Config+0xcc>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a20      	ldr	r2, [pc, #128]	@ (80013a0 <SystemClock_Config+0xcc>)
 800131e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b1e      	ldr	r3, [pc, #120]	@ (80013a0 <SystemClock_Config+0xcc>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001330:	2301      	movs	r3, #1
 8001332:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001334:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133a:	2302      	movs	r3, #2
 800133c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800133e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001342:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001344:	2319      	movs	r3, #25
 8001346:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001348:	2390      	movs	r3, #144	@ 0x90
 800134a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800134c:	2302      	movs	r3, #2
 800134e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001350:	2303      	movs	r3, #3
 8001352:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	4618      	mov	r0, r3
 800135a:	f003 f81f 	bl	800439c <HAL_RCC_OscConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001364:	f000 f8ac 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001368:	230f      	movs	r3, #15
 800136a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136c:	2302      	movs	r3, #2
 800136e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001374:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001378:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	2102      	movs	r1, #2
 8001384:	4618      	mov	r0, r3
 8001386:	f003 fa81 	bl	800488c <HAL_RCC_ClockConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001390:	f000 f896 	bl	80014c0 <Error_Handler>
  }
}
 8001394:	bf00      	nop
 8001396:	3750      	adds	r7, #80	@ 0x50
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40023800 	.word	0x40023800
 80013a0:	40007000 	.word	0x40007000

080013a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013a8:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <MX_I2C1_Init+0x50>)
 80013aa:	4a13      	ldr	r2, [pc, #76]	@ (80013f8 <MX_I2C1_Init+0x54>)
 80013ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ae:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <MX_I2C1_Init+0x50>)
 80013b0:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <MX_I2C1_Init+0x58>)
 80013b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <MX_I2C1_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <MX_I2C1_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <MX_I2C1_Init+0x50>)
 80013c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c8:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <MX_I2C1_Init+0x50>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ce:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <MX_I2C1_Init+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d4:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <MX_I2C1_Init+0x50>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <MX_I2C1_Init+0x50>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013e0:	4804      	ldr	r0, [pc, #16]	@ (80013f4 <MX_I2C1_Init+0x50>)
 80013e2:	f000 fd65 	bl	8001eb0 <HAL_I2C_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013ec:	f000 f868 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	200002e0 	.word	0x200002e0
 80013f8:	40005400 	.word	0x40005400
 80013fc:	000186a0 	.word	0x000186a0

08001400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	@ 0x28
 8001404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <MX_GPIO_Init+0xb8>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a26      	ldr	r2, [pc, #152]	@ (80014b8 <MX_GPIO_Init+0xb8>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b24      	ldr	r3, [pc, #144]	@ (80014b8 <MX_GPIO_Init+0xb8>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <MX_GPIO_Init+0xb8>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a1f      	ldr	r2, [pc, #124]	@ (80014b8 <MX_GPIO_Init+0xb8>)
 800143c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <MX_GPIO_Init+0xb8>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <MX_GPIO_Init+0xb8>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a18      	ldr	r2, [pc, #96]	@ (80014b8 <MX_GPIO_Init+0xb8>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <MX_GPIO_Init+0xb8>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <MX_GPIO_Init+0xb8>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a11      	ldr	r2, [pc, #68]	@ (80014b8 <MX_GPIO_Init+0xb8>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <MX_GPIO_Init+0xb8>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800148c:	480b      	ldr	r0, [pc, #44]	@ (80014bc <MX_GPIO_Init+0xbc>)
 800148e:	f000 fcf5 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001492:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MX_GPIO_Init+0xbc>)
 80014ac:	f000 fb62 	bl	8001b74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014b0:	bf00      	nop
 80014b2:	3728      	adds	r7, #40	@ 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020800 	.word	0x40020800

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <Error_Handler+0x8>

080014cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <HAL_MspInit+0x4c>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	4a0f      	ldr	r2, [pc, #60]	@ (8001518 <HAL_MspInit+0x4c>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <HAL_MspInit+0x4c>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <HAL_MspInit+0x4c>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	4a08      	ldr	r2, [pc, #32]	@ (8001518 <HAL_MspInit+0x4c>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_MspInit+0x4c>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800

0800151c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	@ 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a19      	ldr	r2, [pc, #100]	@ (80015a0 <HAL_I2C_MspInit+0x84>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d12b      	bne.n	8001596 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <HAL_I2C_MspInit+0x88>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4a17      	ldr	r2, [pc, #92]	@ (80015a4 <HAL_I2C_MspInit+0x88>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	@ 0x30
 800154e:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <HAL_I2C_MspInit+0x88>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800155a:	23c0      	movs	r3, #192	@ 0xc0
 800155c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800155e:	2312      	movs	r3, #18
 8001560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800156a:	2304      	movs	r3, #4
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	480c      	ldr	r0, [pc, #48]	@ (80015a8 <HAL_I2C_MspInit+0x8c>)
 8001576:	f000 fafd 	bl	8001b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <HAL_I2C_MspInit+0x88>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	4a08      	ldr	r2, [pc, #32]	@ (80015a4 <HAL_I2C_MspInit+0x88>)
 8001584:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001588:	6413      	str	r3, [r2, #64]	@ 0x40
 800158a:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <HAL_I2C_MspInit+0x88>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001596:	bf00      	nop
 8001598:	3728      	adds	r7, #40	@ 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40005400 	.word	0x40005400
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020400 	.word	0x40020400

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <NMI_Handler+0x4>

080015b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <MemManage_Handler+0x4>

080015c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001602:	f000 f961 	bl	80018c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001610:	4802      	ldr	r0, [pc, #8]	@ (800161c <OTG_FS_IRQHandler+0x10>)
 8001612:	f001 fdb5 	bl	8003180 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000181c 	.word	0x2000181c

08001620 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return 1;
 8001624:	2301      	movs	r3, #1
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_kill>:

int _kill(int pid, int sig)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800163a:	f008 f901 	bl	8009840 <__errno>
 800163e:	4603      	mov	r3, r0
 8001640:	2216      	movs	r2, #22
 8001642:	601a      	str	r2, [r3, #0]
  return -1;
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <_exit>:

void _exit (int status)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ffe7 	bl	8001630 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001662:	bf00      	nop
 8001664:	e7fd      	b.n	8001662 <_exit+0x12>

08001666 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	e00a      	b.n	800168e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001678:	f3af 8000 	nop.w
 800167c:	4601      	mov	r1, r0
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	60ba      	str	r2, [r7, #8]
 8001684:	b2ca      	uxtb	r2, r1
 8001686:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	3301      	adds	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	429a      	cmp	r2, r3
 8001694:	dbf0      	blt.n	8001678 <_read+0x12>
  }

  return len;
 8001696:	687b      	ldr	r3, [r7, #4]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	e009      	b.n	80016c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	60ba      	str	r2, [r7, #8]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3301      	adds	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	dbf1      	blt.n	80016b2 <_write+0x12>
  }
  return len;
 80016ce:	687b      	ldr	r3, [r7, #4]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_close>:

int _close(int file)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001700:	605a      	str	r2, [r3, #4]
  return 0;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <_isatty>:

int _isatty(int file)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001718:	2301      	movs	r3, #1
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001726:	b480      	push	{r7}
 8001728:	b085      	sub	sp, #20
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001748:	4a14      	ldr	r2, [pc, #80]	@ (800179c <_sbrk+0x5c>)
 800174a:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <_sbrk+0x60>)
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001754:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d102      	bne.n	8001762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800175c:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <_sbrk+0x64>)
 800175e:	4a12      	ldr	r2, [pc, #72]	@ (80017a8 <_sbrk+0x68>)
 8001760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001762:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	429a      	cmp	r2, r3
 800176e:	d207      	bcs.n	8001780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001770:	f008 f866 	bl	8009840 <__errno>
 8001774:	4603      	mov	r3, r0
 8001776:	220c      	movs	r2, #12
 8001778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	e009      	b.n	8001794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001780:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001786:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	4a05      	ldr	r2, [pc, #20]	@ (80017a4 <_sbrk+0x64>)
 8001790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20020000 	.word	0x20020000
 80017a0:	00000400 	.word	0x00000400
 80017a4:	20000334 	.word	0x20000334
 80017a8:	20002070 	.word	0x20002070

080017ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <SystemInit+0x20>)
 80017b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017b6:	4a05      	ldr	r2, [pc, #20]	@ (80017cc <SystemInit+0x20>)
 80017b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001808 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017d4:	f7ff ffea 	bl	80017ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d8:	480c      	ldr	r0, [pc, #48]	@ (800180c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017da:	490d      	ldr	r1, [pc, #52]	@ (8001810 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001814 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e0:	e002      	b.n	80017e8 <LoopCopyDataInit>

080017e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e6:	3304      	adds	r3, #4

080017e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ec:	d3f9      	bcc.n	80017e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f0:	4c0a      	ldr	r4, [pc, #40]	@ (800181c <LoopFillZerobss+0x22>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f4:	e001      	b.n	80017fa <LoopFillZerobss>

080017f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f8:	3204      	adds	r2, #4

080017fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017fc:	d3fb      	bcc.n	80017f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017fe:	f008 f825 	bl	800984c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001802:	f7ff fc49 	bl	8001098 <main>
  bx  lr    
 8001806:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001808:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800180c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001810:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001814:	0800c2d0 	.word	0x0800c2d0
  ldr r2, =_sbss
 8001818:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 800181c:	2000206c 	.word	0x2000206c

08001820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001820:	e7fe      	b.n	8001820 <ADC_IRQHandler>
	...

08001824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001828:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <HAL_Init+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0d      	ldr	r2, [pc, #52]	@ (8001864 <HAL_Init+0x40>)
 800182e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001832:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001834:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0a      	ldr	r2, [pc, #40]	@ (8001864 <HAL_Init+0x40>)
 800183a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800183e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001840:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a07      	ldr	r2, [pc, #28]	@ (8001864 <HAL_Init+0x40>)
 8001846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800184a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184c:	2003      	movs	r0, #3
 800184e:	f000 f94f 	bl	8001af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001852:	200f      	movs	r0, #15
 8001854:	f000 f808 	bl	8001868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001858:	f7ff fe38 	bl	80014cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023c00 	.word	0x40023c00

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001870:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <HAL_InitTick+0x54>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b12      	ldr	r3, [pc, #72]	@ (80018c0 <HAL_InitTick+0x58>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f967 	bl	8001b5a <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e00e      	b.n	80018b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d80a      	bhi.n	80018b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f000 f92f 	bl	8001b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a8:	4a06      	ldr	r2, [pc, #24]	@ (80018c4 <HAL_InitTick+0x5c>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000008 	.word	0x20000008
 80018c4:	20000004 	.word	0x20000004

080018c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018cc:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <HAL_IncTick+0x20>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <HAL_IncTick+0x24>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a04      	ldr	r2, [pc, #16]	@ (80018ec <HAL_IncTick+0x24>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000008 	.word	0x20000008
 80018ec:	20000338 	.word	0x20000338

080018f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return uwTick;
 80018f4:	4b03      	ldr	r3, [pc, #12]	@ (8001904 <HAL_GetTick+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000338 	.word	0x20000338

08001908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001910:	f7ff ffee 	bl	80018f0 <HAL_GetTick>
 8001914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001920:	d005      	beq.n	800192e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001922:	4b0a      	ldr	r3, [pc, #40]	@ (800194c <HAL_Delay+0x44>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800192e:	bf00      	nop
 8001930:	f7ff ffde 	bl	80018f0 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	429a      	cmp	r2, r3
 800193e:	d8f7      	bhi.n	8001930 <HAL_Delay+0x28>
  {
  }
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000008 	.word	0x20000008

08001950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001960:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800196c:	4013      	ands	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001978:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800197c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001982:	4a04      	ldr	r2, [pc, #16]	@ (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	60d3      	str	r3, [r2, #12]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800199c:	4b04      	ldr	r3, [pc, #16]	@ (80019b0 <__NVIC_GetPriorityGrouping+0x18>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	f003 0307 	and.w	r3, r3, #7
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	db0b      	blt.n	80019de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	f003 021f 	and.w	r2, r3, #31
 80019cc:	4907      	ldr	r1, [pc, #28]	@ (80019ec <__NVIC_EnableIRQ+0x38>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	2001      	movs	r0, #1
 80019d6:	fa00 f202 	lsl.w	r2, r0, r2
 80019da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e100 	.word	0xe000e100

080019f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	db0a      	blt.n	8001a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	490c      	ldr	r1, [pc, #48]	@ (8001a3c <__NVIC_SetPriority+0x4c>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	440b      	add	r3, r1
 8001a14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a18:	e00a      	b.n	8001a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4908      	ldr	r1, [pc, #32]	@ (8001a40 <__NVIC_SetPriority+0x50>)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	3b04      	subs	r3, #4
 8001a28:	0112      	lsls	r2, r2, #4
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	761a      	strb	r2, [r3, #24]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000e100 	.word	0xe000e100
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	@ 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f1c3 0307 	rsb	r3, r3, #7
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	bf28      	it	cs
 8001a62:	2304      	movcs	r3, #4
 8001a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d902      	bls.n	8001a74 <NVIC_EncodePriority+0x30>
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3b03      	subs	r3, #3
 8001a72:	e000      	b.n	8001a76 <NVIC_EncodePriority+0x32>
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	401a      	ands	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43d9      	mvns	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	4313      	orrs	r3, r2
         );
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	@ 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001abc:	d301      	bcc.n	8001ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00f      	b.n	8001ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <SysTick_Config+0x40>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aca:	210f      	movs	r1, #15
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	f7ff ff8e 	bl	80019f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad4:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <SysTick_Config+0x40>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ada:	4b04      	ldr	r3, [pc, #16]	@ (8001aec <SysTick_Config+0x40>)
 8001adc:	2207      	movs	r2, #7
 8001ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	e000e010 	.word	0xe000e010

08001af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff29 	bl	8001950 <__NVIC_SetPriorityGrouping>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b18:	f7ff ff3e 	bl	8001998 <__NVIC_GetPriorityGrouping>
 8001b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	6978      	ldr	r0, [r7, #20]
 8001b24:	f7ff ff8e 	bl	8001a44 <NVIC_EncodePriority>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff5d 	bl	80019f0 <__NVIC_SetPriority>
}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff31 	bl	80019b4 <__NVIC_EnableIRQ>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffa2 	bl	8001aac <SysTick_Config>
 8001b68:	4603      	mov	r3, r0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	@ 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	e159      	b.n	8001e44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b90:	2201      	movs	r2, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	f040 8148 	bne.w	8001e3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d005      	beq.n	8001bc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d130      	bne.n	8001c28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 0201 	and.w	r2, r3, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d017      	beq.n	8001c64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d123      	bne.n	8001cb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	08da      	lsrs	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3208      	adds	r2, #8
 8001c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	220f      	movs	r2, #15
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	08da      	lsrs	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3208      	adds	r2, #8
 8001cb2:	69b9      	ldr	r1, [r7, #24]
 8001cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0203 	and.w	r2, r3, #3
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80a2 	beq.w	8001e3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b57      	ldr	r3, [pc, #348]	@ (8001e5c <HAL_GPIO_Init+0x2e8>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	4a56      	ldr	r2, [pc, #344]	@ (8001e5c <HAL_GPIO_Init+0x2e8>)
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0a:	4b54      	ldr	r3, [pc, #336]	@ (8001e5c <HAL_GPIO_Init+0x2e8>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d16:	4a52      	ldr	r2, [pc, #328]	@ (8001e60 <HAL_GPIO_Init+0x2ec>)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a49      	ldr	r2, [pc, #292]	@ (8001e64 <HAL_GPIO_Init+0x2f0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d019      	beq.n	8001d76 <HAL_GPIO_Init+0x202>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a48      	ldr	r2, [pc, #288]	@ (8001e68 <HAL_GPIO_Init+0x2f4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <HAL_GPIO_Init+0x1fe>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a47      	ldr	r2, [pc, #284]	@ (8001e6c <HAL_GPIO_Init+0x2f8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00d      	beq.n	8001d6e <HAL_GPIO_Init+0x1fa>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a46      	ldr	r2, [pc, #280]	@ (8001e70 <HAL_GPIO_Init+0x2fc>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d007      	beq.n	8001d6a <HAL_GPIO_Init+0x1f6>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a45      	ldr	r2, [pc, #276]	@ (8001e74 <HAL_GPIO_Init+0x300>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d101      	bne.n	8001d66 <HAL_GPIO_Init+0x1f2>
 8001d62:	2304      	movs	r3, #4
 8001d64:	e008      	b.n	8001d78 <HAL_GPIO_Init+0x204>
 8001d66:	2307      	movs	r3, #7
 8001d68:	e006      	b.n	8001d78 <HAL_GPIO_Init+0x204>
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e004      	b.n	8001d78 <HAL_GPIO_Init+0x204>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e002      	b.n	8001d78 <HAL_GPIO_Init+0x204>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_GPIO_Init+0x204>
 8001d76:	2300      	movs	r3, #0
 8001d78:	69fa      	ldr	r2, [r7, #28]
 8001d7a:	f002 0203 	and.w	r2, r2, #3
 8001d7e:	0092      	lsls	r2, r2, #2
 8001d80:	4093      	lsls	r3, r2
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d88:	4935      	ldr	r1, [pc, #212]	@ (8001e60 <HAL_GPIO_Init+0x2ec>)
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	3302      	adds	r3, #2
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d96:	4b38      	ldr	r3, [pc, #224]	@ (8001e78 <HAL_GPIO_Init+0x304>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dba:	4a2f      	ldr	r2, [pc, #188]	@ (8001e78 <HAL_GPIO_Init+0x304>)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e78 <HAL_GPIO_Init+0x304>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de4:	4a24      	ldr	r2, [pc, #144]	@ (8001e78 <HAL_GPIO_Init+0x304>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dea:	4b23      	ldr	r3, [pc, #140]	@ (8001e78 <HAL_GPIO_Init+0x304>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8001e78 <HAL_GPIO_Init+0x304>)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e14:	4b18      	ldr	r3, [pc, #96]	@ (8001e78 <HAL_GPIO_Init+0x304>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e38:	4a0f      	ldr	r2, [pc, #60]	@ (8001e78 <HAL_GPIO_Init+0x304>)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3301      	adds	r3, #1
 8001e42:	61fb      	str	r3, [r7, #28]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	2b0f      	cmp	r3, #15
 8001e48:	f67f aea2 	bls.w	8001b90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	3724      	adds	r7, #36	@ 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40013800 	.word	0x40013800
 8001e64:	40020000 	.word	0x40020000
 8001e68:	40020400 	.word	0x40020400
 8001e6c:	40020800 	.word	0x40020800
 8001e70:	40020c00 	.word	0x40020c00
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40013c00 	.word	0x40013c00

08001e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e8c:	787b      	ldrb	r3, [r7, #1]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e98:	e003      	b.n	8001ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e9a:	887b      	ldrh	r3, [r7, #2]
 8001e9c:	041a      	lsls	r2, r3, #16
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	619a      	str	r2, [r3, #24]
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e12b      	b.n	800211a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff fb20 	bl	800151c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2224      	movs	r2, #36	@ 0x24
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0201 	bic.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f14:	f002 fe72 	bl	8004bfc <HAL_RCC_GetPCLK1Freq>
 8001f18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4a81      	ldr	r2, [pc, #516]	@ (8002124 <HAL_I2C_Init+0x274>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d807      	bhi.n	8001f34 <HAL_I2C_Init+0x84>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4a80      	ldr	r2, [pc, #512]	@ (8002128 <HAL_I2C_Init+0x278>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	bf94      	ite	ls
 8001f2c:	2301      	movls	r3, #1
 8001f2e:	2300      	movhi	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	e006      	b.n	8001f42 <HAL_I2C_Init+0x92>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4a7d      	ldr	r2, [pc, #500]	@ (800212c <HAL_I2C_Init+0x27c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	bf94      	ite	ls
 8001f3c:	2301      	movls	r3, #1
 8001f3e:	2300      	movhi	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e0e7      	b.n	800211a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4a78      	ldr	r2, [pc, #480]	@ (8002130 <HAL_I2C_Init+0x280>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	0c9b      	lsrs	r3, r3, #18
 8001f54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a6a      	ldr	r2, [pc, #424]	@ (8002124 <HAL_I2C_Init+0x274>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d802      	bhi.n	8001f84 <HAL_I2C_Init+0xd4>
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	3301      	adds	r3, #1
 8001f82:	e009      	b.n	8001f98 <HAL_I2C_Init+0xe8>
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	4a69      	ldr	r2, [pc, #420]	@ (8002134 <HAL_I2C_Init+0x284>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	099b      	lsrs	r3, r3, #6
 8001f96:	3301      	adds	r3, #1
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001faa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	495c      	ldr	r1, [pc, #368]	@ (8002124 <HAL_I2C_Init+0x274>)
 8001fb4:	428b      	cmp	r3, r1
 8001fb6:	d819      	bhi.n	8001fec <HAL_I2C_Init+0x13c>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1e59      	subs	r1, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fc6:	1c59      	adds	r1, r3, #1
 8001fc8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fcc:	400b      	ands	r3, r1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00a      	beq.n	8001fe8 <HAL_I2C_Init+0x138>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1e59      	subs	r1, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe6:	e051      	b.n	800208c <HAL_I2C_Init+0x1dc>
 8001fe8:	2304      	movs	r3, #4
 8001fea:	e04f      	b.n	800208c <HAL_I2C_Init+0x1dc>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d111      	bne.n	8002018 <HAL_I2C_Init+0x168>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1e58      	subs	r0, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	440b      	add	r3, r1
 8002002:	fbb0 f3f3 	udiv	r3, r0, r3
 8002006:	3301      	adds	r3, #1
 8002008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	e012      	b.n	800203e <HAL_I2C_Init+0x18e>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1e58      	subs	r0, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6859      	ldr	r1, [r3, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	0099      	lsls	r1, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	fbb0 f3f3 	udiv	r3, r0, r3
 800202e:	3301      	adds	r3, #1
 8002030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_I2C_Init+0x196>
 8002042:	2301      	movs	r3, #1
 8002044:	e022      	b.n	800208c <HAL_I2C_Init+0x1dc>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10e      	bne.n	800206c <HAL_I2C_Init+0x1bc>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1e58      	subs	r0, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6859      	ldr	r1, [r3, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	440b      	add	r3, r1
 800205c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002060:	3301      	adds	r3, #1
 8002062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800206a:	e00f      	b.n	800208c <HAL_I2C_Init+0x1dc>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	1e58      	subs	r0, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6859      	ldr	r1, [r3, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	0099      	lsls	r1, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002082:	3301      	adds	r3, #1
 8002084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002088:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	6809      	ldr	r1, [r1, #0]
 8002090:	4313      	orrs	r3, r2
 8002092:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69da      	ldr	r2, [r3, #28]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6911      	ldr	r1, [r2, #16]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68d2      	ldr	r2, [r2, #12]
 80020c6:	4311      	orrs	r1, r2
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	430b      	orrs	r3, r1
 80020ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2220      	movs	r2, #32
 8002106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	000186a0 	.word	0x000186a0
 8002128:	001e847f 	.word	0x001e847f
 800212c:	003d08ff 	.word	0x003d08ff
 8002130:	431bde83 	.word	0x431bde83
 8002134:	10624dd3 	.word	0x10624dd3

08002138 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af02      	add	r7, sp, #8
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	4608      	mov	r0, r1
 8002142:	4611      	mov	r1, r2
 8002144:	461a      	mov	r2, r3
 8002146:	4603      	mov	r3, r0
 8002148:	817b      	strh	r3, [r7, #10]
 800214a:	460b      	mov	r3, r1
 800214c:	813b      	strh	r3, [r7, #8]
 800214e:	4613      	mov	r3, r2
 8002150:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002152:	f7ff fbcd 	bl	80018f0 <HAL_GetTick>
 8002156:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b20      	cmp	r3, #32
 8002162:	f040 80d9 	bne.w	8002318 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	2319      	movs	r3, #25
 800216c:	2201      	movs	r2, #1
 800216e:	496d      	ldr	r1, [pc, #436]	@ (8002324 <HAL_I2C_Mem_Write+0x1ec>)
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 fc8b 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800217c:	2302      	movs	r3, #2
 800217e:	e0cc      	b.n	800231a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_I2C_Mem_Write+0x56>
 800218a:	2302      	movs	r3, #2
 800218c:	e0c5      	b.n	800231a <HAL_I2C_Mem_Write+0x1e2>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d007      	beq.n	80021b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2221      	movs	r2, #33	@ 0x21
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2240      	movs	r2, #64	@ 0x40
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a3a      	ldr	r2, [r7, #32]
 80021de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4a4d      	ldr	r2, [pc, #308]	@ (8002328 <HAL_I2C_Mem_Write+0x1f0>)
 80021f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021f6:	88f8      	ldrh	r0, [r7, #6]
 80021f8:	893a      	ldrh	r2, [r7, #8]
 80021fa:	8979      	ldrh	r1, [r7, #10]
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	4603      	mov	r3, r0
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 fac2 	bl	8002790 <I2C_RequestMemoryWrite>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d052      	beq.n	80022b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e081      	b.n	800231a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fd50 	bl	8002cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00d      	beq.n	8002242 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	2b04      	cmp	r3, #4
 800222c:	d107      	bne.n	800223e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800223c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e06b      	b.n	800231a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b04      	cmp	r3, #4
 800227e:	d11b      	bne.n	80022b8 <HAL_I2C_Mem_Write+0x180>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002284:	2b00      	cmp	r3, #0
 8002286:	d017      	beq.n	80022b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a2:	3b01      	subs	r3, #1
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1aa      	bne.n	8002216 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 fd43 	bl	8002d50 <I2C_WaitOnBTFFlagUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00d      	beq.n	80022ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d107      	bne.n	80022e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e016      	b.n	800231a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	e000      	b.n	800231a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002318:	2302      	movs	r3, #2
  }
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	00100002 	.word	0x00100002
 8002328:	ffff0000 	.word	0xffff0000

0800232c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08c      	sub	sp, #48	@ 0x30
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	4608      	mov	r0, r1
 8002336:	4611      	mov	r1, r2
 8002338:	461a      	mov	r2, r3
 800233a:	4603      	mov	r3, r0
 800233c:	817b      	strh	r3, [r7, #10]
 800233e:	460b      	mov	r3, r1
 8002340:	813b      	strh	r3, [r7, #8]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002346:	f7ff fad3 	bl	80018f0 <HAL_GetTick>
 800234a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b20      	cmp	r3, #32
 8002356:	f040 8214 	bne.w	8002782 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2319      	movs	r3, #25
 8002360:	2201      	movs	r2, #1
 8002362:	497b      	ldr	r1, [pc, #492]	@ (8002550 <HAL_I2C_Mem_Read+0x224>)
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 fb91 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002370:	2302      	movs	r3, #2
 8002372:	e207      	b.n	8002784 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_I2C_Mem_Read+0x56>
 800237e:	2302      	movs	r3, #2
 8002380:	e200      	b.n	8002784 <HAL_I2C_Mem_Read+0x458>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	d007      	beq.n	80023a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2222      	movs	r2, #34	@ 0x22
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2240      	movs	r2, #64	@ 0x40
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80023d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002554 <HAL_I2C_Mem_Read+0x228>)
 80023e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ea:	88f8      	ldrh	r0, [r7, #6]
 80023ec:	893a      	ldrh	r2, [r7, #8]
 80023ee:	8979      	ldrh	r1, [r7, #10]
 80023f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	4603      	mov	r3, r0
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 fa5e 	bl	80028bc <I2C_RequestMemoryRead>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e1bc      	b.n	8002784 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800240e:	2b00      	cmp	r3, #0
 8002410:	d113      	bne.n	800243a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002412:	2300      	movs	r3, #0
 8002414:	623b      	str	r3, [r7, #32]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	623b      	str	r3, [r7, #32]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	623b      	str	r3, [r7, #32]
 8002426:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	e190      	b.n	800275c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800243e:	2b01      	cmp	r3, #1
 8002440:	d11b      	bne.n	800247a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002450:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	e170      	b.n	800275c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800247e:	2b02      	cmp	r3, #2
 8002480:	d11b      	bne.n	80024ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002490:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	e150      	b.n	800275c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024d0:	e144      	b.n	800275c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	f200 80f1 	bhi.w	80026be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d123      	bne.n	800252c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fc79 	bl	8002de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e145      	b.n	8002784 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800252a:	e117      	b.n	800275c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002530:	2b02      	cmp	r3, #2
 8002532:	d14e      	bne.n	80025d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800253a:	2200      	movs	r2, #0
 800253c:	4906      	ldr	r1, [pc, #24]	@ (8002558 <HAL_I2C_Mem_Read+0x22c>)
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 faa4 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d008      	beq.n	800255c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e11a      	b.n	8002784 <HAL_I2C_Mem_Read+0x458>
 800254e:	bf00      	nop
 8002550:	00100002 	.word	0x00100002
 8002554:	ffff0000 	.word	0xffff0000
 8002558:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800256a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025d0:	e0c4      	b.n	800275c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d8:	2200      	movs	r2, #0
 80025da:	496c      	ldr	r1, [pc, #432]	@ (800278c <HAL_I2C_Mem_Read+0x460>)
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 fa55 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0cb      	b.n	8002784 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002624:	b29b      	uxth	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002634:	2200      	movs	r2, #0
 8002636:	4955      	ldr	r1, [pc, #340]	@ (800278c <HAL_I2C_Mem_Read+0x460>)
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 fa27 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e09d      	b.n	8002784 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026bc:	e04e      	b.n	800275c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 fb8c 	bl	8002de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e058      	b.n	8002784 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b04      	cmp	r3, #4
 8002710:	d124      	bne.n	800275c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002716:	2b03      	cmp	r3, #3
 8002718:	d107      	bne.n	800272a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002728:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002760:	2b00      	cmp	r3, #0
 8002762:	f47f aeb6 	bne.w	80024d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	e000      	b.n	8002784 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002782:	2302      	movs	r3, #2
  }
}
 8002784:	4618      	mov	r0, r3
 8002786:	3728      	adds	r7, #40	@ 0x28
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	00010004 	.word	0x00010004

08002790 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	4608      	mov	r0, r1
 800279a:	4611      	mov	r1, r2
 800279c:	461a      	mov	r2, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	817b      	strh	r3, [r7, #10]
 80027a2:	460b      	mov	r3, r1
 80027a4:	813b      	strh	r3, [r7, #8]
 80027a6:	4613      	mov	r3, r2
 80027a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f960 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00d      	beq.n	80027ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027e0:	d103      	bne.n	80027ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e05f      	b.n	80028ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027ee:	897b      	ldrh	r3, [r7, #10]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	461a      	mov	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	6a3a      	ldr	r2, [r7, #32]
 8002802:	492d      	ldr	r1, [pc, #180]	@ (80028b8 <I2C_RequestMemoryWrite+0x128>)
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f9bb 	bl	8002b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e04c      	b.n	80028ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800282a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800282c:	6a39      	ldr	r1, [r7, #32]
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 fa46 	bl	8002cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00d      	beq.n	8002856 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	2b04      	cmp	r3, #4
 8002840:	d107      	bne.n	8002852 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002850:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e02b      	b.n	80028ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002856:	88fb      	ldrh	r3, [r7, #6]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d105      	bne.n	8002868 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800285c:	893b      	ldrh	r3, [r7, #8]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	611a      	str	r2, [r3, #16]
 8002866:	e021      	b.n	80028ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002868:	893b      	ldrh	r3, [r7, #8]
 800286a:	0a1b      	lsrs	r3, r3, #8
 800286c:	b29b      	uxth	r3, r3
 800286e:	b2da      	uxtb	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002878:	6a39      	ldr	r1, [r7, #32]
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 fa20 	bl	8002cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00d      	beq.n	80028a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	2b04      	cmp	r3, #4
 800288c:	d107      	bne.n	800289e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800289c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e005      	b.n	80028ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028a2:	893b      	ldrh	r3, [r7, #8]
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	00010002 	.word	0x00010002

080028bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	4608      	mov	r0, r1
 80028c6:	4611      	mov	r1, r2
 80028c8:	461a      	mov	r2, r3
 80028ca:	4603      	mov	r3, r0
 80028cc:	817b      	strh	r3, [r7, #10]
 80028ce:	460b      	mov	r3, r1
 80028d0:	813b      	strh	r3, [r7, #8]
 80028d2:	4613      	mov	r3, r2
 80028d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f8c2 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00d      	beq.n	800292a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002918:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800291c:	d103      	bne.n	8002926 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002924:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e0aa      	b.n	8002a80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800292a:	897b      	ldrh	r3, [r7, #10]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002938:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	6a3a      	ldr	r2, [r7, #32]
 800293e:	4952      	ldr	r1, [pc, #328]	@ (8002a88 <I2C_RequestMemoryRead+0x1cc>)
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 f91d 	bl	8002b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e097      	b.n	8002a80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002968:	6a39      	ldr	r1, [r7, #32]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f9a8 	bl	8002cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00d      	beq.n	8002992 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	2b04      	cmp	r3, #4
 800297c:	d107      	bne.n	800298e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800298c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e076      	b.n	8002a80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d105      	bne.n	80029a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002998:	893b      	ldrh	r3, [r7, #8]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	611a      	str	r2, [r3, #16]
 80029a2:	e021      	b.n	80029e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029a4:	893b      	ldrh	r3, [r7, #8]
 80029a6:	0a1b      	lsrs	r3, r3, #8
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b4:	6a39      	ldr	r1, [r7, #32]
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f982 	bl	8002cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00d      	beq.n	80029de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d107      	bne.n	80029da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e050      	b.n	8002a80 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029de:	893b      	ldrh	r3, [r7, #8]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ea:	6a39      	ldr	r1, [r7, #32]
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 f967 	bl	8002cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00d      	beq.n	8002a14 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d107      	bne.n	8002a10 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e035      	b.n	8002a80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f82b 	bl	8002a8c <I2C_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00d      	beq.n	8002a58 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a4a:	d103      	bne.n	8002a54 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e013      	b.n	8002a80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a58:	897b      	ldrh	r3, [r7, #10]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6a:	6a3a      	ldr	r2, [r7, #32]
 8002a6c:	4906      	ldr	r1, [pc, #24]	@ (8002a88 <I2C_RequestMemoryRead+0x1cc>)
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f886 	bl	8002b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	00010002 	.word	0x00010002

08002a8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a9c:	e048      	b.n	8002b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa4:	d044      	beq.n	8002b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa6:	f7fe ff23 	bl	80018f0 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d302      	bcc.n	8002abc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d139      	bne.n	8002b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	0c1b      	lsrs	r3, r3, #16
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d10d      	bne.n	8002ae2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	43da      	mvns	r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	e00c      	b.n	8002afc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	43da      	mvns	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	4013      	ands	r3, r2
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d116      	bne.n	8002b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	f043 0220 	orr.w	r2, r3, #32
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e023      	b.n	8002b78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	0c1b      	lsrs	r3, r3, #16
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d10d      	bne.n	8002b56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	43da      	mvns	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	4013      	ands	r3, r2
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	e00c      	b.n	8002b70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	43da      	mvns	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	4013      	ands	r3, r2
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d093      	beq.n	8002a9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b8e:	e071      	b.n	8002c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b9e:	d123      	bne.n	8002be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	f043 0204 	orr.w	r2, r3, #4
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e067      	b.n	8002cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bee:	d041      	beq.n	8002c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf0:	f7fe fe7e 	bl	80018f0 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d302      	bcc.n	8002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d136      	bne.n	8002c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	0c1b      	lsrs	r3, r3, #16
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d10c      	bne.n	8002c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	43da      	mvns	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	bf14      	ite	ne
 8002c22:	2301      	movne	r3, #1
 8002c24:	2300      	moveq	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	e00b      	b.n	8002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	43da      	mvns	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	4013      	ands	r3, r2
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf14      	ite	ne
 8002c3c:	2301      	movne	r3, #1
 8002c3e:	2300      	moveq	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d016      	beq.n	8002c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	f043 0220 	orr.w	r2, r3, #32
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e021      	b.n	8002cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	0c1b      	lsrs	r3, r3, #16
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d10c      	bne.n	8002c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	43da      	mvns	r2, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	bf14      	ite	ne
 8002c90:	2301      	movne	r3, #1
 8002c92:	2300      	moveq	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	e00b      	b.n	8002cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	43da      	mvns	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	bf14      	ite	ne
 8002caa:	2301      	movne	r3, #1
 8002cac:	2300      	moveq	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f47f af6d 	bne.w	8002b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ccc:	e034      	b.n	8002d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f8e3 	bl	8002e9a <I2C_IsAcknowledgeFailed>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e034      	b.n	8002d48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce4:	d028      	beq.n	8002d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce6:	f7fe fe03 	bl	80018f0 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d302      	bcc.n	8002cfc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d11d      	bne.n	8002d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d06:	2b80      	cmp	r3, #128	@ 0x80
 8002d08:	d016      	beq.n	8002d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d24:	f043 0220 	orr.w	r2, r3, #32
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e007      	b.n	8002d48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d42:	2b80      	cmp	r3, #128	@ 0x80
 8002d44:	d1c3      	bne.n	8002cce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d5c:	e034      	b.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f89b 	bl	8002e9a <I2C_IsAcknowledgeFailed>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e034      	b.n	8002dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d028      	beq.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d76:	f7fe fdbb 	bl	80018f0 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d302      	bcc.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d11d      	bne.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d016      	beq.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	f043 0220 	orr.w	r2, r3, #32
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e007      	b.n	8002dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d1c3      	bne.n	8002d5e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dec:	e049      	b.n	8002e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b10      	cmp	r3, #16
 8002dfa:	d119      	bne.n	8002e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0210 	mvn.w	r2, #16
 8002e04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e030      	b.n	8002e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e30:	f7fe fd5e 	bl	80018f0 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d302      	bcc.n	8002e46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d11d      	bne.n	8002e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e50:	2b40      	cmp	r3, #64	@ 0x40
 8002e52:	d016      	beq.n	8002e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	f043 0220 	orr.w	r2, r3, #32
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e007      	b.n	8002e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e8c:	2b40      	cmp	r3, #64	@ 0x40
 8002e8e:	d1ae      	bne.n	8002dee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eb0:	d11b      	bne.n	8002eea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002eba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	f043 0204 	orr.w	r2, r3, #4
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e101      	b.n	800310e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d106      	bne.n	8002f2a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f005 fb9d 	bl	8008664 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f38:	d102      	bne.n	8002f40 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f001 ff84 	bl	8004e52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	7c1a      	ldrb	r2, [r3, #16]
 8002f52:	f88d 2000 	strb.w	r2, [sp]
 8002f56:	3304      	adds	r3, #4
 8002f58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f5a:	f001 fe63 	bl	8004c24 <USB_CoreInit>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0ce      	b.n	800310e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2100      	movs	r1, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f001 ff7c 	bl	8004e74 <USB_SetCurrentMode>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d005      	beq.n	8002f8e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2202      	movs	r2, #2
 8002f86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e0bf      	b.n	800310e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	73fb      	strb	r3, [r7, #15]
 8002f92:	e04a      	b.n	800302a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f94:	7bfa      	ldrb	r2, [r7, #15]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	3315      	adds	r3, #21
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fa8:	7bfa      	ldrb	r2, [r7, #15]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	3314      	adds	r3, #20
 8002fb8:	7bfa      	ldrb	r2, [r7, #15]
 8002fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	b298      	uxth	r0, r3
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	332e      	adds	r3, #46	@ 0x2e
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fd4:	7bfa      	ldrb	r2, [r7, #15]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	3318      	adds	r3, #24
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fe8:	7bfa      	ldrb	r2, [r7, #15]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	331c      	adds	r3, #28
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	3320      	adds	r3, #32
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003010:	7bfa      	ldrb	r2, [r7, #15]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	3324      	adds	r3, #36	@ 0x24
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	3301      	adds	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	791b      	ldrb	r3, [r3, #4]
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	429a      	cmp	r2, r3
 8003032:	d3af      	bcc.n	8002f94 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003034:	2300      	movs	r3, #0
 8003036:	73fb      	strb	r3, [r7, #15]
 8003038:	e044      	b.n	80030c4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800303a:	7bfa      	ldrb	r2, [r7, #15]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003050:	7bfa      	ldrb	r2, [r7, #15]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003062:	7bfa      	ldrb	r2, [r7, #15]
 8003064:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003066:	7bfa      	ldrb	r2, [r7, #15]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003078:	2200      	movs	r2, #0
 800307a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800307c:	7bfa      	ldrb	r2, [r7, #15]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030a8:	7bfa      	ldrb	r2, [r7, #15]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	3301      	adds	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	791b      	ldrb	r3, [r3, #4]
 80030c8:	7bfa      	ldrb	r2, [r7, #15]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d3b5      	bcc.n	800303a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	7c1a      	ldrb	r2, [r3, #16]
 80030d6:	f88d 2000 	strb.w	r2, [sp]
 80030da:	3304      	adds	r3, #4
 80030dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030de:	f001 ff15 	bl	8004f0c <USB_DevInit>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e00c      	b.n	800310e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f002 ff5f 	bl	8005fca <USB_DevDisconnect>

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_PCD_Start+0x1c>
 800312e:	2302      	movs	r3, #2
 8003130:	e022      	b.n	8003178 <HAL_PCD_Start+0x62>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800314a:	2b01      	cmp	r3, #1
 800314c:	d105      	bne.n	800315a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003152:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f001 fe66 	bl	8004e30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f002 ff0d 	bl	8005f88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003180:	b590      	push	{r4, r7, lr}
 8003182:	b08d      	sub	sp, #52	@ 0x34
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f002 ffcb 	bl	8006132 <USB_GetMode>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f040 848c 	bne.w	8003abc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f002 ff2f 	bl	800600c <USB_ReadInterrupts>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 8482 	beq.w	8003aba <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	0a1b      	lsrs	r3, r3, #8
 80031c0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f002 ff1c 	bl	800600c <USB_ReadInterrupts>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d107      	bne.n	80031ee <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f002 0202 	and.w	r2, r2, #2
 80031ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f002 ff0a 	bl	800600c <USB_ReadInterrupts>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b10      	cmp	r3, #16
 8003200:	d161      	bne.n	80032c6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	699a      	ldr	r2, [r3, #24]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0210 	bic.w	r2, r2, #16
 8003210:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	f003 020f 	and.w	r2, r3, #15
 800321e:	4613      	mov	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	3304      	adds	r3, #4
 8003230:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	0c5b      	lsrs	r3, r3, #17
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	2b02      	cmp	r3, #2
 800323c:	d124      	bne.n	8003288 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d035      	beq.n	80032b6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003254:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003258:	b29b      	uxth	r3, r3
 800325a:	461a      	mov	r2, r3
 800325c:	6a38      	ldr	r0, [r7, #32]
 800325e:	f002 fd41 	bl	8005ce4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800326e:	441a      	add	r2, r3
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	695a      	ldr	r2, [r3, #20]
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	091b      	lsrs	r3, r3, #4
 800327c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003280:	441a      	add	r2, r3
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	615a      	str	r2, [r3, #20]
 8003286:	e016      	b.n	80032b6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	0c5b      	lsrs	r3, r3, #17
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	2b06      	cmp	r3, #6
 8003292:	d110      	bne.n	80032b6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800329a:	2208      	movs	r2, #8
 800329c:	4619      	mov	r1, r3
 800329e:	6a38      	ldr	r0, [r7, #32]
 80032a0:	f002 fd20 	bl	8005ce4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032b0:	441a      	add	r2, r3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699a      	ldr	r2, [r3, #24]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0210 	orr.w	r2, r2, #16
 80032c4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f002 fe9e 	bl	800600c <USB_ReadInterrupts>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80032da:	f040 80a7 	bne.w	800342c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f002 fea3 	bl	8006032 <USB_ReadDevAllOutEpInterrupt>
 80032ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80032ee:	e099      	b.n	8003424 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80032f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 808e 	beq.w	8003418 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	4611      	mov	r1, r2
 8003306:	4618      	mov	r0, r3
 8003308:	f002 fec7 	bl	800609a <USB_ReadDevOutEPInterrupt>
 800330c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00c      	beq.n	8003332 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	4413      	add	r3, r2
 8003320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003324:	461a      	mov	r2, r3
 8003326:	2301      	movs	r3, #1
 8003328:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800332a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fea3 	bl	8004078 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00c      	beq.n	8003356 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800333c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	4413      	add	r3, r2
 8003344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003348:	461a      	mov	r2, r3
 800334a:	2308      	movs	r3, #8
 800334c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800334e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 ff79 	bl	8004248 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800336c:	461a      	mov	r2, r3
 800336e:	2310      	movs	r3, #16
 8003370:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d030      	beq.n	80033de <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003384:	2b80      	cmp	r3, #128	@ 0x80
 8003386:	d109      	bne.n	800339c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003396:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800339a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800339c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800339e:	4613      	mov	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	3304      	adds	r3, #4
 80033b0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	78db      	ldrb	r3, [r3, #3]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d108      	bne.n	80033cc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2200      	movs	r2, #0
 80033be:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	4619      	mov	r1, r3
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f005 fa48 	bl	800885c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033d8:	461a      	mov	r2, r3
 80033da:	2302      	movs	r3, #2
 80033dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033f4:	461a      	mov	r2, r3
 80033f6:	2320      	movs	r3, #32
 80033f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d009      	beq.n	8003418 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	4413      	add	r3, r2
 800340c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003410:	461a      	mov	r2, r3
 8003412:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003416:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341a:	3301      	adds	r3, #1
 800341c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800341e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003420:	085b      	lsrs	r3, r3, #1
 8003422:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003426:	2b00      	cmp	r3, #0
 8003428:	f47f af62 	bne.w	80032f0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f002 fdeb 	bl	800600c <USB_ReadInterrupts>
 8003436:	4603      	mov	r3, r0
 8003438:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800343c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003440:	f040 80db 	bne.w	80035fa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f002 fe0c 	bl	8006066 <USB_ReadDevAllInEpInterrupt>
 800344e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003454:	e0cd      	b.n	80035f2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 80c2 	beq.w	80035e6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	4611      	mov	r1, r2
 800346c:	4618      	mov	r0, r3
 800346e:	f002 fe32 	bl	80060d6 <USB_ReadDevInEPInterrupt>
 8003472:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d057      	beq.n	800352e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	2201      	movs	r2, #1
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003492:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	43db      	mvns	r3, r3
 8003498:	69f9      	ldr	r1, [r7, #28]
 800349a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800349e:	4013      	ands	r3, r2
 80034a0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034ae:	461a      	mov	r2, r3
 80034b0:	2301      	movs	r3, #1
 80034b2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	799b      	ldrb	r3, [r3, #6]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d132      	bne.n	8003522 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c0:	4613      	mov	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	3320      	adds	r3, #32
 80034cc:	6819      	ldr	r1, [r3, #0]
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d2:	4613      	mov	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4403      	add	r3, r0
 80034dc:	331c      	adds	r3, #28
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4419      	add	r1, r3
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4403      	add	r3, r0
 80034f0:	3320      	adds	r3, #32
 80034f2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80034f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d113      	bne.n	8003522 <HAL_PCD_IRQHandler+0x3a2>
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034fe:	4613      	mov	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	3324      	adds	r3, #36	@ 0x24
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d108      	bne.n	8003522 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800351a:	461a      	mov	r2, r3
 800351c:	2101      	movs	r1, #1
 800351e:	f002 fe39 	bl	8006194 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003524:	b2db      	uxtb	r3, r3
 8003526:	4619      	mov	r1, r3
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f005 f91c 	bl	8008766 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	4413      	add	r3, r2
 8003540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003544:	461a      	mov	r2, r3
 8003546:	2308      	movs	r3, #8
 8003548:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f003 0310 	and.w	r3, r3, #16
 8003550:	2b00      	cmp	r3, #0
 8003552:	d008      	beq.n	8003566 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003560:	461a      	mov	r2, r3
 8003562:	2310      	movs	r3, #16
 8003564:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800357c:	461a      	mov	r2, r3
 800357e:	2340      	movs	r3, #64	@ 0x40
 8003580:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d023      	beq.n	80035d4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800358c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800358e:	6a38      	ldr	r0, [r7, #32]
 8003590:	f001 fe20 	bl	80051d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003594:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	3310      	adds	r3, #16
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	4413      	add	r3, r2
 80035a4:	3304      	adds	r3, #4
 80035a6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	78db      	ldrb	r3, [r3, #3]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d108      	bne.n	80035c2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2200      	movs	r2, #0
 80035b4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	4619      	mov	r1, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f005 f95f 	bl	8008880 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ce:	461a      	mov	r2, r3
 80035d0:	2302      	movs	r3, #2
 80035d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fcbd 	bl	8003f60 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	3301      	adds	r3, #1
 80035ea:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80035ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ee:	085b      	lsrs	r3, r3, #1
 80035f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80035f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f47f af2e 	bne.w	8003456 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f002 fd04 	bl	800600c <USB_ReadInterrupts>
 8003604:	4603      	mov	r3, r0
 8003606:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800360a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800360e:	d122      	bne.n	8003656 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	69fa      	ldr	r2, [r7, #28]
 800361a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800361e:	f023 0301 	bic.w	r3, r3, #1
 8003622:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800362a:	2b01      	cmp	r3, #1
 800362c:	d108      	bne.n	8003640 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003636:	2100      	movs	r1, #0
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 fea3 	bl	8004384 <HAL_PCDEx_LPM_Callback>
 800363e:	e002      	b.n	8003646 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f005 f8fd 	bl	8008840 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003654:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f002 fcd6 	bl	800600c <USB_ReadInterrupts>
 8003660:	4603      	mov	r3, r0
 8003662:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003666:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800366a:	d112      	bne.n	8003692 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b01      	cmp	r3, #1
 800367a:	d102      	bne.n	8003682 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f005 f8b9 	bl	80087f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003690:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f002 fcb8 	bl	800600c <USB_ReadInterrupts>
 800369c:	4603      	mov	r3, r0
 800369e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036a6:	f040 80b7 	bne.w	8003818 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2110      	movs	r1, #16
 80036c4:	4618      	mov	r0, r3
 80036c6:	f001 fd85 	bl	80051d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ca:	2300      	movs	r3, #0
 80036cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036ce:	e046      	b.n	800375e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036dc:	461a      	mov	r2, r3
 80036de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80036e2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036f4:	0151      	lsls	r1, r2, #5
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	440a      	add	r2, r1
 80036fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003702:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003710:	461a      	mov	r2, r3
 8003712:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003716:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003728:	0151      	lsls	r1, r2, #5
 800372a:	69fa      	ldr	r2, [r7, #28]
 800372c:	440a      	add	r2, r1
 800372e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003732:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003736:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	4413      	add	r3, r2
 8003740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003748:	0151      	lsls	r1, r2, #5
 800374a:	69fa      	ldr	r2, [r7, #28]
 800374c:	440a      	add	r2, r1
 800374e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003752:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003756:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375a:	3301      	adds	r3, #1
 800375c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	791b      	ldrb	r3, [r3, #4]
 8003762:	461a      	mov	r2, r3
 8003764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003766:	4293      	cmp	r3, r2
 8003768:	d3b2      	bcc.n	80036d0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003778:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800377c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	7bdb      	ldrb	r3, [r3, #15]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d016      	beq.n	80037b4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800378c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003790:	69fa      	ldr	r2, [r7, #28]
 8003792:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003796:	f043 030b 	orr.w	r3, r3, #11
 800379a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037ac:	f043 030b 	orr.w	r3, r3, #11
 80037b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80037b2:	e015      	b.n	80037e0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80037c6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80037ca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037da:	f043 030b 	orr.w	r3, r3, #11
 80037de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69fa      	ldr	r2, [r7, #28]
 80037ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037ee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80037f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003802:	461a      	mov	r2, r3
 8003804:	f002 fcc6 	bl	8006194 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f002 fbf5 	bl	800600c <USB_ReadInterrupts>
 8003822:	4603      	mov	r3, r0
 8003824:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800382c:	d123      	bne.n	8003876 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f002 fc8b 	bl	800614e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f001 fd42 	bl	80052c6 <USB_GetDevSpeed>
 8003842:	4603      	mov	r3, r0
 8003844:	461a      	mov	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681c      	ldr	r4, [r3, #0]
 800384e:	f001 f9c9 	bl	8004be4 <HAL_RCC_GetHCLKFreq>
 8003852:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003858:	461a      	mov	r2, r3
 800385a:	4620      	mov	r0, r4
 800385c:	f001 fa46 	bl	8004cec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f004 ffa8 	bl	80087b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003874:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f002 fbc6 	bl	800600c <USB_ReadInterrupts>
 8003880:	4603      	mov	r3, r0
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b08      	cmp	r3, #8
 8003888:	d10a      	bne.n	80038a0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f004 ff85 	bl	800879a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f002 0208 	and.w	r2, r2, #8
 800389e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f002 fbb1 	bl	800600c <USB_ReadInterrupts>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b0:	2b80      	cmp	r3, #128	@ 0x80
 80038b2:	d123      	bne.n	80038fc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038c0:	2301      	movs	r3, #1
 80038c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038c4:	e014      	b.n	80038f0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ca:	4613      	mov	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d105      	bne.n	80038ea <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	4619      	mov	r1, r3
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fb0a 	bl	8003efe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ec:	3301      	adds	r3, #1
 80038ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	791b      	ldrb	r3, [r3, #4]
 80038f4:	461a      	mov	r2, r3
 80038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d3e4      	bcc.n	80038c6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f002 fb83 	bl	800600c <USB_ReadInterrupts>
 8003906:	4603      	mov	r3, r0
 8003908:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800390c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003910:	d13c      	bne.n	800398c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003912:	2301      	movs	r3, #1
 8003914:	627b      	str	r3, [r7, #36]	@ 0x24
 8003916:	e02b      	b.n	8003970 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800392c:	4613      	mov	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	3318      	adds	r3, #24
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d115      	bne.n	800396a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800393e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003940:	2b00      	cmp	r3, #0
 8003942:	da12      	bge.n	800396a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003948:	4613      	mov	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	3317      	adds	r3, #23
 8003954:	2201      	movs	r2, #1
 8003956:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395a:	b2db      	uxtb	r3, r3
 800395c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003960:	b2db      	uxtb	r3, r3
 8003962:	4619      	mov	r1, r3
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 faca 	bl	8003efe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	3301      	adds	r3, #1
 800396e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	791b      	ldrb	r3, [r3, #4]
 8003974:	461a      	mov	r2, r3
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	4293      	cmp	r3, r2
 800397a:	d3cd      	bcc.n	8003918 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695a      	ldr	r2, [r3, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800398a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f002 fb3b 	bl	800600c <USB_ReadInterrupts>
 8003996:	4603      	mov	r3, r0
 8003998:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800399c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039a0:	d156      	bne.n	8003a50 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039a2:	2301      	movs	r3, #1
 80039a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80039a6:	e045      	b.n	8003a34 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039bc:	4613      	mov	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d12e      	bne.n	8003a2e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	da2b      	bge.n	8003a2e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80039e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d121      	bne.n	8003a2e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ee:	4613      	mov	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80039fc:	2201      	movs	r2, #1
 80039fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10a      	bne.n	8003a2e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a2a:	6053      	str	r3, [r2, #4]
            break;
 8003a2c:	e008      	b.n	8003a40 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a30:	3301      	adds	r3, #1
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	791b      	ldrb	r3, [r3, #4]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d3b3      	bcc.n	80039a8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003a4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f002 fad9 	bl	800600c <USB_ReadInterrupts>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a64:	d10a      	bne.n	8003a7c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f004 ff1c 	bl	80088a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003a7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f002 fac3 	bl	800600c <USB_ReadInterrupts>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d115      	bne.n	8003abc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f004 ff0c 	bl	80088c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6859      	ldr	r1, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	605a      	str	r2, [r3, #4]
 8003ab8:	e000      	b.n	8003abc <HAL_PCD_IRQHandler+0x93c>
      return;
 8003aba:	bf00      	nop
    }
  }
}
 8003abc:	3734      	adds	r7, #52	@ 0x34
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd90      	pop	{r4, r7, pc}

08003ac2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	460b      	mov	r3, r1
 8003acc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_PCD_SetAddress+0x1a>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e012      	b.n	8003b02 <HAL_PCD_SetAddress+0x40>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	78fa      	ldrb	r2, [r7, #3]
 8003ae8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	4611      	mov	r1, r2
 8003af2:	4618      	mov	r0, r3
 8003af4:	f002 fa22 	bl	8005f3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	4608      	mov	r0, r1
 8003b14:	4611      	mov	r1, r2
 8003b16:	461a      	mov	r2, r3
 8003b18:	4603      	mov	r3, r0
 8003b1a:	70fb      	strb	r3, [r7, #3]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	803b      	strh	r3, [r7, #0]
 8003b20:	4613      	mov	r3, r2
 8003b22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	da0f      	bge.n	8003b50 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	f003 020f 	and.w	r2, r3, #15
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	3310      	adds	r3, #16
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	4413      	add	r3, r2
 8003b44:	3304      	adds	r3, #4
 8003b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	705a      	strb	r2, [r3, #1]
 8003b4e:	e00f      	b.n	8003b70 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	f003 020f 	and.w	r2, r3, #15
 8003b56:	4613      	mov	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	4413      	add	r3, r2
 8003b66:	3304      	adds	r3, #4
 8003b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003b7c:	883b      	ldrh	r3, [r7, #0]
 8003b7e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	78ba      	ldrb	r2, [r7, #2]
 8003b8a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	785b      	ldrb	r3, [r3, #1]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d004      	beq.n	8003b9e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b9e:	78bb      	ldrb	r3, [r7, #2]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d102      	bne.n	8003baa <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_PCD_EP_Open+0xae>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e00e      	b.n	8003bd6 <HAL_PCD_EP_Open+0xcc>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68f9      	ldr	r1, [r7, #12]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 fba2 	bl	8005310 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003bd4:	7afb      	ldrb	r3, [r7, #11]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	460b      	mov	r3, r1
 8003be8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	da0f      	bge.n	8003c12 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	f003 020f 	and.w	r2, r3, #15
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	3310      	adds	r3, #16
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	3304      	adds	r3, #4
 8003c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	705a      	strb	r2, [r3, #1]
 8003c10:	e00f      	b.n	8003c32 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	f003 020f 	and.w	r2, r3, #15
 8003c18:	4613      	mov	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	4413      	add	r3, r2
 8003c28:	3304      	adds	r3, #4
 8003c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_PCD_EP_Close+0x6e>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e00e      	b.n	8003c6a <HAL_PCD_EP_Close+0x8c>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68f9      	ldr	r1, [r7, #12]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f001 fbe0 	bl	8005420 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c82:	7afb      	ldrb	r3, [r7, #11]
 8003c84:	f003 020f 	and.w	r2, r3, #15
 8003c88:	4613      	mov	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4413      	add	r3, r2
 8003c98:	3304      	adds	r3, #4
 8003c9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2200      	movs	r2, #0
 8003cac:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cb4:	7afb      	ldrb	r3, [r7, #11]
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	799b      	ldrb	r3, [r3, #6]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d102      	bne.n	8003cce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	799b      	ldrb	r3, [r3, #6]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	6979      	ldr	r1, [r7, #20]
 8003cda:	f001 fc7d 	bl	80055d8 <USB_EPStartXfer>

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	f003 020f 	and.w	r2, r3, #15
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003d0a:	681b      	ldr	r3, [r3, #0]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	607a      	str	r2, [r7, #4]
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	460b      	mov	r3, r1
 8003d26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d28:	7afb      	ldrb	r3, [r7, #11]
 8003d2a:	f003 020f 	and.w	r2, r3, #15
 8003d2e:	4613      	mov	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	3310      	adds	r3, #16
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2201      	movs	r2, #1
 8003d56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d58:	7afb      	ldrb	r3, [r7, #11]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	799b      	ldrb	r3, [r3, #6]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d102      	bne.n	8003d72 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	799b      	ldrb	r3, [r3, #6]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6979      	ldr	r1, [r7, #20]
 8003d7e:	f001 fc2b 	bl	80055d8 <USB_EPStartXfer>

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	7912      	ldrb	r2, [r2, #4]
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e04f      	b.n	8003e4a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003daa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	da0f      	bge.n	8003dd2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003db2:	78fb      	ldrb	r3, [r7, #3]
 8003db4:	f003 020f 	and.w	r2, r3, #15
 8003db8:	4613      	mov	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	3310      	adds	r3, #16
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	705a      	strb	r2, [r3, #1]
 8003dd0:	e00d      	b.n	8003dee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dd2:	78fa      	ldrb	r2, [r7, #3]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	4413      	add	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	4413      	add	r3, r2
 8003de4:	3304      	adds	r3, #4
 8003de6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_PCD_EP_SetStall+0x82>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e01d      	b.n	8003e4a <HAL_PCD_EP_SetStall+0xbe>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68f9      	ldr	r1, [r7, #12]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f001 ffb9 	bl	8005d94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e22:	78fb      	ldrb	r3, [r7, #3]
 8003e24:	f003 030f 	and.w	r3, r3, #15
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d109      	bne.n	8003e40 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6818      	ldr	r0, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	7999      	ldrb	r1, [r3, #6]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f002 f9aa 	bl	8006194 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	7912      	ldrb	r2, [r2, #4]
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d901      	bls.n	8003e70 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e042      	b.n	8003ef6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	da0f      	bge.n	8003e98 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	f003 020f 	and.w	r2, r3, #15
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	3310      	adds	r3, #16
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	705a      	strb	r2, [r3, #1]
 8003e96:	e00f      	b.n	8003eb8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	f003 020f 	and.w	r2, r3, #15
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	4413      	add	r3, r2
 8003eae:	3304      	adds	r3, #4
 8003eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_PCD_EP_ClrStall+0x86>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e00e      	b.n	8003ef6 <HAL_PCD_EP_ClrStall+0xa4>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68f9      	ldr	r1, [r7, #12]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f001 ffc2 	bl	8005e70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	460b      	mov	r3, r1
 8003f08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	da0c      	bge.n	8003f2c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	f003 020f 	and.w	r2, r3, #15
 8003f18:	4613      	mov	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	3310      	adds	r3, #16
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	3304      	adds	r3, #4
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	e00c      	b.n	8003f46 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	f003 020f 	and.w	r2, r3, #15
 8003f32:	4613      	mov	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	4413      	add	r3, r2
 8003f42:	3304      	adds	r3, #4
 8003f44:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68f9      	ldr	r1, [r7, #12]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f001 fde1 	bl	8005b14 <USB_EPStopXfer>
 8003f52:	4603      	mov	r3, r0
 8003f54:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f56:	7afb      	ldrb	r3, [r7, #11]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08a      	sub	sp, #40	@ 0x28
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	4613      	mov	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	3310      	adds	r3, #16
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	4413      	add	r3, r2
 8003f84:	3304      	adds	r3, #4
 8003f86:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	695a      	ldr	r2, [r3, #20]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d901      	bls.n	8003f98 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e06b      	b.n	8004070 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d902      	bls.n	8003fb4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	3303      	adds	r3, #3
 8003fb8:	089b      	lsrs	r3, r3, #2
 8003fba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fbc:	e02a      	b.n	8004014 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d902      	bls.n	8003fda <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	3303      	adds	r3, #3
 8003fde:	089b      	lsrs	r3, r3, #2
 8003fe0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	68d9      	ldr	r1, [r3, #12]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	6978      	ldr	r0, [r7, #20]
 8003ff8:	f001 fe36 	bl	8005c68 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	441a      	add	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	441a      	add	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	4413      	add	r3, r2
 800401c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	429a      	cmp	r2, r3
 8004028:	d809      	bhi.n	800403e <PCD_WriteEmptyTxFifo+0xde>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004032:	429a      	cmp	r2, r3
 8004034:	d203      	bcs.n	800403e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1bf      	bne.n	8003fbe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	429a      	cmp	r2, r3
 8004048:	d811      	bhi.n	800406e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	2201      	movs	r2, #1
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800405e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	43db      	mvns	r3, r3
 8004064:	6939      	ldr	r1, [r7, #16]
 8004066:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800406a:	4013      	ands	r3, r2
 800406c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3720      	adds	r7, #32
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	333c      	adds	r3, #60	@ 0x3c
 8004090:	3304      	adds	r3, #4
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	799b      	ldrb	r3, [r3, #6]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d17b      	bne.n	80041a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d015      	beq.n	80040e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	4a61      	ldr	r2, [pc, #388]	@ (8004240 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	f240 80b9 	bls.w	8004234 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 80b3 	beq.w	8004234 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040da:	461a      	mov	r2, r3
 80040dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040e0:	6093      	str	r3, [r2, #8]
 80040e2:	e0a7      	b.n	8004234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f003 0320 	and.w	r3, r3, #32
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040fa:	461a      	mov	r2, r3
 80040fc:	2320      	movs	r3, #32
 80040fe:	6093      	str	r3, [r2, #8]
 8004100:	e098      	b.n	8004234 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004108:	2b00      	cmp	r3, #0
 800410a:	f040 8093 	bne.w	8004234 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	4a4b      	ldr	r2, [pc, #300]	@ (8004240 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d90f      	bls.n	8004136 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800412c:	461a      	mov	r2, r3
 800412e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004132:	6093      	str	r3, [r2, #8]
 8004134:	e07e      	b.n	8004234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	4413      	add	r3, r2
 8004148:	3304      	adds	r3, #4
 800414a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a1a      	ldr	r2, [r3, #32]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	0159      	lsls	r1, r3, #5
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	440b      	add	r3, r1
 8004158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004162:	1ad2      	subs	r2, r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d114      	bne.n	8004198 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d109      	bne.n	800418a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004180:	461a      	mov	r2, r3
 8004182:	2101      	movs	r1, #1
 8004184:	f002 f806 	bl	8006194 <USB_EP0_OutStart>
 8004188:	e006      	b.n	8004198 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	441a      	add	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	4619      	mov	r1, r3
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f004 fac6 	bl	8008730 <HAL_PCD_DataOutStageCallback>
 80041a4:	e046      	b.n	8004234 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	4a26      	ldr	r2, [pc, #152]	@ (8004244 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d124      	bne.n	80041f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c4:	461a      	mov	r2, r3
 80041c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041ca:	6093      	str	r3, [r2, #8]
 80041cc:	e032      	b.n	8004234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e4:	461a      	mov	r2, r3
 80041e6:	2320      	movs	r3, #32
 80041e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	4619      	mov	r1, r3
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f004 fa9d 	bl	8008730 <HAL_PCD_DataOutStageCallback>
 80041f6:	e01d      	b.n	8004234 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d114      	bne.n	8004228 <PCD_EP_OutXfrComplete_int+0x1b0>
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	4613      	mov	r3, r2
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	4413      	add	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	440b      	add	r3, r1
 800420c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d108      	bne.n	8004228 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004220:	461a      	mov	r2, r3
 8004222:	2100      	movs	r1, #0
 8004224:	f001 ffb6 	bl	8006194 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	4619      	mov	r1, r3
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f004 fa7e 	bl	8008730 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	4f54300a 	.word	0x4f54300a
 8004244:	4f54310a 	.word	0x4f54310a

08004248 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	333c      	adds	r3, #60	@ 0x3c
 8004260:	3304      	adds	r3, #4
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4a15      	ldr	r2, [pc, #84]	@ (80042d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d90e      	bls.n	800429c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004284:	2b00      	cmp	r3, #0
 8004286:	d009      	beq.n	800429c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004294:	461a      	mov	r2, r3
 8004296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800429a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f004 fa35 	bl	800870c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4a0a      	ldr	r2, [pc, #40]	@ (80042d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d90c      	bls.n	80042c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	799b      	ldrb	r3, [r3, #6]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d108      	bne.n	80042c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042bc:	461a      	mov	r2, r3
 80042be:	2101      	movs	r1, #1
 80042c0:	f001 ff68 	bl	8006194 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	4f54300a 	.word	0x4f54300a

080042d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	70fb      	strb	r3, [r7, #3]
 80042e0:	4613      	mov	r3, r2
 80042e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d107      	bne.n	8004302 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042f2:	883b      	ldrh	r3, [r7, #0]
 80042f4:	0419      	lsls	r1, r3, #16
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8004300:	e028      	b.n	8004354 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	4413      	add	r3, r2
 800430e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004310:	2300      	movs	r3, #0
 8004312:	73fb      	strb	r3, [r7, #15]
 8004314:	e00d      	b.n	8004332 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	3340      	adds	r3, #64	@ 0x40
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	0c1b      	lsrs	r3, r3, #16
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	4413      	add	r3, r2
 800432a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	3301      	adds	r3, #1
 8004330:	73fb      	strb	r3, [r7, #15]
 8004332:	7bfa      	ldrb	r2, [r7, #15]
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	3b01      	subs	r3, #1
 8004338:	429a      	cmp	r2, r3
 800433a:	d3ec      	bcc.n	8004316 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800433c:	883b      	ldrh	r3, [r7, #0]
 800433e:	0418      	lsls	r0, r3, #16
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6819      	ldr	r1, [r3, #0]
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	3b01      	subs	r3, #1
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	4302      	orrs	r2, r0
 800434c:	3340      	adds	r3, #64	@ 0x40
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	460b      	mov	r3, r1
 800436c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	887a      	ldrh	r2, [r7, #2]
 8004374:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e267      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d075      	beq.n	80044a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043ba:	4b88      	ldr	r3, [pc, #544]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 030c 	and.w	r3, r3, #12
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d00c      	beq.n	80043e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043c6:	4b85      	ldr	r3, [pc, #532]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d112      	bne.n	80043f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043d2:	4b82      	ldr	r3, [pc, #520]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043de:	d10b      	bne.n	80043f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e0:	4b7e      	ldr	r3, [pc, #504]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d05b      	beq.n	80044a4 <HAL_RCC_OscConfig+0x108>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d157      	bne.n	80044a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e242      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004400:	d106      	bne.n	8004410 <HAL_RCC_OscConfig+0x74>
 8004402:	4b76      	ldr	r3, [pc, #472]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a75      	ldr	r2, [pc, #468]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 8004408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	e01d      	b.n	800444c <HAL_RCC_OscConfig+0xb0>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004418:	d10c      	bne.n	8004434 <HAL_RCC_OscConfig+0x98>
 800441a:	4b70      	ldr	r3, [pc, #448]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a6f      	ldr	r2, [pc, #444]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 8004420:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	4b6d      	ldr	r3, [pc, #436]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a6c      	ldr	r2, [pc, #432]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 800442c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	e00b      	b.n	800444c <HAL_RCC_OscConfig+0xb0>
 8004434:	4b69      	ldr	r3, [pc, #420]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a68      	ldr	r2, [pc, #416]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 800443a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	4b66      	ldr	r3, [pc, #408]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a65      	ldr	r2, [pc, #404]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 8004446:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800444a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d013      	beq.n	800447c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004454:	f7fd fa4c 	bl	80018f0 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800445c:	f7fd fa48 	bl	80018f0 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b64      	cmp	r3, #100	@ 0x64
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e207      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446e:	4b5b      	ldr	r3, [pc, #364]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0xc0>
 800447a:	e014      	b.n	80044a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447c:	f7fd fa38 	bl	80018f0 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004484:	f7fd fa34 	bl	80018f0 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b64      	cmp	r3, #100	@ 0x64
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e1f3      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004496:	4b51      	ldr	r3, [pc, #324]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0xe8>
 80044a2:	e000      	b.n	80044a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d063      	beq.n	800457a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80044b2:	4b4a      	ldr	r3, [pc, #296]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 030c 	and.w	r3, r3, #12
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00b      	beq.n	80044d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044be:	4b47      	ldr	r3, [pc, #284]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d11c      	bne.n	8004504 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ca:	4b44      	ldr	r3, [pc, #272]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d116      	bne.n	8004504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d6:	4b41      	ldr	r3, [pc, #260]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <HAL_RCC_OscConfig+0x152>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d001      	beq.n	80044ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e1c7      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ee:	4b3b      	ldr	r3, [pc, #236]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	4937      	ldr	r1, [pc, #220]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004502:	e03a      	b.n	800457a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d020      	beq.n	800454e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800450c:	4b34      	ldr	r3, [pc, #208]	@ (80045e0 <HAL_RCC_OscConfig+0x244>)
 800450e:	2201      	movs	r2, #1
 8004510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004512:	f7fd f9ed 	bl	80018f0 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800451a:	f7fd f9e9 	bl	80018f0 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e1a8      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452c:	4b2b      	ldr	r3, [pc, #172]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004538:	4b28      	ldr	r3, [pc, #160]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	4925      	ldr	r1, [pc, #148]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 8004548:	4313      	orrs	r3, r2
 800454a:	600b      	str	r3, [r1, #0]
 800454c:	e015      	b.n	800457a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800454e:	4b24      	ldr	r3, [pc, #144]	@ (80045e0 <HAL_RCC_OscConfig+0x244>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7fd f9cc 	bl	80018f0 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800455c:	f7fd f9c8 	bl	80018f0 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e187      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456e:	4b1b      	ldr	r3, [pc, #108]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d036      	beq.n	80045f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d016      	beq.n	80045bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800458e:	4b15      	ldr	r3, [pc, #84]	@ (80045e4 <HAL_RCC_OscConfig+0x248>)
 8004590:	2201      	movs	r2, #1
 8004592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fd f9ac 	bl	80018f0 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800459c:	f7fd f9a8 	bl	80018f0 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e167      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ae:	4b0b      	ldr	r3, [pc, #44]	@ (80045dc <HAL_RCC_OscConfig+0x240>)
 80045b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCC_OscConfig+0x200>
 80045ba:	e01b      	b.n	80045f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045bc:	4b09      	ldr	r3, [pc, #36]	@ (80045e4 <HAL_RCC_OscConfig+0x248>)
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c2:	f7fd f995 	bl	80018f0 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c8:	e00e      	b.n	80045e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ca:	f7fd f991 	bl	80018f0 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d907      	bls.n	80045e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e150      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
 80045dc:	40023800 	.word	0x40023800
 80045e0:	42470000 	.word	0x42470000
 80045e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e8:	4b88      	ldr	r3, [pc, #544]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 80045ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1ea      	bne.n	80045ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8097 	beq.w	8004730 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004602:	2300      	movs	r3, #0
 8004604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004606:	4b81      	ldr	r3, [pc, #516]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 8004608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10f      	bne.n	8004632 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004612:	2300      	movs	r3, #0
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	4b7d      	ldr	r3, [pc, #500]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	4a7c      	ldr	r2, [pc, #496]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 800461c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004620:	6413      	str	r3, [r2, #64]	@ 0x40
 8004622:	4b7a      	ldr	r3, [pc, #488]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800462a:	60bb      	str	r3, [r7, #8]
 800462c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800462e:	2301      	movs	r3, #1
 8004630:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004632:	4b77      	ldr	r3, [pc, #476]	@ (8004810 <HAL_RCC_OscConfig+0x474>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800463a:	2b00      	cmp	r3, #0
 800463c:	d118      	bne.n	8004670 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800463e:	4b74      	ldr	r3, [pc, #464]	@ (8004810 <HAL_RCC_OscConfig+0x474>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a73      	ldr	r2, [pc, #460]	@ (8004810 <HAL_RCC_OscConfig+0x474>)
 8004644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800464a:	f7fd f951 	bl	80018f0 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004652:	f7fd f94d 	bl	80018f0 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e10c      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004664:	4b6a      	ldr	r3, [pc, #424]	@ (8004810 <HAL_RCC_OscConfig+0x474>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d106      	bne.n	8004686 <HAL_RCC_OscConfig+0x2ea>
 8004678:	4b64      	ldr	r3, [pc, #400]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467c:	4a63      	ldr	r2, [pc, #396]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	6713      	str	r3, [r2, #112]	@ 0x70
 8004684:	e01c      	b.n	80046c0 <HAL_RCC_OscConfig+0x324>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	2b05      	cmp	r3, #5
 800468c:	d10c      	bne.n	80046a8 <HAL_RCC_OscConfig+0x30c>
 800468e:	4b5f      	ldr	r3, [pc, #380]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004692:	4a5e      	ldr	r2, [pc, #376]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 8004694:	f043 0304 	orr.w	r3, r3, #4
 8004698:	6713      	str	r3, [r2, #112]	@ 0x70
 800469a:	4b5c      	ldr	r3, [pc, #368]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469e:	4a5b      	ldr	r2, [pc, #364]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80046a6:	e00b      	b.n	80046c0 <HAL_RCC_OscConfig+0x324>
 80046a8:	4b58      	ldr	r3, [pc, #352]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ac:	4a57      	ldr	r2, [pc, #348]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 80046ae:	f023 0301 	bic.w	r3, r3, #1
 80046b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80046b4:	4b55      	ldr	r3, [pc, #340]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 80046b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b8:	4a54      	ldr	r2, [pc, #336]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 80046ba:	f023 0304 	bic.w	r3, r3, #4
 80046be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d015      	beq.n	80046f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c8:	f7fd f912 	bl	80018f0 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ce:	e00a      	b.n	80046e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d0:	f7fd f90e 	bl	80018f0 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046de:	4293      	cmp	r3, r2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e0cb      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e6:	4b49      	ldr	r3, [pc, #292]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0ee      	beq.n	80046d0 <HAL_RCC_OscConfig+0x334>
 80046f2:	e014      	b.n	800471e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f4:	f7fd f8fc 	bl	80018f0 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046fa:	e00a      	b.n	8004712 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fc:	f7fd f8f8 	bl	80018f0 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800470a:	4293      	cmp	r3, r2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e0b5      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004712:	4b3e      	ldr	r3, [pc, #248]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1ee      	bne.n	80046fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800471e:	7dfb      	ldrb	r3, [r7, #23]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d105      	bne.n	8004730 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004724:	4b39      	ldr	r3, [pc, #228]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 8004726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004728:	4a38      	ldr	r2, [pc, #224]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 800472a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800472e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 80a1 	beq.w	800487c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800473a:	4b34      	ldr	r3, [pc, #208]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b08      	cmp	r3, #8
 8004744:	d05c      	beq.n	8004800 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d141      	bne.n	80047d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474e:	4b31      	ldr	r3, [pc, #196]	@ (8004814 <HAL_RCC_OscConfig+0x478>)
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004754:	f7fd f8cc 	bl	80018f0 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800475c:	f7fd f8c8 	bl	80018f0 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e087      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476e:	4b27      	ldr	r3, [pc, #156]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1f0      	bne.n	800475c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69da      	ldr	r2, [r3, #28]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004788:	019b      	lsls	r3, r3, #6
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004790:	085b      	lsrs	r3, r3, #1
 8004792:	3b01      	subs	r3, #1
 8004794:	041b      	lsls	r3, r3, #16
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479c:	061b      	lsls	r3, r3, #24
 800479e:	491b      	ldr	r1, [pc, #108]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004814 <HAL_RCC_OscConfig+0x478>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047aa:	f7fd f8a1 	bl	80018f0 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b2:	f7fd f89d 	bl	80018f0 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e05c      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c4:	4b11      	ldr	r3, [pc, #68]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <HAL_RCC_OscConfig+0x416>
 80047d0:	e054      	b.n	800487c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d2:	4b10      	ldr	r3, [pc, #64]	@ (8004814 <HAL_RCC_OscConfig+0x478>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d8:	f7fd f88a 	bl	80018f0 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e0:	f7fd f886 	bl	80018f0 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e045      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f2:	4b06      	ldr	r3, [pc, #24]	@ (800480c <HAL_RCC_OscConfig+0x470>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x444>
 80047fe:	e03d      	b.n	800487c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d107      	bne.n	8004818 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e038      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
 800480c:	40023800 	.word	0x40023800
 8004810:	40007000 	.word	0x40007000
 8004814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004818:	4b1b      	ldr	r3, [pc, #108]	@ (8004888 <HAL_RCC_OscConfig+0x4ec>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d028      	beq.n	8004878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004830:	429a      	cmp	r2, r3
 8004832:	d121      	bne.n	8004878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483e:	429a      	cmp	r2, r3
 8004840:	d11a      	bne.n	8004878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004848:	4013      	ands	r3, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800484e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004850:	4293      	cmp	r3, r2
 8004852:	d111      	bne.n	8004878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485e:	085b      	lsrs	r3, r3, #1
 8004860:	3b01      	subs	r3, #1
 8004862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004864:	429a      	cmp	r2, r3
 8004866:	d107      	bne.n	8004878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004874:	429a      	cmp	r2, r3
 8004876:	d001      	beq.n	800487c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40023800 	.word	0x40023800

0800488c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0cc      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048a0:	4b68      	ldr	r3, [pc, #416]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d90c      	bls.n	80048c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ae:	4b65      	ldr	r3, [pc, #404]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b6:	4b63      	ldr	r3, [pc, #396]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0b8      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d020      	beq.n	8004916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048e0:	4b59      	ldr	r3, [pc, #356]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	4a58      	ldr	r2, [pc, #352]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048f8:	4b53      	ldr	r3, [pc, #332]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	4a52      	ldr	r2, [pc, #328]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004904:	4b50      	ldr	r3, [pc, #320]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	494d      	ldr	r1, [pc, #308]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	4313      	orrs	r3, r2
 8004914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d044      	beq.n	80049ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d107      	bne.n	800493a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492a:	4b47      	ldr	r3, [pc, #284]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d119      	bne.n	800496a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e07f      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d003      	beq.n	800494a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004946:	2b03      	cmp	r3, #3
 8004948:	d107      	bne.n	800495a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d109      	bne.n	800496a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e06f      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800495a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e067      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800496a:	4b37      	ldr	r3, [pc, #220]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f023 0203 	bic.w	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	4934      	ldr	r1, [pc, #208]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	4313      	orrs	r3, r2
 800497a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800497c:	f7fc ffb8 	bl	80018f0 <HAL_GetTick>
 8004980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004982:	e00a      	b.n	800499a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004984:	f7fc ffb4 	bl	80018f0 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e04f      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499a:	4b2b      	ldr	r3, [pc, #172]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 020c 	and.w	r2, r3, #12
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d1eb      	bne.n	8004984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049ac:	4b25      	ldr	r3, [pc, #148]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d20c      	bcs.n	80049d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ba:	4b22      	ldr	r3, [pc, #136]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c2:	4b20      	ldr	r3, [pc, #128]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d001      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e032      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d008      	beq.n	80049f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e0:	4b19      	ldr	r3, [pc, #100]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	4916      	ldr	r1, [pc, #88]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049fe:	4b12      	ldr	r3, [pc, #72]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	490e      	ldr	r1, [pc, #56]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a12:	f000 f821 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 8004a16:	4602      	mov	r2, r0
 8004a18:	4b0b      	ldr	r3, [pc, #44]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	091b      	lsrs	r3, r3, #4
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	490a      	ldr	r1, [pc, #40]	@ (8004a4c <HAL_RCC_ClockConfig+0x1c0>)
 8004a24:	5ccb      	ldrb	r3, [r1, r3]
 8004a26:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2a:	4a09      	ldr	r2, [pc, #36]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a2e:	4b09      	ldr	r3, [pc, #36]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fc ff18 	bl	8001868 <HAL_InitTick>

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40023c00 	.word	0x40023c00
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	0800bec4 	.word	0x0800bec4
 8004a50:	20000000 	.word	0x20000000
 8004a54:	20000004 	.word	0x20000004

08004a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a5c:	b090      	sub	sp, #64	@ 0x40
 8004a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a70:	4b59      	ldr	r3, [pc, #356]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 030c 	and.w	r3, r3, #12
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d00d      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0x40>
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	f200 80a1 	bhi.w	8004bc4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_RCC_GetSysClockFreq+0x34>
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d003      	beq.n	8004a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a8a:	e09b      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a8c:	4b53      	ldr	r3, [pc, #332]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x184>)
 8004a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a90:	e09b      	b.n	8004bca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a92:	4b53      	ldr	r3, [pc, #332]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a94:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a96:	e098      	b.n	8004bca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a98:	4b4f      	ldr	r3, [pc, #316]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004aa0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aa2:	4b4d      	ldr	r3, [pc, #308]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d028      	beq.n	8004b00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aae:	4b4a      	ldr	r3, [pc, #296]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	099b      	lsrs	r3, r3, #6
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	623b      	str	r3, [r7, #32]
 8004ab8:	627a      	str	r2, [r7, #36]	@ 0x24
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	4b47      	ldr	r3, [pc, #284]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ac4:	fb03 f201 	mul.w	r2, r3, r1
 8004ac8:	2300      	movs	r3, #0
 8004aca:	fb00 f303 	mul.w	r3, r0, r3
 8004ace:	4413      	add	r3, r2
 8004ad0:	4a43      	ldr	r2, [pc, #268]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ad2:	fba0 1202 	umull	r1, r2, r0, r2
 8004ad6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ad8:	460a      	mov	r2, r1
 8004ada:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004adc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ade:	4413      	add	r3, r2
 8004ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	61bb      	str	r3, [r7, #24]
 8004ae8:	61fa      	str	r2, [r7, #28]
 8004aea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004aee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004af2:	f7fc f8b1 	bl	8000c58 <__aeabi_uldivmod>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4613      	mov	r3, r2
 8004afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004afe:	e053      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b00:	4b35      	ldr	r3, [pc, #212]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	099b      	lsrs	r3, r3, #6
 8004b06:	2200      	movs	r2, #0
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	617a      	str	r2, [r7, #20]
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b12:	f04f 0b00 	mov.w	fp, #0
 8004b16:	4652      	mov	r2, sl
 8004b18:	465b      	mov	r3, fp
 8004b1a:	f04f 0000 	mov.w	r0, #0
 8004b1e:	f04f 0100 	mov.w	r1, #0
 8004b22:	0159      	lsls	r1, r3, #5
 8004b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b28:	0150      	lsls	r0, r2, #5
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	ebb2 080a 	subs.w	r8, r2, sl
 8004b32:	eb63 090b 	sbc.w	r9, r3, fp
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b4a:	ebb2 0408 	subs.w	r4, r2, r8
 8004b4e:	eb63 0509 	sbc.w	r5, r3, r9
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	00eb      	lsls	r3, r5, #3
 8004b5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b60:	00e2      	lsls	r2, r4, #3
 8004b62:	4614      	mov	r4, r2
 8004b64:	461d      	mov	r5, r3
 8004b66:	eb14 030a 	adds.w	r3, r4, sl
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	eb45 030b 	adc.w	r3, r5, fp
 8004b70:	607b      	str	r3, [r7, #4]
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b7e:	4629      	mov	r1, r5
 8004b80:	028b      	lsls	r3, r1, #10
 8004b82:	4621      	mov	r1, r4
 8004b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b88:	4621      	mov	r1, r4
 8004b8a:	028a      	lsls	r2, r1, #10
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	4619      	mov	r1, r3
 8004b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b92:	2200      	movs	r2, #0
 8004b94:	60bb      	str	r3, [r7, #8]
 8004b96:	60fa      	str	r2, [r7, #12]
 8004b98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b9c:	f7fc f85c 	bl	8000c58 <__aeabi_uldivmod>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	0c1b      	lsrs	r3, r3, #16
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004bb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004bc2:	e002      	b.n	8004bca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bc4:	4b05      	ldr	r3, [pc, #20]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x184>)
 8004bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3740      	adds	r7, #64	@ 0x40
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	00f42400 	.word	0x00f42400
 8004be0:	017d7840 	.word	0x017d7840

08004be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004be8:	4b03      	ldr	r3, [pc, #12]	@ (8004bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bea:	681b      	ldr	r3, [r3, #0]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	20000000 	.word	0x20000000

08004bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c00:	f7ff fff0 	bl	8004be4 <HAL_RCC_GetHCLKFreq>
 8004c04:	4602      	mov	r2, r0
 8004c06:	4b05      	ldr	r3, [pc, #20]	@ (8004c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	0a9b      	lsrs	r3, r3, #10
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	4903      	ldr	r1, [pc, #12]	@ (8004c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c12:	5ccb      	ldrb	r3, [r1, r3]
 8004c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	0800bed4 	.word	0x0800bed4

08004c24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c24:	b084      	sub	sp, #16
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b084      	sub	sp, #16
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	f107 001c 	add.w	r0, r7, #28
 8004c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c36:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d123      	bne.n	8004c86 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c42:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004c52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d105      	bne.n	8004c7a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f001 fae8 	bl	8006250 <USB_CoreReset>
 8004c80:	4603      	mov	r3, r0
 8004c82:	73fb      	strb	r3, [r7, #15]
 8004c84:	e01b      	b.n	8004cbe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f001 fadc 	bl	8006250 <USB_CoreReset>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c9c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d106      	bne.n	8004cb2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	639a      	str	r2, [r3, #56]	@ 0x38
 8004cb0:	e005      	b.n	8004cbe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004cbe:	7fbb      	ldrb	r3, [r7, #30]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d10b      	bne.n	8004cdc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f043 0206 	orr.w	r2, r3, #6
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f043 0220 	orr.w	r2, r3, #32
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ce8:	b004      	add	sp, #16
 8004cea:	4770      	bx	lr

08004cec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004cfa:	79fb      	ldrb	r3, [r7, #7]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d165      	bne.n	8004dcc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4a41      	ldr	r2, [pc, #260]	@ (8004e08 <USB_SetTurnaroundTime+0x11c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d906      	bls.n	8004d16 <USB_SetTurnaroundTime+0x2a>
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4a40      	ldr	r2, [pc, #256]	@ (8004e0c <USB_SetTurnaroundTime+0x120>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d202      	bcs.n	8004d16 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d10:	230f      	movs	r3, #15
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	e062      	b.n	8004ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	4a3c      	ldr	r2, [pc, #240]	@ (8004e0c <USB_SetTurnaroundTime+0x120>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d306      	bcc.n	8004d2c <USB_SetTurnaroundTime+0x40>
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	4a3b      	ldr	r2, [pc, #236]	@ (8004e10 <USB_SetTurnaroundTime+0x124>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d202      	bcs.n	8004d2c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d26:	230e      	movs	r3, #14
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	e057      	b.n	8004ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4a38      	ldr	r2, [pc, #224]	@ (8004e10 <USB_SetTurnaroundTime+0x124>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d306      	bcc.n	8004d42 <USB_SetTurnaroundTime+0x56>
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4a37      	ldr	r2, [pc, #220]	@ (8004e14 <USB_SetTurnaroundTime+0x128>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d202      	bcs.n	8004d42 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d3c:	230d      	movs	r3, #13
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	e04c      	b.n	8004ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	4a33      	ldr	r2, [pc, #204]	@ (8004e14 <USB_SetTurnaroundTime+0x128>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d306      	bcc.n	8004d58 <USB_SetTurnaroundTime+0x6c>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	4a32      	ldr	r2, [pc, #200]	@ (8004e18 <USB_SetTurnaroundTime+0x12c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d802      	bhi.n	8004d58 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d52:	230c      	movs	r3, #12
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	e041      	b.n	8004ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4a2f      	ldr	r2, [pc, #188]	@ (8004e18 <USB_SetTurnaroundTime+0x12c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d906      	bls.n	8004d6e <USB_SetTurnaroundTime+0x82>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4a2e      	ldr	r2, [pc, #184]	@ (8004e1c <USB_SetTurnaroundTime+0x130>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d802      	bhi.n	8004d6e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d68:	230b      	movs	r3, #11
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	e036      	b.n	8004ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	4a2a      	ldr	r2, [pc, #168]	@ (8004e1c <USB_SetTurnaroundTime+0x130>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d906      	bls.n	8004d84 <USB_SetTurnaroundTime+0x98>
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	4a29      	ldr	r2, [pc, #164]	@ (8004e20 <USB_SetTurnaroundTime+0x134>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d802      	bhi.n	8004d84 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d7e:	230a      	movs	r3, #10
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	e02b      	b.n	8004ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4a26      	ldr	r2, [pc, #152]	@ (8004e20 <USB_SetTurnaroundTime+0x134>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d906      	bls.n	8004d9a <USB_SetTurnaroundTime+0xae>
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	4a25      	ldr	r2, [pc, #148]	@ (8004e24 <USB_SetTurnaroundTime+0x138>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d202      	bcs.n	8004d9a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004d94:	2309      	movs	r3, #9
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	e020      	b.n	8004ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	4a21      	ldr	r2, [pc, #132]	@ (8004e24 <USB_SetTurnaroundTime+0x138>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d306      	bcc.n	8004db0 <USB_SetTurnaroundTime+0xc4>
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	4a20      	ldr	r2, [pc, #128]	@ (8004e28 <USB_SetTurnaroundTime+0x13c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d802      	bhi.n	8004db0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004daa:	2308      	movs	r3, #8
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	e015      	b.n	8004ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4a1d      	ldr	r2, [pc, #116]	@ (8004e28 <USB_SetTurnaroundTime+0x13c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d906      	bls.n	8004dc6 <USB_SetTurnaroundTime+0xda>
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4a1c      	ldr	r2, [pc, #112]	@ (8004e2c <USB_SetTurnaroundTime+0x140>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d202      	bcs.n	8004dc6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004dc0:	2307      	movs	r3, #7
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	e00a      	b.n	8004ddc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004dc6:	2306      	movs	r3, #6
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	e007      	b.n	8004ddc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004dcc:	79fb      	ldrb	r3, [r7, #7]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d102      	bne.n	8004dd8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004dd2:	2309      	movs	r3, #9
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	e001      	b.n	8004ddc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004dd8:	2309      	movs	r3, #9
 8004dda:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	029b      	lsls	r3, r3, #10
 8004df0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004df4:	431a      	orrs	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	00d8acbf 	.word	0x00d8acbf
 8004e0c:	00e4e1c0 	.word	0x00e4e1c0
 8004e10:	00f42400 	.word	0x00f42400
 8004e14:	01067380 	.word	0x01067380
 8004e18:	011a499f 	.word	0x011a499f
 8004e1c:	01312cff 	.word	0x01312cff
 8004e20:	014ca43f 	.word	0x014ca43f
 8004e24:	016e3600 	.word	0x016e3600
 8004e28:	01a6ab1f 	.word	0x01a6ab1f
 8004e2c:	01e84800 	.word	0x01e84800

08004e30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f043 0201 	orr.w	r2, r3, #1
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f023 0201 	bic.w	r2, r3, #1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e90:	78fb      	ldrb	r3, [r7, #3]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d115      	bne.n	8004ec2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ea2:	200a      	movs	r0, #10
 8004ea4:	f7fc fd30 	bl	8001908 <HAL_Delay>
      ms += 10U;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	330a      	adds	r3, #10
 8004eac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f001 f93f 	bl	8006132 <USB_GetMode>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d01e      	beq.n	8004ef8 <USB_SetCurrentMode+0x84>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ebe:	d9f0      	bls.n	8004ea2 <USB_SetCurrentMode+0x2e>
 8004ec0:	e01a      	b.n	8004ef8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ec2:	78fb      	ldrb	r3, [r7, #3]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d115      	bne.n	8004ef4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ed4:	200a      	movs	r0, #10
 8004ed6:	f7fc fd17 	bl	8001908 <HAL_Delay>
      ms += 10U;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	330a      	adds	r3, #10
 8004ede:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f001 f926 	bl	8006132 <USB_GetMode>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <USB_SetCurrentMode+0x84>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ef0:	d9f0      	bls.n	8004ed4 <USB_SetCurrentMode+0x60>
 8004ef2:	e001      	b.n	8004ef8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e005      	b.n	8004f04 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2bc8      	cmp	r3, #200	@ 0xc8
 8004efc:	d101      	bne.n	8004f02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f0c:	b084      	sub	sp, #16
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b086      	sub	sp, #24
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004f1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f26:	2300      	movs	r3, #0
 8004f28:	613b      	str	r3, [r7, #16]
 8004f2a:	e009      	b.n	8004f40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	3340      	adds	r3, #64	@ 0x40
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	2200      	movs	r2, #0
 8004f38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	2b0e      	cmp	r3, #14
 8004f44:	d9f2      	bls.n	8004f2c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d11c      	bne.n	8004f88 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f5c:	f043 0302 	orr.w	r3, r3, #2
 8004f60:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f66:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f72:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f86:	e00b      	b.n	8004fa0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f98:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	2300      	movs	r3, #0
 8004faa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d10d      	bne.n	8004fd0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d104      	bne.n	8004fc6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f968 	bl	8005294 <USB_SetDevSpeed>
 8004fc4:	e008      	b.n	8004fd8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f963 	bl	8005294 <USB_SetDevSpeed>
 8004fce:	e003      	b.n	8004fd8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004fd0:	2103      	movs	r1, #3
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f95e 	bl	8005294 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004fd8:	2110      	movs	r1, #16
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f8fa 	bl	80051d4 <USB_FlushTxFifo>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f924 	bl	8005238 <USB_FlushRxFifo>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005000:	461a      	mov	r2, r3
 8005002:	2300      	movs	r3, #0
 8005004:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800500c:	461a      	mov	r2, r3
 800500e:	2300      	movs	r3, #0
 8005010:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005018:	461a      	mov	r2, r3
 800501a:	2300      	movs	r3, #0
 800501c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800501e:	2300      	movs	r3, #0
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	e043      	b.n	80050ac <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005036:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800503a:	d118      	bne.n	800506e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10a      	bne.n	8005058 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800504e:	461a      	mov	r2, r3
 8005050:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	e013      	b.n	8005080 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005064:	461a      	mov	r2, r3
 8005066:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	e008      	b.n	8005080 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800507a:	461a      	mov	r2, r3
 800507c:	2300      	movs	r3, #0
 800507e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800508c:	461a      	mov	r2, r3
 800508e:	2300      	movs	r3, #0
 8005090:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4413      	add	r3, r2
 800509a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800509e:	461a      	mov	r2, r3
 80050a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80050a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	3301      	adds	r3, #1
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80050b0:	461a      	mov	r2, r3
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d3b5      	bcc.n	8005024 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050b8:	2300      	movs	r3, #0
 80050ba:	613b      	str	r3, [r7, #16]
 80050bc:	e043      	b.n	8005146 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050d4:	d118      	bne.n	8005108 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e8:	461a      	mov	r2, r3
 80050ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80050ee:	6013      	str	r3, [r2, #0]
 80050f0:	e013      	b.n	800511a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050fe:	461a      	mov	r2, r3
 8005100:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	e008      	b.n	800511a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005114:	461a      	mov	r2, r3
 8005116:	2300      	movs	r3, #0
 8005118:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005126:	461a      	mov	r2, r3
 8005128:	2300      	movs	r3, #0
 800512a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005138:	461a      	mov	r2, r3
 800513a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800513e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	3301      	adds	r3, #1
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800514a:	461a      	mov	r2, r3
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4293      	cmp	r3, r2
 8005150:	d3b5      	bcc.n	80050be <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005160:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005164:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005172:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005174:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005178:	2b00      	cmp	r3, #0
 800517a:	d105      	bne.n	8005188 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	f043 0210 	orr.w	r2, r3, #16
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699a      	ldr	r2, [r3, #24]
 800518c:	4b10      	ldr	r3, [pc, #64]	@ (80051d0 <USB_DevInit+0x2c4>)
 800518e:	4313      	orrs	r3, r2
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005194:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	f043 0208 	orr.w	r2, r3, #8
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d107      	bne.n	80051c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051b8:	f043 0304 	orr.w	r3, r3, #4
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051cc:	b004      	add	sp, #16
 80051ce:	4770      	bx	lr
 80051d0:	803c3800 	.word	0x803c3800

080051d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	3301      	adds	r3, #1
 80051e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051ee:	d901      	bls.n	80051f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e01b      	b.n	800522c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	daf2      	bge.n	80051e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	019b      	lsls	r3, r3, #6
 8005204:	f043 0220 	orr.w	r2, r3, #32
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	3301      	adds	r3, #1
 8005210:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005218:	d901      	bls.n	800521e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e006      	b.n	800522c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0320 	and.w	r3, r3, #32
 8005226:	2b20      	cmp	r3, #32
 8005228:	d0f0      	beq.n	800520c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3301      	adds	r3, #1
 8005248:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005250:	d901      	bls.n	8005256 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e018      	b.n	8005288 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	daf2      	bge.n	8005244 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2210      	movs	r2, #16
 8005266:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3301      	adds	r3, #1
 800526c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005274:	d901      	bls.n	800527a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e006      	b.n	8005288 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	2b10      	cmp	r3, #16
 8005284:	d0f0      	beq.n	8005268 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	78fb      	ldrb	r3, [r7, #3]
 80052ae:	68f9      	ldr	r1, [r7, #12]
 80052b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052b4:	4313      	orrs	r3, r2
 80052b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b087      	sub	sp, #28
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 0306 	and.w	r3, r3, #6
 80052de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d102      	bne.n	80052ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80052e6:	2300      	movs	r3, #0
 80052e8:	75fb      	strb	r3, [r7, #23]
 80052ea:	e00a      	b.n	8005302 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d002      	beq.n	80052f8 <USB_GetDevSpeed+0x32>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b06      	cmp	r3, #6
 80052f6:	d102      	bne.n	80052fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80052f8:	2302      	movs	r3, #2
 80052fa:	75fb      	strb	r3, [r7, #23]
 80052fc:	e001      	b.n	8005302 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80052fe:	230f      	movs	r3, #15
 8005300:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005302:	7dfb      	ldrb	r3, [r7, #23]
}
 8005304:	4618      	mov	r0, r3
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	785b      	ldrb	r3, [r3, #1]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d13a      	bne.n	80053a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	f003 030f 	and.w	r3, r3, #15
 800533c:	2101      	movs	r1, #1
 800533e:	fa01 f303 	lsl.w	r3, r1, r3
 8005342:	b29b      	uxth	r3, r3
 8005344:	68f9      	ldr	r1, [r7, #12]
 8005346:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800534a:	4313      	orrs	r3, r2
 800534c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d155      	bne.n	8005410 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	791b      	ldrb	r3, [r3, #4]
 800537e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005380:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	059b      	lsls	r3, r3, #22
 8005386:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005388:	4313      	orrs	r3, r2
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	440a      	add	r2, r1
 8005392:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800539a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	e036      	b.n	8005410 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053a8:	69da      	ldr	r2, [r3, #28]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	2101      	movs	r1, #1
 80053b4:	fa01 f303 	lsl.w	r3, r1, r3
 80053b8:	041b      	lsls	r3, r3, #16
 80053ba:	68f9      	ldr	r1, [r7, #12]
 80053bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053c0:	4313      	orrs	r3, r2
 80053c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d11a      	bne.n	8005410 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	791b      	ldrb	r3, [r3, #4]
 80053f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053f6:	430b      	orrs	r3, r1
 80053f8:	4313      	orrs	r3, r2
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	0151      	lsls	r1, r2, #5
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	440a      	add	r2, r1
 8005402:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800540a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800540e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
	...

08005420 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	785b      	ldrb	r3, [r3, #1]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d161      	bne.n	8005500 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800544e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005452:	d11f      	bne.n	8005494 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	0151      	lsls	r1, r2, #5
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	440a      	add	r2, r1
 800546a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800546e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005472:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	440a      	add	r2, r1
 800548a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800548e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005492:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800549a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	2101      	movs	r1, #1
 80054a6:	fa01 f303 	lsl.w	r3, r1, r3
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	43db      	mvns	r3, r3
 80054ae:	68f9      	ldr	r1, [r7, #12]
 80054b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054b4:	4013      	ands	r3, r2
 80054b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054be:	69da      	ldr	r2, [r3, #28]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	f003 030f 	and.w	r3, r3, #15
 80054c8:	2101      	movs	r1, #1
 80054ca:	fa01 f303 	lsl.w	r3, r1, r3
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	43db      	mvns	r3, r3
 80054d2:	68f9      	ldr	r1, [r7, #12]
 80054d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054d8:	4013      	ands	r3, r2
 80054da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	0159      	lsls	r1, r3, #5
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	440b      	add	r3, r1
 80054f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054f6:	4619      	mov	r1, r3
 80054f8:	4b35      	ldr	r3, [pc, #212]	@ (80055d0 <USB_DeactivateEndpoint+0x1b0>)
 80054fa:	4013      	ands	r3, r2
 80054fc:	600b      	str	r3, [r1, #0]
 80054fe:	e060      	b.n	80055c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005512:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005516:	d11f      	bne.n	8005558 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	0151      	lsls	r1, r2, #5
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	440a      	add	r2, r1
 800552e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005532:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005536:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	0151      	lsls	r1, r2, #5
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	440a      	add	r2, r1
 800554e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005552:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005556:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800555e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	2101      	movs	r1, #1
 800556a:	fa01 f303 	lsl.w	r3, r1, r3
 800556e:	041b      	lsls	r3, r3, #16
 8005570:	43db      	mvns	r3, r3
 8005572:	68f9      	ldr	r1, [r7, #12]
 8005574:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005578:	4013      	ands	r3, r2
 800557a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	f003 030f 	and.w	r3, r3, #15
 800558c:	2101      	movs	r1, #1
 800558e:	fa01 f303 	lsl.w	r3, r1, r3
 8005592:	041b      	lsls	r3, r3, #16
 8005594:	43db      	mvns	r3, r3
 8005596:	68f9      	ldr	r1, [r7, #12]
 8005598:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800559c:	4013      	ands	r3, r2
 800559e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	0159      	lsls	r1, r3, #5
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	440b      	add	r3, r1
 80055b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ba:	4619      	mov	r1, r3
 80055bc:	4b05      	ldr	r3, [pc, #20]	@ (80055d4 <USB_DeactivateEndpoint+0x1b4>)
 80055be:	4013      	ands	r3, r2
 80055c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	ec337800 	.word	0xec337800
 80055d4:	eff37800 	.word	0xeff37800

080055d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08a      	sub	sp, #40	@ 0x28
 80055dc:	af02      	add	r7, sp, #8
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	4613      	mov	r3, r2
 80055e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	785b      	ldrb	r3, [r3, #1]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	f040 817f 	bne.w	80058f8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d132      	bne.n	8005668 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	440a      	add	r2, r1
 8005618:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800561c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005620:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005624:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	0151      	lsls	r1, r2, #5
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	440a      	add	r2, r1
 800563c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005640:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005644:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	0151      	lsls	r1, r2, #5
 8005658:	69fa      	ldr	r2, [r7, #28]
 800565a:	440a      	add	r2, r1
 800565c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005660:	0cdb      	lsrs	r3, r3, #19
 8005662:	04db      	lsls	r3, r3, #19
 8005664:	6113      	str	r3, [r2, #16]
 8005666:	e097      	b.n	8005798 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	0151      	lsls	r1, r2, #5
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	440a      	add	r2, r1
 800567e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005682:	0cdb      	lsrs	r3, r3, #19
 8005684:	04db      	lsls	r3, r3, #19
 8005686:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	0151      	lsls	r1, r2, #5
 800569a:	69fa      	ldr	r2, [r7, #28]
 800569c:	440a      	add	r2, r1
 800569e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056a2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80056a6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80056aa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d11a      	bne.n	80056e8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	691a      	ldr	r2, [r3, #16]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d903      	bls.n	80056c6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	0151      	lsls	r1, r2, #5
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	440a      	add	r2, r1
 80056dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056e4:	6113      	str	r3, [r2, #16]
 80056e6:	e044      	b.n	8005772 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	4413      	add	r3, r2
 80056f2:	1e5a      	subs	r2, r3, #1
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	8afb      	ldrh	r3, [r7, #22]
 800570e:	04d9      	lsls	r1, r3, #19
 8005710:	4ba4      	ldr	r3, [pc, #656]	@ (80059a4 <USB_EPStartXfer+0x3cc>)
 8005712:	400b      	ands	r3, r1
 8005714:	69b9      	ldr	r1, [r7, #24]
 8005716:	0148      	lsls	r0, r1, #5
 8005718:	69f9      	ldr	r1, [r7, #28]
 800571a:	4401      	add	r1, r0
 800571c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005720:	4313      	orrs	r3, r2
 8005722:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	791b      	ldrb	r3, [r3, #4]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d122      	bne.n	8005772 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	0151      	lsls	r1, r2, #5
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	440a      	add	r2, r1
 8005742:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005746:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800574a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005758:	691a      	ldr	r2, [r3, #16]
 800575a:	8afb      	ldrh	r3, [r7, #22]
 800575c:	075b      	lsls	r3, r3, #29
 800575e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005762:	69b9      	ldr	r1, [r7, #24]
 8005764:	0148      	lsls	r0, r1, #5
 8005766:	69f9      	ldr	r1, [r7, #28]
 8005768:	4401      	add	r1, r0
 800576a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800576e:	4313      	orrs	r3, r2
 8005770:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800577e:	691a      	ldr	r2, [r3, #16]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005788:	69b9      	ldr	r1, [r7, #24]
 800578a:	0148      	lsls	r0, r1, #5
 800578c:	69f9      	ldr	r1, [r7, #28]
 800578e:	4401      	add	r1, r0
 8005790:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005794:	4313      	orrs	r3, r2
 8005796:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005798:	79fb      	ldrb	r3, [r7, #7]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d14b      	bne.n	8005836 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d009      	beq.n	80057ba <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057b2:	461a      	mov	r2, r3
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	791b      	ldrb	r3, [r3, #4]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d128      	bne.n	8005814 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d110      	bne.n	80057f4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	0151      	lsls	r1, r2, #5
 80057e4:	69fa      	ldr	r2, [r7, #28]
 80057e6:	440a      	add	r2, r1
 80057e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	e00f      	b.n	8005814 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	0151      	lsls	r1, r2, #5
 8005806:	69fa      	ldr	r2, [r7, #28]
 8005808:	440a      	add	r2, r1
 800580a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800580e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005812:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	0151      	lsls	r1, r2, #5
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	440a      	add	r2, r1
 800582a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800582e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	e166      	b.n	8005b04 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	0151      	lsls	r1, r2, #5
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	440a      	add	r2, r1
 800584c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005850:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005854:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	791b      	ldrb	r3, [r3, #4]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d015      	beq.n	800588a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 814e 	beq.w	8005b04 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800586e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	2101      	movs	r1, #1
 800587a:	fa01 f303 	lsl.w	r3, r1, r3
 800587e:	69f9      	ldr	r1, [r7, #28]
 8005880:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005884:	4313      	orrs	r3, r2
 8005886:	634b      	str	r3, [r1, #52]	@ 0x34
 8005888:	e13c      	b.n	8005b04 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005896:	2b00      	cmp	r3, #0
 8005898:	d110      	bne.n	80058bc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	0151      	lsls	r1, r2, #5
 80058ac:	69fa      	ldr	r2, [r7, #28]
 80058ae:	440a      	add	r2, r1
 80058b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	e00f      	b.n	80058dc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	0151      	lsls	r1, r2, #5
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	440a      	add	r2, r1
 80058d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058da:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	68d9      	ldr	r1, [r3, #12]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	781a      	ldrb	r2, [r3, #0]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	b298      	uxth	r0, r3
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	4603      	mov	r3, r0
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 f9b9 	bl	8005c68 <USB_WritePacket>
 80058f6:	e105      	b.n	8005b04 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	0151      	lsls	r1, r2, #5
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	440a      	add	r2, r1
 800590e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005912:	0cdb      	lsrs	r3, r3, #19
 8005914:	04db      	lsls	r3, r3, #19
 8005916:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	0151      	lsls	r1, r2, #5
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	440a      	add	r2, r1
 800592e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005932:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005936:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800593a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d132      	bne.n	80059a8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005970:	69b9      	ldr	r1, [r7, #24]
 8005972:	0148      	lsls	r0, r1, #5
 8005974:	69f9      	ldr	r1, [r7, #28]
 8005976:	4401      	add	r1, r0
 8005978:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800597c:	4313      	orrs	r3, r2
 800597e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	0151      	lsls	r1, r2, #5
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	440a      	add	r2, r1
 8005996:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800599a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800599e:	6113      	str	r3, [r2, #16]
 80059a0:	e062      	b.n	8005a68 <USB_EPStartXfer+0x490>
 80059a2:	bf00      	nop
 80059a4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d123      	bne.n	80059f8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059bc:	691a      	ldr	r2, [r3, #16]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059c6:	69b9      	ldr	r1, [r7, #24]
 80059c8:	0148      	lsls	r0, r1, #5
 80059ca:	69f9      	ldr	r1, [r7, #28]
 80059cc:	4401      	add	r1, r0
 80059ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80059d2:	4313      	orrs	r3, r2
 80059d4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80059f4:	6113      	str	r3, [r2, #16]
 80059f6:	e037      	b.n	8005a68 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	691a      	ldr	r2, [r3, #16]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	4413      	add	r3, r2
 8005a02:	1e5a      	subs	r2, r3, #1
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	8afa      	ldrh	r2, [r7, #22]
 8005a14:	fb03 f202 	mul.w	r2, r3, r2
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	8afb      	ldrh	r3, [r7, #22]
 8005a2c:	04d9      	lsls	r1, r3, #19
 8005a2e:	4b38      	ldr	r3, [pc, #224]	@ (8005b10 <USB_EPStartXfer+0x538>)
 8005a30:	400b      	ands	r3, r1
 8005a32:	69b9      	ldr	r1, [r7, #24]
 8005a34:	0148      	lsls	r0, r1, #5
 8005a36:	69f9      	ldr	r1, [r7, #28]
 8005a38:	4401      	add	r1, r0
 8005a3a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a4e:	691a      	ldr	r2, [r3, #16]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a58:	69b9      	ldr	r1, [r7, #24]
 8005a5a:	0148      	lsls	r0, r1, #5
 8005a5c:	69f9      	ldr	r1, [r7, #28]
 8005a5e:	4401      	add	r1, r0
 8005a60:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a64:	4313      	orrs	r3, r2
 8005a66:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005a68:	79fb      	ldrb	r3, [r7, #7]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d10d      	bne.n	8005a8a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d009      	beq.n	8005a8a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	68d9      	ldr	r1, [r3, #12]
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a86:	460a      	mov	r2, r1
 8005a88:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	791b      	ldrb	r3, [r3, #4]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d128      	bne.n	8005ae4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d110      	bne.n	8005ac4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	0151      	lsls	r1, r2, #5
 8005ab4:	69fa      	ldr	r2, [r7, #28]
 8005ab6:	440a      	add	r2, r1
 8005ab8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005abc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	e00f      	b.n	8005ae4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	0151      	lsls	r1, r2, #5
 8005ad6:	69fa      	ldr	r2, [r7, #28]
 8005ad8:	440a      	add	r2, r1
 8005ada:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ae2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	0151      	lsls	r1, r2, #5
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	440a      	add	r2, r1
 8005afa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005afe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3720      	adds	r7, #32
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	1ff80000 	.word	0x1ff80000

08005b14 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	785b      	ldrb	r3, [r3, #1]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d14a      	bne.n	8005bc8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b4a:	f040 8086 	bne.w	8005c5a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	7812      	ldrb	r2, [r2, #0]
 8005b62:	0151      	lsls	r1, r2, #5
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	440a      	add	r2, r1
 8005b68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b70:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	7812      	ldrb	r2, [r2, #0]
 8005b86:	0151      	lsls	r1, r2, #5
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d902      	bls.n	8005bac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	75fb      	strb	r3, [r7, #23]
          break;
 8005baa:	e056      	b.n	8005c5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bc4:	d0e7      	beq.n	8005b96 <USB_EPStopXfer+0x82>
 8005bc6:	e048      	b.n	8005c5a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005be0:	d13b      	bne.n	8005c5a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	7812      	ldrb	r2, [r2, #0]
 8005bf6:	0151      	lsls	r1, r2, #5
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	440a      	add	r2, r1
 8005bfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c00:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c04:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	7812      	ldrb	r2, [r2, #0]
 8005c1a:	0151      	lsls	r1, r2, #5
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	440a      	add	r2, r1
 8005c20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d902      	bls.n	8005c40 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c3e:	e00c      	b.n	8005c5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c58:	d0e7      	beq.n	8005c2a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	371c      	adds	r7, #28
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b089      	sub	sp, #36	@ 0x24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	4611      	mov	r1, r2
 8005c74:	461a      	mov	r2, r3
 8005c76:	460b      	mov	r3, r1
 8005c78:	71fb      	strb	r3, [r7, #7]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d123      	bne.n	8005cd6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c8e:	88bb      	ldrh	r3, [r7, #4]
 8005c90:	3303      	adds	r3, #3
 8005c92:	089b      	lsrs	r3, r3, #2
 8005c94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c96:	2300      	movs	r3, #0
 8005c98:	61bb      	str	r3, [r7, #24]
 8005c9a:	e018      	b.n	8005cce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c9c:	79fb      	ldrb	r3, [r7, #7]
 8005c9e:	031a      	lsls	r2, r3, #12
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ca8:	461a      	mov	r2, r3
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	61bb      	str	r3, [r7, #24]
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d3e2      	bcc.n	8005c9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3724      	adds	r7, #36	@ 0x24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b08b      	sub	sp, #44	@ 0x2c
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005cfa:	88fb      	ldrh	r3, [r7, #6]
 8005cfc:	089b      	lsrs	r3, r3, #2
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d02:	88fb      	ldrh	r3, [r7, #6]
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	623b      	str	r3, [r7, #32]
 8005d0e:	e014      	b.n	8005d3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1e:	3301      	adds	r3, #1
 8005d20:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	3301      	adds	r3, #1
 8005d26:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d30:	3301      	adds	r3, #1
 8005d32:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	3301      	adds	r3, #1
 8005d38:	623b      	str	r3, [r7, #32]
 8005d3a:	6a3a      	ldr	r2, [r7, #32]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d3e6      	bcc.n	8005d10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d42:	8bfb      	ldrh	r3, [r7, #30]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01e      	beq.n	8005d86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d52:	461a      	mov	r2, r3
 8005d54:	f107 0310 	add.w	r3, r7, #16
 8005d58:	6812      	ldr	r2, [r2, #0]
 8005d5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	fa22 f303 	lsr.w	r3, r2, r3
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6c:	701a      	strb	r2, [r3, #0]
      i++;
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	3301      	adds	r3, #1
 8005d72:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d76:	3301      	adds	r3, #1
 8005d78:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005d7a:	8bfb      	ldrh	r3, [r7, #30]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d80:	8bfb      	ldrh	r3, [r7, #30]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1ea      	bne.n	8005d5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	372c      	adds	r7, #44	@ 0x2c
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	785b      	ldrb	r3, [r3, #1]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d12c      	bne.n	8005e0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	db12      	blt.n	8005de8 <USB_EPSetStall+0x54>
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00f      	beq.n	8005de8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	0151      	lsls	r1, r2, #5
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	440a      	add	r2, r1
 8005dde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005de2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005de6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	e02b      	b.n	8005e62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	db12      	blt.n	8005e42 <USB_EPSetStall+0xae>
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00f      	beq.n	8005e42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	0151      	lsls	r1, r2, #5
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	440a      	add	r2, r1
 8005e38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e3c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005e60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	785b      	ldrb	r3, [r3, #1]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d128      	bne.n	8005ede <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	0151      	lsls	r1, r2, #5
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ea6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005eaa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	791b      	ldrb	r3, [r3, #4]
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d003      	beq.n	8005ebc <USB_EPClearStall+0x4c>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	791b      	ldrb	r3, [r3, #4]
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d138      	bne.n	8005f2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	e027      	b.n	8005f2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	0151      	lsls	r1, r2, #5
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	440a      	add	r2, r1
 8005ef4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ef8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005efc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	791b      	ldrb	r3, [r3, #4]
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d003      	beq.n	8005f0e <USB_EPClearStall+0x9e>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	791b      	ldrb	r3, [r3, #4]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d10f      	bne.n	8005f2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	0151      	lsls	r1, r2, #5
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	440a      	add	r2, r1
 8005f24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f5a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005f5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005f70:	68f9      	ldr	r1, [r7, #12]
 8005f72:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f76:	4313      	orrs	r3, r2
 8005f78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005fa2:	f023 0303 	bic.w	r3, r3, #3
 8005fa6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fb6:	f023 0302 	bic.w	r3, r3, #2
 8005fba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b085      	sub	sp, #20
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005fe4:	f023 0303 	bic.w	r3, r3, #3
 8005fe8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ff8:	f043 0302 	orr.w	r3, r3, #2
 8005ffc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4013      	ands	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006024:	68fb      	ldr	r3, [r7, #12]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006032:	b480      	push	{r7}
 8006034:	b085      	sub	sp, #20
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	4013      	ands	r3, r2
 8006054:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	0c1b      	lsrs	r3, r3, #16
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006066:	b480      	push	{r7}
 8006068:	b085      	sub	sp, #20
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	4013      	ands	r3, r2
 8006088:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	b29b      	uxth	r3, r3
}
 800608e:	4618      	mov	r0, r3
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800609a:	b480      	push	{r7}
 800609c:	b085      	sub	sp, #20
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	460b      	mov	r3, r1
 80060a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80060aa:	78fb      	ldrb	r3, [r7, #3]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	4013      	ands	r3, r2
 80060c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060c8:	68bb      	ldr	r3, [r7, #8]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b087      	sub	sp, #28
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	460b      	mov	r3, r1
 80060e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80060fa:	78fb      	ldrb	r3, [r7, #3]
 80060fc:	f003 030f 	and.w	r3, r3, #15
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	fa22 f303 	lsr.w	r3, r2, r3
 8006106:	01db      	lsls	r3, r3, #7
 8006108:	b2db      	uxtb	r3, r3
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	4013      	ands	r3, r2
 8006122:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006124:	68bb      	ldr	r3, [r7, #8]
}
 8006126:	4618      	mov	r0, r3
 8006128:	371c      	adds	r7, #28
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	f003 0301 	and.w	r3, r3, #1
}
 8006142:	4618      	mov	r0, r3
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800614e:	b480      	push	{r7}
 8006150:	b085      	sub	sp, #20
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006168:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800616c:	f023 0307 	bic.w	r3, r3, #7
 8006170:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006184:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	460b      	mov	r3, r1
 800619e:	607a      	str	r2, [r7, #4]
 80061a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	333c      	adds	r3, #60	@ 0x3c
 80061aa:	3304      	adds	r3, #4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	4a26      	ldr	r2, [pc, #152]	@ (800624c <USB_EP0_OutStart+0xb8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d90a      	bls.n	80061ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061c8:	d101      	bne.n	80061ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e037      	b.n	800623e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d4:	461a      	mov	r2, r3
 80061d6:	2300      	movs	r3, #0
 80061d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061fc:	f043 0318 	orr.w	r3, r3, #24
 8006200:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006210:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006214:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006216:	7afb      	ldrb	r3, [r7, #11]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d10f      	bne.n	800623c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006222:	461a      	mov	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006236:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800623a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	371c      	adds	r7, #28
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	4f54300a 	.word	0x4f54300a

08006250 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	3301      	adds	r3, #1
 8006260:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006268:	d901      	bls.n	800626e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e01b      	b.n	80062a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	daf2      	bge.n	800625c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f043 0201 	orr.w	r2, r3, #1
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3301      	adds	r3, #1
 800628a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006292:	d901      	bls.n	8006298 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e006      	b.n	80062a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d0f0      	beq.n	8006286 <USB_CoreReset+0x36>

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
	...

080062b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	460b      	mov	r3, r1
 80062be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80062c0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80062c4:	f002 fc94 	bl	8008bf0 <USBD_static_malloc>
 80062c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d109      	bne.n	80062e4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	32b0      	adds	r2, #176	@ 0xb0
 80062da:	2100      	movs	r1, #0
 80062dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80062e0:	2302      	movs	r3, #2
 80062e2:	e0d4      	b.n	800648e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80062e4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80062e8:	2100      	movs	r1, #0
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f003 fa55 	bl	800979a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	32b0      	adds	r2, #176	@ 0xb0
 80062fa:	68f9      	ldr	r1, [r7, #12]
 80062fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	32b0      	adds	r2, #176	@ 0xb0
 800630a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	7c1b      	ldrb	r3, [r3, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d138      	bne.n	800638e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800631c:	4b5e      	ldr	r3, [pc, #376]	@ (8006498 <USBD_CDC_Init+0x1e4>)
 800631e:	7819      	ldrb	r1, [r3, #0]
 8006320:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006324:	2202      	movs	r2, #2
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f002 fb3f 	bl	80089aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800632c:	4b5a      	ldr	r3, [pc, #360]	@ (8006498 <USBD_CDC_Init+0x1e4>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	f003 020f 	and.w	r2, r3, #15
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	4613      	mov	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	440b      	add	r3, r1
 8006340:	3324      	adds	r3, #36	@ 0x24
 8006342:	2201      	movs	r2, #1
 8006344:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006346:	4b55      	ldr	r3, [pc, #340]	@ (800649c <USBD_CDC_Init+0x1e8>)
 8006348:	7819      	ldrb	r1, [r3, #0]
 800634a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800634e:	2202      	movs	r2, #2
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f002 fb2a 	bl	80089aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006356:	4b51      	ldr	r3, [pc, #324]	@ (800649c <USBD_CDC_Init+0x1e8>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	f003 020f 	and.w	r2, r3, #15
 800635e:	6879      	ldr	r1, [r7, #4]
 8006360:	4613      	mov	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	440b      	add	r3, r1
 800636a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800636e:	2201      	movs	r2, #1
 8006370:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006372:	4b4b      	ldr	r3, [pc, #300]	@ (80064a0 <USBD_CDC_Init+0x1ec>)
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	f003 020f 	and.w	r2, r3, #15
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	4613      	mov	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	440b      	add	r3, r1
 8006386:	3326      	adds	r3, #38	@ 0x26
 8006388:	2210      	movs	r2, #16
 800638a:	801a      	strh	r2, [r3, #0]
 800638c:	e035      	b.n	80063fa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800638e:	4b42      	ldr	r3, [pc, #264]	@ (8006498 <USBD_CDC_Init+0x1e4>)
 8006390:	7819      	ldrb	r1, [r3, #0]
 8006392:	2340      	movs	r3, #64	@ 0x40
 8006394:	2202      	movs	r2, #2
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f002 fb07 	bl	80089aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800639c:	4b3e      	ldr	r3, [pc, #248]	@ (8006498 <USBD_CDC_Init+0x1e4>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	f003 020f 	and.w	r2, r3, #15
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	4613      	mov	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	440b      	add	r3, r1
 80063b0:	3324      	adds	r3, #36	@ 0x24
 80063b2:	2201      	movs	r2, #1
 80063b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80063b6:	4b39      	ldr	r3, [pc, #228]	@ (800649c <USBD_CDC_Init+0x1e8>)
 80063b8:	7819      	ldrb	r1, [r3, #0]
 80063ba:	2340      	movs	r3, #64	@ 0x40
 80063bc:	2202      	movs	r2, #2
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f002 faf3 	bl	80089aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80063c4:	4b35      	ldr	r3, [pc, #212]	@ (800649c <USBD_CDC_Init+0x1e8>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	f003 020f 	and.w	r2, r3, #15
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	4613      	mov	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	440b      	add	r3, r1
 80063d8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80063dc:	2201      	movs	r2, #1
 80063de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80063e0:	4b2f      	ldr	r3, [pc, #188]	@ (80064a0 <USBD_CDC_Init+0x1ec>)
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	f003 020f 	and.w	r2, r3, #15
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	4613      	mov	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	440b      	add	r3, r1
 80063f4:	3326      	adds	r3, #38	@ 0x26
 80063f6:	2210      	movs	r2, #16
 80063f8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80063fa:	4b29      	ldr	r3, [pc, #164]	@ (80064a0 <USBD_CDC_Init+0x1ec>)
 80063fc:	7819      	ldrb	r1, [r3, #0]
 80063fe:	2308      	movs	r3, #8
 8006400:	2203      	movs	r2, #3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f002 fad1 	bl	80089aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006408:	4b25      	ldr	r3, [pc, #148]	@ (80064a0 <USBD_CDC_Init+0x1ec>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	f003 020f 	and.w	r2, r3, #15
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	4613      	mov	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	440b      	add	r3, r1
 800641c:	3324      	adds	r3, #36	@ 0x24
 800641e:	2201      	movs	r2, #1
 8006420:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	33b0      	adds	r3, #176	@ 0xb0
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4413      	add	r3, r2
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006458:	2302      	movs	r3, #2
 800645a:	e018      	b.n	800648e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	7c1b      	ldrb	r3, [r3, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006464:	4b0d      	ldr	r3, [pc, #52]	@ (800649c <USBD_CDC_Init+0x1e8>)
 8006466:	7819      	ldrb	r1, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800646e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f002 fb88 	bl	8008b88 <USBD_LL_PrepareReceive>
 8006478:	e008      	b.n	800648c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800647a:	4b08      	ldr	r3, [pc, #32]	@ (800649c <USBD_CDC_Init+0x1e8>)
 800647c:	7819      	ldrb	r1, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006484:	2340      	movs	r3, #64	@ 0x40
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f002 fb7e 	bl	8008b88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20000093 	.word	0x20000093
 800649c:	20000094 	.word	0x20000094
 80064a0:	20000095 	.word	0x20000095

080064a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80064b0:	4b3a      	ldr	r3, [pc, #232]	@ (800659c <USBD_CDC_DeInit+0xf8>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f002 fa9d 	bl	80089f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80064bc:	4b37      	ldr	r3, [pc, #220]	@ (800659c <USBD_CDC_DeInit+0xf8>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	f003 020f 	and.w	r2, r3, #15
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	440b      	add	r3, r1
 80064d0:	3324      	adds	r3, #36	@ 0x24
 80064d2:	2200      	movs	r2, #0
 80064d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80064d6:	4b32      	ldr	r3, [pc, #200]	@ (80065a0 <USBD_CDC_DeInit+0xfc>)
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f002 fa8a 	bl	80089f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80064e2:	4b2f      	ldr	r3, [pc, #188]	@ (80065a0 <USBD_CDC_DeInit+0xfc>)
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	f003 020f 	and.w	r2, r3, #15
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	4613      	mov	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	440b      	add	r3, r1
 80064f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80064fa:	2200      	movs	r2, #0
 80064fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80064fe:	4b29      	ldr	r3, [pc, #164]	@ (80065a4 <USBD_CDC_DeInit+0x100>)
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f002 fa76 	bl	80089f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800650a:	4b26      	ldr	r3, [pc, #152]	@ (80065a4 <USBD_CDC_DeInit+0x100>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	f003 020f 	and.w	r2, r3, #15
 8006512:	6879      	ldr	r1, [r7, #4]
 8006514:	4613      	mov	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	440b      	add	r3, r1
 800651e:	3324      	adds	r3, #36	@ 0x24
 8006520:	2200      	movs	r2, #0
 8006522:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006524:	4b1f      	ldr	r3, [pc, #124]	@ (80065a4 <USBD_CDC_DeInit+0x100>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	f003 020f 	and.w	r2, r3, #15
 800652c:	6879      	ldr	r1, [r7, #4]
 800652e:	4613      	mov	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	440b      	add	r3, r1
 8006538:	3326      	adds	r3, #38	@ 0x26
 800653a:	2200      	movs	r2, #0
 800653c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	32b0      	adds	r2, #176	@ 0xb0
 8006548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d01f      	beq.n	8006590 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	33b0      	adds	r3, #176	@ 0xb0
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	32b0      	adds	r2, #176	@ 0xb0
 800656e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006572:	4618      	mov	r0, r3
 8006574:	f002 fb4a 	bl	8008c0c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	32b0      	adds	r2, #176	@ 0xb0
 8006582:	2100      	movs	r1, #0
 8006584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20000093 	.word	0x20000093
 80065a0:	20000094 	.word	0x20000094
 80065a4:	20000095 	.word	0x20000095

080065a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	32b0      	adds	r2, #176	@ 0xb0
 80065bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e0bf      	b.n	8006758 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d050      	beq.n	8006686 <USBD_CDC_Setup+0xde>
 80065e4:	2b20      	cmp	r3, #32
 80065e6:	f040 80af 	bne.w	8006748 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	88db      	ldrh	r3, [r3, #6]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d03a      	beq.n	8006668 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	b25b      	sxtb	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	da1b      	bge.n	8006634 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	33b0      	adds	r3, #176	@ 0xb0
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006612:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	88d2      	ldrh	r2, [r2, #6]
 8006618:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	88db      	ldrh	r3, [r3, #6]
 800661e:	2b07      	cmp	r3, #7
 8006620:	bf28      	it	cs
 8006622:	2307      	movcs	r3, #7
 8006624:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	89fa      	ldrh	r2, [r7, #14]
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f001 fd93 	bl	8008158 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006632:	e090      	b.n	8006756 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	785a      	ldrb	r2, [r3, #1]
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	88db      	ldrh	r3, [r3, #6]
 8006642:	2b3f      	cmp	r3, #63	@ 0x3f
 8006644:	d803      	bhi.n	800664e <USBD_CDC_Setup+0xa6>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	88db      	ldrh	r3, [r3, #6]
 800664a:	b2da      	uxtb	r2, r3
 800664c:	e000      	b.n	8006650 <USBD_CDC_Setup+0xa8>
 800664e:	2240      	movs	r2, #64	@ 0x40
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006656:	6939      	ldr	r1, [r7, #16]
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800665e:	461a      	mov	r2, r3
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 fda5 	bl	80081b0 <USBD_CtlPrepareRx>
      break;
 8006666:	e076      	b.n	8006756 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	33b0      	adds	r3, #176	@ 0xb0
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	7850      	ldrb	r0, [r2, #1]
 800667e:	2200      	movs	r2, #0
 8006680:	6839      	ldr	r1, [r7, #0]
 8006682:	4798      	blx	r3
      break;
 8006684:	e067      	b.n	8006756 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	785b      	ldrb	r3, [r3, #1]
 800668a:	2b0b      	cmp	r3, #11
 800668c:	d851      	bhi.n	8006732 <USBD_CDC_Setup+0x18a>
 800668e:	a201      	add	r2, pc, #4	@ (adr r2, 8006694 <USBD_CDC_Setup+0xec>)
 8006690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006694:	080066c5 	.word	0x080066c5
 8006698:	08006741 	.word	0x08006741
 800669c:	08006733 	.word	0x08006733
 80066a0:	08006733 	.word	0x08006733
 80066a4:	08006733 	.word	0x08006733
 80066a8:	08006733 	.word	0x08006733
 80066ac:	08006733 	.word	0x08006733
 80066b0:	08006733 	.word	0x08006733
 80066b4:	08006733 	.word	0x08006733
 80066b8:	08006733 	.word	0x08006733
 80066bc:	080066ef 	.word	0x080066ef
 80066c0:	08006719 	.word	0x08006719
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b03      	cmp	r3, #3
 80066ce:	d107      	bne.n	80066e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80066d0:	f107 030a 	add.w	r3, r7, #10
 80066d4:	2202      	movs	r2, #2
 80066d6:	4619      	mov	r1, r3
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f001 fd3d 	bl	8008158 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066de:	e032      	b.n	8006746 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f001 fcbb 	bl	800805e <USBD_CtlError>
            ret = USBD_FAIL;
 80066e8:	2303      	movs	r3, #3
 80066ea:	75fb      	strb	r3, [r7, #23]
          break;
 80066ec:	e02b      	b.n	8006746 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d107      	bne.n	800670a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80066fa:	f107 030d 	add.w	r3, r7, #13
 80066fe:	2201      	movs	r2, #1
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f001 fd28 	bl	8008158 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006708:	e01d      	b.n	8006746 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800670a:	6839      	ldr	r1, [r7, #0]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f001 fca6 	bl	800805e <USBD_CtlError>
            ret = USBD_FAIL;
 8006712:	2303      	movs	r3, #3
 8006714:	75fb      	strb	r3, [r7, #23]
          break;
 8006716:	e016      	b.n	8006746 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b03      	cmp	r3, #3
 8006722:	d00f      	beq.n	8006744 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f001 fc99 	bl	800805e <USBD_CtlError>
            ret = USBD_FAIL;
 800672c:	2303      	movs	r3, #3
 800672e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006730:	e008      	b.n	8006744 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f001 fc92 	bl	800805e <USBD_CtlError>
          ret = USBD_FAIL;
 800673a:	2303      	movs	r3, #3
 800673c:	75fb      	strb	r3, [r7, #23]
          break;
 800673e:	e002      	b.n	8006746 <USBD_CDC_Setup+0x19e>
          break;
 8006740:	bf00      	nop
 8006742:	e008      	b.n	8006756 <USBD_CDC_Setup+0x1ae>
          break;
 8006744:	bf00      	nop
      }
      break;
 8006746:	e006      	b.n	8006756 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f001 fc87 	bl	800805e <USBD_CtlError>
      ret = USBD_FAIL;
 8006750:	2303      	movs	r3, #3
 8006752:	75fb      	strb	r3, [r7, #23]
      break;
 8006754:	bf00      	nop
  }

  return (uint8_t)ret;
 8006756:	7dfb      	ldrb	r3, [r7, #23]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006772:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	32b0      	adds	r2, #176	@ 0xb0
 800677e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006786:	2303      	movs	r3, #3
 8006788:	e065      	b.n	8006856 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	32b0      	adds	r2, #176	@ 0xb0
 8006794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006798:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800679a:	78fb      	ldrb	r3, [r7, #3]
 800679c:	f003 020f 	and.w	r2, r3, #15
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	440b      	add	r3, r1
 80067ac:	3318      	adds	r3, #24
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d02f      	beq.n	8006814 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	f003 020f 	and.w	r2, r3, #15
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	4613      	mov	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	440b      	add	r3, r1
 80067c6:	3318      	adds	r3, #24
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	78fb      	ldrb	r3, [r7, #3]
 80067cc:	f003 010f 	and.w	r1, r3, #15
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	460b      	mov	r3, r1
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	440b      	add	r3, r1
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4403      	add	r3, r0
 80067dc:	331c      	adds	r3, #28
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80067e4:	fb01 f303 	mul.w	r3, r1, r3
 80067e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d112      	bne.n	8006814 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80067ee:	78fb      	ldrb	r3, [r7, #3]
 80067f0:	f003 020f 	and.w	r2, r3, #15
 80067f4:	6879      	ldr	r1, [r7, #4]
 80067f6:	4613      	mov	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	440b      	add	r3, r1
 8006800:	3318      	adds	r3, #24
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006806:	78f9      	ldrb	r1, [r7, #3]
 8006808:	2300      	movs	r3, #0
 800680a:	2200      	movs	r2, #0
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f002 f99a 	bl	8008b46 <USBD_LL_Transmit>
 8006812:	e01f      	b.n	8006854 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2200      	movs	r2, #0
 8006818:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	33b0      	adds	r3, #176	@ 0xb0
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d010      	beq.n	8006854 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	33b0      	adds	r3, #176	@ 0xb0
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006850:	78fa      	ldrb	r2, [r7, #3]
 8006852:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b084      	sub	sp, #16
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	460b      	mov	r3, r1
 8006868:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	32b0      	adds	r2, #176	@ 0xb0
 8006874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006878:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	32b0      	adds	r2, #176	@ 0xb0
 8006884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800688c:	2303      	movs	r3, #3
 800688e:	e01a      	b.n	80068c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f002 f998 	bl	8008bca <USBD_LL_GetRxDataSize>
 800689a:	4602      	mov	r2, r0
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	33b0      	adds	r3, #176	@ 0xb0
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80068c0:	4611      	mov	r1, r2
 80068c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	32b0      	adds	r2, #176	@ 0xb0
 80068e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e024      	b.n	800693a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	33b0      	adds	r3, #176	@ 0xb0
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d019      	beq.n	8006938 <USBD_CDC_EP0_RxReady+0x6a>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800690a:	2bff      	cmp	r3, #255	@ 0xff
 800690c:	d014      	beq.n	8006938 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	33b0      	adds	r3, #176	@ 0xb0
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006926:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800692e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	22ff      	movs	r2, #255	@ 0xff
 8006934:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
	...

08006944 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800694c:	2182      	movs	r1, #130	@ 0x82
 800694e:	4818      	ldr	r0, [pc, #96]	@ (80069b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006950:	f000 fd4f 	bl	80073f2 <USBD_GetEpDesc>
 8006954:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006956:	2101      	movs	r1, #1
 8006958:	4815      	ldr	r0, [pc, #84]	@ (80069b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800695a:	f000 fd4a 	bl	80073f2 <USBD_GetEpDesc>
 800695e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006960:	2181      	movs	r1, #129	@ 0x81
 8006962:	4813      	ldr	r0, [pc, #76]	@ (80069b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006964:	f000 fd45 	bl	80073f2 <USBD_GetEpDesc>
 8006968:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d002      	beq.n	8006976 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	2210      	movs	r2, #16
 8006974:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d006      	beq.n	800698a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	2200      	movs	r2, #0
 8006980:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006984:	711a      	strb	r2, [r3, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d006      	beq.n	800699e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006998:	711a      	strb	r2, [r3, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2243      	movs	r2, #67	@ 0x43
 80069a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80069a4:	4b02      	ldr	r3, [pc, #8]	@ (80069b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	20000050 	.word	0x20000050

080069b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80069bc:	2182      	movs	r1, #130	@ 0x82
 80069be:	4818      	ldr	r0, [pc, #96]	@ (8006a20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80069c0:	f000 fd17 	bl	80073f2 <USBD_GetEpDesc>
 80069c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80069c6:	2101      	movs	r1, #1
 80069c8:	4815      	ldr	r0, [pc, #84]	@ (8006a20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80069ca:	f000 fd12 	bl	80073f2 <USBD_GetEpDesc>
 80069ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069d0:	2181      	movs	r1, #129	@ 0x81
 80069d2:	4813      	ldr	r0, [pc, #76]	@ (8006a20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80069d4:	f000 fd0d 	bl	80073f2 <USBD_GetEpDesc>
 80069d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d002      	beq.n	80069e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	2210      	movs	r2, #16
 80069e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d006      	beq.n	80069fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	2200      	movs	r2, #0
 80069f0:	711a      	strb	r2, [r3, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f042 0202 	orr.w	r2, r2, #2
 80069f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d006      	beq.n	8006a0e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	711a      	strb	r2, [r3, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f042 0202 	orr.w	r2, r2, #2
 8006a0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2243      	movs	r2, #67	@ 0x43
 8006a12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a14:	4b02      	ldr	r3, [pc, #8]	@ (8006a20 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	20000050 	.word	0x20000050

08006a24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a2c:	2182      	movs	r1, #130	@ 0x82
 8006a2e:	4818      	ldr	r0, [pc, #96]	@ (8006a90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a30:	f000 fcdf 	bl	80073f2 <USBD_GetEpDesc>
 8006a34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a36:	2101      	movs	r1, #1
 8006a38:	4815      	ldr	r0, [pc, #84]	@ (8006a90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a3a:	f000 fcda 	bl	80073f2 <USBD_GetEpDesc>
 8006a3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a40:	2181      	movs	r1, #129	@ 0x81
 8006a42:	4813      	ldr	r0, [pc, #76]	@ (8006a90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a44:	f000 fcd5 	bl	80073f2 <USBD_GetEpDesc>
 8006a48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	2210      	movs	r2, #16
 8006a54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d006      	beq.n	8006a6a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a64:	711a      	strb	r2, [r3, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d006      	beq.n	8006a7e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a78:	711a      	strb	r2, [r3, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2243      	movs	r2, #67	@ 0x43
 8006a82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a84:	4b02      	ldr	r3, [pc, #8]	@ (8006a90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000050 	.word	0x20000050

08006a94 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	220a      	movs	r2, #10
 8006aa0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006aa2:	4b03      	ldr	r3, [pc, #12]	@ (8006ab0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	2000000c 	.word	0x2000000c

08006ab4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e009      	b.n	8006adc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	33b0      	adds	r3, #176	@ 0xb0
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	32b0      	adds	r2, #176	@ 0xb0
 8006afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b02:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e008      	b.n	8006b20 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	371c      	adds	r7, #28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	32b0      	adds	r2, #176	@ 0xb0
 8006b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e004      	b.n	8006b5a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
	...

08006b68 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	32b0      	adds	r2, #176	@ 0xb0
 8006b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b7e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006b80:	2301      	movs	r3, #1
 8006b82:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e025      	b.n	8006bda <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d11f      	bne.n	8006bd8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006ba0:	4b10      	ldr	r3, [pc, #64]	@ (8006be4 <USBD_CDC_TransmitPacket+0x7c>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	f003 020f 	and.w	r2, r3, #15
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4403      	add	r3, r0
 8006bba:	3318      	adds	r3, #24
 8006bbc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006bbe:	4b09      	ldr	r3, [pc, #36]	@ (8006be4 <USBD_CDC_TransmitPacket+0x7c>)
 8006bc0:	7819      	ldrb	r1, [r3, #0]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f001 ffb9 	bl	8008b46 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20000093 	.word	0x20000093

08006be8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	32b0      	adds	r2, #176	@ 0xb0
 8006bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	32b0      	adds	r2, #176	@ 0xb0
 8006c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e018      	b.n	8006c48 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	7c1b      	ldrb	r3, [r3, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c50 <USBD_CDC_ReceivePacket+0x68>)
 8006c20:	7819      	ldrb	r1, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006c28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f001 ffab 	bl	8008b88 <USBD_LL_PrepareReceive>
 8006c32:	e008      	b.n	8006c46 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c34:	4b06      	ldr	r3, [pc, #24]	@ (8006c50 <USBD_CDC_ReceivePacket+0x68>)
 8006c36:	7819      	ldrb	r1, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006c3e:	2340      	movs	r3, #64	@ 0x40
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f001 ffa1 	bl	8008b88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	20000094 	.word	0x20000094

08006c54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e01f      	b.n	8006cac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	79fa      	ldrb	r2, [r7, #7]
 8006c9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f001 fe1b 	bl	80088dc <USBD_LL_Init>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3718      	adds	r7, #24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e025      	b.n	8006d18 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	32ae      	adds	r2, #174	@ 0xae
 8006cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00f      	beq.n	8006d08 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	32ae      	adds	r2, #174	@ 0xae
 8006cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf8:	f107 020e 	add.w	r2, r7, #14
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	4798      	blx	r3
 8006d00:	4602      	mov	r2, r0
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 fe23 	bl	8008974 <USBD_LL_Start>
 8006d2e:	4603      	mov	r3, r0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d40:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	460b      	mov	r3, r1
 8006d58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d009      	beq.n	8006d7c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	78fa      	ldrb	r2, [r7, #3]
 8006d72:	4611      	mov	r1, r2
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	4798      	blx	r3
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	78fa      	ldrb	r2, [r7, #3]
 8006da0:	4611      	mov	r1, r2
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	4798      	blx	r3
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006dac:	2303      	movs	r3, #3
 8006dae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f001 f90c 	bl	8007fea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006de0:	461a      	mov	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006dee:	f003 031f 	and.w	r3, r3, #31
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d01a      	beq.n	8006e2c <USBD_LL_SetupStage+0x72>
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d822      	bhi.n	8006e40 <USBD_LL_SetupStage+0x86>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <USBD_LL_SetupStage+0x4a>
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d00a      	beq.n	8006e18 <USBD_LL_SetupStage+0x5e>
 8006e02:	e01d      	b.n	8006e40 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fb63 	bl	80074d8 <USBD_StdDevReq>
 8006e12:	4603      	mov	r3, r0
 8006e14:	73fb      	strb	r3, [r7, #15]
      break;
 8006e16:	e020      	b.n	8006e5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fbcb 	bl	80075bc <USBD_StdItfReq>
 8006e26:	4603      	mov	r3, r0
 8006e28:	73fb      	strb	r3, [r7, #15]
      break;
 8006e2a:	e016      	b.n	8006e5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fc2d 	bl	8007694 <USBD_StdEPReq>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e3e:	e00c      	b.n	8006e5a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006e46:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 fdf0 	bl	8008a34 <USBD_LL_StallEP>
 8006e54:	4603      	mov	r3, r0
 8006e56:	73fb      	strb	r3, [r7, #15]
      break;
 8006e58:	bf00      	nop
  }

  return ret;
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006e76:	7afb      	ldrb	r3, [r7, #11]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d16e      	bne.n	8006f5a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006e82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	f040 8098 	bne.w	8006fc0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d913      	bls.n	8006ec4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	689a      	ldr	r2, [r3, #8]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	1ad2      	subs	r2, r2, r3
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	68da      	ldr	r2, [r3, #12]
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	bf28      	it	cs
 8006eb6:	4613      	movcs	r3, r2
 8006eb8:	461a      	mov	r2, r3
 8006eba:	6879      	ldr	r1, [r7, #4]
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f001 f994 	bl	80081ea <USBD_CtlContinueRx>
 8006ec2:	e07d      	b.n	8006fc0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006eca:	f003 031f 	and.w	r3, r3, #31
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d014      	beq.n	8006efc <USBD_LL_DataOutStage+0x98>
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d81d      	bhi.n	8006f12 <USBD_LL_DataOutStage+0xae>
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <USBD_LL_DataOutStage+0x7c>
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d003      	beq.n	8006ee6 <USBD_LL_DataOutStage+0x82>
 8006ede:	e018      	b.n	8006f12 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	75bb      	strb	r3, [r7, #22]
            break;
 8006ee4:	e018      	b.n	8006f18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	4619      	mov	r1, r3
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 fa64 	bl	80073be <USBD_CoreFindIF>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	75bb      	strb	r3, [r7, #22]
            break;
 8006efa:	e00d      	b.n	8006f18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	4619      	mov	r1, r3
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 fa66 	bl	80073d8 <USBD_CoreFindEP>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	75bb      	strb	r3, [r7, #22]
            break;
 8006f10:	e002      	b.n	8006f18 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	75bb      	strb	r3, [r7, #22]
            break;
 8006f16:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006f18:	7dbb      	ldrb	r3, [r7, #22]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d119      	bne.n	8006f52 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d113      	bne.n	8006f52 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006f2a:	7dba      	ldrb	r2, [r7, #22]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	32ae      	adds	r2, #174	@ 0xae
 8006f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00b      	beq.n	8006f52 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006f3a:	7dba      	ldrb	r2, [r7, #22]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006f42:	7dba      	ldrb	r2, [r7, #22]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	32ae      	adds	r2, #174	@ 0xae
 8006f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f001 f95a 	bl	800820c <USBD_CtlSendStatus>
 8006f58:	e032      	b.n	8006fc0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006f5a:	7afb      	ldrb	r3, [r7, #11]
 8006f5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	4619      	mov	r1, r3
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 fa37 	bl	80073d8 <USBD_CoreFindEP>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f6e:	7dbb      	ldrb	r3, [r7, #22]
 8006f70:	2bff      	cmp	r3, #255	@ 0xff
 8006f72:	d025      	beq.n	8006fc0 <USBD_LL_DataOutStage+0x15c>
 8006f74:	7dbb      	ldrb	r3, [r7, #22]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d122      	bne.n	8006fc0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d117      	bne.n	8006fb6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006f86:	7dba      	ldrb	r2, [r7, #22]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	32ae      	adds	r2, #174	@ 0xae
 8006f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00f      	beq.n	8006fb6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006f96:	7dba      	ldrb	r2, [r7, #22]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006f9e:	7dba      	ldrb	r2, [r7, #22]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	32ae      	adds	r2, #174	@ 0xae
 8006fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	7afa      	ldrb	r2, [r7, #11]
 8006fac:	4611      	mov	r1, r2
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	4798      	blx	r3
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
 8006fbe:	e000      	b.n	8006fc2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b086      	sub	sp, #24
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	607a      	str	r2, [r7, #4]
 8006fd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006fd8:	7afb      	ldrb	r3, [r7, #11]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d16f      	bne.n	80070be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3314      	adds	r3, #20
 8006fe2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d15a      	bne.n	80070a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	689a      	ldr	r2, [r3, #8]
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d914      	bls.n	8007024 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	689a      	ldr	r2, [r3, #8]
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	1ad2      	subs	r2, r2, r3
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	461a      	mov	r2, r3
 800700e:	6879      	ldr	r1, [r7, #4]
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f001 f8bc 	bl	800818e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007016:	2300      	movs	r3, #0
 8007018:	2200      	movs	r2, #0
 800701a:	2100      	movs	r1, #0
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f001 fdb3 	bl	8008b88 <USBD_LL_PrepareReceive>
 8007022:	e03f      	b.n	80070a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	429a      	cmp	r2, r3
 800702e:	d11c      	bne.n	800706a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007038:	429a      	cmp	r2, r3
 800703a:	d316      	bcc.n	800706a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007046:	429a      	cmp	r2, r3
 8007048:	d20f      	bcs.n	800706a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800704a:	2200      	movs	r2, #0
 800704c:	2100      	movs	r1, #0
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f001 f89d 	bl	800818e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800705c:	2300      	movs	r3, #0
 800705e:	2200      	movs	r2, #0
 8007060:	2100      	movs	r1, #0
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f001 fd90 	bl	8008b88 <USBD_LL_PrepareReceive>
 8007068:	e01c      	b.n	80070a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b03      	cmp	r3, #3
 8007074:	d10f      	bne.n	8007096 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d009      	beq.n	8007096 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007096:	2180      	movs	r1, #128	@ 0x80
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f001 fccb 	bl	8008a34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f001 f8c7 	bl	8008232 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d03a      	beq.n	8007124 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f7ff fe42 	bl	8006d38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80070bc:	e032      	b.n	8007124 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80070be:	7afb      	ldrb	r3, [r7, #11]
 80070c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	4619      	mov	r1, r3
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 f985 	bl	80073d8 <USBD_CoreFindEP>
 80070ce:	4603      	mov	r3, r0
 80070d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070d2:	7dfb      	ldrb	r3, [r7, #23]
 80070d4:	2bff      	cmp	r3, #255	@ 0xff
 80070d6:	d025      	beq.n	8007124 <USBD_LL_DataInStage+0x15a>
 80070d8:	7dfb      	ldrb	r3, [r7, #23]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d122      	bne.n	8007124 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d11c      	bne.n	8007124 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80070ea:	7dfa      	ldrb	r2, [r7, #23]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	32ae      	adds	r2, #174	@ 0xae
 80070f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d014      	beq.n	8007124 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80070fa:	7dfa      	ldrb	r2, [r7, #23]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007102:	7dfa      	ldrb	r2, [r7, #23]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	32ae      	adds	r2, #174	@ 0xae
 8007108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	7afa      	ldrb	r2, [r7, #11]
 8007110:	4611      	mov	r1, r2
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	4798      	blx	r3
 8007116:	4603      	mov	r3, r0
 8007118:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800711a:	7dbb      	ldrb	r3, [r7, #22]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d001      	beq.n	8007124 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007120:	7dbb      	ldrb	r3, [r7, #22]
 8007122:	e000      	b.n	8007126 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007166:	2b00      	cmp	r3, #0
 8007168:	d014      	beq.n	8007194 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00e      	beq.n	8007194 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6852      	ldr	r2, [r2, #4]
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	4611      	mov	r1, r2
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	4798      	blx	r3
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d001      	beq.n	8007194 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007190:	2303      	movs	r3, #3
 8007192:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007194:	2340      	movs	r3, #64	@ 0x40
 8007196:	2200      	movs	r2, #0
 8007198:	2100      	movs	r1, #0
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f001 fc05 	bl	80089aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2240      	movs	r2, #64	@ 0x40
 80071ac:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071b0:	2340      	movs	r3, #64	@ 0x40
 80071b2:	2200      	movs	r2, #0
 80071b4:	2180      	movs	r1, #128	@ 0x80
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 fbf7 	bl	80089aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2240      	movs	r2, #64	@ 0x40
 80071c6:	621a      	str	r2, [r3, #32]

  return ret;
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	460b      	mov	r3, r1
 80071dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	78fa      	ldrb	r2, [r7, #3]
 80071e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b083      	sub	sp, #12
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b04      	cmp	r3, #4
 8007204:	d006      	beq.n	8007214 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800720c:	b2da      	uxtb	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2204      	movs	r2, #4
 8007218:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b04      	cmp	r3, #4
 800723c:	d106      	bne.n	800724c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007244:	b2da      	uxtb	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b082      	sub	sp, #8
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b03      	cmp	r3, #3
 800726c:	d110      	bne.n	8007290 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00b      	beq.n	8007290 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d005      	beq.n	8007290 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b082      	sub	sp, #8
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	460b      	mov	r3, r1
 80072a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	32ae      	adds	r2, #174	@ 0xae
 80072b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e01c      	b.n	80072f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d115      	bne.n	80072f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	32ae      	adds	r2, #174	@ 0xae
 80072d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00b      	beq.n	80072f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	32ae      	adds	r2, #174	@ 0xae
 80072e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ea:	6a1b      	ldr	r3, [r3, #32]
 80072ec:	78fa      	ldrb	r2, [r7, #3]
 80072ee:	4611      	mov	r1, r2
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b082      	sub	sp, #8
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	460b      	mov	r3, r1
 8007308:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	32ae      	adds	r2, #174	@ 0xae
 8007314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800731c:	2303      	movs	r3, #3
 800731e:	e01c      	b.n	800735a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007326:	b2db      	uxtb	r3, r3
 8007328:	2b03      	cmp	r3, #3
 800732a:	d115      	bne.n	8007358 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	32ae      	adds	r2, #174	@ 0xae
 8007336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00b      	beq.n	8007358 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	32ae      	adds	r2, #174	@ 0xae
 800734a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007350:	78fa      	ldrb	r2, [r7, #3]
 8007352:	4611      	mov	r1, r2
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00e      	beq.n	80073b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	6852      	ldr	r2, [r2, #4]
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	4611      	mov	r1, r2
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	4798      	blx	r3
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80073b0:	2303      	movs	r3, #3
 80073b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	460b      	mov	r3, r1
 80073c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80073ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80073e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b086      	sub	sp, #24
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	460b      	mov	r3, r1
 80073fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007406:	2300      	movs	r3, #0
 8007408:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	885b      	ldrh	r3, [r3, #2]
 800740e:	b29b      	uxth	r3, r3
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	7812      	ldrb	r2, [r2, #0]
 8007414:	4293      	cmp	r3, r2
 8007416:	d91f      	bls.n	8007458 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800741e:	e013      	b.n	8007448 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007420:	f107 030a 	add.w	r3, r7, #10
 8007424:	4619      	mov	r1, r3
 8007426:	6978      	ldr	r0, [r7, #20]
 8007428:	f000 f81b 	bl	8007462 <USBD_GetNextDesc>
 800742c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	785b      	ldrb	r3, [r3, #1]
 8007432:	2b05      	cmp	r3, #5
 8007434:	d108      	bne.n	8007448 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	789b      	ldrb	r3, [r3, #2]
 800743e:	78fa      	ldrb	r2, [r7, #3]
 8007440:	429a      	cmp	r2, r3
 8007442:	d008      	beq.n	8007456 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007444:	2300      	movs	r3, #0
 8007446:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	885b      	ldrh	r3, [r3, #2]
 800744c:	b29a      	uxth	r2, r3
 800744e:	897b      	ldrh	r3, [r7, #10]
 8007450:	429a      	cmp	r2, r3
 8007452:	d8e5      	bhi.n	8007420 <USBD_GetEpDesc+0x2e>
 8007454:	e000      	b.n	8007458 <USBD_GetEpDesc+0x66>
          break;
 8007456:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007458:	693b      	ldr	r3, [r7, #16]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007462:	b480      	push	{r7}
 8007464:	b085      	sub	sp, #20
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	7812      	ldrb	r2, [r2, #0]
 8007478:	4413      	add	r3, r2
 800747a:	b29a      	uxth	r2, r3
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4413      	add	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800748c:	68fb      	ldr	r3, [r7, #12]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800749a:	b480      	push	{r7}
 800749c:	b087      	sub	sp, #28
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	3301      	adds	r3, #1
 80074b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80074b8:	8a3b      	ldrh	r3, [r7, #16]
 80074ba:	021b      	lsls	r3, r3, #8
 80074bc:	b21a      	sxth	r2, r3
 80074be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	b21b      	sxth	r3, r3
 80074c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80074c8:	89fb      	ldrh	r3, [r7, #14]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	371c      	adds	r7, #28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
	...

080074d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074ee:	2b40      	cmp	r3, #64	@ 0x40
 80074f0:	d005      	beq.n	80074fe <USBD_StdDevReq+0x26>
 80074f2:	2b40      	cmp	r3, #64	@ 0x40
 80074f4:	d857      	bhi.n	80075a6 <USBD_StdDevReq+0xce>
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00f      	beq.n	800751a <USBD_StdDevReq+0x42>
 80074fa:	2b20      	cmp	r3, #32
 80074fc:	d153      	bne.n	80075a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	32ae      	adds	r2, #174	@ 0xae
 8007508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	4798      	blx	r3
 8007514:	4603      	mov	r3, r0
 8007516:	73fb      	strb	r3, [r7, #15]
      break;
 8007518:	e04a      	b.n	80075b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	785b      	ldrb	r3, [r3, #1]
 800751e:	2b09      	cmp	r3, #9
 8007520:	d83b      	bhi.n	800759a <USBD_StdDevReq+0xc2>
 8007522:	a201      	add	r2, pc, #4	@ (adr r2, 8007528 <USBD_StdDevReq+0x50>)
 8007524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007528:	0800757d 	.word	0x0800757d
 800752c:	08007591 	.word	0x08007591
 8007530:	0800759b 	.word	0x0800759b
 8007534:	08007587 	.word	0x08007587
 8007538:	0800759b 	.word	0x0800759b
 800753c:	0800755b 	.word	0x0800755b
 8007540:	08007551 	.word	0x08007551
 8007544:	0800759b 	.word	0x0800759b
 8007548:	08007573 	.word	0x08007573
 800754c:	08007565 	.word	0x08007565
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fa3c 	bl	80079d0 <USBD_GetDescriptor>
          break;
 8007558:	e024      	b.n	80075a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800755a:	6839      	ldr	r1, [r7, #0]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fba1 	bl	8007ca4 <USBD_SetAddress>
          break;
 8007562:	e01f      	b.n	80075a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fbe0 	bl	8007d2c <USBD_SetConfig>
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]
          break;
 8007570:	e018      	b.n	80075a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fc83 	bl	8007e80 <USBD_GetConfig>
          break;
 800757a:	e013      	b.n	80075a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fcb4 	bl	8007eec <USBD_GetStatus>
          break;
 8007584:	e00e      	b.n	80075a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fce3 	bl	8007f54 <USBD_SetFeature>
          break;
 800758e:	e009      	b.n	80075a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fd07 	bl	8007fa6 <USBD_ClrFeature>
          break;
 8007598:	e004      	b.n	80075a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fd5e 	bl	800805e <USBD_CtlError>
          break;
 80075a2:	bf00      	nop
      }
      break;
 80075a4:	e004      	b.n	80075b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fd58 	bl	800805e <USBD_CtlError>
      break;
 80075ae:	bf00      	nop
  }

  return ret;
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop

080075bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075d2:	2b40      	cmp	r3, #64	@ 0x40
 80075d4:	d005      	beq.n	80075e2 <USBD_StdItfReq+0x26>
 80075d6:	2b40      	cmp	r3, #64	@ 0x40
 80075d8:	d852      	bhi.n	8007680 <USBD_StdItfReq+0xc4>
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <USBD_StdItfReq+0x26>
 80075de:	2b20      	cmp	r3, #32
 80075e0:	d14e      	bne.n	8007680 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	3b01      	subs	r3, #1
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d840      	bhi.n	8007672 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	889b      	ldrh	r3, [r3, #4]
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d836      	bhi.n	8007668 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	889b      	ldrh	r3, [r3, #4]
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7ff fedb 	bl	80073be <USBD_CoreFindIF>
 8007608:	4603      	mov	r3, r0
 800760a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800760c:	7bbb      	ldrb	r3, [r7, #14]
 800760e:	2bff      	cmp	r3, #255	@ 0xff
 8007610:	d01d      	beq.n	800764e <USBD_StdItfReq+0x92>
 8007612:	7bbb      	ldrb	r3, [r7, #14]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d11a      	bne.n	800764e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007618:	7bba      	ldrb	r2, [r7, #14]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	32ae      	adds	r2, #174	@ 0xae
 800761e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00f      	beq.n	8007648 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007628:	7bba      	ldrb	r2, [r7, #14]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007630:	7bba      	ldrb	r2, [r7, #14]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	32ae      	adds	r2, #174	@ 0xae
 8007636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	4798      	blx	r3
 8007642:	4603      	mov	r3, r0
 8007644:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007646:	e004      	b.n	8007652 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007648:	2303      	movs	r3, #3
 800764a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800764c:	e001      	b.n	8007652 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800764e:	2303      	movs	r3, #3
 8007650:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	88db      	ldrh	r3, [r3, #6]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d110      	bne.n	800767c <USBD_StdItfReq+0xc0>
 800765a:	7bfb      	ldrb	r3, [r7, #15]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10d      	bne.n	800767c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fdd3 	bl	800820c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007666:	e009      	b.n	800767c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fcf7 	bl	800805e <USBD_CtlError>
          break;
 8007670:	e004      	b.n	800767c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fcf2 	bl	800805e <USBD_CtlError>
          break;
 800767a:	e000      	b.n	800767e <USBD_StdItfReq+0xc2>
          break;
 800767c:	bf00      	nop
      }
      break;
 800767e:	e004      	b.n	800768a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fceb 	bl	800805e <USBD_CtlError>
      break;
 8007688:	bf00      	nop
  }

  return ret;
 800768a:	7bfb      	ldrb	r3, [r7, #15]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	889b      	ldrh	r3, [r3, #4]
 80076a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076b0:	2b40      	cmp	r3, #64	@ 0x40
 80076b2:	d007      	beq.n	80076c4 <USBD_StdEPReq+0x30>
 80076b4:	2b40      	cmp	r3, #64	@ 0x40
 80076b6:	f200 817f 	bhi.w	80079b8 <USBD_StdEPReq+0x324>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d02a      	beq.n	8007714 <USBD_StdEPReq+0x80>
 80076be:	2b20      	cmp	r3, #32
 80076c0:	f040 817a 	bne.w	80079b8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80076c4:	7bbb      	ldrb	r3, [r7, #14]
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7ff fe85 	bl	80073d8 <USBD_CoreFindEP>
 80076ce:	4603      	mov	r3, r0
 80076d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076d2:	7b7b      	ldrb	r3, [r7, #13]
 80076d4:	2bff      	cmp	r3, #255	@ 0xff
 80076d6:	f000 8174 	beq.w	80079c2 <USBD_StdEPReq+0x32e>
 80076da:	7b7b      	ldrb	r3, [r7, #13]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f040 8170 	bne.w	80079c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80076e2:	7b7a      	ldrb	r2, [r7, #13]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80076ea:	7b7a      	ldrb	r2, [r7, #13]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	32ae      	adds	r2, #174	@ 0xae
 80076f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 8163 	beq.w	80079c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80076fc:	7b7a      	ldrb	r2, [r7, #13]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	32ae      	adds	r2, #174	@ 0xae
 8007702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	4798      	blx	r3
 800770e:	4603      	mov	r3, r0
 8007710:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007712:	e156      	b.n	80079c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	785b      	ldrb	r3, [r3, #1]
 8007718:	2b03      	cmp	r3, #3
 800771a:	d008      	beq.n	800772e <USBD_StdEPReq+0x9a>
 800771c:	2b03      	cmp	r3, #3
 800771e:	f300 8145 	bgt.w	80079ac <USBD_StdEPReq+0x318>
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 809b 	beq.w	800785e <USBD_StdEPReq+0x1ca>
 8007728:	2b01      	cmp	r3, #1
 800772a:	d03c      	beq.n	80077a6 <USBD_StdEPReq+0x112>
 800772c:	e13e      	b.n	80079ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b02      	cmp	r3, #2
 8007738:	d002      	beq.n	8007740 <USBD_StdEPReq+0xac>
 800773a:	2b03      	cmp	r3, #3
 800773c:	d016      	beq.n	800776c <USBD_StdEPReq+0xd8>
 800773e:	e02c      	b.n	800779a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007740:	7bbb      	ldrb	r3, [r7, #14]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00d      	beq.n	8007762 <USBD_StdEPReq+0xce>
 8007746:	7bbb      	ldrb	r3, [r7, #14]
 8007748:	2b80      	cmp	r3, #128	@ 0x80
 800774a:	d00a      	beq.n	8007762 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800774c:	7bbb      	ldrb	r3, [r7, #14]
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f001 f96f 	bl	8008a34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007756:	2180      	movs	r1, #128	@ 0x80
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 f96b 	bl	8008a34 <USBD_LL_StallEP>
 800775e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007760:	e020      	b.n	80077a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fc7a 	bl	800805e <USBD_CtlError>
              break;
 800776a:	e01b      	b.n	80077a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	885b      	ldrh	r3, [r3, #2]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10e      	bne.n	8007792 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00b      	beq.n	8007792 <USBD_StdEPReq+0xfe>
 800777a:	7bbb      	ldrb	r3, [r7, #14]
 800777c:	2b80      	cmp	r3, #128	@ 0x80
 800777e:	d008      	beq.n	8007792 <USBD_StdEPReq+0xfe>
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	88db      	ldrh	r3, [r3, #6]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d104      	bne.n	8007792 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007788:	7bbb      	ldrb	r3, [r7, #14]
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 f951 	bl	8008a34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fd3a 	bl	800820c <USBD_CtlSendStatus>

              break;
 8007798:	e004      	b.n	80077a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fc5e 	bl	800805e <USBD_CtlError>
              break;
 80077a2:	bf00      	nop
          }
          break;
 80077a4:	e107      	b.n	80079b6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d002      	beq.n	80077b8 <USBD_StdEPReq+0x124>
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d016      	beq.n	80077e4 <USBD_StdEPReq+0x150>
 80077b6:	e04b      	b.n	8007850 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077b8:	7bbb      	ldrb	r3, [r7, #14]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00d      	beq.n	80077da <USBD_StdEPReq+0x146>
 80077be:	7bbb      	ldrb	r3, [r7, #14]
 80077c0:	2b80      	cmp	r3, #128	@ 0x80
 80077c2:	d00a      	beq.n	80077da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f001 f933 	bl	8008a34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80077ce:	2180      	movs	r1, #128	@ 0x80
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f001 f92f 	bl	8008a34 <USBD_LL_StallEP>
 80077d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077d8:	e040      	b.n	800785c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fc3e 	bl	800805e <USBD_CtlError>
              break;
 80077e2:	e03b      	b.n	800785c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	885b      	ldrh	r3, [r3, #2]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d136      	bne.n	800785a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80077ec:	7bbb      	ldrb	r3, [r7, #14]
 80077ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d004      	beq.n	8007800 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80077f6:	7bbb      	ldrb	r3, [r7, #14]
 80077f8:	4619      	mov	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f001 f939 	bl	8008a72 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fd03 	bl	800820c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7ff fde4 	bl	80073d8 <USBD_CoreFindEP>
 8007810:	4603      	mov	r3, r0
 8007812:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007814:	7b7b      	ldrb	r3, [r7, #13]
 8007816:	2bff      	cmp	r3, #255	@ 0xff
 8007818:	d01f      	beq.n	800785a <USBD_StdEPReq+0x1c6>
 800781a:	7b7b      	ldrb	r3, [r7, #13]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d11c      	bne.n	800785a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007820:	7b7a      	ldrb	r2, [r7, #13]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007828:	7b7a      	ldrb	r2, [r7, #13]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	32ae      	adds	r2, #174	@ 0xae
 800782e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d010      	beq.n	800785a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007838:	7b7a      	ldrb	r2, [r7, #13]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	32ae      	adds	r2, #174	@ 0xae
 800783e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	4798      	blx	r3
 800784a:	4603      	mov	r3, r0
 800784c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800784e:	e004      	b.n	800785a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fc03 	bl	800805e <USBD_CtlError>
              break;
 8007858:	e000      	b.n	800785c <USBD_StdEPReq+0x1c8>
              break;
 800785a:	bf00      	nop
          }
          break;
 800785c:	e0ab      	b.n	80079b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b02      	cmp	r3, #2
 8007868:	d002      	beq.n	8007870 <USBD_StdEPReq+0x1dc>
 800786a:	2b03      	cmp	r3, #3
 800786c:	d032      	beq.n	80078d4 <USBD_StdEPReq+0x240>
 800786e:	e097      	b.n	80079a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007870:	7bbb      	ldrb	r3, [r7, #14]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d007      	beq.n	8007886 <USBD_StdEPReq+0x1f2>
 8007876:	7bbb      	ldrb	r3, [r7, #14]
 8007878:	2b80      	cmp	r3, #128	@ 0x80
 800787a:	d004      	beq.n	8007886 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800787c:	6839      	ldr	r1, [r7, #0]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fbed 	bl	800805e <USBD_CtlError>
                break;
 8007884:	e091      	b.n	80079aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007886:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800788a:	2b00      	cmp	r3, #0
 800788c:	da0b      	bge.n	80078a6 <USBD_StdEPReq+0x212>
 800788e:	7bbb      	ldrb	r3, [r7, #14]
 8007890:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007894:	4613      	mov	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	3310      	adds	r3, #16
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	4413      	add	r3, r2
 80078a2:	3304      	adds	r3, #4
 80078a4:	e00b      	b.n	80078be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078a6:	7bbb      	ldrb	r3, [r7, #14]
 80078a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078ac:	4613      	mov	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	4413      	add	r3, r2
 80078bc:	3304      	adds	r3, #4
 80078be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2202      	movs	r2, #2
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fc43 	bl	8008158 <USBD_CtlSendData>
              break;
 80078d2:	e06a      	b.n	80079aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80078d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	da11      	bge.n	8007900 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	f003 020f 	and.w	r2, r3, #15
 80078e2:	6879      	ldr	r1, [r7, #4]
 80078e4:	4613      	mov	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	440b      	add	r3, r1
 80078ee:	3324      	adds	r3, #36	@ 0x24
 80078f0:	881b      	ldrh	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d117      	bne.n	8007926 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fbb0 	bl	800805e <USBD_CtlError>
                  break;
 80078fe:	e054      	b.n	80079aa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007900:	7bbb      	ldrb	r3, [r7, #14]
 8007902:	f003 020f 	and.w	r2, r3, #15
 8007906:	6879      	ldr	r1, [r7, #4]
 8007908:	4613      	mov	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	440b      	add	r3, r1
 8007912:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007916:	881b      	ldrh	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d104      	bne.n	8007926 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fb9d 	bl	800805e <USBD_CtlError>
                  break;
 8007924:	e041      	b.n	80079aa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007926:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800792a:	2b00      	cmp	r3, #0
 800792c:	da0b      	bge.n	8007946 <USBD_StdEPReq+0x2b2>
 800792e:	7bbb      	ldrb	r3, [r7, #14]
 8007930:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007934:	4613      	mov	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	3310      	adds	r3, #16
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	4413      	add	r3, r2
 8007942:	3304      	adds	r3, #4
 8007944:	e00b      	b.n	800795e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800794c:	4613      	mov	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	4413      	add	r3, r2
 800795c:	3304      	adds	r3, #4
 800795e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007960:	7bbb      	ldrb	r3, [r7, #14]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d002      	beq.n	800796c <USBD_StdEPReq+0x2d8>
 8007966:	7bbb      	ldrb	r3, [r7, #14]
 8007968:	2b80      	cmp	r3, #128	@ 0x80
 800796a:	d103      	bne.n	8007974 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	e00e      	b.n	8007992 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f001 f899 	bl	8008ab0 <USBD_LL_IsStallEP>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d003      	beq.n	800798c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2201      	movs	r2, #1
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	e002      	b.n	8007992 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2202      	movs	r2, #2
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fbdd 	bl	8008158 <USBD_CtlSendData>
              break;
 800799e:	e004      	b.n	80079aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fb5b 	bl	800805e <USBD_CtlError>
              break;
 80079a8:	bf00      	nop
          }
          break;
 80079aa:	e004      	b.n	80079b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fb55 	bl	800805e <USBD_CtlError>
          break;
 80079b4:	bf00      	nop
      }
      break;
 80079b6:	e005      	b.n	80079c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fb4f 	bl	800805e <USBD_CtlError>
      break;
 80079c0:	e000      	b.n	80079c4 <USBD_StdEPReq+0x330>
      break;
 80079c2:	bf00      	nop
  }

  return ret;
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
	...

080079d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	885b      	ldrh	r3, [r3, #2]
 80079ea:	0a1b      	lsrs	r3, r3, #8
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	3b01      	subs	r3, #1
 80079f0:	2b06      	cmp	r3, #6
 80079f2:	f200 8128 	bhi.w	8007c46 <USBD_GetDescriptor+0x276>
 80079f6:	a201      	add	r2, pc, #4	@ (adr r2, 80079fc <USBD_GetDescriptor+0x2c>)
 80079f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fc:	08007a19 	.word	0x08007a19
 8007a00:	08007a31 	.word	0x08007a31
 8007a04:	08007a71 	.word	0x08007a71
 8007a08:	08007c47 	.word	0x08007c47
 8007a0c:	08007c47 	.word	0x08007c47
 8007a10:	08007be7 	.word	0x08007be7
 8007a14:	08007c13 	.word	0x08007c13
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	7c12      	ldrb	r2, [r2, #16]
 8007a24:	f107 0108 	add.w	r1, r7, #8
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4798      	blx	r3
 8007a2c:	60f8      	str	r0, [r7, #12]
      break;
 8007a2e:	e112      	b.n	8007c56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	7c1b      	ldrb	r3, [r3, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10d      	bne.n	8007a54 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a40:	f107 0208 	add.w	r2, r7, #8
 8007a44:	4610      	mov	r0, r2
 8007a46:	4798      	blx	r3
 8007a48:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	2202      	movs	r2, #2
 8007a50:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a52:	e100      	b.n	8007c56 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5c:	f107 0208 	add.w	r2, r7, #8
 8007a60:	4610      	mov	r0, r2
 8007a62:	4798      	blx	r3
 8007a64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	701a      	strb	r2, [r3, #0]
      break;
 8007a6e:	e0f2      	b.n	8007c56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	885b      	ldrh	r3, [r3, #2]
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b05      	cmp	r3, #5
 8007a78:	f200 80ac 	bhi.w	8007bd4 <USBD_GetDescriptor+0x204>
 8007a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a84 <USBD_GetDescriptor+0xb4>)
 8007a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a82:	bf00      	nop
 8007a84:	08007a9d 	.word	0x08007a9d
 8007a88:	08007ad1 	.word	0x08007ad1
 8007a8c:	08007b05 	.word	0x08007b05
 8007a90:	08007b39 	.word	0x08007b39
 8007a94:	08007b6d 	.word	0x08007b6d
 8007a98:	08007ba1 	.word	0x08007ba1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00b      	beq.n	8007ac0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	7c12      	ldrb	r2, [r2, #16]
 8007ab4:	f107 0108 	add.w	r1, r7, #8
 8007ab8:	4610      	mov	r0, r2
 8007aba:	4798      	blx	r3
 8007abc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007abe:	e091      	b.n	8007be4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 facb 	bl	800805e <USBD_CtlError>
            err++;
 8007ac8:	7afb      	ldrb	r3, [r7, #11]
 8007aca:	3301      	adds	r3, #1
 8007acc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ace:	e089      	b.n	8007be4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00b      	beq.n	8007af4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	7c12      	ldrb	r2, [r2, #16]
 8007ae8:	f107 0108 	add.w	r1, r7, #8
 8007aec:	4610      	mov	r0, r2
 8007aee:	4798      	blx	r3
 8007af0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007af2:	e077      	b.n	8007be4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fab1 	bl	800805e <USBD_CtlError>
            err++;
 8007afc:	7afb      	ldrb	r3, [r7, #11]
 8007afe:	3301      	adds	r3, #1
 8007b00:	72fb      	strb	r3, [r7, #11]
          break;
 8007b02:	e06f      	b.n	8007be4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00b      	beq.n	8007b28 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	7c12      	ldrb	r2, [r2, #16]
 8007b1c:	f107 0108 	add.w	r1, r7, #8
 8007b20:	4610      	mov	r0, r2
 8007b22:	4798      	blx	r3
 8007b24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b26:	e05d      	b.n	8007be4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fa97 	bl	800805e <USBD_CtlError>
            err++;
 8007b30:	7afb      	ldrb	r3, [r7, #11]
 8007b32:	3301      	adds	r3, #1
 8007b34:	72fb      	strb	r3, [r7, #11]
          break;
 8007b36:	e055      	b.n	8007be4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00b      	beq.n	8007b5c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	7c12      	ldrb	r2, [r2, #16]
 8007b50:	f107 0108 	add.w	r1, r7, #8
 8007b54:	4610      	mov	r0, r2
 8007b56:	4798      	blx	r3
 8007b58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b5a:	e043      	b.n	8007be4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fa7d 	bl	800805e <USBD_CtlError>
            err++;
 8007b64:	7afb      	ldrb	r3, [r7, #11]
 8007b66:	3301      	adds	r3, #1
 8007b68:	72fb      	strb	r3, [r7, #11]
          break;
 8007b6a:	e03b      	b.n	8007be4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00b      	beq.n	8007b90 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	7c12      	ldrb	r2, [r2, #16]
 8007b84:	f107 0108 	add.w	r1, r7, #8
 8007b88:	4610      	mov	r0, r2
 8007b8a:	4798      	blx	r3
 8007b8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b8e:	e029      	b.n	8007be4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fa63 	bl	800805e <USBD_CtlError>
            err++;
 8007b98:	7afb      	ldrb	r3, [r7, #11]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b9e:	e021      	b.n	8007be4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00b      	beq.n	8007bc4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	7c12      	ldrb	r2, [r2, #16]
 8007bb8:	f107 0108 	add.w	r1, r7, #8
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	4798      	blx	r3
 8007bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bc2:	e00f      	b.n	8007be4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fa49 	bl	800805e <USBD_CtlError>
            err++;
 8007bcc:	7afb      	ldrb	r3, [r7, #11]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8007bd2:	e007      	b.n	8007be4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fa41 	bl	800805e <USBD_CtlError>
          err++;
 8007bdc:	7afb      	ldrb	r3, [r7, #11]
 8007bde:	3301      	adds	r3, #1
 8007be0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007be2:	bf00      	nop
      }
      break;
 8007be4:	e037      	b.n	8007c56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	7c1b      	ldrb	r3, [r3, #16]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d109      	bne.n	8007c02 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bf6:	f107 0208 	add.w	r2, r7, #8
 8007bfa:	4610      	mov	r0, r2
 8007bfc:	4798      	blx	r3
 8007bfe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c00:	e029      	b.n	8007c56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fa2a 	bl	800805e <USBD_CtlError>
        err++;
 8007c0a:	7afb      	ldrb	r3, [r7, #11]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c10:	e021      	b.n	8007c56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	7c1b      	ldrb	r3, [r3, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10d      	bne.n	8007c36 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c22:	f107 0208 	add.w	r2, r7, #8
 8007c26:	4610      	mov	r0, r2
 8007c28:	4798      	blx	r3
 8007c2a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	2207      	movs	r2, #7
 8007c32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c34:	e00f      	b.n	8007c56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c36:	6839      	ldr	r1, [r7, #0]
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fa10 	bl	800805e <USBD_CtlError>
        err++;
 8007c3e:	7afb      	ldrb	r3, [r7, #11]
 8007c40:	3301      	adds	r3, #1
 8007c42:	72fb      	strb	r3, [r7, #11]
      break;
 8007c44:	e007      	b.n	8007c56 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c46:	6839      	ldr	r1, [r7, #0]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fa08 	bl	800805e <USBD_CtlError>
      err++;
 8007c4e:	7afb      	ldrb	r3, [r7, #11]
 8007c50:	3301      	adds	r3, #1
 8007c52:	72fb      	strb	r3, [r7, #11]
      break;
 8007c54:	bf00      	nop
  }

  if (err != 0U)
 8007c56:	7afb      	ldrb	r3, [r7, #11]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d11e      	bne.n	8007c9a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	88db      	ldrh	r3, [r3, #6]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d016      	beq.n	8007c92 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007c64:	893b      	ldrh	r3, [r7, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00e      	beq.n	8007c88 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	88da      	ldrh	r2, [r3, #6]
 8007c6e:	893b      	ldrh	r3, [r7, #8]
 8007c70:	4293      	cmp	r3, r2
 8007c72:	bf28      	it	cs
 8007c74:	4613      	movcs	r3, r2
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c7a:	893b      	ldrh	r3, [r7, #8]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	68f9      	ldr	r1, [r7, #12]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fa69 	bl	8008158 <USBD_CtlSendData>
 8007c86:	e009      	b.n	8007c9c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f9e7 	bl	800805e <USBD_CtlError>
 8007c90:	e004      	b.n	8007c9c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 faba 	bl	800820c <USBD_CtlSendStatus>
 8007c98:	e000      	b.n	8007c9c <USBD_GetDescriptor+0x2cc>
    return;
 8007c9a:	bf00      	nop
  }
}
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop

08007ca4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	889b      	ldrh	r3, [r3, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d131      	bne.n	8007d1a <USBD_SetAddress+0x76>
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	88db      	ldrh	r3, [r3, #6]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d12d      	bne.n	8007d1a <USBD_SetAddress+0x76>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	885b      	ldrh	r3, [r3, #2]
 8007cc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8007cc4:	d829      	bhi.n	8007d1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	885b      	ldrh	r3, [r3, #2]
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d104      	bne.n	8007ce8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f9bc 	bl	800805e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce6:	e01d      	b.n	8007d24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	7bfa      	ldrb	r2, [r7, #15]
 8007cec:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 ff07 	bl	8008b08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fa86 	bl	800820c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d004      	beq.n	8007d10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2202      	movs	r2, #2
 8007d0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d0e:	e009      	b.n	8007d24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d18:	e004      	b.n	8007d24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f99e 	bl	800805e <USBD_CtlError>
  }
}
 8007d22:	bf00      	nop
 8007d24:	bf00      	nop
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	885b      	ldrh	r3, [r3, #2]
 8007d3e:	b2da      	uxtb	r2, r3
 8007d40:	4b4e      	ldr	r3, [pc, #312]	@ (8007e7c <USBD_SetConfig+0x150>)
 8007d42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d44:	4b4d      	ldr	r3, [pc, #308]	@ (8007e7c <USBD_SetConfig+0x150>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d905      	bls.n	8007d58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f985 	bl	800805e <USBD_CtlError>
    return USBD_FAIL;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e08c      	b.n	8007e72 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d002      	beq.n	8007d6a <USBD_SetConfig+0x3e>
 8007d64:	2b03      	cmp	r3, #3
 8007d66:	d029      	beq.n	8007dbc <USBD_SetConfig+0x90>
 8007d68:	e075      	b.n	8007e56 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007d6a:	4b44      	ldr	r3, [pc, #272]	@ (8007e7c <USBD_SetConfig+0x150>)
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d020      	beq.n	8007db4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007d72:	4b42      	ldr	r3, [pc, #264]	@ (8007e7c <USBD_SetConfig+0x150>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d7c:	4b3f      	ldr	r3, [pc, #252]	@ (8007e7c <USBD_SetConfig+0x150>)
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	4619      	mov	r1, r3
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f7fe ffe3 	bl	8006d4e <USBD_SetClassConfig>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007d8c:	7bfb      	ldrb	r3, [r7, #15]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d008      	beq.n	8007da4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f962 	bl	800805e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007da2:	e065      	b.n	8007e70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fa31 	bl	800820c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2203      	movs	r2, #3
 8007dae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007db2:	e05d      	b.n	8007e70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fa29 	bl	800820c <USBD_CtlSendStatus>
      break;
 8007dba:	e059      	b.n	8007e70 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8007e7c <USBD_SetConfig+0x150>)
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d112      	bne.n	8007dea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8007e7c <USBD_SetConfig+0x150>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007dd6:	4b29      	ldr	r3, [pc, #164]	@ (8007e7c <USBD_SetConfig+0x150>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f7fe ffd2 	bl	8006d86 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fa12 	bl	800820c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007de8:	e042      	b.n	8007e70 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007dea:	4b24      	ldr	r3, [pc, #144]	@ (8007e7c <USBD_SetConfig+0x150>)
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	461a      	mov	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d02a      	beq.n	8007e4e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7fe ffc0 	bl	8006d86 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007e06:	4b1d      	ldr	r3, [pc, #116]	@ (8007e7c <USBD_SetConfig+0x150>)
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e10:	4b1a      	ldr	r3, [pc, #104]	@ (8007e7c <USBD_SetConfig+0x150>)
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	4619      	mov	r1, r3
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7fe ff99 	bl	8006d4e <USBD_SetClassConfig>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00f      	beq.n	8007e46 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007e26:	6839      	ldr	r1, [r7, #0]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f918 	bl	800805e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	4619      	mov	r1, r3
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7fe ffa5 	bl	8006d86 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2202      	movs	r2, #2
 8007e40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007e44:	e014      	b.n	8007e70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f9e0 	bl	800820c <USBD_CtlSendStatus>
      break;
 8007e4c:	e010      	b.n	8007e70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f9dc 	bl	800820c <USBD_CtlSendStatus>
      break;
 8007e54:	e00c      	b.n	8007e70 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f900 	bl	800805e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e5e:	4b07      	ldr	r3, [pc, #28]	@ (8007e7c <USBD_SetConfig+0x150>)
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7fe ff8e 	bl	8006d86 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e6e:	bf00      	nop
  }

  return ret;
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	2000033c 	.word	0x2000033c

08007e80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	88db      	ldrh	r3, [r3, #6]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d004      	beq.n	8007e9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f8e2 	bl	800805e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e9a:	e023      	b.n	8007ee4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	dc02      	bgt.n	8007eae <USBD_GetConfig+0x2e>
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	dc03      	bgt.n	8007eb4 <USBD_GetConfig+0x34>
 8007eac:	e015      	b.n	8007eda <USBD_GetConfig+0x5a>
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d00b      	beq.n	8007eca <USBD_GetConfig+0x4a>
 8007eb2:	e012      	b.n	8007eda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f948 	bl	8008158 <USBD_CtlSendData>
        break;
 8007ec8:	e00c      	b.n	8007ee4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	3304      	adds	r3, #4
 8007ece:	2201      	movs	r2, #1
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f940 	bl	8008158 <USBD_CtlSendData>
        break;
 8007ed8:	e004      	b.n	8007ee4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f8be 	bl	800805e <USBD_CtlError>
        break;
 8007ee2:	bf00      	nop
}
 8007ee4:	bf00      	nop
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	3b01      	subs	r3, #1
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d81e      	bhi.n	8007f42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	88db      	ldrh	r3, [r3, #6]
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d004      	beq.n	8007f16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f8a5 	bl	800805e <USBD_CtlError>
        break;
 8007f14:	e01a      	b.n	8007f4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d005      	beq.n	8007f32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	f043 0202 	orr.w	r2, r3, #2
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	330c      	adds	r3, #12
 8007f36:	2202      	movs	r2, #2
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f90c 	bl	8008158 <USBD_CtlSendData>
      break;
 8007f40:	e004      	b.n	8007f4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f88a 	bl	800805e <USBD_CtlError>
      break;
 8007f4a:	bf00      	nop
  }
}
 8007f4c:	bf00      	nop
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	885b      	ldrh	r3, [r3, #2]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d107      	bne.n	8007f76 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f94c 	bl	800820c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007f74:	e013      	b.n	8007f9e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	885b      	ldrh	r3, [r3, #2]
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d10b      	bne.n	8007f96 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	889b      	ldrh	r3, [r3, #4]
 8007f82:	0a1b      	lsrs	r3, r3, #8
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f93c 	bl	800820c <USBD_CtlSendStatus>
}
 8007f94:	e003      	b.n	8007f9e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f860 	bl	800805e <USBD_CtlError>
}
 8007f9e:	bf00      	nop
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b082      	sub	sp, #8
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d80b      	bhi.n	8007fd6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	885b      	ldrh	r3, [r3, #2]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d10c      	bne.n	8007fe0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f91c 	bl	800820c <USBD_CtlSendStatus>
      }
      break;
 8007fd4:	e004      	b.n	8007fe0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f840 	bl	800805e <USBD_CtlError>
      break;
 8007fde:	e000      	b.n	8007fe2 <USBD_ClrFeature+0x3c>
      break;
 8007fe0:	bf00      	nop
  }
}
 8007fe2:	bf00      	nop
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	781a      	ldrb	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	3301      	adds	r3, #1
 8008004:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	781a      	ldrb	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	3301      	adds	r3, #1
 8008012:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f7ff fa40 	bl	800749a <SWAPBYTE>
 800801a:	4603      	mov	r3, r0
 800801c:	461a      	mov	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	3301      	adds	r3, #1
 8008026:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	3301      	adds	r3, #1
 800802c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f7ff fa33 	bl	800749a <SWAPBYTE>
 8008034:	4603      	mov	r3, r0
 8008036:	461a      	mov	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	3301      	adds	r3, #1
 8008040:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	3301      	adds	r3, #1
 8008046:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f7ff fa26 	bl	800749a <SWAPBYTE>
 800804e:	4603      	mov	r3, r0
 8008050:	461a      	mov	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	80da      	strh	r2, [r3, #6]
}
 8008056:	bf00      	nop
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008068:	2180      	movs	r1, #128	@ 0x80
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fce2 	bl	8008a34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008070:	2100      	movs	r1, #0
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fcde 	bl	8008a34 <USBD_LL_StallEP>
}
 8008078:	bf00      	nop
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800808c:	2300      	movs	r3, #0
 800808e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d042      	beq.n	800811c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800809a:	6938      	ldr	r0, [r7, #16]
 800809c:	f000 f842 	bl	8008124 <USBD_GetLen>
 80080a0:	4603      	mov	r3, r0
 80080a2:	3301      	adds	r3, #1
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080aa:	d808      	bhi.n	80080be <USBD_GetString+0x3e>
 80080ac:	6938      	ldr	r0, [r7, #16]
 80080ae:	f000 f839 	bl	8008124 <USBD_GetLen>
 80080b2:	4603      	mov	r3, r0
 80080b4:	3301      	adds	r3, #1
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	005b      	lsls	r3, r3, #1
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	e001      	b.n	80080c2 <USBD_GetString+0x42>
 80080be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80080c6:	7dfb      	ldrb	r3, [r7, #23]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	4413      	add	r3, r2
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	7812      	ldrb	r2, [r2, #0]
 80080d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
 80080d4:	3301      	adds	r3, #1
 80080d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80080d8:	7dfb      	ldrb	r3, [r7, #23]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	4413      	add	r3, r2
 80080de:	2203      	movs	r2, #3
 80080e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80080e2:	7dfb      	ldrb	r3, [r7, #23]
 80080e4:	3301      	adds	r3, #1
 80080e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80080e8:	e013      	b.n	8008112 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80080ea:	7dfb      	ldrb	r3, [r7, #23]
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	4413      	add	r3, r2
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	7812      	ldrb	r2, [r2, #0]
 80080f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	3301      	adds	r3, #1
 80080fa:	613b      	str	r3, [r7, #16]
    idx++;
 80080fc:	7dfb      	ldrb	r3, [r7, #23]
 80080fe:	3301      	adds	r3, #1
 8008100:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	4413      	add	r3, r2
 8008108:	2200      	movs	r2, #0
 800810a:	701a      	strb	r2, [r3, #0]
    idx++;
 800810c:	7dfb      	ldrb	r3, [r7, #23]
 800810e:	3301      	adds	r3, #1
 8008110:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1e7      	bne.n	80080ea <USBD_GetString+0x6a>
 800811a:	e000      	b.n	800811e <USBD_GetString+0x9e>
    return;
 800811c:	bf00      	nop
  }
}
 800811e:	3718      	adds	r7, #24
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800812c:	2300      	movs	r3, #0
 800812e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008134:	e005      	b.n	8008142 <USBD_GetLen+0x1e>
  {
    len++;
 8008136:	7bfb      	ldrb	r3, [r7, #15]
 8008138:	3301      	adds	r3, #1
 800813a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	3301      	adds	r3, #1
 8008140:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1f5      	bne.n	8008136 <USBD_GetLen+0x12>
  }

  return len;
 800814a:	7bfb      	ldrb	r3, [r7, #15]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2202      	movs	r2, #2
 8008168:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	2100      	movs	r1, #0
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 fce1 	bl	8008b46 <USBD_LL_Transmit>

  return USBD_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b084      	sub	sp, #16
 8008192:	af00      	add	r7, sp, #0
 8008194:	60f8      	str	r0, [r7, #12]
 8008196:	60b9      	str	r1, [r7, #8]
 8008198:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	2100      	movs	r1, #0
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f000 fcd0 	bl	8008b46 <USBD_LL_Transmit>

  return USBD_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2203      	movs	r2, #3
 80081c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	2100      	movs	r1, #0
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f000 fcd4 	bl	8008b88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	60f8      	str	r0, [r7, #12]
 80081f2:	60b9      	str	r1, [r7, #8]
 80081f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	2100      	movs	r1, #0
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 fcc3 	bl	8008b88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2204      	movs	r2, #4
 8008218:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800821c:	2300      	movs	r3, #0
 800821e:	2200      	movs	r2, #0
 8008220:	2100      	movs	r1, #0
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fc8f 	bl	8008b46 <USBD_LL_Transmit>

  return USBD_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b082      	sub	sp, #8
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2205      	movs	r2, #5
 800823e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008242:	2300      	movs	r3, #0
 8008244:	2200      	movs	r2, #0
 8008246:	2100      	movs	r1, #0
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fc9d 	bl	8008b88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800825c:	2200      	movs	r2, #0
 800825e:	4912      	ldr	r1, [pc, #72]	@ (80082a8 <MX_USB_DEVICE_Init+0x50>)
 8008260:	4812      	ldr	r0, [pc, #72]	@ (80082ac <MX_USB_DEVICE_Init+0x54>)
 8008262:	f7fe fcf7 	bl	8006c54 <USBD_Init>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d001      	beq.n	8008270 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800826c:	f7f9 f928 	bl	80014c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008270:	490f      	ldr	r1, [pc, #60]	@ (80082b0 <MX_USB_DEVICE_Init+0x58>)
 8008272:	480e      	ldr	r0, [pc, #56]	@ (80082ac <MX_USB_DEVICE_Init+0x54>)
 8008274:	f7fe fd1e 	bl	8006cb4 <USBD_RegisterClass>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800827e:	f7f9 f91f 	bl	80014c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008282:	490c      	ldr	r1, [pc, #48]	@ (80082b4 <MX_USB_DEVICE_Init+0x5c>)
 8008284:	4809      	ldr	r0, [pc, #36]	@ (80082ac <MX_USB_DEVICE_Init+0x54>)
 8008286:	f7fe fc15 	bl	8006ab4 <USBD_CDC_RegisterInterface>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008290:	f7f9 f916 	bl	80014c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008294:	4805      	ldr	r0, [pc, #20]	@ (80082ac <MX_USB_DEVICE_Init+0x54>)
 8008296:	f7fe fd43 	bl	8006d20 <USBD_Start>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80082a0:	f7f9 f90e 	bl	80014c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80082a4:	bf00      	nop
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	200000ac 	.word	0x200000ac
 80082ac:	20000340 	.word	0x20000340
 80082b0:	20000018 	.word	0x20000018
 80082b4:	20000098 	.word	0x20000098

080082b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80082bc:	2200      	movs	r2, #0
 80082be:	4905      	ldr	r1, [pc, #20]	@ (80082d4 <CDC_Init_FS+0x1c>)
 80082c0:	4805      	ldr	r0, [pc, #20]	@ (80082d8 <CDC_Init_FS+0x20>)
 80082c2:	f7fe fc11 	bl	8006ae8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80082c6:	4905      	ldr	r1, [pc, #20]	@ (80082dc <CDC_Init_FS+0x24>)
 80082c8:	4803      	ldr	r0, [pc, #12]	@ (80082d8 <CDC_Init_FS+0x20>)
 80082ca:	f7fe fc2f 	bl	8006b2c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80082ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	20000e1c 	.word	0x20000e1c
 80082d8:	20000340 	.word	0x20000340
 80082dc:	2000061c 	.word	0x2000061c

080082e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80082e0:	b480      	push	{r7}
 80082e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80082e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	6039      	str	r1, [r7, #0]
 80082fa:	71fb      	strb	r3, [r7, #7]
 80082fc:	4613      	mov	r3, r2
 80082fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	2b23      	cmp	r3, #35	@ 0x23
 8008304:	d84a      	bhi.n	800839c <CDC_Control_FS+0xac>
 8008306:	a201      	add	r2, pc, #4	@ (adr r2, 800830c <CDC_Control_FS+0x1c>)
 8008308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830c:	0800839d 	.word	0x0800839d
 8008310:	0800839d 	.word	0x0800839d
 8008314:	0800839d 	.word	0x0800839d
 8008318:	0800839d 	.word	0x0800839d
 800831c:	0800839d 	.word	0x0800839d
 8008320:	0800839d 	.word	0x0800839d
 8008324:	0800839d 	.word	0x0800839d
 8008328:	0800839d 	.word	0x0800839d
 800832c:	0800839d 	.word	0x0800839d
 8008330:	0800839d 	.word	0x0800839d
 8008334:	0800839d 	.word	0x0800839d
 8008338:	0800839d 	.word	0x0800839d
 800833c:	0800839d 	.word	0x0800839d
 8008340:	0800839d 	.word	0x0800839d
 8008344:	0800839d 	.word	0x0800839d
 8008348:	0800839d 	.word	0x0800839d
 800834c:	0800839d 	.word	0x0800839d
 8008350:	0800839d 	.word	0x0800839d
 8008354:	0800839d 	.word	0x0800839d
 8008358:	0800839d 	.word	0x0800839d
 800835c:	0800839d 	.word	0x0800839d
 8008360:	0800839d 	.word	0x0800839d
 8008364:	0800839d 	.word	0x0800839d
 8008368:	0800839d 	.word	0x0800839d
 800836c:	0800839d 	.word	0x0800839d
 8008370:	0800839d 	.word	0x0800839d
 8008374:	0800839d 	.word	0x0800839d
 8008378:	0800839d 	.word	0x0800839d
 800837c:	0800839d 	.word	0x0800839d
 8008380:	0800839d 	.word	0x0800839d
 8008384:	0800839d 	.word	0x0800839d
 8008388:	0800839d 	.word	0x0800839d
 800838c:	0800839d 	.word	0x0800839d
 8008390:	0800839d 	.word	0x0800839d
 8008394:	0800839d 	.word	0x0800839d
 8008398:	0800839d 	.word	0x0800839d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800839c:	bf00      	nop
  }

  return (USBD_OK);
 800839e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80083b6:	6879      	ldr	r1, [r7, #4]
 80083b8:	4805      	ldr	r0, [pc, #20]	@ (80083d0 <CDC_Receive_FS+0x24>)
 80083ba:	f7fe fbb7 	bl	8006b2c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80083be:	4804      	ldr	r0, [pc, #16]	@ (80083d0 <CDC_Receive_FS+0x24>)
 80083c0:	f7fe fc12 	bl	8006be8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80083c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	20000340 	.word	0x20000340

080083d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80083e4:	4b0d      	ldr	r3, [pc, #52]	@ (800841c <CDC_Transmit_FS+0x48>)
 80083e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80083ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e00b      	b.n	8008412 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80083fa:	887b      	ldrh	r3, [r7, #2]
 80083fc:	461a      	mov	r2, r3
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	4806      	ldr	r0, [pc, #24]	@ (800841c <CDC_Transmit_FS+0x48>)
 8008402:	f7fe fb71 	bl	8006ae8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008406:	4805      	ldr	r0, [pc, #20]	@ (800841c <CDC_Transmit_FS+0x48>)
 8008408:	f7fe fbae 	bl	8006b68 <USBD_CDC_TransmitPacket>
 800840c:	4603      	mov	r3, r0
 800840e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008410:	7bfb      	ldrb	r3, [r7, #15]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	20000340 	.word	0x20000340

08008420 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008420:	b480      	push	{r7}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	4613      	mov	r3, r2
 800842c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008432:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008436:	4618      	mov	r0, r3
 8008438:	371c      	adds	r7, #28
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
	...

08008444 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	4603      	mov	r3, r0
 800844c:	6039      	str	r1, [r7, #0]
 800844e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	2212      	movs	r2, #18
 8008454:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008456:	4b03      	ldr	r3, [pc, #12]	@ (8008464 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008458:	4618      	mov	r0, r3
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	200000c8 	.word	0x200000c8

08008468 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	4603      	mov	r3, r0
 8008470:	6039      	str	r1, [r7, #0]
 8008472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	2204      	movs	r2, #4
 8008478:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800847a:	4b03      	ldr	r3, [pc, #12]	@ (8008488 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800847c:	4618      	mov	r0, r3
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr
 8008488:	200000dc 	.word	0x200000dc

0800848c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	4603      	mov	r3, r0
 8008494:	6039      	str	r1, [r7, #0]
 8008496:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008498:	79fb      	ldrb	r3, [r7, #7]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d105      	bne.n	80084aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	4907      	ldr	r1, [pc, #28]	@ (80084c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80084a2:	4808      	ldr	r0, [pc, #32]	@ (80084c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80084a4:	f7ff fdec 	bl	8008080 <USBD_GetString>
 80084a8:	e004      	b.n	80084b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	4904      	ldr	r1, [pc, #16]	@ (80084c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80084ae:	4805      	ldr	r0, [pc, #20]	@ (80084c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80084b0:	f7ff fde6 	bl	8008080 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084b4:	4b02      	ldr	r3, [pc, #8]	@ (80084c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	2000161c 	.word	0x2000161c
 80084c4:	0800be7c 	.word	0x0800be7c

080084c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	4603      	mov	r3, r0
 80084d0:	6039      	str	r1, [r7, #0]
 80084d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	4904      	ldr	r1, [pc, #16]	@ (80084e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80084d8:	4804      	ldr	r0, [pc, #16]	@ (80084ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80084da:	f7ff fdd1 	bl	8008080 <USBD_GetString>
  return USBD_StrDesc;
 80084de:	4b02      	ldr	r3, [pc, #8]	@ (80084e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	2000161c 	.word	0x2000161c
 80084ec:	0800be94 	.word	0x0800be94

080084f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	6039      	str	r1, [r7, #0]
 80084fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	221a      	movs	r2, #26
 8008500:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008502:	f000 f843 	bl	800858c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008506:	4b02      	ldr	r3, [pc, #8]	@ (8008510 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008508:	4618      	mov	r0, r3
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	200000e0 	.word	0x200000e0

08008514 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	6039      	str	r1, [r7, #0]
 800851e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008520:	79fb      	ldrb	r3, [r7, #7]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d105      	bne.n	8008532 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	4907      	ldr	r1, [pc, #28]	@ (8008548 <USBD_FS_ConfigStrDescriptor+0x34>)
 800852a:	4808      	ldr	r0, [pc, #32]	@ (800854c <USBD_FS_ConfigStrDescriptor+0x38>)
 800852c:	f7ff fda8 	bl	8008080 <USBD_GetString>
 8008530:	e004      	b.n	800853c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	4904      	ldr	r1, [pc, #16]	@ (8008548 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008536:	4805      	ldr	r0, [pc, #20]	@ (800854c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008538:	f7ff fda2 	bl	8008080 <USBD_GetString>
  }
  return USBD_StrDesc;
 800853c:	4b02      	ldr	r3, [pc, #8]	@ (8008548 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800853e:	4618      	mov	r0, r3
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	2000161c 	.word	0x2000161c
 800854c:	0800bea8 	.word	0x0800bea8

08008550 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	4603      	mov	r3, r0
 8008558:	6039      	str	r1, [r7, #0]
 800855a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800855c:	79fb      	ldrb	r3, [r7, #7]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d105      	bne.n	800856e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	4907      	ldr	r1, [pc, #28]	@ (8008584 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008566:	4808      	ldr	r0, [pc, #32]	@ (8008588 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008568:	f7ff fd8a 	bl	8008080 <USBD_GetString>
 800856c:	e004      	b.n	8008578 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	4904      	ldr	r1, [pc, #16]	@ (8008584 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008572:	4805      	ldr	r0, [pc, #20]	@ (8008588 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008574:	f7ff fd84 	bl	8008080 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008578:	4b02      	ldr	r3, [pc, #8]	@ (8008584 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	2000161c 	.word	0x2000161c
 8008588:	0800beb4 	.word	0x0800beb4

0800858c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008592:	4b0f      	ldr	r3, [pc, #60]	@ (80085d0 <Get_SerialNum+0x44>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008598:	4b0e      	ldr	r3, [pc, #56]	@ (80085d4 <Get_SerialNum+0x48>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800859e:	4b0e      	ldr	r3, [pc, #56]	@ (80085d8 <Get_SerialNum+0x4c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4413      	add	r3, r2
 80085aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d009      	beq.n	80085c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80085b2:	2208      	movs	r2, #8
 80085b4:	4909      	ldr	r1, [pc, #36]	@ (80085dc <Get_SerialNum+0x50>)
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f000 f814 	bl	80085e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80085bc:	2204      	movs	r2, #4
 80085be:	4908      	ldr	r1, [pc, #32]	@ (80085e0 <Get_SerialNum+0x54>)
 80085c0:	68b8      	ldr	r0, [r7, #8]
 80085c2:	f000 f80f 	bl	80085e4 <IntToUnicode>
  }
}
 80085c6:	bf00      	nop
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	1fff7a10 	.word	0x1fff7a10
 80085d4:	1fff7a14 	.word	0x1fff7a14
 80085d8:	1fff7a18 	.word	0x1fff7a18
 80085dc:	200000e2 	.word	0x200000e2
 80085e0:	200000f2 	.word	0x200000f2

080085e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b087      	sub	sp, #28
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	4613      	mov	r3, r2
 80085f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80085f2:	2300      	movs	r3, #0
 80085f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80085f6:	2300      	movs	r3, #0
 80085f8:	75fb      	strb	r3, [r7, #23]
 80085fa:	e027      	b.n	800864c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	0f1b      	lsrs	r3, r3, #28
 8008600:	2b09      	cmp	r3, #9
 8008602:	d80b      	bhi.n	800861c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	0f1b      	lsrs	r3, r3, #28
 8008608:	b2da      	uxtb	r2, r3
 800860a:	7dfb      	ldrb	r3, [r7, #23]
 800860c:	005b      	lsls	r3, r3, #1
 800860e:	4619      	mov	r1, r3
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	440b      	add	r3, r1
 8008614:	3230      	adds	r2, #48	@ 0x30
 8008616:	b2d2      	uxtb	r2, r2
 8008618:	701a      	strb	r2, [r3, #0]
 800861a:	e00a      	b.n	8008632 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	0f1b      	lsrs	r3, r3, #28
 8008620:	b2da      	uxtb	r2, r3
 8008622:	7dfb      	ldrb	r3, [r7, #23]
 8008624:	005b      	lsls	r3, r3, #1
 8008626:	4619      	mov	r1, r3
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	440b      	add	r3, r1
 800862c:	3237      	adds	r2, #55	@ 0x37
 800862e:	b2d2      	uxtb	r2, r2
 8008630:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	011b      	lsls	r3, r3, #4
 8008636:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008638:	7dfb      	ldrb	r3, [r7, #23]
 800863a:	005b      	lsls	r3, r3, #1
 800863c:	3301      	adds	r3, #1
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	4413      	add	r3, r2
 8008642:	2200      	movs	r2, #0
 8008644:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008646:	7dfb      	ldrb	r3, [r7, #23]
 8008648:	3301      	adds	r3, #1
 800864a:	75fb      	strb	r3, [r7, #23]
 800864c:	7dfa      	ldrb	r2, [r7, #23]
 800864e:	79fb      	ldrb	r3, [r7, #7]
 8008650:	429a      	cmp	r2, r3
 8008652:	d3d3      	bcc.n	80085fc <IntToUnicode+0x18>
  }
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop
 8008658:	371c      	adds	r7, #28
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
	...

08008664 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b08a      	sub	sp, #40	@ 0x28
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800866c:	f107 0314 	add.w	r3, r7, #20
 8008670:	2200      	movs	r2, #0
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	605a      	str	r2, [r3, #4]
 8008676:	609a      	str	r2, [r3, #8]
 8008678:	60da      	str	r2, [r3, #12]
 800867a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008684:	d13a      	bne.n	80086fc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008686:	2300      	movs	r3, #0
 8008688:	613b      	str	r3, [r7, #16]
 800868a:	4b1e      	ldr	r3, [pc, #120]	@ (8008704 <HAL_PCD_MspInit+0xa0>)
 800868c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800868e:	4a1d      	ldr	r2, [pc, #116]	@ (8008704 <HAL_PCD_MspInit+0xa0>)
 8008690:	f043 0301 	orr.w	r3, r3, #1
 8008694:	6313      	str	r3, [r2, #48]	@ 0x30
 8008696:	4b1b      	ldr	r3, [pc, #108]	@ (8008704 <HAL_PCD_MspInit+0xa0>)
 8008698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800869a:	f003 0301 	and.w	r3, r3, #1
 800869e:	613b      	str	r3, [r7, #16]
 80086a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80086a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80086a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086a8:	2302      	movs	r3, #2
 80086aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ac:	2300      	movs	r3, #0
 80086ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086b0:	2303      	movs	r3, #3
 80086b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086b4:	230a      	movs	r3, #10
 80086b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086b8:	f107 0314 	add.w	r3, r7, #20
 80086bc:	4619      	mov	r1, r3
 80086be:	4812      	ldr	r0, [pc, #72]	@ (8008708 <HAL_PCD_MspInit+0xa4>)
 80086c0:	f7f9 fa58 	bl	8001b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008704 <HAL_PCD_MspInit+0xa0>)
 80086c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086c8:	4a0e      	ldr	r2, [pc, #56]	@ (8008704 <HAL_PCD_MspInit+0xa0>)
 80086ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086ce:	6353      	str	r3, [r2, #52]	@ 0x34
 80086d0:	2300      	movs	r3, #0
 80086d2:	60fb      	str	r3, [r7, #12]
 80086d4:	4b0b      	ldr	r3, [pc, #44]	@ (8008704 <HAL_PCD_MspInit+0xa0>)
 80086d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086d8:	4a0a      	ldr	r2, [pc, #40]	@ (8008704 <HAL_PCD_MspInit+0xa0>)
 80086da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80086de:	6453      	str	r3, [r2, #68]	@ 0x44
 80086e0:	4b08      	ldr	r3, [pc, #32]	@ (8008704 <HAL_PCD_MspInit+0xa0>)
 80086e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086e8:	60fb      	str	r3, [r7, #12]
 80086ea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80086ec:	2200      	movs	r2, #0
 80086ee:	2100      	movs	r1, #0
 80086f0:	2043      	movs	r0, #67	@ 0x43
 80086f2:	f7f9 fa08 	bl	8001b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80086f6:	2043      	movs	r0, #67	@ 0x43
 80086f8:	f7f9 fa21 	bl	8001b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80086fc:	bf00      	nop
 80086fe:	3728      	adds	r7, #40	@ 0x28
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	40023800 	.word	0x40023800
 8008708:	40020000 	.word	0x40020000

0800870c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008720:	4619      	mov	r1, r3
 8008722:	4610      	mov	r0, r2
 8008724:	f7fe fb49 	bl	8006dba <USBD_LL_SetupStage>
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	460b      	mov	r3, r1
 800873a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008742:	78fa      	ldrb	r2, [r7, #3]
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	4613      	mov	r3, r2
 8008748:	00db      	lsls	r3, r3, #3
 800874a:	4413      	add	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	440b      	add	r3, r1
 8008750:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	78fb      	ldrb	r3, [r7, #3]
 8008758:	4619      	mov	r1, r3
 800875a:	f7fe fb83 	bl	8006e64 <USBD_LL_DataOutStage>
}
 800875e:	bf00      	nop
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b082      	sub	sp, #8
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	460b      	mov	r3, r1
 8008770:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008778:	78fa      	ldrb	r2, [r7, #3]
 800877a:	6879      	ldr	r1, [r7, #4]
 800877c:	4613      	mov	r3, r2
 800877e:	00db      	lsls	r3, r3, #3
 8008780:	4413      	add	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	440b      	add	r3, r1
 8008786:	3320      	adds	r3, #32
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	78fb      	ldrb	r3, [r7, #3]
 800878c:	4619      	mov	r1, r3
 800878e:	f7fe fc1c 	bl	8006fca <USBD_LL_DataInStage>
}
 8008792:	bf00      	nop
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fe fd56 	bl	800725a <USBD_LL_SOF>
}
 80087ae:	bf00      	nop
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b084      	sub	sp, #16
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80087be:	2301      	movs	r3, #1
 80087c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	79db      	ldrb	r3, [r3, #7]
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d001      	beq.n	80087ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80087ca:	f7f8 fe79 	bl	80014c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087d4:	7bfa      	ldrb	r2, [r7, #15]
 80087d6:	4611      	mov	r1, r2
 80087d8:	4618      	mov	r0, r3
 80087da:	f7fe fcfa 	bl	80071d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7fe fca2 	bl	800712e <USBD_LL_Reset>
}
 80087ea:	bf00      	nop
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
	...

080087f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008802:	4618      	mov	r0, r3
 8008804:	f7fe fcf5 	bl	80071f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	6812      	ldr	r2, [r2, #0]
 8008816:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800881a:	f043 0301 	orr.w	r3, r3, #1
 800881e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	7adb      	ldrb	r3, [r3, #11]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d005      	beq.n	8008834 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008828:	4b04      	ldr	r3, [pc, #16]	@ (800883c <HAL_PCD_SuspendCallback+0x48>)
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	4a03      	ldr	r2, [pc, #12]	@ (800883c <HAL_PCD_SuspendCallback+0x48>)
 800882e:	f043 0306 	orr.w	r3, r3, #6
 8008832:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008834:	bf00      	nop
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	e000ed00 	.word	0xe000ed00

08008840 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe fceb 	bl	800722a <USBD_LL_Resume>
}
 8008854:	bf00      	nop
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800886e:	78fa      	ldrb	r2, [r7, #3]
 8008870:	4611      	mov	r1, r2
 8008872:	4618      	mov	r0, r3
 8008874:	f7fe fd43 	bl	80072fe <USBD_LL_IsoOUTIncomplete>
}
 8008878:	bf00      	nop
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	460b      	mov	r3, r1
 800888a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008892:	78fa      	ldrb	r2, [r7, #3]
 8008894:	4611      	mov	r1, r2
 8008896:	4618      	mov	r0, r3
 8008898:	f7fe fcff 	bl	800729a <USBD_LL_IsoINIncomplete>
}
 800889c:	bf00      	nop
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe fd55 	bl	8007362 <USBD_LL_DevConnected>
}
 80088b8:	bf00      	nop
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe fd52 	bl	8007378 <USBD_LL_DevDisconnected>
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d13c      	bne.n	8008966 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80088ec:	4a20      	ldr	r2, [pc, #128]	@ (8008970 <USBD_LL_Init+0x94>)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008970 <USBD_LL_Init+0x94>)
 80088f8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80088fc:	4b1c      	ldr	r3, [pc, #112]	@ (8008970 <USBD_LL_Init+0x94>)
 80088fe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008902:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008904:	4b1a      	ldr	r3, [pc, #104]	@ (8008970 <USBD_LL_Init+0x94>)
 8008906:	2204      	movs	r2, #4
 8008908:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800890a:	4b19      	ldr	r3, [pc, #100]	@ (8008970 <USBD_LL_Init+0x94>)
 800890c:	2202      	movs	r2, #2
 800890e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008910:	4b17      	ldr	r3, [pc, #92]	@ (8008970 <USBD_LL_Init+0x94>)
 8008912:	2200      	movs	r2, #0
 8008914:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008916:	4b16      	ldr	r3, [pc, #88]	@ (8008970 <USBD_LL_Init+0x94>)
 8008918:	2202      	movs	r2, #2
 800891a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800891c:	4b14      	ldr	r3, [pc, #80]	@ (8008970 <USBD_LL_Init+0x94>)
 800891e:	2200      	movs	r2, #0
 8008920:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008922:	4b13      	ldr	r3, [pc, #76]	@ (8008970 <USBD_LL_Init+0x94>)
 8008924:	2200      	movs	r2, #0
 8008926:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008928:	4b11      	ldr	r3, [pc, #68]	@ (8008970 <USBD_LL_Init+0x94>)
 800892a:	2200      	movs	r2, #0
 800892c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800892e:	4b10      	ldr	r3, [pc, #64]	@ (8008970 <USBD_LL_Init+0x94>)
 8008930:	2200      	movs	r2, #0
 8008932:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008934:	4b0e      	ldr	r3, [pc, #56]	@ (8008970 <USBD_LL_Init+0x94>)
 8008936:	2200      	movs	r2, #0
 8008938:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800893a:	480d      	ldr	r0, [pc, #52]	@ (8008970 <USBD_LL_Init+0x94>)
 800893c:	f7fa fadc 	bl	8002ef8 <HAL_PCD_Init>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008946:	f7f8 fdbb 	bl	80014c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800894a:	2180      	movs	r1, #128	@ 0x80
 800894c:	4808      	ldr	r0, [pc, #32]	@ (8008970 <USBD_LL_Init+0x94>)
 800894e:	f7fb fd08 	bl	8004362 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008952:	2240      	movs	r2, #64	@ 0x40
 8008954:	2100      	movs	r1, #0
 8008956:	4806      	ldr	r0, [pc, #24]	@ (8008970 <USBD_LL_Init+0x94>)
 8008958:	f7fb fcbc 	bl	80042d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800895c:	2280      	movs	r2, #128	@ 0x80
 800895e:	2101      	movs	r1, #1
 8008960:	4803      	ldr	r0, [pc, #12]	@ (8008970 <USBD_LL_Init+0x94>)
 8008962:	f7fb fcb7 	bl	80042d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	2000181c 	.word	0x2000181c

08008974 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800897c:	2300      	movs	r3, #0
 800897e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800898a:	4618      	mov	r0, r3
 800898c:	f7fa fbc3 	bl	8003116 <HAL_PCD_Start>
 8008990:	4603      	mov	r3, r0
 8008992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	4618      	mov	r0, r3
 8008998:	f000 f942 	bl	8008c20 <USBD_Get_USB_Status>
 800899c:	4603      	mov	r3, r0
 800899e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	4608      	mov	r0, r1
 80089b4:	4611      	mov	r1, r2
 80089b6:	461a      	mov	r2, r3
 80089b8:	4603      	mov	r3, r0
 80089ba:	70fb      	strb	r3, [r7, #3]
 80089bc:	460b      	mov	r3, r1
 80089be:	70bb      	strb	r3, [r7, #2]
 80089c0:	4613      	mov	r3, r2
 80089c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80089d2:	78bb      	ldrb	r3, [r7, #2]
 80089d4:	883a      	ldrh	r2, [r7, #0]
 80089d6:	78f9      	ldrb	r1, [r7, #3]
 80089d8:	f7fb f897 	bl	8003b0a <HAL_PCD_EP_Open>
 80089dc:	4603      	mov	r3, r0
 80089de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 f91c 	bl	8008c20 <USBD_Get_USB_Status>
 80089e8:	4603      	mov	r3, r0
 80089ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b084      	sub	sp, #16
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	460b      	mov	r3, r1
 8008a00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a10:	78fa      	ldrb	r2, [r7, #3]
 8008a12:	4611      	mov	r1, r2
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7fb f8e2 	bl	8003bde <HAL_PCD_EP_Close>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a1e:	7bfb      	ldrb	r3, [r7, #15]
 8008a20:	4618      	mov	r0, r3
 8008a22:	f000 f8fd 	bl	8008c20 <USBD_Get_USB_Status>
 8008a26:	4603      	mov	r3, r0
 8008a28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a4e:	78fa      	ldrb	r2, [r7, #3]
 8008a50:	4611      	mov	r1, r2
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fb f99a 	bl	8003d8c <HAL_PCD_EP_SetStall>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 f8de 	bl	8008c20 <USBD_Get_USB_Status>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b084      	sub	sp, #16
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a8c:	78fa      	ldrb	r2, [r7, #3]
 8008a8e:	4611      	mov	r1, r2
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fb f9de 	bl	8003e52 <HAL_PCD_EP_ClrStall>
 8008a96:	4603      	mov	r3, r0
 8008a98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 f8bf 	bl	8008c20 <USBD_Get_USB_Status>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ac2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ac4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	da0b      	bge.n	8008ae4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008acc:	78fb      	ldrb	r3, [r7, #3]
 8008ace:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ad2:	68f9      	ldr	r1, [r7, #12]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	00db      	lsls	r3, r3, #3
 8008ad8:	4413      	add	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	440b      	add	r3, r1
 8008ade:	3316      	adds	r3, #22
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	e00b      	b.n	8008afc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008aea:	68f9      	ldr	r1, [r7, #12]
 8008aec:	4613      	mov	r3, r2
 8008aee:	00db      	lsls	r3, r3, #3
 8008af0:	4413      	add	r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	440b      	add	r3, r1
 8008af6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008afa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	460b      	mov	r3, r1
 8008b12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b22:	78fa      	ldrb	r2, [r7, #3]
 8008b24:	4611      	mov	r1, r2
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fa ffcb 	bl	8003ac2 <HAL_PCD_SetAddress>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 f874 	bl	8008c20 <USBD_Get_USB_Status>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b086      	sub	sp, #24
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	60f8      	str	r0, [r7, #12]
 8008b4e:	607a      	str	r2, [r7, #4]
 8008b50:	603b      	str	r3, [r7, #0]
 8008b52:	460b      	mov	r3, r1
 8008b54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008b64:	7af9      	ldrb	r1, [r7, #11]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	f7fb f8d5 	bl	8003d18 <HAL_PCD_EP_Transmit>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b72:	7dfb      	ldrb	r3, [r7, #23]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 f853 	bl	8008c20 <USBD_Get_USB_Status>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3718      	adds	r7, #24
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	607a      	str	r2, [r7, #4]
 8008b92:	603b      	str	r3, [r7, #0]
 8008b94:	460b      	mov	r3, r1
 8008b96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008ba6:	7af9      	ldrb	r1, [r7, #11]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	f7fb f861 	bl	8003c72 <HAL_PCD_EP_Receive>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bb4:	7dfb      	ldrb	r3, [r7, #23]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 f832 	bl	8008c20 <USBD_Get_USB_Status>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bc0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3718      	adds	r7, #24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008bdc:	78fa      	ldrb	r2, [r7, #3]
 8008bde:	4611      	mov	r1, r2
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7fb f881 	bl	8003ce8 <HAL_PCD_EP_GetRxCount>
 8008be6:	4603      	mov	r3, r0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008bf8:	4b03      	ldr	r3, [pc, #12]	@ (8008c08 <USBD_static_malloc+0x18>)
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	20001d00 	.word	0x20001d00

08008c0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]

}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	4603      	mov	r3, r0
 8008c28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c2e:	79fb      	ldrb	r3, [r7, #7]
 8008c30:	2b03      	cmp	r3, #3
 8008c32:	d817      	bhi.n	8008c64 <USBD_Get_USB_Status+0x44>
 8008c34:	a201      	add	r2, pc, #4	@ (adr r2, 8008c3c <USBD_Get_USB_Status+0x1c>)
 8008c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3a:	bf00      	nop
 8008c3c:	08008c4d 	.word	0x08008c4d
 8008c40:	08008c53 	.word	0x08008c53
 8008c44:	08008c59 	.word	0x08008c59
 8008c48:	08008c5f 	.word	0x08008c5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c50:	e00b      	b.n	8008c6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c52:	2303      	movs	r3, #3
 8008c54:	73fb      	strb	r3, [r7, #15]
    break;
 8008c56:	e008      	b.n	8008c6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c5c:	e005      	b.n	8008c6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	73fb      	strb	r3, [r7, #15]
    break;
 8008c62:	e002      	b.n	8008c6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c64:	2303      	movs	r3, #3
 8008c66:	73fb      	strb	r3, [r7, #15]
    break;
 8008c68:	bf00      	nop
  }
  return usb_status;
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3714      	adds	r7, #20
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <__cvt>:
 8008c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c7c:	ec57 6b10 	vmov	r6, r7, d0
 8008c80:	2f00      	cmp	r7, #0
 8008c82:	460c      	mov	r4, r1
 8008c84:	4619      	mov	r1, r3
 8008c86:	463b      	mov	r3, r7
 8008c88:	bfbb      	ittet	lt
 8008c8a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008c8e:	461f      	movlt	r7, r3
 8008c90:	2300      	movge	r3, #0
 8008c92:	232d      	movlt	r3, #45	@ 0x2d
 8008c94:	700b      	strb	r3, [r1, #0]
 8008c96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c98:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008c9c:	4691      	mov	r9, r2
 8008c9e:	f023 0820 	bic.w	r8, r3, #32
 8008ca2:	bfbc      	itt	lt
 8008ca4:	4632      	movlt	r2, r6
 8008ca6:	4616      	movlt	r6, r2
 8008ca8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008cac:	d005      	beq.n	8008cba <__cvt+0x42>
 8008cae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008cb2:	d100      	bne.n	8008cb6 <__cvt+0x3e>
 8008cb4:	3401      	adds	r4, #1
 8008cb6:	2102      	movs	r1, #2
 8008cb8:	e000      	b.n	8008cbc <__cvt+0x44>
 8008cba:	2103      	movs	r1, #3
 8008cbc:	ab03      	add	r3, sp, #12
 8008cbe:	9301      	str	r3, [sp, #4]
 8008cc0:	ab02      	add	r3, sp, #8
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	ec47 6b10 	vmov	d0, r6, r7
 8008cc8:	4653      	mov	r3, sl
 8008cca:	4622      	mov	r2, r4
 8008ccc:	f000 fe70 	bl	80099b0 <_dtoa_r>
 8008cd0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008cd4:	4605      	mov	r5, r0
 8008cd6:	d119      	bne.n	8008d0c <__cvt+0x94>
 8008cd8:	f019 0f01 	tst.w	r9, #1
 8008cdc:	d00e      	beq.n	8008cfc <__cvt+0x84>
 8008cde:	eb00 0904 	add.w	r9, r0, r4
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	4639      	mov	r1, r7
 8008cea:	f7f7 fef5 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cee:	b108      	cbz	r0, 8008cf4 <__cvt+0x7c>
 8008cf0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008cf4:	2230      	movs	r2, #48	@ 0x30
 8008cf6:	9b03      	ldr	r3, [sp, #12]
 8008cf8:	454b      	cmp	r3, r9
 8008cfa:	d31e      	bcc.n	8008d3a <__cvt+0xc2>
 8008cfc:	9b03      	ldr	r3, [sp, #12]
 8008cfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d00:	1b5b      	subs	r3, r3, r5
 8008d02:	4628      	mov	r0, r5
 8008d04:	6013      	str	r3, [r2, #0]
 8008d06:	b004      	add	sp, #16
 8008d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008d10:	eb00 0904 	add.w	r9, r0, r4
 8008d14:	d1e5      	bne.n	8008ce2 <__cvt+0x6a>
 8008d16:	7803      	ldrb	r3, [r0, #0]
 8008d18:	2b30      	cmp	r3, #48	@ 0x30
 8008d1a:	d10a      	bne.n	8008d32 <__cvt+0xba>
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	2300      	movs	r3, #0
 8008d20:	4630      	mov	r0, r6
 8008d22:	4639      	mov	r1, r7
 8008d24:	f7f7 fed8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d28:	b918      	cbnz	r0, 8008d32 <__cvt+0xba>
 8008d2a:	f1c4 0401 	rsb	r4, r4, #1
 8008d2e:	f8ca 4000 	str.w	r4, [sl]
 8008d32:	f8da 3000 	ldr.w	r3, [sl]
 8008d36:	4499      	add	r9, r3
 8008d38:	e7d3      	b.n	8008ce2 <__cvt+0x6a>
 8008d3a:	1c59      	adds	r1, r3, #1
 8008d3c:	9103      	str	r1, [sp, #12]
 8008d3e:	701a      	strb	r2, [r3, #0]
 8008d40:	e7d9      	b.n	8008cf6 <__cvt+0x7e>

08008d42 <__exponent>:
 8008d42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d44:	2900      	cmp	r1, #0
 8008d46:	bfba      	itte	lt
 8008d48:	4249      	neglt	r1, r1
 8008d4a:	232d      	movlt	r3, #45	@ 0x2d
 8008d4c:	232b      	movge	r3, #43	@ 0x2b
 8008d4e:	2909      	cmp	r1, #9
 8008d50:	7002      	strb	r2, [r0, #0]
 8008d52:	7043      	strb	r3, [r0, #1]
 8008d54:	dd29      	ble.n	8008daa <__exponent+0x68>
 8008d56:	f10d 0307 	add.w	r3, sp, #7
 8008d5a:	461d      	mov	r5, r3
 8008d5c:	270a      	movs	r7, #10
 8008d5e:	461a      	mov	r2, r3
 8008d60:	fbb1 f6f7 	udiv	r6, r1, r7
 8008d64:	fb07 1416 	mls	r4, r7, r6, r1
 8008d68:	3430      	adds	r4, #48	@ 0x30
 8008d6a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008d6e:	460c      	mov	r4, r1
 8008d70:	2c63      	cmp	r4, #99	@ 0x63
 8008d72:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d76:	4631      	mov	r1, r6
 8008d78:	dcf1      	bgt.n	8008d5e <__exponent+0x1c>
 8008d7a:	3130      	adds	r1, #48	@ 0x30
 8008d7c:	1e94      	subs	r4, r2, #2
 8008d7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008d82:	1c41      	adds	r1, r0, #1
 8008d84:	4623      	mov	r3, r4
 8008d86:	42ab      	cmp	r3, r5
 8008d88:	d30a      	bcc.n	8008da0 <__exponent+0x5e>
 8008d8a:	f10d 0309 	add.w	r3, sp, #9
 8008d8e:	1a9b      	subs	r3, r3, r2
 8008d90:	42ac      	cmp	r4, r5
 8008d92:	bf88      	it	hi
 8008d94:	2300      	movhi	r3, #0
 8008d96:	3302      	adds	r3, #2
 8008d98:	4403      	add	r3, r0
 8008d9a:	1a18      	subs	r0, r3, r0
 8008d9c:	b003      	add	sp, #12
 8008d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008da0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008da4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008da8:	e7ed      	b.n	8008d86 <__exponent+0x44>
 8008daa:	2330      	movs	r3, #48	@ 0x30
 8008dac:	3130      	adds	r1, #48	@ 0x30
 8008dae:	7083      	strb	r3, [r0, #2]
 8008db0:	70c1      	strb	r1, [r0, #3]
 8008db2:	1d03      	adds	r3, r0, #4
 8008db4:	e7f1      	b.n	8008d9a <__exponent+0x58>
	...

08008db8 <_printf_float>:
 8008db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dbc:	b08d      	sub	sp, #52	@ 0x34
 8008dbe:	460c      	mov	r4, r1
 8008dc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008dc4:	4616      	mov	r6, r2
 8008dc6:	461f      	mov	r7, r3
 8008dc8:	4605      	mov	r5, r0
 8008dca:	f000 fcef 	bl	80097ac <_localeconv_r>
 8008dce:	6803      	ldr	r3, [r0, #0]
 8008dd0:	9304      	str	r3, [sp, #16]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7f7 fa54 	bl	8000280 <strlen>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ddc:	f8d8 3000 	ldr.w	r3, [r8]
 8008de0:	9005      	str	r0, [sp, #20]
 8008de2:	3307      	adds	r3, #7
 8008de4:	f023 0307 	bic.w	r3, r3, #7
 8008de8:	f103 0208 	add.w	r2, r3, #8
 8008dec:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008df0:	f8d4 b000 	ldr.w	fp, [r4]
 8008df4:	f8c8 2000 	str.w	r2, [r8]
 8008df8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008dfc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008e00:	9307      	str	r3, [sp, #28]
 8008e02:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e06:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008e0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e0e:	4b9c      	ldr	r3, [pc, #624]	@ (8009080 <_printf_float+0x2c8>)
 8008e10:	f04f 32ff 	mov.w	r2, #4294967295
 8008e14:	f7f7 fe92 	bl	8000b3c <__aeabi_dcmpun>
 8008e18:	bb70      	cbnz	r0, 8008e78 <_printf_float+0xc0>
 8008e1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e1e:	4b98      	ldr	r3, [pc, #608]	@ (8009080 <_printf_float+0x2c8>)
 8008e20:	f04f 32ff 	mov.w	r2, #4294967295
 8008e24:	f7f7 fe6c 	bl	8000b00 <__aeabi_dcmple>
 8008e28:	bb30      	cbnz	r0, 8008e78 <_printf_float+0xc0>
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	4640      	mov	r0, r8
 8008e30:	4649      	mov	r1, r9
 8008e32:	f7f7 fe5b 	bl	8000aec <__aeabi_dcmplt>
 8008e36:	b110      	cbz	r0, 8008e3e <_printf_float+0x86>
 8008e38:	232d      	movs	r3, #45	@ 0x2d
 8008e3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e3e:	4a91      	ldr	r2, [pc, #580]	@ (8009084 <_printf_float+0x2cc>)
 8008e40:	4b91      	ldr	r3, [pc, #580]	@ (8009088 <_printf_float+0x2d0>)
 8008e42:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008e46:	bf94      	ite	ls
 8008e48:	4690      	movls	r8, r2
 8008e4a:	4698      	movhi	r8, r3
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	6123      	str	r3, [r4, #16]
 8008e50:	f02b 0304 	bic.w	r3, fp, #4
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	f04f 0900 	mov.w	r9, #0
 8008e5a:	9700      	str	r7, [sp, #0]
 8008e5c:	4633      	mov	r3, r6
 8008e5e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008e60:	4621      	mov	r1, r4
 8008e62:	4628      	mov	r0, r5
 8008e64:	f000 f9d2 	bl	800920c <_printf_common>
 8008e68:	3001      	adds	r0, #1
 8008e6a:	f040 808d 	bne.w	8008f88 <_printf_float+0x1d0>
 8008e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e72:	b00d      	add	sp, #52	@ 0x34
 8008e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e78:	4642      	mov	r2, r8
 8008e7a:	464b      	mov	r3, r9
 8008e7c:	4640      	mov	r0, r8
 8008e7e:	4649      	mov	r1, r9
 8008e80:	f7f7 fe5c 	bl	8000b3c <__aeabi_dcmpun>
 8008e84:	b140      	cbz	r0, 8008e98 <_printf_float+0xe0>
 8008e86:	464b      	mov	r3, r9
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	bfbc      	itt	lt
 8008e8c:	232d      	movlt	r3, #45	@ 0x2d
 8008e8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008e92:	4a7e      	ldr	r2, [pc, #504]	@ (800908c <_printf_float+0x2d4>)
 8008e94:	4b7e      	ldr	r3, [pc, #504]	@ (8009090 <_printf_float+0x2d8>)
 8008e96:	e7d4      	b.n	8008e42 <_printf_float+0x8a>
 8008e98:	6863      	ldr	r3, [r4, #4]
 8008e9a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008e9e:	9206      	str	r2, [sp, #24]
 8008ea0:	1c5a      	adds	r2, r3, #1
 8008ea2:	d13b      	bne.n	8008f1c <_printf_float+0x164>
 8008ea4:	2306      	movs	r3, #6
 8008ea6:	6063      	str	r3, [r4, #4]
 8008ea8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008eac:	2300      	movs	r3, #0
 8008eae:	6022      	str	r2, [r4, #0]
 8008eb0:	9303      	str	r3, [sp, #12]
 8008eb2:	ab0a      	add	r3, sp, #40	@ 0x28
 8008eb4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008eb8:	ab09      	add	r3, sp, #36	@ 0x24
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	6861      	ldr	r1, [r4, #4]
 8008ebe:	ec49 8b10 	vmov	d0, r8, r9
 8008ec2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	f7ff fed6 	bl	8008c78 <__cvt>
 8008ecc:	9b06      	ldr	r3, [sp, #24]
 8008ece:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ed0:	2b47      	cmp	r3, #71	@ 0x47
 8008ed2:	4680      	mov	r8, r0
 8008ed4:	d129      	bne.n	8008f2a <_printf_float+0x172>
 8008ed6:	1cc8      	adds	r0, r1, #3
 8008ed8:	db02      	blt.n	8008ee0 <_printf_float+0x128>
 8008eda:	6863      	ldr	r3, [r4, #4]
 8008edc:	4299      	cmp	r1, r3
 8008ede:	dd41      	ble.n	8008f64 <_printf_float+0x1ac>
 8008ee0:	f1aa 0a02 	sub.w	sl, sl, #2
 8008ee4:	fa5f fa8a 	uxtb.w	sl, sl
 8008ee8:	3901      	subs	r1, #1
 8008eea:	4652      	mov	r2, sl
 8008eec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ef0:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ef2:	f7ff ff26 	bl	8008d42 <__exponent>
 8008ef6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ef8:	1813      	adds	r3, r2, r0
 8008efa:	2a01      	cmp	r2, #1
 8008efc:	4681      	mov	r9, r0
 8008efe:	6123      	str	r3, [r4, #16]
 8008f00:	dc02      	bgt.n	8008f08 <_printf_float+0x150>
 8008f02:	6822      	ldr	r2, [r4, #0]
 8008f04:	07d2      	lsls	r2, r2, #31
 8008f06:	d501      	bpl.n	8008f0c <_printf_float+0x154>
 8008f08:	3301      	adds	r3, #1
 8008f0a:	6123      	str	r3, [r4, #16]
 8008f0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d0a2      	beq.n	8008e5a <_printf_float+0xa2>
 8008f14:	232d      	movs	r3, #45	@ 0x2d
 8008f16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f1a:	e79e      	b.n	8008e5a <_printf_float+0xa2>
 8008f1c:	9a06      	ldr	r2, [sp, #24]
 8008f1e:	2a47      	cmp	r2, #71	@ 0x47
 8008f20:	d1c2      	bne.n	8008ea8 <_printf_float+0xf0>
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1c0      	bne.n	8008ea8 <_printf_float+0xf0>
 8008f26:	2301      	movs	r3, #1
 8008f28:	e7bd      	b.n	8008ea6 <_printf_float+0xee>
 8008f2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f2e:	d9db      	bls.n	8008ee8 <_printf_float+0x130>
 8008f30:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008f34:	d118      	bne.n	8008f68 <_printf_float+0x1b0>
 8008f36:	2900      	cmp	r1, #0
 8008f38:	6863      	ldr	r3, [r4, #4]
 8008f3a:	dd0b      	ble.n	8008f54 <_printf_float+0x19c>
 8008f3c:	6121      	str	r1, [r4, #16]
 8008f3e:	b913      	cbnz	r3, 8008f46 <_printf_float+0x18e>
 8008f40:	6822      	ldr	r2, [r4, #0]
 8008f42:	07d0      	lsls	r0, r2, #31
 8008f44:	d502      	bpl.n	8008f4c <_printf_float+0x194>
 8008f46:	3301      	adds	r3, #1
 8008f48:	440b      	add	r3, r1
 8008f4a:	6123      	str	r3, [r4, #16]
 8008f4c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008f4e:	f04f 0900 	mov.w	r9, #0
 8008f52:	e7db      	b.n	8008f0c <_printf_float+0x154>
 8008f54:	b913      	cbnz	r3, 8008f5c <_printf_float+0x1a4>
 8008f56:	6822      	ldr	r2, [r4, #0]
 8008f58:	07d2      	lsls	r2, r2, #31
 8008f5a:	d501      	bpl.n	8008f60 <_printf_float+0x1a8>
 8008f5c:	3302      	adds	r3, #2
 8008f5e:	e7f4      	b.n	8008f4a <_printf_float+0x192>
 8008f60:	2301      	movs	r3, #1
 8008f62:	e7f2      	b.n	8008f4a <_printf_float+0x192>
 8008f64:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008f68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f6a:	4299      	cmp	r1, r3
 8008f6c:	db05      	blt.n	8008f7a <_printf_float+0x1c2>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	6121      	str	r1, [r4, #16]
 8008f72:	07d8      	lsls	r0, r3, #31
 8008f74:	d5ea      	bpl.n	8008f4c <_printf_float+0x194>
 8008f76:	1c4b      	adds	r3, r1, #1
 8008f78:	e7e7      	b.n	8008f4a <_printf_float+0x192>
 8008f7a:	2900      	cmp	r1, #0
 8008f7c:	bfd4      	ite	le
 8008f7e:	f1c1 0202 	rsble	r2, r1, #2
 8008f82:	2201      	movgt	r2, #1
 8008f84:	4413      	add	r3, r2
 8008f86:	e7e0      	b.n	8008f4a <_printf_float+0x192>
 8008f88:	6823      	ldr	r3, [r4, #0]
 8008f8a:	055a      	lsls	r2, r3, #21
 8008f8c:	d407      	bmi.n	8008f9e <_printf_float+0x1e6>
 8008f8e:	6923      	ldr	r3, [r4, #16]
 8008f90:	4642      	mov	r2, r8
 8008f92:	4631      	mov	r1, r6
 8008f94:	4628      	mov	r0, r5
 8008f96:	47b8      	blx	r7
 8008f98:	3001      	adds	r0, #1
 8008f9a:	d12b      	bne.n	8008ff4 <_printf_float+0x23c>
 8008f9c:	e767      	b.n	8008e6e <_printf_float+0xb6>
 8008f9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008fa2:	f240 80dd 	bls.w	8009160 <_printf_float+0x3a8>
 8008fa6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008faa:	2200      	movs	r2, #0
 8008fac:	2300      	movs	r3, #0
 8008fae:	f7f7 fd93 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d033      	beq.n	800901e <_printf_float+0x266>
 8008fb6:	4a37      	ldr	r2, [pc, #220]	@ (8009094 <_printf_float+0x2dc>)
 8008fb8:	2301      	movs	r3, #1
 8008fba:	4631      	mov	r1, r6
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	47b8      	blx	r7
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	f43f af54 	beq.w	8008e6e <_printf_float+0xb6>
 8008fc6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008fca:	4543      	cmp	r3, r8
 8008fcc:	db02      	blt.n	8008fd4 <_printf_float+0x21c>
 8008fce:	6823      	ldr	r3, [r4, #0]
 8008fd0:	07d8      	lsls	r0, r3, #31
 8008fd2:	d50f      	bpl.n	8008ff4 <_printf_float+0x23c>
 8008fd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fd8:	4631      	mov	r1, r6
 8008fda:	4628      	mov	r0, r5
 8008fdc:	47b8      	blx	r7
 8008fde:	3001      	adds	r0, #1
 8008fe0:	f43f af45 	beq.w	8008e6e <_printf_float+0xb6>
 8008fe4:	f04f 0900 	mov.w	r9, #0
 8008fe8:	f108 38ff 	add.w	r8, r8, #4294967295
 8008fec:	f104 0a1a 	add.w	sl, r4, #26
 8008ff0:	45c8      	cmp	r8, r9
 8008ff2:	dc09      	bgt.n	8009008 <_printf_float+0x250>
 8008ff4:	6823      	ldr	r3, [r4, #0]
 8008ff6:	079b      	lsls	r3, r3, #30
 8008ff8:	f100 8103 	bmi.w	8009202 <_printf_float+0x44a>
 8008ffc:	68e0      	ldr	r0, [r4, #12]
 8008ffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009000:	4298      	cmp	r0, r3
 8009002:	bfb8      	it	lt
 8009004:	4618      	movlt	r0, r3
 8009006:	e734      	b.n	8008e72 <_printf_float+0xba>
 8009008:	2301      	movs	r3, #1
 800900a:	4652      	mov	r2, sl
 800900c:	4631      	mov	r1, r6
 800900e:	4628      	mov	r0, r5
 8009010:	47b8      	blx	r7
 8009012:	3001      	adds	r0, #1
 8009014:	f43f af2b 	beq.w	8008e6e <_printf_float+0xb6>
 8009018:	f109 0901 	add.w	r9, r9, #1
 800901c:	e7e8      	b.n	8008ff0 <_printf_float+0x238>
 800901e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009020:	2b00      	cmp	r3, #0
 8009022:	dc39      	bgt.n	8009098 <_printf_float+0x2e0>
 8009024:	4a1b      	ldr	r2, [pc, #108]	@ (8009094 <_printf_float+0x2dc>)
 8009026:	2301      	movs	r3, #1
 8009028:	4631      	mov	r1, r6
 800902a:	4628      	mov	r0, r5
 800902c:	47b8      	blx	r7
 800902e:	3001      	adds	r0, #1
 8009030:	f43f af1d 	beq.w	8008e6e <_printf_float+0xb6>
 8009034:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009038:	ea59 0303 	orrs.w	r3, r9, r3
 800903c:	d102      	bne.n	8009044 <_printf_float+0x28c>
 800903e:	6823      	ldr	r3, [r4, #0]
 8009040:	07d9      	lsls	r1, r3, #31
 8009042:	d5d7      	bpl.n	8008ff4 <_printf_float+0x23c>
 8009044:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009048:	4631      	mov	r1, r6
 800904a:	4628      	mov	r0, r5
 800904c:	47b8      	blx	r7
 800904e:	3001      	adds	r0, #1
 8009050:	f43f af0d 	beq.w	8008e6e <_printf_float+0xb6>
 8009054:	f04f 0a00 	mov.w	sl, #0
 8009058:	f104 0b1a 	add.w	fp, r4, #26
 800905c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800905e:	425b      	negs	r3, r3
 8009060:	4553      	cmp	r3, sl
 8009062:	dc01      	bgt.n	8009068 <_printf_float+0x2b0>
 8009064:	464b      	mov	r3, r9
 8009066:	e793      	b.n	8008f90 <_printf_float+0x1d8>
 8009068:	2301      	movs	r3, #1
 800906a:	465a      	mov	r2, fp
 800906c:	4631      	mov	r1, r6
 800906e:	4628      	mov	r0, r5
 8009070:	47b8      	blx	r7
 8009072:	3001      	adds	r0, #1
 8009074:	f43f aefb 	beq.w	8008e6e <_printf_float+0xb6>
 8009078:	f10a 0a01 	add.w	sl, sl, #1
 800907c:	e7ee      	b.n	800905c <_printf_float+0x2a4>
 800907e:	bf00      	nop
 8009080:	7fefffff 	.word	0x7fefffff
 8009084:	0800bedc 	.word	0x0800bedc
 8009088:	0800bee0 	.word	0x0800bee0
 800908c:	0800bee4 	.word	0x0800bee4
 8009090:	0800bee8 	.word	0x0800bee8
 8009094:	0800beec 	.word	0x0800beec
 8009098:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800909a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800909e:	4553      	cmp	r3, sl
 80090a0:	bfa8      	it	ge
 80090a2:	4653      	movge	r3, sl
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	4699      	mov	r9, r3
 80090a8:	dc36      	bgt.n	8009118 <_printf_float+0x360>
 80090aa:	f04f 0b00 	mov.w	fp, #0
 80090ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090b2:	f104 021a 	add.w	r2, r4, #26
 80090b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80090b8:	9306      	str	r3, [sp, #24]
 80090ba:	eba3 0309 	sub.w	r3, r3, r9
 80090be:	455b      	cmp	r3, fp
 80090c0:	dc31      	bgt.n	8009126 <_printf_float+0x36e>
 80090c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090c4:	459a      	cmp	sl, r3
 80090c6:	dc3a      	bgt.n	800913e <_printf_float+0x386>
 80090c8:	6823      	ldr	r3, [r4, #0]
 80090ca:	07da      	lsls	r2, r3, #31
 80090cc:	d437      	bmi.n	800913e <_printf_float+0x386>
 80090ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090d0:	ebaa 0903 	sub.w	r9, sl, r3
 80090d4:	9b06      	ldr	r3, [sp, #24]
 80090d6:	ebaa 0303 	sub.w	r3, sl, r3
 80090da:	4599      	cmp	r9, r3
 80090dc:	bfa8      	it	ge
 80090de:	4699      	movge	r9, r3
 80090e0:	f1b9 0f00 	cmp.w	r9, #0
 80090e4:	dc33      	bgt.n	800914e <_printf_float+0x396>
 80090e6:	f04f 0800 	mov.w	r8, #0
 80090ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090ee:	f104 0b1a 	add.w	fp, r4, #26
 80090f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090f4:	ebaa 0303 	sub.w	r3, sl, r3
 80090f8:	eba3 0309 	sub.w	r3, r3, r9
 80090fc:	4543      	cmp	r3, r8
 80090fe:	f77f af79 	ble.w	8008ff4 <_printf_float+0x23c>
 8009102:	2301      	movs	r3, #1
 8009104:	465a      	mov	r2, fp
 8009106:	4631      	mov	r1, r6
 8009108:	4628      	mov	r0, r5
 800910a:	47b8      	blx	r7
 800910c:	3001      	adds	r0, #1
 800910e:	f43f aeae 	beq.w	8008e6e <_printf_float+0xb6>
 8009112:	f108 0801 	add.w	r8, r8, #1
 8009116:	e7ec      	b.n	80090f2 <_printf_float+0x33a>
 8009118:	4642      	mov	r2, r8
 800911a:	4631      	mov	r1, r6
 800911c:	4628      	mov	r0, r5
 800911e:	47b8      	blx	r7
 8009120:	3001      	adds	r0, #1
 8009122:	d1c2      	bne.n	80090aa <_printf_float+0x2f2>
 8009124:	e6a3      	b.n	8008e6e <_printf_float+0xb6>
 8009126:	2301      	movs	r3, #1
 8009128:	4631      	mov	r1, r6
 800912a:	4628      	mov	r0, r5
 800912c:	9206      	str	r2, [sp, #24]
 800912e:	47b8      	blx	r7
 8009130:	3001      	adds	r0, #1
 8009132:	f43f ae9c 	beq.w	8008e6e <_printf_float+0xb6>
 8009136:	9a06      	ldr	r2, [sp, #24]
 8009138:	f10b 0b01 	add.w	fp, fp, #1
 800913c:	e7bb      	b.n	80090b6 <_printf_float+0x2fe>
 800913e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009142:	4631      	mov	r1, r6
 8009144:	4628      	mov	r0, r5
 8009146:	47b8      	blx	r7
 8009148:	3001      	adds	r0, #1
 800914a:	d1c0      	bne.n	80090ce <_printf_float+0x316>
 800914c:	e68f      	b.n	8008e6e <_printf_float+0xb6>
 800914e:	9a06      	ldr	r2, [sp, #24]
 8009150:	464b      	mov	r3, r9
 8009152:	4442      	add	r2, r8
 8009154:	4631      	mov	r1, r6
 8009156:	4628      	mov	r0, r5
 8009158:	47b8      	blx	r7
 800915a:	3001      	adds	r0, #1
 800915c:	d1c3      	bne.n	80090e6 <_printf_float+0x32e>
 800915e:	e686      	b.n	8008e6e <_printf_float+0xb6>
 8009160:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009164:	f1ba 0f01 	cmp.w	sl, #1
 8009168:	dc01      	bgt.n	800916e <_printf_float+0x3b6>
 800916a:	07db      	lsls	r3, r3, #31
 800916c:	d536      	bpl.n	80091dc <_printf_float+0x424>
 800916e:	2301      	movs	r3, #1
 8009170:	4642      	mov	r2, r8
 8009172:	4631      	mov	r1, r6
 8009174:	4628      	mov	r0, r5
 8009176:	47b8      	blx	r7
 8009178:	3001      	adds	r0, #1
 800917a:	f43f ae78 	beq.w	8008e6e <_printf_float+0xb6>
 800917e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009182:	4631      	mov	r1, r6
 8009184:	4628      	mov	r0, r5
 8009186:	47b8      	blx	r7
 8009188:	3001      	adds	r0, #1
 800918a:	f43f ae70 	beq.w	8008e6e <_printf_float+0xb6>
 800918e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009192:	2200      	movs	r2, #0
 8009194:	2300      	movs	r3, #0
 8009196:	f10a 3aff 	add.w	sl, sl, #4294967295
 800919a:	f7f7 fc9d 	bl	8000ad8 <__aeabi_dcmpeq>
 800919e:	b9c0      	cbnz	r0, 80091d2 <_printf_float+0x41a>
 80091a0:	4653      	mov	r3, sl
 80091a2:	f108 0201 	add.w	r2, r8, #1
 80091a6:	4631      	mov	r1, r6
 80091a8:	4628      	mov	r0, r5
 80091aa:	47b8      	blx	r7
 80091ac:	3001      	adds	r0, #1
 80091ae:	d10c      	bne.n	80091ca <_printf_float+0x412>
 80091b0:	e65d      	b.n	8008e6e <_printf_float+0xb6>
 80091b2:	2301      	movs	r3, #1
 80091b4:	465a      	mov	r2, fp
 80091b6:	4631      	mov	r1, r6
 80091b8:	4628      	mov	r0, r5
 80091ba:	47b8      	blx	r7
 80091bc:	3001      	adds	r0, #1
 80091be:	f43f ae56 	beq.w	8008e6e <_printf_float+0xb6>
 80091c2:	f108 0801 	add.w	r8, r8, #1
 80091c6:	45d0      	cmp	r8, sl
 80091c8:	dbf3      	blt.n	80091b2 <_printf_float+0x3fa>
 80091ca:	464b      	mov	r3, r9
 80091cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80091d0:	e6df      	b.n	8008f92 <_printf_float+0x1da>
 80091d2:	f04f 0800 	mov.w	r8, #0
 80091d6:	f104 0b1a 	add.w	fp, r4, #26
 80091da:	e7f4      	b.n	80091c6 <_printf_float+0x40e>
 80091dc:	2301      	movs	r3, #1
 80091de:	4642      	mov	r2, r8
 80091e0:	e7e1      	b.n	80091a6 <_printf_float+0x3ee>
 80091e2:	2301      	movs	r3, #1
 80091e4:	464a      	mov	r2, r9
 80091e6:	4631      	mov	r1, r6
 80091e8:	4628      	mov	r0, r5
 80091ea:	47b8      	blx	r7
 80091ec:	3001      	adds	r0, #1
 80091ee:	f43f ae3e 	beq.w	8008e6e <_printf_float+0xb6>
 80091f2:	f108 0801 	add.w	r8, r8, #1
 80091f6:	68e3      	ldr	r3, [r4, #12]
 80091f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80091fa:	1a5b      	subs	r3, r3, r1
 80091fc:	4543      	cmp	r3, r8
 80091fe:	dcf0      	bgt.n	80091e2 <_printf_float+0x42a>
 8009200:	e6fc      	b.n	8008ffc <_printf_float+0x244>
 8009202:	f04f 0800 	mov.w	r8, #0
 8009206:	f104 0919 	add.w	r9, r4, #25
 800920a:	e7f4      	b.n	80091f6 <_printf_float+0x43e>

0800920c <_printf_common>:
 800920c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009210:	4616      	mov	r6, r2
 8009212:	4698      	mov	r8, r3
 8009214:	688a      	ldr	r2, [r1, #8]
 8009216:	690b      	ldr	r3, [r1, #16]
 8009218:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800921c:	4293      	cmp	r3, r2
 800921e:	bfb8      	it	lt
 8009220:	4613      	movlt	r3, r2
 8009222:	6033      	str	r3, [r6, #0]
 8009224:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009228:	4607      	mov	r7, r0
 800922a:	460c      	mov	r4, r1
 800922c:	b10a      	cbz	r2, 8009232 <_printf_common+0x26>
 800922e:	3301      	adds	r3, #1
 8009230:	6033      	str	r3, [r6, #0]
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	0699      	lsls	r1, r3, #26
 8009236:	bf42      	ittt	mi
 8009238:	6833      	ldrmi	r3, [r6, #0]
 800923a:	3302      	addmi	r3, #2
 800923c:	6033      	strmi	r3, [r6, #0]
 800923e:	6825      	ldr	r5, [r4, #0]
 8009240:	f015 0506 	ands.w	r5, r5, #6
 8009244:	d106      	bne.n	8009254 <_printf_common+0x48>
 8009246:	f104 0a19 	add.w	sl, r4, #25
 800924a:	68e3      	ldr	r3, [r4, #12]
 800924c:	6832      	ldr	r2, [r6, #0]
 800924e:	1a9b      	subs	r3, r3, r2
 8009250:	42ab      	cmp	r3, r5
 8009252:	dc26      	bgt.n	80092a2 <_printf_common+0x96>
 8009254:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009258:	6822      	ldr	r2, [r4, #0]
 800925a:	3b00      	subs	r3, #0
 800925c:	bf18      	it	ne
 800925e:	2301      	movne	r3, #1
 8009260:	0692      	lsls	r2, r2, #26
 8009262:	d42b      	bmi.n	80092bc <_printf_common+0xb0>
 8009264:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009268:	4641      	mov	r1, r8
 800926a:	4638      	mov	r0, r7
 800926c:	47c8      	blx	r9
 800926e:	3001      	adds	r0, #1
 8009270:	d01e      	beq.n	80092b0 <_printf_common+0xa4>
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	6922      	ldr	r2, [r4, #16]
 8009276:	f003 0306 	and.w	r3, r3, #6
 800927a:	2b04      	cmp	r3, #4
 800927c:	bf02      	ittt	eq
 800927e:	68e5      	ldreq	r5, [r4, #12]
 8009280:	6833      	ldreq	r3, [r6, #0]
 8009282:	1aed      	subeq	r5, r5, r3
 8009284:	68a3      	ldr	r3, [r4, #8]
 8009286:	bf0c      	ite	eq
 8009288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800928c:	2500      	movne	r5, #0
 800928e:	4293      	cmp	r3, r2
 8009290:	bfc4      	itt	gt
 8009292:	1a9b      	subgt	r3, r3, r2
 8009294:	18ed      	addgt	r5, r5, r3
 8009296:	2600      	movs	r6, #0
 8009298:	341a      	adds	r4, #26
 800929a:	42b5      	cmp	r5, r6
 800929c:	d11a      	bne.n	80092d4 <_printf_common+0xc8>
 800929e:	2000      	movs	r0, #0
 80092a0:	e008      	b.n	80092b4 <_printf_common+0xa8>
 80092a2:	2301      	movs	r3, #1
 80092a4:	4652      	mov	r2, sl
 80092a6:	4641      	mov	r1, r8
 80092a8:	4638      	mov	r0, r7
 80092aa:	47c8      	blx	r9
 80092ac:	3001      	adds	r0, #1
 80092ae:	d103      	bne.n	80092b8 <_printf_common+0xac>
 80092b0:	f04f 30ff 	mov.w	r0, #4294967295
 80092b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b8:	3501      	adds	r5, #1
 80092ba:	e7c6      	b.n	800924a <_printf_common+0x3e>
 80092bc:	18e1      	adds	r1, r4, r3
 80092be:	1c5a      	adds	r2, r3, #1
 80092c0:	2030      	movs	r0, #48	@ 0x30
 80092c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80092c6:	4422      	add	r2, r4
 80092c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80092cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80092d0:	3302      	adds	r3, #2
 80092d2:	e7c7      	b.n	8009264 <_printf_common+0x58>
 80092d4:	2301      	movs	r3, #1
 80092d6:	4622      	mov	r2, r4
 80092d8:	4641      	mov	r1, r8
 80092da:	4638      	mov	r0, r7
 80092dc:	47c8      	blx	r9
 80092de:	3001      	adds	r0, #1
 80092e0:	d0e6      	beq.n	80092b0 <_printf_common+0xa4>
 80092e2:	3601      	adds	r6, #1
 80092e4:	e7d9      	b.n	800929a <_printf_common+0x8e>
	...

080092e8 <_printf_i>:
 80092e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092ec:	7e0f      	ldrb	r7, [r1, #24]
 80092ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80092f0:	2f78      	cmp	r7, #120	@ 0x78
 80092f2:	4691      	mov	r9, r2
 80092f4:	4680      	mov	r8, r0
 80092f6:	460c      	mov	r4, r1
 80092f8:	469a      	mov	sl, r3
 80092fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092fe:	d807      	bhi.n	8009310 <_printf_i+0x28>
 8009300:	2f62      	cmp	r7, #98	@ 0x62
 8009302:	d80a      	bhi.n	800931a <_printf_i+0x32>
 8009304:	2f00      	cmp	r7, #0
 8009306:	f000 80d2 	beq.w	80094ae <_printf_i+0x1c6>
 800930a:	2f58      	cmp	r7, #88	@ 0x58
 800930c:	f000 80b9 	beq.w	8009482 <_printf_i+0x19a>
 8009310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009314:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009318:	e03a      	b.n	8009390 <_printf_i+0xa8>
 800931a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800931e:	2b15      	cmp	r3, #21
 8009320:	d8f6      	bhi.n	8009310 <_printf_i+0x28>
 8009322:	a101      	add	r1, pc, #4	@ (adr r1, 8009328 <_printf_i+0x40>)
 8009324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009328:	08009381 	.word	0x08009381
 800932c:	08009395 	.word	0x08009395
 8009330:	08009311 	.word	0x08009311
 8009334:	08009311 	.word	0x08009311
 8009338:	08009311 	.word	0x08009311
 800933c:	08009311 	.word	0x08009311
 8009340:	08009395 	.word	0x08009395
 8009344:	08009311 	.word	0x08009311
 8009348:	08009311 	.word	0x08009311
 800934c:	08009311 	.word	0x08009311
 8009350:	08009311 	.word	0x08009311
 8009354:	08009495 	.word	0x08009495
 8009358:	080093bf 	.word	0x080093bf
 800935c:	0800944f 	.word	0x0800944f
 8009360:	08009311 	.word	0x08009311
 8009364:	08009311 	.word	0x08009311
 8009368:	080094b7 	.word	0x080094b7
 800936c:	08009311 	.word	0x08009311
 8009370:	080093bf 	.word	0x080093bf
 8009374:	08009311 	.word	0x08009311
 8009378:	08009311 	.word	0x08009311
 800937c:	08009457 	.word	0x08009457
 8009380:	6833      	ldr	r3, [r6, #0]
 8009382:	1d1a      	adds	r2, r3, #4
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	6032      	str	r2, [r6, #0]
 8009388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800938c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009390:	2301      	movs	r3, #1
 8009392:	e09d      	b.n	80094d0 <_printf_i+0x1e8>
 8009394:	6833      	ldr	r3, [r6, #0]
 8009396:	6820      	ldr	r0, [r4, #0]
 8009398:	1d19      	adds	r1, r3, #4
 800939a:	6031      	str	r1, [r6, #0]
 800939c:	0606      	lsls	r6, r0, #24
 800939e:	d501      	bpl.n	80093a4 <_printf_i+0xbc>
 80093a0:	681d      	ldr	r5, [r3, #0]
 80093a2:	e003      	b.n	80093ac <_printf_i+0xc4>
 80093a4:	0645      	lsls	r5, r0, #25
 80093a6:	d5fb      	bpl.n	80093a0 <_printf_i+0xb8>
 80093a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80093ac:	2d00      	cmp	r5, #0
 80093ae:	da03      	bge.n	80093b8 <_printf_i+0xd0>
 80093b0:	232d      	movs	r3, #45	@ 0x2d
 80093b2:	426d      	negs	r5, r5
 80093b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093b8:	4859      	ldr	r0, [pc, #356]	@ (8009520 <_printf_i+0x238>)
 80093ba:	230a      	movs	r3, #10
 80093bc:	e011      	b.n	80093e2 <_printf_i+0xfa>
 80093be:	6821      	ldr	r1, [r4, #0]
 80093c0:	6833      	ldr	r3, [r6, #0]
 80093c2:	0608      	lsls	r0, r1, #24
 80093c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80093c8:	d402      	bmi.n	80093d0 <_printf_i+0xe8>
 80093ca:	0649      	lsls	r1, r1, #25
 80093cc:	bf48      	it	mi
 80093ce:	b2ad      	uxthmi	r5, r5
 80093d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80093d2:	4853      	ldr	r0, [pc, #332]	@ (8009520 <_printf_i+0x238>)
 80093d4:	6033      	str	r3, [r6, #0]
 80093d6:	bf14      	ite	ne
 80093d8:	230a      	movne	r3, #10
 80093da:	2308      	moveq	r3, #8
 80093dc:	2100      	movs	r1, #0
 80093de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80093e2:	6866      	ldr	r6, [r4, #4]
 80093e4:	60a6      	str	r6, [r4, #8]
 80093e6:	2e00      	cmp	r6, #0
 80093e8:	bfa2      	ittt	ge
 80093ea:	6821      	ldrge	r1, [r4, #0]
 80093ec:	f021 0104 	bicge.w	r1, r1, #4
 80093f0:	6021      	strge	r1, [r4, #0]
 80093f2:	b90d      	cbnz	r5, 80093f8 <_printf_i+0x110>
 80093f4:	2e00      	cmp	r6, #0
 80093f6:	d04b      	beq.n	8009490 <_printf_i+0x1a8>
 80093f8:	4616      	mov	r6, r2
 80093fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80093fe:	fb03 5711 	mls	r7, r3, r1, r5
 8009402:	5dc7      	ldrb	r7, [r0, r7]
 8009404:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009408:	462f      	mov	r7, r5
 800940a:	42bb      	cmp	r3, r7
 800940c:	460d      	mov	r5, r1
 800940e:	d9f4      	bls.n	80093fa <_printf_i+0x112>
 8009410:	2b08      	cmp	r3, #8
 8009412:	d10b      	bne.n	800942c <_printf_i+0x144>
 8009414:	6823      	ldr	r3, [r4, #0]
 8009416:	07df      	lsls	r7, r3, #31
 8009418:	d508      	bpl.n	800942c <_printf_i+0x144>
 800941a:	6923      	ldr	r3, [r4, #16]
 800941c:	6861      	ldr	r1, [r4, #4]
 800941e:	4299      	cmp	r1, r3
 8009420:	bfde      	ittt	le
 8009422:	2330      	movle	r3, #48	@ 0x30
 8009424:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009428:	f106 36ff 	addle.w	r6, r6, #4294967295
 800942c:	1b92      	subs	r2, r2, r6
 800942e:	6122      	str	r2, [r4, #16]
 8009430:	f8cd a000 	str.w	sl, [sp]
 8009434:	464b      	mov	r3, r9
 8009436:	aa03      	add	r2, sp, #12
 8009438:	4621      	mov	r1, r4
 800943a:	4640      	mov	r0, r8
 800943c:	f7ff fee6 	bl	800920c <_printf_common>
 8009440:	3001      	adds	r0, #1
 8009442:	d14a      	bne.n	80094da <_printf_i+0x1f2>
 8009444:	f04f 30ff 	mov.w	r0, #4294967295
 8009448:	b004      	add	sp, #16
 800944a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800944e:	6823      	ldr	r3, [r4, #0]
 8009450:	f043 0320 	orr.w	r3, r3, #32
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	4833      	ldr	r0, [pc, #204]	@ (8009524 <_printf_i+0x23c>)
 8009458:	2778      	movs	r7, #120	@ 0x78
 800945a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	6831      	ldr	r1, [r6, #0]
 8009462:	061f      	lsls	r7, r3, #24
 8009464:	f851 5b04 	ldr.w	r5, [r1], #4
 8009468:	d402      	bmi.n	8009470 <_printf_i+0x188>
 800946a:	065f      	lsls	r7, r3, #25
 800946c:	bf48      	it	mi
 800946e:	b2ad      	uxthmi	r5, r5
 8009470:	6031      	str	r1, [r6, #0]
 8009472:	07d9      	lsls	r1, r3, #31
 8009474:	bf44      	itt	mi
 8009476:	f043 0320 	orrmi.w	r3, r3, #32
 800947a:	6023      	strmi	r3, [r4, #0]
 800947c:	b11d      	cbz	r5, 8009486 <_printf_i+0x19e>
 800947e:	2310      	movs	r3, #16
 8009480:	e7ac      	b.n	80093dc <_printf_i+0xf4>
 8009482:	4827      	ldr	r0, [pc, #156]	@ (8009520 <_printf_i+0x238>)
 8009484:	e7e9      	b.n	800945a <_printf_i+0x172>
 8009486:	6823      	ldr	r3, [r4, #0]
 8009488:	f023 0320 	bic.w	r3, r3, #32
 800948c:	6023      	str	r3, [r4, #0]
 800948e:	e7f6      	b.n	800947e <_printf_i+0x196>
 8009490:	4616      	mov	r6, r2
 8009492:	e7bd      	b.n	8009410 <_printf_i+0x128>
 8009494:	6833      	ldr	r3, [r6, #0]
 8009496:	6825      	ldr	r5, [r4, #0]
 8009498:	6961      	ldr	r1, [r4, #20]
 800949a:	1d18      	adds	r0, r3, #4
 800949c:	6030      	str	r0, [r6, #0]
 800949e:	062e      	lsls	r6, r5, #24
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	d501      	bpl.n	80094a8 <_printf_i+0x1c0>
 80094a4:	6019      	str	r1, [r3, #0]
 80094a6:	e002      	b.n	80094ae <_printf_i+0x1c6>
 80094a8:	0668      	lsls	r0, r5, #25
 80094aa:	d5fb      	bpl.n	80094a4 <_printf_i+0x1bc>
 80094ac:	8019      	strh	r1, [r3, #0]
 80094ae:	2300      	movs	r3, #0
 80094b0:	6123      	str	r3, [r4, #16]
 80094b2:	4616      	mov	r6, r2
 80094b4:	e7bc      	b.n	8009430 <_printf_i+0x148>
 80094b6:	6833      	ldr	r3, [r6, #0]
 80094b8:	1d1a      	adds	r2, r3, #4
 80094ba:	6032      	str	r2, [r6, #0]
 80094bc:	681e      	ldr	r6, [r3, #0]
 80094be:	6862      	ldr	r2, [r4, #4]
 80094c0:	2100      	movs	r1, #0
 80094c2:	4630      	mov	r0, r6
 80094c4:	f7f6 fe8c 	bl	80001e0 <memchr>
 80094c8:	b108      	cbz	r0, 80094ce <_printf_i+0x1e6>
 80094ca:	1b80      	subs	r0, r0, r6
 80094cc:	6060      	str	r0, [r4, #4]
 80094ce:	6863      	ldr	r3, [r4, #4]
 80094d0:	6123      	str	r3, [r4, #16]
 80094d2:	2300      	movs	r3, #0
 80094d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094d8:	e7aa      	b.n	8009430 <_printf_i+0x148>
 80094da:	6923      	ldr	r3, [r4, #16]
 80094dc:	4632      	mov	r2, r6
 80094de:	4649      	mov	r1, r9
 80094e0:	4640      	mov	r0, r8
 80094e2:	47d0      	blx	sl
 80094e4:	3001      	adds	r0, #1
 80094e6:	d0ad      	beq.n	8009444 <_printf_i+0x15c>
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	079b      	lsls	r3, r3, #30
 80094ec:	d413      	bmi.n	8009516 <_printf_i+0x22e>
 80094ee:	68e0      	ldr	r0, [r4, #12]
 80094f0:	9b03      	ldr	r3, [sp, #12]
 80094f2:	4298      	cmp	r0, r3
 80094f4:	bfb8      	it	lt
 80094f6:	4618      	movlt	r0, r3
 80094f8:	e7a6      	b.n	8009448 <_printf_i+0x160>
 80094fa:	2301      	movs	r3, #1
 80094fc:	4632      	mov	r2, r6
 80094fe:	4649      	mov	r1, r9
 8009500:	4640      	mov	r0, r8
 8009502:	47d0      	blx	sl
 8009504:	3001      	adds	r0, #1
 8009506:	d09d      	beq.n	8009444 <_printf_i+0x15c>
 8009508:	3501      	adds	r5, #1
 800950a:	68e3      	ldr	r3, [r4, #12]
 800950c:	9903      	ldr	r1, [sp, #12]
 800950e:	1a5b      	subs	r3, r3, r1
 8009510:	42ab      	cmp	r3, r5
 8009512:	dcf2      	bgt.n	80094fa <_printf_i+0x212>
 8009514:	e7eb      	b.n	80094ee <_printf_i+0x206>
 8009516:	2500      	movs	r5, #0
 8009518:	f104 0619 	add.w	r6, r4, #25
 800951c:	e7f5      	b.n	800950a <_printf_i+0x222>
 800951e:	bf00      	nop
 8009520:	0800beee 	.word	0x0800beee
 8009524:	0800beff 	.word	0x0800beff

08009528 <std>:
 8009528:	2300      	movs	r3, #0
 800952a:	b510      	push	{r4, lr}
 800952c:	4604      	mov	r4, r0
 800952e:	e9c0 3300 	strd	r3, r3, [r0]
 8009532:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009536:	6083      	str	r3, [r0, #8]
 8009538:	8181      	strh	r1, [r0, #12]
 800953a:	6643      	str	r3, [r0, #100]	@ 0x64
 800953c:	81c2      	strh	r2, [r0, #14]
 800953e:	6183      	str	r3, [r0, #24]
 8009540:	4619      	mov	r1, r3
 8009542:	2208      	movs	r2, #8
 8009544:	305c      	adds	r0, #92	@ 0x5c
 8009546:	f000 f928 	bl	800979a <memset>
 800954a:	4b0d      	ldr	r3, [pc, #52]	@ (8009580 <std+0x58>)
 800954c:	6263      	str	r3, [r4, #36]	@ 0x24
 800954e:	4b0d      	ldr	r3, [pc, #52]	@ (8009584 <std+0x5c>)
 8009550:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009552:	4b0d      	ldr	r3, [pc, #52]	@ (8009588 <std+0x60>)
 8009554:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009556:	4b0d      	ldr	r3, [pc, #52]	@ (800958c <std+0x64>)
 8009558:	6323      	str	r3, [r4, #48]	@ 0x30
 800955a:	4b0d      	ldr	r3, [pc, #52]	@ (8009590 <std+0x68>)
 800955c:	6224      	str	r4, [r4, #32]
 800955e:	429c      	cmp	r4, r3
 8009560:	d006      	beq.n	8009570 <std+0x48>
 8009562:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009566:	4294      	cmp	r4, r2
 8009568:	d002      	beq.n	8009570 <std+0x48>
 800956a:	33d0      	adds	r3, #208	@ 0xd0
 800956c:	429c      	cmp	r4, r3
 800956e:	d105      	bne.n	800957c <std+0x54>
 8009570:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009578:	f000 b98c 	b.w	8009894 <__retarget_lock_init_recursive>
 800957c:	bd10      	pop	{r4, pc}
 800957e:	bf00      	nop
 8009580:	08009715 	.word	0x08009715
 8009584:	08009737 	.word	0x08009737
 8009588:	0800976f 	.word	0x0800976f
 800958c:	08009793 	.word	0x08009793
 8009590:	20001f20 	.word	0x20001f20

08009594 <stdio_exit_handler>:
 8009594:	4a02      	ldr	r2, [pc, #8]	@ (80095a0 <stdio_exit_handler+0xc>)
 8009596:	4903      	ldr	r1, [pc, #12]	@ (80095a4 <stdio_exit_handler+0x10>)
 8009598:	4803      	ldr	r0, [pc, #12]	@ (80095a8 <stdio_exit_handler+0x14>)
 800959a:	f000 b869 	b.w	8009670 <_fwalk_sglue>
 800959e:	bf00      	nop
 80095a0:	200000fc 	.word	0x200000fc
 80095a4:	0800b1f5 	.word	0x0800b1f5
 80095a8:	2000010c 	.word	0x2000010c

080095ac <cleanup_stdio>:
 80095ac:	6841      	ldr	r1, [r0, #4]
 80095ae:	4b0c      	ldr	r3, [pc, #48]	@ (80095e0 <cleanup_stdio+0x34>)
 80095b0:	4299      	cmp	r1, r3
 80095b2:	b510      	push	{r4, lr}
 80095b4:	4604      	mov	r4, r0
 80095b6:	d001      	beq.n	80095bc <cleanup_stdio+0x10>
 80095b8:	f001 fe1c 	bl	800b1f4 <_fflush_r>
 80095bc:	68a1      	ldr	r1, [r4, #8]
 80095be:	4b09      	ldr	r3, [pc, #36]	@ (80095e4 <cleanup_stdio+0x38>)
 80095c0:	4299      	cmp	r1, r3
 80095c2:	d002      	beq.n	80095ca <cleanup_stdio+0x1e>
 80095c4:	4620      	mov	r0, r4
 80095c6:	f001 fe15 	bl	800b1f4 <_fflush_r>
 80095ca:	68e1      	ldr	r1, [r4, #12]
 80095cc:	4b06      	ldr	r3, [pc, #24]	@ (80095e8 <cleanup_stdio+0x3c>)
 80095ce:	4299      	cmp	r1, r3
 80095d0:	d004      	beq.n	80095dc <cleanup_stdio+0x30>
 80095d2:	4620      	mov	r0, r4
 80095d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095d8:	f001 be0c 	b.w	800b1f4 <_fflush_r>
 80095dc:	bd10      	pop	{r4, pc}
 80095de:	bf00      	nop
 80095e0:	20001f20 	.word	0x20001f20
 80095e4:	20001f88 	.word	0x20001f88
 80095e8:	20001ff0 	.word	0x20001ff0

080095ec <global_stdio_init.part.0>:
 80095ec:	b510      	push	{r4, lr}
 80095ee:	4b0b      	ldr	r3, [pc, #44]	@ (800961c <global_stdio_init.part.0+0x30>)
 80095f0:	4c0b      	ldr	r4, [pc, #44]	@ (8009620 <global_stdio_init.part.0+0x34>)
 80095f2:	4a0c      	ldr	r2, [pc, #48]	@ (8009624 <global_stdio_init.part.0+0x38>)
 80095f4:	601a      	str	r2, [r3, #0]
 80095f6:	4620      	mov	r0, r4
 80095f8:	2200      	movs	r2, #0
 80095fa:	2104      	movs	r1, #4
 80095fc:	f7ff ff94 	bl	8009528 <std>
 8009600:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009604:	2201      	movs	r2, #1
 8009606:	2109      	movs	r1, #9
 8009608:	f7ff ff8e 	bl	8009528 <std>
 800960c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009610:	2202      	movs	r2, #2
 8009612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009616:	2112      	movs	r1, #18
 8009618:	f7ff bf86 	b.w	8009528 <std>
 800961c:	20002058 	.word	0x20002058
 8009620:	20001f20 	.word	0x20001f20
 8009624:	08009595 	.word	0x08009595

08009628 <__sfp_lock_acquire>:
 8009628:	4801      	ldr	r0, [pc, #4]	@ (8009630 <__sfp_lock_acquire+0x8>)
 800962a:	f000 b934 	b.w	8009896 <__retarget_lock_acquire_recursive>
 800962e:	bf00      	nop
 8009630:	20002061 	.word	0x20002061

08009634 <__sfp_lock_release>:
 8009634:	4801      	ldr	r0, [pc, #4]	@ (800963c <__sfp_lock_release+0x8>)
 8009636:	f000 b92f 	b.w	8009898 <__retarget_lock_release_recursive>
 800963a:	bf00      	nop
 800963c:	20002061 	.word	0x20002061

08009640 <__sinit>:
 8009640:	b510      	push	{r4, lr}
 8009642:	4604      	mov	r4, r0
 8009644:	f7ff fff0 	bl	8009628 <__sfp_lock_acquire>
 8009648:	6a23      	ldr	r3, [r4, #32]
 800964a:	b11b      	cbz	r3, 8009654 <__sinit+0x14>
 800964c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009650:	f7ff bff0 	b.w	8009634 <__sfp_lock_release>
 8009654:	4b04      	ldr	r3, [pc, #16]	@ (8009668 <__sinit+0x28>)
 8009656:	6223      	str	r3, [r4, #32]
 8009658:	4b04      	ldr	r3, [pc, #16]	@ (800966c <__sinit+0x2c>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1f5      	bne.n	800964c <__sinit+0xc>
 8009660:	f7ff ffc4 	bl	80095ec <global_stdio_init.part.0>
 8009664:	e7f2      	b.n	800964c <__sinit+0xc>
 8009666:	bf00      	nop
 8009668:	080095ad 	.word	0x080095ad
 800966c:	20002058 	.word	0x20002058

08009670 <_fwalk_sglue>:
 8009670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009674:	4607      	mov	r7, r0
 8009676:	4688      	mov	r8, r1
 8009678:	4614      	mov	r4, r2
 800967a:	2600      	movs	r6, #0
 800967c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009680:	f1b9 0901 	subs.w	r9, r9, #1
 8009684:	d505      	bpl.n	8009692 <_fwalk_sglue+0x22>
 8009686:	6824      	ldr	r4, [r4, #0]
 8009688:	2c00      	cmp	r4, #0
 800968a:	d1f7      	bne.n	800967c <_fwalk_sglue+0xc>
 800968c:	4630      	mov	r0, r6
 800968e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009692:	89ab      	ldrh	r3, [r5, #12]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d907      	bls.n	80096a8 <_fwalk_sglue+0x38>
 8009698:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800969c:	3301      	adds	r3, #1
 800969e:	d003      	beq.n	80096a8 <_fwalk_sglue+0x38>
 80096a0:	4629      	mov	r1, r5
 80096a2:	4638      	mov	r0, r7
 80096a4:	47c0      	blx	r8
 80096a6:	4306      	orrs	r6, r0
 80096a8:	3568      	adds	r5, #104	@ 0x68
 80096aa:	e7e9      	b.n	8009680 <_fwalk_sglue+0x10>

080096ac <sniprintf>:
 80096ac:	b40c      	push	{r2, r3}
 80096ae:	b530      	push	{r4, r5, lr}
 80096b0:	4b17      	ldr	r3, [pc, #92]	@ (8009710 <sniprintf+0x64>)
 80096b2:	1e0c      	subs	r4, r1, #0
 80096b4:	681d      	ldr	r5, [r3, #0]
 80096b6:	b09d      	sub	sp, #116	@ 0x74
 80096b8:	da08      	bge.n	80096cc <sniprintf+0x20>
 80096ba:	238b      	movs	r3, #139	@ 0x8b
 80096bc:	602b      	str	r3, [r5, #0]
 80096be:	f04f 30ff 	mov.w	r0, #4294967295
 80096c2:	b01d      	add	sp, #116	@ 0x74
 80096c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096c8:	b002      	add	sp, #8
 80096ca:	4770      	bx	lr
 80096cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80096d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80096d4:	bf14      	ite	ne
 80096d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80096da:	4623      	moveq	r3, r4
 80096dc:	9304      	str	r3, [sp, #16]
 80096de:	9307      	str	r3, [sp, #28]
 80096e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80096e4:	9002      	str	r0, [sp, #8]
 80096e6:	9006      	str	r0, [sp, #24]
 80096e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80096ec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80096ee:	ab21      	add	r3, sp, #132	@ 0x84
 80096f0:	a902      	add	r1, sp, #8
 80096f2:	4628      	mov	r0, r5
 80096f4:	9301      	str	r3, [sp, #4]
 80096f6:	f001 fbfd 	bl	800aef4 <_svfiprintf_r>
 80096fa:	1c43      	adds	r3, r0, #1
 80096fc:	bfbc      	itt	lt
 80096fe:	238b      	movlt	r3, #139	@ 0x8b
 8009700:	602b      	strlt	r3, [r5, #0]
 8009702:	2c00      	cmp	r4, #0
 8009704:	d0dd      	beq.n	80096c2 <sniprintf+0x16>
 8009706:	9b02      	ldr	r3, [sp, #8]
 8009708:	2200      	movs	r2, #0
 800970a:	701a      	strb	r2, [r3, #0]
 800970c:	e7d9      	b.n	80096c2 <sniprintf+0x16>
 800970e:	bf00      	nop
 8009710:	20000108 	.word	0x20000108

08009714 <__sread>:
 8009714:	b510      	push	{r4, lr}
 8009716:	460c      	mov	r4, r1
 8009718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800971c:	f000 f86c 	bl	80097f8 <_read_r>
 8009720:	2800      	cmp	r0, #0
 8009722:	bfab      	itete	ge
 8009724:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009726:	89a3      	ldrhlt	r3, [r4, #12]
 8009728:	181b      	addge	r3, r3, r0
 800972a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800972e:	bfac      	ite	ge
 8009730:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009732:	81a3      	strhlt	r3, [r4, #12]
 8009734:	bd10      	pop	{r4, pc}

08009736 <__swrite>:
 8009736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800973a:	461f      	mov	r7, r3
 800973c:	898b      	ldrh	r3, [r1, #12]
 800973e:	05db      	lsls	r3, r3, #23
 8009740:	4605      	mov	r5, r0
 8009742:	460c      	mov	r4, r1
 8009744:	4616      	mov	r6, r2
 8009746:	d505      	bpl.n	8009754 <__swrite+0x1e>
 8009748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800974c:	2302      	movs	r3, #2
 800974e:	2200      	movs	r2, #0
 8009750:	f000 f840 	bl	80097d4 <_lseek_r>
 8009754:	89a3      	ldrh	r3, [r4, #12]
 8009756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800975a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800975e:	81a3      	strh	r3, [r4, #12]
 8009760:	4632      	mov	r2, r6
 8009762:	463b      	mov	r3, r7
 8009764:	4628      	mov	r0, r5
 8009766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800976a:	f000 b857 	b.w	800981c <_write_r>

0800976e <__sseek>:
 800976e:	b510      	push	{r4, lr}
 8009770:	460c      	mov	r4, r1
 8009772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009776:	f000 f82d 	bl	80097d4 <_lseek_r>
 800977a:	1c43      	adds	r3, r0, #1
 800977c:	89a3      	ldrh	r3, [r4, #12]
 800977e:	bf15      	itete	ne
 8009780:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009782:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009786:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800978a:	81a3      	strheq	r3, [r4, #12]
 800978c:	bf18      	it	ne
 800978e:	81a3      	strhne	r3, [r4, #12]
 8009790:	bd10      	pop	{r4, pc}

08009792 <__sclose>:
 8009792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009796:	f000 b80d 	b.w	80097b4 <_close_r>

0800979a <memset>:
 800979a:	4402      	add	r2, r0
 800979c:	4603      	mov	r3, r0
 800979e:	4293      	cmp	r3, r2
 80097a0:	d100      	bne.n	80097a4 <memset+0xa>
 80097a2:	4770      	bx	lr
 80097a4:	f803 1b01 	strb.w	r1, [r3], #1
 80097a8:	e7f9      	b.n	800979e <memset+0x4>
	...

080097ac <_localeconv_r>:
 80097ac:	4800      	ldr	r0, [pc, #0]	@ (80097b0 <_localeconv_r+0x4>)
 80097ae:	4770      	bx	lr
 80097b0:	20000248 	.word	0x20000248

080097b4 <_close_r>:
 80097b4:	b538      	push	{r3, r4, r5, lr}
 80097b6:	4d06      	ldr	r5, [pc, #24]	@ (80097d0 <_close_r+0x1c>)
 80097b8:	2300      	movs	r3, #0
 80097ba:	4604      	mov	r4, r0
 80097bc:	4608      	mov	r0, r1
 80097be:	602b      	str	r3, [r5, #0]
 80097c0:	f7f7 ff8a 	bl	80016d8 <_close>
 80097c4:	1c43      	adds	r3, r0, #1
 80097c6:	d102      	bne.n	80097ce <_close_r+0x1a>
 80097c8:	682b      	ldr	r3, [r5, #0]
 80097ca:	b103      	cbz	r3, 80097ce <_close_r+0x1a>
 80097cc:	6023      	str	r3, [r4, #0]
 80097ce:	bd38      	pop	{r3, r4, r5, pc}
 80097d0:	2000205c 	.word	0x2000205c

080097d4 <_lseek_r>:
 80097d4:	b538      	push	{r3, r4, r5, lr}
 80097d6:	4d07      	ldr	r5, [pc, #28]	@ (80097f4 <_lseek_r+0x20>)
 80097d8:	4604      	mov	r4, r0
 80097da:	4608      	mov	r0, r1
 80097dc:	4611      	mov	r1, r2
 80097de:	2200      	movs	r2, #0
 80097e0:	602a      	str	r2, [r5, #0]
 80097e2:	461a      	mov	r2, r3
 80097e4:	f7f7 ff9f 	bl	8001726 <_lseek>
 80097e8:	1c43      	adds	r3, r0, #1
 80097ea:	d102      	bne.n	80097f2 <_lseek_r+0x1e>
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	b103      	cbz	r3, 80097f2 <_lseek_r+0x1e>
 80097f0:	6023      	str	r3, [r4, #0]
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	2000205c 	.word	0x2000205c

080097f8 <_read_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4d07      	ldr	r5, [pc, #28]	@ (8009818 <_read_r+0x20>)
 80097fc:	4604      	mov	r4, r0
 80097fe:	4608      	mov	r0, r1
 8009800:	4611      	mov	r1, r2
 8009802:	2200      	movs	r2, #0
 8009804:	602a      	str	r2, [r5, #0]
 8009806:	461a      	mov	r2, r3
 8009808:	f7f7 ff2d 	bl	8001666 <_read>
 800980c:	1c43      	adds	r3, r0, #1
 800980e:	d102      	bne.n	8009816 <_read_r+0x1e>
 8009810:	682b      	ldr	r3, [r5, #0]
 8009812:	b103      	cbz	r3, 8009816 <_read_r+0x1e>
 8009814:	6023      	str	r3, [r4, #0]
 8009816:	bd38      	pop	{r3, r4, r5, pc}
 8009818:	2000205c 	.word	0x2000205c

0800981c <_write_r>:
 800981c:	b538      	push	{r3, r4, r5, lr}
 800981e:	4d07      	ldr	r5, [pc, #28]	@ (800983c <_write_r+0x20>)
 8009820:	4604      	mov	r4, r0
 8009822:	4608      	mov	r0, r1
 8009824:	4611      	mov	r1, r2
 8009826:	2200      	movs	r2, #0
 8009828:	602a      	str	r2, [r5, #0]
 800982a:	461a      	mov	r2, r3
 800982c:	f7f7 ff38 	bl	80016a0 <_write>
 8009830:	1c43      	adds	r3, r0, #1
 8009832:	d102      	bne.n	800983a <_write_r+0x1e>
 8009834:	682b      	ldr	r3, [r5, #0]
 8009836:	b103      	cbz	r3, 800983a <_write_r+0x1e>
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	bd38      	pop	{r3, r4, r5, pc}
 800983c:	2000205c 	.word	0x2000205c

08009840 <__errno>:
 8009840:	4b01      	ldr	r3, [pc, #4]	@ (8009848 <__errno+0x8>)
 8009842:	6818      	ldr	r0, [r3, #0]
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	20000108 	.word	0x20000108

0800984c <__libc_init_array>:
 800984c:	b570      	push	{r4, r5, r6, lr}
 800984e:	4d0d      	ldr	r5, [pc, #52]	@ (8009884 <__libc_init_array+0x38>)
 8009850:	4c0d      	ldr	r4, [pc, #52]	@ (8009888 <__libc_init_array+0x3c>)
 8009852:	1b64      	subs	r4, r4, r5
 8009854:	10a4      	asrs	r4, r4, #2
 8009856:	2600      	movs	r6, #0
 8009858:	42a6      	cmp	r6, r4
 800985a:	d109      	bne.n	8009870 <__libc_init_array+0x24>
 800985c:	4d0b      	ldr	r5, [pc, #44]	@ (800988c <__libc_init_array+0x40>)
 800985e:	4c0c      	ldr	r4, [pc, #48]	@ (8009890 <__libc_init_array+0x44>)
 8009860:	f002 fad2 	bl	800be08 <_init>
 8009864:	1b64      	subs	r4, r4, r5
 8009866:	10a4      	asrs	r4, r4, #2
 8009868:	2600      	movs	r6, #0
 800986a:	42a6      	cmp	r6, r4
 800986c:	d105      	bne.n	800987a <__libc_init_array+0x2e>
 800986e:	bd70      	pop	{r4, r5, r6, pc}
 8009870:	f855 3b04 	ldr.w	r3, [r5], #4
 8009874:	4798      	blx	r3
 8009876:	3601      	adds	r6, #1
 8009878:	e7ee      	b.n	8009858 <__libc_init_array+0xc>
 800987a:	f855 3b04 	ldr.w	r3, [r5], #4
 800987e:	4798      	blx	r3
 8009880:	3601      	adds	r6, #1
 8009882:	e7f2      	b.n	800986a <__libc_init_array+0x1e>
 8009884:	0800c2c8 	.word	0x0800c2c8
 8009888:	0800c2c8 	.word	0x0800c2c8
 800988c:	0800c2c8 	.word	0x0800c2c8
 8009890:	0800c2cc 	.word	0x0800c2cc

08009894 <__retarget_lock_init_recursive>:
 8009894:	4770      	bx	lr

08009896 <__retarget_lock_acquire_recursive>:
 8009896:	4770      	bx	lr

08009898 <__retarget_lock_release_recursive>:
 8009898:	4770      	bx	lr

0800989a <quorem>:
 800989a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989e:	6903      	ldr	r3, [r0, #16]
 80098a0:	690c      	ldr	r4, [r1, #16]
 80098a2:	42a3      	cmp	r3, r4
 80098a4:	4607      	mov	r7, r0
 80098a6:	db7e      	blt.n	80099a6 <quorem+0x10c>
 80098a8:	3c01      	subs	r4, #1
 80098aa:	f101 0814 	add.w	r8, r1, #20
 80098ae:	00a3      	lsls	r3, r4, #2
 80098b0:	f100 0514 	add.w	r5, r0, #20
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098ba:	9301      	str	r3, [sp, #4]
 80098bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098c4:	3301      	adds	r3, #1
 80098c6:	429a      	cmp	r2, r3
 80098c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80098d0:	d32e      	bcc.n	8009930 <quorem+0x96>
 80098d2:	f04f 0a00 	mov.w	sl, #0
 80098d6:	46c4      	mov	ip, r8
 80098d8:	46ae      	mov	lr, r5
 80098da:	46d3      	mov	fp, sl
 80098dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80098e0:	b298      	uxth	r0, r3
 80098e2:	fb06 a000 	mla	r0, r6, r0, sl
 80098e6:	0c02      	lsrs	r2, r0, #16
 80098e8:	0c1b      	lsrs	r3, r3, #16
 80098ea:	fb06 2303 	mla	r3, r6, r3, r2
 80098ee:	f8de 2000 	ldr.w	r2, [lr]
 80098f2:	b280      	uxth	r0, r0
 80098f4:	b292      	uxth	r2, r2
 80098f6:	1a12      	subs	r2, r2, r0
 80098f8:	445a      	add	r2, fp
 80098fa:	f8de 0000 	ldr.w	r0, [lr]
 80098fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009902:	b29b      	uxth	r3, r3
 8009904:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009908:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800990c:	b292      	uxth	r2, r2
 800990e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009912:	45e1      	cmp	r9, ip
 8009914:	f84e 2b04 	str.w	r2, [lr], #4
 8009918:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800991c:	d2de      	bcs.n	80098dc <quorem+0x42>
 800991e:	9b00      	ldr	r3, [sp, #0]
 8009920:	58eb      	ldr	r3, [r5, r3]
 8009922:	b92b      	cbnz	r3, 8009930 <quorem+0x96>
 8009924:	9b01      	ldr	r3, [sp, #4]
 8009926:	3b04      	subs	r3, #4
 8009928:	429d      	cmp	r5, r3
 800992a:	461a      	mov	r2, r3
 800992c:	d32f      	bcc.n	800998e <quorem+0xf4>
 800992e:	613c      	str	r4, [r7, #16]
 8009930:	4638      	mov	r0, r7
 8009932:	f001 f97b 	bl	800ac2c <__mcmp>
 8009936:	2800      	cmp	r0, #0
 8009938:	db25      	blt.n	8009986 <quorem+0xec>
 800993a:	4629      	mov	r1, r5
 800993c:	2000      	movs	r0, #0
 800993e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009942:	f8d1 c000 	ldr.w	ip, [r1]
 8009946:	fa1f fe82 	uxth.w	lr, r2
 800994a:	fa1f f38c 	uxth.w	r3, ip
 800994e:	eba3 030e 	sub.w	r3, r3, lr
 8009952:	4403      	add	r3, r0
 8009954:	0c12      	lsrs	r2, r2, #16
 8009956:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800995a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800995e:	b29b      	uxth	r3, r3
 8009960:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009964:	45c1      	cmp	r9, r8
 8009966:	f841 3b04 	str.w	r3, [r1], #4
 800996a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800996e:	d2e6      	bcs.n	800993e <quorem+0xa4>
 8009970:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009974:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009978:	b922      	cbnz	r2, 8009984 <quorem+0xea>
 800997a:	3b04      	subs	r3, #4
 800997c:	429d      	cmp	r5, r3
 800997e:	461a      	mov	r2, r3
 8009980:	d30b      	bcc.n	800999a <quorem+0x100>
 8009982:	613c      	str	r4, [r7, #16]
 8009984:	3601      	adds	r6, #1
 8009986:	4630      	mov	r0, r6
 8009988:	b003      	add	sp, #12
 800998a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800998e:	6812      	ldr	r2, [r2, #0]
 8009990:	3b04      	subs	r3, #4
 8009992:	2a00      	cmp	r2, #0
 8009994:	d1cb      	bne.n	800992e <quorem+0x94>
 8009996:	3c01      	subs	r4, #1
 8009998:	e7c6      	b.n	8009928 <quorem+0x8e>
 800999a:	6812      	ldr	r2, [r2, #0]
 800999c:	3b04      	subs	r3, #4
 800999e:	2a00      	cmp	r2, #0
 80099a0:	d1ef      	bne.n	8009982 <quorem+0xe8>
 80099a2:	3c01      	subs	r4, #1
 80099a4:	e7ea      	b.n	800997c <quorem+0xe2>
 80099a6:	2000      	movs	r0, #0
 80099a8:	e7ee      	b.n	8009988 <quorem+0xee>
 80099aa:	0000      	movs	r0, r0
 80099ac:	0000      	movs	r0, r0
	...

080099b0 <_dtoa_r>:
 80099b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b4:	69c7      	ldr	r7, [r0, #28]
 80099b6:	b099      	sub	sp, #100	@ 0x64
 80099b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80099bc:	ec55 4b10 	vmov	r4, r5, d0
 80099c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80099c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80099c4:	4683      	mov	fp, r0
 80099c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80099c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099ca:	b97f      	cbnz	r7, 80099ec <_dtoa_r+0x3c>
 80099cc:	2010      	movs	r0, #16
 80099ce:	f000 fdfd 	bl	800a5cc <malloc>
 80099d2:	4602      	mov	r2, r0
 80099d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80099d8:	b920      	cbnz	r0, 80099e4 <_dtoa_r+0x34>
 80099da:	4ba7      	ldr	r3, [pc, #668]	@ (8009c78 <_dtoa_r+0x2c8>)
 80099dc:	21ef      	movs	r1, #239	@ 0xef
 80099de:	48a7      	ldr	r0, [pc, #668]	@ (8009c7c <_dtoa_r+0x2cc>)
 80099e0:	f001 fc68 	bl	800b2b4 <__assert_func>
 80099e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80099e8:	6007      	str	r7, [r0, #0]
 80099ea:	60c7      	str	r7, [r0, #12]
 80099ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80099f0:	6819      	ldr	r1, [r3, #0]
 80099f2:	b159      	cbz	r1, 8009a0c <_dtoa_r+0x5c>
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	604a      	str	r2, [r1, #4]
 80099f8:	2301      	movs	r3, #1
 80099fa:	4093      	lsls	r3, r2
 80099fc:	608b      	str	r3, [r1, #8]
 80099fe:	4658      	mov	r0, fp
 8009a00:	f000 feda 	bl	800a7b8 <_Bfree>
 8009a04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	601a      	str	r2, [r3, #0]
 8009a0c:	1e2b      	subs	r3, r5, #0
 8009a0e:	bfb9      	ittee	lt
 8009a10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009a14:	9303      	strlt	r3, [sp, #12]
 8009a16:	2300      	movge	r3, #0
 8009a18:	6033      	strge	r3, [r6, #0]
 8009a1a:	9f03      	ldr	r7, [sp, #12]
 8009a1c:	4b98      	ldr	r3, [pc, #608]	@ (8009c80 <_dtoa_r+0x2d0>)
 8009a1e:	bfbc      	itt	lt
 8009a20:	2201      	movlt	r2, #1
 8009a22:	6032      	strlt	r2, [r6, #0]
 8009a24:	43bb      	bics	r3, r7
 8009a26:	d112      	bne.n	8009a4e <_dtoa_r+0x9e>
 8009a28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a2e:	6013      	str	r3, [r2, #0]
 8009a30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a34:	4323      	orrs	r3, r4
 8009a36:	f000 854d 	beq.w	800a4d4 <_dtoa_r+0xb24>
 8009a3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009c94 <_dtoa_r+0x2e4>
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f000 854f 	beq.w	800a4e4 <_dtoa_r+0xb34>
 8009a46:	f10a 0303 	add.w	r3, sl, #3
 8009a4a:	f000 bd49 	b.w	800a4e0 <_dtoa_r+0xb30>
 8009a4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a52:	2200      	movs	r2, #0
 8009a54:	ec51 0b17 	vmov	r0, r1, d7
 8009a58:	2300      	movs	r3, #0
 8009a5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009a5e:	f7f7 f83b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a62:	4680      	mov	r8, r0
 8009a64:	b158      	cbz	r0, 8009a7e <_dtoa_r+0xce>
 8009a66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a68:	2301      	movs	r3, #1
 8009a6a:	6013      	str	r3, [r2, #0]
 8009a6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a6e:	b113      	cbz	r3, 8009a76 <_dtoa_r+0xc6>
 8009a70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009a72:	4b84      	ldr	r3, [pc, #528]	@ (8009c84 <_dtoa_r+0x2d4>)
 8009a74:	6013      	str	r3, [r2, #0]
 8009a76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009c98 <_dtoa_r+0x2e8>
 8009a7a:	f000 bd33 	b.w	800a4e4 <_dtoa_r+0xb34>
 8009a7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009a82:	aa16      	add	r2, sp, #88	@ 0x58
 8009a84:	a917      	add	r1, sp, #92	@ 0x5c
 8009a86:	4658      	mov	r0, fp
 8009a88:	f001 f980 	bl	800ad8c <__d2b>
 8009a8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009a90:	4681      	mov	r9, r0
 8009a92:	2e00      	cmp	r6, #0
 8009a94:	d077      	beq.n	8009b86 <_dtoa_r+0x1d6>
 8009a96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009aa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009aa4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009aa8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009aac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	4b74      	ldr	r3, [pc, #464]	@ (8009c88 <_dtoa_r+0x2d8>)
 8009ab6:	f7f6 fbef 	bl	8000298 <__aeabi_dsub>
 8009aba:	a369      	add	r3, pc, #420	@ (adr r3, 8009c60 <_dtoa_r+0x2b0>)
 8009abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac0:	f7f6 fda2 	bl	8000608 <__aeabi_dmul>
 8009ac4:	a368      	add	r3, pc, #416	@ (adr r3, 8009c68 <_dtoa_r+0x2b8>)
 8009ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aca:	f7f6 fbe7 	bl	800029c <__adddf3>
 8009ace:	4604      	mov	r4, r0
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	460d      	mov	r5, r1
 8009ad4:	f7f6 fd2e 	bl	8000534 <__aeabi_i2d>
 8009ad8:	a365      	add	r3, pc, #404	@ (adr r3, 8009c70 <_dtoa_r+0x2c0>)
 8009ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ade:	f7f6 fd93 	bl	8000608 <__aeabi_dmul>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	4629      	mov	r1, r5
 8009aea:	f7f6 fbd7 	bl	800029c <__adddf3>
 8009aee:	4604      	mov	r4, r0
 8009af0:	460d      	mov	r5, r1
 8009af2:	f7f7 f839 	bl	8000b68 <__aeabi_d2iz>
 8009af6:	2200      	movs	r2, #0
 8009af8:	4607      	mov	r7, r0
 8009afa:	2300      	movs	r3, #0
 8009afc:	4620      	mov	r0, r4
 8009afe:	4629      	mov	r1, r5
 8009b00:	f7f6 fff4 	bl	8000aec <__aeabi_dcmplt>
 8009b04:	b140      	cbz	r0, 8009b18 <_dtoa_r+0x168>
 8009b06:	4638      	mov	r0, r7
 8009b08:	f7f6 fd14 	bl	8000534 <__aeabi_i2d>
 8009b0c:	4622      	mov	r2, r4
 8009b0e:	462b      	mov	r3, r5
 8009b10:	f7f6 ffe2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b14:	b900      	cbnz	r0, 8009b18 <_dtoa_r+0x168>
 8009b16:	3f01      	subs	r7, #1
 8009b18:	2f16      	cmp	r7, #22
 8009b1a:	d851      	bhi.n	8009bc0 <_dtoa_r+0x210>
 8009b1c:	4b5b      	ldr	r3, [pc, #364]	@ (8009c8c <_dtoa_r+0x2dc>)
 8009b1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b2a:	f7f6 ffdf 	bl	8000aec <__aeabi_dcmplt>
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	d048      	beq.n	8009bc4 <_dtoa_r+0x214>
 8009b32:	3f01      	subs	r7, #1
 8009b34:	2300      	movs	r3, #0
 8009b36:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009b3a:	1b9b      	subs	r3, r3, r6
 8009b3c:	1e5a      	subs	r2, r3, #1
 8009b3e:	bf44      	itt	mi
 8009b40:	f1c3 0801 	rsbmi	r8, r3, #1
 8009b44:	2300      	movmi	r3, #0
 8009b46:	9208      	str	r2, [sp, #32]
 8009b48:	bf54      	ite	pl
 8009b4a:	f04f 0800 	movpl.w	r8, #0
 8009b4e:	9308      	strmi	r3, [sp, #32]
 8009b50:	2f00      	cmp	r7, #0
 8009b52:	db39      	blt.n	8009bc8 <_dtoa_r+0x218>
 8009b54:	9b08      	ldr	r3, [sp, #32]
 8009b56:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009b58:	443b      	add	r3, r7
 8009b5a:	9308      	str	r3, [sp, #32]
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b62:	2b09      	cmp	r3, #9
 8009b64:	d864      	bhi.n	8009c30 <_dtoa_r+0x280>
 8009b66:	2b05      	cmp	r3, #5
 8009b68:	bfc4      	itt	gt
 8009b6a:	3b04      	subgt	r3, #4
 8009b6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b70:	f1a3 0302 	sub.w	r3, r3, #2
 8009b74:	bfcc      	ite	gt
 8009b76:	2400      	movgt	r4, #0
 8009b78:	2401      	movle	r4, #1
 8009b7a:	2b03      	cmp	r3, #3
 8009b7c:	d863      	bhi.n	8009c46 <_dtoa_r+0x296>
 8009b7e:	e8df f003 	tbb	[pc, r3]
 8009b82:	372a      	.short	0x372a
 8009b84:	5535      	.short	0x5535
 8009b86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009b8a:	441e      	add	r6, r3
 8009b8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009b90:	2b20      	cmp	r3, #32
 8009b92:	bfc1      	itttt	gt
 8009b94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009b98:	409f      	lslgt	r7, r3
 8009b9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009b9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009ba2:	bfd6      	itet	le
 8009ba4:	f1c3 0320 	rsble	r3, r3, #32
 8009ba8:	ea47 0003 	orrgt.w	r0, r7, r3
 8009bac:	fa04 f003 	lslle.w	r0, r4, r3
 8009bb0:	f7f6 fcb0 	bl	8000514 <__aeabi_ui2d>
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009bba:	3e01      	subs	r6, #1
 8009bbc:	9214      	str	r2, [sp, #80]	@ 0x50
 8009bbe:	e777      	b.n	8009ab0 <_dtoa_r+0x100>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e7b8      	b.n	8009b36 <_dtoa_r+0x186>
 8009bc4:	9012      	str	r0, [sp, #72]	@ 0x48
 8009bc6:	e7b7      	b.n	8009b38 <_dtoa_r+0x188>
 8009bc8:	427b      	negs	r3, r7
 8009bca:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bcc:	2300      	movs	r3, #0
 8009bce:	eba8 0807 	sub.w	r8, r8, r7
 8009bd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009bd4:	e7c4      	b.n	8009b60 <_dtoa_r+0x1b0>
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	dc35      	bgt.n	8009c4c <_dtoa_r+0x29c>
 8009be0:	2301      	movs	r3, #1
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	9307      	str	r3, [sp, #28]
 8009be6:	461a      	mov	r2, r3
 8009be8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009bea:	e00b      	b.n	8009c04 <_dtoa_r+0x254>
 8009bec:	2301      	movs	r3, #1
 8009bee:	e7f3      	b.n	8009bd8 <_dtoa_r+0x228>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bf6:	18fb      	adds	r3, r7, r3
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	9307      	str	r3, [sp, #28]
 8009c00:	bfb8      	it	lt
 8009c02:	2301      	movlt	r3, #1
 8009c04:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009c08:	2100      	movs	r1, #0
 8009c0a:	2204      	movs	r2, #4
 8009c0c:	f102 0514 	add.w	r5, r2, #20
 8009c10:	429d      	cmp	r5, r3
 8009c12:	d91f      	bls.n	8009c54 <_dtoa_r+0x2a4>
 8009c14:	6041      	str	r1, [r0, #4]
 8009c16:	4658      	mov	r0, fp
 8009c18:	f000 fd8e 	bl	800a738 <_Balloc>
 8009c1c:	4682      	mov	sl, r0
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	d13c      	bne.n	8009c9c <_dtoa_r+0x2ec>
 8009c22:	4b1b      	ldr	r3, [pc, #108]	@ (8009c90 <_dtoa_r+0x2e0>)
 8009c24:	4602      	mov	r2, r0
 8009c26:	f240 11af 	movw	r1, #431	@ 0x1af
 8009c2a:	e6d8      	b.n	80099de <_dtoa_r+0x2e>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e7e0      	b.n	8009bf2 <_dtoa_r+0x242>
 8009c30:	2401      	movs	r4, #1
 8009c32:	2300      	movs	r3, #0
 8009c34:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009c38:	f04f 33ff 	mov.w	r3, #4294967295
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	9307      	str	r3, [sp, #28]
 8009c40:	2200      	movs	r2, #0
 8009c42:	2312      	movs	r3, #18
 8009c44:	e7d0      	b.n	8009be8 <_dtoa_r+0x238>
 8009c46:	2301      	movs	r3, #1
 8009c48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c4a:	e7f5      	b.n	8009c38 <_dtoa_r+0x288>
 8009c4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	9307      	str	r3, [sp, #28]
 8009c52:	e7d7      	b.n	8009c04 <_dtoa_r+0x254>
 8009c54:	3101      	adds	r1, #1
 8009c56:	0052      	lsls	r2, r2, #1
 8009c58:	e7d8      	b.n	8009c0c <_dtoa_r+0x25c>
 8009c5a:	bf00      	nop
 8009c5c:	f3af 8000 	nop.w
 8009c60:	636f4361 	.word	0x636f4361
 8009c64:	3fd287a7 	.word	0x3fd287a7
 8009c68:	8b60c8b3 	.word	0x8b60c8b3
 8009c6c:	3fc68a28 	.word	0x3fc68a28
 8009c70:	509f79fb 	.word	0x509f79fb
 8009c74:	3fd34413 	.word	0x3fd34413
 8009c78:	0800bf1d 	.word	0x0800bf1d
 8009c7c:	0800bf34 	.word	0x0800bf34
 8009c80:	7ff00000 	.word	0x7ff00000
 8009c84:	0800beed 	.word	0x0800beed
 8009c88:	3ff80000 	.word	0x3ff80000
 8009c8c:	0800c030 	.word	0x0800c030
 8009c90:	0800bf8c 	.word	0x0800bf8c
 8009c94:	0800bf19 	.word	0x0800bf19
 8009c98:	0800beec 	.word	0x0800beec
 8009c9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ca0:	6018      	str	r0, [r3, #0]
 8009ca2:	9b07      	ldr	r3, [sp, #28]
 8009ca4:	2b0e      	cmp	r3, #14
 8009ca6:	f200 80a4 	bhi.w	8009df2 <_dtoa_r+0x442>
 8009caa:	2c00      	cmp	r4, #0
 8009cac:	f000 80a1 	beq.w	8009df2 <_dtoa_r+0x442>
 8009cb0:	2f00      	cmp	r7, #0
 8009cb2:	dd33      	ble.n	8009d1c <_dtoa_r+0x36c>
 8009cb4:	4bad      	ldr	r3, [pc, #692]	@ (8009f6c <_dtoa_r+0x5bc>)
 8009cb6:	f007 020f 	and.w	r2, r7, #15
 8009cba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cbe:	ed93 7b00 	vldr	d7, [r3]
 8009cc2:	05f8      	lsls	r0, r7, #23
 8009cc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009cc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009ccc:	d516      	bpl.n	8009cfc <_dtoa_r+0x34c>
 8009cce:	4ba8      	ldr	r3, [pc, #672]	@ (8009f70 <_dtoa_r+0x5c0>)
 8009cd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cd8:	f7f6 fdc0 	bl	800085c <__aeabi_ddiv>
 8009cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ce0:	f004 040f 	and.w	r4, r4, #15
 8009ce4:	2603      	movs	r6, #3
 8009ce6:	4da2      	ldr	r5, [pc, #648]	@ (8009f70 <_dtoa_r+0x5c0>)
 8009ce8:	b954      	cbnz	r4, 8009d00 <_dtoa_r+0x350>
 8009cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cf2:	f7f6 fdb3 	bl	800085c <__aeabi_ddiv>
 8009cf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cfa:	e028      	b.n	8009d4e <_dtoa_r+0x39e>
 8009cfc:	2602      	movs	r6, #2
 8009cfe:	e7f2      	b.n	8009ce6 <_dtoa_r+0x336>
 8009d00:	07e1      	lsls	r1, r4, #31
 8009d02:	d508      	bpl.n	8009d16 <_dtoa_r+0x366>
 8009d04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d0c:	f7f6 fc7c 	bl	8000608 <__aeabi_dmul>
 8009d10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d14:	3601      	adds	r6, #1
 8009d16:	1064      	asrs	r4, r4, #1
 8009d18:	3508      	adds	r5, #8
 8009d1a:	e7e5      	b.n	8009ce8 <_dtoa_r+0x338>
 8009d1c:	f000 80d2 	beq.w	8009ec4 <_dtoa_r+0x514>
 8009d20:	427c      	negs	r4, r7
 8009d22:	4b92      	ldr	r3, [pc, #584]	@ (8009f6c <_dtoa_r+0x5bc>)
 8009d24:	4d92      	ldr	r5, [pc, #584]	@ (8009f70 <_dtoa_r+0x5c0>)
 8009d26:	f004 020f 	and.w	r2, r4, #15
 8009d2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d36:	f7f6 fc67 	bl	8000608 <__aeabi_dmul>
 8009d3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d3e:	1124      	asrs	r4, r4, #4
 8009d40:	2300      	movs	r3, #0
 8009d42:	2602      	movs	r6, #2
 8009d44:	2c00      	cmp	r4, #0
 8009d46:	f040 80b2 	bne.w	8009eae <_dtoa_r+0x4fe>
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d1d3      	bne.n	8009cf6 <_dtoa_r+0x346>
 8009d4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f000 80b7 	beq.w	8009ec8 <_dtoa_r+0x518>
 8009d5a:	4b86      	ldr	r3, [pc, #536]	@ (8009f74 <_dtoa_r+0x5c4>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	4620      	mov	r0, r4
 8009d60:	4629      	mov	r1, r5
 8009d62:	f7f6 fec3 	bl	8000aec <__aeabi_dcmplt>
 8009d66:	2800      	cmp	r0, #0
 8009d68:	f000 80ae 	beq.w	8009ec8 <_dtoa_r+0x518>
 8009d6c:	9b07      	ldr	r3, [sp, #28]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f000 80aa 	beq.w	8009ec8 <_dtoa_r+0x518>
 8009d74:	9b00      	ldr	r3, [sp, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	dd37      	ble.n	8009dea <_dtoa_r+0x43a>
 8009d7a:	1e7b      	subs	r3, r7, #1
 8009d7c:	9304      	str	r3, [sp, #16]
 8009d7e:	4620      	mov	r0, r4
 8009d80:	4b7d      	ldr	r3, [pc, #500]	@ (8009f78 <_dtoa_r+0x5c8>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	4629      	mov	r1, r5
 8009d86:	f7f6 fc3f 	bl	8000608 <__aeabi_dmul>
 8009d8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d8e:	9c00      	ldr	r4, [sp, #0]
 8009d90:	3601      	adds	r6, #1
 8009d92:	4630      	mov	r0, r6
 8009d94:	f7f6 fbce 	bl	8000534 <__aeabi_i2d>
 8009d98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d9c:	f7f6 fc34 	bl	8000608 <__aeabi_dmul>
 8009da0:	4b76      	ldr	r3, [pc, #472]	@ (8009f7c <_dtoa_r+0x5cc>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	f7f6 fa7a 	bl	800029c <__adddf3>
 8009da8:	4605      	mov	r5, r0
 8009daa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009dae:	2c00      	cmp	r4, #0
 8009db0:	f040 808d 	bne.w	8009ece <_dtoa_r+0x51e>
 8009db4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009db8:	4b71      	ldr	r3, [pc, #452]	@ (8009f80 <_dtoa_r+0x5d0>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f7f6 fa6c 	bl	8000298 <__aeabi_dsub>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009dc8:	462a      	mov	r2, r5
 8009dca:	4633      	mov	r3, r6
 8009dcc:	f7f6 feac 	bl	8000b28 <__aeabi_dcmpgt>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	f040 828b 	bne.w	800a2ec <_dtoa_r+0x93c>
 8009dd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dda:	462a      	mov	r2, r5
 8009ddc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009de0:	f7f6 fe84 	bl	8000aec <__aeabi_dcmplt>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	f040 8128 	bne.w	800a03a <_dtoa_r+0x68a>
 8009dea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009dee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009df2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f2c0 815a 	blt.w	800a0ae <_dtoa_r+0x6fe>
 8009dfa:	2f0e      	cmp	r7, #14
 8009dfc:	f300 8157 	bgt.w	800a0ae <_dtoa_r+0x6fe>
 8009e00:	4b5a      	ldr	r3, [pc, #360]	@ (8009f6c <_dtoa_r+0x5bc>)
 8009e02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e06:	ed93 7b00 	vldr	d7, [r3]
 8009e0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	ed8d 7b00 	vstr	d7, [sp]
 8009e12:	da03      	bge.n	8009e1c <_dtoa_r+0x46c>
 8009e14:	9b07      	ldr	r3, [sp, #28]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f340 8101 	ble.w	800a01e <_dtoa_r+0x66e>
 8009e1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009e20:	4656      	mov	r6, sl
 8009e22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e26:	4620      	mov	r0, r4
 8009e28:	4629      	mov	r1, r5
 8009e2a:	f7f6 fd17 	bl	800085c <__aeabi_ddiv>
 8009e2e:	f7f6 fe9b 	bl	8000b68 <__aeabi_d2iz>
 8009e32:	4680      	mov	r8, r0
 8009e34:	f7f6 fb7e 	bl	8000534 <__aeabi_i2d>
 8009e38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e3c:	f7f6 fbe4 	bl	8000608 <__aeabi_dmul>
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	4620      	mov	r0, r4
 8009e46:	4629      	mov	r1, r5
 8009e48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009e4c:	f7f6 fa24 	bl	8000298 <__aeabi_dsub>
 8009e50:	f806 4b01 	strb.w	r4, [r6], #1
 8009e54:	9d07      	ldr	r5, [sp, #28]
 8009e56:	eba6 040a 	sub.w	r4, r6, sl
 8009e5a:	42a5      	cmp	r5, r4
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	f040 8117 	bne.w	800a092 <_dtoa_r+0x6e2>
 8009e64:	f7f6 fa1a 	bl	800029c <__adddf3>
 8009e68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	460d      	mov	r5, r1
 8009e70:	f7f6 fe5a 	bl	8000b28 <__aeabi_dcmpgt>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	f040 80f9 	bne.w	800a06c <_dtoa_r+0x6bc>
 8009e7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e7e:	4620      	mov	r0, r4
 8009e80:	4629      	mov	r1, r5
 8009e82:	f7f6 fe29 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e86:	b118      	cbz	r0, 8009e90 <_dtoa_r+0x4e0>
 8009e88:	f018 0f01 	tst.w	r8, #1
 8009e8c:	f040 80ee 	bne.w	800a06c <_dtoa_r+0x6bc>
 8009e90:	4649      	mov	r1, r9
 8009e92:	4658      	mov	r0, fp
 8009e94:	f000 fc90 	bl	800a7b8 <_Bfree>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	7033      	strb	r3, [r6, #0]
 8009e9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e9e:	3701      	adds	r7, #1
 8009ea0:	601f      	str	r7, [r3, #0]
 8009ea2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	f000 831d 	beq.w	800a4e4 <_dtoa_r+0xb34>
 8009eaa:	601e      	str	r6, [r3, #0]
 8009eac:	e31a      	b.n	800a4e4 <_dtoa_r+0xb34>
 8009eae:	07e2      	lsls	r2, r4, #31
 8009eb0:	d505      	bpl.n	8009ebe <_dtoa_r+0x50e>
 8009eb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009eb6:	f7f6 fba7 	bl	8000608 <__aeabi_dmul>
 8009eba:	3601      	adds	r6, #1
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	1064      	asrs	r4, r4, #1
 8009ec0:	3508      	adds	r5, #8
 8009ec2:	e73f      	b.n	8009d44 <_dtoa_r+0x394>
 8009ec4:	2602      	movs	r6, #2
 8009ec6:	e742      	b.n	8009d4e <_dtoa_r+0x39e>
 8009ec8:	9c07      	ldr	r4, [sp, #28]
 8009eca:	9704      	str	r7, [sp, #16]
 8009ecc:	e761      	b.n	8009d92 <_dtoa_r+0x3e2>
 8009ece:	4b27      	ldr	r3, [pc, #156]	@ (8009f6c <_dtoa_r+0x5bc>)
 8009ed0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ed2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ed6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009eda:	4454      	add	r4, sl
 8009edc:	2900      	cmp	r1, #0
 8009ede:	d053      	beq.n	8009f88 <_dtoa_r+0x5d8>
 8009ee0:	4928      	ldr	r1, [pc, #160]	@ (8009f84 <_dtoa_r+0x5d4>)
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	f7f6 fcba 	bl	800085c <__aeabi_ddiv>
 8009ee8:	4633      	mov	r3, r6
 8009eea:	462a      	mov	r2, r5
 8009eec:	f7f6 f9d4 	bl	8000298 <__aeabi_dsub>
 8009ef0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ef4:	4656      	mov	r6, sl
 8009ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009efa:	f7f6 fe35 	bl	8000b68 <__aeabi_d2iz>
 8009efe:	4605      	mov	r5, r0
 8009f00:	f7f6 fb18 	bl	8000534 <__aeabi_i2d>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f0c:	f7f6 f9c4 	bl	8000298 <__aeabi_dsub>
 8009f10:	3530      	adds	r5, #48	@ 0x30
 8009f12:	4602      	mov	r2, r0
 8009f14:	460b      	mov	r3, r1
 8009f16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f1a:	f806 5b01 	strb.w	r5, [r6], #1
 8009f1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f22:	f7f6 fde3 	bl	8000aec <__aeabi_dcmplt>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	d171      	bne.n	800a00e <_dtoa_r+0x65e>
 8009f2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f2e:	4911      	ldr	r1, [pc, #68]	@ (8009f74 <_dtoa_r+0x5c4>)
 8009f30:	2000      	movs	r0, #0
 8009f32:	f7f6 f9b1 	bl	8000298 <__aeabi_dsub>
 8009f36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f3a:	f7f6 fdd7 	bl	8000aec <__aeabi_dcmplt>
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	f040 8095 	bne.w	800a06e <_dtoa_r+0x6be>
 8009f44:	42a6      	cmp	r6, r4
 8009f46:	f43f af50 	beq.w	8009dea <_dtoa_r+0x43a>
 8009f4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8009f78 <_dtoa_r+0x5c8>)
 8009f50:	2200      	movs	r2, #0
 8009f52:	f7f6 fb59 	bl	8000608 <__aeabi_dmul>
 8009f56:	4b08      	ldr	r3, [pc, #32]	@ (8009f78 <_dtoa_r+0x5c8>)
 8009f58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f62:	f7f6 fb51 	bl	8000608 <__aeabi_dmul>
 8009f66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f6a:	e7c4      	b.n	8009ef6 <_dtoa_r+0x546>
 8009f6c:	0800c030 	.word	0x0800c030
 8009f70:	0800c008 	.word	0x0800c008
 8009f74:	3ff00000 	.word	0x3ff00000
 8009f78:	40240000 	.word	0x40240000
 8009f7c:	401c0000 	.word	0x401c0000
 8009f80:	40140000 	.word	0x40140000
 8009f84:	3fe00000 	.word	0x3fe00000
 8009f88:	4631      	mov	r1, r6
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	f7f6 fb3c 	bl	8000608 <__aeabi_dmul>
 8009f90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f94:	9415      	str	r4, [sp, #84]	@ 0x54
 8009f96:	4656      	mov	r6, sl
 8009f98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f9c:	f7f6 fde4 	bl	8000b68 <__aeabi_d2iz>
 8009fa0:	4605      	mov	r5, r0
 8009fa2:	f7f6 fac7 	bl	8000534 <__aeabi_i2d>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	460b      	mov	r3, r1
 8009faa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fae:	f7f6 f973 	bl	8000298 <__aeabi_dsub>
 8009fb2:	3530      	adds	r5, #48	@ 0x30
 8009fb4:	f806 5b01 	strb.w	r5, [r6], #1
 8009fb8:	4602      	mov	r2, r0
 8009fba:	460b      	mov	r3, r1
 8009fbc:	42a6      	cmp	r6, r4
 8009fbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009fc2:	f04f 0200 	mov.w	r2, #0
 8009fc6:	d124      	bne.n	800a012 <_dtoa_r+0x662>
 8009fc8:	4bac      	ldr	r3, [pc, #688]	@ (800a27c <_dtoa_r+0x8cc>)
 8009fca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009fce:	f7f6 f965 	bl	800029c <__adddf3>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fda:	f7f6 fda5 	bl	8000b28 <__aeabi_dcmpgt>
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d145      	bne.n	800a06e <_dtoa_r+0x6be>
 8009fe2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009fe6:	49a5      	ldr	r1, [pc, #660]	@ (800a27c <_dtoa_r+0x8cc>)
 8009fe8:	2000      	movs	r0, #0
 8009fea:	f7f6 f955 	bl	8000298 <__aeabi_dsub>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ff6:	f7f6 fd79 	bl	8000aec <__aeabi_dcmplt>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	f43f aef5 	beq.w	8009dea <_dtoa_r+0x43a>
 800a000:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a002:	1e73      	subs	r3, r6, #1
 800a004:	9315      	str	r3, [sp, #84]	@ 0x54
 800a006:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a00a:	2b30      	cmp	r3, #48	@ 0x30
 800a00c:	d0f8      	beq.n	800a000 <_dtoa_r+0x650>
 800a00e:	9f04      	ldr	r7, [sp, #16]
 800a010:	e73e      	b.n	8009e90 <_dtoa_r+0x4e0>
 800a012:	4b9b      	ldr	r3, [pc, #620]	@ (800a280 <_dtoa_r+0x8d0>)
 800a014:	f7f6 faf8 	bl	8000608 <__aeabi_dmul>
 800a018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a01c:	e7bc      	b.n	8009f98 <_dtoa_r+0x5e8>
 800a01e:	d10c      	bne.n	800a03a <_dtoa_r+0x68a>
 800a020:	4b98      	ldr	r3, [pc, #608]	@ (800a284 <_dtoa_r+0x8d4>)
 800a022:	2200      	movs	r2, #0
 800a024:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a028:	f7f6 faee 	bl	8000608 <__aeabi_dmul>
 800a02c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a030:	f7f6 fd70 	bl	8000b14 <__aeabi_dcmpge>
 800a034:	2800      	cmp	r0, #0
 800a036:	f000 8157 	beq.w	800a2e8 <_dtoa_r+0x938>
 800a03a:	2400      	movs	r4, #0
 800a03c:	4625      	mov	r5, r4
 800a03e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a040:	43db      	mvns	r3, r3
 800a042:	9304      	str	r3, [sp, #16]
 800a044:	4656      	mov	r6, sl
 800a046:	2700      	movs	r7, #0
 800a048:	4621      	mov	r1, r4
 800a04a:	4658      	mov	r0, fp
 800a04c:	f000 fbb4 	bl	800a7b8 <_Bfree>
 800a050:	2d00      	cmp	r5, #0
 800a052:	d0dc      	beq.n	800a00e <_dtoa_r+0x65e>
 800a054:	b12f      	cbz	r7, 800a062 <_dtoa_r+0x6b2>
 800a056:	42af      	cmp	r7, r5
 800a058:	d003      	beq.n	800a062 <_dtoa_r+0x6b2>
 800a05a:	4639      	mov	r1, r7
 800a05c:	4658      	mov	r0, fp
 800a05e:	f000 fbab 	bl	800a7b8 <_Bfree>
 800a062:	4629      	mov	r1, r5
 800a064:	4658      	mov	r0, fp
 800a066:	f000 fba7 	bl	800a7b8 <_Bfree>
 800a06a:	e7d0      	b.n	800a00e <_dtoa_r+0x65e>
 800a06c:	9704      	str	r7, [sp, #16]
 800a06e:	4633      	mov	r3, r6
 800a070:	461e      	mov	r6, r3
 800a072:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a076:	2a39      	cmp	r2, #57	@ 0x39
 800a078:	d107      	bne.n	800a08a <_dtoa_r+0x6da>
 800a07a:	459a      	cmp	sl, r3
 800a07c:	d1f8      	bne.n	800a070 <_dtoa_r+0x6c0>
 800a07e:	9a04      	ldr	r2, [sp, #16]
 800a080:	3201      	adds	r2, #1
 800a082:	9204      	str	r2, [sp, #16]
 800a084:	2230      	movs	r2, #48	@ 0x30
 800a086:	f88a 2000 	strb.w	r2, [sl]
 800a08a:	781a      	ldrb	r2, [r3, #0]
 800a08c:	3201      	adds	r2, #1
 800a08e:	701a      	strb	r2, [r3, #0]
 800a090:	e7bd      	b.n	800a00e <_dtoa_r+0x65e>
 800a092:	4b7b      	ldr	r3, [pc, #492]	@ (800a280 <_dtoa_r+0x8d0>)
 800a094:	2200      	movs	r2, #0
 800a096:	f7f6 fab7 	bl	8000608 <__aeabi_dmul>
 800a09a:	2200      	movs	r2, #0
 800a09c:	2300      	movs	r3, #0
 800a09e:	4604      	mov	r4, r0
 800a0a0:	460d      	mov	r5, r1
 800a0a2:	f7f6 fd19 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	f43f aebb 	beq.w	8009e22 <_dtoa_r+0x472>
 800a0ac:	e6f0      	b.n	8009e90 <_dtoa_r+0x4e0>
 800a0ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a0b0:	2a00      	cmp	r2, #0
 800a0b2:	f000 80db 	beq.w	800a26c <_dtoa_r+0x8bc>
 800a0b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0b8:	2a01      	cmp	r2, #1
 800a0ba:	f300 80bf 	bgt.w	800a23c <_dtoa_r+0x88c>
 800a0be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a0c0:	2a00      	cmp	r2, #0
 800a0c2:	f000 80b7 	beq.w	800a234 <_dtoa_r+0x884>
 800a0c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a0ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a0cc:	4646      	mov	r6, r8
 800a0ce:	9a08      	ldr	r2, [sp, #32]
 800a0d0:	2101      	movs	r1, #1
 800a0d2:	441a      	add	r2, r3
 800a0d4:	4658      	mov	r0, fp
 800a0d6:	4498      	add	r8, r3
 800a0d8:	9208      	str	r2, [sp, #32]
 800a0da:	f000 fc21 	bl	800a920 <__i2b>
 800a0de:	4605      	mov	r5, r0
 800a0e0:	b15e      	cbz	r6, 800a0fa <_dtoa_r+0x74a>
 800a0e2:	9b08      	ldr	r3, [sp, #32]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	dd08      	ble.n	800a0fa <_dtoa_r+0x74a>
 800a0e8:	42b3      	cmp	r3, r6
 800a0ea:	9a08      	ldr	r2, [sp, #32]
 800a0ec:	bfa8      	it	ge
 800a0ee:	4633      	movge	r3, r6
 800a0f0:	eba8 0803 	sub.w	r8, r8, r3
 800a0f4:	1af6      	subs	r6, r6, r3
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	9308      	str	r3, [sp, #32]
 800a0fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0fc:	b1f3      	cbz	r3, 800a13c <_dtoa_r+0x78c>
 800a0fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a100:	2b00      	cmp	r3, #0
 800a102:	f000 80b7 	beq.w	800a274 <_dtoa_r+0x8c4>
 800a106:	b18c      	cbz	r4, 800a12c <_dtoa_r+0x77c>
 800a108:	4629      	mov	r1, r5
 800a10a:	4622      	mov	r2, r4
 800a10c:	4658      	mov	r0, fp
 800a10e:	f000 fcc7 	bl	800aaa0 <__pow5mult>
 800a112:	464a      	mov	r2, r9
 800a114:	4601      	mov	r1, r0
 800a116:	4605      	mov	r5, r0
 800a118:	4658      	mov	r0, fp
 800a11a:	f000 fc17 	bl	800a94c <__multiply>
 800a11e:	4649      	mov	r1, r9
 800a120:	9004      	str	r0, [sp, #16]
 800a122:	4658      	mov	r0, fp
 800a124:	f000 fb48 	bl	800a7b8 <_Bfree>
 800a128:	9b04      	ldr	r3, [sp, #16]
 800a12a:	4699      	mov	r9, r3
 800a12c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a12e:	1b1a      	subs	r2, r3, r4
 800a130:	d004      	beq.n	800a13c <_dtoa_r+0x78c>
 800a132:	4649      	mov	r1, r9
 800a134:	4658      	mov	r0, fp
 800a136:	f000 fcb3 	bl	800aaa0 <__pow5mult>
 800a13a:	4681      	mov	r9, r0
 800a13c:	2101      	movs	r1, #1
 800a13e:	4658      	mov	r0, fp
 800a140:	f000 fbee 	bl	800a920 <__i2b>
 800a144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a146:	4604      	mov	r4, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f000 81cf 	beq.w	800a4ec <_dtoa_r+0xb3c>
 800a14e:	461a      	mov	r2, r3
 800a150:	4601      	mov	r1, r0
 800a152:	4658      	mov	r0, fp
 800a154:	f000 fca4 	bl	800aaa0 <__pow5mult>
 800a158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	4604      	mov	r4, r0
 800a15e:	f300 8095 	bgt.w	800a28c <_dtoa_r+0x8dc>
 800a162:	9b02      	ldr	r3, [sp, #8]
 800a164:	2b00      	cmp	r3, #0
 800a166:	f040 8087 	bne.w	800a278 <_dtoa_r+0x8c8>
 800a16a:	9b03      	ldr	r3, [sp, #12]
 800a16c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a170:	2b00      	cmp	r3, #0
 800a172:	f040 8089 	bne.w	800a288 <_dtoa_r+0x8d8>
 800a176:	9b03      	ldr	r3, [sp, #12]
 800a178:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a17c:	0d1b      	lsrs	r3, r3, #20
 800a17e:	051b      	lsls	r3, r3, #20
 800a180:	b12b      	cbz	r3, 800a18e <_dtoa_r+0x7de>
 800a182:	9b08      	ldr	r3, [sp, #32]
 800a184:	3301      	adds	r3, #1
 800a186:	9308      	str	r3, [sp, #32]
 800a188:	f108 0801 	add.w	r8, r8, #1
 800a18c:	2301      	movs	r3, #1
 800a18e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a190:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a192:	2b00      	cmp	r3, #0
 800a194:	f000 81b0 	beq.w	800a4f8 <_dtoa_r+0xb48>
 800a198:	6923      	ldr	r3, [r4, #16]
 800a19a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a19e:	6918      	ldr	r0, [r3, #16]
 800a1a0:	f000 fb72 	bl	800a888 <__hi0bits>
 800a1a4:	f1c0 0020 	rsb	r0, r0, #32
 800a1a8:	9b08      	ldr	r3, [sp, #32]
 800a1aa:	4418      	add	r0, r3
 800a1ac:	f010 001f 	ands.w	r0, r0, #31
 800a1b0:	d077      	beq.n	800a2a2 <_dtoa_r+0x8f2>
 800a1b2:	f1c0 0320 	rsb	r3, r0, #32
 800a1b6:	2b04      	cmp	r3, #4
 800a1b8:	dd6b      	ble.n	800a292 <_dtoa_r+0x8e2>
 800a1ba:	9b08      	ldr	r3, [sp, #32]
 800a1bc:	f1c0 001c 	rsb	r0, r0, #28
 800a1c0:	4403      	add	r3, r0
 800a1c2:	4480      	add	r8, r0
 800a1c4:	4406      	add	r6, r0
 800a1c6:	9308      	str	r3, [sp, #32]
 800a1c8:	f1b8 0f00 	cmp.w	r8, #0
 800a1cc:	dd05      	ble.n	800a1da <_dtoa_r+0x82a>
 800a1ce:	4649      	mov	r1, r9
 800a1d0:	4642      	mov	r2, r8
 800a1d2:	4658      	mov	r0, fp
 800a1d4:	f000 fcbe 	bl	800ab54 <__lshift>
 800a1d8:	4681      	mov	r9, r0
 800a1da:	9b08      	ldr	r3, [sp, #32]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	dd05      	ble.n	800a1ec <_dtoa_r+0x83c>
 800a1e0:	4621      	mov	r1, r4
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	4658      	mov	r0, fp
 800a1e6:	f000 fcb5 	bl	800ab54 <__lshift>
 800a1ea:	4604      	mov	r4, r0
 800a1ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d059      	beq.n	800a2a6 <_dtoa_r+0x8f6>
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	4648      	mov	r0, r9
 800a1f6:	f000 fd19 	bl	800ac2c <__mcmp>
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	da53      	bge.n	800a2a6 <_dtoa_r+0x8f6>
 800a1fe:	1e7b      	subs	r3, r7, #1
 800a200:	9304      	str	r3, [sp, #16]
 800a202:	4649      	mov	r1, r9
 800a204:	2300      	movs	r3, #0
 800a206:	220a      	movs	r2, #10
 800a208:	4658      	mov	r0, fp
 800a20a:	f000 faf7 	bl	800a7fc <__multadd>
 800a20e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a210:	4681      	mov	r9, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	f000 8172 	beq.w	800a4fc <_dtoa_r+0xb4c>
 800a218:	2300      	movs	r3, #0
 800a21a:	4629      	mov	r1, r5
 800a21c:	220a      	movs	r2, #10
 800a21e:	4658      	mov	r0, fp
 800a220:	f000 faec 	bl	800a7fc <__multadd>
 800a224:	9b00      	ldr	r3, [sp, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	4605      	mov	r5, r0
 800a22a:	dc67      	bgt.n	800a2fc <_dtoa_r+0x94c>
 800a22c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a22e:	2b02      	cmp	r3, #2
 800a230:	dc41      	bgt.n	800a2b6 <_dtoa_r+0x906>
 800a232:	e063      	b.n	800a2fc <_dtoa_r+0x94c>
 800a234:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a236:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a23a:	e746      	b.n	800a0ca <_dtoa_r+0x71a>
 800a23c:	9b07      	ldr	r3, [sp, #28]
 800a23e:	1e5c      	subs	r4, r3, #1
 800a240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a242:	42a3      	cmp	r3, r4
 800a244:	bfbf      	itttt	lt
 800a246:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a248:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a24a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a24c:	1ae3      	sublt	r3, r4, r3
 800a24e:	bfb4      	ite	lt
 800a250:	18d2      	addlt	r2, r2, r3
 800a252:	1b1c      	subge	r4, r3, r4
 800a254:	9b07      	ldr	r3, [sp, #28]
 800a256:	bfbc      	itt	lt
 800a258:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a25a:	2400      	movlt	r4, #0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	bfb5      	itete	lt
 800a260:	eba8 0603 	sublt.w	r6, r8, r3
 800a264:	9b07      	ldrge	r3, [sp, #28]
 800a266:	2300      	movlt	r3, #0
 800a268:	4646      	movge	r6, r8
 800a26a:	e730      	b.n	800a0ce <_dtoa_r+0x71e>
 800a26c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a26e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a270:	4646      	mov	r6, r8
 800a272:	e735      	b.n	800a0e0 <_dtoa_r+0x730>
 800a274:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a276:	e75c      	b.n	800a132 <_dtoa_r+0x782>
 800a278:	2300      	movs	r3, #0
 800a27a:	e788      	b.n	800a18e <_dtoa_r+0x7de>
 800a27c:	3fe00000 	.word	0x3fe00000
 800a280:	40240000 	.word	0x40240000
 800a284:	40140000 	.word	0x40140000
 800a288:	9b02      	ldr	r3, [sp, #8]
 800a28a:	e780      	b.n	800a18e <_dtoa_r+0x7de>
 800a28c:	2300      	movs	r3, #0
 800a28e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a290:	e782      	b.n	800a198 <_dtoa_r+0x7e8>
 800a292:	d099      	beq.n	800a1c8 <_dtoa_r+0x818>
 800a294:	9a08      	ldr	r2, [sp, #32]
 800a296:	331c      	adds	r3, #28
 800a298:	441a      	add	r2, r3
 800a29a:	4498      	add	r8, r3
 800a29c:	441e      	add	r6, r3
 800a29e:	9208      	str	r2, [sp, #32]
 800a2a0:	e792      	b.n	800a1c8 <_dtoa_r+0x818>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	e7f6      	b.n	800a294 <_dtoa_r+0x8e4>
 800a2a6:	9b07      	ldr	r3, [sp, #28]
 800a2a8:	9704      	str	r7, [sp, #16]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	dc20      	bgt.n	800a2f0 <_dtoa_r+0x940>
 800a2ae:	9300      	str	r3, [sp, #0]
 800a2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	dd1e      	ble.n	800a2f4 <_dtoa_r+0x944>
 800a2b6:	9b00      	ldr	r3, [sp, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f47f aec0 	bne.w	800a03e <_dtoa_r+0x68e>
 800a2be:	4621      	mov	r1, r4
 800a2c0:	2205      	movs	r2, #5
 800a2c2:	4658      	mov	r0, fp
 800a2c4:	f000 fa9a 	bl	800a7fc <__multadd>
 800a2c8:	4601      	mov	r1, r0
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	4648      	mov	r0, r9
 800a2ce:	f000 fcad 	bl	800ac2c <__mcmp>
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	f77f aeb3 	ble.w	800a03e <_dtoa_r+0x68e>
 800a2d8:	4656      	mov	r6, sl
 800a2da:	2331      	movs	r3, #49	@ 0x31
 800a2dc:	f806 3b01 	strb.w	r3, [r6], #1
 800a2e0:	9b04      	ldr	r3, [sp, #16]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	9304      	str	r3, [sp, #16]
 800a2e6:	e6ae      	b.n	800a046 <_dtoa_r+0x696>
 800a2e8:	9c07      	ldr	r4, [sp, #28]
 800a2ea:	9704      	str	r7, [sp, #16]
 800a2ec:	4625      	mov	r5, r4
 800a2ee:	e7f3      	b.n	800a2d8 <_dtoa_r+0x928>
 800a2f0:	9b07      	ldr	r3, [sp, #28]
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f000 8104 	beq.w	800a504 <_dtoa_r+0xb54>
 800a2fc:	2e00      	cmp	r6, #0
 800a2fe:	dd05      	ble.n	800a30c <_dtoa_r+0x95c>
 800a300:	4629      	mov	r1, r5
 800a302:	4632      	mov	r2, r6
 800a304:	4658      	mov	r0, fp
 800a306:	f000 fc25 	bl	800ab54 <__lshift>
 800a30a:	4605      	mov	r5, r0
 800a30c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d05a      	beq.n	800a3c8 <_dtoa_r+0xa18>
 800a312:	6869      	ldr	r1, [r5, #4]
 800a314:	4658      	mov	r0, fp
 800a316:	f000 fa0f 	bl	800a738 <_Balloc>
 800a31a:	4606      	mov	r6, r0
 800a31c:	b928      	cbnz	r0, 800a32a <_dtoa_r+0x97a>
 800a31e:	4b84      	ldr	r3, [pc, #528]	@ (800a530 <_dtoa_r+0xb80>)
 800a320:	4602      	mov	r2, r0
 800a322:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a326:	f7ff bb5a 	b.w	80099de <_dtoa_r+0x2e>
 800a32a:	692a      	ldr	r2, [r5, #16]
 800a32c:	3202      	adds	r2, #2
 800a32e:	0092      	lsls	r2, r2, #2
 800a330:	f105 010c 	add.w	r1, r5, #12
 800a334:	300c      	adds	r0, #12
 800a336:	f000 ffaf 	bl	800b298 <memcpy>
 800a33a:	2201      	movs	r2, #1
 800a33c:	4631      	mov	r1, r6
 800a33e:	4658      	mov	r0, fp
 800a340:	f000 fc08 	bl	800ab54 <__lshift>
 800a344:	f10a 0301 	add.w	r3, sl, #1
 800a348:	9307      	str	r3, [sp, #28]
 800a34a:	9b00      	ldr	r3, [sp, #0]
 800a34c:	4453      	add	r3, sl
 800a34e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a350:	9b02      	ldr	r3, [sp, #8]
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	462f      	mov	r7, r5
 800a358:	930a      	str	r3, [sp, #40]	@ 0x28
 800a35a:	4605      	mov	r5, r0
 800a35c:	9b07      	ldr	r3, [sp, #28]
 800a35e:	4621      	mov	r1, r4
 800a360:	3b01      	subs	r3, #1
 800a362:	4648      	mov	r0, r9
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	f7ff fa98 	bl	800989a <quorem>
 800a36a:	4639      	mov	r1, r7
 800a36c:	9002      	str	r0, [sp, #8]
 800a36e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a372:	4648      	mov	r0, r9
 800a374:	f000 fc5a 	bl	800ac2c <__mcmp>
 800a378:	462a      	mov	r2, r5
 800a37a:	9008      	str	r0, [sp, #32]
 800a37c:	4621      	mov	r1, r4
 800a37e:	4658      	mov	r0, fp
 800a380:	f000 fc70 	bl	800ac64 <__mdiff>
 800a384:	68c2      	ldr	r2, [r0, #12]
 800a386:	4606      	mov	r6, r0
 800a388:	bb02      	cbnz	r2, 800a3cc <_dtoa_r+0xa1c>
 800a38a:	4601      	mov	r1, r0
 800a38c:	4648      	mov	r0, r9
 800a38e:	f000 fc4d 	bl	800ac2c <__mcmp>
 800a392:	4602      	mov	r2, r0
 800a394:	4631      	mov	r1, r6
 800a396:	4658      	mov	r0, fp
 800a398:	920e      	str	r2, [sp, #56]	@ 0x38
 800a39a:	f000 fa0d 	bl	800a7b8 <_Bfree>
 800a39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3a2:	9e07      	ldr	r6, [sp, #28]
 800a3a4:	ea43 0102 	orr.w	r1, r3, r2
 800a3a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3aa:	4319      	orrs	r1, r3
 800a3ac:	d110      	bne.n	800a3d0 <_dtoa_r+0xa20>
 800a3ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a3b2:	d029      	beq.n	800a408 <_dtoa_r+0xa58>
 800a3b4:	9b08      	ldr	r3, [sp, #32]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	dd02      	ble.n	800a3c0 <_dtoa_r+0xa10>
 800a3ba:	9b02      	ldr	r3, [sp, #8]
 800a3bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a3c0:	9b00      	ldr	r3, [sp, #0]
 800a3c2:	f883 8000 	strb.w	r8, [r3]
 800a3c6:	e63f      	b.n	800a048 <_dtoa_r+0x698>
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	e7bb      	b.n	800a344 <_dtoa_r+0x994>
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	e7e1      	b.n	800a394 <_dtoa_r+0x9e4>
 800a3d0:	9b08      	ldr	r3, [sp, #32]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	db04      	blt.n	800a3e0 <_dtoa_r+0xa30>
 800a3d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3d8:	430b      	orrs	r3, r1
 800a3da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3dc:	430b      	orrs	r3, r1
 800a3de:	d120      	bne.n	800a422 <_dtoa_r+0xa72>
 800a3e0:	2a00      	cmp	r2, #0
 800a3e2:	dded      	ble.n	800a3c0 <_dtoa_r+0xa10>
 800a3e4:	4649      	mov	r1, r9
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	4658      	mov	r0, fp
 800a3ea:	f000 fbb3 	bl	800ab54 <__lshift>
 800a3ee:	4621      	mov	r1, r4
 800a3f0:	4681      	mov	r9, r0
 800a3f2:	f000 fc1b 	bl	800ac2c <__mcmp>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	dc03      	bgt.n	800a402 <_dtoa_r+0xa52>
 800a3fa:	d1e1      	bne.n	800a3c0 <_dtoa_r+0xa10>
 800a3fc:	f018 0f01 	tst.w	r8, #1
 800a400:	d0de      	beq.n	800a3c0 <_dtoa_r+0xa10>
 800a402:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a406:	d1d8      	bne.n	800a3ba <_dtoa_r+0xa0a>
 800a408:	9a00      	ldr	r2, [sp, #0]
 800a40a:	2339      	movs	r3, #57	@ 0x39
 800a40c:	7013      	strb	r3, [r2, #0]
 800a40e:	4633      	mov	r3, r6
 800a410:	461e      	mov	r6, r3
 800a412:	3b01      	subs	r3, #1
 800a414:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a418:	2a39      	cmp	r2, #57	@ 0x39
 800a41a:	d052      	beq.n	800a4c2 <_dtoa_r+0xb12>
 800a41c:	3201      	adds	r2, #1
 800a41e:	701a      	strb	r2, [r3, #0]
 800a420:	e612      	b.n	800a048 <_dtoa_r+0x698>
 800a422:	2a00      	cmp	r2, #0
 800a424:	dd07      	ble.n	800a436 <_dtoa_r+0xa86>
 800a426:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a42a:	d0ed      	beq.n	800a408 <_dtoa_r+0xa58>
 800a42c:	9a00      	ldr	r2, [sp, #0]
 800a42e:	f108 0301 	add.w	r3, r8, #1
 800a432:	7013      	strb	r3, [r2, #0]
 800a434:	e608      	b.n	800a048 <_dtoa_r+0x698>
 800a436:	9b07      	ldr	r3, [sp, #28]
 800a438:	9a07      	ldr	r2, [sp, #28]
 800a43a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a43e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a440:	4293      	cmp	r3, r2
 800a442:	d028      	beq.n	800a496 <_dtoa_r+0xae6>
 800a444:	4649      	mov	r1, r9
 800a446:	2300      	movs	r3, #0
 800a448:	220a      	movs	r2, #10
 800a44a:	4658      	mov	r0, fp
 800a44c:	f000 f9d6 	bl	800a7fc <__multadd>
 800a450:	42af      	cmp	r7, r5
 800a452:	4681      	mov	r9, r0
 800a454:	f04f 0300 	mov.w	r3, #0
 800a458:	f04f 020a 	mov.w	r2, #10
 800a45c:	4639      	mov	r1, r7
 800a45e:	4658      	mov	r0, fp
 800a460:	d107      	bne.n	800a472 <_dtoa_r+0xac2>
 800a462:	f000 f9cb 	bl	800a7fc <__multadd>
 800a466:	4607      	mov	r7, r0
 800a468:	4605      	mov	r5, r0
 800a46a:	9b07      	ldr	r3, [sp, #28]
 800a46c:	3301      	adds	r3, #1
 800a46e:	9307      	str	r3, [sp, #28]
 800a470:	e774      	b.n	800a35c <_dtoa_r+0x9ac>
 800a472:	f000 f9c3 	bl	800a7fc <__multadd>
 800a476:	4629      	mov	r1, r5
 800a478:	4607      	mov	r7, r0
 800a47a:	2300      	movs	r3, #0
 800a47c:	220a      	movs	r2, #10
 800a47e:	4658      	mov	r0, fp
 800a480:	f000 f9bc 	bl	800a7fc <__multadd>
 800a484:	4605      	mov	r5, r0
 800a486:	e7f0      	b.n	800a46a <_dtoa_r+0xaba>
 800a488:	9b00      	ldr	r3, [sp, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	bfcc      	ite	gt
 800a48e:	461e      	movgt	r6, r3
 800a490:	2601      	movle	r6, #1
 800a492:	4456      	add	r6, sl
 800a494:	2700      	movs	r7, #0
 800a496:	4649      	mov	r1, r9
 800a498:	2201      	movs	r2, #1
 800a49a:	4658      	mov	r0, fp
 800a49c:	f000 fb5a 	bl	800ab54 <__lshift>
 800a4a0:	4621      	mov	r1, r4
 800a4a2:	4681      	mov	r9, r0
 800a4a4:	f000 fbc2 	bl	800ac2c <__mcmp>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	dcb0      	bgt.n	800a40e <_dtoa_r+0xa5e>
 800a4ac:	d102      	bne.n	800a4b4 <_dtoa_r+0xb04>
 800a4ae:	f018 0f01 	tst.w	r8, #1
 800a4b2:	d1ac      	bne.n	800a40e <_dtoa_r+0xa5e>
 800a4b4:	4633      	mov	r3, r6
 800a4b6:	461e      	mov	r6, r3
 800a4b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4bc:	2a30      	cmp	r2, #48	@ 0x30
 800a4be:	d0fa      	beq.n	800a4b6 <_dtoa_r+0xb06>
 800a4c0:	e5c2      	b.n	800a048 <_dtoa_r+0x698>
 800a4c2:	459a      	cmp	sl, r3
 800a4c4:	d1a4      	bne.n	800a410 <_dtoa_r+0xa60>
 800a4c6:	9b04      	ldr	r3, [sp, #16]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	9304      	str	r3, [sp, #16]
 800a4cc:	2331      	movs	r3, #49	@ 0x31
 800a4ce:	f88a 3000 	strb.w	r3, [sl]
 800a4d2:	e5b9      	b.n	800a048 <_dtoa_r+0x698>
 800a4d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a4d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a534 <_dtoa_r+0xb84>
 800a4da:	b11b      	cbz	r3, 800a4e4 <_dtoa_r+0xb34>
 800a4dc:	f10a 0308 	add.w	r3, sl, #8
 800a4e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a4e2:	6013      	str	r3, [r2, #0]
 800a4e4:	4650      	mov	r0, sl
 800a4e6:	b019      	add	sp, #100	@ 0x64
 800a4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	f77f ae37 	ble.w	800a162 <_dtoa_r+0x7b2>
 800a4f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4f8:	2001      	movs	r0, #1
 800a4fa:	e655      	b.n	800a1a8 <_dtoa_r+0x7f8>
 800a4fc:	9b00      	ldr	r3, [sp, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f77f aed6 	ble.w	800a2b0 <_dtoa_r+0x900>
 800a504:	4656      	mov	r6, sl
 800a506:	4621      	mov	r1, r4
 800a508:	4648      	mov	r0, r9
 800a50a:	f7ff f9c6 	bl	800989a <quorem>
 800a50e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a512:	f806 8b01 	strb.w	r8, [r6], #1
 800a516:	9b00      	ldr	r3, [sp, #0]
 800a518:	eba6 020a 	sub.w	r2, r6, sl
 800a51c:	4293      	cmp	r3, r2
 800a51e:	ddb3      	ble.n	800a488 <_dtoa_r+0xad8>
 800a520:	4649      	mov	r1, r9
 800a522:	2300      	movs	r3, #0
 800a524:	220a      	movs	r2, #10
 800a526:	4658      	mov	r0, fp
 800a528:	f000 f968 	bl	800a7fc <__multadd>
 800a52c:	4681      	mov	r9, r0
 800a52e:	e7ea      	b.n	800a506 <_dtoa_r+0xb56>
 800a530:	0800bf8c 	.word	0x0800bf8c
 800a534:	0800bf10 	.word	0x0800bf10

0800a538 <_free_r>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	4605      	mov	r5, r0
 800a53c:	2900      	cmp	r1, #0
 800a53e:	d041      	beq.n	800a5c4 <_free_r+0x8c>
 800a540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a544:	1f0c      	subs	r4, r1, #4
 800a546:	2b00      	cmp	r3, #0
 800a548:	bfb8      	it	lt
 800a54a:	18e4      	addlt	r4, r4, r3
 800a54c:	f000 f8e8 	bl	800a720 <__malloc_lock>
 800a550:	4a1d      	ldr	r2, [pc, #116]	@ (800a5c8 <_free_r+0x90>)
 800a552:	6813      	ldr	r3, [r2, #0]
 800a554:	b933      	cbnz	r3, 800a564 <_free_r+0x2c>
 800a556:	6063      	str	r3, [r4, #4]
 800a558:	6014      	str	r4, [r2, #0]
 800a55a:	4628      	mov	r0, r5
 800a55c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a560:	f000 b8e4 	b.w	800a72c <__malloc_unlock>
 800a564:	42a3      	cmp	r3, r4
 800a566:	d908      	bls.n	800a57a <_free_r+0x42>
 800a568:	6820      	ldr	r0, [r4, #0]
 800a56a:	1821      	adds	r1, r4, r0
 800a56c:	428b      	cmp	r3, r1
 800a56e:	bf01      	itttt	eq
 800a570:	6819      	ldreq	r1, [r3, #0]
 800a572:	685b      	ldreq	r3, [r3, #4]
 800a574:	1809      	addeq	r1, r1, r0
 800a576:	6021      	streq	r1, [r4, #0]
 800a578:	e7ed      	b.n	800a556 <_free_r+0x1e>
 800a57a:	461a      	mov	r2, r3
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	b10b      	cbz	r3, 800a584 <_free_r+0x4c>
 800a580:	42a3      	cmp	r3, r4
 800a582:	d9fa      	bls.n	800a57a <_free_r+0x42>
 800a584:	6811      	ldr	r1, [r2, #0]
 800a586:	1850      	adds	r0, r2, r1
 800a588:	42a0      	cmp	r0, r4
 800a58a:	d10b      	bne.n	800a5a4 <_free_r+0x6c>
 800a58c:	6820      	ldr	r0, [r4, #0]
 800a58e:	4401      	add	r1, r0
 800a590:	1850      	adds	r0, r2, r1
 800a592:	4283      	cmp	r3, r0
 800a594:	6011      	str	r1, [r2, #0]
 800a596:	d1e0      	bne.n	800a55a <_free_r+0x22>
 800a598:	6818      	ldr	r0, [r3, #0]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	6053      	str	r3, [r2, #4]
 800a59e:	4408      	add	r0, r1
 800a5a0:	6010      	str	r0, [r2, #0]
 800a5a2:	e7da      	b.n	800a55a <_free_r+0x22>
 800a5a4:	d902      	bls.n	800a5ac <_free_r+0x74>
 800a5a6:	230c      	movs	r3, #12
 800a5a8:	602b      	str	r3, [r5, #0]
 800a5aa:	e7d6      	b.n	800a55a <_free_r+0x22>
 800a5ac:	6820      	ldr	r0, [r4, #0]
 800a5ae:	1821      	adds	r1, r4, r0
 800a5b0:	428b      	cmp	r3, r1
 800a5b2:	bf04      	itt	eq
 800a5b4:	6819      	ldreq	r1, [r3, #0]
 800a5b6:	685b      	ldreq	r3, [r3, #4]
 800a5b8:	6063      	str	r3, [r4, #4]
 800a5ba:	bf04      	itt	eq
 800a5bc:	1809      	addeq	r1, r1, r0
 800a5be:	6021      	streq	r1, [r4, #0]
 800a5c0:	6054      	str	r4, [r2, #4]
 800a5c2:	e7ca      	b.n	800a55a <_free_r+0x22>
 800a5c4:	bd38      	pop	{r3, r4, r5, pc}
 800a5c6:	bf00      	nop
 800a5c8:	20002068 	.word	0x20002068

0800a5cc <malloc>:
 800a5cc:	4b02      	ldr	r3, [pc, #8]	@ (800a5d8 <malloc+0xc>)
 800a5ce:	4601      	mov	r1, r0
 800a5d0:	6818      	ldr	r0, [r3, #0]
 800a5d2:	f000 b825 	b.w	800a620 <_malloc_r>
 800a5d6:	bf00      	nop
 800a5d8:	20000108 	.word	0x20000108

0800a5dc <sbrk_aligned>:
 800a5dc:	b570      	push	{r4, r5, r6, lr}
 800a5de:	4e0f      	ldr	r6, [pc, #60]	@ (800a61c <sbrk_aligned+0x40>)
 800a5e0:	460c      	mov	r4, r1
 800a5e2:	6831      	ldr	r1, [r6, #0]
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	b911      	cbnz	r1, 800a5ee <sbrk_aligned+0x12>
 800a5e8:	f000 fe46 	bl	800b278 <_sbrk_r>
 800a5ec:	6030      	str	r0, [r6, #0]
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	f000 fe41 	bl	800b278 <_sbrk_r>
 800a5f6:	1c43      	adds	r3, r0, #1
 800a5f8:	d103      	bne.n	800a602 <sbrk_aligned+0x26>
 800a5fa:	f04f 34ff 	mov.w	r4, #4294967295
 800a5fe:	4620      	mov	r0, r4
 800a600:	bd70      	pop	{r4, r5, r6, pc}
 800a602:	1cc4      	adds	r4, r0, #3
 800a604:	f024 0403 	bic.w	r4, r4, #3
 800a608:	42a0      	cmp	r0, r4
 800a60a:	d0f8      	beq.n	800a5fe <sbrk_aligned+0x22>
 800a60c:	1a21      	subs	r1, r4, r0
 800a60e:	4628      	mov	r0, r5
 800a610:	f000 fe32 	bl	800b278 <_sbrk_r>
 800a614:	3001      	adds	r0, #1
 800a616:	d1f2      	bne.n	800a5fe <sbrk_aligned+0x22>
 800a618:	e7ef      	b.n	800a5fa <sbrk_aligned+0x1e>
 800a61a:	bf00      	nop
 800a61c:	20002064 	.word	0x20002064

0800a620 <_malloc_r>:
 800a620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a624:	1ccd      	adds	r5, r1, #3
 800a626:	f025 0503 	bic.w	r5, r5, #3
 800a62a:	3508      	adds	r5, #8
 800a62c:	2d0c      	cmp	r5, #12
 800a62e:	bf38      	it	cc
 800a630:	250c      	movcc	r5, #12
 800a632:	2d00      	cmp	r5, #0
 800a634:	4606      	mov	r6, r0
 800a636:	db01      	blt.n	800a63c <_malloc_r+0x1c>
 800a638:	42a9      	cmp	r1, r5
 800a63a:	d904      	bls.n	800a646 <_malloc_r+0x26>
 800a63c:	230c      	movs	r3, #12
 800a63e:	6033      	str	r3, [r6, #0]
 800a640:	2000      	movs	r0, #0
 800a642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a646:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a71c <_malloc_r+0xfc>
 800a64a:	f000 f869 	bl	800a720 <__malloc_lock>
 800a64e:	f8d8 3000 	ldr.w	r3, [r8]
 800a652:	461c      	mov	r4, r3
 800a654:	bb44      	cbnz	r4, 800a6a8 <_malloc_r+0x88>
 800a656:	4629      	mov	r1, r5
 800a658:	4630      	mov	r0, r6
 800a65a:	f7ff ffbf 	bl	800a5dc <sbrk_aligned>
 800a65e:	1c43      	adds	r3, r0, #1
 800a660:	4604      	mov	r4, r0
 800a662:	d158      	bne.n	800a716 <_malloc_r+0xf6>
 800a664:	f8d8 4000 	ldr.w	r4, [r8]
 800a668:	4627      	mov	r7, r4
 800a66a:	2f00      	cmp	r7, #0
 800a66c:	d143      	bne.n	800a6f6 <_malloc_r+0xd6>
 800a66e:	2c00      	cmp	r4, #0
 800a670:	d04b      	beq.n	800a70a <_malloc_r+0xea>
 800a672:	6823      	ldr	r3, [r4, #0]
 800a674:	4639      	mov	r1, r7
 800a676:	4630      	mov	r0, r6
 800a678:	eb04 0903 	add.w	r9, r4, r3
 800a67c:	f000 fdfc 	bl	800b278 <_sbrk_r>
 800a680:	4581      	cmp	r9, r0
 800a682:	d142      	bne.n	800a70a <_malloc_r+0xea>
 800a684:	6821      	ldr	r1, [r4, #0]
 800a686:	1a6d      	subs	r5, r5, r1
 800a688:	4629      	mov	r1, r5
 800a68a:	4630      	mov	r0, r6
 800a68c:	f7ff ffa6 	bl	800a5dc <sbrk_aligned>
 800a690:	3001      	adds	r0, #1
 800a692:	d03a      	beq.n	800a70a <_malloc_r+0xea>
 800a694:	6823      	ldr	r3, [r4, #0]
 800a696:	442b      	add	r3, r5
 800a698:	6023      	str	r3, [r4, #0]
 800a69a:	f8d8 3000 	ldr.w	r3, [r8]
 800a69e:	685a      	ldr	r2, [r3, #4]
 800a6a0:	bb62      	cbnz	r2, 800a6fc <_malloc_r+0xdc>
 800a6a2:	f8c8 7000 	str.w	r7, [r8]
 800a6a6:	e00f      	b.n	800a6c8 <_malloc_r+0xa8>
 800a6a8:	6822      	ldr	r2, [r4, #0]
 800a6aa:	1b52      	subs	r2, r2, r5
 800a6ac:	d420      	bmi.n	800a6f0 <_malloc_r+0xd0>
 800a6ae:	2a0b      	cmp	r2, #11
 800a6b0:	d917      	bls.n	800a6e2 <_malloc_r+0xc2>
 800a6b2:	1961      	adds	r1, r4, r5
 800a6b4:	42a3      	cmp	r3, r4
 800a6b6:	6025      	str	r5, [r4, #0]
 800a6b8:	bf18      	it	ne
 800a6ba:	6059      	strne	r1, [r3, #4]
 800a6bc:	6863      	ldr	r3, [r4, #4]
 800a6be:	bf08      	it	eq
 800a6c0:	f8c8 1000 	streq.w	r1, [r8]
 800a6c4:	5162      	str	r2, [r4, r5]
 800a6c6:	604b      	str	r3, [r1, #4]
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f000 f82f 	bl	800a72c <__malloc_unlock>
 800a6ce:	f104 000b 	add.w	r0, r4, #11
 800a6d2:	1d23      	adds	r3, r4, #4
 800a6d4:	f020 0007 	bic.w	r0, r0, #7
 800a6d8:	1ac2      	subs	r2, r0, r3
 800a6da:	bf1c      	itt	ne
 800a6dc:	1a1b      	subne	r3, r3, r0
 800a6de:	50a3      	strne	r3, [r4, r2]
 800a6e0:	e7af      	b.n	800a642 <_malloc_r+0x22>
 800a6e2:	6862      	ldr	r2, [r4, #4]
 800a6e4:	42a3      	cmp	r3, r4
 800a6e6:	bf0c      	ite	eq
 800a6e8:	f8c8 2000 	streq.w	r2, [r8]
 800a6ec:	605a      	strne	r2, [r3, #4]
 800a6ee:	e7eb      	b.n	800a6c8 <_malloc_r+0xa8>
 800a6f0:	4623      	mov	r3, r4
 800a6f2:	6864      	ldr	r4, [r4, #4]
 800a6f4:	e7ae      	b.n	800a654 <_malloc_r+0x34>
 800a6f6:	463c      	mov	r4, r7
 800a6f8:	687f      	ldr	r7, [r7, #4]
 800a6fa:	e7b6      	b.n	800a66a <_malloc_r+0x4a>
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	42a3      	cmp	r3, r4
 800a702:	d1fb      	bne.n	800a6fc <_malloc_r+0xdc>
 800a704:	2300      	movs	r3, #0
 800a706:	6053      	str	r3, [r2, #4]
 800a708:	e7de      	b.n	800a6c8 <_malloc_r+0xa8>
 800a70a:	230c      	movs	r3, #12
 800a70c:	6033      	str	r3, [r6, #0]
 800a70e:	4630      	mov	r0, r6
 800a710:	f000 f80c 	bl	800a72c <__malloc_unlock>
 800a714:	e794      	b.n	800a640 <_malloc_r+0x20>
 800a716:	6005      	str	r5, [r0, #0]
 800a718:	e7d6      	b.n	800a6c8 <_malloc_r+0xa8>
 800a71a:	bf00      	nop
 800a71c:	20002068 	.word	0x20002068

0800a720 <__malloc_lock>:
 800a720:	4801      	ldr	r0, [pc, #4]	@ (800a728 <__malloc_lock+0x8>)
 800a722:	f7ff b8b8 	b.w	8009896 <__retarget_lock_acquire_recursive>
 800a726:	bf00      	nop
 800a728:	20002060 	.word	0x20002060

0800a72c <__malloc_unlock>:
 800a72c:	4801      	ldr	r0, [pc, #4]	@ (800a734 <__malloc_unlock+0x8>)
 800a72e:	f7ff b8b3 	b.w	8009898 <__retarget_lock_release_recursive>
 800a732:	bf00      	nop
 800a734:	20002060 	.word	0x20002060

0800a738 <_Balloc>:
 800a738:	b570      	push	{r4, r5, r6, lr}
 800a73a:	69c6      	ldr	r6, [r0, #28]
 800a73c:	4604      	mov	r4, r0
 800a73e:	460d      	mov	r5, r1
 800a740:	b976      	cbnz	r6, 800a760 <_Balloc+0x28>
 800a742:	2010      	movs	r0, #16
 800a744:	f7ff ff42 	bl	800a5cc <malloc>
 800a748:	4602      	mov	r2, r0
 800a74a:	61e0      	str	r0, [r4, #28]
 800a74c:	b920      	cbnz	r0, 800a758 <_Balloc+0x20>
 800a74e:	4b18      	ldr	r3, [pc, #96]	@ (800a7b0 <_Balloc+0x78>)
 800a750:	4818      	ldr	r0, [pc, #96]	@ (800a7b4 <_Balloc+0x7c>)
 800a752:	216b      	movs	r1, #107	@ 0x6b
 800a754:	f000 fdae 	bl	800b2b4 <__assert_func>
 800a758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a75c:	6006      	str	r6, [r0, #0]
 800a75e:	60c6      	str	r6, [r0, #12]
 800a760:	69e6      	ldr	r6, [r4, #28]
 800a762:	68f3      	ldr	r3, [r6, #12]
 800a764:	b183      	cbz	r3, 800a788 <_Balloc+0x50>
 800a766:	69e3      	ldr	r3, [r4, #28]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a76e:	b9b8      	cbnz	r0, 800a7a0 <_Balloc+0x68>
 800a770:	2101      	movs	r1, #1
 800a772:	fa01 f605 	lsl.w	r6, r1, r5
 800a776:	1d72      	adds	r2, r6, #5
 800a778:	0092      	lsls	r2, r2, #2
 800a77a:	4620      	mov	r0, r4
 800a77c:	f000 fdb8 	bl	800b2f0 <_calloc_r>
 800a780:	b160      	cbz	r0, 800a79c <_Balloc+0x64>
 800a782:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a786:	e00e      	b.n	800a7a6 <_Balloc+0x6e>
 800a788:	2221      	movs	r2, #33	@ 0x21
 800a78a:	2104      	movs	r1, #4
 800a78c:	4620      	mov	r0, r4
 800a78e:	f000 fdaf 	bl	800b2f0 <_calloc_r>
 800a792:	69e3      	ldr	r3, [r4, #28]
 800a794:	60f0      	str	r0, [r6, #12]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1e4      	bne.n	800a766 <_Balloc+0x2e>
 800a79c:	2000      	movs	r0, #0
 800a79e:	bd70      	pop	{r4, r5, r6, pc}
 800a7a0:	6802      	ldr	r2, [r0, #0]
 800a7a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7ac:	e7f7      	b.n	800a79e <_Balloc+0x66>
 800a7ae:	bf00      	nop
 800a7b0:	0800bf1d 	.word	0x0800bf1d
 800a7b4:	0800bf9d 	.word	0x0800bf9d

0800a7b8 <_Bfree>:
 800a7b8:	b570      	push	{r4, r5, r6, lr}
 800a7ba:	69c6      	ldr	r6, [r0, #28]
 800a7bc:	4605      	mov	r5, r0
 800a7be:	460c      	mov	r4, r1
 800a7c0:	b976      	cbnz	r6, 800a7e0 <_Bfree+0x28>
 800a7c2:	2010      	movs	r0, #16
 800a7c4:	f7ff ff02 	bl	800a5cc <malloc>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	61e8      	str	r0, [r5, #28]
 800a7cc:	b920      	cbnz	r0, 800a7d8 <_Bfree+0x20>
 800a7ce:	4b09      	ldr	r3, [pc, #36]	@ (800a7f4 <_Bfree+0x3c>)
 800a7d0:	4809      	ldr	r0, [pc, #36]	@ (800a7f8 <_Bfree+0x40>)
 800a7d2:	218f      	movs	r1, #143	@ 0x8f
 800a7d4:	f000 fd6e 	bl	800b2b4 <__assert_func>
 800a7d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7dc:	6006      	str	r6, [r0, #0]
 800a7de:	60c6      	str	r6, [r0, #12]
 800a7e0:	b13c      	cbz	r4, 800a7f2 <_Bfree+0x3a>
 800a7e2:	69eb      	ldr	r3, [r5, #28]
 800a7e4:	6862      	ldr	r2, [r4, #4]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7ec:	6021      	str	r1, [r4, #0]
 800a7ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a7f2:	bd70      	pop	{r4, r5, r6, pc}
 800a7f4:	0800bf1d 	.word	0x0800bf1d
 800a7f8:	0800bf9d 	.word	0x0800bf9d

0800a7fc <__multadd>:
 800a7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a800:	690d      	ldr	r5, [r1, #16]
 800a802:	4607      	mov	r7, r0
 800a804:	460c      	mov	r4, r1
 800a806:	461e      	mov	r6, r3
 800a808:	f101 0c14 	add.w	ip, r1, #20
 800a80c:	2000      	movs	r0, #0
 800a80e:	f8dc 3000 	ldr.w	r3, [ip]
 800a812:	b299      	uxth	r1, r3
 800a814:	fb02 6101 	mla	r1, r2, r1, r6
 800a818:	0c1e      	lsrs	r6, r3, #16
 800a81a:	0c0b      	lsrs	r3, r1, #16
 800a81c:	fb02 3306 	mla	r3, r2, r6, r3
 800a820:	b289      	uxth	r1, r1
 800a822:	3001      	adds	r0, #1
 800a824:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a828:	4285      	cmp	r5, r0
 800a82a:	f84c 1b04 	str.w	r1, [ip], #4
 800a82e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a832:	dcec      	bgt.n	800a80e <__multadd+0x12>
 800a834:	b30e      	cbz	r6, 800a87a <__multadd+0x7e>
 800a836:	68a3      	ldr	r3, [r4, #8]
 800a838:	42ab      	cmp	r3, r5
 800a83a:	dc19      	bgt.n	800a870 <__multadd+0x74>
 800a83c:	6861      	ldr	r1, [r4, #4]
 800a83e:	4638      	mov	r0, r7
 800a840:	3101      	adds	r1, #1
 800a842:	f7ff ff79 	bl	800a738 <_Balloc>
 800a846:	4680      	mov	r8, r0
 800a848:	b928      	cbnz	r0, 800a856 <__multadd+0x5a>
 800a84a:	4602      	mov	r2, r0
 800a84c:	4b0c      	ldr	r3, [pc, #48]	@ (800a880 <__multadd+0x84>)
 800a84e:	480d      	ldr	r0, [pc, #52]	@ (800a884 <__multadd+0x88>)
 800a850:	21ba      	movs	r1, #186	@ 0xba
 800a852:	f000 fd2f 	bl	800b2b4 <__assert_func>
 800a856:	6922      	ldr	r2, [r4, #16]
 800a858:	3202      	adds	r2, #2
 800a85a:	f104 010c 	add.w	r1, r4, #12
 800a85e:	0092      	lsls	r2, r2, #2
 800a860:	300c      	adds	r0, #12
 800a862:	f000 fd19 	bl	800b298 <memcpy>
 800a866:	4621      	mov	r1, r4
 800a868:	4638      	mov	r0, r7
 800a86a:	f7ff ffa5 	bl	800a7b8 <_Bfree>
 800a86e:	4644      	mov	r4, r8
 800a870:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a874:	3501      	adds	r5, #1
 800a876:	615e      	str	r6, [r3, #20]
 800a878:	6125      	str	r5, [r4, #16]
 800a87a:	4620      	mov	r0, r4
 800a87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a880:	0800bf8c 	.word	0x0800bf8c
 800a884:	0800bf9d 	.word	0x0800bf9d

0800a888 <__hi0bits>:
 800a888:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a88c:	4603      	mov	r3, r0
 800a88e:	bf36      	itet	cc
 800a890:	0403      	lslcc	r3, r0, #16
 800a892:	2000      	movcs	r0, #0
 800a894:	2010      	movcc	r0, #16
 800a896:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a89a:	bf3c      	itt	cc
 800a89c:	021b      	lslcc	r3, r3, #8
 800a89e:	3008      	addcc	r0, #8
 800a8a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8a4:	bf3c      	itt	cc
 800a8a6:	011b      	lslcc	r3, r3, #4
 800a8a8:	3004      	addcc	r0, #4
 800a8aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8ae:	bf3c      	itt	cc
 800a8b0:	009b      	lslcc	r3, r3, #2
 800a8b2:	3002      	addcc	r0, #2
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	db05      	blt.n	800a8c4 <__hi0bits+0x3c>
 800a8b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a8bc:	f100 0001 	add.w	r0, r0, #1
 800a8c0:	bf08      	it	eq
 800a8c2:	2020      	moveq	r0, #32
 800a8c4:	4770      	bx	lr

0800a8c6 <__lo0bits>:
 800a8c6:	6803      	ldr	r3, [r0, #0]
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	f013 0007 	ands.w	r0, r3, #7
 800a8ce:	d00b      	beq.n	800a8e8 <__lo0bits+0x22>
 800a8d0:	07d9      	lsls	r1, r3, #31
 800a8d2:	d421      	bmi.n	800a918 <__lo0bits+0x52>
 800a8d4:	0798      	lsls	r0, r3, #30
 800a8d6:	bf49      	itett	mi
 800a8d8:	085b      	lsrmi	r3, r3, #1
 800a8da:	089b      	lsrpl	r3, r3, #2
 800a8dc:	2001      	movmi	r0, #1
 800a8de:	6013      	strmi	r3, [r2, #0]
 800a8e0:	bf5c      	itt	pl
 800a8e2:	6013      	strpl	r3, [r2, #0]
 800a8e4:	2002      	movpl	r0, #2
 800a8e6:	4770      	bx	lr
 800a8e8:	b299      	uxth	r1, r3
 800a8ea:	b909      	cbnz	r1, 800a8f0 <__lo0bits+0x2a>
 800a8ec:	0c1b      	lsrs	r3, r3, #16
 800a8ee:	2010      	movs	r0, #16
 800a8f0:	b2d9      	uxtb	r1, r3
 800a8f2:	b909      	cbnz	r1, 800a8f8 <__lo0bits+0x32>
 800a8f4:	3008      	adds	r0, #8
 800a8f6:	0a1b      	lsrs	r3, r3, #8
 800a8f8:	0719      	lsls	r1, r3, #28
 800a8fa:	bf04      	itt	eq
 800a8fc:	091b      	lsreq	r3, r3, #4
 800a8fe:	3004      	addeq	r0, #4
 800a900:	0799      	lsls	r1, r3, #30
 800a902:	bf04      	itt	eq
 800a904:	089b      	lsreq	r3, r3, #2
 800a906:	3002      	addeq	r0, #2
 800a908:	07d9      	lsls	r1, r3, #31
 800a90a:	d403      	bmi.n	800a914 <__lo0bits+0x4e>
 800a90c:	085b      	lsrs	r3, r3, #1
 800a90e:	f100 0001 	add.w	r0, r0, #1
 800a912:	d003      	beq.n	800a91c <__lo0bits+0x56>
 800a914:	6013      	str	r3, [r2, #0]
 800a916:	4770      	bx	lr
 800a918:	2000      	movs	r0, #0
 800a91a:	4770      	bx	lr
 800a91c:	2020      	movs	r0, #32
 800a91e:	4770      	bx	lr

0800a920 <__i2b>:
 800a920:	b510      	push	{r4, lr}
 800a922:	460c      	mov	r4, r1
 800a924:	2101      	movs	r1, #1
 800a926:	f7ff ff07 	bl	800a738 <_Balloc>
 800a92a:	4602      	mov	r2, r0
 800a92c:	b928      	cbnz	r0, 800a93a <__i2b+0x1a>
 800a92e:	4b05      	ldr	r3, [pc, #20]	@ (800a944 <__i2b+0x24>)
 800a930:	4805      	ldr	r0, [pc, #20]	@ (800a948 <__i2b+0x28>)
 800a932:	f240 1145 	movw	r1, #325	@ 0x145
 800a936:	f000 fcbd 	bl	800b2b4 <__assert_func>
 800a93a:	2301      	movs	r3, #1
 800a93c:	6144      	str	r4, [r0, #20]
 800a93e:	6103      	str	r3, [r0, #16]
 800a940:	bd10      	pop	{r4, pc}
 800a942:	bf00      	nop
 800a944:	0800bf8c 	.word	0x0800bf8c
 800a948:	0800bf9d 	.word	0x0800bf9d

0800a94c <__multiply>:
 800a94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a950:	4614      	mov	r4, r2
 800a952:	690a      	ldr	r2, [r1, #16]
 800a954:	6923      	ldr	r3, [r4, #16]
 800a956:	429a      	cmp	r2, r3
 800a958:	bfa8      	it	ge
 800a95a:	4623      	movge	r3, r4
 800a95c:	460f      	mov	r7, r1
 800a95e:	bfa4      	itt	ge
 800a960:	460c      	movge	r4, r1
 800a962:	461f      	movge	r7, r3
 800a964:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a968:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a96c:	68a3      	ldr	r3, [r4, #8]
 800a96e:	6861      	ldr	r1, [r4, #4]
 800a970:	eb0a 0609 	add.w	r6, sl, r9
 800a974:	42b3      	cmp	r3, r6
 800a976:	b085      	sub	sp, #20
 800a978:	bfb8      	it	lt
 800a97a:	3101      	addlt	r1, #1
 800a97c:	f7ff fedc 	bl	800a738 <_Balloc>
 800a980:	b930      	cbnz	r0, 800a990 <__multiply+0x44>
 800a982:	4602      	mov	r2, r0
 800a984:	4b44      	ldr	r3, [pc, #272]	@ (800aa98 <__multiply+0x14c>)
 800a986:	4845      	ldr	r0, [pc, #276]	@ (800aa9c <__multiply+0x150>)
 800a988:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a98c:	f000 fc92 	bl	800b2b4 <__assert_func>
 800a990:	f100 0514 	add.w	r5, r0, #20
 800a994:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a998:	462b      	mov	r3, r5
 800a99a:	2200      	movs	r2, #0
 800a99c:	4543      	cmp	r3, r8
 800a99e:	d321      	bcc.n	800a9e4 <__multiply+0x98>
 800a9a0:	f107 0114 	add.w	r1, r7, #20
 800a9a4:	f104 0214 	add.w	r2, r4, #20
 800a9a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a9ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a9b0:	9302      	str	r3, [sp, #8]
 800a9b2:	1b13      	subs	r3, r2, r4
 800a9b4:	3b15      	subs	r3, #21
 800a9b6:	f023 0303 	bic.w	r3, r3, #3
 800a9ba:	3304      	adds	r3, #4
 800a9bc:	f104 0715 	add.w	r7, r4, #21
 800a9c0:	42ba      	cmp	r2, r7
 800a9c2:	bf38      	it	cc
 800a9c4:	2304      	movcc	r3, #4
 800a9c6:	9301      	str	r3, [sp, #4]
 800a9c8:	9b02      	ldr	r3, [sp, #8]
 800a9ca:	9103      	str	r1, [sp, #12]
 800a9cc:	428b      	cmp	r3, r1
 800a9ce:	d80c      	bhi.n	800a9ea <__multiply+0x9e>
 800a9d0:	2e00      	cmp	r6, #0
 800a9d2:	dd03      	ble.n	800a9dc <__multiply+0x90>
 800a9d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d05b      	beq.n	800aa94 <__multiply+0x148>
 800a9dc:	6106      	str	r6, [r0, #16]
 800a9de:	b005      	add	sp, #20
 800a9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e4:	f843 2b04 	str.w	r2, [r3], #4
 800a9e8:	e7d8      	b.n	800a99c <__multiply+0x50>
 800a9ea:	f8b1 a000 	ldrh.w	sl, [r1]
 800a9ee:	f1ba 0f00 	cmp.w	sl, #0
 800a9f2:	d024      	beq.n	800aa3e <__multiply+0xf2>
 800a9f4:	f104 0e14 	add.w	lr, r4, #20
 800a9f8:	46a9      	mov	r9, r5
 800a9fa:	f04f 0c00 	mov.w	ip, #0
 800a9fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa02:	f8d9 3000 	ldr.w	r3, [r9]
 800aa06:	fa1f fb87 	uxth.w	fp, r7
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	fb0a 330b 	mla	r3, sl, fp, r3
 800aa10:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aa14:	f8d9 7000 	ldr.w	r7, [r9]
 800aa18:	4463      	add	r3, ip
 800aa1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa1e:	fb0a c70b 	mla	r7, sl, fp, ip
 800aa22:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa2c:	4572      	cmp	r2, lr
 800aa2e:	f849 3b04 	str.w	r3, [r9], #4
 800aa32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa36:	d8e2      	bhi.n	800a9fe <__multiply+0xb2>
 800aa38:	9b01      	ldr	r3, [sp, #4]
 800aa3a:	f845 c003 	str.w	ip, [r5, r3]
 800aa3e:	9b03      	ldr	r3, [sp, #12]
 800aa40:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aa44:	3104      	adds	r1, #4
 800aa46:	f1b9 0f00 	cmp.w	r9, #0
 800aa4a:	d021      	beq.n	800aa90 <__multiply+0x144>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	f104 0c14 	add.w	ip, r4, #20
 800aa52:	46ae      	mov	lr, r5
 800aa54:	f04f 0a00 	mov.w	sl, #0
 800aa58:	f8bc b000 	ldrh.w	fp, [ip]
 800aa5c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aa60:	fb09 770b 	mla	r7, r9, fp, r7
 800aa64:	4457      	add	r7, sl
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa6c:	f84e 3b04 	str.w	r3, [lr], #4
 800aa70:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa78:	f8be 3000 	ldrh.w	r3, [lr]
 800aa7c:	fb09 330a 	mla	r3, r9, sl, r3
 800aa80:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aa84:	4562      	cmp	r2, ip
 800aa86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa8a:	d8e5      	bhi.n	800aa58 <__multiply+0x10c>
 800aa8c:	9f01      	ldr	r7, [sp, #4]
 800aa8e:	51eb      	str	r3, [r5, r7]
 800aa90:	3504      	adds	r5, #4
 800aa92:	e799      	b.n	800a9c8 <__multiply+0x7c>
 800aa94:	3e01      	subs	r6, #1
 800aa96:	e79b      	b.n	800a9d0 <__multiply+0x84>
 800aa98:	0800bf8c 	.word	0x0800bf8c
 800aa9c:	0800bf9d 	.word	0x0800bf9d

0800aaa0 <__pow5mult>:
 800aaa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaa4:	4615      	mov	r5, r2
 800aaa6:	f012 0203 	ands.w	r2, r2, #3
 800aaaa:	4607      	mov	r7, r0
 800aaac:	460e      	mov	r6, r1
 800aaae:	d007      	beq.n	800aac0 <__pow5mult+0x20>
 800aab0:	4c25      	ldr	r4, [pc, #148]	@ (800ab48 <__pow5mult+0xa8>)
 800aab2:	3a01      	subs	r2, #1
 800aab4:	2300      	movs	r3, #0
 800aab6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aaba:	f7ff fe9f 	bl	800a7fc <__multadd>
 800aabe:	4606      	mov	r6, r0
 800aac0:	10ad      	asrs	r5, r5, #2
 800aac2:	d03d      	beq.n	800ab40 <__pow5mult+0xa0>
 800aac4:	69fc      	ldr	r4, [r7, #28]
 800aac6:	b97c      	cbnz	r4, 800aae8 <__pow5mult+0x48>
 800aac8:	2010      	movs	r0, #16
 800aaca:	f7ff fd7f 	bl	800a5cc <malloc>
 800aace:	4602      	mov	r2, r0
 800aad0:	61f8      	str	r0, [r7, #28]
 800aad2:	b928      	cbnz	r0, 800aae0 <__pow5mult+0x40>
 800aad4:	4b1d      	ldr	r3, [pc, #116]	@ (800ab4c <__pow5mult+0xac>)
 800aad6:	481e      	ldr	r0, [pc, #120]	@ (800ab50 <__pow5mult+0xb0>)
 800aad8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aadc:	f000 fbea 	bl	800b2b4 <__assert_func>
 800aae0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aae4:	6004      	str	r4, [r0, #0]
 800aae6:	60c4      	str	r4, [r0, #12]
 800aae8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aaec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aaf0:	b94c      	cbnz	r4, 800ab06 <__pow5mult+0x66>
 800aaf2:	f240 2171 	movw	r1, #625	@ 0x271
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	f7ff ff12 	bl	800a920 <__i2b>
 800aafc:	2300      	movs	r3, #0
 800aafe:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab02:	4604      	mov	r4, r0
 800ab04:	6003      	str	r3, [r0, #0]
 800ab06:	f04f 0900 	mov.w	r9, #0
 800ab0a:	07eb      	lsls	r3, r5, #31
 800ab0c:	d50a      	bpl.n	800ab24 <__pow5mult+0x84>
 800ab0e:	4631      	mov	r1, r6
 800ab10:	4622      	mov	r2, r4
 800ab12:	4638      	mov	r0, r7
 800ab14:	f7ff ff1a 	bl	800a94c <__multiply>
 800ab18:	4631      	mov	r1, r6
 800ab1a:	4680      	mov	r8, r0
 800ab1c:	4638      	mov	r0, r7
 800ab1e:	f7ff fe4b 	bl	800a7b8 <_Bfree>
 800ab22:	4646      	mov	r6, r8
 800ab24:	106d      	asrs	r5, r5, #1
 800ab26:	d00b      	beq.n	800ab40 <__pow5mult+0xa0>
 800ab28:	6820      	ldr	r0, [r4, #0]
 800ab2a:	b938      	cbnz	r0, 800ab3c <__pow5mult+0x9c>
 800ab2c:	4622      	mov	r2, r4
 800ab2e:	4621      	mov	r1, r4
 800ab30:	4638      	mov	r0, r7
 800ab32:	f7ff ff0b 	bl	800a94c <__multiply>
 800ab36:	6020      	str	r0, [r4, #0]
 800ab38:	f8c0 9000 	str.w	r9, [r0]
 800ab3c:	4604      	mov	r4, r0
 800ab3e:	e7e4      	b.n	800ab0a <__pow5mult+0x6a>
 800ab40:	4630      	mov	r0, r6
 800ab42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab46:	bf00      	nop
 800ab48:	0800bff8 	.word	0x0800bff8
 800ab4c:	0800bf1d 	.word	0x0800bf1d
 800ab50:	0800bf9d 	.word	0x0800bf9d

0800ab54 <__lshift>:
 800ab54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab58:	460c      	mov	r4, r1
 800ab5a:	6849      	ldr	r1, [r1, #4]
 800ab5c:	6923      	ldr	r3, [r4, #16]
 800ab5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab62:	68a3      	ldr	r3, [r4, #8]
 800ab64:	4607      	mov	r7, r0
 800ab66:	4691      	mov	r9, r2
 800ab68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab6c:	f108 0601 	add.w	r6, r8, #1
 800ab70:	42b3      	cmp	r3, r6
 800ab72:	db0b      	blt.n	800ab8c <__lshift+0x38>
 800ab74:	4638      	mov	r0, r7
 800ab76:	f7ff fddf 	bl	800a738 <_Balloc>
 800ab7a:	4605      	mov	r5, r0
 800ab7c:	b948      	cbnz	r0, 800ab92 <__lshift+0x3e>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	4b28      	ldr	r3, [pc, #160]	@ (800ac24 <__lshift+0xd0>)
 800ab82:	4829      	ldr	r0, [pc, #164]	@ (800ac28 <__lshift+0xd4>)
 800ab84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ab88:	f000 fb94 	bl	800b2b4 <__assert_func>
 800ab8c:	3101      	adds	r1, #1
 800ab8e:	005b      	lsls	r3, r3, #1
 800ab90:	e7ee      	b.n	800ab70 <__lshift+0x1c>
 800ab92:	2300      	movs	r3, #0
 800ab94:	f100 0114 	add.w	r1, r0, #20
 800ab98:	f100 0210 	add.w	r2, r0, #16
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	4553      	cmp	r3, sl
 800aba0:	db33      	blt.n	800ac0a <__lshift+0xb6>
 800aba2:	6920      	ldr	r0, [r4, #16]
 800aba4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aba8:	f104 0314 	add.w	r3, r4, #20
 800abac:	f019 091f 	ands.w	r9, r9, #31
 800abb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abb8:	d02b      	beq.n	800ac12 <__lshift+0xbe>
 800abba:	f1c9 0e20 	rsb	lr, r9, #32
 800abbe:	468a      	mov	sl, r1
 800abc0:	2200      	movs	r2, #0
 800abc2:	6818      	ldr	r0, [r3, #0]
 800abc4:	fa00 f009 	lsl.w	r0, r0, r9
 800abc8:	4310      	orrs	r0, r2
 800abca:	f84a 0b04 	str.w	r0, [sl], #4
 800abce:	f853 2b04 	ldr.w	r2, [r3], #4
 800abd2:	459c      	cmp	ip, r3
 800abd4:	fa22 f20e 	lsr.w	r2, r2, lr
 800abd8:	d8f3      	bhi.n	800abc2 <__lshift+0x6e>
 800abda:	ebac 0304 	sub.w	r3, ip, r4
 800abde:	3b15      	subs	r3, #21
 800abe0:	f023 0303 	bic.w	r3, r3, #3
 800abe4:	3304      	adds	r3, #4
 800abe6:	f104 0015 	add.w	r0, r4, #21
 800abea:	4584      	cmp	ip, r0
 800abec:	bf38      	it	cc
 800abee:	2304      	movcc	r3, #4
 800abf0:	50ca      	str	r2, [r1, r3]
 800abf2:	b10a      	cbz	r2, 800abf8 <__lshift+0xa4>
 800abf4:	f108 0602 	add.w	r6, r8, #2
 800abf8:	3e01      	subs	r6, #1
 800abfa:	4638      	mov	r0, r7
 800abfc:	612e      	str	r6, [r5, #16]
 800abfe:	4621      	mov	r1, r4
 800ac00:	f7ff fdda 	bl	800a7b8 <_Bfree>
 800ac04:	4628      	mov	r0, r5
 800ac06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac0e:	3301      	adds	r3, #1
 800ac10:	e7c5      	b.n	800ab9e <__lshift+0x4a>
 800ac12:	3904      	subs	r1, #4
 800ac14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac18:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac1c:	459c      	cmp	ip, r3
 800ac1e:	d8f9      	bhi.n	800ac14 <__lshift+0xc0>
 800ac20:	e7ea      	b.n	800abf8 <__lshift+0xa4>
 800ac22:	bf00      	nop
 800ac24:	0800bf8c 	.word	0x0800bf8c
 800ac28:	0800bf9d 	.word	0x0800bf9d

0800ac2c <__mcmp>:
 800ac2c:	690a      	ldr	r2, [r1, #16]
 800ac2e:	4603      	mov	r3, r0
 800ac30:	6900      	ldr	r0, [r0, #16]
 800ac32:	1a80      	subs	r0, r0, r2
 800ac34:	b530      	push	{r4, r5, lr}
 800ac36:	d10e      	bne.n	800ac56 <__mcmp+0x2a>
 800ac38:	3314      	adds	r3, #20
 800ac3a:	3114      	adds	r1, #20
 800ac3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ac40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ac44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac4c:	4295      	cmp	r5, r2
 800ac4e:	d003      	beq.n	800ac58 <__mcmp+0x2c>
 800ac50:	d205      	bcs.n	800ac5e <__mcmp+0x32>
 800ac52:	f04f 30ff 	mov.w	r0, #4294967295
 800ac56:	bd30      	pop	{r4, r5, pc}
 800ac58:	42a3      	cmp	r3, r4
 800ac5a:	d3f3      	bcc.n	800ac44 <__mcmp+0x18>
 800ac5c:	e7fb      	b.n	800ac56 <__mcmp+0x2a>
 800ac5e:	2001      	movs	r0, #1
 800ac60:	e7f9      	b.n	800ac56 <__mcmp+0x2a>
	...

0800ac64 <__mdiff>:
 800ac64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac68:	4689      	mov	r9, r1
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	4611      	mov	r1, r2
 800ac6e:	4648      	mov	r0, r9
 800ac70:	4614      	mov	r4, r2
 800ac72:	f7ff ffdb 	bl	800ac2c <__mcmp>
 800ac76:	1e05      	subs	r5, r0, #0
 800ac78:	d112      	bne.n	800aca0 <__mdiff+0x3c>
 800ac7a:	4629      	mov	r1, r5
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	f7ff fd5b 	bl	800a738 <_Balloc>
 800ac82:	4602      	mov	r2, r0
 800ac84:	b928      	cbnz	r0, 800ac92 <__mdiff+0x2e>
 800ac86:	4b3f      	ldr	r3, [pc, #252]	@ (800ad84 <__mdiff+0x120>)
 800ac88:	f240 2137 	movw	r1, #567	@ 0x237
 800ac8c:	483e      	ldr	r0, [pc, #248]	@ (800ad88 <__mdiff+0x124>)
 800ac8e:	f000 fb11 	bl	800b2b4 <__assert_func>
 800ac92:	2301      	movs	r3, #1
 800ac94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac98:	4610      	mov	r0, r2
 800ac9a:	b003      	add	sp, #12
 800ac9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca0:	bfbc      	itt	lt
 800aca2:	464b      	movlt	r3, r9
 800aca4:	46a1      	movlt	r9, r4
 800aca6:	4630      	mov	r0, r6
 800aca8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800acac:	bfba      	itte	lt
 800acae:	461c      	movlt	r4, r3
 800acb0:	2501      	movlt	r5, #1
 800acb2:	2500      	movge	r5, #0
 800acb4:	f7ff fd40 	bl	800a738 <_Balloc>
 800acb8:	4602      	mov	r2, r0
 800acba:	b918      	cbnz	r0, 800acc4 <__mdiff+0x60>
 800acbc:	4b31      	ldr	r3, [pc, #196]	@ (800ad84 <__mdiff+0x120>)
 800acbe:	f240 2145 	movw	r1, #581	@ 0x245
 800acc2:	e7e3      	b.n	800ac8c <__mdiff+0x28>
 800acc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800acc8:	6926      	ldr	r6, [r4, #16]
 800acca:	60c5      	str	r5, [r0, #12]
 800accc:	f109 0310 	add.w	r3, r9, #16
 800acd0:	f109 0514 	add.w	r5, r9, #20
 800acd4:	f104 0e14 	add.w	lr, r4, #20
 800acd8:	f100 0b14 	add.w	fp, r0, #20
 800acdc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ace0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ace4:	9301      	str	r3, [sp, #4]
 800ace6:	46d9      	mov	r9, fp
 800ace8:	f04f 0c00 	mov.w	ip, #0
 800acec:	9b01      	ldr	r3, [sp, #4]
 800acee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800acf2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800acf6:	9301      	str	r3, [sp, #4]
 800acf8:	fa1f f38a 	uxth.w	r3, sl
 800acfc:	4619      	mov	r1, r3
 800acfe:	b283      	uxth	r3, r0
 800ad00:	1acb      	subs	r3, r1, r3
 800ad02:	0c00      	lsrs	r0, r0, #16
 800ad04:	4463      	add	r3, ip
 800ad06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ad0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad14:	4576      	cmp	r6, lr
 800ad16:	f849 3b04 	str.w	r3, [r9], #4
 800ad1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad1e:	d8e5      	bhi.n	800acec <__mdiff+0x88>
 800ad20:	1b33      	subs	r3, r6, r4
 800ad22:	3b15      	subs	r3, #21
 800ad24:	f023 0303 	bic.w	r3, r3, #3
 800ad28:	3415      	adds	r4, #21
 800ad2a:	3304      	adds	r3, #4
 800ad2c:	42a6      	cmp	r6, r4
 800ad2e:	bf38      	it	cc
 800ad30:	2304      	movcc	r3, #4
 800ad32:	441d      	add	r5, r3
 800ad34:	445b      	add	r3, fp
 800ad36:	461e      	mov	r6, r3
 800ad38:	462c      	mov	r4, r5
 800ad3a:	4544      	cmp	r4, r8
 800ad3c:	d30e      	bcc.n	800ad5c <__mdiff+0xf8>
 800ad3e:	f108 0103 	add.w	r1, r8, #3
 800ad42:	1b49      	subs	r1, r1, r5
 800ad44:	f021 0103 	bic.w	r1, r1, #3
 800ad48:	3d03      	subs	r5, #3
 800ad4a:	45a8      	cmp	r8, r5
 800ad4c:	bf38      	it	cc
 800ad4e:	2100      	movcc	r1, #0
 800ad50:	440b      	add	r3, r1
 800ad52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad56:	b191      	cbz	r1, 800ad7e <__mdiff+0x11a>
 800ad58:	6117      	str	r7, [r2, #16]
 800ad5a:	e79d      	b.n	800ac98 <__mdiff+0x34>
 800ad5c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ad60:	46e6      	mov	lr, ip
 800ad62:	0c08      	lsrs	r0, r1, #16
 800ad64:	fa1c fc81 	uxtah	ip, ip, r1
 800ad68:	4471      	add	r1, lr
 800ad6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ad6e:	b289      	uxth	r1, r1
 800ad70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ad74:	f846 1b04 	str.w	r1, [r6], #4
 800ad78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad7c:	e7dd      	b.n	800ad3a <__mdiff+0xd6>
 800ad7e:	3f01      	subs	r7, #1
 800ad80:	e7e7      	b.n	800ad52 <__mdiff+0xee>
 800ad82:	bf00      	nop
 800ad84:	0800bf8c 	.word	0x0800bf8c
 800ad88:	0800bf9d 	.word	0x0800bf9d

0800ad8c <__d2b>:
 800ad8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad90:	460f      	mov	r7, r1
 800ad92:	2101      	movs	r1, #1
 800ad94:	ec59 8b10 	vmov	r8, r9, d0
 800ad98:	4616      	mov	r6, r2
 800ad9a:	f7ff fccd 	bl	800a738 <_Balloc>
 800ad9e:	4604      	mov	r4, r0
 800ada0:	b930      	cbnz	r0, 800adb0 <__d2b+0x24>
 800ada2:	4602      	mov	r2, r0
 800ada4:	4b23      	ldr	r3, [pc, #140]	@ (800ae34 <__d2b+0xa8>)
 800ada6:	4824      	ldr	r0, [pc, #144]	@ (800ae38 <__d2b+0xac>)
 800ada8:	f240 310f 	movw	r1, #783	@ 0x30f
 800adac:	f000 fa82 	bl	800b2b4 <__assert_func>
 800adb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800adb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800adb8:	b10d      	cbz	r5, 800adbe <__d2b+0x32>
 800adba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800adbe:	9301      	str	r3, [sp, #4]
 800adc0:	f1b8 0300 	subs.w	r3, r8, #0
 800adc4:	d023      	beq.n	800ae0e <__d2b+0x82>
 800adc6:	4668      	mov	r0, sp
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	f7ff fd7c 	bl	800a8c6 <__lo0bits>
 800adce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800add2:	b1d0      	cbz	r0, 800ae0a <__d2b+0x7e>
 800add4:	f1c0 0320 	rsb	r3, r0, #32
 800add8:	fa02 f303 	lsl.w	r3, r2, r3
 800addc:	430b      	orrs	r3, r1
 800adde:	40c2      	lsrs	r2, r0
 800ade0:	6163      	str	r3, [r4, #20]
 800ade2:	9201      	str	r2, [sp, #4]
 800ade4:	9b01      	ldr	r3, [sp, #4]
 800ade6:	61a3      	str	r3, [r4, #24]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	bf0c      	ite	eq
 800adec:	2201      	moveq	r2, #1
 800adee:	2202      	movne	r2, #2
 800adf0:	6122      	str	r2, [r4, #16]
 800adf2:	b1a5      	cbz	r5, 800ae1e <__d2b+0x92>
 800adf4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800adf8:	4405      	add	r5, r0
 800adfa:	603d      	str	r5, [r7, #0]
 800adfc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ae00:	6030      	str	r0, [r6, #0]
 800ae02:	4620      	mov	r0, r4
 800ae04:	b003      	add	sp, #12
 800ae06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae0a:	6161      	str	r1, [r4, #20]
 800ae0c:	e7ea      	b.n	800ade4 <__d2b+0x58>
 800ae0e:	a801      	add	r0, sp, #4
 800ae10:	f7ff fd59 	bl	800a8c6 <__lo0bits>
 800ae14:	9b01      	ldr	r3, [sp, #4]
 800ae16:	6163      	str	r3, [r4, #20]
 800ae18:	3020      	adds	r0, #32
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	e7e8      	b.n	800adf0 <__d2b+0x64>
 800ae1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ae26:	6038      	str	r0, [r7, #0]
 800ae28:	6918      	ldr	r0, [r3, #16]
 800ae2a:	f7ff fd2d 	bl	800a888 <__hi0bits>
 800ae2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae32:	e7e5      	b.n	800ae00 <__d2b+0x74>
 800ae34:	0800bf8c 	.word	0x0800bf8c
 800ae38:	0800bf9d 	.word	0x0800bf9d

0800ae3c <__ssputs_r>:
 800ae3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae40:	688e      	ldr	r6, [r1, #8]
 800ae42:	461f      	mov	r7, r3
 800ae44:	42be      	cmp	r6, r7
 800ae46:	680b      	ldr	r3, [r1, #0]
 800ae48:	4682      	mov	sl, r0
 800ae4a:	460c      	mov	r4, r1
 800ae4c:	4690      	mov	r8, r2
 800ae4e:	d82d      	bhi.n	800aeac <__ssputs_r+0x70>
 800ae50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae58:	d026      	beq.n	800aea8 <__ssputs_r+0x6c>
 800ae5a:	6965      	ldr	r5, [r4, #20]
 800ae5c:	6909      	ldr	r1, [r1, #16]
 800ae5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae62:	eba3 0901 	sub.w	r9, r3, r1
 800ae66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae6a:	1c7b      	adds	r3, r7, #1
 800ae6c:	444b      	add	r3, r9
 800ae6e:	106d      	asrs	r5, r5, #1
 800ae70:	429d      	cmp	r5, r3
 800ae72:	bf38      	it	cc
 800ae74:	461d      	movcc	r5, r3
 800ae76:	0553      	lsls	r3, r2, #21
 800ae78:	d527      	bpl.n	800aeca <__ssputs_r+0x8e>
 800ae7a:	4629      	mov	r1, r5
 800ae7c:	f7ff fbd0 	bl	800a620 <_malloc_r>
 800ae80:	4606      	mov	r6, r0
 800ae82:	b360      	cbz	r0, 800aede <__ssputs_r+0xa2>
 800ae84:	6921      	ldr	r1, [r4, #16]
 800ae86:	464a      	mov	r2, r9
 800ae88:	f000 fa06 	bl	800b298 <memcpy>
 800ae8c:	89a3      	ldrh	r3, [r4, #12]
 800ae8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae96:	81a3      	strh	r3, [r4, #12]
 800ae98:	6126      	str	r6, [r4, #16]
 800ae9a:	6165      	str	r5, [r4, #20]
 800ae9c:	444e      	add	r6, r9
 800ae9e:	eba5 0509 	sub.w	r5, r5, r9
 800aea2:	6026      	str	r6, [r4, #0]
 800aea4:	60a5      	str	r5, [r4, #8]
 800aea6:	463e      	mov	r6, r7
 800aea8:	42be      	cmp	r6, r7
 800aeaa:	d900      	bls.n	800aeae <__ssputs_r+0x72>
 800aeac:	463e      	mov	r6, r7
 800aeae:	6820      	ldr	r0, [r4, #0]
 800aeb0:	4632      	mov	r2, r6
 800aeb2:	4641      	mov	r1, r8
 800aeb4:	f000 f9c6 	bl	800b244 <memmove>
 800aeb8:	68a3      	ldr	r3, [r4, #8]
 800aeba:	1b9b      	subs	r3, r3, r6
 800aebc:	60a3      	str	r3, [r4, #8]
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	4433      	add	r3, r6
 800aec2:	6023      	str	r3, [r4, #0]
 800aec4:	2000      	movs	r0, #0
 800aec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeca:	462a      	mov	r2, r5
 800aecc:	f000 fa36 	bl	800b33c <_realloc_r>
 800aed0:	4606      	mov	r6, r0
 800aed2:	2800      	cmp	r0, #0
 800aed4:	d1e0      	bne.n	800ae98 <__ssputs_r+0x5c>
 800aed6:	6921      	ldr	r1, [r4, #16]
 800aed8:	4650      	mov	r0, sl
 800aeda:	f7ff fb2d 	bl	800a538 <_free_r>
 800aede:	230c      	movs	r3, #12
 800aee0:	f8ca 3000 	str.w	r3, [sl]
 800aee4:	89a3      	ldrh	r3, [r4, #12]
 800aee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aeea:	81a3      	strh	r3, [r4, #12]
 800aeec:	f04f 30ff 	mov.w	r0, #4294967295
 800aef0:	e7e9      	b.n	800aec6 <__ssputs_r+0x8a>
	...

0800aef4 <_svfiprintf_r>:
 800aef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef8:	4698      	mov	r8, r3
 800aefa:	898b      	ldrh	r3, [r1, #12]
 800aefc:	061b      	lsls	r3, r3, #24
 800aefe:	b09d      	sub	sp, #116	@ 0x74
 800af00:	4607      	mov	r7, r0
 800af02:	460d      	mov	r5, r1
 800af04:	4614      	mov	r4, r2
 800af06:	d510      	bpl.n	800af2a <_svfiprintf_r+0x36>
 800af08:	690b      	ldr	r3, [r1, #16]
 800af0a:	b973      	cbnz	r3, 800af2a <_svfiprintf_r+0x36>
 800af0c:	2140      	movs	r1, #64	@ 0x40
 800af0e:	f7ff fb87 	bl	800a620 <_malloc_r>
 800af12:	6028      	str	r0, [r5, #0]
 800af14:	6128      	str	r0, [r5, #16]
 800af16:	b930      	cbnz	r0, 800af26 <_svfiprintf_r+0x32>
 800af18:	230c      	movs	r3, #12
 800af1a:	603b      	str	r3, [r7, #0]
 800af1c:	f04f 30ff 	mov.w	r0, #4294967295
 800af20:	b01d      	add	sp, #116	@ 0x74
 800af22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af26:	2340      	movs	r3, #64	@ 0x40
 800af28:	616b      	str	r3, [r5, #20]
 800af2a:	2300      	movs	r3, #0
 800af2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af2e:	2320      	movs	r3, #32
 800af30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af34:	f8cd 800c 	str.w	r8, [sp, #12]
 800af38:	2330      	movs	r3, #48	@ 0x30
 800af3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b0d8 <_svfiprintf_r+0x1e4>
 800af3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af42:	f04f 0901 	mov.w	r9, #1
 800af46:	4623      	mov	r3, r4
 800af48:	469a      	mov	sl, r3
 800af4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af4e:	b10a      	cbz	r2, 800af54 <_svfiprintf_r+0x60>
 800af50:	2a25      	cmp	r2, #37	@ 0x25
 800af52:	d1f9      	bne.n	800af48 <_svfiprintf_r+0x54>
 800af54:	ebba 0b04 	subs.w	fp, sl, r4
 800af58:	d00b      	beq.n	800af72 <_svfiprintf_r+0x7e>
 800af5a:	465b      	mov	r3, fp
 800af5c:	4622      	mov	r2, r4
 800af5e:	4629      	mov	r1, r5
 800af60:	4638      	mov	r0, r7
 800af62:	f7ff ff6b 	bl	800ae3c <__ssputs_r>
 800af66:	3001      	adds	r0, #1
 800af68:	f000 80a7 	beq.w	800b0ba <_svfiprintf_r+0x1c6>
 800af6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af6e:	445a      	add	r2, fp
 800af70:	9209      	str	r2, [sp, #36]	@ 0x24
 800af72:	f89a 3000 	ldrb.w	r3, [sl]
 800af76:	2b00      	cmp	r3, #0
 800af78:	f000 809f 	beq.w	800b0ba <_svfiprintf_r+0x1c6>
 800af7c:	2300      	movs	r3, #0
 800af7e:	f04f 32ff 	mov.w	r2, #4294967295
 800af82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af86:	f10a 0a01 	add.w	sl, sl, #1
 800af8a:	9304      	str	r3, [sp, #16]
 800af8c:	9307      	str	r3, [sp, #28]
 800af8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af92:	931a      	str	r3, [sp, #104]	@ 0x68
 800af94:	4654      	mov	r4, sl
 800af96:	2205      	movs	r2, #5
 800af98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af9c:	484e      	ldr	r0, [pc, #312]	@ (800b0d8 <_svfiprintf_r+0x1e4>)
 800af9e:	f7f5 f91f 	bl	80001e0 <memchr>
 800afa2:	9a04      	ldr	r2, [sp, #16]
 800afa4:	b9d8      	cbnz	r0, 800afde <_svfiprintf_r+0xea>
 800afa6:	06d0      	lsls	r0, r2, #27
 800afa8:	bf44      	itt	mi
 800afaa:	2320      	movmi	r3, #32
 800afac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afb0:	0711      	lsls	r1, r2, #28
 800afb2:	bf44      	itt	mi
 800afb4:	232b      	movmi	r3, #43	@ 0x2b
 800afb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afba:	f89a 3000 	ldrb.w	r3, [sl]
 800afbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800afc0:	d015      	beq.n	800afee <_svfiprintf_r+0xfa>
 800afc2:	9a07      	ldr	r2, [sp, #28]
 800afc4:	4654      	mov	r4, sl
 800afc6:	2000      	movs	r0, #0
 800afc8:	f04f 0c0a 	mov.w	ip, #10
 800afcc:	4621      	mov	r1, r4
 800afce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afd2:	3b30      	subs	r3, #48	@ 0x30
 800afd4:	2b09      	cmp	r3, #9
 800afd6:	d94b      	bls.n	800b070 <_svfiprintf_r+0x17c>
 800afd8:	b1b0      	cbz	r0, 800b008 <_svfiprintf_r+0x114>
 800afda:	9207      	str	r2, [sp, #28]
 800afdc:	e014      	b.n	800b008 <_svfiprintf_r+0x114>
 800afde:	eba0 0308 	sub.w	r3, r0, r8
 800afe2:	fa09 f303 	lsl.w	r3, r9, r3
 800afe6:	4313      	orrs	r3, r2
 800afe8:	9304      	str	r3, [sp, #16]
 800afea:	46a2      	mov	sl, r4
 800afec:	e7d2      	b.n	800af94 <_svfiprintf_r+0xa0>
 800afee:	9b03      	ldr	r3, [sp, #12]
 800aff0:	1d19      	adds	r1, r3, #4
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	9103      	str	r1, [sp, #12]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	bfbb      	ittet	lt
 800affa:	425b      	neglt	r3, r3
 800affc:	f042 0202 	orrlt.w	r2, r2, #2
 800b000:	9307      	strge	r3, [sp, #28]
 800b002:	9307      	strlt	r3, [sp, #28]
 800b004:	bfb8      	it	lt
 800b006:	9204      	strlt	r2, [sp, #16]
 800b008:	7823      	ldrb	r3, [r4, #0]
 800b00a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b00c:	d10a      	bne.n	800b024 <_svfiprintf_r+0x130>
 800b00e:	7863      	ldrb	r3, [r4, #1]
 800b010:	2b2a      	cmp	r3, #42	@ 0x2a
 800b012:	d132      	bne.n	800b07a <_svfiprintf_r+0x186>
 800b014:	9b03      	ldr	r3, [sp, #12]
 800b016:	1d1a      	adds	r2, r3, #4
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	9203      	str	r2, [sp, #12]
 800b01c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b020:	3402      	adds	r4, #2
 800b022:	9305      	str	r3, [sp, #20]
 800b024:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b0e8 <_svfiprintf_r+0x1f4>
 800b028:	7821      	ldrb	r1, [r4, #0]
 800b02a:	2203      	movs	r2, #3
 800b02c:	4650      	mov	r0, sl
 800b02e:	f7f5 f8d7 	bl	80001e0 <memchr>
 800b032:	b138      	cbz	r0, 800b044 <_svfiprintf_r+0x150>
 800b034:	9b04      	ldr	r3, [sp, #16]
 800b036:	eba0 000a 	sub.w	r0, r0, sl
 800b03a:	2240      	movs	r2, #64	@ 0x40
 800b03c:	4082      	lsls	r2, r0
 800b03e:	4313      	orrs	r3, r2
 800b040:	3401      	adds	r4, #1
 800b042:	9304      	str	r3, [sp, #16]
 800b044:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b048:	4824      	ldr	r0, [pc, #144]	@ (800b0dc <_svfiprintf_r+0x1e8>)
 800b04a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b04e:	2206      	movs	r2, #6
 800b050:	f7f5 f8c6 	bl	80001e0 <memchr>
 800b054:	2800      	cmp	r0, #0
 800b056:	d036      	beq.n	800b0c6 <_svfiprintf_r+0x1d2>
 800b058:	4b21      	ldr	r3, [pc, #132]	@ (800b0e0 <_svfiprintf_r+0x1ec>)
 800b05a:	bb1b      	cbnz	r3, 800b0a4 <_svfiprintf_r+0x1b0>
 800b05c:	9b03      	ldr	r3, [sp, #12]
 800b05e:	3307      	adds	r3, #7
 800b060:	f023 0307 	bic.w	r3, r3, #7
 800b064:	3308      	adds	r3, #8
 800b066:	9303      	str	r3, [sp, #12]
 800b068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b06a:	4433      	add	r3, r6
 800b06c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b06e:	e76a      	b.n	800af46 <_svfiprintf_r+0x52>
 800b070:	fb0c 3202 	mla	r2, ip, r2, r3
 800b074:	460c      	mov	r4, r1
 800b076:	2001      	movs	r0, #1
 800b078:	e7a8      	b.n	800afcc <_svfiprintf_r+0xd8>
 800b07a:	2300      	movs	r3, #0
 800b07c:	3401      	adds	r4, #1
 800b07e:	9305      	str	r3, [sp, #20]
 800b080:	4619      	mov	r1, r3
 800b082:	f04f 0c0a 	mov.w	ip, #10
 800b086:	4620      	mov	r0, r4
 800b088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b08c:	3a30      	subs	r2, #48	@ 0x30
 800b08e:	2a09      	cmp	r2, #9
 800b090:	d903      	bls.n	800b09a <_svfiprintf_r+0x1a6>
 800b092:	2b00      	cmp	r3, #0
 800b094:	d0c6      	beq.n	800b024 <_svfiprintf_r+0x130>
 800b096:	9105      	str	r1, [sp, #20]
 800b098:	e7c4      	b.n	800b024 <_svfiprintf_r+0x130>
 800b09a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b09e:	4604      	mov	r4, r0
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e7f0      	b.n	800b086 <_svfiprintf_r+0x192>
 800b0a4:	ab03      	add	r3, sp, #12
 800b0a6:	9300      	str	r3, [sp, #0]
 800b0a8:	462a      	mov	r2, r5
 800b0aa:	4b0e      	ldr	r3, [pc, #56]	@ (800b0e4 <_svfiprintf_r+0x1f0>)
 800b0ac:	a904      	add	r1, sp, #16
 800b0ae:	4638      	mov	r0, r7
 800b0b0:	f7fd fe82 	bl	8008db8 <_printf_float>
 800b0b4:	1c42      	adds	r2, r0, #1
 800b0b6:	4606      	mov	r6, r0
 800b0b8:	d1d6      	bne.n	800b068 <_svfiprintf_r+0x174>
 800b0ba:	89ab      	ldrh	r3, [r5, #12]
 800b0bc:	065b      	lsls	r3, r3, #25
 800b0be:	f53f af2d 	bmi.w	800af1c <_svfiprintf_r+0x28>
 800b0c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0c4:	e72c      	b.n	800af20 <_svfiprintf_r+0x2c>
 800b0c6:	ab03      	add	r3, sp, #12
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	462a      	mov	r2, r5
 800b0cc:	4b05      	ldr	r3, [pc, #20]	@ (800b0e4 <_svfiprintf_r+0x1f0>)
 800b0ce:	a904      	add	r1, sp, #16
 800b0d0:	4638      	mov	r0, r7
 800b0d2:	f7fe f909 	bl	80092e8 <_printf_i>
 800b0d6:	e7ed      	b.n	800b0b4 <_svfiprintf_r+0x1c0>
 800b0d8:	0800c0f8 	.word	0x0800c0f8
 800b0dc:	0800c102 	.word	0x0800c102
 800b0e0:	08008db9 	.word	0x08008db9
 800b0e4:	0800ae3d 	.word	0x0800ae3d
 800b0e8:	0800c0fe 	.word	0x0800c0fe

0800b0ec <__sflush_r>:
 800b0ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f4:	0716      	lsls	r6, r2, #28
 800b0f6:	4605      	mov	r5, r0
 800b0f8:	460c      	mov	r4, r1
 800b0fa:	d454      	bmi.n	800b1a6 <__sflush_r+0xba>
 800b0fc:	684b      	ldr	r3, [r1, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	dc02      	bgt.n	800b108 <__sflush_r+0x1c>
 800b102:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b104:	2b00      	cmp	r3, #0
 800b106:	dd48      	ble.n	800b19a <__sflush_r+0xae>
 800b108:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b10a:	2e00      	cmp	r6, #0
 800b10c:	d045      	beq.n	800b19a <__sflush_r+0xae>
 800b10e:	2300      	movs	r3, #0
 800b110:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b114:	682f      	ldr	r7, [r5, #0]
 800b116:	6a21      	ldr	r1, [r4, #32]
 800b118:	602b      	str	r3, [r5, #0]
 800b11a:	d030      	beq.n	800b17e <__sflush_r+0x92>
 800b11c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b11e:	89a3      	ldrh	r3, [r4, #12]
 800b120:	0759      	lsls	r1, r3, #29
 800b122:	d505      	bpl.n	800b130 <__sflush_r+0x44>
 800b124:	6863      	ldr	r3, [r4, #4]
 800b126:	1ad2      	subs	r2, r2, r3
 800b128:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b12a:	b10b      	cbz	r3, 800b130 <__sflush_r+0x44>
 800b12c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b12e:	1ad2      	subs	r2, r2, r3
 800b130:	2300      	movs	r3, #0
 800b132:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b134:	6a21      	ldr	r1, [r4, #32]
 800b136:	4628      	mov	r0, r5
 800b138:	47b0      	blx	r6
 800b13a:	1c43      	adds	r3, r0, #1
 800b13c:	89a3      	ldrh	r3, [r4, #12]
 800b13e:	d106      	bne.n	800b14e <__sflush_r+0x62>
 800b140:	6829      	ldr	r1, [r5, #0]
 800b142:	291d      	cmp	r1, #29
 800b144:	d82b      	bhi.n	800b19e <__sflush_r+0xb2>
 800b146:	4a2a      	ldr	r2, [pc, #168]	@ (800b1f0 <__sflush_r+0x104>)
 800b148:	410a      	asrs	r2, r1
 800b14a:	07d6      	lsls	r6, r2, #31
 800b14c:	d427      	bmi.n	800b19e <__sflush_r+0xb2>
 800b14e:	2200      	movs	r2, #0
 800b150:	6062      	str	r2, [r4, #4]
 800b152:	04d9      	lsls	r1, r3, #19
 800b154:	6922      	ldr	r2, [r4, #16]
 800b156:	6022      	str	r2, [r4, #0]
 800b158:	d504      	bpl.n	800b164 <__sflush_r+0x78>
 800b15a:	1c42      	adds	r2, r0, #1
 800b15c:	d101      	bne.n	800b162 <__sflush_r+0x76>
 800b15e:	682b      	ldr	r3, [r5, #0]
 800b160:	b903      	cbnz	r3, 800b164 <__sflush_r+0x78>
 800b162:	6560      	str	r0, [r4, #84]	@ 0x54
 800b164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b166:	602f      	str	r7, [r5, #0]
 800b168:	b1b9      	cbz	r1, 800b19a <__sflush_r+0xae>
 800b16a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b16e:	4299      	cmp	r1, r3
 800b170:	d002      	beq.n	800b178 <__sflush_r+0x8c>
 800b172:	4628      	mov	r0, r5
 800b174:	f7ff f9e0 	bl	800a538 <_free_r>
 800b178:	2300      	movs	r3, #0
 800b17a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b17c:	e00d      	b.n	800b19a <__sflush_r+0xae>
 800b17e:	2301      	movs	r3, #1
 800b180:	4628      	mov	r0, r5
 800b182:	47b0      	blx	r6
 800b184:	4602      	mov	r2, r0
 800b186:	1c50      	adds	r0, r2, #1
 800b188:	d1c9      	bne.n	800b11e <__sflush_r+0x32>
 800b18a:	682b      	ldr	r3, [r5, #0]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d0c6      	beq.n	800b11e <__sflush_r+0x32>
 800b190:	2b1d      	cmp	r3, #29
 800b192:	d001      	beq.n	800b198 <__sflush_r+0xac>
 800b194:	2b16      	cmp	r3, #22
 800b196:	d11e      	bne.n	800b1d6 <__sflush_r+0xea>
 800b198:	602f      	str	r7, [r5, #0]
 800b19a:	2000      	movs	r0, #0
 800b19c:	e022      	b.n	800b1e4 <__sflush_r+0xf8>
 800b19e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1a2:	b21b      	sxth	r3, r3
 800b1a4:	e01b      	b.n	800b1de <__sflush_r+0xf2>
 800b1a6:	690f      	ldr	r7, [r1, #16]
 800b1a8:	2f00      	cmp	r7, #0
 800b1aa:	d0f6      	beq.n	800b19a <__sflush_r+0xae>
 800b1ac:	0793      	lsls	r3, r2, #30
 800b1ae:	680e      	ldr	r6, [r1, #0]
 800b1b0:	bf08      	it	eq
 800b1b2:	694b      	ldreq	r3, [r1, #20]
 800b1b4:	600f      	str	r7, [r1, #0]
 800b1b6:	bf18      	it	ne
 800b1b8:	2300      	movne	r3, #0
 800b1ba:	eba6 0807 	sub.w	r8, r6, r7
 800b1be:	608b      	str	r3, [r1, #8]
 800b1c0:	f1b8 0f00 	cmp.w	r8, #0
 800b1c4:	dde9      	ble.n	800b19a <__sflush_r+0xae>
 800b1c6:	6a21      	ldr	r1, [r4, #32]
 800b1c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b1ca:	4643      	mov	r3, r8
 800b1cc:	463a      	mov	r2, r7
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	47b0      	blx	r6
 800b1d2:	2800      	cmp	r0, #0
 800b1d4:	dc08      	bgt.n	800b1e8 <__sflush_r+0xfc>
 800b1d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1de:	81a3      	strh	r3, [r4, #12]
 800b1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1e8:	4407      	add	r7, r0
 800b1ea:	eba8 0800 	sub.w	r8, r8, r0
 800b1ee:	e7e7      	b.n	800b1c0 <__sflush_r+0xd4>
 800b1f0:	dfbffffe 	.word	0xdfbffffe

0800b1f4 <_fflush_r>:
 800b1f4:	b538      	push	{r3, r4, r5, lr}
 800b1f6:	690b      	ldr	r3, [r1, #16]
 800b1f8:	4605      	mov	r5, r0
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	b913      	cbnz	r3, 800b204 <_fflush_r+0x10>
 800b1fe:	2500      	movs	r5, #0
 800b200:	4628      	mov	r0, r5
 800b202:	bd38      	pop	{r3, r4, r5, pc}
 800b204:	b118      	cbz	r0, 800b20e <_fflush_r+0x1a>
 800b206:	6a03      	ldr	r3, [r0, #32]
 800b208:	b90b      	cbnz	r3, 800b20e <_fflush_r+0x1a>
 800b20a:	f7fe fa19 	bl	8009640 <__sinit>
 800b20e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d0f3      	beq.n	800b1fe <_fflush_r+0xa>
 800b216:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b218:	07d0      	lsls	r0, r2, #31
 800b21a:	d404      	bmi.n	800b226 <_fflush_r+0x32>
 800b21c:	0599      	lsls	r1, r3, #22
 800b21e:	d402      	bmi.n	800b226 <_fflush_r+0x32>
 800b220:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b222:	f7fe fb38 	bl	8009896 <__retarget_lock_acquire_recursive>
 800b226:	4628      	mov	r0, r5
 800b228:	4621      	mov	r1, r4
 800b22a:	f7ff ff5f 	bl	800b0ec <__sflush_r>
 800b22e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b230:	07da      	lsls	r2, r3, #31
 800b232:	4605      	mov	r5, r0
 800b234:	d4e4      	bmi.n	800b200 <_fflush_r+0xc>
 800b236:	89a3      	ldrh	r3, [r4, #12]
 800b238:	059b      	lsls	r3, r3, #22
 800b23a:	d4e1      	bmi.n	800b200 <_fflush_r+0xc>
 800b23c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b23e:	f7fe fb2b 	bl	8009898 <__retarget_lock_release_recursive>
 800b242:	e7dd      	b.n	800b200 <_fflush_r+0xc>

0800b244 <memmove>:
 800b244:	4288      	cmp	r0, r1
 800b246:	b510      	push	{r4, lr}
 800b248:	eb01 0402 	add.w	r4, r1, r2
 800b24c:	d902      	bls.n	800b254 <memmove+0x10>
 800b24e:	4284      	cmp	r4, r0
 800b250:	4623      	mov	r3, r4
 800b252:	d807      	bhi.n	800b264 <memmove+0x20>
 800b254:	1e43      	subs	r3, r0, #1
 800b256:	42a1      	cmp	r1, r4
 800b258:	d008      	beq.n	800b26c <memmove+0x28>
 800b25a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b25e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b262:	e7f8      	b.n	800b256 <memmove+0x12>
 800b264:	4402      	add	r2, r0
 800b266:	4601      	mov	r1, r0
 800b268:	428a      	cmp	r2, r1
 800b26a:	d100      	bne.n	800b26e <memmove+0x2a>
 800b26c:	bd10      	pop	{r4, pc}
 800b26e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b272:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b276:	e7f7      	b.n	800b268 <memmove+0x24>

0800b278 <_sbrk_r>:
 800b278:	b538      	push	{r3, r4, r5, lr}
 800b27a:	4d06      	ldr	r5, [pc, #24]	@ (800b294 <_sbrk_r+0x1c>)
 800b27c:	2300      	movs	r3, #0
 800b27e:	4604      	mov	r4, r0
 800b280:	4608      	mov	r0, r1
 800b282:	602b      	str	r3, [r5, #0]
 800b284:	f7f6 fa5c 	bl	8001740 <_sbrk>
 800b288:	1c43      	adds	r3, r0, #1
 800b28a:	d102      	bne.n	800b292 <_sbrk_r+0x1a>
 800b28c:	682b      	ldr	r3, [r5, #0]
 800b28e:	b103      	cbz	r3, 800b292 <_sbrk_r+0x1a>
 800b290:	6023      	str	r3, [r4, #0]
 800b292:	bd38      	pop	{r3, r4, r5, pc}
 800b294:	2000205c 	.word	0x2000205c

0800b298 <memcpy>:
 800b298:	440a      	add	r2, r1
 800b29a:	4291      	cmp	r1, r2
 800b29c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2a0:	d100      	bne.n	800b2a4 <memcpy+0xc>
 800b2a2:	4770      	bx	lr
 800b2a4:	b510      	push	{r4, lr}
 800b2a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2ae:	4291      	cmp	r1, r2
 800b2b0:	d1f9      	bne.n	800b2a6 <memcpy+0xe>
 800b2b2:	bd10      	pop	{r4, pc}

0800b2b4 <__assert_func>:
 800b2b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2b6:	4614      	mov	r4, r2
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	4b09      	ldr	r3, [pc, #36]	@ (800b2e0 <__assert_func+0x2c>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4605      	mov	r5, r0
 800b2c0:	68d8      	ldr	r0, [r3, #12]
 800b2c2:	b954      	cbnz	r4, 800b2da <__assert_func+0x26>
 800b2c4:	4b07      	ldr	r3, [pc, #28]	@ (800b2e4 <__assert_func+0x30>)
 800b2c6:	461c      	mov	r4, r3
 800b2c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2cc:	9100      	str	r1, [sp, #0]
 800b2ce:	462b      	mov	r3, r5
 800b2d0:	4905      	ldr	r1, [pc, #20]	@ (800b2e8 <__assert_func+0x34>)
 800b2d2:	f000 f86f 	bl	800b3b4 <fiprintf>
 800b2d6:	f000 f87f 	bl	800b3d8 <abort>
 800b2da:	4b04      	ldr	r3, [pc, #16]	@ (800b2ec <__assert_func+0x38>)
 800b2dc:	e7f4      	b.n	800b2c8 <__assert_func+0x14>
 800b2de:	bf00      	nop
 800b2e0:	20000108 	.word	0x20000108
 800b2e4:	0800c14e 	.word	0x0800c14e
 800b2e8:	0800c120 	.word	0x0800c120
 800b2ec:	0800c113 	.word	0x0800c113

0800b2f0 <_calloc_r>:
 800b2f0:	b570      	push	{r4, r5, r6, lr}
 800b2f2:	fba1 5402 	umull	r5, r4, r1, r2
 800b2f6:	b93c      	cbnz	r4, 800b308 <_calloc_r+0x18>
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	f7ff f991 	bl	800a620 <_malloc_r>
 800b2fe:	4606      	mov	r6, r0
 800b300:	b928      	cbnz	r0, 800b30e <_calloc_r+0x1e>
 800b302:	2600      	movs	r6, #0
 800b304:	4630      	mov	r0, r6
 800b306:	bd70      	pop	{r4, r5, r6, pc}
 800b308:	220c      	movs	r2, #12
 800b30a:	6002      	str	r2, [r0, #0]
 800b30c:	e7f9      	b.n	800b302 <_calloc_r+0x12>
 800b30e:	462a      	mov	r2, r5
 800b310:	4621      	mov	r1, r4
 800b312:	f7fe fa42 	bl	800979a <memset>
 800b316:	e7f5      	b.n	800b304 <_calloc_r+0x14>

0800b318 <__ascii_mbtowc>:
 800b318:	b082      	sub	sp, #8
 800b31a:	b901      	cbnz	r1, 800b31e <__ascii_mbtowc+0x6>
 800b31c:	a901      	add	r1, sp, #4
 800b31e:	b142      	cbz	r2, 800b332 <__ascii_mbtowc+0x1a>
 800b320:	b14b      	cbz	r3, 800b336 <__ascii_mbtowc+0x1e>
 800b322:	7813      	ldrb	r3, [r2, #0]
 800b324:	600b      	str	r3, [r1, #0]
 800b326:	7812      	ldrb	r2, [r2, #0]
 800b328:	1e10      	subs	r0, r2, #0
 800b32a:	bf18      	it	ne
 800b32c:	2001      	movne	r0, #1
 800b32e:	b002      	add	sp, #8
 800b330:	4770      	bx	lr
 800b332:	4610      	mov	r0, r2
 800b334:	e7fb      	b.n	800b32e <__ascii_mbtowc+0x16>
 800b336:	f06f 0001 	mvn.w	r0, #1
 800b33a:	e7f8      	b.n	800b32e <__ascii_mbtowc+0x16>

0800b33c <_realloc_r>:
 800b33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b340:	4680      	mov	r8, r0
 800b342:	4615      	mov	r5, r2
 800b344:	460c      	mov	r4, r1
 800b346:	b921      	cbnz	r1, 800b352 <_realloc_r+0x16>
 800b348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b34c:	4611      	mov	r1, r2
 800b34e:	f7ff b967 	b.w	800a620 <_malloc_r>
 800b352:	b92a      	cbnz	r2, 800b360 <_realloc_r+0x24>
 800b354:	f7ff f8f0 	bl	800a538 <_free_r>
 800b358:	2400      	movs	r4, #0
 800b35a:	4620      	mov	r0, r4
 800b35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b360:	f000 f841 	bl	800b3e6 <_malloc_usable_size_r>
 800b364:	4285      	cmp	r5, r0
 800b366:	4606      	mov	r6, r0
 800b368:	d802      	bhi.n	800b370 <_realloc_r+0x34>
 800b36a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b36e:	d8f4      	bhi.n	800b35a <_realloc_r+0x1e>
 800b370:	4629      	mov	r1, r5
 800b372:	4640      	mov	r0, r8
 800b374:	f7ff f954 	bl	800a620 <_malloc_r>
 800b378:	4607      	mov	r7, r0
 800b37a:	2800      	cmp	r0, #0
 800b37c:	d0ec      	beq.n	800b358 <_realloc_r+0x1c>
 800b37e:	42b5      	cmp	r5, r6
 800b380:	462a      	mov	r2, r5
 800b382:	4621      	mov	r1, r4
 800b384:	bf28      	it	cs
 800b386:	4632      	movcs	r2, r6
 800b388:	f7ff ff86 	bl	800b298 <memcpy>
 800b38c:	4621      	mov	r1, r4
 800b38e:	4640      	mov	r0, r8
 800b390:	f7ff f8d2 	bl	800a538 <_free_r>
 800b394:	463c      	mov	r4, r7
 800b396:	e7e0      	b.n	800b35a <_realloc_r+0x1e>

0800b398 <__ascii_wctomb>:
 800b398:	4603      	mov	r3, r0
 800b39a:	4608      	mov	r0, r1
 800b39c:	b141      	cbz	r1, 800b3b0 <__ascii_wctomb+0x18>
 800b39e:	2aff      	cmp	r2, #255	@ 0xff
 800b3a0:	d904      	bls.n	800b3ac <__ascii_wctomb+0x14>
 800b3a2:	228a      	movs	r2, #138	@ 0x8a
 800b3a4:	601a      	str	r2, [r3, #0]
 800b3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3aa:	4770      	bx	lr
 800b3ac:	700a      	strb	r2, [r1, #0]
 800b3ae:	2001      	movs	r0, #1
 800b3b0:	4770      	bx	lr
	...

0800b3b4 <fiprintf>:
 800b3b4:	b40e      	push	{r1, r2, r3}
 800b3b6:	b503      	push	{r0, r1, lr}
 800b3b8:	4601      	mov	r1, r0
 800b3ba:	ab03      	add	r3, sp, #12
 800b3bc:	4805      	ldr	r0, [pc, #20]	@ (800b3d4 <fiprintf+0x20>)
 800b3be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3c2:	6800      	ldr	r0, [r0, #0]
 800b3c4:	9301      	str	r3, [sp, #4]
 800b3c6:	f000 f83f 	bl	800b448 <_vfiprintf_r>
 800b3ca:	b002      	add	sp, #8
 800b3cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3d0:	b003      	add	sp, #12
 800b3d2:	4770      	bx	lr
 800b3d4:	20000108 	.word	0x20000108

0800b3d8 <abort>:
 800b3d8:	b508      	push	{r3, lr}
 800b3da:	2006      	movs	r0, #6
 800b3dc:	f000 fa08 	bl	800b7f0 <raise>
 800b3e0:	2001      	movs	r0, #1
 800b3e2:	f7f6 f935 	bl	8001650 <_exit>

0800b3e6 <_malloc_usable_size_r>:
 800b3e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3ea:	1f18      	subs	r0, r3, #4
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	bfbc      	itt	lt
 800b3f0:	580b      	ldrlt	r3, [r1, r0]
 800b3f2:	18c0      	addlt	r0, r0, r3
 800b3f4:	4770      	bx	lr

0800b3f6 <__sfputc_r>:
 800b3f6:	6893      	ldr	r3, [r2, #8]
 800b3f8:	3b01      	subs	r3, #1
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	b410      	push	{r4}
 800b3fe:	6093      	str	r3, [r2, #8]
 800b400:	da08      	bge.n	800b414 <__sfputc_r+0x1e>
 800b402:	6994      	ldr	r4, [r2, #24]
 800b404:	42a3      	cmp	r3, r4
 800b406:	db01      	blt.n	800b40c <__sfputc_r+0x16>
 800b408:	290a      	cmp	r1, #10
 800b40a:	d103      	bne.n	800b414 <__sfputc_r+0x1e>
 800b40c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b410:	f000 b932 	b.w	800b678 <__swbuf_r>
 800b414:	6813      	ldr	r3, [r2, #0]
 800b416:	1c58      	adds	r0, r3, #1
 800b418:	6010      	str	r0, [r2, #0]
 800b41a:	7019      	strb	r1, [r3, #0]
 800b41c:	4608      	mov	r0, r1
 800b41e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <__sfputs_r>:
 800b424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b426:	4606      	mov	r6, r0
 800b428:	460f      	mov	r7, r1
 800b42a:	4614      	mov	r4, r2
 800b42c:	18d5      	adds	r5, r2, r3
 800b42e:	42ac      	cmp	r4, r5
 800b430:	d101      	bne.n	800b436 <__sfputs_r+0x12>
 800b432:	2000      	movs	r0, #0
 800b434:	e007      	b.n	800b446 <__sfputs_r+0x22>
 800b436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b43a:	463a      	mov	r2, r7
 800b43c:	4630      	mov	r0, r6
 800b43e:	f7ff ffda 	bl	800b3f6 <__sfputc_r>
 800b442:	1c43      	adds	r3, r0, #1
 800b444:	d1f3      	bne.n	800b42e <__sfputs_r+0xa>
 800b446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b448 <_vfiprintf_r>:
 800b448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44c:	460d      	mov	r5, r1
 800b44e:	b09d      	sub	sp, #116	@ 0x74
 800b450:	4614      	mov	r4, r2
 800b452:	4698      	mov	r8, r3
 800b454:	4606      	mov	r6, r0
 800b456:	b118      	cbz	r0, 800b460 <_vfiprintf_r+0x18>
 800b458:	6a03      	ldr	r3, [r0, #32]
 800b45a:	b90b      	cbnz	r3, 800b460 <_vfiprintf_r+0x18>
 800b45c:	f7fe f8f0 	bl	8009640 <__sinit>
 800b460:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b462:	07d9      	lsls	r1, r3, #31
 800b464:	d405      	bmi.n	800b472 <_vfiprintf_r+0x2a>
 800b466:	89ab      	ldrh	r3, [r5, #12]
 800b468:	059a      	lsls	r2, r3, #22
 800b46a:	d402      	bmi.n	800b472 <_vfiprintf_r+0x2a>
 800b46c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b46e:	f7fe fa12 	bl	8009896 <__retarget_lock_acquire_recursive>
 800b472:	89ab      	ldrh	r3, [r5, #12]
 800b474:	071b      	lsls	r3, r3, #28
 800b476:	d501      	bpl.n	800b47c <_vfiprintf_r+0x34>
 800b478:	692b      	ldr	r3, [r5, #16]
 800b47a:	b99b      	cbnz	r3, 800b4a4 <_vfiprintf_r+0x5c>
 800b47c:	4629      	mov	r1, r5
 800b47e:	4630      	mov	r0, r6
 800b480:	f000 f938 	bl	800b6f4 <__swsetup_r>
 800b484:	b170      	cbz	r0, 800b4a4 <_vfiprintf_r+0x5c>
 800b486:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b488:	07dc      	lsls	r4, r3, #31
 800b48a:	d504      	bpl.n	800b496 <_vfiprintf_r+0x4e>
 800b48c:	f04f 30ff 	mov.w	r0, #4294967295
 800b490:	b01d      	add	sp, #116	@ 0x74
 800b492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b496:	89ab      	ldrh	r3, [r5, #12]
 800b498:	0598      	lsls	r0, r3, #22
 800b49a:	d4f7      	bmi.n	800b48c <_vfiprintf_r+0x44>
 800b49c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b49e:	f7fe f9fb 	bl	8009898 <__retarget_lock_release_recursive>
 800b4a2:	e7f3      	b.n	800b48c <_vfiprintf_r+0x44>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4a8:	2320      	movs	r3, #32
 800b4aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b4ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4b2:	2330      	movs	r3, #48	@ 0x30
 800b4b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b664 <_vfiprintf_r+0x21c>
 800b4b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4bc:	f04f 0901 	mov.w	r9, #1
 800b4c0:	4623      	mov	r3, r4
 800b4c2:	469a      	mov	sl, r3
 800b4c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4c8:	b10a      	cbz	r2, 800b4ce <_vfiprintf_r+0x86>
 800b4ca:	2a25      	cmp	r2, #37	@ 0x25
 800b4cc:	d1f9      	bne.n	800b4c2 <_vfiprintf_r+0x7a>
 800b4ce:	ebba 0b04 	subs.w	fp, sl, r4
 800b4d2:	d00b      	beq.n	800b4ec <_vfiprintf_r+0xa4>
 800b4d4:	465b      	mov	r3, fp
 800b4d6:	4622      	mov	r2, r4
 800b4d8:	4629      	mov	r1, r5
 800b4da:	4630      	mov	r0, r6
 800b4dc:	f7ff ffa2 	bl	800b424 <__sfputs_r>
 800b4e0:	3001      	adds	r0, #1
 800b4e2:	f000 80a7 	beq.w	800b634 <_vfiprintf_r+0x1ec>
 800b4e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4e8:	445a      	add	r2, fp
 800b4ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f000 809f 	beq.w	800b634 <_vfiprintf_r+0x1ec>
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b500:	f10a 0a01 	add.w	sl, sl, #1
 800b504:	9304      	str	r3, [sp, #16]
 800b506:	9307      	str	r3, [sp, #28]
 800b508:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b50c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b50e:	4654      	mov	r4, sl
 800b510:	2205      	movs	r2, #5
 800b512:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b516:	4853      	ldr	r0, [pc, #332]	@ (800b664 <_vfiprintf_r+0x21c>)
 800b518:	f7f4 fe62 	bl	80001e0 <memchr>
 800b51c:	9a04      	ldr	r2, [sp, #16]
 800b51e:	b9d8      	cbnz	r0, 800b558 <_vfiprintf_r+0x110>
 800b520:	06d1      	lsls	r1, r2, #27
 800b522:	bf44      	itt	mi
 800b524:	2320      	movmi	r3, #32
 800b526:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b52a:	0713      	lsls	r3, r2, #28
 800b52c:	bf44      	itt	mi
 800b52e:	232b      	movmi	r3, #43	@ 0x2b
 800b530:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b534:	f89a 3000 	ldrb.w	r3, [sl]
 800b538:	2b2a      	cmp	r3, #42	@ 0x2a
 800b53a:	d015      	beq.n	800b568 <_vfiprintf_r+0x120>
 800b53c:	9a07      	ldr	r2, [sp, #28]
 800b53e:	4654      	mov	r4, sl
 800b540:	2000      	movs	r0, #0
 800b542:	f04f 0c0a 	mov.w	ip, #10
 800b546:	4621      	mov	r1, r4
 800b548:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b54c:	3b30      	subs	r3, #48	@ 0x30
 800b54e:	2b09      	cmp	r3, #9
 800b550:	d94b      	bls.n	800b5ea <_vfiprintf_r+0x1a2>
 800b552:	b1b0      	cbz	r0, 800b582 <_vfiprintf_r+0x13a>
 800b554:	9207      	str	r2, [sp, #28]
 800b556:	e014      	b.n	800b582 <_vfiprintf_r+0x13a>
 800b558:	eba0 0308 	sub.w	r3, r0, r8
 800b55c:	fa09 f303 	lsl.w	r3, r9, r3
 800b560:	4313      	orrs	r3, r2
 800b562:	9304      	str	r3, [sp, #16]
 800b564:	46a2      	mov	sl, r4
 800b566:	e7d2      	b.n	800b50e <_vfiprintf_r+0xc6>
 800b568:	9b03      	ldr	r3, [sp, #12]
 800b56a:	1d19      	adds	r1, r3, #4
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	9103      	str	r1, [sp, #12]
 800b570:	2b00      	cmp	r3, #0
 800b572:	bfbb      	ittet	lt
 800b574:	425b      	neglt	r3, r3
 800b576:	f042 0202 	orrlt.w	r2, r2, #2
 800b57a:	9307      	strge	r3, [sp, #28]
 800b57c:	9307      	strlt	r3, [sp, #28]
 800b57e:	bfb8      	it	lt
 800b580:	9204      	strlt	r2, [sp, #16]
 800b582:	7823      	ldrb	r3, [r4, #0]
 800b584:	2b2e      	cmp	r3, #46	@ 0x2e
 800b586:	d10a      	bne.n	800b59e <_vfiprintf_r+0x156>
 800b588:	7863      	ldrb	r3, [r4, #1]
 800b58a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b58c:	d132      	bne.n	800b5f4 <_vfiprintf_r+0x1ac>
 800b58e:	9b03      	ldr	r3, [sp, #12]
 800b590:	1d1a      	adds	r2, r3, #4
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	9203      	str	r2, [sp, #12]
 800b596:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b59a:	3402      	adds	r4, #2
 800b59c:	9305      	str	r3, [sp, #20]
 800b59e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b674 <_vfiprintf_r+0x22c>
 800b5a2:	7821      	ldrb	r1, [r4, #0]
 800b5a4:	2203      	movs	r2, #3
 800b5a6:	4650      	mov	r0, sl
 800b5a8:	f7f4 fe1a 	bl	80001e0 <memchr>
 800b5ac:	b138      	cbz	r0, 800b5be <_vfiprintf_r+0x176>
 800b5ae:	9b04      	ldr	r3, [sp, #16]
 800b5b0:	eba0 000a 	sub.w	r0, r0, sl
 800b5b4:	2240      	movs	r2, #64	@ 0x40
 800b5b6:	4082      	lsls	r2, r0
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	3401      	adds	r4, #1
 800b5bc:	9304      	str	r3, [sp, #16]
 800b5be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5c2:	4829      	ldr	r0, [pc, #164]	@ (800b668 <_vfiprintf_r+0x220>)
 800b5c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5c8:	2206      	movs	r2, #6
 800b5ca:	f7f4 fe09 	bl	80001e0 <memchr>
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	d03f      	beq.n	800b652 <_vfiprintf_r+0x20a>
 800b5d2:	4b26      	ldr	r3, [pc, #152]	@ (800b66c <_vfiprintf_r+0x224>)
 800b5d4:	bb1b      	cbnz	r3, 800b61e <_vfiprintf_r+0x1d6>
 800b5d6:	9b03      	ldr	r3, [sp, #12]
 800b5d8:	3307      	adds	r3, #7
 800b5da:	f023 0307 	bic.w	r3, r3, #7
 800b5de:	3308      	adds	r3, #8
 800b5e0:	9303      	str	r3, [sp, #12]
 800b5e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5e4:	443b      	add	r3, r7
 800b5e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5e8:	e76a      	b.n	800b4c0 <_vfiprintf_r+0x78>
 800b5ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5ee:	460c      	mov	r4, r1
 800b5f0:	2001      	movs	r0, #1
 800b5f2:	e7a8      	b.n	800b546 <_vfiprintf_r+0xfe>
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	3401      	adds	r4, #1
 800b5f8:	9305      	str	r3, [sp, #20]
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	f04f 0c0a 	mov.w	ip, #10
 800b600:	4620      	mov	r0, r4
 800b602:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b606:	3a30      	subs	r2, #48	@ 0x30
 800b608:	2a09      	cmp	r2, #9
 800b60a:	d903      	bls.n	800b614 <_vfiprintf_r+0x1cc>
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d0c6      	beq.n	800b59e <_vfiprintf_r+0x156>
 800b610:	9105      	str	r1, [sp, #20]
 800b612:	e7c4      	b.n	800b59e <_vfiprintf_r+0x156>
 800b614:	fb0c 2101 	mla	r1, ip, r1, r2
 800b618:	4604      	mov	r4, r0
 800b61a:	2301      	movs	r3, #1
 800b61c:	e7f0      	b.n	800b600 <_vfiprintf_r+0x1b8>
 800b61e:	ab03      	add	r3, sp, #12
 800b620:	9300      	str	r3, [sp, #0]
 800b622:	462a      	mov	r2, r5
 800b624:	4b12      	ldr	r3, [pc, #72]	@ (800b670 <_vfiprintf_r+0x228>)
 800b626:	a904      	add	r1, sp, #16
 800b628:	4630      	mov	r0, r6
 800b62a:	f7fd fbc5 	bl	8008db8 <_printf_float>
 800b62e:	4607      	mov	r7, r0
 800b630:	1c78      	adds	r0, r7, #1
 800b632:	d1d6      	bne.n	800b5e2 <_vfiprintf_r+0x19a>
 800b634:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b636:	07d9      	lsls	r1, r3, #31
 800b638:	d405      	bmi.n	800b646 <_vfiprintf_r+0x1fe>
 800b63a:	89ab      	ldrh	r3, [r5, #12]
 800b63c:	059a      	lsls	r2, r3, #22
 800b63e:	d402      	bmi.n	800b646 <_vfiprintf_r+0x1fe>
 800b640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b642:	f7fe f929 	bl	8009898 <__retarget_lock_release_recursive>
 800b646:	89ab      	ldrh	r3, [r5, #12]
 800b648:	065b      	lsls	r3, r3, #25
 800b64a:	f53f af1f 	bmi.w	800b48c <_vfiprintf_r+0x44>
 800b64e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b650:	e71e      	b.n	800b490 <_vfiprintf_r+0x48>
 800b652:	ab03      	add	r3, sp, #12
 800b654:	9300      	str	r3, [sp, #0]
 800b656:	462a      	mov	r2, r5
 800b658:	4b05      	ldr	r3, [pc, #20]	@ (800b670 <_vfiprintf_r+0x228>)
 800b65a:	a904      	add	r1, sp, #16
 800b65c:	4630      	mov	r0, r6
 800b65e:	f7fd fe43 	bl	80092e8 <_printf_i>
 800b662:	e7e4      	b.n	800b62e <_vfiprintf_r+0x1e6>
 800b664:	0800c0f8 	.word	0x0800c0f8
 800b668:	0800c102 	.word	0x0800c102
 800b66c:	08008db9 	.word	0x08008db9
 800b670:	0800b425 	.word	0x0800b425
 800b674:	0800c0fe 	.word	0x0800c0fe

0800b678 <__swbuf_r>:
 800b678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b67a:	460e      	mov	r6, r1
 800b67c:	4614      	mov	r4, r2
 800b67e:	4605      	mov	r5, r0
 800b680:	b118      	cbz	r0, 800b68a <__swbuf_r+0x12>
 800b682:	6a03      	ldr	r3, [r0, #32]
 800b684:	b90b      	cbnz	r3, 800b68a <__swbuf_r+0x12>
 800b686:	f7fd ffdb 	bl	8009640 <__sinit>
 800b68a:	69a3      	ldr	r3, [r4, #24]
 800b68c:	60a3      	str	r3, [r4, #8]
 800b68e:	89a3      	ldrh	r3, [r4, #12]
 800b690:	071a      	lsls	r2, r3, #28
 800b692:	d501      	bpl.n	800b698 <__swbuf_r+0x20>
 800b694:	6923      	ldr	r3, [r4, #16]
 800b696:	b943      	cbnz	r3, 800b6aa <__swbuf_r+0x32>
 800b698:	4621      	mov	r1, r4
 800b69a:	4628      	mov	r0, r5
 800b69c:	f000 f82a 	bl	800b6f4 <__swsetup_r>
 800b6a0:	b118      	cbz	r0, 800b6aa <__swbuf_r+0x32>
 800b6a2:	f04f 37ff 	mov.w	r7, #4294967295
 800b6a6:	4638      	mov	r0, r7
 800b6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6aa:	6823      	ldr	r3, [r4, #0]
 800b6ac:	6922      	ldr	r2, [r4, #16]
 800b6ae:	1a98      	subs	r0, r3, r2
 800b6b0:	6963      	ldr	r3, [r4, #20]
 800b6b2:	b2f6      	uxtb	r6, r6
 800b6b4:	4283      	cmp	r3, r0
 800b6b6:	4637      	mov	r7, r6
 800b6b8:	dc05      	bgt.n	800b6c6 <__swbuf_r+0x4e>
 800b6ba:	4621      	mov	r1, r4
 800b6bc:	4628      	mov	r0, r5
 800b6be:	f7ff fd99 	bl	800b1f4 <_fflush_r>
 800b6c2:	2800      	cmp	r0, #0
 800b6c4:	d1ed      	bne.n	800b6a2 <__swbuf_r+0x2a>
 800b6c6:	68a3      	ldr	r3, [r4, #8]
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	60a3      	str	r3, [r4, #8]
 800b6cc:	6823      	ldr	r3, [r4, #0]
 800b6ce:	1c5a      	adds	r2, r3, #1
 800b6d0:	6022      	str	r2, [r4, #0]
 800b6d2:	701e      	strb	r6, [r3, #0]
 800b6d4:	6962      	ldr	r2, [r4, #20]
 800b6d6:	1c43      	adds	r3, r0, #1
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d004      	beq.n	800b6e6 <__swbuf_r+0x6e>
 800b6dc:	89a3      	ldrh	r3, [r4, #12]
 800b6de:	07db      	lsls	r3, r3, #31
 800b6e0:	d5e1      	bpl.n	800b6a6 <__swbuf_r+0x2e>
 800b6e2:	2e0a      	cmp	r6, #10
 800b6e4:	d1df      	bne.n	800b6a6 <__swbuf_r+0x2e>
 800b6e6:	4621      	mov	r1, r4
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	f7ff fd83 	bl	800b1f4 <_fflush_r>
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	d0d9      	beq.n	800b6a6 <__swbuf_r+0x2e>
 800b6f2:	e7d6      	b.n	800b6a2 <__swbuf_r+0x2a>

0800b6f4 <__swsetup_r>:
 800b6f4:	b538      	push	{r3, r4, r5, lr}
 800b6f6:	4b29      	ldr	r3, [pc, #164]	@ (800b79c <__swsetup_r+0xa8>)
 800b6f8:	4605      	mov	r5, r0
 800b6fa:	6818      	ldr	r0, [r3, #0]
 800b6fc:	460c      	mov	r4, r1
 800b6fe:	b118      	cbz	r0, 800b708 <__swsetup_r+0x14>
 800b700:	6a03      	ldr	r3, [r0, #32]
 800b702:	b90b      	cbnz	r3, 800b708 <__swsetup_r+0x14>
 800b704:	f7fd ff9c 	bl	8009640 <__sinit>
 800b708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b70c:	0719      	lsls	r1, r3, #28
 800b70e:	d422      	bmi.n	800b756 <__swsetup_r+0x62>
 800b710:	06da      	lsls	r2, r3, #27
 800b712:	d407      	bmi.n	800b724 <__swsetup_r+0x30>
 800b714:	2209      	movs	r2, #9
 800b716:	602a      	str	r2, [r5, #0]
 800b718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b71c:	81a3      	strh	r3, [r4, #12]
 800b71e:	f04f 30ff 	mov.w	r0, #4294967295
 800b722:	e033      	b.n	800b78c <__swsetup_r+0x98>
 800b724:	0758      	lsls	r0, r3, #29
 800b726:	d512      	bpl.n	800b74e <__swsetup_r+0x5a>
 800b728:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b72a:	b141      	cbz	r1, 800b73e <__swsetup_r+0x4a>
 800b72c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b730:	4299      	cmp	r1, r3
 800b732:	d002      	beq.n	800b73a <__swsetup_r+0x46>
 800b734:	4628      	mov	r0, r5
 800b736:	f7fe feff 	bl	800a538 <_free_r>
 800b73a:	2300      	movs	r3, #0
 800b73c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b73e:	89a3      	ldrh	r3, [r4, #12]
 800b740:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b744:	81a3      	strh	r3, [r4, #12]
 800b746:	2300      	movs	r3, #0
 800b748:	6063      	str	r3, [r4, #4]
 800b74a:	6923      	ldr	r3, [r4, #16]
 800b74c:	6023      	str	r3, [r4, #0]
 800b74e:	89a3      	ldrh	r3, [r4, #12]
 800b750:	f043 0308 	orr.w	r3, r3, #8
 800b754:	81a3      	strh	r3, [r4, #12]
 800b756:	6923      	ldr	r3, [r4, #16]
 800b758:	b94b      	cbnz	r3, 800b76e <__swsetup_r+0x7a>
 800b75a:	89a3      	ldrh	r3, [r4, #12]
 800b75c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b760:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b764:	d003      	beq.n	800b76e <__swsetup_r+0x7a>
 800b766:	4621      	mov	r1, r4
 800b768:	4628      	mov	r0, r5
 800b76a:	f000 f883 	bl	800b874 <__smakebuf_r>
 800b76e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b772:	f013 0201 	ands.w	r2, r3, #1
 800b776:	d00a      	beq.n	800b78e <__swsetup_r+0x9a>
 800b778:	2200      	movs	r2, #0
 800b77a:	60a2      	str	r2, [r4, #8]
 800b77c:	6962      	ldr	r2, [r4, #20]
 800b77e:	4252      	negs	r2, r2
 800b780:	61a2      	str	r2, [r4, #24]
 800b782:	6922      	ldr	r2, [r4, #16]
 800b784:	b942      	cbnz	r2, 800b798 <__swsetup_r+0xa4>
 800b786:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b78a:	d1c5      	bne.n	800b718 <__swsetup_r+0x24>
 800b78c:	bd38      	pop	{r3, r4, r5, pc}
 800b78e:	0799      	lsls	r1, r3, #30
 800b790:	bf58      	it	pl
 800b792:	6962      	ldrpl	r2, [r4, #20]
 800b794:	60a2      	str	r2, [r4, #8]
 800b796:	e7f4      	b.n	800b782 <__swsetup_r+0x8e>
 800b798:	2000      	movs	r0, #0
 800b79a:	e7f7      	b.n	800b78c <__swsetup_r+0x98>
 800b79c:	20000108 	.word	0x20000108

0800b7a0 <_raise_r>:
 800b7a0:	291f      	cmp	r1, #31
 800b7a2:	b538      	push	{r3, r4, r5, lr}
 800b7a4:	4605      	mov	r5, r0
 800b7a6:	460c      	mov	r4, r1
 800b7a8:	d904      	bls.n	800b7b4 <_raise_r+0x14>
 800b7aa:	2316      	movs	r3, #22
 800b7ac:	6003      	str	r3, [r0, #0]
 800b7ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b2:	bd38      	pop	{r3, r4, r5, pc}
 800b7b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b7b6:	b112      	cbz	r2, 800b7be <_raise_r+0x1e>
 800b7b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7bc:	b94b      	cbnz	r3, 800b7d2 <_raise_r+0x32>
 800b7be:	4628      	mov	r0, r5
 800b7c0:	f000 f830 	bl	800b824 <_getpid_r>
 800b7c4:	4622      	mov	r2, r4
 800b7c6:	4601      	mov	r1, r0
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7ce:	f000 b817 	b.w	800b800 <_kill_r>
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d00a      	beq.n	800b7ec <_raise_r+0x4c>
 800b7d6:	1c59      	adds	r1, r3, #1
 800b7d8:	d103      	bne.n	800b7e2 <_raise_r+0x42>
 800b7da:	2316      	movs	r3, #22
 800b7dc:	6003      	str	r3, [r0, #0]
 800b7de:	2001      	movs	r0, #1
 800b7e0:	e7e7      	b.n	800b7b2 <_raise_r+0x12>
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	4798      	blx	r3
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	e7e0      	b.n	800b7b2 <_raise_r+0x12>

0800b7f0 <raise>:
 800b7f0:	4b02      	ldr	r3, [pc, #8]	@ (800b7fc <raise+0xc>)
 800b7f2:	4601      	mov	r1, r0
 800b7f4:	6818      	ldr	r0, [r3, #0]
 800b7f6:	f7ff bfd3 	b.w	800b7a0 <_raise_r>
 800b7fa:	bf00      	nop
 800b7fc:	20000108 	.word	0x20000108

0800b800 <_kill_r>:
 800b800:	b538      	push	{r3, r4, r5, lr}
 800b802:	4d07      	ldr	r5, [pc, #28]	@ (800b820 <_kill_r+0x20>)
 800b804:	2300      	movs	r3, #0
 800b806:	4604      	mov	r4, r0
 800b808:	4608      	mov	r0, r1
 800b80a:	4611      	mov	r1, r2
 800b80c:	602b      	str	r3, [r5, #0]
 800b80e:	f7f5 ff0f 	bl	8001630 <_kill>
 800b812:	1c43      	adds	r3, r0, #1
 800b814:	d102      	bne.n	800b81c <_kill_r+0x1c>
 800b816:	682b      	ldr	r3, [r5, #0]
 800b818:	b103      	cbz	r3, 800b81c <_kill_r+0x1c>
 800b81a:	6023      	str	r3, [r4, #0]
 800b81c:	bd38      	pop	{r3, r4, r5, pc}
 800b81e:	bf00      	nop
 800b820:	2000205c 	.word	0x2000205c

0800b824 <_getpid_r>:
 800b824:	f7f5 befc 	b.w	8001620 <_getpid>

0800b828 <__swhatbuf_r>:
 800b828:	b570      	push	{r4, r5, r6, lr}
 800b82a:	460c      	mov	r4, r1
 800b82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b830:	2900      	cmp	r1, #0
 800b832:	b096      	sub	sp, #88	@ 0x58
 800b834:	4615      	mov	r5, r2
 800b836:	461e      	mov	r6, r3
 800b838:	da0d      	bge.n	800b856 <__swhatbuf_r+0x2e>
 800b83a:	89a3      	ldrh	r3, [r4, #12]
 800b83c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b840:	f04f 0100 	mov.w	r1, #0
 800b844:	bf14      	ite	ne
 800b846:	2340      	movne	r3, #64	@ 0x40
 800b848:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b84c:	2000      	movs	r0, #0
 800b84e:	6031      	str	r1, [r6, #0]
 800b850:	602b      	str	r3, [r5, #0]
 800b852:	b016      	add	sp, #88	@ 0x58
 800b854:	bd70      	pop	{r4, r5, r6, pc}
 800b856:	466a      	mov	r2, sp
 800b858:	f000 f848 	bl	800b8ec <_fstat_r>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	dbec      	blt.n	800b83a <__swhatbuf_r+0x12>
 800b860:	9901      	ldr	r1, [sp, #4]
 800b862:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b866:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b86a:	4259      	negs	r1, r3
 800b86c:	4159      	adcs	r1, r3
 800b86e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b872:	e7eb      	b.n	800b84c <__swhatbuf_r+0x24>

0800b874 <__smakebuf_r>:
 800b874:	898b      	ldrh	r3, [r1, #12]
 800b876:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b878:	079d      	lsls	r5, r3, #30
 800b87a:	4606      	mov	r6, r0
 800b87c:	460c      	mov	r4, r1
 800b87e:	d507      	bpl.n	800b890 <__smakebuf_r+0x1c>
 800b880:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b884:	6023      	str	r3, [r4, #0]
 800b886:	6123      	str	r3, [r4, #16]
 800b888:	2301      	movs	r3, #1
 800b88a:	6163      	str	r3, [r4, #20]
 800b88c:	b003      	add	sp, #12
 800b88e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b890:	ab01      	add	r3, sp, #4
 800b892:	466a      	mov	r2, sp
 800b894:	f7ff ffc8 	bl	800b828 <__swhatbuf_r>
 800b898:	9f00      	ldr	r7, [sp, #0]
 800b89a:	4605      	mov	r5, r0
 800b89c:	4639      	mov	r1, r7
 800b89e:	4630      	mov	r0, r6
 800b8a0:	f7fe febe 	bl	800a620 <_malloc_r>
 800b8a4:	b948      	cbnz	r0, 800b8ba <__smakebuf_r+0x46>
 800b8a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8aa:	059a      	lsls	r2, r3, #22
 800b8ac:	d4ee      	bmi.n	800b88c <__smakebuf_r+0x18>
 800b8ae:	f023 0303 	bic.w	r3, r3, #3
 800b8b2:	f043 0302 	orr.w	r3, r3, #2
 800b8b6:	81a3      	strh	r3, [r4, #12]
 800b8b8:	e7e2      	b.n	800b880 <__smakebuf_r+0xc>
 800b8ba:	89a3      	ldrh	r3, [r4, #12]
 800b8bc:	6020      	str	r0, [r4, #0]
 800b8be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8c2:	81a3      	strh	r3, [r4, #12]
 800b8c4:	9b01      	ldr	r3, [sp, #4]
 800b8c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b8ca:	b15b      	cbz	r3, 800b8e4 <__smakebuf_r+0x70>
 800b8cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	f000 f81d 	bl	800b910 <_isatty_r>
 800b8d6:	b128      	cbz	r0, 800b8e4 <__smakebuf_r+0x70>
 800b8d8:	89a3      	ldrh	r3, [r4, #12]
 800b8da:	f023 0303 	bic.w	r3, r3, #3
 800b8de:	f043 0301 	orr.w	r3, r3, #1
 800b8e2:	81a3      	strh	r3, [r4, #12]
 800b8e4:	89a3      	ldrh	r3, [r4, #12]
 800b8e6:	431d      	orrs	r5, r3
 800b8e8:	81a5      	strh	r5, [r4, #12]
 800b8ea:	e7cf      	b.n	800b88c <__smakebuf_r+0x18>

0800b8ec <_fstat_r>:
 800b8ec:	b538      	push	{r3, r4, r5, lr}
 800b8ee:	4d07      	ldr	r5, [pc, #28]	@ (800b90c <_fstat_r+0x20>)
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	4608      	mov	r0, r1
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	602b      	str	r3, [r5, #0]
 800b8fa:	f7f5 fef9 	bl	80016f0 <_fstat>
 800b8fe:	1c43      	adds	r3, r0, #1
 800b900:	d102      	bne.n	800b908 <_fstat_r+0x1c>
 800b902:	682b      	ldr	r3, [r5, #0]
 800b904:	b103      	cbz	r3, 800b908 <_fstat_r+0x1c>
 800b906:	6023      	str	r3, [r4, #0]
 800b908:	bd38      	pop	{r3, r4, r5, pc}
 800b90a:	bf00      	nop
 800b90c:	2000205c 	.word	0x2000205c

0800b910 <_isatty_r>:
 800b910:	b538      	push	{r3, r4, r5, lr}
 800b912:	4d06      	ldr	r5, [pc, #24]	@ (800b92c <_isatty_r+0x1c>)
 800b914:	2300      	movs	r3, #0
 800b916:	4604      	mov	r4, r0
 800b918:	4608      	mov	r0, r1
 800b91a:	602b      	str	r3, [r5, #0]
 800b91c:	f7f5 fef8 	bl	8001710 <_isatty>
 800b920:	1c43      	adds	r3, r0, #1
 800b922:	d102      	bne.n	800b92a <_isatty_r+0x1a>
 800b924:	682b      	ldr	r3, [r5, #0]
 800b926:	b103      	cbz	r3, 800b92a <_isatty_r+0x1a>
 800b928:	6023      	str	r3, [r4, #0]
 800b92a:	bd38      	pop	{r3, r4, r5, pc}
 800b92c:	2000205c 	.word	0x2000205c

0800b930 <atan2>:
 800b930:	f000 b802 	b.w	800b938 <__ieee754_atan2>
 800b934:	0000      	movs	r0, r0
	...

0800b938 <__ieee754_atan2>:
 800b938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b93c:	ec57 6b11 	vmov	r6, r7, d1
 800b940:	4273      	negs	r3, r6
 800b942:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800bac0 <__ieee754_atan2+0x188>
 800b946:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800b94a:	4333      	orrs	r3, r6
 800b94c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b950:	4543      	cmp	r3, r8
 800b952:	ec51 0b10 	vmov	r0, r1, d0
 800b956:	4635      	mov	r5, r6
 800b958:	d809      	bhi.n	800b96e <__ieee754_atan2+0x36>
 800b95a:	4244      	negs	r4, r0
 800b95c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b960:	4304      	orrs	r4, r0
 800b962:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b966:	4544      	cmp	r4, r8
 800b968:	468e      	mov	lr, r1
 800b96a:	4681      	mov	r9, r0
 800b96c:	d907      	bls.n	800b97e <__ieee754_atan2+0x46>
 800b96e:	4632      	mov	r2, r6
 800b970:	463b      	mov	r3, r7
 800b972:	f7f4 fc93 	bl	800029c <__adddf3>
 800b976:	ec41 0b10 	vmov	d0, r0, r1
 800b97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b97e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800b982:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800b986:	4334      	orrs	r4, r6
 800b988:	d103      	bne.n	800b992 <__ieee754_atan2+0x5a>
 800b98a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b98e:	f000 b89b 	b.w	800bac8 <atan>
 800b992:	17bc      	asrs	r4, r7, #30
 800b994:	f004 0402 	and.w	r4, r4, #2
 800b998:	ea53 0909 	orrs.w	r9, r3, r9
 800b99c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b9a0:	d107      	bne.n	800b9b2 <__ieee754_atan2+0x7a>
 800b9a2:	2c02      	cmp	r4, #2
 800b9a4:	d05f      	beq.n	800ba66 <__ieee754_atan2+0x12e>
 800b9a6:	2c03      	cmp	r4, #3
 800b9a8:	d1e5      	bne.n	800b976 <__ieee754_atan2+0x3e>
 800b9aa:	a141      	add	r1, pc, #260	@ (adr r1, 800bab0 <__ieee754_atan2+0x178>)
 800b9ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9b0:	e7e1      	b.n	800b976 <__ieee754_atan2+0x3e>
 800b9b2:	4315      	orrs	r5, r2
 800b9b4:	d106      	bne.n	800b9c4 <__ieee754_atan2+0x8c>
 800b9b6:	f1be 0f00 	cmp.w	lr, #0
 800b9ba:	da5f      	bge.n	800ba7c <__ieee754_atan2+0x144>
 800b9bc:	a13e      	add	r1, pc, #248	@ (adr r1, 800bab8 <__ieee754_atan2+0x180>)
 800b9be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9c2:	e7d8      	b.n	800b976 <__ieee754_atan2+0x3e>
 800b9c4:	4542      	cmp	r2, r8
 800b9c6:	d10f      	bne.n	800b9e8 <__ieee754_atan2+0xb0>
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	f104 34ff 	add.w	r4, r4, #4294967295
 800b9ce:	d107      	bne.n	800b9e0 <__ieee754_atan2+0xa8>
 800b9d0:	2c02      	cmp	r4, #2
 800b9d2:	d84c      	bhi.n	800ba6e <__ieee754_atan2+0x136>
 800b9d4:	4b34      	ldr	r3, [pc, #208]	@ (800baa8 <__ieee754_atan2+0x170>)
 800b9d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b9da:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9de:	e7ca      	b.n	800b976 <__ieee754_atan2+0x3e>
 800b9e0:	2c02      	cmp	r4, #2
 800b9e2:	d848      	bhi.n	800ba76 <__ieee754_atan2+0x13e>
 800b9e4:	4b31      	ldr	r3, [pc, #196]	@ (800baac <__ieee754_atan2+0x174>)
 800b9e6:	e7f6      	b.n	800b9d6 <__ieee754_atan2+0x9e>
 800b9e8:	4543      	cmp	r3, r8
 800b9ea:	d0e4      	beq.n	800b9b6 <__ieee754_atan2+0x7e>
 800b9ec:	1a9b      	subs	r3, r3, r2
 800b9ee:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800b9f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b9f6:	da1e      	bge.n	800ba36 <__ieee754_atan2+0xfe>
 800b9f8:	2f00      	cmp	r7, #0
 800b9fa:	da01      	bge.n	800ba00 <__ieee754_atan2+0xc8>
 800b9fc:	323c      	adds	r2, #60	@ 0x3c
 800b9fe:	db1e      	blt.n	800ba3e <__ieee754_atan2+0x106>
 800ba00:	4632      	mov	r2, r6
 800ba02:	463b      	mov	r3, r7
 800ba04:	f7f4 ff2a 	bl	800085c <__aeabi_ddiv>
 800ba08:	ec41 0b10 	vmov	d0, r0, r1
 800ba0c:	f000 f9f4 	bl	800bdf8 <fabs>
 800ba10:	f000 f85a 	bl	800bac8 <atan>
 800ba14:	ec51 0b10 	vmov	r0, r1, d0
 800ba18:	2c01      	cmp	r4, #1
 800ba1a:	d013      	beq.n	800ba44 <__ieee754_atan2+0x10c>
 800ba1c:	2c02      	cmp	r4, #2
 800ba1e:	d015      	beq.n	800ba4c <__ieee754_atan2+0x114>
 800ba20:	2c00      	cmp	r4, #0
 800ba22:	d0a8      	beq.n	800b976 <__ieee754_atan2+0x3e>
 800ba24:	a318      	add	r3, pc, #96	@ (adr r3, 800ba88 <__ieee754_atan2+0x150>)
 800ba26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2a:	f7f4 fc35 	bl	8000298 <__aeabi_dsub>
 800ba2e:	a318      	add	r3, pc, #96	@ (adr r3, 800ba90 <__ieee754_atan2+0x158>)
 800ba30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba34:	e014      	b.n	800ba60 <__ieee754_atan2+0x128>
 800ba36:	a118      	add	r1, pc, #96	@ (adr r1, 800ba98 <__ieee754_atan2+0x160>)
 800ba38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba3c:	e7ec      	b.n	800ba18 <__ieee754_atan2+0xe0>
 800ba3e:	2000      	movs	r0, #0
 800ba40:	2100      	movs	r1, #0
 800ba42:	e7e9      	b.n	800ba18 <__ieee754_atan2+0xe0>
 800ba44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ba48:	4619      	mov	r1, r3
 800ba4a:	e794      	b.n	800b976 <__ieee754_atan2+0x3e>
 800ba4c:	a30e      	add	r3, pc, #56	@ (adr r3, 800ba88 <__ieee754_atan2+0x150>)
 800ba4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba52:	f7f4 fc21 	bl	8000298 <__aeabi_dsub>
 800ba56:	4602      	mov	r2, r0
 800ba58:	460b      	mov	r3, r1
 800ba5a:	a10d      	add	r1, pc, #52	@ (adr r1, 800ba90 <__ieee754_atan2+0x158>)
 800ba5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba60:	f7f4 fc1a 	bl	8000298 <__aeabi_dsub>
 800ba64:	e787      	b.n	800b976 <__ieee754_atan2+0x3e>
 800ba66:	a10a      	add	r1, pc, #40	@ (adr r1, 800ba90 <__ieee754_atan2+0x158>)
 800ba68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba6c:	e783      	b.n	800b976 <__ieee754_atan2+0x3e>
 800ba6e:	a10c      	add	r1, pc, #48	@ (adr r1, 800baa0 <__ieee754_atan2+0x168>)
 800ba70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba74:	e77f      	b.n	800b976 <__ieee754_atan2+0x3e>
 800ba76:	2000      	movs	r0, #0
 800ba78:	2100      	movs	r1, #0
 800ba7a:	e77c      	b.n	800b976 <__ieee754_atan2+0x3e>
 800ba7c:	a106      	add	r1, pc, #24	@ (adr r1, 800ba98 <__ieee754_atan2+0x160>)
 800ba7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba82:	e778      	b.n	800b976 <__ieee754_atan2+0x3e>
 800ba84:	f3af 8000 	nop.w
 800ba88:	33145c07 	.word	0x33145c07
 800ba8c:	3ca1a626 	.word	0x3ca1a626
 800ba90:	54442d18 	.word	0x54442d18
 800ba94:	400921fb 	.word	0x400921fb
 800ba98:	54442d18 	.word	0x54442d18
 800ba9c:	3ff921fb 	.word	0x3ff921fb
 800baa0:	54442d18 	.word	0x54442d18
 800baa4:	3fe921fb 	.word	0x3fe921fb
 800baa8:	0800c268 	.word	0x0800c268
 800baac:	0800c250 	.word	0x0800c250
 800bab0:	54442d18 	.word	0x54442d18
 800bab4:	c00921fb 	.word	0xc00921fb
 800bab8:	54442d18 	.word	0x54442d18
 800babc:	bff921fb 	.word	0xbff921fb
 800bac0:	7ff00000 	.word	0x7ff00000
 800bac4:	00000000 	.word	0x00000000

0800bac8 <atan>:
 800bac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bacc:	ec55 4b10 	vmov	r4, r5, d0
 800bad0:	4bbf      	ldr	r3, [pc, #764]	@ (800bdd0 <atan+0x308>)
 800bad2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800bad6:	429e      	cmp	r6, r3
 800bad8:	46ab      	mov	fp, r5
 800bada:	d918      	bls.n	800bb0e <atan+0x46>
 800badc:	4bbd      	ldr	r3, [pc, #756]	@ (800bdd4 <atan+0x30c>)
 800bade:	429e      	cmp	r6, r3
 800bae0:	d801      	bhi.n	800bae6 <atan+0x1e>
 800bae2:	d109      	bne.n	800baf8 <atan+0x30>
 800bae4:	b144      	cbz	r4, 800baf8 <atan+0x30>
 800bae6:	4622      	mov	r2, r4
 800bae8:	462b      	mov	r3, r5
 800baea:	4620      	mov	r0, r4
 800baec:	4629      	mov	r1, r5
 800baee:	f7f4 fbd5 	bl	800029c <__adddf3>
 800baf2:	4604      	mov	r4, r0
 800baf4:	460d      	mov	r5, r1
 800baf6:	e006      	b.n	800bb06 <atan+0x3e>
 800baf8:	f1bb 0f00 	cmp.w	fp, #0
 800bafc:	f340 812b 	ble.w	800bd56 <atan+0x28e>
 800bb00:	a597      	add	r5, pc, #604	@ (adr r5, 800bd60 <atan+0x298>)
 800bb02:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb06:	ec45 4b10 	vmov	d0, r4, r5
 800bb0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb0e:	4bb2      	ldr	r3, [pc, #712]	@ (800bdd8 <atan+0x310>)
 800bb10:	429e      	cmp	r6, r3
 800bb12:	d813      	bhi.n	800bb3c <atan+0x74>
 800bb14:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800bb18:	429e      	cmp	r6, r3
 800bb1a:	d80c      	bhi.n	800bb36 <atan+0x6e>
 800bb1c:	a392      	add	r3, pc, #584	@ (adr r3, 800bd68 <atan+0x2a0>)
 800bb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb22:	4620      	mov	r0, r4
 800bb24:	4629      	mov	r1, r5
 800bb26:	f7f4 fbb9 	bl	800029c <__adddf3>
 800bb2a:	4bac      	ldr	r3, [pc, #688]	@ (800bddc <atan+0x314>)
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f7f4 fffb 	bl	8000b28 <__aeabi_dcmpgt>
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d1e7      	bne.n	800bb06 <atan+0x3e>
 800bb36:	f04f 3aff 	mov.w	sl, #4294967295
 800bb3a:	e029      	b.n	800bb90 <atan+0xc8>
 800bb3c:	f000 f95c 	bl	800bdf8 <fabs>
 800bb40:	4ba7      	ldr	r3, [pc, #668]	@ (800bde0 <atan+0x318>)
 800bb42:	429e      	cmp	r6, r3
 800bb44:	ec55 4b10 	vmov	r4, r5, d0
 800bb48:	f200 80bc 	bhi.w	800bcc4 <atan+0x1fc>
 800bb4c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800bb50:	429e      	cmp	r6, r3
 800bb52:	f200 809e 	bhi.w	800bc92 <atan+0x1ca>
 800bb56:	4622      	mov	r2, r4
 800bb58:	462b      	mov	r3, r5
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	4629      	mov	r1, r5
 800bb5e:	f7f4 fb9d 	bl	800029c <__adddf3>
 800bb62:	4b9e      	ldr	r3, [pc, #632]	@ (800bddc <atan+0x314>)
 800bb64:	2200      	movs	r2, #0
 800bb66:	f7f4 fb97 	bl	8000298 <__aeabi_dsub>
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	460f      	mov	r7, r1
 800bb70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bb74:	4620      	mov	r0, r4
 800bb76:	4629      	mov	r1, r5
 800bb78:	f7f4 fb90 	bl	800029c <__adddf3>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	460b      	mov	r3, r1
 800bb80:	4630      	mov	r0, r6
 800bb82:	4639      	mov	r1, r7
 800bb84:	f7f4 fe6a 	bl	800085c <__aeabi_ddiv>
 800bb88:	f04f 0a00 	mov.w	sl, #0
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	460d      	mov	r5, r1
 800bb90:	4622      	mov	r2, r4
 800bb92:	462b      	mov	r3, r5
 800bb94:	4620      	mov	r0, r4
 800bb96:	4629      	mov	r1, r5
 800bb98:	f7f4 fd36 	bl	8000608 <__aeabi_dmul>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	460b      	mov	r3, r1
 800bba0:	4680      	mov	r8, r0
 800bba2:	4689      	mov	r9, r1
 800bba4:	f7f4 fd30 	bl	8000608 <__aeabi_dmul>
 800bba8:	a371      	add	r3, pc, #452	@ (adr r3, 800bd70 <atan+0x2a8>)
 800bbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbae:	4606      	mov	r6, r0
 800bbb0:	460f      	mov	r7, r1
 800bbb2:	f7f4 fd29 	bl	8000608 <__aeabi_dmul>
 800bbb6:	a370      	add	r3, pc, #448	@ (adr r3, 800bd78 <atan+0x2b0>)
 800bbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbc:	f7f4 fb6e 	bl	800029c <__adddf3>
 800bbc0:	4632      	mov	r2, r6
 800bbc2:	463b      	mov	r3, r7
 800bbc4:	f7f4 fd20 	bl	8000608 <__aeabi_dmul>
 800bbc8:	a36d      	add	r3, pc, #436	@ (adr r3, 800bd80 <atan+0x2b8>)
 800bbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbce:	f7f4 fb65 	bl	800029c <__adddf3>
 800bbd2:	4632      	mov	r2, r6
 800bbd4:	463b      	mov	r3, r7
 800bbd6:	f7f4 fd17 	bl	8000608 <__aeabi_dmul>
 800bbda:	a36b      	add	r3, pc, #428	@ (adr r3, 800bd88 <atan+0x2c0>)
 800bbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe0:	f7f4 fb5c 	bl	800029c <__adddf3>
 800bbe4:	4632      	mov	r2, r6
 800bbe6:	463b      	mov	r3, r7
 800bbe8:	f7f4 fd0e 	bl	8000608 <__aeabi_dmul>
 800bbec:	a368      	add	r3, pc, #416	@ (adr r3, 800bd90 <atan+0x2c8>)
 800bbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf2:	f7f4 fb53 	bl	800029c <__adddf3>
 800bbf6:	4632      	mov	r2, r6
 800bbf8:	463b      	mov	r3, r7
 800bbfa:	f7f4 fd05 	bl	8000608 <__aeabi_dmul>
 800bbfe:	a366      	add	r3, pc, #408	@ (adr r3, 800bd98 <atan+0x2d0>)
 800bc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc04:	f7f4 fb4a 	bl	800029c <__adddf3>
 800bc08:	4642      	mov	r2, r8
 800bc0a:	464b      	mov	r3, r9
 800bc0c:	f7f4 fcfc 	bl	8000608 <__aeabi_dmul>
 800bc10:	a363      	add	r3, pc, #396	@ (adr r3, 800bda0 <atan+0x2d8>)
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	4680      	mov	r8, r0
 800bc18:	4689      	mov	r9, r1
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	4639      	mov	r1, r7
 800bc1e:	f7f4 fcf3 	bl	8000608 <__aeabi_dmul>
 800bc22:	a361      	add	r3, pc, #388	@ (adr r3, 800bda8 <atan+0x2e0>)
 800bc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc28:	f7f4 fb36 	bl	8000298 <__aeabi_dsub>
 800bc2c:	4632      	mov	r2, r6
 800bc2e:	463b      	mov	r3, r7
 800bc30:	f7f4 fcea 	bl	8000608 <__aeabi_dmul>
 800bc34:	a35e      	add	r3, pc, #376	@ (adr r3, 800bdb0 <atan+0x2e8>)
 800bc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3a:	f7f4 fb2d 	bl	8000298 <__aeabi_dsub>
 800bc3e:	4632      	mov	r2, r6
 800bc40:	463b      	mov	r3, r7
 800bc42:	f7f4 fce1 	bl	8000608 <__aeabi_dmul>
 800bc46:	a35c      	add	r3, pc, #368	@ (adr r3, 800bdb8 <atan+0x2f0>)
 800bc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4c:	f7f4 fb24 	bl	8000298 <__aeabi_dsub>
 800bc50:	4632      	mov	r2, r6
 800bc52:	463b      	mov	r3, r7
 800bc54:	f7f4 fcd8 	bl	8000608 <__aeabi_dmul>
 800bc58:	a359      	add	r3, pc, #356	@ (adr r3, 800bdc0 <atan+0x2f8>)
 800bc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5e:	f7f4 fb1b 	bl	8000298 <__aeabi_dsub>
 800bc62:	4632      	mov	r2, r6
 800bc64:	463b      	mov	r3, r7
 800bc66:	f7f4 fccf 	bl	8000608 <__aeabi_dmul>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	4640      	mov	r0, r8
 800bc70:	4649      	mov	r1, r9
 800bc72:	f7f4 fb13 	bl	800029c <__adddf3>
 800bc76:	4622      	mov	r2, r4
 800bc78:	462b      	mov	r3, r5
 800bc7a:	f7f4 fcc5 	bl	8000608 <__aeabi_dmul>
 800bc7e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bc82:	4602      	mov	r2, r0
 800bc84:	460b      	mov	r3, r1
 800bc86:	d148      	bne.n	800bd1a <atan+0x252>
 800bc88:	4620      	mov	r0, r4
 800bc8a:	4629      	mov	r1, r5
 800bc8c:	f7f4 fb04 	bl	8000298 <__aeabi_dsub>
 800bc90:	e72f      	b.n	800baf2 <atan+0x2a>
 800bc92:	4b52      	ldr	r3, [pc, #328]	@ (800bddc <atan+0x314>)
 800bc94:	2200      	movs	r2, #0
 800bc96:	4620      	mov	r0, r4
 800bc98:	4629      	mov	r1, r5
 800bc9a:	f7f4 fafd 	bl	8000298 <__aeabi_dsub>
 800bc9e:	4b4f      	ldr	r3, [pc, #316]	@ (800bddc <atan+0x314>)
 800bca0:	4606      	mov	r6, r0
 800bca2:	460f      	mov	r7, r1
 800bca4:	2200      	movs	r2, #0
 800bca6:	4620      	mov	r0, r4
 800bca8:	4629      	mov	r1, r5
 800bcaa:	f7f4 faf7 	bl	800029c <__adddf3>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	4630      	mov	r0, r6
 800bcb4:	4639      	mov	r1, r7
 800bcb6:	f7f4 fdd1 	bl	800085c <__aeabi_ddiv>
 800bcba:	f04f 0a01 	mov.w	sl, #1
 800bcbe:	4604      	mov	r4, r0
 800bcc0:	460d      	mov	r5, r1
 800bcc2:	e765      	b.n	800bb90 <atan+0xc8>
 800bcc4:	4b47      	ldr	r3, [pc, #284]	@ (800bde4 <atan+0x31c>)
 800bcc6:	429e      	cmp	r6, r3
 800bcc8:	d21c      	bcs.n	800bd04 <atan+0x23c>
 800bcca:	4b47      	ldr	r3, [pc, #284]	@ (800bde8 <atan+0x320>)
 800bccc:	2200      	movs	r2, #0
 800bcce:	4620      	mov	r0, r4
 800bcd0:	4629      	mov	r1, r5
 800bcd2:	f7f4 fae1 	bl	8000298 <__aeabi_dsub>
 800bcd6:	4b44      	ldr	r3, [pc, #272]	@ (800bde8 <atan+0x320>)
 800bcd8:	4606      	mov	r6, r0
 800bcda:	460f      	mov	r7, r1
 800bcdc:	2200      	movs	r2, #0
 800bcde:	4620      	mov	r0, r4
 800bce0:	4629      	mov	r1, r5
 800bce2:	f7f4 fc91 	bl	8000608 <__aeabi_dmul>
 800bce6:	4b3d      	ldr	r3, [pc, #244]	@ (800bddc <atan+0x314>)
 800bce8:	2200      	movs	r2, #0
 800bcea:	f7f4 fad7 	bl	800029c <__adddf3>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	4639      	mov	r1, r7
 800bcf6:	f7f4 fdb1 	bl	800085c <__aeabi_ddiv>
 800bcfa:	f04f 0a02 	mov.w	sl, #2
 800bcfe:	4604      	mov	r4, r0
 800bd00:	460d      	mov	r5, r1
 800bd02:	e745      	b.n	800bb90 <atan+0xc8>
 800bd04:	4622      	mov	r2, r4
 800bd06:	462b      	mov	r3, r5
 800bd08:	4938      	ldr	r1, [pc, #224]	@ (800bdec <atan+0x324>)
 800bd0a:	2000      	movs	r0, #0
 800bd0c:	f7f4 fda6 	bl	800085c <__aeabi_ddiv>
 800bd10:	f04f 0a03 	mov.w	sl, #3
 800bd14:	4604      	mov	r4, r0
 800bd16:	460d      	mov	r5, r1
 800bd18:	e73a      	b.n	800bb90 <atan+0xc8>
 800bd1a:	4b35      	ldr	r3, [pc, #212]	@ (800bdf0 <atan+0x328>)
 800bd1c:	4e35      	ldr	r6, [pc, #212]	@ (800bdf4 <atan+0x32c>)
 800bd1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	f7f4 fab7 	bl	8000298 <__aeabi_dsub>
 800bd2a:	4622      	mov	r2, r4
 800bd2c:	462b      	mov	r3, r5
 800bd2e:	f7f4 fab3 	bl	8000298 <__aeabi_dsub>
 800bd32:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bd36:	4602      	mov	r2, r0
 800bd38:	460b      	mov	r3, r1
 800bd3a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bd3e:	f7f4 faab 	bl	8000298 <__aeabi_dsub>
 800bd42:	f1bb 0f00 	cmp.w	fp, #0
 800bd46:	4604      	mov	r4, r0
 800bd48:	460d      	mov	r5, r1
 800bd4a:	f6bf aedc 	bge.w	800bb06 <atan+0x3e>
 800bd4e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bd52:	461d      	mov	r5, r3
 800bd54:	e6d7      	b.n	800bb06 <atan+0x3e>
 800bd56:	a51c      	add	r5, pc, #112	@ (adr r5, 800bdc8 <atan+0x300>)
 800bd58:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bd5c:	e6d3      	b.n	800bb06 <atan+0x3e>
 800bd5e:	bf00      	nop
 800bd60:	54442d18 	.word	0x54442d18
 800bd64:	3ff921fb 	.word	0x3ff921fb
 800bd68:	8800759c 	.word	0x8800759c
 800bd6c:	7e37e43c 	.word	0x7e37e43c
 800bd70:	e322da11 	.word	0xe322da11
 800bd74:	3f90ad3a 	.word	0x3f90ad3a
 800bd78:	24760deb 	.word	0x24760deb
 800bd7c:	3fa97b4b 	.word	0x3fa97b4b
 800bd80:	a0d03d51 	.word	0xa0d03d51
 800bd84:	3fb10d66 	.word	0x3fb10d66
 800bd88:	c54c206e 	.word	0xc54c206e
 800bd8c:	3fb745cd 	.word	0x3fb745cd
 800bd90:	920083ff 	.word	0x920083ff
 800bd94:	3fc24924 	.word	0x3fc24924
 800bd98:	5555550d 	.word	0x5555550d
 800bd9c:	3fd55555 	.word	0x3fd55555
 800bda0:	2c6a6c2f 	.word	0x2c6a6c2f
 800bda4:	bfa2b444 	.word	0xbfa2b444
 800bda8:	52defd9a 	.word	0x52defd9a
 800bdac:	3fadde2d 	.word	0x3fadde2d
 800bdb0:	af749a6d 	.word	0xaf749a6d
 800bdb4:	3fb3b0f2 	.word	0x3fb3b0f2
 800bdb8:	fe231671 	.word	0xfe231671
 800bdbc:	3fbc71c6 	.word	0x3fbc71c6
 800bdc0:	9998ebc4 	.word	0x9998ebc4
 800bdc4:	3fc99999 	.word	0x3fc99999
 800bdc8:	54442d18 	.word	0x54442d18
 800bdcc:	bff921fb 	.word	0xbff921fb
 800bdd0:	440fffff 	.word	0x440fffff
 800bdd4:	7ff00000 	.word	0x7ff00000
 800bdd8:	3fdbffff 	.word	0x3fdbffff
 800bddc:	3ff00000 	.word	0x3ff00000
 800bde0:	3ff2ffff 	.word	0x3ff2ffff
 800bde4:	40038000 	.word	0x40038000
 800bde8:	3ff80000 	.word	0x3ff80000
 800bdec:	bff00000 	.word	0xbff00000
 800bdf0:	0800c280 	.word	0x0800c280
 800bdf4:	0800c2a0 	.word	0x0800c2a0

0800bdf8 <fabs>:
 800bdf8:	ec51 0b10 	vmov	r0, r1, d0
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800be02:	ec43 2b10 	vmov	d0, r2, r3
 800be06:	4770      	bx	lr

0800be08 <_init>:
 800be08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0a:	bf00      	nop
 800be0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be0e:	bc08      	pop	{r3}
 800be10:	469e      	mov	lr, r3
 800be12:	4770      	bx	lr

0800be14 <_fini>:
 800be14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be16:	bf00      	nop
 800be18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be1a:	bc08      	pop	{r3}
 800be1c:	469e      	mov	lr, r3
 800be1e:	4770      	bx	lr
