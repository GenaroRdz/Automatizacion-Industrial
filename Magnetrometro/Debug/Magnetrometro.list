
Magnetrometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008edc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800907c  0800907c  0000a07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009128  08009128  0000b150  2**0
                  CONTENTS
  4 .ARM          00000008  08009128  08009128  0000a128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009130  08009130  0000b150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009130  08009130  0000a130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009134  08009134  0000a134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  08009138  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dec  20000150  08009288  0000b150  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f3c  08009288  0000bf3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b150  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a93  00000000  00000000  0000b180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031cc  00000000  00000000  0001ec13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00021de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c91  00000000  00000000  00022e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b7d  00000000  00000000  00023ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016719  00000000  00000000  0003c64e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c411  00000000  00000000  00052d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df178  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004938  00000000  00000000  000df1bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e3af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009064 	.word	0x08009064

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	08009064 	.word	0x08009064

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <QMC5883L_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Función para inicializar el sensor QMC5883L
void QMC5883L_Init() {
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af02      	add	r7, sp, #8
    uint8_t data[2];
    data[0] = 0x0B; // Registro de configuración 2
 8000586:	230b      	movs	r3, #11
 8000588:	713b      	strb	r3, [r7, #4]
    data[1] = 0x01; // Reinicio de software
 800058a:	2301      	movs	r3, #1
 800058c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, QMC5883L_ADDR, data, 2, HAL_MAX_DELAY);
 800058e:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <QMC5883L_Init+0x4c>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	4619      	mov	r1, r3
 8000594:	1d3a      	adds	r2, r7, #4
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2302      	movs	r3, #2
 800059e:	480c      	ldr	r0, [pc, #48]	@ (80005d0 <QMC5883L_Init+0x50>)
 80005a0:	f000 ff62 	bl	8001468 <HAL_I2C_Master_Transmit>

    data[0] = 0x09; // Registro de control
 80005a4:	2309      	movs	r3, #9
 80005a6:	713b      	strb	r3, [r7, #4]
    data[1] = 0x1D; // Configuración (ODR = 50Hz, RNG = 2G, OSR = 512)
 80005a8:	231d      	movs	r3, #29
 80005aa:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, QMC5883L_ADDR, data, 2, HAL_MAX_DELAY);
 80005ac:	4b07      	ldr	r3, [pc, #28]	@ (80005cc <QMC5883L_Init+0x4c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4619      	mov	r1, r3
 80005b2:	1d3a      	adds	r2, r7, #4
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2302      	movs	r3, #2
 80005bc:	4804      	ldr	r0, [pc, #16]	@ (80005d0 <QMC5883L_Init+0x50>)
 80005be:	f000 ff53 	bl	8001468 <HAL_I2C_Master_Transmit>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000000 	.word	0x20000000
 80005d0:	2000016c 	.word	0x2000016c

080005d4 <QMC5883L_Read>:
// Función para leer los datos de los ejes X, Y, Z
void QMC5883L_Read(int16_t *x, int16_t *y, int16_t *z) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	@ 0x28
 80005d8:	af04      	add	r7, sp, #16
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
	uint8_t data[6];
    HAL_I2C_Mem_Read(&hi2c1, QMC5883L_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, data, 6, HAL_MAX_DELAY);
 80005e0:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <QMC5883L_Read+0x6c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	9302      	str	r3, [sp, #8]
 80005ec:	2306      	movs	r3, #6
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2301      	movs	r3, #1
 80005f8:	2200      	movs	r2, #0
 80005fa:	4812      	ldr	r0, [pc, #72]	@ (8000644 <QMC5883L_Read+0x70>)
 80005fc:	f001 f832 	bl	8001664 <HAL_I2C_Mem_Read>

    *x = (int16_t)((data[1] << 8) | data[0]);
 8000600:	7c7b      	ldrb	r3, [r7, #17]
 8000602:	021b      	lsls	r3, r3, #8
 8000604:	b21a      	sxth	r2, r3
 8000606:	7c3b      	ldrb	r3, [r7, #16]
 8000608:	b21b      	sxth	r3, r3
 800060a:	4313      	orrs	r3, r2
 800060c:	b21a      	sxth	r2, r3
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((data[3] << 8) | data[2]);
 8000612:	7cfb      	ldrb	r3, [r7, #19]
 8000614:	021b      	lsls	r3, r3, #8
 8000616:	b21a      	sxth	r2, r3
 8000618:	7cbb      	ldrb	r3, [r7, #18]
 800061a:	b21b      	sxth	r3, r3
 800061c:	4313      	orrs	r3, r2
 800061e:	b21a      	sxth	r2, r3
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((data[5] << 8) | data[4]);
 8000624:	7d7b      	ldrb	r3, [r7, #21]
 8000626:	021b      	lsls	r3, r3, #8
 8000628:	b21a      	sxth	r2, r3
 800062a:	7d3b      	ldrb	r3, [r7, #20]
 800062c:	b21b      	sxth	r3, r3
 800062e:	4313      	orrs	r3, r2
 8000630:	b21a      	sxth	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	801a      	strh	r2, [r3, #0]
}
 8000636:	bf00      	nop
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000000 	.word	0x20000000
 8000644:	2000016c 	.word	0x2000016c

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064e:	f000 fa9b 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000652:	f000 f839 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000656:	f000 f8f7 	bl	8000848 <MX_GPIO_Init>
  MX_I2C1_Init();
 800065a:	f000 f89d 	bl	8000798 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800065e:	f007 fb63 	bl	8007d28 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8000662:	f000 f8c7 	bl	80007f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  QMC5883L_Init();
 8000666:	f7ff ff8b 	bl	8000580 <QMC5883L_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      QMC5883L_Read(&x, &y, &z);
 800066a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800066e:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000672:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ffac 	bl	80005d4 <QMC5883L_Read>

      // Formatea los datos para enviar al monitor serie y Bluetooth
      snprintf(buffer, sizeof(buffer), "x: %d, y: %d, z: %d\r\n", x, y, z);
 800067c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8000680:	4619      	mov	r1, r3
 8000682:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8000686:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 800068a:	4638      	mov	r0, r7
 800068c:	9201      	str	r2, [sp, #4]
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	460b      	mov	r3, r1
 8000692:	4a0b      	ldr	r2, [pc, #44]	@ (80006c0 <main+0x78>)
 8000694:	2140      	movs	r1, #64	@ 0x40
 8000696:	f008 f831 	bl	80086fc <sniprintf>

      // Enviar datos al Bluetooth
      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800069a:	463b      	mov	r3, r7
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff fd9f 	bl	80001e0 <strlen>
 80006a2:	4603      	mov	r3, r0
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	4639      	mov	r1, r7
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <main+0x7c>)
 80006ae:	f003 fca5 	bl	8003ffc <HAL_UART_Transmit>
      HAL_Delay(500); // Esperar medio segundo antes de la siguiente lectura
 80006b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006b6:	f000 fad9 	bl	8000c6c <HAL_Delay>
      QMC5883L_Read(&x, &y, &z);
 80006ba:	bf00      	nop
 80006bc:	e7d5      	b.n	800066a <main+0x22>
 80006be:	bf00      	nop
 80006c0:	0800907c 	.word	0x0800907c
 80006c4:	200001c0 	.word	0x200001c0

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	@ 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	@ 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f008 f844 	bl	8008764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <SystemClock_Config+0xc8>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	4a26      	ldr	r2, [pc, #152]	@ (8000790 <SystemClock_Config+0xc8>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006fc:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <SystemClock_Config+0xc8>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b21      	ldr	r3, [pc, #132]	@ (8000794 <SystemClock_Config+0xcc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a20      	ldr	r2, [pc, #128]	@ (8000794 <SystemClock_Config+0xcc>)
 8000712:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1e      	ldr	r3, [pc, #120]	@ (8000794 <SystemClock_Config+0xcc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000724:	2301      	movs	r3, #1
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000728:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800072c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	2302      	movs	r3, #2
 8000730:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000732:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000738:	2319      	movs	r3, #25
 800073a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800073c:	2390      	movs	r3, #144	@ 0x90
 800073e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000740:	2302      	movs	r3, #2
 8000742:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000744:	2303      	movs	r3, #3
 8000746:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f002 ffad 	bl	80036ac <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000758:	f000 f8ac 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000768:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2102      	movs	r1, #2
 8000778:	4618      	mov	r0, r3
 800077a:	f003 fa0f 	bl	8003b9c <HAL_RCC_ClockConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000784:	f000 f896 	bl	80008b4 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3750      	adds	r7, #80	@ 0x50
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <MX_I2C1_Init+0x50>)
 800079e:	4a13      	ldr	r2, [pc, #76]	@ (80007ec <MX_I2C1_Init+0x54>)
 80007a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_I2C1_Init+0x50>)
 80007a4:	4a12      	ldr	r2, [pc, #72]	@ (80007f0 <MX_I2C1_Init+0x58>)
 80007a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_I2C1_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_I2C1_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_I2C1_Init+0x50>)
 80007b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <MX_I2C1_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_I2C1_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c8:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <MX_I2C1_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_I2C1_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <MX_I2C1_Init+0x50>)
 80007d6:	f000 fd03 	bl	80011e0 <HAL_I2C_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007e0:	f000 f868 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000016c 	.word	0x2000016c
 80007ec:	40005400 	.word	0x40005400
 80007f0:	000186a0 	.word	0x000186a0

080007f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <MX_USART2_UART_Init+0x50>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007fe:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 8000800:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 800082c:	f003 fb96 	bl	8003f5c <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000836:	f000 f83d 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200001c0 	.word	0x200001c0
 8000844:	40004400 	.word	0x40004400

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <MX_GPIO_Init+0x68>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a16      	ldr	r2, [pc, #88]	@ (80008b0 <MX_GPIO_Init+0x68>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_GPIO_Init+0x68>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <MX_GPIO_Init+0x68>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a0f      	ldr	r2, [pc, #60]	@ (80008b0 <MX_GPIO_Init+0x68>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <MX_GPIO_Init+0x68>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_GPIO_Init+0x68>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a08      	ldr	r2, [pc, #32]	@ (80008b0 <MX_GPIO_Init+0x68>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_GPIO_Init+0x68>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a2:	bf00      	nop
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <Error_Handler+0x8>

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b10      	ldr	r3, [pc, #64]	@ (800090c <HAL_MspInit+0x4c>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ce:	4a0f      	ldr	r2, [pc, #60]	@ (800090c <HAL_MspInit+0x4c>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008d6:	4b0d      	ldr	r3, [pc, #52]	@ (800090c <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <HAL_MspInit+0x4c>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ea:	4a08      	ldr	r2, [pc, #32]	@ (800090c <HAL_MspInit+0x4c>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	@ 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a19      	ldr	r2, [pc, #100]	@ (8000994 <HAL_I2C_MspInit+0x84>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d12b      	bne.n	800098a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <HAL_I2C_MspInit+0x88>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a17      	ldr	r2, [pc, #92]	@ (8000998 <HAL_I2C_MspInit+0x88>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <HAL_I2C_MspInit+0x88>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800094e:	23c0      	movs	r3, #192	@ 0xc0
 8000950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000952:	2312      	movs	r3, #18
 8000954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800095e:	2304      	movs	r3, #4
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	480c      	ldr	r0, [pc, #48]	@ (800099c <HAL_I2C_MspInit+0x8c>)
 800096a:	f000 fab5 	bl	8000ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <HAL_I2C_MspInit+0x88>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	@ (8000998 <HAL_I2C_MspInit+0x88>)
 8000978:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800097c:	6413      	str	r3, [r2, #64]	@ 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <HAL_I2C_MspInit+0x88>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000982:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800098a:	bf00      	nop
 800098c:	3728      	adds	r7, #40	@ 0x28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40005400 	.word	0x40005400
 8000998:	40023800 	.word	0x40023800
 800099c:	40020400 	.word	0x40020400

080009a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	@ 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a19      	ldr	r2, [pc, #100]	@ (8000a24 <HAL_UART_MspInit+0x84>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d12b      	bne.n	8000a1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <HAL_UART_MspInit+0x88>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	4a17      	ldr	r2, [pc, #92]	@ (8000a28 <HAL_UART_MspInit+0x88>)
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d2:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <HAL_UART_MspInit+0x88>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <HAL_UART_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a10      	ldr	r2, [pc, #64]	@ (8000a28 <HAL_UART_MspInit+0x88>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <HAL_UART_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009fa:	230c      	movs	r3, #12
 80009fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <HAL_UART_MspInit+0x8c>)
 8000a16:	f000 fa5f 	bl	8000ed8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	@ 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40004400 	.word	0x40004400
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <NMI_Handler+0x4>

08000a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <MemManage_Handler+0x4>

08000a48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a86:	f000 f8d1 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <OTG_FS_IRQHandler+0x10>)
 8000a96:	f001 fcfb 	bl	8002490 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200016f0 	.word	0x200016f0

08000aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aac:	4a14      	ldr	r2, [pc, #80]	@ (8000b00 <_sbrk+0x5c>)
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <_sbrk+0x60>)
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab8:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <_sbrk+0x64>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	@ (8000b0c <_sbrk+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac6:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d207      	bcs.n	8000ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad4:	f007 fe4e 	bl	8008774 <__errno>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	e009      	b.n	8000af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae4:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aea:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a05      	ldr	r2, [pc, #20]	@ (8000b08 <_sbrk+0x64>)
 8000af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af6:	68fb      	ldr	r3, [r7, #12]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20020000 	.word	0x20020000
 8000b04:	00000400 	.word	0x00000400
 8000b08:	20000208 	.word	0x20000208
 8000b0c:	20001f40 	.word	0x20001f40

08000b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	@ (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b38:	f7ff ffea 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b3c:	480c      	ldr	r0, [pc, #48]	@ (8000b70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b3e:	490d      	ldr	r1, [pc, #52]	@ (8000b74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b40:	4a0d      	ldr	r2, [pc, #52]	@ (8000b78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b54:	4c0a      	ldr	r4, [pc, #40]	@ (8000b80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b62:	f007 fe0d 	bl	8008780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b66:	f7ff fd6f 	bl	8000648 <main>
  bx  lr    
 8000b6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8000b78:	08009138 	.word	0x08009138
  ldr r2, =_sbss
 8000b7c:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000b80:	20001f3c 	.word	0x20001f3c

08000b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc8 <HAL_Init+0x40>)
 8000b92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b98:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <HAL_Init+0x40>)
 8000b9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a07      	ldr	r2, [pc, #28]	@ (8000bc8 <HAL_Init+0x40>)
 8000baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 f94f 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb6:	200f      	movs	r0, #15
 8000bb8:	f000 f808 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bbc:	f7ff fe80 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023c00 	.word	0x40023c00

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <HAL_InitTick+0x54>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <HAL_InitTick+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f967 	bl	8000ebe <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00e      	b.n	8000c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f000 f92f 	bl	8000e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	@ (8000c28 <HAL_InitTick+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000004 	.word	0x20000004
 8000c24:	2000000c 	.word	0x2000000c
 8000c28:	20000008 	.word	0x20000008

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	@ (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	2000000c 	.word	0x2000000c
 8000c50:	2000020c 	.word	0x2000020c

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	@ (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	2000020c 	.word	0x2000020c

08000c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c74:	f7ff ffee 	bl	8000c54 <HAL_GetTick>
 8000c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c84:	d005      	beq.n	8000c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c86:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <HAL_Delay+0x44>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c92:	bf00      	nop
 8000c94:	f7ff ffde 	bl	8000c54 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d8f7      	bhi.n	8000c94 <HAL_Delay+0x28>
  {
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2000000c 	.word	0x2000000c

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4907      	ldr	r1, [pc, #28]	@ (8000d50 <__NVIC_EnableIRQ+0x38>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	@ (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	@ (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	@ 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	@ 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e20:	d301      	bcc.n	8000e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00f      	b.n	8000e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e26:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <SysTick_Config+0x40>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2e:	210f      	movs	r1, #15
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f7ff ff8e 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	@ (8000e50 <SysTick_Config+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <SysTick_Config+0x40>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff29 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7c:	f7ff ff3e 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f7ff ff8e 	bl	8000da8 <NVIC_EncodePriority>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff5d 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff31 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffa2 	bl	8000e10 <SysTick_Config>
 8000ecc:	4603      	mov	r3, r0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	@ 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	e159      	b.n	80011a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	f040 8148 	bne.w	80011a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d005      	beq.n	8000f2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d130      	bne.n	8000f8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f60:	2201      	movs	r2, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	091b      	lsrs	r3, r3, #4
 8000f76:	f003 0201 	and.w	r2, r3, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d017      	beq.n	8000fc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d123      	bne.n	800101c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	08da      	lsrs	r2, r3, #3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3208      	adds	r2, #8
 8000fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	220f      	movs	r2, #15
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	691a      	ldr	r2, [r3, #16]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	08da      	lsrs	r2, r3, #3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3208      	adds	r2, #8
 8001016:	69b9      	ldr	r1, [r7, #24]
 8001018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0203 	and.w	r2, r3, #3
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 80a2 	beq.w	80011a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b57      	ldr	r3, [pc, #348]	@ (80011c0 <HAL_GPIO_Init+0x2e8>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	4a56      	ldr	r2, [pc, #344]	@ (80011c0 <HAL_GPIO_Init+0x2e8>)
 8001068:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800106c:	6453      	str	r3, [r2, #68]	@ 0x44
 800106e:	4b54      	ldr	r3, [pc, #336]	@ (80011c0 <HAL_GPIO_Init+0x2e8>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800107a:	4a52      	ldr	r2, [pc, #328]	@ (80011c4 <HAL_GPIO_Init+0x2ec>)
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3302      	adds	r3, #2
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a49      	ldr	r2, [pc, #292]	@ (80011c8 <HAL_GPIO_Init+0x2f0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d019      	beq.n	80010da <HAL_GPIO_Init+0x202>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a48      	ldr	r2, [pc, #288]	@ (80011cc <HAL_GPIO_Init+0x2f4>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0x1fe>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a47      	ldr	r2, [pc, #284]	@ (80011d0 <HAL_GPIO_Init+0x2f8>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00d      	beq.n	80010d2 <HAL_GPIO_Init+0x1fa>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a46      	ldr	r2, [pc, #280]	@ (80011d4 <HAL_GPIO_Init+0x2fc>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d007      	beq.n	80010ce <HAL_GPIO_Init+0x1f6>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a45      	ldr	r2, [pc, #276]	@ (80011d8 <HAL_GPIO_Init+0x300>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_GPIO_Init+0x1f2>
 80010c6:	2304      	movs	r3, #4
 80010c8:	e008      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010ca:	2307      	movs	r3, #7
 80010cc:	e006      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010ce:	2303      	movs	r3, #3
 80010d0:	e004      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e002      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010da:	2300      	movs	r3, #0
 80010dc:	69fa      	ldr	r2, [r7, #28]
 80010de:	f002 0203 	and.w	r2, r2, #3
 80010e2:	0092      	lsls	r2, r2, #2
 80010e4:	4093      	lsls	r3, r2
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ec:	4935      	ldr	r1, [pc, #212]	@ (80011c4 <HAL_GPIO_Init+0x2ec>)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	3302      	adds	r3, #2
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fa:	4b38      	ldr	r3, [pc, #224]	@ (80011dc <HAL_GPIO_Init+0x304>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800111e:	4a2f      	ldr	r2, [pc, #188]	@ (80011dc <HAL_GPIO_Init+0x304>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001124:	4b2d      	ldr	r3, [pc, #180]	@ (80011dc <HAL_GPIO_Init+0x304>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001148:	4a24      	ldr	r2, [pc, #144]	@ (80011dc <HAL_GPIO_Init+0x304>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800114e:	4b23      	ldr	r3, [pc, #140]	@ (80011dc <HAL_GPIO_Init+0x304>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001172:	4a1a      	ldr	r2, [pc, #104]	@ (80011dc <HAL_GPIO_Init+0x304>)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001178:	4b18      	ldr	r3, [pc, #96]	@ (80011dc <HAL_GPIO_Init+0x304>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800119c:	4a0f      	ldr	r2, [pc, #60]	@ (80011dc <HAL_GPIO_Init+0x304>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3301      	adds	r3, #1
 80011a6:	61fb      	str	r3, [r7, #28]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	2b0f      	cmp	r3, #15
 80011ac:	f67f aea2 	bls.w	8000ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3724      	adds	r7, #36	@ 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40013800 	.word	0x40013800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	40020400 	.word	0x40020400
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40013c00 	.word	0x40013c00

080011e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e12b      	b.n	800144a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d106      	bne.n	800120c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff fb82 	bl	8000910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2224      	movs	r2, #36	@ 0x24
 8001210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0201 	bic.w	r2, r2, #1
 8001222:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001232:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001242:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001244:	f002 fe62 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 8001248:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4a81      	ldr	r2, [pc, #516]	@ (8001454 <HAL_I2C_Init+0x274>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d807      	bhi.n	8001264 <HAL_I2C_Init+0x84>
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4a80      	ldr	r2, [pc, #512]	@ (8001458 <HAL_I2C_Init+0x278>)
 8001258:	4293      	cmp	r3, r2
 800125a:	bf94      	ite	ls
 800125c:	2301      	movls	r3, #1
 800125e:	2300      	movhi	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	e006      	b.n	8001272 <HAL_I2C_Init+0x92>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4a7d      	ldr	r2, [pc, #500]	@ (800145c <HAL_I2C_Init+0x27c>)
 8001268:	4293      	cmp	r3, r2
 800126a:	bf94      	ite	ls
 800126c:	2301      	movls	r3, #1
 800126e:	2300      	movhi	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e0e7      	b.n	800144a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4a78      	ldr	r2, [pc, #480]	@ (8001460 <HAL_I2C_Init+0x280>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	0c9b      	lsrs	r3, r3, #18
 8001284:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	430a      	orrs	r2, r1
 8001298:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001454 <HAL_I2C_Init+0x274>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d802      	bhi.n	80012b4 <HAL_I2C_Init+0xd4>
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	3301      	adds	r3, #1
 80012b2:	e009      	b.n	80012c8 <HAL_I2C_Init+0xe8>
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80012ba:	fb02 f303 	mul.w	r3, r2, r3
 80012be:	4a69      	ldr	r2, [pc, #420]	@ (8001464 <HAL_I2C_Init+0x284>)
 80012c0:	fba2 2303 	umull	r2, r3, r2, r3
 80012c4:	099b      	lsrs	r3, r3, #6
 80012c6:	3301      	adds	r3, #1
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	430b      	orrs	r3, r1
 80012ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80012da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	495c      	ldr	r1, [pc, #368]	@ (8001454 <HAL_I2C_Init+0x274>)
 80012e4:	428b      	cmp	r3, r1
 80012e6:	d819      	bhi.n	800131c <HAL_I2C_Init+0x13c>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	1e59      	subs	r1, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80012f6:	1c59      	adds	r1, r3, #1
 80012f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80012fc:	400b      	ands	r3, r1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00a      	beq.n	8001318 <HAL_I2C_Init+0x138>
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	1e59      	subs	r1, r3, #1
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001310:	3301      	adds	r3, #1
 8001312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001316:	e051      	b.n	80013bc <HAL_I2C_Init+0x1dc>
 8001318:	2304      	movs	r3, #4
 800131a:	e04f      	b.n	80013bc <HAL_I2C_Init+0x1dc>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d111      	bne.n	8001348 <HAL_I2C_Init+0x168>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	1e58      	subs	r0, r3, #1
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6859      	ldr	r1, [r3, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	440b      	add	r3, r1
 8001332:	fbb0 f3f3 	udiv	r3, r0, r3
 8001336:	3301      	adds	r3, #1
 8001338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800133c:	2b00      	cmp	r3, #0
 800133e:	bf0c      	ite	eq
 8001340:	2301      	moveq	r3, #1
 8001342:	2300      	movne	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	e012      	b.n	800136e <HAL_I2C_Init+0x18e>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	1e58      	subs	r0, r3, #1
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	0099      	lsls	r1, r3, #2
 8001358:	440b      	add	r3, r1
 800135a:	fbb0 f3f3 	udiv	r3, r0, r3
 800135e:	3301      	adds	r3, #1
 8001360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001364:	2b00      	cmp	r3, #0
 8001366:	bf0c      	ite	eq
 8001368:	2301      	moveq	r3, #1
 800136a:	2300      	movne	r3, #0
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_I2C_Init+0x196>
 8001372:	2301      	movs	r3, #1
 8001374:	e022      	b.n	80013bc <HAL_I2C_Init+0x1dc>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10e      	bne.n	800139c <HAL_I2C_Init+0x1bc>
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	1e58      	subs	r0, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6859      	ldr	r1, [r3, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	440b      	add	r3, r1
 800138c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001390:	3301      	adds	r3, #1
 8001392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001396:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800139a:	e00f      	b.n	80013bc <HAL_I2C_Init+0x1dc>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	1e58      	subs	r0, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6859      	ldr	r1, [r3, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	0099      	lsls	r1, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80013b2:	3301      	adds	r3, #1
 80013b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	6809      	ldr	r1, [r1, #0]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69da      	ldr	r2, [r3, #28]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80013ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6911      	ldr	r1, [r2, #16]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	68d2      	ldr	r2, [r2, #12]
 80013f6:	4311      	orrs	r1, r2
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	6812      	ldr	r2, [r2, #0]
 80013fc:	430b      	orrs	r3, r1
 80013fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0201 	orr.w	r2, r2, #1
 800142a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2220      	movs	r2, #32
 8001436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	000186a0 	.word	0x000186a0
 8001458:	001e847f 	.word	0x001e847f
 800145c:	003d08ff 	.word	0x003d08ff
 8001460:	431bde83 	.word	0x431bde83
 8001464:	10624dd3 	.word	0x10624dd3

08001468 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af02      	add	r7, sp, #8
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	461a      	mov	r2, r3
 8001474:	460b      	mov	r3, r1
 8001476:	817b      	strh	r3, [r7, #10]
 8001478:	4613      	mov	r3, r2
 800147a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800147c:	f7ff fbea 	bl	8000c54 <HAL_GetTick>
 8001480:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b20      	cmp	r3, #32
 800148c:	f040 80e0 	bne.w	8001650 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2319      	movs	r3, #25
 8001496:	2201      	movs	r2, #1
 8001498:	4970      	ldr	r1, [pc, #448]	@ (800165c <HAL_I2C_Master_Transmit+0x1f4>)
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 fc7e 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80014a6:	2302      	movs	r3, #2
 80014a8:	e0d3      	b.n	8001652 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d101      	bne.n	80014b8 <HAL_I2C_Master_Transmit+0x50>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e0cc      	b.n	8001652 <HAL_I2C_Master_Transmit+0x1ea>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d007      	beq.n	80014de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f042 0201 	orr.w	r2, r2, #1
 80014dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2221      	movs	r2, #33	@ 0x21
 80014f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2210      	movs	r2, #16
 80014fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2200      	movs	r2, #0
 8001502:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	893a      	ldrh	r2, [r7, #8]
 800150e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001514:	b29a      	uxth	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4a50      	ldr	r2, [pc, #320]	@ (8001660 <HAL_I2C_Master_Transmit+0x1f8>)
 800151e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001520:	8979      	ldrh	r1, [r7, #10]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	6a3a      	ldr	r2, [r7, #32]
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f000 face 	bl	8001ac8 <I2C_MasterRequestWrite>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e08d      	b.n	8001652 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800154c:	e066      	b.n	800161c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	6a39      	ldr	r1, [r7, #32]
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f000 fd3c 	bl	8001fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00d      	beq.n	800157a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	2b04      	cmp	r3, #4
 8001564:	d107      	bne.n	8001576 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001574:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e06b      	b.n	8001652 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157e:	781a      	ldrb	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001594:	b29b      	uxth	r3, r3
 8001596:	3b01      	subs	r3, #1
 8001598:	b29a      	uxth	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015a2:	3b01      	subs	r3, #1
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d11b      	bne.n	80015f0 <HAL_I2C_Master_Transmit+0x188>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d017      	beq.n	80015f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c4:	781a      	ldrb	r2, [r3, #0]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015da:	b29b      	uxth	r3, r3
 80015dc:	3b01      	subs	r3, #1
 80015de:	b29a      	uxth	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015e8:	3b01      	subs	r3, #1
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	6a39      	ldr	r1, [r7, #32]
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f000 fd33 	bl	8002060 <I2C_WaitOnBTFFlagUntilTimeout>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00d      	beq.n	800161c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001604:	2b04      	cmp	r3, #4
 8001606:	d107      	bne.n	8001618 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001616:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e01a      	b.n	8001652 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001620:	2b00      	cmp	r3, #0
 8001622:	d194      	bne.n	800154e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2220      	movs	r2, #32
 8001638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	e000      	b.n	8001652 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001650:	2302      	movs	r3, #2
  }
}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	00100002 	.word	0x00100002
 8001660:	ffff0000 	.word	0xffff0000

08001664 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08c      	sub	sp, #48	@ 0x30
 8001668:	af02      	add	r7, sp, #8
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	4608      	mov	r0, r1
 800166e:	4611      	mov	r1, r2
 8001670:	461a      	mov	r2, r3
 8001672:	4603      	mov	r3, r0
 8001674:	817b      	strh	r3, [r7, #10]
 8001676:	460b      	mov	r3, r1
 8001678:	813b      	strh	r3, [r7, #8]
 800167a:	4613      	mov	r3, r2
 800167c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800167e:	f7ff fae9 	bl	8000c54 <HAL_GetTick>
 8001682:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b20      	cmp	r3, #32
 800168e:	f040 8214 	bne.w	8001aba <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2319      	movs	r3, #25
 8001698:	2201      	movs	r2, #1
 800169a:	497b      	ldr	r1, [pc, #492]	@ (8001888 <HAL_I2C_Mem_Read+0x224>)
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 fb7d 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80016a8:	2302      	movs	r3, #2
 80016aa:	e207      	b.n	8001abc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_I2C_Mem_Read+0x56>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e200      	b.n	8001abc <HAL_I2C_Mem_Read+0x458>
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d007      	beq.n	80016e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2222      	movs	r2, #34	@ 0x22
 80016f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2240      	movs	r2, #64	@ 0x40
 80016fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800170a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001710:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001716:	b29a      	uxth	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4a5b      	ldr	r2, [pc, #364]	@ (800188c <HAL_I2C_Mem_Read+0x228>)
 8001720:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001722:	88f8      	ldrh	r0, [r7, #6]
 8001724:	893a      	ldrh	r2, [r7, #8]
 8001726:	8979      	ldrh	r1, [r7, #10]
 8001728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	4603      	mov	r3, r0
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 fa4a 	bl	8001bcc <I2C_RequestMemoryRead>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e1bc      	b.n	8001abc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001746:	2b00      	cmp	r3, #0
 8001748:	d113      	bne.n	8001772 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	623b      	str	r3, [r7, #32]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	623b      	str	r3, [r7, #32]
 800175e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	e190      	b.n	8001a94 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001776:	2b01      	cmp	r3, #1
 8001778:	d11b      	bne.n	80017b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001788:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	e170      	b.n	8001a94 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d11b      	bne.n	80017f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017da:	2300      	movs	r3, #0
 80017dc:	61bb      	str	r3, [r7, #24]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	61bb      	str	r3, [r7, #24]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	61bb      	str	r3, [r7, #24]
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	e150      	b.n	8001a94 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001808:	e144      	b.n	8001a94 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800180e:	2b03      	cmp	r3, #3
 8001810:	f200 80f1 	bhi.w	80019f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001818:	2b01      	cmp	r3, #1
 800181a:	d123      	bne.n	8001864 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800181c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800181e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f000 fc65 	bl	80020f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e145      	b.n	8001abc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691a      	ldr	r2, [r3, #16]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800184c:	3b01      	subs	r3, #1
 800184e:	b29a      	uxth	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001858:	b29b      	uxth	r3, r3
 800185a:	3b01      	subs	r3, #1
 800185c:	b29a      	uxth	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001862:	e117      	b.n	8001a94 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001868:	2b02      	cmp	r3, #2
 800186a:	d14e      	bne.n	800190a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001872:	2200      	movs	r2, #0
 8001874:	4906      	ldr	r1, [pc, #24]	@ (8001890 <HAL_I2C_Mem_Read+0x22c>)
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 fa90 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d008      	beq.n	8001894 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e11a      	b.n	8001abc <HAL_I2C_Mem_Read+0x458>
 8001886:	bf00      	nop
 8001888:	00100002 	.word	0x00100002
 800188c:	ffff0000 	.word	0xffff0000
 8001890:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	691a      	ldr	r2, [r3, #16]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018fe:	b29b      	uxth	r3, r3
 8001900:	3b01      	subs	r3, #1
 8001902:	b29a      	uxth	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001908:	e0c4      	b.n	8001a94 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001910:	2200      	movs	r2, #0
 8001912:	496c      	ldr	r1, [pc, #432]	@ (8001ac4 <HAL_I2C_Mem_Read+0x460>)
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 fa41 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0cb      	b.n	8001abc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001932:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691a      	ldr	r2, [r3, #16]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001950:	3b01      	subs	r3, #1
 8001952:	b29a      	uxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800195c:	b29b      	uxth	r3, r3
 800195e:	3b01      	subs	r3, #1
 8001960:	b29a      	uxth	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800196c:	2200      	movs	r2, #0
 800196e:	4955      	ldr	r1, [pc, #340]	@ (8001ac4 <HAL_I2C_Mem_Read+0x460>)
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 fa13 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e09d      	b.n	8001abc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800198e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ac:	3b01      	subs	r3, #1
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29a      	uxth	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019de:	3b01      	subs	r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80019f4:	e04e      	b.n	8001a94 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 fb78 	bl	80020f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e058      	b.n	8001abc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	691a      	ldr	r2, [r3, #16]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1c:	1c5a      	adds	r2, r3, #1
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d124      	bne.n	8001a94 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d107      	bne.n	8001a62 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a60:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f47f aeb6 	bne.w	800180a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e000      	b.n	8001abc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001aba:	2302      	movs	r3, #2
  }
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3728      	adds	r7, #40	@ 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	00010004 	.word	0x00010004

08001ac8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af02      	add	r7, sp, #8
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001adc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d006      	beq.n	8001af2 <I2C_MasterRequestWrite+0x2a>
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d003      	beq.n	8001af2 <I2C_MasterRequestWrite+0x2a>
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001af0:	d108      	bne.n	8001b04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e00b      	b.n	8001b1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b08:	2b12      	cmp	r3, #18
 8001b0a:	d107      	bne.n	8001b1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 f937 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00d      	beq.n	8001b50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b42:	d103      	bne.n	8001b4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e035      	b.n	8001bbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b58:	d108      	bne.n	8001b6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b5a:	897b      	ldrh	r3, [r7, #10]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b68:	611a      	str	r2, [r3, #16]
 8001b6a:	e01b      	b.n	8001ba4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b6c:	897b      	ldrh	r3, [r7, #10]
 8001b6e:	11db      	asrs	r3, r3, #7
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	f003 0306 	and.w	r3, r3, #6
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f063 030f 	orn	r3, r3, #15
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	490e      	ldr	r1, [pc, #56]	@ (8001bc4 <I2C_MasterRequestWrite+0xfc>)
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 f980 	bl	8001e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e010      	b.n	8001bbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b9a:	897b      	ldrh	r3, [r7, #10]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	4907      	ldr	r1, [pc, #28]	@ (8001bc8 <I2C_MasterRequestWrite+0x100>)
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 f970 	bl	8001e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	00010008 	.word	0x00010008
 8001bc8:	00010002 	.word	0x00010002

08001bcc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	4608      	mov	r0, r1
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4603      	mov	r3, r0
 8001bdc:	817b      	strh	r3, [r7, #10]
 8001bde:	460b      	mov	r3, r1
 8001be0:	813b      	strh	r3, [r7, #8]
 8001be2:	4613      	mov	r3, r2
 8001be4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001bf4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f8c2 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00d      	beq.n	8001c3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c2c:	d103      	bne.n	8001c36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c34:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e0aa      	b.n	8001d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c3a:	897b      	ldrh	r3, [r7, #10]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4c:	6a3a      	ldr	r2, [r7, #32]
 8001c4e:	4952      	ldr	r1, [pc, #328]	@ (8001d98 <I2C_RequestMemoryRead+0x1cc>)
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 f91d 	bl	8001e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e097      	b.n	8001d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c78:	6a39      	ldr	r1, [r7, #32]
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 f9a8 	bl	8001fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00d      	beq.n	8001ca2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d107      	bne.n	8001c9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e076      	b.n	8001d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d105      	bne.n	8001cb4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ca8:	893b      	ldrh	r3, [r7, #8]
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	611a      	str	r2, [r3, #16]
 8001cb2:	e021      	b.n	8001cf8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001cb4:	893b      	ldrh	r3, [r7, #8]
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cc4:	6a39      	ldr	r1, [r7, #32]
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 f982 	bl	8001fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00d      	beq.n	8001cee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d107      	bne.n	8001cea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ce8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e050      	b.n	8001d90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001cee:	893b      	ldrh	r3, [r7, #8]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cfa:	6a39      	ldr	r1, [r7, #32]
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f000 f967 	bl	8001fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00d      	beq.n	8001d24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d107      	bne.n	8001d20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e035      	b.n	8001d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f000 f82b 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00d      	beq.n	8001d68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d5a:	d103      	bne.n	8001d64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e013      	b.n	8001d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d68:	897b      	ldrh	r3, [r7, #10]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	6a3a      	ldr	r2, [r7, #32]
 8001d7c:	4906      	ldr	r1, [pc, #24]	@ (8001d98 <I2C_RequestMemoryRead+0x1cc>)
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 f886 	bl	8001e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	00010002 	.word	0x00010002

08001d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	4613      	mov	r3, r2
 8001daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dac:	e048      	b.n	8001e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d044      	beq.n	8001e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001db6:	f7fe ff4d 	bl	8000c54 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d302      	bcc.n	8001dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d139      	bne.n	8001e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	0c1b      	lsrs	r3, r3, #16
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d10d      	bne.n	8001df2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	43da      	mvns	r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	4013      	ands	r3, r2
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf0c      	ite	eq
 8001de8:	2301      	moveq	r3, #1
 8001dea:	2300      	movne	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	e00c      	b.n	8001e0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	43da      	mvns	r2, r3
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d116      	bne.n	8001e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	f043 0220 	orr.w	r2, r3, #32
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e023      	b.n	8001e88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	0c1b      	lsrs	r3, r3, #16
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d10d      	bne.n	8001e66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	43da      	mvns	r2, r3
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	4013      	ands	r3, r2
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	e00c      	b.n	8001e80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	43da      	mvns	r2, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	4013      	ands	r3, r2
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf0c      	ite	eq
 8001e78:	2301      	moveq	r3, #1
 8001e7a:	2300      	movne	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d093      	beq.n	8001dae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e9e:	e071      	b.n	8001f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eae:	d123      	bne.n	8001ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ebe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ec8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee4:	f043 0204 	orr.w	r2, r3, #4
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e067      	b.n	8001fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efe:	d041      	beq.n	8001f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f00:	f7fe fea8 	bl	8000c54 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d302      	bcc.n	8001f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d136      	bne.n	8001f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	0c1b      	lsrs	r3, r3, #16
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d10c      	bne.n	8001f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	43da      	mvns	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bf14      	ite	ne
 8001f32:	2301      	movne	r3, #1
 8001f34:	2300      	moveq	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	e00b      	b.n	8001f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	43da      	mvns	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	4013      	ands	r3, r2
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf14      	ite	ne
 8001f4c:	2301      	movne	r3, #1
 8001f4e:	2300      	moveq	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d016      	beq.n	8001f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f70:	f043 0220 	orr.w	r2, r3, #32
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e021      	b.n	8001fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	0c1b      	lsrs	r3, r3, #16
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d10c      	bne.n	8001fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	43da      	mvns	r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf14      	ite	ne
 8001fa0:	2301      	movne	r3, #1
 8001fa2:	2300      	moveq	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	e00b      	b.n	8001fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	bf14      	ite	ne
 8001fba:	2301      	movne	r3, #1
 8001fbc:	2300      	moveq	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f47f af6d 	bne.w	8001ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fdc:	e034      	b.n	8002048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f8e3 	bl	80021aa <I2C_IsAcknowledgeFailed>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e034      	b.n	8002058 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff4:	d028      	beq.n	8002048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff6:	f7fe fe2d 	bl	8000c54 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	429a      	cmp	r2, r3
 8002004:	d302      	bcc.n	800200c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d11d      	bne.n	8002048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002016:	2b80      	cmp	r3, #128	@ 0x80
 8002018:	d016      	beq.n	8002048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	f043 0220 	orr.w	r2, r3, #32
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e007      	b.n	8002058 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002052:	2b80      	cmp	r3, #128	@ 0x80
 8002054:	d1c3      	bne.n	8001fde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800206c:	e034      	b.n	80020d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f89b 	bl	80021aa <I2C_IsAcknowledgeFailed>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e034      	b.n	80020e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002084:	d028      	beq.n	80020d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002086:	f7fe fde5 	bl	8000c54 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	429a      	cmp	r2, r3
 8002094:	d302      	bcc.n	800209c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d11d      	bne.n	80020d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d016      	beq.n	80020d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	f043 0220 	orr.w	r2, r3, #32
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e007      	b.n	80020e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d1c3      	bne.n	800206e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020fc:	e049      	b.n	8002192 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b10      	cmp	r3, #16
 800210a:	d119      	bne.n	8002140 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0210 	mvn.w	r2, #16
 8002114:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e030      	b.n	80021a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002140:	f7fe fd88 	bl	8000c54 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	429a      	cmp	r2, r3
 800214e:	d302      	bcc.n	8002156 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d11d      	bne.n	8002192 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002160:	2b40      	cmp	r3, #64	@ 0x40
 8002162:	d016      	beq.n	8002192 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	f043 0220 	orr.w	r2, r3, #32
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e007      	b.n	80021a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219c:	2b40      	cmp	r3, #64	@ 0x40
 800219e:	d1ae      	bne.n	80020fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021c0:	d11b      	bne.n	80021fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	f043 0204 	orr.w	r2, r3, #4
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af02      	add	r7, sp, #8
 800220e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e101      	b.n	800241e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d106      	bne.n	800223a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f005 ff57 	bl	80080e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2203      	movs	r2, #3
 800223e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002248:	d102      	bne.n	8002250 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f002 fba4 	bl	80049a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	7c1a      	ldrb	r2, [r3, #16]
 8002262:	f88d 2000 	strb.w	r2, [sp]
 8002266:	3304      	adds	r3, #4
 8002268:	cb0e      	ldmia	r3, {r1, r2, r3}
 800226a:	f002 fa83 	bl	8004774 <USB_CoreInit>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0ce      	b.n	800241e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2100      	movs	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f002 fb9c 	bl	80049c4 <USB_SetCurrentMode>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2202      	movs	r2, #2
 8002296:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e0bf      	b.n	800241e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800229e:	2300      	movs	r3, #0
 80022a0:	73fb      	strb	r3, [r7, #15]
 80022a2:	e04a      	b.n	800233a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	3315      	adds	r3, #21
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	3314      	adds	r3, #20
 80022c8:	7bfa      	ldrb	r2, [r7, #15]
 80022ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022cc:	7bfa      	ldrb	r2, [r7, #15]
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	b298      	uxth	r0, r3
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	332e      	adds	r3, #46	@ 0x2e
 80022e0:	4602      	mov	r2, r0
 80022e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	3318      	adds	r3, #24
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	331c      	adds	r3, #28
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	3320      	adds	r3, #32
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002320:	7bfa      	ldrb	r2, [r7, #15]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	3324      	adds	r3, #36	@ 0x24
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	3301      	adds	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	791b      	ldrb	r3, [r3, #4]
 800233e:	7bfa      	ldrb	r2, [r7, #15]
 8002340:	429a      	cmp	r2, r3
 8002342:	d3af      	bcc.n	80022a4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e044      	b.n	80023d4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023a2:	7bfa      	ldrb	r2, [r7, #15]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023b8:	7bfa      	ldrb	r2, [r7, #15]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	3301      	adds	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	791b      	ldrb	r3, [r3, #4]
 80023d8:	7bfa      	ldrb	r2, [r7, #15]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d3b5      	bcc.n	800234a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	7c1a      	ldrb	r2, [r3, #16]
 80023e6:	f88d 2000 	strb.w	r2, [sp]
 80023ea:	3304      	adds	r3, #4
 80023ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023ee:	f002 fb35 	bl	8004a5c <USB_DevInit>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e00c      	b.n	800241e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f003 fb7f 	bl	8005b1a <USB_DevDisconnect>

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_PCD_Start+0x1c>
 800243e:	2302      	movs	r3, #2
 8002440:	e022      	b.n	8002488 <HAL_PCD_Start+0x62>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d009      	beq.n	800246a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800245a:	2b01      	cmp	r3, #1
 800245c:	d105      	bne.n	800246a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002462:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f002 fa86 	bl	8004980 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f003 fb2d 	bl	8005ad8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b08d      	sub	sp, #52	@ 0x34
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f003 fbeb 	bl	8005c82 <USB_GetMode>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 848c 	bne.w	8002dcc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f003 fb4f 	bl	8005b5c <USB_ReadInterrupts>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 8482 	beq.w	8002dca <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	0a1b      	lsrs	r3, r3, #8
 80024d0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f003 fb3c 	bl	8005b5c <USB_ReadInterrupts>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d107      	bne.n	80024fe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695a      	ldr	r2, [r3, #20]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f002 0202 	and.w	r2, r2, #2
 80024fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f003 fb2a 	bl	8005b5c <USB_ReadInterrupts>
 8002508:	4603      	mov	r3, r0
 800250a:	f003 0310 	and.w	r3, r3, #16
 800250e:	2b10      	cmp	r3, #16
 8002510:	d161      	bne.n	80025d6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699a      	ldr	r2, [r3, #24]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0210 	bic.w	r2, r2, #16
 8002520:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f003 020f 	and.w	r2, r3, #15
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	3304      	adds	r3, #4
 8002540:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	0c5b      	lsrs	r3, r3, #17
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	2b02      	cmp	r3, #2
 800254c:	d124      	bne.n	8002598 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d035      	beq.n	80025c6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002564:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002568:	b29b      	uxth	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	6a38      	ldr	r0, [r7, #32]
 800256e:	f003 f961 	bl	8005834 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800257e:	441a      	add	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	091b      	lsrs	r3, r3, #4
 800258c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002590:	441a      	add	r2, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	615a      	str	r2, [r3, #20]
 8002596:	e016      	b.n	80025c6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	0c5b      	lsrs	r3, r3, #17
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	2b06      	cmp	r3, #6
 80025a2:	d110      	bne.n	80025c6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025aa:	2208      	movs	r2, #8
 80025ac:	4619      	mov	r1, r3
 80025ae:	6a38      	ldr	r0, [r7, #32]
 80025b0:	f003 f940 	bl	8005834 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025c0:	441a      	add	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699a      	ldr	r2, [r3, #24]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0210 	orr.w	r2, r2, #16
 80025d4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 fabe 	bl	8005b5c <USB_ReadInterrupts>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025e6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80025ea:	f040 80a7 	bne.w	800273c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f003 fac3 	bl	8005b82 <USB_ReadDevAllOutEpInterrupt>
 80025fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80025fe:	e099      	b.n	8002734 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 808e 	beq.w	8002728 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f003 fae7 	bl	8005bea <USB_ReadDevOutEPInterrupt>
 800261c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00c      	beq.n	8002642 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	4413      	add	r3, r2
 8002630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002634:	461a      	mov	r2, r3
 8002636:	2301      	movs	r3, #1
 8002638:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800263a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 fea3 	bl	8003388 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00c      	beq.n	8002666 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	4413      	add	r3, r2
 8002654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002658:	461a      	mov	r2, r3
 800265a:	2308      	movs	r3, #8
 800265c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800265e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 ff79 	bl	8003558 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	4413      	add	r3, r2
 8002678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800267c:	461a      	mov	r2, r3
 800267e:	2310      	movs	r3, #16
 8002680:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d030      	beq.n	80026ee <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002694:	2b80      	cmp	r3, #128	@ 0x80
 8002696:	d109      	bne.n	80026ac <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026aa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ae:	4613      	mov	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	3304      	adds	r3, #4
 80026c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	78db      	ldrb	r3, [r3, #3]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d108      	bne.n	80026dc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2200      	movs	r2, #0
 80026ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	4619      	mov	r1, r3
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f005 fe02 	bl	80082e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026e8:	461a      	mov	r2, r3
 80026ea:	2302      	movs	r3, #2
 80026ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002704:	461a      	mov	r2, r3
 8002706:	2320      	movs	r3, #32
 8002708:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d009      	beq.n	8002728 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	4413      	add	r3, r2
 800271c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002720:	461a      	mov	r2, r3
 8002722:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002726:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272a:	3301      	adds	r3, #1
 800272c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800272e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002736:	2b00      	cmp	r3, #0
 8002738:	f47f af62 	bne.w	8002600 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f003 fa0b 	bl	8005b5c <USB_ReadInterrupts>
 8002746:	4603      	mov	r3, r0
 8002748:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800274c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002750:	f040 80db 	bne.w	800290a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f003 fa2c 	bl	8005bb6 <USB_ReadDevAllInEpInterrupt>
 800275e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002764:	e0cd      	b.n	8002902 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80c2 	beq.w	80028f6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f003 fa52 	bl	8005c26 <USB_ReadDevInEPInterrupt>
 8002782:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d057      	beq.n	800283e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	2201      	movs	r2, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69f9      	ldr	r1, [r7, #28]
 80027aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80027ae:	4013      	ands	r3, r2
 80027b0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	015a      	lsls	r2, r3, #5
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027be:	461a      	mov	r2, r3
 80027c0:	2301      	movs	r3, #1
 80027c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	799b      	ldrb	r3, [r3, #6]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d132      	bne.n	8002832 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	3320      	adds	r3, #32
 80027dc:	6819      	ldr	r1, [r3, #0]
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4403      	add	r3, r0
 80027ec:	331c      	adds	r3, #28
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4419      	add	r1, r3
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4403      	add	r3, r0
 8002800:	3320      	adds	r3, #32
 8002802:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002806:	2b00      	cmp	r3, #0
 8002808:	d113      	bne.n	8002832 <HAL_PCD_IRQHandler+0x3a2>
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800280e:	4613      	mov	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	3324      	adds	r3, #36	@ 0x24
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d108      	bne.n	8002832 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800282a:	461a      	mov	r2, r3
 800282c:	2101      	movs	r1, #1
 800282e:	f003 fa59 	bl	8005ce4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	b2db      	uxtb	r3, r3
 8002836:	4619      	mov	r1, r3
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f005 fcd6 	bl	80081ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	4413      	add	r3, r2
 8002850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002854:	461a      	mov	r2, r3
 8002856:	2308      	movs	r3, #8
 8002858:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	4413      	add	r3, r2
 800286c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002870:	461a      	mov	r2, r3
 8002872:	2310      	movs	r3, #16
 8002874:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	4413      	add	r3, r2
 8002888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800288c:	461a      	mov	r2, r3
 800288e:	2340      	movs	r3, #64	@ 0x40
 8002890:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d023      	beq.n	80028e4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800289c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800289e:	6a38      	ldr	r0, [r7, #32]
 80028a0:	f002 fa40 	bl	8004d24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	3310      	adds	r3, #16
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	3304      	adds	r3, #4
 80028b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	78db      	ldrb	r3, [r3, #3]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d108      	bne.n	80028d2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2200      	movs	r2, #0
 80028c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	4619      	mov	r1, r3
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f005 fd19 	bl	8008304 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028de:	461a      	mov	r2, r3
 80028e0:	2302      	movs	r3, #2
 80028e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fcbd 	bl	8003270 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f8:	3301      	adds	r3, #1
 80028fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80028fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002904:	2b00      	cmp	r3, #0
 8002906:	f47f af2e 	bne.w	8002766 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f003 f924 	bl	8005b5c <USB_ReadInterrupts>
 8002914:	4603      	mov	r3, r0
 8002916:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800291a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800291e:	d122      	bne.n	8002966 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800292e:	f023 0301 	bic.w	r3, r3, #1
 8002932:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800293a:	2b01      	cmp	r3, #1
 800293c:	d108      	bne.n	8002950 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002946:	2100      	movs	r1, #0
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 fea3 	bl	8003694 <HAL_PCDEx_LPM_Callback>
 800294e:	e002      	b.n	8002956 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f005 fcb7 	bl	80082c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f003 f8f6 	bl	8005b5c <USB_ReadInterrupts>
 8002970:	4603      	mov	r3, r0
 8002972:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002976:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800297a:	d112      	bne.n	80029a2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	d102      	bne.n	8002992 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f005 fc73 	bl	8008278 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80029a0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f003 f8d8 	bl	8005b5c <USB_ReadInterrupts>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029b6:	f040 80b7 	bne.w	8002b28 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2110      	movs	r1, #16
 80029d4:	4618      	mov	r0, r3
 80029d6:	f002 f9a5 	bl	8004d24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029da:	2300      	movs	r3, #0
 80029dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029de:	e046      	b.n	8002a6e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029ec:	461a      	mov	r2, r3
 80029ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80029f2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a04:	0151      	lsls	r1, r2, #5
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	440a      	add	r2, r1
 8002a0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002a0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a12:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a20:	461a      	mov	r2, r3
 8002a22:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a26:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a38:	0151      	lsls	r1, r2, #5
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	440a      	add	r2, r1
 8002a3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002a42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a46:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a58:	0151      	lsls	r1, r2, #5
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	440a      	add	r2, r1
 8002a5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002a62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002a66:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	791b      	ldrb	r3, [r3, #4]
 8002a72:	461a      	mov	r2, r3
 8002a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d3b2      	bcc.n	80029e0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a88:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002a8c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	7bdb      	ldrb	r3, [r3, #15]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d016      	beq.n	8002ac4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002aa6:	f043 030b 	orr.w	r3, r3, #11
 8002aaa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002abc:	f043 030b 	orr.w	r3, r3, #11
 8002ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ac2:	e015      	b.n	8002af0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ad2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ad6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002ada:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	69fa      	ldr	r2, [r7, #28]
 8002ae6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002aea:	f043 030b 	orr.w	r3, r3, #11
 8002aee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69fa      	ldr	r2, [r7, #28]
 8002afa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002afe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002b02:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b12:	461a      	mov	r2, r3
 8002b14:	f003 f8e6 	bl	8005ce4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002b26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f003 f815 	bl	8005b5c <USB_ReadInterrupts>
 8002b32:	4603      	mov	r3, r0
 8002b34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b3c:	d123      	bne.n	8002b86 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f003 f8ab 	bl	8005c9e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f002 f962 	bl	8004e16 <USB_GetDevSpeed>
 8002b52:	4603      	mov	r3, r0
 8002b54:	461a      	mov	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681c      	ldr	r4, [r3, #0]
 8002b5e:	f001 f9c9 	bl	8003ef4 <HAL_RCC_GetHCLKFreq>
 8002b62:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	f001 fe66 	bl	800483c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f005 fb62 	bl	800823a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695a      	ldr	r2, [r3, #20]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f002 ffe6 	bl	8005b5c <USB_ReadInterrupts>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d10a      	bne.n	8002bb0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f005 fb3f 	bl	800821e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f002 0208 	and.w	r2, r2, #8
 8002bae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f002 ffd1 	bl	8005b5c <USB_ReadInterrupts>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc0:	2b80      	cmp	r3, #128	@ 0x80
 8002bc2:	d123      	bne.n	8002c0c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd4:	e014      	b.n	8002c00 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d105      	bne.n	8002bfa <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 fb0a 	bl	800320e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	791b      	ldrb	r3, [r3, #4]
 8002c04:	461a      	mov	r2, r3
 8002c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d3e4      	bcc.n	8002bd6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f002 ffa3 	bl	8005b5c <USB_ReadInterrupts>
 8002c16:	4603      	mov	r3, r0
 8002c18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c20:	d13c      	bne.n	8002c9c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c22:	2301      	movs	r3, #1
 8002c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c26:	e02b      	b.n	8002c80 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	3318      	adds	r3, #24
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d115      	bne.n	8002c7a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c4e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	da12      	bge.n	8002c7a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	3317      	adds	r3, #23
 8002c64:	2201      	movs	r2, #1
 8002c66:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	4619      	mov	r1, r3
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 faca 	bl	800320e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	791b      	ldrb	r3, [r3, #4]
 8002c84:	461a      	mov	r2, r3
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d3cd      	bcc.n	8002c28 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f002 ff5b 	bl	8005b5c <USB_ReadInterrupts>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cb0:	d156      	bne.n	8002d60 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb6:	e045      	b.n	8002d44 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ccc:	4613      	mov	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d12e      	bne.n	8002d3e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ce0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	da2b      	bge.n	8002d3e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002cf2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d121      	bne.n	8002d3e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cfe:	4613      	mov	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	69fa      	ldr	r2, [r7, #28]
 8002d32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d3a:	6053      	str	r3, [r2, #4]
            break;
 8002d3c:	e008      	b.n	8002d50 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	3301      	adds	r3, #1
 8002d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	791b      	ldrb	r3, [r3, #4]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d3b3      	bcc.n	8002cb8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002d5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f002 fef9 	bl	8005b5c <USB_ReadInterrupts>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d74:	d10a      	bne.n	8002d8c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f005 fad6 	bl	8008328 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002d8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f002 fee3 	bl	8005b5c <USB_ReadInterrupts>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d115      	bne.n	8002dcc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f005 fac6 	bl	8008344 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6859      	ldr	r1, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	605a      	str	r2, [r3, #4]
 8002dc8:	e000      	b.n	8002dcc <HAL_PCD_IRQHandler+0x93c>
      return;
 8002dca:	bf00      	nop
    }
  }
}
 8002dcc:	3734      	adds	r7, #52	@ 0x34
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd90      	pop	{r4, r7, pc}

08002dd2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_PCD_SetAddress+0x1a>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e012      	b.n	8002e12 <HAL_PCD_SetAddress+0x40>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	78fa      	ldrb	r2, [r7, #3]
 8002e00:	4611      	mov	r1, r2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f002 fe42 	bl	8005a8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	4608      	mov	r0, r1
 8002e24:	4611      	mov	r1, r2
 8002e26:	461a      	mov	r2, r3
 8002e28:	4603      	mov	r3, r0
 8002e2a:	70fb      	strb	r3, [r7, #3]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	803b      	strh	r3, [r7, #0]
 8002e30:	4613      	mov	r3, r2
 8002e32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	da0f      	bge.n	8002e60 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	f003 020f 	and.w	r2, r3, #15
 8002e46:	4613      	mov	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	3310      	adds	r3, #16
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	4413      	add	r3, r2
 8002e54:	3304      	adds	r3, #4
 8002e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	705a      	strb	r2, [r3, #1]
 8002e5e:	e00f      	b.n	8002e80 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	f003 020f 	and.w	r2, r3, #15
 8002e66:	4613      	mov	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	3304      	adds	r3, #4
 8002e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002e8c:	883b      	ldrh	r3, [r7, #0]
 8002e8e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	78ba      	ldrb	r2, [r7, #2]
 8002e9a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	785b      	ldrb	r3, [r3, #1]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d004      	beq.n	8002eae <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002eae:	78bb      	ldrb	r3, [r7, #2]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d102      	bne.n	8002eba <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_PCD_EP_Open+0xae>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e00e      	b.n	8002ee6 <HAL_PCD_EP_Open+0xcc>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68f9      	ldr	r1, [r7, #12]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f001 ffc2 	bl	8004e60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002ee4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002efa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	da0f      	bge.n	8002f22 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	f003 020f 	and.w	r2, r3, #15
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	3310      	adds	r3, #16
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	4413      	add	r3, r2
 8002f16:	3304      	adds	r3, #4
 8002f18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	705a      	strb	r2, [r3, #1]
 8002f20:	e00f      	b.n	8002f42 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	f003 020f 	and.w	r2, r3, #15
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	4413      	add	r3, r2
 8002f38:	3304      	adds	r3, #4
 8002f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f42:	78fb      	ldrb	r3, [r7, #3]
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_PCD_EP_Close+0x6e>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e00e      	b.n	8002f7a <HAL_PCD_EP_Close+0x8c>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68f9      	ldr	r1, [r7, #12]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f002 f800 	bl	8004f70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f92:	7afb      	ldrb	r3, [r7, #11]
 8002f94:	f003 020f 	and.w	r2, r3, #15
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3304      	adds	r3, #4
 8002faa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fc4:	7afb      	ldrb	r3, [r7, #11]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	799b      	ldrb	r3, [r3, #6]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d102      	bne.n	8002fde <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	799b      	ldrb	r3, [r3, #6]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	6979      	ldr	r1, [r7, #20]
 8002fea:	f002 f89d 	bl	8005128 <USB_EPStartXfer>

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	f003 020f 	and.w	r2, r3, #15
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800301a:	681b      	ldr	r3, [r3, #0]
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	460b      	mov	r3, r1
 8003036:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003038:	7afb      	ldrb	r3, [r7, #11]
 800303a:	f003 020f 	and.w	r2, r3, #15
 800303e:	4613      	mov	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	3310      	adds	r3, #16
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4413      	add	r3, r2
 800304c:	3304      	adds	r3, #4
 800304e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2200      	movs	r2, #0
 8003060:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2201      	movs	r2, #1
 8003066:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003068:	7afb      	ldrb	r3, [r7, #11]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	b2da      	uxtb	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	799b      	ldrb	r3, [r3, #6]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d102      	bne.n	8003082 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	799b      	ldrb	r3, [r3, #6]
 800308a:	461a      	mov	r2, r3
 800308c:	6979      	ldr	r1, [r7, #20]
 800308e:	f002 f84b 	bl	8005128 <USB_EPStartXfer>

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	7912      	ldrb	r2, [r2, #4]
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e04f      	b.n	800315a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	da0f      	bge.n	80030e2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	f003 020f 	and.w	r2, r3, #15
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	3310      	adds	r3, #16
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	3304      	adds	r3, #4
 80030d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	705a      	strb	r2, [r3, #1]
 80030e0:	e00d      	b.n	80030fe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	4413      	add	r3, r2
 80030f4:	3304      	adds	r3, #4
 80030f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	b2da      	uxtb	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_PCD_EP_SetStall+0x82>
 800311a:	2302      	movs	r3, #2
 800311c:	e01d      	b.n	800315a <HAL_PCD_EP_SetStall+0xbe>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68f9      	ldr	r1, [r7, #12]
 800312c:	4618      	mov	r0, r3
 800312e:	f002 fbd9 	bl	80058e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	f003 030f 	and.w	r3, r3, #15
 8003138:	2b00      	cmp	r3, #0
 800313a:	d109      	bne.n	8003150 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	7999      	ldrb	r1, [r3, #6]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800314a:	461a      	mov	r2, r3
 800314c:	f002 fdca 	bl	8005ce4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	460b      	mov	r3, r1
 800316c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	f003 030f 	and.w	r3, r3, #15
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	7912      	ldrb	r2, [r2, #4]
 8003178:	4293      	cmp	r3, r2
 800317a:	d901      	bls.n	8003180 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e042      	b.n	8003206 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003184:	2b00      	cmp	r3, #0
 8003186:	da0f      	bge.n	80031a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	f003 020f 	and.w	r2, r3, #15
 800318e:	4613      	mov	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	3310      	adds	r3, #16
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4413      	add	r3, r2
 800319c:	3304      	adds	r3, #4
 800319e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	705a      	strb	r2, [r3, #1]
 80031a6:	e00f      	b.n	80031c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	f003 020f 	and.w	r2, r3, #15
 80031ae:	4613      	mov	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4413      	add	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	3304      	adds	r3, #4
 80031c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_PCD_EP_ClrStall+0x86>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e00e      	b.n	8003206 <HAL_PCD_EP_ClrStall+0xa4>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68f9      	ldr	r1, [r7, #12]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f002 fbe2 	bl	80059c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b084      	sub	sp, #16
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	460b      	mov	r3, r1
 8003218:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800321a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800321e:	2b00      	cmp	r3, #0
 8003220:	da0c      	bge.n	800323c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003222:	78fb      	ldrb	r3, [r7, #3]
 8003224:	f003 020f 	and.w	r2, r3, #15
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	3310      	adds	r3, #16
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	4413      	add	r3, r2
 8003236:	3304      	adds	r3, #4
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	e00c      	b.n	8003256 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800323c:	78fb      	ldrb	r3, [r7, #3]
 800323e:	f003 020f 	and.w	r2, r3, #15
 8003242:	4613      	mov	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	3304      	adds	r3, #4
 8003254:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68f9      	ldr	r1, [r7, #12]
 800325c:	4618      	mov	r0, r3
 800325e:	f002 fa01 	bl	8005664 <USB_EPStopXfer>
 8003262:	4603      	mov	r3, r0
 8003264:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003266:	7afb      	ldrb	r3, [r7, #11]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	@ 0x28
 8003274:	af02      	add	r7, sp, #8
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	4613      	mov	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	3310      	adds	r3, #16
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4413      	add	r3, r2
 8003294:	3304      	adds	r3, #4
 8003296:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d901      	bls.n	80032a8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e06b      	b.n	8003380 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	69fa      	ldr	r2, [r7, #28]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d902      	bls.n	80032c4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	3303      	adds	r3, #3
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032cc:	e02a      	b.n	8003324 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d902      	bls.n	80032ea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3303      	adds	r3, #3
 80032ee:	089b      	lsrs	r3, r3, #2
 80032f0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	68d9      	ldr	r1, [r3, #12]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	4603      	mov	r3, r0
 8003306:	6978      	ldr	r0, [r7, #20]
 8003308:	f002 fa56 	bl	80057b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	441a      	add	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	441a      	add	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	429a      	cmp	r2, r3
 8003338:	d809      	bhi.n	800334e <PCD_WriteEmptyTxFifo+0xde>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003342:	429a      	cmp	r2, r3
 8003344:	d203      	bcs.n	800334e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1bf      	bne.n	80032ce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	429a      	cmp	r2, r3
 8003358:	d811      	bhi.n	800337e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	2201      	movs	r2, #1
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800336e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	43db      	mvns	r3, r3
 8003374:	6939      	ldr	r1, [r7, #16]
 8003376:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800337a:	4013      	ands	r3, r2
 800337c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3720      	adds	r7, #32
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	333c      	adds	r3, #60	@ 0x3c
 80033a0:	3304      	adds	r3, #4
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	799b      	ldrb	r3, [r3, #6]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d17b      	bne.n	80034b6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d015      	beq.n	80033f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	4a61      	ldr	r2, [pc, #388]	@ (8003550 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	f240 80b9 	bls.w	8003544 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80b3 	beq.w	8003544 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ea:	461a      	mov	r2, r3
 80033ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033f0:	6093      	str	r3, [r2, #8]
 80033f2:	e0a7      	b.n	8003544 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	4413      	add	r3, r2
 8003406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800340a:	461a      	mov	r2, r3
 800340c:	2320      	movs	r3, #32
 800340e:	6093      	str	r3, [r2, #8]
 8003410:	e098      	b.n	8003544 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003418:	2b00      	cmp	r3, #0
 800341a:	f040 8093 	bne.w	8003544 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	4a4b      	ldr	r2, [pc, #300]	@ (8003550 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d90f      	bls.n	8003446 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00a      	beq.n	8003446 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800343c:	461a      	mov	r2, r3
 800343e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003442:	6093      	str	r3, [r2, #8]
 8003444:	e07e      	b.n	8003544 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	4613      	mov	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	4413      	add	r3, r2
 8003458:	3304      	adds	r3, #4
 800345a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a1a      	ldr	r2, [r3, #32]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	440b      	add	r3, r1
 8003468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003472:	1ad2      	subs	r2, r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d114      	bne.n	80034a8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003490:	461a      	mov	r2, r3
 8003492:	2101      	movs	r1, #1
 8003494:	f002 fc26 	bl	8005ce4 <USB_EP0_OutStart>
 8003498:	e006      	b.n	80034a8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	441a      	add	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	4619      	mov	r1, r3
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f004 fe80 	bl	80081b4 <HAL_PCD_DataOutStageCallback>
 80034b4:	e046      	b.n	8003544 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	4a26      	ldr	r2, [pc, #152]	@ (8003554 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d124      	bne.n	8003508 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034d4:	461a      	mov	r2, r3
 80034d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034da:	6093      	str	r3, [r2, #8]
 80034dc:	e032      	b.n	8003544 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034f4:	461a      	mov	r2, r3
 80034f6:	2320      	movs	r3, #32
 80034f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	4619      	mov	r1, r3
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f004 fe57 	bl	80081b4 <HAL_PCD_DataOutStageCallback>
 8003506:	e01d      	b.n	8003544 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d114      	bne.n	8003538 <PCD_EP_OutXfrComplete_int+0x1b0>
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d108      	bne.n	8003538 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003530:	461a      	mov	r2, r3
 8003532:	2100      	movs	r1, #0
 8003534:	f002 fbd6 	bl	8005ce4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	4619      	mov	r1, r3
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f004 fe38 	bl	80081b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3720      	adds	r7, #32
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	4f54300a 	.word	0x4f54300a
 8003554:	4f54310a 	.word	0x4f54310a

08003558 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	333c      	adds	r3, #60	@ 0x3c
 8003570:	3304      	adds	r3, #4
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4a15      	ldr	r2, [pc, #84]	@ (80035e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d90e      	bls.n	80035ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003594:	2b00      	cmp	r3, #0
 8003596:	d009      	beq.n	80035ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035a4:	461a      	mov	r2, r3
 80035a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f004 fdef 	bl	8008190 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4a0a      	ldr	r2, [pc, #40]	@ (80035e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d90c      	bls.n	80035d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	799b      	ldrb	r3, [r3, #6]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d108      	bne.n	80035d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035cc:	461a      	mov	r2, r3
 80035ce:	2101      	movs	r1, #1
 80035d0:	f002 fb88 	bl	8005ce4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	4f54300a 	.word	0x4f54300a

080035e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	70fb      	strb	r3, [r7, #3]
 80035f0:	4613      	mov	r3, r2
 80035f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d107      	bne.n	8003612 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003602:	883b      	ldrh	r3, [r7, #0]
 8003604:	0419      	lsls	r1, r3, #16
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	430a      	orrs	r2, r1
 800360e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003610:	e028      	b.n	8003664 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003618:	0c1b      	lsrs	r3, r3, #16
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	4413      	add	r3, r2
 800361e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003620:	2300      	movs	r3, #0
 8003622:	73fb      	strb	r3, [r7, #15]
 8003624:	e00d      	b.n	8003642 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	3340      	adds	r3, #64	@ 0x40
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	0c1b      	lsrs	r3, r3, #16
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	4413      	add	r3, r2
 800363a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800363c:	7bfb      	ldrb	r3, [r7, #15]
 800363e:	3301      	adds	r3, #1
 8003640:	73fb      	strb	r3, [r7, #15]
 8003642:	7bfa      	ldrb	r2, [r7, #15]
 8003644:	78fb      	ldrb	r3, [r7, #3]
 8003646:	3b01      	subs	r3, #1
 8003648:	429a      	cmp	r2, r3
 800364a:	d3ec      	bcc.n	8003626 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800364c:	883b      	ldrh	r3, [r7, #0]
 800364e:	0418      	lsls	r0, r3, #16
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6819      	ldr	r1, [r3, #0]
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	3b01      	subs	r3, #1
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	4302      	orrs	r2, r0
 800365c:	3340      	adds	r3, #64	@ 0x40
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	460b      	mov	r3, r1
 800367c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	887a      	ldrh	r2, [r7, #2]
 8003684:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e267      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d075      	beq.n	80037b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036ca:	4b88      	ldr	r3, [pc, #544]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 030c 	and.w	r3, r3, #12
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d00c      	beq.n	80036f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036d6:	4b85      	ldr	r3, [pc, #532]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d112      	bne.n	8003708 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036e2:	4b82      	ldr	r3, [pc, #520]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036ee:	d10b      	bne.n	8003708 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f0:	4b7e      	ldr	r3, [pc, #504]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d05b      	beq.n	80037b4 <HAL_RCC_OscConfig+0x108>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d157      	bne.n	80037b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e242      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003710:	d106      	bne.n	8003720 <HAL_RCC_OscConfig+0x74>
 8003712:	4b76      	ldr	r3, [pc, #472]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a75      	ldr	r2, [pc, #468]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 8003718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	e01d      	b.n	800375c <HAL_RCC_OscConfig+0xb0>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003728:	d10c      	bne.n	8003744 <HAL_RCC_OscConfig+0x98>
 800372a:	4b70      	ldr	r3, [pc, #448]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a6f      	ldr	r2, [pc, #444]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 8003730:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	4b6d      	ldr	r3, [pc, #436]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a6c      	ldr	r2, [pc, #432]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 800373c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	e00b      	b.n	800375c <HAL_RCC_OscConfig+0xb0>
 8003744:	4b69      	ldr	r3, [pc, #420]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a68      	ldr	r2, [pc, #416]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 800374a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	4b66      	ldr	r3, [pc, #408]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a65      	ldr	r2, [pc, #404]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 8003756:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800375a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d013      	beq.n	800378c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fd fa76 	bl	8000c54 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800376c:	f7fd fa72 	bl	8000c54 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b64      	cmp	r3, #100	@ 0x64
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e207      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377e:	4b5b      	ldr	r3, [pc, #364]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0xc0>
 800378a:	e014      	b.n	80037b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fd fa62 	bl	8000c54 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003794:	f7fd fa5e 	bl	8000c54 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b64      	cmp	r3, #100	@ 0x64
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e1f3      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a6:	4b51      	ldr	r3, [pc, #324]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0xe8>
 80037b2:	e000      	b.n	80037b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d063      	beq.n	800388a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037c2:	4b4a      	ldr	r3, [pc, #296]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 030c 	and.w	r3, r3, #12
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ce:	4b47      	ldr	r3, [pc, #284]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d11c      	bne.n	8003814 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037da:	4b44      	ldr	r3, [pc, #272]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d116      	bne.n	8003814 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e6:	4b41      	ldr	r3, [pc, #260]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <HAL_RCC_OscConfig+0x152>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d001      	beq.n	80037fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e1c7      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fe:	4b3b      	ldr	r3, [pc, #236]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4937      	ldr	r1, [pc, #220]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 800380e:	4313      	orrs	r3, r2
 8003810:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003812:	e03a      	b.n	800388a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d020      	beq.n	800385e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800381c:	4b34      	ldr	r3, [pc, #208]	@ (80038f0 <HAL_RCC_OscConfig+0x244>)
 800381e:	2201      	movs	r2, #1
 8003820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003822:	f7fd fa17 	bl	8000c54 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800382a:	f7fd fa13 	bl	8000c54 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e1a8      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383c:	4b2b      	ldr	r3, [pc, #172]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f0      	beq.n	800382a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003848:	4b28      	ldr	r3, [pc, #160]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4925      	ldr	r1, [pc, #148]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 8003858:	4313      	orrs	r3, r2
 800385a:	600b      	str	r3, [r1, #0]
 800385c:	e015      	b.n	800388a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800385e:	4b24      	ldr	r3, [pc, #144]	@ (80038f0 <HAL_RCC_OscConfig+0x244>)
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fd f9f6 	bl	8000c54 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800386c:	f7fd f9f2 	bl	8000c54 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e187      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800387e:	4b1b      	ldr	r3, [pc, #108]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d036      	beq.n	8003904 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d016      	beq.n	80038cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800389e:	4b15      	ldr	r3, [pc, #84]	@ (80038f4 <HAL_RCC_OscConfig+0x248>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a4:	f7fd f9d6 	bl	8000c54 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ac:	f7fd f9d2 	bl	8000c54 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e167      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038be:	4b0b      	ldr	r3, [pc, #44]	@ (80038ec <HAL_RCC_OscConfig+0x240>)
 80038c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0x200>
 80038ca:	e01b      	b.n	8003904 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038cc:	4b09      	ldr	r3, [pc, #36]	@ (80038f4 <HAL_RCC_OscConfig+0x248>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d2:	f7fd f9bf 	bl	8000c54 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d8:	e00e      	b.n	80038f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038da:	f7fd f9bb 	bl	8000c54 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d907      	bls.n	80038f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e150      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
 80038ec:	40023800 	.word	0x40023800
 80038f0:	42470000 	.word	0x42470000
 80038f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f8:	4b88      	ldr	r3, [pc, #544]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 80038fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1ea      	bne.n	80038da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 8097 	beq.w	8003a40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003912:	2300      	movs	r3, #0
 8003914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003916:	4b81      	ldr	r3, [pc, #516]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10f      	bne.n	8003942 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	4b7d      	ldr	r3, [pc, #500]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392a:	4a7c      	ldr	r2, [pc, #496]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 800392c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003930:	6413      	str	r3, [r2, #64]	@ 0x40
 8003932:	4b7a      	ldr	r3, [pc, #488]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800393e:	2301      	movs	r3, #1
 8003940:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003942:	4b77      	ldr	r3, [pc, #476]	@ (8003b20 <HAL_RCC_OscConfig+0x474>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800394a:	2b00      	cmp	r3, #0
 800394c:	d118      	bne.n	8003980 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800394e:	4b74      	ldr	r3, [pc, #464]	@ (8003b20 <HAL_RCC_OscConfig+0x474>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a73      	ldr	r2, [pc, #460]	@ (8003b20 <HAL_RCC_OscConfig+0x474>)
 8003954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800395a:	f7fd f97b 	bl	8000c54 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003962:	f7fd f977 	bl	8000c54 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e10c      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003974:	4b6a      	ldr	r3, [pc, #424]	@ (8003b20 <HAL_RCC_OscConfig+0x474>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f0      	beq.n	8003962 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d106      	bne.n	8003996 <HAL_RCC_OscConfig+0x2ea>
 8003988:	4b64      	ldr	r3, [pc, #400]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 800398a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398c:	4a63      	ldr	r2, [pc, #396]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	6713      	str	r3, [r2, #112]	@ 0x70
 8003994:	e01c      	b.n	80039d0 <HAL_RCC_OscConfig+0x324>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b05      	cmp	r3, #5
 800399c:	d10c      	bne.n	80039b8 <HAL_RCC_OscConfig+0x30c>
 800399e:	4b5f      	ldr	r3, [pc, #380]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 80039a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a2:	4a5e      	ldr	r2, [pc, #376]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 80039a4:	f043 0304 	orr.w	r3, r3, #4
 80039a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80039aa:	4b5c      	ldr	r3, [pc, #368]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 80039ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ae:	4a5b      	ldr	r2, [pc, #364]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80039b6:	e00b      	b.n	80039d0 <HAL_RCC_OscConfig+0x324>
 80039b8:	4b58      	ldr	r3, [pc, #352]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 80039ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039bc:	4a57      	ldr	r2, [pc, #348]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 80039be:	f023 0301 	bic.w	r3, r3, #1
 80039c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80039c4:	4b55      	ldr	r3, [pc, #340]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 80039c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c8:	4a54      	ldr	r2, [pc, #336]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 80039ca:	f023 0304 	bic.w	r3, r3, #4
 80039ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d015      	beq.n	8003a04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d8:	f7fd f93c 	bl	8000c54 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039de:	e00a      	b.n	80039f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e0:	f7fd f938 	bl	8000c54 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e0cb      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f6:	4b49      	ldr	r3, [pc, #292]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0ee      	beq.n	80039e0 <HAL_RCC_OscConfig+0x334>
 8003a02:	e014      	b.n	8003a2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a04:	f7fd f926 	bl	8000c54 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a0a:	e00a      	b.n	8003a22 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0c:	f7fd f922 	bl	8000c54 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e0b5      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a22:	4b3e      	ldr	r3, [pc, #248]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1ee      	bne.n	8003a0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d105      	bne.n	8003a40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a34:	4b39      	ldr	r3, [pc, #228]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	4a38      	ldr	r2, [pc, #224]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003a3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 80a1 	beq.w	8003b8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a4a:	4b34      	ldr	r3, [pc, #208]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d05c      	beq.n	8003b10 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d141      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5e:	4b31      	ldr	r3, [pc, #196]	@ (8003b24 <HAL_RCC_OscConfig+0x478>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a64:	f7fd f8f6 	bl	8000c54 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6c:	f7fd f8f2 	bl	8000c54 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e087      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7e:	4b27      	ldr	r3, [pc, #156]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69da      	ldr	r2, [r3, #28]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a98:	019b      	lsls	r3, r3, #6
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa0:	085b      	lsrs	r3, r3, #1
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	041b      	lsls	r3, r3, #16
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aac:	061b      	lsls	r3, r3, #24
 8003aae:	491b      	ldr	r1, [pc, #108]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b24 <HAL_RCC_OscConfig+0x478>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aba:	f7fd f8cb 	bl	8000c54 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac2:	f7fd f8c7 	bl	8000c54 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e05c      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad4:	4b11      	ldr	r3, [pc, #68]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x416>
 8003ae0:	e054      	b.n	8003b8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae2:	4b10      	ldr	r3, [pc, #64]	@ (8003b24 <HAL_RCC_OscConfig+0x478>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae8:	f7fd f8b4 	bl	8000c54 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af0:	f7fd f8b0 	bl	8000c54 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e045      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b02:	4b06      	ldr	r3, [pc, #24]	@ (8003b1c <HAL_RCC_OscConfig+0x470>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f0      	bne.n	8003af0 <HAL_RCC_OscConfig+0x444>
 8003b0e:	e03d      	b.n	8003b8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d107      	bne.n	8003b28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e038      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	40007000 	.word	0x40007000
 8003b24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b28:	4b1b      	ldr	r3, [pc, #108]	@ (8003b98 <HAL_RCC_OscConfig+0x4ec>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d028      	beq.n	8003b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d121      	bne.n	8003b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d11a      	bne.n	8003b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b58:	4013      	ands	r3, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d111      	bne.n	8003b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6e:	085b      	lsrs	r3, r3, #1
 8003b70:	3b01      	subs	r3, #1
 8003b72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800

08003b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0cc      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb0:	4b68      	ldr	r3, [pc, #416]	@ (8003d54 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d90c      	bls.n	8003bd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bbe:	4b65      	ldr	r3, [pc, #404]	@ (8003d54 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc6:	4b63      	ldr	r3, [pc, #396]	@ (8003d54 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0b8      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d020      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bf0:	4b59      	ldr	r3, [pc, #356]	@ (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	4a58      	ldr	r2, [pc, #352]	@ (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bfa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c08:	4b53      	ldr	r3, [pc, #332]	@ (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	4a52      	ldr	r2, [pc, #328]	@ (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c14:	4b50      	ldr	r3, [pc, #320]	@ (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	494d      	ldr	r1, [pc, #308]	@ (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d044      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d107      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3a:	4b47      	ldr	r3, [pc, #284]	@ (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d119      	bne.n	8003c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e07f      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d003      	beq.n	8003c5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d107      	bne.n	8003c6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d109      	bne.n	8003c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e06f      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e067      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c7a:	4b37      	ldr	r3, [pc, #220]	@ (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f023 0203 	bic.w	r2, r3, #3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	4934      	ldr	r1, [pc, #208]	@ (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c8c:	f7fc ffe2 	bl	8000c54 <HAL_GetTick>
 8003c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c92:	e00a      	b.n	8003caa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c94:	f7fc ffde 	bl	8000c54 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e04f      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003caa:	4b2b      	ldr	r3, [pc, #172]	@ (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 020c 	and.w	r2, r3, #12
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d1eb      	bne.n	8003c94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cbc:	4b25      	ldr	r3, [pc, #148]	@ (8003d54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d20c      	bcs.n	8003ce4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cca:	4b22      	ldr	r3, [pc, #136]	@ (8003d54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd2:	4b20      	ldr	r3, [pc, #128]	@ (8003d54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e032      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf0:	4b19      	ldr	r3, [pc, #100]	@ (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4916      	ldr	r1, [pc, #88]	@ (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d009      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d0e:	4b12      	ldr	r3, [pc, #72]	@ (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	490e      	ldr	r1, [pc, #56]	@ (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d22:	f000 f821 	bl	8003d68 <HAL_RCC_GetSysClockFreq>
 8003d26:	4602      	mov	r2, r0
 8003d28:	4b0b      	ldr	r3, [pc, #44]	@ (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	490a      	ldr	r1, [pc, #40]	@ (8003d5c <HAL_RCC_ClockConfig+0x1c0>)
 8003d34:	5ccb      	ldrb	r3, [r1, r3]
 8003d36:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3a:	4a09      	ldr	r2, [pc, #36]	@ (8003d60 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d3e:	4b09      	ldr	r3, [pc, #36]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fc ff42 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40023c00 	.word	0x40023c00
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	080090dc 	.word	0x080090dc
 8003d60:	20000004 	.word	0x20000004
 8003d64:	20000008 	.word	0x20000008

08003d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d6c:	b090      	sub	sp, #64	@ 0x40
 8003d6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d80:	4b59      	ldr	r3, [pc, #356]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 030c 	and.w	r3, r3, #12
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d00d      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0x40>
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	f200 80a1 	bhi.w	8003ed4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HAL_RCC_GetSysClockFreq+0x34>
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d003      	beq.n	8003da2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d9a:	e09b      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d9c:	4b53      	ldr	r3, [pc, #332]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x184>)
 8003d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003da0:	e09b      	b.n	8003eda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003da2:	4b53      	ldr	r3, [pc, #332]	@ (8003ef0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003da4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003da6:	e098      	b.n	8003eda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003da8:	4b4f      	ldr	r3, [pc, #316]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003db0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003db2:	4b4d      	ldr	r3, [pc, #308]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d028      	beq.n	8003e10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dbe:	4b4a      	ldr	r3, [pc, #296]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	099b      	lsrs	r3, r3, #6
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	623b      	str	r3, [r7, #32]
 8003dc8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4b47      	ldr	r3, [pc, #284]	@ (8003ef0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dd4:	fb03 f201 	mul.w	r2, r3, r1
 8003dd8:	2300      	movs	r3, #0
 8003dda:	fb00 f303 	mul.w	r3, r0, r3
 8003dde:	4413      	add	r3, r2
 8003de0:	4a43      	ldr	r2, [pc, #268]	@ (8003ef0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003de2:	fba0 1202 	umull	r1, r2, r0, r2
 8003de6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003de8:	460a      	mov	r2, r1
 8003dea:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003dec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dee:	4413      	add	r3, r2
 8003df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df4:	2200      	movs	r2, #0
 8003df6:	61bb      	str	r3, [r7, #24]
 8003df8:	61fa      	str	r2, [r7, #28]
 8003dfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003e02:	f7fc fa45 	bl	8000290 <__aeabi_uldivmod>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e0e:	e053      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e10:	4b35      	ldr	r3, [pc, #212]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	099b      	lsrs	r3, r3, #6
 8003e16:	2200      	movs	r2, #0
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	617a      	str	r2, [r7, #20]
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e22:	f04f 0b00 	mov.w	fp, #0
 8003e26:	4652      	mov	r2, sl
 8003e28:	465b      	mov	r3, fp
 8003e2a:	f04f 0000 	mov.w	r0, #0
 8003e2e:	f04f 0100 	mov.w	r1, #0
 8003e32:	0159      	lsls	r1, r3, #5
 8003e34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e38:	0150      	lsls	r0, r2, #5
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	ebb2 080a 	subs.w	r8, r2, sl
 8003e42:	eb63 090b 	sbc.w	r9, r3, fp
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e5a:	ebb2 0408 	subs.w	r4, r2, r8
 8003e5e:	eb63 0509 	sbc.w	r5, r3, r9
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	00eb      	lsls	r3, r5, #3
 8003e6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e70:	00e2      	lsls	r2, r4, #3
 8003e72:	4614      	mov	r4, r2
 8003e74:	461d      	mov	r5, r3
 8003e76:	eb14 030a 	adds.w	r3, r4, sl
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	eb45 030b 	adc.w	r3, r5, fp
 8003e80:	607b      	str	r3, [r7, #4]
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e8e:	4629      	mov	r1, r5
 8003e90:	028b      	lsls	r3, r1, #10
 8003e92:	4621      	mov	r1, r4
 8003e94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e98:	4621      	mov	r1, r4
 8003e9a:	028a      	lsls	r2, r1, #10
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	60fa      	str	r2, [r7, #12]
 8003ea8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eac:	f7fc f9f0 	bl	8000290 <__aeabi_uldivmod>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	0c1b      	lsrs	r3, r3, #16
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003ec8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ed2:	e002      	b.n	8003eda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ed4:	4b05      	ldr	r3, [pc, #20]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x184>)
 8003ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3740      	adds	r7, #64	@ 0x40
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	00f42400 	.word	0x00f42400
 8003ef0:	017d7840 	.word	0x017d7840

08003ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef8:	4b03      	ldr	r3, [pc, #12]	@ (8003f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003efa:	681b      	ldr	r3, [r3, #0]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20000004 	.word	0x20000004

08003f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f10:	f7ff fff0 	bl	8003ef4 <HAL_RCC_GetHCLKFreq>
 8003f14:	4602      	mov	r2, r0
 8003f16:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	0a9b      	lsrs	r3, r3, #10
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	4903      	ldr	r1, [pc, #12]	@ (8003f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f22:	5ccb      	ldrb	r3, [r1, r3]
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	080090ec 	.word	0x080090ec

08003f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f38:	f7ff ffdc 	bl	8003ef4 <HAL_RCC_GetHCLKFreq>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4b05      	ldr	r3, [pc, #20]	@ (8003f54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	0b5b      	lsrs	r3, r3, #13
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	4903      	ldr	r1, [pc, #12]	@ (8003f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f4a:	5ccb      	ldrb	r3, [r1, r3]
 8003f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40023800 	.word	0x40023800
 8003f58:	080090ec 	.word	0x080090ec

08003f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e042      	b.n	8003ff4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fc fd0c 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2224      	movs	r2, #36	@ 0x24
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f973 	bl	800428c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	@ 0x28
 8004000:	af02      	add	r7, sp, #8
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b20      	cmp	r3, #32
 800401a:	d175      	bne.n	8004108 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_UART_Transmit+0x2c>
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e06e      	b.n	800410a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2221      	movs	r2, #33	@ 0x21
 8004036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800403a:	f7fc fe0b 	bl	8000c54 <HAL_GetTick>
 800403e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	88fa      	ldrh	r2, [r7, #6]
 8004044:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	88fa      	ldrh	r2, [r7, #6]
 800404a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004054:	d108      	bne.n	8004068 <HAL_UART_Transmit+0x6c>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d104      	bne.n	8004068 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800405e:	2300      	movs	r3, #0
 8004060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	e003      	b.n	8004070 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800406c:	2300      	movs	r3, #0
 800406e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004070:	e02e      	b.n	80040d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2200      	movs	r2, #0
 800407a:	2180      	movs	r1, #128	@ 0x80
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f848 	bl	8004112 <UART_WaitOnFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e03a      	b.n	800410a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10b      	bne.n	80040b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	3302      	adds	r3, #2
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	e007      	b.n	80040c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	3301      	adds	r3, #1
 80040c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1cb      	bne.n	8004072 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2200      	movs	r2, #0
 80040e2:	2140      	movs	r1, #64	@ 0x40
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f814 	bl	8004112 <UART_WaitOnFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e006      	b.n	800410a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	e000      	b.n	800410a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004108:	2302      	movs	r3, #2
  }
}
 800410a:	4618      	mov	r0, r3
 800410c:	3720      	adds	r7, #32
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b086      	sub	sp, #24
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	603b      	str	r3, [r7, #0]
 800411e:	4613      	mov	r3, r2
 8004120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004122:	e03b      	b.n	800419c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412a:	d037      	beq.n	800419c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412c:	f7fc fd92 	bl	8000c54 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	6a3a      	ldr	r2, [r7, #32]
 8004138:	429a      	cmp	r2, r3
 800413a:	d302      	bcc.n	8004142 <UART_WaitOnFlagUntilTimeout+0x30>
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e03a      	b.n	80041bc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d023      	beq.n	800419c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b80      	cmp	r3, #128	@ 0x80
 8004158:	d020      	beq.n	800419c <UART_WaitOnFlagUntilTimeout+0x8a>
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b40      	cmp	r3, #64	@ 0x40
 800415e:	d01d      	beq.n	800419c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b08      	cmp	r3, #8
 800416c:	d116      	bne.n	800419c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f81d 	bl	80041c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2208      	movs	r2, #8
 800418e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e00f      	b.n	80041bc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	4013      	ands	r3, r2
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d0b4      	beq.n	8004124 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b095      	sub	sp, #84	@ 0x54
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	330c      	adds	r3, #12
 80041d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	330c      	adds	r3, #12
 80041ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80041ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e5      	bne.n	80041cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3314      	adds	r3, #20
 8004206:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	f023 0301 	bic.w	r3, r3, #1
 8004216:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3314      	adds	r3, #20
 800421e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004220:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004222:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e5      	bne.n	8004200 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004238:	2b01      	cmp	r3, #1
 800423a:	d119      	bne.n	8004270 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	330c      	adds	r3, #12
 8004242:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	e853 3f00 	ldrex	r3, [r3]
 800424a:	60bb      	str	r3, [r7, #8]
   return(result);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f023 0310 	bic.w	r3, r3, #16
 8004252:	647b      	str	r3, [r7, #68]	@ 0x44
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	330c      	adds	r3, #12
 800425a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800425c:	61ba      	str	r2, [r7, #24]
 800425e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	6979      	ldr	r1, [r7, #20]
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	613b      	str	r3, [r7, #16]
   return(result);
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e5      	bne.n	800423c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800427e:	bf00      	nop
 8004280:	3754      	adds	r7, #84	@ 0x54
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800428c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004290:	b0c0      	sub	sp, #256	@ 0x100
 8004292:	af00      	add	r7, sp, #0
 8004294:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a8:	68d9      	ldr	r1, [r3, #12]
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	ea40 0301 	orr.w	r3, r0, r1
 80042b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	431a      	orrs	r2, r3
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80042e4:	f021 010c 	bic.w	r1, r1, #12
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042f2:	430b      	orrs	r3, r1
 80042f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004306:	6999      	ldr	r1, [r3, #24]
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	ea40 0301 	orr.w	r3, r0, r1
 8004312:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	4b8f      	ldr	r3, [pc, #572]	@ (8004558 <UART_SetConfig+0x2cc>)
 800431c:	429a      	cmp	r2, r3
 800431e:	d005      	beq.n	800432c <UART_SetConfig+0xa0>
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	4b8d      	ldr	r3, [pc, #564]	@ (800455c <UART_SetConfig+0x2d0>)
 8004328:	429a      	cmp	r2, r3
 800432a:	d104      	bne.n	8004336 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800432c:	f7ff fe02 	bl	8003f34 <HAL_RCC_GetPCLK2Freq>
 8004330:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004334:	e003      	b.n	800433e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004336:	f7ff fde9 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 800433a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800433e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004348:	f040 810c 	bne.w	8004564 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800434c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004350:	2200      	movs	r2, #0
 8004352:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004356:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800435a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800435e:	4622      	mov	r2, r4
 8004360:	462b      	mov	r3, r5
 8004362:	1891      	adds	r1, r2, r2
 8004364:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004366:	415b      	adcs	r3, r3
 8004368:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800436a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800436e:	4621      	mov	r1, r4
 8004370:	eb12 0801 	adds.w	r8, r2, r1
 8004374:	4629      	mov	r1, r5
 8004376:	eb43 0901 	adc.w	r9, r3, r1
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004386:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800438a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800438e:	4690      	mov	r8, r2
 8004390:	4699      	mov	r9, r3
 8004392:	4623      	mov	r3, r4
 8004394:	eb18 0303 	adds.w	r3, r8, r3
 8004398:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800439c:	462b      	mov	r3, r5
 800439e:	eb49 0303 	adc.w	r3, r9, r3
 80043a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043ba:	460b      	mov	r3, r1
 80043bc:	18db      	adds	r3, r3, r3
 80043be:	653b      	str	r3, [r7, #80]	@ 0x50
 80043c0:	4613      	mov	r3, r2
 80043c2:	eb42 0303 	adc.w	r3, r2, r3
 80043c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80043c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043d0:	f7fb ff5e 	bl	8000290 <__aeabi_uldivmod>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4b61      	ldr	r3, [pc, #388]	@ (8004560 <UART_SetConfig+0x2d4>)
 80043da:	fba3 2302 	umull	r2, r3, r3, r2
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	011c      	lsls	r4, r3, #4
 80043e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043e6:	2200      	movs	r2, #0
 80043e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80043f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80043f4:	4642      	mov	r2, r8
 80043f6:	464b      	mov	r3, r9
 80043f8:	1891      	adds	r1, r2, r2
 80043fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80043fc:	415b      	adcs	r3, r3
 80043fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004400:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004404:	4641      	mov	r1, r8
 8004406:	eb12 0a01 	adds.w	sl, r2, r1
 800440a:	4649      	mov	r1, r9
 800440c:	eb43 0b01 	adc.w	fp, r3, r1
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800441c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004420:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004424:	4692      	mov	sl, r2
 8004426:	469b      	mov	fp, r3
 8004428:	4643      	mov	r3, r8
 800442a:	eb1a 0303 	adds.w	r3, sl, r3
 800442e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004432:	464b      	mov	r3, r9
 8004434:	eb4b 0303 	adc.w	r3, fp, r3
 8004438:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004448:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800444c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004450:	460b      	mov	r3, r1
 8004452:	18db      	adds	r3, r3, r3
 8004454:	643b      	str	r3, [r7, #64]	@ 0x40
 8004456:	4613      	mov	r3, r2
 8004458:	eb42 0303 	adc.w	r3, r2, r3
 800445c:	647b      	str	r3, [r7, #68]	@ 0x44
 800445e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004462:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004466:	f7fb ff13 	bl	8000290 <__aeabi_uldivmod>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4611      	mov	r1, r2
 8004470:	4b3b      	ldr	r3, [pc, #236]	@ (8004560 <UART_SetConfig+0x2d4>)
 8004472:	fba3 2301 	umull	r2, r3, r3, r1
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	2264      	movs	r2, #100	@ 0x64
 800447a:	fb02 f303 	mul.w	r3, r2, r3
 800447e:	1acb      	subs	r3, r1, r3
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004486:	4b36      	ldr	r3, [pc, #216]	@ (8004560 <UART_SetConfig+0x2d4>)
 8004488:	fba3 2302 	umull	r2, r3, r3, r2
 800448c:	095b      	lsrs	r3, r3, #5
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004494:	441c      	add	r4, r3
 8004496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800449a:	2200      	movs	r2, #0
 800449c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044a8:	4642      	mov	r2, r8
 80044aa:	464b      	mov	r3, r9
 80044ac:	1891      	adds	r1, r2, r2
 80044ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044b0:	415b      	adcs	r3, r3
 80044b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044b8:	4641      	mov	r1, r8
 80044ba:	1851      	adds	r1, r2, r1
 80044bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80044be:	4649      	mov	r1, r9
 80044c0:	414b      	adcs	r3, r1
 80044c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044d0:	4659      	mov	r1, fp
 80044d2:	00cb      	lsls	r3, r1, #3
 80044d4:	4651      	mov	r1, sl
 80044d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044da:	4651      	mov	r1, sl
 80044dc:	00ca      	lsls	r2, r1, #3
 80044de:	4610      	mov	r0, r2
 80044e0:	4619      	mov	r1, r3
 80044e2:	4603      	mov	r3, r0
 80044e4:	4642      	mov	r2, r8
 80044e6:	189b      	adds	r3, r3, r2
 80044e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044ec:	464b      	mov	r3, r9
 80044ee:	460a      	mov	r2, r1
 80044f0:	eb42 0303 	adc.w	r3, r2, r3
 80044f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004504:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004508:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800450c:	460b      	mov	r3, r1
 800450e:	18db      	adds	r3, r3, r3
 8004510:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004512:	4613      	mov	r3, r2
 8004514:	eb42 0303 	adc.w	r3, r2, r3
 8004518:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800451a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800451e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004522:	f7fb feb5 	bl	8000290 <__aeabi_uldivmod>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	4b0d      	ldr	r3, [pc, #52]	@ (8004560 <UART_SetConfig+0x2d4>)
 800452c:	fba3 1302 	umull	r1, r3, r3, r2
 8004530:	095b      	lsrs	r3, r3, #5
 8004532:	2164      	movs	r1, #100	@ 0x64
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	3332      	adds	r3, #50	@ 0x32
 800453e:	4a08      	ldr	r2, [pc, #32]	@ (8004560 <UART_SetConfig+0x2d4>)
 8004540:	fba2 2303 	umull	r2, r3, r2, r3
 8004544:	095b      	lsrs	r3, r3, #5
 8004546:	f003 0207 	and.w	r2, r3, #7
 800454a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4422      	add	r2, r4
 8004552:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004554:	e106      	b.n	8004764 <UART_SetConfig+0x4d8>
 8004556:	bf00      	nop
 8004558:	40011000 	.word	0x40011000
 800455c:	40011400 	.word	0x40011400
 8004560:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004568:	2200      	movs	r2, #0
 800456a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800456e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004572:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004576:	4642      	mov	r2, r8
 8004578:	464b      	mov	r3, r9
 800457a:	1891      	adds	r1, r2, r2
 800457c:	6239      	str	r1, [r7, #32]
 800457e:	415b      	adcs	r3, r3
 8004580:	627b      	str	r3, [r7, #36]	@ 0x24
 8004582:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004586:	4641      	mov	r1, r8
 8004588:	1854      	adds	r4, r2, r1
 800458a:	4649      	mov	r1, r9
 800458c:	eb43 0501 	adc.w	r5, r3, r1
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	00eb      	lsls	r3, r5, #3
 800459a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800459e:	00e2      	lsls	r2, r4, #3
 80045a0:	4614      	mov	r4, r2
 80045a2:	461d      	mov	r5, r3
 80045a4:	4643      	mov	r3, r8
 80045a6:	18e3      	adds	r3, r4, r3
 80045a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045ac:	464b      	mov	r3, r9
 80045ae:	eb45 0303 	adc.w	r3, r5, r3
 80045b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045d2:	4629      	mov	r1, r5
 80045d4:	008b      	lsls	r3, r1, #2
 80045d6:	4621      	mov	r1, r4
 80045d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045dc:	4621      	mov	r1, r4
 80045de:	008a      	lsls	r2, r1, #2
 80045e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80045e4:	f7fb fe54 	bl	8000290 <__aeabi_uldivmod>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4b60      	ldr	r3, [pc, #384]	@ (8004770 <UART_SetConfig+0x4e4>)
 80045ee:	fba3 2302 	umull	r2, r3, r3, r2
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	011c      	lsls	r4, r3, #4
 80045f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004600:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004604:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004608:	4642      	mov	r2, r8
 800460a:	464b      	mov	r3, r9
 800460c:	1891      	adds	r1, r2, r2
 800460e:	61b9      	str	r1, [r7, #24]
 8004610:	415b      	adcs	r3, r3
 8004612:	61fb      	str	r3, [r7, #28]
 8004614:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004618:	4641      	mov	r1, r8
 800461a:	1851      	adds	r1, r2, r1
 800461c:	6139      	str	r1, [r7, #16]
 800461e:	4649      	mov	r1, r9
 8004620:	414b      	adcs	r3, r1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004630:	4659      	mov	r1, fp
 8004632:	00cb      	lsls	r3, r1, #3
 8004634:	4651      	mov	r1, sl
 8004636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800463a:	4651      	mov	r1, sl
 800463c:	00ca      	lsls	r2, r1, #3
 800463e:	4610      	mov	r0, r2
 8004640:	4619      	mov	r1, r3
 8004642:	4603      	mov	r3, r0
 8004644:	4642      	mov	r2, r8
 8004646:	189b      	adds	r3, r3, r2
 8004648:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800464c:	464b      	mov	r3, r9
 800464e:	460a      	mov	r2, r1
 8004650:	eb42 0303 	adc.w	r3, r2, r3
 8004654:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004662:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004670:	4649      	mov	r1, r9
 8004672:	008b      	lsls	r3, r1, #2
 8004674:	4641      	mov	r1, r8
 8004676:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800467a:	4641      	mov	r1, r8
 800467c:	008a      	lsls	r2, r1, #2
 800467e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004682:	f7fb fe05 	bl	8000290 <__aeabi_uldivmod>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4611      	mov	r1, r2
 800468c:	4b38      	ldr	r3, [pc, #224]	@ (8004770 <UART_SetConfig+0x4e4>)
 800468e:	fba3 2301 	umull	r2, r3, r3, r1
 8004692:	095b      	lsrs	r3, r3, #5
 8004694:	2264      	movs	r2, #100	@ 0x64
 8004696:	fb02 f303 	mul.w	r3, r2, r3
 800469a:	1acb      	subs	r3, r1, r3
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	3332      	adds	r3, #50	@ 0x32
 80046a0:	4a33      	ldr	r2, [pc, #204]	@ (8004770 <UART_SetConfig+0x4e4>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	095b      	lsrs	r3, r3, #5
 80046a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046ac:	441c      	add	r4, r3
 80046ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046b2:	2200      	movs	r2, #0
 80046b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80046b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80046b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046bc:	4642      	mov	r2, r8
 80046be:	464b      	mov	r3, r9
 80046c0:	1891      	adds	r1, r2, r2
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	415b      	adcs	r3, r3
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046cc:	4641      	mov	r1, r8
 80046ce:	1851      	adds	r1, r2, r1
 80046d0:	6039      	str	r1, [r7, #0]
 80046d2:	4649      	mov	r1, r9
 80046d4:	414b      	adcs	r3, r1
 80046d6:	607b      	str	r3, [r7, #4]
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046e4:	4659      	mov	r1, fp
 80046e6:	00cb      	lsls	r3, r1, #3
 80046e8:	4651      	mov	r1, sl
 80046ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ee:	4651      	mov	r1, sl
 80046f0:	00ca      	lsls	r2, r1, #3
 80046f2:	4610      	mov	r0, r2
 80046f4:	4619      	mov	r1, r3
 80046f6:	4603      	mov	r3, r0
 80046f8:	4642      	mov	r2, r8
 80046fa:	189b      	adds	r3, r3, r2
 80046fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046fe:	464b      	mov	r3, r9
 8004700:	460a      	mov	r2, r1
 8004702:	eb42 0303 	adc.w	r3, r2, r3
 8004706:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	663b      	str	r3, [r7, #96]	@ 0x60
 8004712:	667a      	str	r2, [r7, #100]	@ 0x64
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004720:	4649      	mov	r1, r9
 8004722:	008b      	lsls	r3, r1, #2
 8004724:	4641      	mov	r1, r8
 8004726:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800472a:	4641      	mov	r1, r8
 800472c:	008a      	lsls	r2, r1, #2
 800472e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004732:	f7fb fdad 	bl	8000290 <__aeabi_uldivmod>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4b0d      	ldr	r3, [pc, #52]	@ (8004770 <UART_SetConfig+0x4e4>)
 800473c:	fba3 1302 	umull	r1, r3, r3, r2
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	2164      	movs	r1, #100	@ 0x64
 8004744:	fb01 f303 	mul.w	r3, r1, r3
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	3332      	adds	r3, #50	@ 0x32
 800474e:	4a08      	ldr	r2, [pc, #32]	@ (8004770 <UART_SetConfig+0x4e4>)
 8004750:	fba2 2303 	umull	r2, r3, r2, r3
 8004754:	095b      	lsrs	r3, r3, #5
 8004756:	f003 020f 	and.w	r2, r3, #15
 800475a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4422      	add	r2, r4
 8004762:	609a      	str	r2, [r3, #8]
}
 8004764:	bf00      	nop
 8004766:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800476a:	46bd      	mov	sp, r7
 800476c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004770:	51eb851f 	.word	0x51eb851f

08004774 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004774:	b084      	sub	sp, #16
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	f107 001c 	add.w	r0, r7, #28
 8004782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004786:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800478a:	2b01      	cmp	r3, #1
 800478c:	d123      	bne.n	80047d6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004792:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80047a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d105      	bne.n	80047ca <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f001 fae8 	bl	8005da0 <USB_CoreReset>
 80047d0:	4603      	mov	r3, r0
 80047d2:	73fb      	strb	r3, [r7, #15]
 80047d4:	e01b      	b.n	800480e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f001 fadc 	bl	8005da0 <USB_CoreReset>
 80047e8:	4603      	mov	r3, r0
 80047ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d106      	bne.n	8004802 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8004800:	e005      	b.n	800480e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004806:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800480e:	7fbb      	ldrb	r3, [r7, #30]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d10b      	bne.n	800482c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f043 0206 	orr.w	r2, r3, #6
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f043 0220 	orr.w	r2, r3, #32
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800482c:	7bfb      	ldrb	r3, [r7, #15]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004838:	b004      	add	sp, #16
 800483a:	4770      	bx	lr

0800483c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	4613      	mov	r3, r2
 8004848:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800484a:	79fb      	ldrb	r3, [r7, #7]
 800484c:	2b02      	cmp	r3, #2
 800484e:	d165      	bne.n	800491c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4a41      	ldr	r2, [pc, #260]	@ (8004958 <USB_SetTurnaroundTime+0x11c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d906      	bls.n	8004866 <USB_SetTurnaroundTime+0x2a>
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4a40      	ldr	r2, [pc, #256]	@ (800495c <USB_SetTurnaroundTime+0x120>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d202      	bcs.n	8004866 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004860:	230f      	movs	r3, #15
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	e062      	b.n	800492c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	4a3c      	ldr	r2, [pc, #240]	@ (800495c <USB_SetTurnaroundTime+0x120>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d306      	bcc.n	800487c <USB_SetTurnaroundTime+0x40>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4a3b      	ldr	r2, [pc, #236]	@ (8004960 <USB_SetTurnaroundTime+0x124>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d202      	bcs.n	800487c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004876:	230e      	movs	r3, #14
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	e057      	b.n	800492c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	4a38      	ldr	r2, [pc, #224]	@ (8004960 <USB_SetTurnaroundTime+0x124>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d306      	bcc.n	8004892 <USB_SetTurnaroundTime+0x56>
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4a37      	ldr	r2, [pc, #220]	@ (8004964 <USB_SetTurnaroundTime+0x128>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d202      	bcs.n	8004892 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800488c:	230d      	movs	r3, #13
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	e04c      	b.n	800492c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	4a33      	ldr	r2, [pc, #204]	@ (8004964 <USB_SetTurnaroundTime+0x128>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d306      	bcc.n	80048a8 <USB_SetTurnaroundTime+0x6c>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4a32      	ldr	r2, [pc, #200]	@ (8004968 <USB_SetTurnaroundTime+0x12c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d802      	bhi.n	80048a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80048a2:	230c      	movs	r3, #12
 80048a4:	617b      	str	r3, [r7, #20]
 80048a6:	e041      	b.n	800492c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004968 <USB_SetTurnaroundTime+0x12c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d906      	bls.n	80048be <USB_SetTurnaroundTime+0x82>
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4a2e      	ldr	r2, [pc, #184]	@ (800496c <USB_SetTurnaroundTime+0x130>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d802      	bhi.n	80048be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80048b8:	230b      	movs	r3, #11
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	e036      	b.n	800492c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4a2a      	ldr	r2, [pc, #168]	@ (800496c <USB_SetTurnaroundTime+0x130>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d906      	bls.n	80048d4 <USB_SetTurnaroundTime+0x98>
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	4a29      	ldr	r2, [pc, #164]	@ (8004970 <USB_SetTurnaroundTime+0x134>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d802      	bhi.n	80048d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80048ce:	230a      	movs	r3, #10
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	e02b      	b.n	800492c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4a26      	ldr	r2, [pc, #152]	@ (8004970 <USB_SetTurnaroundTime+0x134>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d906      	bls.n	80048ea <USB_SetTurnaroundTime+0xae>
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4a25      	ldr	r2, [pc, #148]	@ (8004974 <USB_SetTurnaroundTime+0x138>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d202      	bcs.n	80048ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80048e4:	2309      	movs	r3, #9
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	e020      	b.n	800492c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	4a21      	ldr	r2, [pc, #132]	@ (8004974 <USB_SetTurnaroundTime+0x138>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d306      	bcc.n	8004900 <USB_SetTurnaroundTime+0xc4>
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4a20      	ldr	r2, [pc, #128]	@ (8004978 <USB_SetTurnaroundTime+0x13c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d802      	bhi.n	8004900 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80048fa:	2308      	movs	r3, #8
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	e015      	b.n	800492c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4a1d      	ldr	r2, [pc, #116]	@ (8004978 <USB_SetTurnaroundTime+0x13c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d906      	bls.n	8004916 <USB_SetTurnaroundTime+0xda>
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4a1c      	ldr	r2, [pc, #112]	@ (800497c <USB_SetTurnaroundTime+0x140>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d202      	bcs.n	8004916 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004910:	2307      	movs	r3, #7
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	e00a      	b.n	800492c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004916:	2306      	movs	r3, #6
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	e007      	b.n	800492c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800491c:	79fb      	ldrb	r3, [r7, #7]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d102      	bne.n	8004928 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004922:	2309      	movs	r3, #9
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	e001      	b.n	800492c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004928:	2309      	movs	r3, #9
 800492a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	029b      	lsls	r3, r3, #10
 8004940:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004944:	431a      	orrs	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	00d8acbf 	.word	0x00d8acbf
 800495c:	00e4e1c0 	.word	0x00e4e1c0
 8004960:	00f42400 	.word	0x00f42400
 8004964:	01067380 	.word	0x01067380
 8004968:	011a499f 	.word	0x011a499f
 800496c:	01312cff 	.word	0x01312cff
 8004970:	014ca43f 	.word	0x014ca43f
 8004974:	016e3600 	.word	0x016e3600
 8004978:	01a6ab1f 	.word	0x01a6ab1f
 800497c:	01e84800 	.word	0x01e84800

08004980 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f043 0201 	orr.w	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f023 0201 	bic.w	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d115      	bne.n	8004a12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80049f2:	200a      	movs	r0, #10
 80049f4:	f7fc f93a 	bl	8000c6c <HAL_Delay>
      ms += 10U;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	330a      	adds	r3, #10
 80049fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f001 f93f 	bl	8005c82 <USB_GetMode>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d01e      	beq.n	8004a48 <USB_SetCurrentMode+0x84>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2bc7      	cmp	r3, #199	@ 0xc7
 8004a0e:	d9f0      	bls.n	80049f2 <USB_SetCurrentMode+0x2e>
 8004a10:	e01a      	b.n	8004a48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a12:	78fb      	ldrb	r3, [r7, #3]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d115      	bne.n	8004a44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a24:	200a      	movs	r0, #10
 8004a26:	f7fc f921 	bl	8000c6c <HAL_Delay>
      ms += 10U;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	330a      	adds	r3, #10
 8004a2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f001 f926 	bl	8005c82 <USB_GetMode>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <USB_SetCurrentMode+0x84>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004a40:	d9f0      	bls.n	8004a24 <USB_SetCurrentMode+0x60>
 8004a42:	e001      	b.n	8004a48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e005      	b.n	8004a54 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2bc8      	cmp	r3, #200	@ 0xc8
 8004a4c:	d101      	bne.n	8004a52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b086      	sub	sp, #24
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004a6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a76:	2300      	movs	r3, #0
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	e009      	b.n	8004a90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	3340      	adds	r3, #64	@ 0x40
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	2200      	movs	r2, #0
 8004a88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	2b0e      	cmp	r3, #14
 8004a94:	d9f2      	bls.n	8004a7c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d11c      	bne.n	8004ad8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004aac:	f043 0302 	orr.w	r3, r3, #2
 8004ab0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ace:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ad6:	e00b      	b.n	8004af0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004adc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004af6:	461a      	mov	r2, r3
 8004af8:	2300      	movs	r3, #0
 8004afa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004afc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d10d      	bne.n	8004b20 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d104      	bne.n	8004b16 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f968 	bl	8004de4 <USB_SetDevSpeed>
 8004b14:	e008      	b.n	8004b28 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b16:	2101      	movs	r1, #1
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f963 	bl	8004de4 <USB_SetDevSpeed>
 8004b1e:	e003      	b.n	8004b28 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b20:	2103      	movs	r1, #3
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f95e 	bl	8004de4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b28:	2110      	movs	r1, #16
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f8fa 	bl	8004d24 <USB_FlushTxFifo>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f924 	bl	8004d88 <USB_FlushRxFifo>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b50:	461a      	mov	r2, r3
 8004b52:	2300      	movs	r3, #0
 8004b54:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	2300      	movs	r3, #0
 8004b60:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b68:	461a      	mov	r2, r3
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b6e:	2300      	movs	r3, #0
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	e043      	b.n	8004bfc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b8a:	d118      	bne.n	8004bbe <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10a      	bne.n	8004ba8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	e013      	b.n	8004bd0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	e008      	b.n	8004bd0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bca:	461a      	mov	r2, r3
 8004bcc:	2300      	movs	r3, #0
 8004bce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2300      	movs	r3, #0
 8004be0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004bf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c00:	461a      	mov	r2, r3
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d3b5      	bcc.n	8004b74 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c08:	2300      	movs	r3, #0
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	e043      	b.n	8004c96 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c24:	d118      	bne.n	8004c58 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c38:	461a      	mov	r2, r3
 8004c3a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	e013      	b.n	8004c6a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	e008      	b.n	8004c6a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c64:	461a      	mov	r2, r3
 8004c66:	2300      	movs	r3, #0
 8004c68:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c76:	461a      	mov	r2, r3
 8004c78:	2300      	movs	r3, #0
 8004c7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	3301      	adds	r3, #1
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d3b5      	bcc.n	8004c0e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cb4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004cc2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d105      	bne.n	8004cd8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	f043 0210 	orr.w	r2, r3, #16
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699a      	ldr	r2, [r3, #24]
 8004cdc:	4b10      	ldr	r3, [pc, #64]	@ (8004d20 <USB_DevInit+0x2c4>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ce4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	f043 0208 	orr.w	r2, r3, #8
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004cf8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d107      	bne.n	8004d10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d08:	f043 0304 	orr.w	r3, r3, #4
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d1c:	b004      	add	sp, #16
 8004d1e:	4770      	bx	lr
 8004d20:	803c3800 	.word	0x803c3800

08004d24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3301      	adds	r3, #1
 8004d36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d3e:	d901      	bls.n	8004d44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e01b      	b.n	8004d7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	daf2      	bge.n	8004d32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	019b      	lsls	r3, r3, #6
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d68:	d901      	bls.n	8004d6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e006      	b.n	8004d7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d0f0      	beq.n	8004d5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	3301      	adds	r3, #1
 8004d98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004da0:	d901      	bls.n	8004da6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e018      	b.n	8004dd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	daf2      	bge.n	8004d94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2210      	movs	r2, #16
 8004db6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004dc4:	d901      	bls.n	8004dca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e006      	b.n	8004dd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0310 	and.w	r3, r3, #16
 8004dd2:	2b10      	cmp	r3, #16
 8004dd4:	d0f0      	beq.n	8004db8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	68f9      	ldr	r1, [r7, #12]
 8004e00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e04:	4313      	orrs	r3, r2
 8004e06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b087      	sub	sp, #28
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 0306 	and.w	r3, r3, #6
 8004e2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d102      	bne.n	8004e3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004e36:	2300      	movs	r3, #0
 8004e38:	75fb      	strb	r3, [r7, #23]
 8004e3a:	e00a      	b.n	8004e52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d002      	beq.n	8004e48 <USB_GetDevSpeed+0x32>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b06      	cmp	r3, #6
 8004e46:	d102      	bne.n	8004e4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004e48:	2302      	movs	r3, #2
 8004e4a:	75fb      	strb	r3, [r7, #23]
 8004e4c:	e001      	b.n	8004e52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004e4e:	230f      	movs	r3, #15
 8004e50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	371c      	adds	r7, #28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d13a      	bne.n	8004ef2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	68f9      	ldr	r1, [r7, #12]
 8004e96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d155      	bne.n	8004f60 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	791b      	ldrb	r3, [r3, #4]
 8004ece:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ed0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	059b      	lsls	r3, r3, #22
 8004ed6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	0151      	lsls	r1, r2, #5
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	440a      	add	r2, r1
 8004ee2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ee6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	e036      	b.n	8004f60 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef8:	69da      	ldr	r2, [r3, #28]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	2101      	movs	r1, #1
 8004f04:	fa01 f303 	lsl.w	r3, r1, r3
 8004f08:	041b      	lsls	r3, r3, #16
 8004f0a:	68f9      	ldr	r1, [r7, #12]
 8004f0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f10:	4313      	orrs	r3, r2
 8004f12:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d11a      	bne.n	8004f60 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	791b      	ldrb	r3, [r3, #4]
 8004f44:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f46:	430b      	orrs	r3, r1
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	0151      	lsls	r1, r2, #5
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	440a      	add	r2, r1
 8004f52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f5e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	785b      	ldrb	r3, [r3, #1]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d161      	bne.n	8005050 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fa2:	d11f      	bne.n	8004fe4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	0151      	lsls	r1, r2, #5
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	440a      	add	r2, r1
 8004fba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fbe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004fc2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	0151      	lsls	r1, r2, #5
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	440a      	add	r2, r1
 8004fda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fe2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	68f9      	ldr	r1, [r7, #12]
 8005000:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005004:	4013      	ands	r3, r2
 8005006:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	2101      	movs	r1, #1
 800501a:	fa01 f303 	lsl.w	r3, r1, r3
 800501e:	b29b      	uxth	r3, r3
 8005020:	43db      	mvns	r3, r3
 8005022:	68f9      	ldr	r1, [r7, #12]
 8005024:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005028:	4013      	ands	r3, r2
 800502a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	0159      	lsls	r1, r3, #5
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	440b      	add	r3, r1
 8005042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005046:	4619      	mov	r1, r3
 8005048:	4b35      	ldr	r3, [pc, #212]	@ (8005120 <USB_DeactivateEndpoint+0x1b0>)
 800504a:	4013      	ands	r3, r2
 800504c:	600b      	str	r3, [r1, #0]
 800504e:	e060      	b.n	8005112 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005062:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005066:	d11f      	bne.n	80050a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	0151      	lsls	r1, r2, #5
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	440a      	add	r2, r1
 800507e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005082:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005086:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	0151      	lsls	r1, r2, #5
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	440a      	add	r2, r1
 800509e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	2101      	movs	r1, #1
 80050ba:	fa01 f303 	lsl.w	r3, r1, r3
 80050be:	041b      	lsls	r3, r3, #16
 80050c0:	43db      	mvns	r3, r3
 80050c2:	68f9      	ldr	r1, [r7, #12]
 80050c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050c8:	4013      	ands	r3, r2
 80050ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050d2:	69da      	ldr	r2, [r3, #28]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	f003 030f 	and.w	r3, r3, #15
 80050dc:	2101      	movs	r1, #1
 80050de:	fa01 f303 	lsl.w	r3, r1, r3
 80050e2:	041b      	lsls	r3, r3, #16
 80050e4:	43db      	mvns	r3, r3
 80050e6:	68f9      	ldr	r1, [r7, #12]
 80050e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050ec:	4013      	ands	r3, r2
 80050ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	0159      	lsls	r1, r3, #5
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	440b      	add	r3, r1
 8005106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800510a:	4619      	mov	r1, r3
 800510c:	4b05      	ldr	r3, [pc, #20]	@ (8005124 <USB_DeactivateEndpoint+0x1b4>)
 800510e:	4013      	ands	r3, r2
 8005110:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	ec337800 	.word	0xec337800
 8005124:	eff37800 	.word	0xeff37800

08005128 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08a      	sub	sp, #40	@ 0x28
 800512c:	af02      	add	r7, sp, #8
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	4613      	mov	r3, r2
 8005134:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	785b      	ldrb	r3, [r3, #1]
 8005144:	2b01      	cmp	r3, #1
 8005146:	f040 817f 	bne.w	8005448 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d132      	bne.n	80051b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	0151      	lsls	r1, r2, #5
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	440a      	add	r2, r1
 8005168:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800516c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005170:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005174:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	0151      	lsls	r1, r2, #5
 8005188:	69fa      	ldr	r2, [r7, #28]
 800518a:	440a      	add	r2, r1
 800518c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005190:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005194:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	0151      	lsls	r1, r2, #5
 80051a8:	69fa      	ldr	r2, [r7, #28]
 80051aa:	440a      	add	r2, r1
 80051ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051b0:	0cdb      	lsrs	r3, r3, #19
 80051b2:	04db      	lsls	r3, r3, #19
 80051b4:	6113      	str	r3, [r2, #16]
 80051b6:	e097      	b.n	80052e8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	0151      	lsls	r1, r2, #5
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	440a      	add	r2, r1
 80051ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051d2:	0cdb      	lsrs	r3, r3, #19
 80051d4:	04db      	lsls	r3, r3, #19
 80051d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	0151      	lsls	r1, r2, #5
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	440a      	add	r2, r1
 80051ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051f2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80051f6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80051fa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d11a      	bne.n	8005238 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	429a      	cmp	r2, r3
 800520c:	d903      	bls.n	8005216 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	0151      	lsls	r1, r2, #5
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	440a      	add	r2, r1
 800522c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005230:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005234:	6113      	str	r3, [r2, #16]
 8005236:	e044      	b.n	80052c2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	4413      	add	r3, r2
 8005242:	1e5a      	subs	r2, r3, #1
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	8afb      	ldrh	r3, [r7, #22]
 800525e:	04d9      	lsls	r1, r3, #19
 8005260:	4ba4      	ldr	r3, [pc, #656]	@ (80054f4 <USB_EPStartXfer+0x3cc>)
 8005262:	400b      	ands	r3, r1
 8005264:	69b9      	ldr	r1, [r7, #24]
 8005266:	0148      	lsls	r0, r1, #5
 8005268:	69f9      	ldr	r1, [r7, #28]
 800526a:	4401      	add	r1, r0
 800526c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005270:	4313      	orrs	r3, r2
 8005272:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	791b      	ldrb	r3, [r3, #4]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d122      	bne.n	80052c2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	440a      	add	r2, r1
 8005292:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005296:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800529a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	8afb      	ldrh	r3, [r7, #22]
 80052ac:	075b      	lsls	r3, r3, #29
 80052ae:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80052b2:	69b9      	ldr	r1, [r7, #24]
 80052b4:	0148      	lsls	r0, r1, #5
 80052b6:	69f9      	ldr	r1, [r7, #28]
 80052b8:	4401      	add	r1, r0
 80052ba:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80052be:	4313      	orrs	r3, r2
 80052c0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052d8:	69b9      	ldr	r1, [r7, #24]
 80052da:	0148      	lsls	r0, r1, #5
 80052dc:	69f9      	ldr	r1, [r7, #28]
 80052de:	4401      	add	r1, r0
 80052e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80052e4:	4313      	orrs	r3, r2
 80052e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052e8:	79fb      	ldrb	r3, [r7, #7]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d14b      	bne.n	8005386 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005302:	461a      	mov	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	791b      	ldrb	r3, [r3, #4]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d128      	bne.n	8005364 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800531e:	2b00      	cmp	r3, #0
 8005320:	d110      	bne.n	8005344 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	440a      	add	r2, r1
 8005338:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800533c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	e00f      	b.n	8005364 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	0151      	lsls	r1, r2, #5
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	440a      	add	r2, r1
 800535a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800535e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005362:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	440a      	add	r2, r1
 800537a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800537e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	e166      	b.n	8005654 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	4413      	add	r3, r2
 800538e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	0151      	lsls	r1, r2, #5
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	440a      	add	r2, r1
 800539c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80053a4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	791b      	ldrb	r3, [r3, #4]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d015      	beq.n	80053da <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 814e 	beq.w	8005654 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	f003 030f 	and.w	r3, r3, #15
 80053c8:	2101      	movs	r1, #1
 80053ca:	fa01 f303 	lsl.w	r3, r1, r3
 80053ce:	69f9      	ldr	r1, [r7, #28]
 80053d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053d4:	4313      	orrs	r3, r2
 80053d6:	634b      	str	r3, [r1, #52]	@ 0x34
 80053d8:	e13c      	b.n	8005654 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d110      	bne.n	800540c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	0151      	lsls	r1, r2, #5
 80053fc:	69fa      	ldr	r2, [r7, #28]
 80053fe:	440a      	add	r2, r1
 8005400:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005404:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	e00f      	b.n	800542c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	0151      	lsls	r1, r2, #5
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	440a      	add	r2, r1
 8005422:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800542a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	68d9      	ldr	r1, [r3, #12]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	781a      	ldrb	r2, [r3, #0]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	b298      	uxth	r0, r3
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	4603      	mov	r3, r0
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 f9b9 	bl	80057b8 <USB_WritePacket>
 8005446:	e105      	b.n	8005654 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	0151      	lsls	r1, r2, #5
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	440a      	add	r2, r1
 800545e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005462:	0cdb      	lsrs	r3, r3, #19
 8005464:	04db      	lsls	r3, r3, #19
 8005466:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	0151      	lsls	r1, r2, #5
 800547a:	69fa      	ldr	r2, [r7, #28]
 800547c:	440a      	add	r2, r1
 800547e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005482:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005486:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800548a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d132      	bne.n	80054f8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054c0:	69b9      	ldr	r1, [r7, #24]
 80054c2:	0148      	lsls	r0, r1, #5
 80054c4:	69f9      	ldr	r1, [r7, #28]
 80054c6:	4401      	add	r1, r0
 80054c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80054cc:	4313      	orrs	r3, r2
 80054ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054ee:	6113      	str	r3, [r2, #16]
 80054f0:	e062      	b.n	80055b8 <USB_EPStartXfer+0x490>
 80054f2:	bf00      	nop
 80054f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d123      	bne.n	8005548 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800550c:	691a      	ldr	r2, [r3, #16]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005516:	69b9      	ldr	r1, [r7, #24]
 8005518:	0148      	lsls	r0, r1, #5
 800551a:	69f9      	ldr	r1, [r7, #28]
 800551c:	4401      	add	r1, r0
 800551e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005522:	4313      	orrs	r3, r2
 8005524:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	0151      	lsls	r1, r2, #5
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	440a      	add	r2, r1
 800553c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005540:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005544:	6113      	str	r3, [r2, #16]
 8005546:	e037      	b.n	80055b8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	4413      	add	r3, r2
 8005552:	1e5a      	subs	r2, r3, #1
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	fbb2 f3f3 	udiv	r3, r2, r3
 800555c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	8afa      	ldrh	r2, [r7, #22]
 8005564:	fb03 f202 	mul.w	r2, r3, r2
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005578:	691a      	ldr	r2, [r3, #16]
 800557a:	8afb      	ldrh	r3, [r7, #22]
 800557c:	04d9      	lsls	r1, r3, #19
 800557e:	4b38      	ldr	r3, [pc, #224]	@ (8005660 <USB_EPStartXfer+0x538>)
 8005580:	400b      	ands	r3, r1
 8005582:	69b9      	ldr	r1, [r7, #24]
 8005584:	0148      	lsls	r0, r1, #5
 8005586:	69f9      	ldr	r1, [r7, #28]
 8005588:	4401      	add	r1, r0
 800558a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800558e:	4313      	orrs	r3, r2
 8005590:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055a8:	69b9      	ldr	r1, [r7, #24]
 80055aa:	0148      	lsls	r0, r1, #5
 80055ac:	69f9      	ldr	r1, [r7, #28]
 80055ae:	4401      	add	r1, r0
 80055b0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80055b4:	4313      	orrs	r3, r2
 80055b6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80055b8:	79fb      	ldrb	r3, [r7, #7]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d10d      	bne.n	80055da <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	68d9      	ldr	r1, [r3, #12]
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d6:	460a      	mov	r2, r1
 80055d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	791b      	ldrb	r3, [r3, #4]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d128      	bne.n	8005634 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d110      	bne.n	8005614 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	0151      	lsls	r1, r2, #5
 8005604:	69fa      	ldr	r2, [r7, #28]
 8005606:	440a      	add	r2, r1
 8005608:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800560c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e00f      	b.n	8005634 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	440a      	add	r2, r1
 800562a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800562e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005632:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	0151      	lsls	r1, r2, #5
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	440a      	add	r2, r1
 800564a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800564e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005652:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3720      	adds	r7, #32
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	1ff80000 	.word	0x1ff80000

08005664 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	785b      	ldrb	r3, [r3, #1]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d14a      	bne.n	8005718 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005696:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800569a:	f040 8086 	bne.w	80057aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	7812      	ldrb	r2, [r2, #0]
 80056b2:	0151      	lsls	r1, r2, #5
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	440a      	add	r2, r1
 80056b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80056c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	7812      	ldrb	r2, [r2, #0]
 80056d6:	0151      	lsls	r1, r2, #5
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	440a      	add	r2, r1
 80056dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3301      	adds	r3, #1
 80056ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d902      	bls.n	80056fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	75fb      	strb	r3, [r7, #23]
          break;
 80056fa:	e056      	b.n	80057aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005710:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005714:	d0e7      	beq.n	80056e6 <USB_EPStopXfer+0x82>
 8005716:	e048      	b.n	80057aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800572c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005730:	d13b      	bne.n	80057aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	7812      	ldrb	r2, [r2, #0]
 8005746:	0151      	lsls	r1, r2, #5
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	440a      	add	r2, r1
 800574c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005750:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005754:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	7812      	ldrb	r2, [r2, #0]
 800576a:	0151      	lsls	r1, r2, #5
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	440a      	add	r2, r1
 8005770:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005774:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005778:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3301      	adds	r3, #1
 800577e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005786:	4293      	cmp	r3, r2
 8005788:	d902      	bls.n	8005790 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	75fb      	strb	r3, [r7, #23]
          break;
 800578e:	e00c      	b.n	80057aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057a8:	d0e7      	beq.n	800577a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80057aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b089      	sub	sp, #36	@ 0x24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	4611      	mov	r1, r2
 80057c4:	461a      	mov	r2, r3
 80057c6:	460b      	mov	r3, r1
 80057c8:	71fb      	strb	r3, [r7, #7]
 80057ca:	4613      	mov	r3, r2
 80057cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80057d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d123      	bne.n	8005826 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057de:	88bb      	ldrh	r3, [r7, #4]
 80057e0:	3303      	adds	r3, #3
 80057e2:	089b      	lsrs	r3, r3, #2
 80057e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057e6:	2300      	movs	r3, #0
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	e018      	b.n	800581e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	031a      	lsls	r2, r3, #12
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057f8:	461a      	mov	r2, r3
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	3301      	adds	r3, #1
 8005804:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	3301      	adds	r3, #1
 800580a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	3301      	adds	r3, #1
 8005810:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	3301      	adds	r3, #1
 8005816:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	3301      	adds	r3, #1
 800581c:	61bb      	str	r3, [r7, #24]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	429a      	cmp	r2, r3
 8005824:	d3e2      	bcc.n	80057ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3724      	adds	r7, #36	@ 0x24
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005834:	b480      	push	{r7}
 8005836:	b08b      	sub	sp, #44	@ 0x2c
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	4613      	mov	r3, r2
 8005840:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800584a:	88fb      	ldrh	r3, [r7, #6]
 800584c:	089b      	lsrs	r3, r3, #2
 800584e:	b29b      	uxth	r3, r3
 8005850:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005852:	88fb      	ldrh	r3, [r7, #6]
 8005854:	f003 0303 	and.w	r3, r3, #3
 8005858:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800585a:	2300      	movs	r3, #0
 800585c:	623b      	str	r3, [r7, #32]
 800585e:	e014      	b.n	800588a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586a:	601a      	str	r2, [r3, #0]
    pDest++;
 800586c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586e:	3301      	adds	r3, #1
 8005870:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005874:	3301      	adds	r3, #1
 8005876:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587a:	3301      	adds	r3, #1
 800587c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800587e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005880:	3301      	adds	r3, #1
 8005882:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	3301      	adds	r3, #1
 8005888:	623b      	str	r3, [r7, #32]
 800588a:	6a3a      	ldr	r2, [r7, #32]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	429a      	cmp	r2, r3
 8005890:	d3e6      	bcc.n	8005860 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005892:	8bfb      	ldrh	r3, [r7, #30]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d01e      	beq.n	80058d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058a2:	461a      	mov	r2, r3
 80058a4:	f107 0310 	add.w	r3, r7, #16
 80058a8:	6812      	ldr	r2, [r2, #0]
 80058aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	fa22 f303 	lsr.w	r3, r2, r3
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	701a      	strb	r2, [r3, #0]
      i++;
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	3301      	adds	r3, #1
 80058c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80058c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c6:	3301      	adds	r3, #1
 80058c8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80058ca:	8bfb      	ldrh	r3, [r7, #30]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80058d0:	8bfb      	ldrh	r3, [r7, #30]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1ea      	bne.n	80058ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80058d8:	4618      	mov	r0, r3
 80058da:	372c      	adds	r7, #44	@ 0x2c
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	785b      	ldrb	r3, [r3, #1]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d12c      	bne.n	800595a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	db12      	blt.n	8005938 <USB_EPSetStall+0x54>
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00f      	beq.n	8005938 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	0151      	lsls	r1, r2, #5
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	440a      	add	r2, r1
 800592e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005932:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005936:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	440a      	add	r2, r1
 800594e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005952:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005956:	6013      	str	r3, [r2, #0]
 8005958:	e02b      	b.n	80059b2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	db12      	blt.n	8005992 <USB_EPSetStall+0xae>
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00f      	beq.n	8005992 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	0151      	lsls	r1, r2, #5
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	440a      	add	r2, r1
 8005988:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800598c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005990:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	0151      	lsls	r1, r2, #5
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	440a      	add	r2, r1
 80059a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80059b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d128      	bne.n	8005a2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	791b      	ldrb	r3, [r3, #4]
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	d003      	beq.n	8005a0c <USB_EPClearStall+0x4c>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	791b      	ldrb	r3, [r3, #4]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d138      	bne.n	8005a7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	0151      	lsls	r1, r2, #5
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	440a      	add	r2, r1
 8005a22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	e027      	b.n	8005a7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	791b      	ldrb	r3, [r3, #4]
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d003      	beq.n	8005a5e <USB_EPClearStall+0x9e>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	791b      	ldrb	r3, [r3, #4]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d10f      	bne.n	8005a7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	0151      	lsls	r1, r2, #5
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	440a      	add	r2, r1
 8005a74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005aaa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005aae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	78fb      	ldrb	r3, [r7, #3]
 8005aba:	011b      	lsls	r3, r3, #4
 8005abc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005ac0:	68f9      	ldr	r1, [r7, #12]
 8005ac2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005af2:	f023 0303 	bic.w	r3, r3, #3
 8005af6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b06:	f023 0302 	bic.w	r3, r3, #2
 8005b0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b085      	sub	sp, #20
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b34:	f023 0303 	bic.w	r3, r3, #3
 8005b38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b48:	f043 0302 	orr.w	r3, r3, #2
 8005b4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4013      	ands	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b74:	68fb      	ldr	r3, [r7, #12]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	0c1b      	lsrs	r3, r3, #16
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b085      	sub	sp, #20
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	b29b      	uxth	r3, r3
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b085      	sub	sp, #20
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005bfa:	78fb      	ldrb	r3, [r7, #3]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	4013      	ands	r3, r2
 8005c16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c18:	68bb      	ldr	r3, [r7, #8]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b087      	sub	sp, #28
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c4a:	78fb      	ldrb	r3, [r7, #3]
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	fa22 f303 	lsr.w	r3, r2, r3
 8005c56:	01db      	lsls	r3, r3, #7
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4013      	ands	r3, r2
 8005c72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c74:	68bb      	ldr	r3, [r7, #8]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b085      	sub	sp, #20
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cb8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005cbc:	f023 0307 	bic.w	r3, r3, #7
 8005cc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	460b      	mov	r3, r1
 8005cee:	607a      	str	r2, [r7, #4]
 8005cf0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	333c      	adds	r3, #60	@ 0x3c
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	4a26      	ldr	r2, [pc, #152]	@ (8005d9c <USB_EP0_OutStart+0xb8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d90a      	bls.n	8005d1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d18:	d101      	bne.n	8005d1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e037      	b.n	8005d8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d24:	461a      	mov	r2, r3
 8005d26:	2300      	movs	r3, #0
 8005d28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d4c:	f043 0318 	orr.w	r3, r3, #24
 8005d50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d60:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005d64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d66:	7afb      	ldrb	r3, [r7, #11]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d10f      	bne.n	8005d8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d72:	461a      	mov	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d86:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005d8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	371c      	adds	r7, #28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	4f54300a 	.word	0x4f54300a

08005da0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	3301      	adds	r3, #1
 8005db0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005db8:	d901      	bls.n	8005dbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e01b      	b.n	8005df6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	daf2      	bge.n	8005dac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f043 0201 	orr.w	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005de2:	d901      	bls.n	8005de8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e006      	b.n	8005df6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d0f0      	beq.n	8005dd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
	...

08005e04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e10:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005e14:	f002 fc2e 	bl	8008674 <USBD_static_malloc>
 8005e18:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d109      	bne.n	8005e34 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	32b0      	adds	r2, #176	@ 0xb0
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005e30:	2302      	movs	r3, #2
 8005e32:	e0d4      	b.n	8005fde <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005e34:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005e38:	2100      	movs	r1, #0
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f002 fc92 	bl	8008764 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	32b0      	adds	r2, #176	@ 0xb0
 8005e4a:	68f9      	ldr	r1, [r7, #12]
 8005e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	32b0      	adds	r2, #176	@ 0xb0
 8005e5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	7c1b      	ldrb	r3, [r3, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d138      	bne.n	8005ede <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e6c:	4b5e      	ldr	r3, [pc, #376]	@ (8005fe8 <USBD_CDC_Init+0x1e4>)
 8005e6e:	7819      	ldrb	r1, [r3, #0]
 8005e70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e74:	2202      	movs	r2, #2
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f002 fad9 	bl	800842e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e7c:	4b5a      	ldr	r3, [pc, #360]	@ (8005fe8 <USBD_CDC_Init+0x1e4>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	f003 020f 	and.w	r2, r3, #15
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	440b      	add	r3, r1
 8005e90:	3324      	adds	r3, #36	@ 0x24
 8005e92:	2201      	movs	r2, #1
 8005e94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e96:	4b55      	ldr	r3, [pc, #340]	@ (8005fec <USBD_CDC_Init+0x1e8>)
 8005e98:	7819      	ldrb	r1, [r3, #0]
 8005e9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f002 fac4 	bl	800842e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005ea6:	4b51      	ldr	r3, [pc, #324]	@ (8005fec <USBD_CDC_Init+0x1e8>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	f003 020f 	and.w	r2, r3, #15
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005ec2:	4b4b      	ldr	r3, [pc, #300]	@ (8005ff0 <USBD_CDC_Init+0x1ec>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	f003 020f 	and.w	r2, r3, #15
 8005eca:	6879      	ldr	r1, [r7, #4]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	440b      	add	r3, r1
 8005ed6:	3326      	adds	r3, #38	@ 0x26
 8005ed8:	2210      	movs	r2, #16
 8005eda:	801a      	strh	r2, [r3, #0]
 8005edc:	e035      	b.n	8005f4a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005ede:	4b42      	ldr	r3, [pc, #264]	@ (8005fe8 <USBD_CDC_Init+0x1e4>)
 8005ee0:	7819      	ldrb	r1, [r3, #0]
 8005ee2:	2340      	movs	r3, #64	@ 0x40
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f002 faa1 	bl	800842e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005eec:	4b3e      	ldr	r3, [pc, #248]	@ (8005fe8 <USBD_CDC_Init+0x1e4>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	f003 020f 	and.w	r2, r3, #15
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	3324      	adds	r3, #36	@ 0x24
 8005f02:	2201      	movs	r2, #1
 8005f04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f06:	4b39      	ldr	r3, [pc, #228]	@ (8005fec <USBD_CDC_Init+0x1e8>)
 8005f08:	7819      	ldrb	r1, [r3, #0]
 8005f0a:	2340      	movs	r3, #64	@ 0x40
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f002 fa8d 	bl	800842e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f14:	4b35      	ldr	r3, [pc, #212]	@ (8005fec <USBD_CDC_Init+0x1e8>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	f003 020f 	and.w	r2, r3, #15
 8005f1c:	6879      	ldr	r1, [r7, #4]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	440b      	add	r3, r1
 8005f28:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005f30:	4b2f      	ldr	r3, [pc, #188]	@ (8005ff0 <USBD_CDC_Init+0x1ec>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	f003 020f 	and.w	r2, r3, #15
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	440b      	add	r3, r1
 8005f44:	3326      	adds	r3, #38	@ 0x26
 8005f46:	2210      	movs	r2, #16
 8005f48:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f4a:	4b29      	ldr	r3, [pc, #164]	@ (8005ff0 <USBD_CDC_Init+0x1ec>)
 8005f4c:	7819      	ldrb	r1, [r3, #0]
 8005f4e:	2308      	movs	r3, #8
 8005f50:	2203      	movs	r2, #3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f002 fa6b 	bl	800842e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005f58:	4b25      	ldr	r3, [pc, #148]	@ (8005ff0 <USBD_CDC_Init+0x1ec>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	f003 020f 	and.w	r2, r3, #15
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	440b      	add	r3, r1
 8005f6c:	3324      	adds	r3, #36	@ 0x24
 8005f6e:	2201      	movs	r2, #1
 8005f70:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	33b0      	adds	r3, #176	@ 0xb0
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e018      	b.n	8005fde <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	7c1b      	ldrb	r3, [r3, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10a      	bne.n	8005fca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8005fec <USBD_CDC_Init+0x1e8>)
 8005fb6:	7819      	ldrb	r1, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005fbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f002 fb22 	bl	800860c <USBD_LL_PrepareReceive>
 8005fc8:	e008      	b.n	8005fdc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fca:	4b08      	ldr	r3, [pc, #32]	@ (8005fec <USBD_CDC_Init+0x1e8>)
 8005fcc:	7819      	ldrb	r1, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005fd4:	2340      	movs	r3, #64	@ 0x40
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f002 fb18 	bl	800860c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000097 	.word	0x20000097
 8005fec:	20000098 	.word	0x20000098
 8005ff0:	20000099 	.word	0x20000099

08005ff4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006000:	4b3a      	ldr	r3, [pc, #232]	@ (80060ec <USBD_CDC_DeInit+0xf8>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f002 fa37 	bl	800847a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800600c:	4b37      	ldr	r3, [pc, #220]	@ (80060ec <USBD_CDC_DeInit+0xf8>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	f003 020f 	and.w	r2, r3, #15
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	4613      	mov	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	440b      	add	r3, r1
 8006020:	3324      	adds	r3, #36	@ 0x24
 8006022:	2200      	movs	r2, #0
 8006024:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006026:	4b32      	ldr	r3, [pc, #200]	@ (80060f0 <USBD_CDC_DeInit+0xfc>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f002 fa24 	bl	800847a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006032:	4b2f      	ldr	r3, [pc, #188]	@ (80060f0 <USBD_CDC_DeInit+0xfc>)
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	f003 020f 	and.w	r2, r3, #15
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	4613      	mov	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	440b      	add	r3, r1
 8006046:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800604a:	2200      	movs	r2, #0
 800604c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800604e:	4b29      	ldr	r3, [pc, #164]	@ (80060f4 <USBD_CDC_DeInit+0x100>)
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f002 fa10 	bl	800847a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800605a:	4b26      	ldr	r3, [pc, #152]	@ (80060f4 <USBD_CDC_DeInit+0x100>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	f003 020f 	and.w	r2, r3, #15
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	440b      	add	r3, r1
 800606e:	3324      	adds	r3, #36	@ 0x24
 8006070:	2200      	movs	r2, #0
 8006072:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006074:	4b1f      	ldr	r3, [pc, #124]	@ (80060f4 <USBD_CDC_DeInit+0x100>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	f003 020f 	and.w	r2, r3, #15
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	4613      	mov	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	440b      	add	r3, r1
 8006088:	3326      	adds	r3, #38	@ 0x26
 800608a:	2200      	movs	r2, #0
 800608c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	32b0      	adds	r2, #176	@ 0xb0
 8006098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d01f      	beq.n	80060e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	33b0      	adds	r3, #176	@ 0xb0
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	32b0      	adds	r2, #176	@ 0xb0
 80060be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f002 fae4 	bl	8008690 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	32b0      	adds	r2, #176	@ 0xb0
 80060d2:	2100      	movs	r1, #0
 80060d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000097 	.word	0x20000097
 80060f0:	20000098 	.word	0x20000098
 80060f4:	20000099 	.word	0x20000099

080060f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	32b0      	adds	r2, #176	@ 0xb0
 800610c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006110:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006124:	2303      	movs	r3, #3
 8006126:	e0bf      	b.n	80062a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006130:	2b00      	cmp	r3, #0
 8006132:	d050      	beq.n	80061d6 <USBD_CDC_Setup+0xde>
 8006134:	2b20      	cmp	r3, #32
 8006136:	f040 80af 	bne.w	8006298 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	88db      	ldrh	r3, [r3, #6]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d03a      	beq.n	80061b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	b25b      	sxtb	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	da1b      	bge.n	8006184 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	33b0      	adds	r3, #176	@ 0xb0
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006162:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	88d2      	ldrh	r2, [r2, #6]
 8006168:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	88db      	ldrh	r3, [r3, #6]
 800616e:	2b07      	cmp	r3, #7
 8006170:	bf28      	it	cs
 8006172:	2307      	movcs	r3, #7
 8006174:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	89fa      	ldrh	r2, [r7, #14]
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f001 fd53 	bl	8007c28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006182:	e090      	b.n	80062a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	785a      	ldrb	r2, [r3, #1]
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	88db      	ldrh	r3, [r3, #6]
 8006192:	2b3f      	cmp	r3, #63	@ 0x3f
 8006194:	d803      	bhi.n	800619e <USBD_CDC_Setup+0xa6>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	88db      	ldrh	r3, [r3, #6]
 800619a:	b2da      	uxtb	r2, r3
 800619c:	e000      	b.n	80061a0 <USBD_CDC_Setup+0xa8>
 800619e:	2240      	movs	r2, #64	@ 0x40
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80061a6:	6939      	ldr	r1, [r7, #16]
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80061ae:	461a      	mov	r2, r3
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f001 fd65 	bl	8007c80 <USBD_CtlPrepareRx>
      break;
 80061b6:	e076      	b.n	80062a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	33b0      	adds	r3, #176	@ 0xb0
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	7850      	ldrb	r0, [r2, #1]
 80061ce:	2200      	movs	r2, #0
 80061d0:	6839      	ldr	r1, [r7, #0]
 80061d2:	4798      	blx	r3
      break;
 80061d4:	e067      	b.n	80062a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	785b      	ldrb	r3, [r3, #1]
 80061da:	2b0b      	cmp	r3, #11
 80061dc:	d851      	bhi.n	8006282 <USBD_CDC_Setup+0x18a>
 80061de:	a201      	add	r2, pc, #4	@ (adr r2, 80061e4 <USBD_CDC_Setup+0xec>)
 80061e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e4:	08006215 	.word	0x08006215
 80061e8:	08006291 	.word	0x08006291
 80061ec:	08006283 	.word	0x08006283
 80061f0:	08006283 	.word	0x08006283
 80061f4:	08006283 	.word	0x08006283
 80061f8:	08006283 	.word	0x08006283
 80061fc:	08006283 	.word	0x08006283
 8006200:	08006283 	.word	0x08006283
 8006204:	08006283 	.word	0x08006283
 8006208:	08006283 	.word	0x08006283
 800620c:	0800623f 	.word	0x0800623f
 8006210:	08006269 	.word	0x08006269
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b03      	cmp	r3, #3
 800621e:	d107      	bne.n	8006230 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006220:	f107 030a 	add.w	r3, r7, #10
 8006224:	2202      	movs	r2, #2
 8006226:	4619      	mov	r1, r3
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f001 fcfd 	bl	8007c28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800622e:	e032      	b.n	8006296 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f001 fc7b 	bl	8007b2e <USBD_CtlError>
            ret = USBD_FAIL;
 8006238:	2303      	movs	r3, #3
 800623a:	75fb      	strb	r3, [r7, #23]
          break;
 800623c:	e02b      	b.n	8006296 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b03      	cmp	r3, #3
 8006248:	d107      	bne.n	800625a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800624a:	f107 030d 	add.w	r3, r7, #13
 800624e:	2201      	movs	r2, #1
 8006250:	4619      	mov	r1, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f001 fce8 	bl	8007c28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006258:	e01d      	b.n	8006296 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f001 fc66 	bl	8007b2e <USBD_CtlError>
            ret = USBD_FAIL;
 8006262:	2303      	movs	r3, #3
 8006264:	75fb      	strb	r3, [r7, #23]
          break;
 8006266:	e016      	b.n	8006296 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b03      	cmp	r3, #3
 8006272:	d00f      	beq.n	8006294 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f001 fc59 	bl	8007b2e <USBD_CtlError>
            ret = USBD_FAIL;
 800627c:	2303      	movs	r3, #3
 800627e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006280:	e008      	b.n	8006294 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f001 fc52 	bl	8007b2e <USBD_CtlError>
          ret = USBD_FAIL;
 800628a:	2303      	movs	r3, #3
 800628c:	75fb      	strb	r3, [r7, #23]
          break;
 800628e:	e002      	b.n	8006296 <USBD_CDC_Setup+0x19e>
          break;
 8006290:	bf00      	nop
 8006292:	e008      	b.n	80062a6 <USBD_CDC_Setup+0x1ae>
          break;
 8006294:	bf00      	nop
      }
      break;
 8006296:	e006      	b.n	80062a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f001 fc47 	bl	8007b2e <USBD_CtlError>
      ret = USBD_FAIL;
 80062a0:	2303      	movs	r3, #3
 80062a2:	75fb      	strb	r3, [r7, #23]
      break;
 80062a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80062a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80062c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	32b0      	adds	r2, #176	@ 0xb0
 80062ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e065      	b.n	80063a6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	32b0      	adds	r2, #176	@ 0xb0
 80062e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80062ea:	78fb      	ldrb	r3, [r7, #3]
 80062ec:	f003 020f 	and.w	r2, r3, #15
 80062f0:	6879      	ldr	r1, [r7, #4]
 80062f2:	4613      	mov	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	440b      	add	r3, r1
 80062fc:	3318      	adds	r3, #24
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d02f      	beq.n	8006364 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	f003 020f 	and.w	r2, r3, #15
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	4613      	mov	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	440b      	add	r3, r1
 8006316:	3318      	adds	r3, #24
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	78fb      	ldrb	r3, [r7, #3]
 800631c:	f003 010f 	and.w	r1, r3, #15
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	460b      	mov	r3, r1
 8006324:	00db      	lsls	r3, r3, #3
 8006326:	440b      	add	r3, r1
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4403      	add	r3, r0
 800632c:	331c      	adds	r3, #28
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	fbb2 f1f3 	udiv	r1, r2, r3
 8006334:	fb01 f303 	mul.w	r3, r1, r3
 8006338:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800633a:	2b00      	cmp	r3, #0
 800633c:	d112      	bne.n	8006364 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800633e:	78fb      	ldrb	r3, [r7, #3]
 8006340:	f003 020f 	and.w	r2, r3, #15
 8006344:	6879      	ldr	r1, [r7, #4]
 8006346:	4613      	mov	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	440b      	add	r3, r1
 8006350:	3318      	adds	r3, #24
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006356:	78f9      	ldrb	r1, [r7, #3]
 8006358:	2300      	movs	r3, #0
 800635a:	2200      	movs	r2, #0
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f002 f934 	bl	80085ca <USBD_LL_Transmit>
 8006362:	e01f      	b.n	80063a4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2200      	movs	r2, #0
 8006368:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	33b0      	adds	r3, #176	@ 0xb0
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d010      	beq.n	80063a4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	33b0      	adds	r3, #176	@ 0xb0
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80063a0:	78fa      	ldrb	r2, [r7, #3]
 80063a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	460b      	mov	r3, r1
 80063b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	32b0      	adds	r2, #176	@ 0xb0
 80063c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	32b0      	adds	r2, #176	@ 0xb0
 80063d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80063dc:	2303      	movs	r3, #3
 80063de:	e01a      	b.n	8006416 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	4619      	mov	r1, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f002 f932 	bl	800864e <USBD_LL_GetRxDataSize>
 80063ea:	4602      	mov	r2, r0
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	33b0      	adds	r3, #176	@ 0xb0
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006410:	4611      	mov	r1, r2
 8006412:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	32b0      	adds	r2, #176	@ 0xb0
 8006430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006434:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800643c:	2303      	movs	r3, #3
 800643e:	e024      	b.n	800648a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	33b0      	adds	r3, #176	@ 0xb0
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d019      	beq.n	8006488 <USBD_CDC_EP0_RxReady+0x6a>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800645a:	2bff      	cmp	r3, #255	@ 0xff
 800645c:	d014      	beq.n	8006488 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	33b0      	adds	r3, #176	@ 0xb0
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006476:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800647e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	22ff      	movs	r2, #255	@ 0xff
 8006484:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800649c:	2182      	movs	r1, #130	@ 0x82
 800649e:	4818      	ldr	r0, [pc, #96]	@ (8006500 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064a0:	f000 fd0f 	bl	8006ec2 <USBD_GetEpDesc>
 80064a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064a6:	2101      	movs	r1, #1
 80064a8:	4815      	ldr	r0, [pc, #84]	@ (8006500 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064aa:	f000 fd0a 	bl	8006ec2 <USBD_GetEpDesc>
 80064ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064b0:	2181      	movs	r1, #129	@ 0x81
 80064b2:	4813      	ldr	r0, [pc, #76]	@ (8006500 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064b4:	f000 fd05 	bl	8006ec2 <USBD_GetEpDesc>
 80064b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2210      	movs	r2, #16
 80064c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d006      	beq.n	80064da <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064d4:	711a      	strb	r2, [r3, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d006      	beq.n	80064ee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064e8:	711a      	strb	r2, [r3, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2243      	movs	r2, #67	@ 0x43
 80064f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80064f4:	4b02      	ldr	r3, [pc, #8]	@ (8006500 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20000054 	.word	0x20000054

08006504 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800650c:	2182      	movs	r1, #130	@ 0x82
 800650e:	4818      	ldr	r0, [pc, #96]	@ (8006570 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006510:	f000 fcd7 	bl	8006ec2 <USBD_GetEpDesc>
 8006514:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006516:	2101      	movs	r1, #1
 8006518:	4815      	ldr	r0, [pc, #84]	@ (8006570 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800651a:	f000 fcd2 	bl	8006ec2 <USBD_GetEpDesc>
 800651e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006520:	2181      	movs	r1, #129	@ 0x81
 8006522:	4813      	ldr	r0, [pc, #76]	@ (8006570 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006524:	f000 fccd 	bl	8006ec2 <USBD_GetEpDesc>
 8006528:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2210      	movs	r2, #16
 8006534:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d006      	beq.n	800654a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	2200      	movs	r2, #0
 8006540:	711a      	strb	r2, [r3, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f042 0202 	orr.w	r2, r2, #2
 8006548:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d006      	beq.n	800655e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	711a      	strb	r2, [r3, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f042 0202 	orr.w	r2, r2, #2
 800655c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2243      	movs	r2, #67	@ 0x43
 8006562:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006564:	4b02      	ldr	r3, [pc, #8]	@ (8006570 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006566:	4618      	mov	r0, r3
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20000054 	.word	0x20000054

08006574 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800657c:	2182      	movs	r1, #130	@ 0x82
 800657e:	4818      	ldr	r0, [pc, #96]	@ (80065e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006580:	f000 fc9f 	bl	8006ec2 <USBD_GetEpDesc>
 8006584:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006586:	2101      	movs	r1, #1
 8006588:	4815      	ldr	r0, [pc, #84]	@ (80065e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800658a:	f000 fc9a 	bl	8006ec2 <USBD_GetEpDesc>
 800658e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006590:	2181      	movs	r1, #129	@ 0x81
 8006592:	4813      	ldr	r0, [pc, #76]	@ (80065e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006594:	f000 fc95 	bl	8006ec2 <USBD_GetEpDesc>
 8006598:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	2210      	movs	r2, #16
 80065a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d006      	beq.n	80065ba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065b4:	711a      	strb	r2, [r3, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d006      	beq.n	80065ce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065c8:	711a      	strb	r2, [r3, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2243      	movs	r2, #67	@ 0x43
 80065d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80065d4:	4b02      	ldr	r3, [pc, #8]	@ (80065e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000054 	.word	0x20000054

080065e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	220a      	movs	r2, #10
 80065f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80065f2:	4b03      	ldr	r3, [pc, #12]	@ (8006600 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	20000010 	.word	0x20000010

08006604 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006614:	2303      	movs	r3, #3
 8006616:	e009      	b.n	800662c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	33b0      	adds	r3, #176	@ 0xb0
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	32b0      	adds	r2, #176	@ 0xb0
 800664e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006652:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800665a:	2303      	movs	r3, #3
 800665c:	e008      	b.n	8006670 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	371c      	adds	r7, #28
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	32b0      	adds	r2, #176	@ 0xb0
 8006690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006694:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800669c:	2303      	movs	r3, #3
 800669e:	e004      	b.n	80066aa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
	...

080066b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	32b0      	adds	r2, #176	@ 0xb0
 80066ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	32b0      	adds	r2, #176	@ 0xb0
 80066da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e018      	b.n	8006718 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	7c1b      	ldrb	r3, [r3, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10a      	bne.n	8006704 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006720 <USBD_CDC_ReceivePacket+0x68>)
 80066f0:	7819      	ldrb	r1, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80066f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 ff85 	bl	800860c <USBD_LL_PrepareReceive>
 8006702:	e008      	b.n	8006716 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006704:	4b06      	ldr	r3, [pc, #24]	@ (8006720 <USBD_CDC_ReceivePacket+0x68>)
 8006706:	7819      	ldrb	r1, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800670e:	2340      	movs	r3, #64	@ 0x40
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f001 ff7b 	bl	800860c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	20000098 	.word	0x20000098

08006724 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	4613      	mov	r3, r2
 8006730:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006738:	2303      	movs	r3, #3
 800673a:	e01f      	b.n	800677c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	79fa      	ldrb	r2, [r7, #7]
 800676e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f001 fdf5 	bl	8008360 <USBD_LL_Init>
 8006776:	4603      	mov	r3, r0
 8006778:	75fb      	strb	r3, [r7, #23]

  return ret;
 800677a:	7dfb      	ldrb	r3, [r7, #23]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3718      	adds	r7, #24
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006798:	2303      	movs	r3, #3
 800679a:	e025      	b.n	80067e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	32ae      	adds	r2, #174	@ 0xae
 80067ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00f      	beq.n	80067d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	32ae      	adds	r2, #174	@ 0xae
 80067c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c8:	f107 020e 	add.w	r2, r7, #14
 80067cc:	4610      	mov	r0, r2
 80067ce:	4798      	blx	r3
 80067d0:	4602      	mov	r2, r0
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 fdfd 	bl	80083f8 <USBD_LL_Start>
 80067fe:	4603      	mov	r3, r0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006810:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006812:	4618      	mov	r0, r3
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	460b      	mov	r3, r1
 8006828:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800682a:	2300      	movs	r3, #0
 800682c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006834:	2b00      	cmp	r3, #0
 8006836:	d009      	beq.n	800684c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	78fa      	ldrb	r2, [r7, #3]
 8006842:	4611      	mov	r1, r2
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	4798      	blx	r3
 8006848:	4603      	mov	r3, r0
 800684a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b084      	sub	sp, #16
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	460b      	mov	r3, r1
 8006860:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	78fa      	ldrb	r2, [r7, #3]
 8006870:	4611      	mov	r1, r2
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	4798      	blx	r3
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800687c:	2303      	movs	r3, #3
 800687e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006880:	7bfb      	ldrb	r3, [r7, #15]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800689a:	6839      	ldr	r1, [r7, #0]
 800689c:	4618      	mov	r0, r3
 800689e:	f001 f90c 	bl	8007aba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80068b0:	461a      	mov	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d01a      	beq.n	80068fc <USBD_LL_SetupStage+0x72>
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d822      	bhi.n	8006910 <USBD_LL_SetupStage+0x86>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <USBD_LL_SetupStage+0x4a>
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d00a      	beq.n	80068e8 <USBD_LL_SetupStage+0x5e>
 80068d2:	e01d      	b.n	8006910 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fb63 	bl	8006fa8 <USBD_StdDevReq>
 80068e2:	4603      	mov	r3, r0
 80068e4:	73fb      	strb	r3, [r7, #15]
      break;
 80068e6:	e020      	b.n	800692a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fbcb 	bl	800708c <USBD_StdItfReq>
 80068f6:	4603      	mov	r3, r0
 80068f8:	73fb      	strb	r3, [r7, #15]
      break;
 80068fa:	e016      	b.n	800692a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fc2d 	bl	8007164 <USBD_StdEPReq>
 800690a:	4603      	mov	r3, r0
 800690c:	73fb      	strb	r3, [r7, #15]
      break;
 800690e:	e00c      	b.n	800692a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006916:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800691a:	b2db      	uxtb	r3, r3
 800691c:	4619      	mov	r1, r3
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f001 fdca 	bl	80084b8 <USBD_LL_StallEP>
 8006924:	4603      	mov	r3, r0
 8006926:	73fb      	strb	r3, [r7, #15]
      break;
 8006928:	bf00      	nop
  }

  return ret;
 800692a:	7bfb      	ldrb	r3, [r7, #15]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	460b      	mov	r3, r1
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006946:	7afb      	ldrb	r3, [r7, #11]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d16e      	bne.n	8006a2a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006952:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800695a:	2b03      	cmp	r3, #3
 800695c:	f040 8098 	bne.w	8006a90 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	429a      	cmp	r2, r3
 800696a:	d913      	bls.n	8006994 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	1ad2      	subs	r2, r2, r3
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	68da      	ldr	r2, [r3, #12]
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	4293      	cmp	r3, r2
 8006984:	bf28      	it	cs
 8006986:	4613      	movcs	r3, r2
 8006988:	461a      	mov	r2, r3
 800698a:	6879      	ldr	r1, [r7, #4]
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f001 f994 	bl	8007cba <USBD_CtlContinueRx>
 8006992:	e07d      	b.n	8006a90 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800699a:	f003 031f 	and.w	r3, r3, #31
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d014      	beq.n	80069cc <USBD_LL_DataOutStage+0x98>
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d81d      	bhi.n	80069e2 <USBD_LL_DataOutStage+0xae>
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d002      	beq.n	80069b0 <USBD_LL_DataOutStage+0x7c>
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d003      	beq.n	80069b6 <USBD_LL_DataOutStage+0x82>
 80069ae:	e018      	b.n	80069e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	75bb      	strb	r3, [r7, #22]
            break;
 80069b4:	e018      	b.n	80069e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	4619      	mov	r1, r3
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 fa64 	bl	8006e8e <USBD_CoreFindIF>
 80069c6:	4603      	mov	r3, r0
 80069c8:	75bb      	strb	r3, [r7, #22]
            break;
 80069ca:	e00d      	b.n	80069e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	4619      	mov	r1, r3
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 fa66 	bl	8006ea8 <USBD_CoreFindEP>
 80069dc:	4603      	mov	r3, r0
 80069de:	75bb      	strb	r3, [r7, #22]
            break;
 80069e0:	e002      	b.n	80069e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	75bb      	strb	r3, [r7, #22]
            break;
 80069e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80069e8:	7dbb      	ldrb	r3, [r7, #22]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d119      	bne.n	8006a22 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d113      	bne.n	8006a22 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80069fa:	7dba      	ldrb	r2, [r7, #22]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	32ae      	adds	r2, #174	@ 0xae
 8006a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00b      	beq.n	8006a22 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006a0a:	7dba      	ldrb	r2, [r7, #22]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a12:	7dba      	ldrb	r2, [r7, #22]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	32ae      	adds	r2, #174	@ 0xae
 8006a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f001 f95a 	bl	8007cdc <USBD_CtlSendStatus>
 8006a28:	e032      	b.n	8006a90 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a2a:	7afb      	ldrb	r3, [r7, #11]
 8006a2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	4619      	mov	r1, r3
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 fa37 	bl	8006ea8 <USBD_CoreFindEP>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a3e:	7dbb      	ldrb	r3, [r7, #22]
 8006a40:	2bff      	cmp	r3, #255	@ 0xff
 8006a42:	d025      	beq.n	8006a90 <USBD_LL_DataOutStage+0x15c>
 8006a44:	7dbb      	ldrb	r3, [r7, #22]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d122      	bne.n	8006a90 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d117      	bne.n	8006a86 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a56:	7dba      	ldrb	r2, [r7, #22]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	32ae      	adds	r2, #174	@ 0xae
 8006a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00f      	beq.n	8006a86 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006a66:	7dba      	ldrb	r2, [r7, #22]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006a6e:	7dba      	ldrb	r2, [r7, #22]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	32ae      	adds	r2, #174	@ 0xae
 8006a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	7afa      	ldrb	r2, [r7, #11]
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	4798      	blx	r3
 8006a82:	4603      	mov	r3, r0
 8006a84:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006a86:	7dfb      	ldrb	r3, [r7, #23]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006a8c:	7dfb      	ldrb	r3, [r7, #23]
 8006a8e:	e000      	b.n	8006a92 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b086      	sub	sp, #24
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	607a      	str	r2, [r7, #4]
 8006aa6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006aa8:	7afb      	ldrb	r3, [r7, #11]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d16f      	bne.n	8006b8e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3314      	adds	r3, #20
 8006ab2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d15a      	bne.n	8006b74 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	689a      	ldr	r2, [r3, #8]
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d914      	bls.n	8006af4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	1ad2      	subs	r2, r2, r3
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	461a      	mov	r2, r3
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f001 f8bc 	bl	8007c5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2200      	movs	r2, #0
 8006aea:	2100      	movs	r1, #0
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f001 fd8d 	bl	800860c <USBD_LL_PrepareReceive>
 8006af2:	e03f      	b.n	8006b74 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d11c      	bne.n	8006b3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d316      	bcc.n	8006b3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d20f      	bcs.n	8006b3a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f001 f89d 	bl	8007c5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	2200      	movs	r2, #0
 8006b30:	2100      	movs	r1, #0
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f001 fd6a 	bl	800860c <USBD_LL_PrepareReceive>
 8006b38:	e01c      	b.n	8006b74 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d10f      	bne.n	8006b66 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d009      	beq.n	8006b66 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b66:	2180      	movs	r1, #128	@ 0x80
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f001 fca5 	bl	80084b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f001 f8c7 	bl	8007d02 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d03a      	beq.n	8006bf4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f7ff fe42 	bl	8006808 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006b8c:	e032      	b.n	8006bf4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006b8e:	7afb      	ldrb	r3, [r7, #11]
 8006b90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	4619      	mov	r1, r3
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 f985 	bl	8006ea8 <USBD_CoreFindEP>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
 8006ba4:	2bff      	cmp	r3, #255	@ 0xff
 8006ba6:	d025      	beq.n	8006bf4 <USBD_LL_DataInStage+0x15a>
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d122      	bne.n	8006bf4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b03      	cmp	r3, #3
 8006bb8:	d11c      	bne.n	8006bf4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006bba:	7dfa      	ldrb	r2, [r7, #23]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	32ae      	adds	r2, #174	@ 0xae
 8006bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d014      	beq.n	8006bf4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006bca:	7dfa      	ldrb	r2, [r7, #23]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006bd2:	7dfa      	ldrb	r2, [r7, #23]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	32ae      	adds	r2, #174	@ 0xae
 8006bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	7afa      	ldrb	r2, [r7, #11]
 8006be0:	4611      	mov	r1, r2
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	4798      	blx	r3
 8006be6:	4603      	mov	r3, r0
 8006be8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006bea:	7dbb      	ldrb	r3, [r7, #22]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006bf0:	7dbb      	ldrb	r3, [r7, #22]
 8006bf2:	e000      	b.n	8006bf6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d014      	beq.n	8006c64 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00e      	beq.n	8006c64 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	6852      	ldr	r2, [r2, #4]
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	4611      	mov	r1, r2
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	4798      	blx	r3
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006c60:	2303      	movs	r3, #3
 8006c62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c64:	2340      	movs	r3, #64	@ 0x40
 8006c66:	2200      	movs	r2, #0
 8006c68:	2100      	movs	r1, #0
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f001 fbdf 	bl	800842e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2240      	movs	r2, #64	@ 0x40
 8006c7c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c80:	2340      	movs	r3, #64	@ 0x40
 8006c82:	2200      	movs	r2, #0
 8006c84:	2180      	movs	r1, #128	@ 0x80
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f001 fbd1 	bl	800842e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2240      	movs	r2, #64	@ 0x40
 8006c96:	621a      	str	r2, [r3, #32]

  return ret;
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	78fa      	ldrb	r2, [r7, #3]
 8006cb2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d006      	beq.n	8006ce4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2204      	movs	r2, #4
 8006ce8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b04      	cmp	r3, #4
 8006d0c:	d106      	bne.n	8006d1c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b082      	sub	sp, #8
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	d110      	bne.n	8006d60 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00b      	beq.n	8006d60 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d005      	beq.n	8006d60 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b082      	sub	sp, #8
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	460b      	mov	r3, r1
 8006d74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	32ae      	adds	r2, #174	@ 0xae
 8006d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e01c      	b.n	8006dc6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d115      	bne.n	8006dc4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	32ae      	adds	r2, #174	@ 0xae
 8006da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00b      	beq.n	8006dc4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	32ae      	adds	r2, #174	@ 0xae
 8006db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	78fa      	ldrb	r2, [r7, #3]
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	32ae      	adds	r2, #174	@ 0xae
 8006de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e01c      	b.n	8006e2a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b03      	cmp	r3, #3
 8006dfa:	d115      	bne.n	8006e28 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	32ae      	adds	r2, #174	@ 0xae
 8006e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00b      	beq.n	8006e28 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	32ae      	adds	r2, #174	@ 0xae
 8006e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e20:	78fa      	ldrb	r2, [r7, #3]
 8006e22:	4611      	mov	r1, r2
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b083      	sub	sp, #12
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00e      	beq.n	8006e84 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	6852      	ldr	r2, [r2, #4]
 8006e72:	b2d2      	uxtb	r2, r2
 8006e74:	4611      	mov	r1, r2
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	4798      	blx	r3
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d001      	beq.n	8006e84 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006e80:	2303      	movs	r3, #3
 8006e82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	460b      	mov	r3, r1
 8006e98:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e9a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006eb4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b086      	sub	sp, #24
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	885b      	ldrh	r3, [r3, #2]
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	7812      	ldrb	r2, [r2, #0]
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d91f      	bls.n	8006f28 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006eee:	e013      	b.n	8006f18 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006ef0:	f107 030a 	add.w	r3, r7, #10
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6978      	ldr	r0, [r7, #20]
 8006ef8:	f000 f81b 	bl	8006f32 <USBD_GetNextDesc>
 8006efc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	785b      	ldrb	r3, [r3, #1]
 8006f02:	2b05      	cmp	r3, #5
 8006f04:	d108      	bne.n	8006f18 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	789b      	ldrb	r3, [r3, #2]
 8006f0e:	78fa      	ldrb	r2, [r7, #3]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d008      	beq.n	8006f26 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006f14:	2300      	movs	r3, #0
 8006f16:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	885b      	ldrh	r3, [r3, #2]
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	897b      	ldrh	r3, [r7, #10]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d8e5      	bhi.n	8006ef0 <USBD_GetEpDesc+0x2e>
 8006f24:	e000      	b.n	8006f28 <USBD_GetEpDesc+0x66>
          break;
 8006f26:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006f28:	693b      	ldr	r3, [r7, #16]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b085      	sub	sp, #20
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	7812      	ldrb	r2, [r2, #0]
 8006f48:	4413      	add	r3, r2
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	461a      	mov	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4413      	add	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b087      	sub	sp, #28
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f88:	8a3b      	ldrh	r3, [r7, #16]
 8006f8a:	021b      	lsls	r3, r3, #8
 8006f8c:	b21a      	sxth	r2, r3
 8006f8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	b21b      	sxth	r3, r3
 8006f96:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f98:	89fb      	ldrh	r3, [r7, #14]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	371c      	adds	r7, #28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
	...

08006fa8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006fbe:	2b40      	cmp	r3, #64	@ 0x40
 8006fc0:	d005      	beq.n	8006fce <USBD_StdDevReq+0x26>
 8006fc2:	2b40      	cmp	r3, #64	@ 0x40
 8006fc4:	d857      	bhi.n	8007076 <USBD_StdDevReq+0xce>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00f      	beq.n	8006fea <USBD_StdDevReq+0x42>
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	d153      	bne.n	8007076 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	32ae      	adds	r2, #174	@ 0xae
 8006fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	4798      	blx	r3
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fe8:	e04a      	b.n	8007080 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	785b      	ldrb	r3, [r3, #1]
 8006fee:	2b09      	cmp	r3, #9
 8006ff0:	d83b      	bhi.n	800706a <USBD_StdDevReq+0xc2>
 8006ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff8 <USBD_StdDevReq+0x50>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	0800704d 	.word	0x0800704d
 8006ffc:	08007061 	.word	0x08007061
 8007000:	0800706b 	.word	0x0800706b
 8007004:	08007057 	.word	0x08007057
 8007008:	0800706b 	.word	0x0800706b
 800700c:	0800702b 	.word	0x0800702b
 8007010:	08007021 	.word	0x08007021
 8007014:	0800706b 	.word	0x0800706b
 8007018:	08007043 	.word	0x08007043
 800701c:	08007035 	.word	0x08007035
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fa3c 	bl	80074a0 <USBD_GetDescriptor>
          break;
 8007028:	e024      	b.n	8007074 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fba1 	bl	8007774 <USBD_SetAddress>
          break;
 8007032:	e01f      	b.n	8007074 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fbe0 	bl	80077fc <USBD_SetConfig>
 800703c:	4603      	mov	r3, r0
 800703e:	73fb      	strb	r3, [r7, #15]
          break;
 8007040:	e018      	b.n	8007074 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fc83 	bl	8007950 <USBD_GetConfig>
          break;
 800704a:	e013      	b.n	8007074 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fcb4 	bl	80079bc <USBD_GetStatus>
          break;
 8007054:	e00e      	b.n	8007074 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fce3 	bl	8007a24 <USBD_SetFeature>
          break;
 800705e:	e009      	b.n	8007074 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fd07 	bl	8007a76 <USBD_ClrFeature>
          break;
 8007068:	e004      	b.n	8007074 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fd5e 	bl	8007b2e <USBD_CtlError>
          break;
 8007072:	bf00      	nop
      }
      break;
 8007074:	e004      	b.n	8007080 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fd58 	bl	8007b2e <USBD_CtlError>
      break;
 800707e:	bf00      	nop
  }

  return ret;
 8007080:	7bfb      	ldrb	r3, [r7, #15]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop

0800708c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070a2:	2b40      	cmp	r3, #64	@ 0x40
 80070a4:	d005      	beq.n	80070b2 <USBD_StdItfReq+0x26>
 80070a6:	2b40      	cmp	r3, #64	@ 0x40
 80070a8:	d852      	bhi.n	8007150 <USBD_StdItfReq+0xc4>
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <USBD_StdItfReq+0x26>
 80070ae:	2b20      	cmp	r3, #32
 80070b0:	d14e      	bne.n	8007150 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d840      	bhi.n	8007142 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	889b      	ldrh	r3, [r3, #4]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d836      	bhi.n	8007138 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	889b      	ldrh	r3, [r3, #4]
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7ff fedb 	bl	8006e8e <USBD_CoreFindIF>
 80070d8:	4603      	mov	r3, r0
 80070da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070dc:	7bbb      	ldrb	r3, [r7, #14]
 80070de:	2bff      	cmp	r3, #255	@ 0xff
 80070e0:	d01d      	beq.n	800711e <USBD_StdItfReq+0x92>
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d11a      	bne.n	800711e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80070e8:	7bba      	ldrb	r2, [r7, #14]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	32ae      	adds	r2, #174	@ 0xae
 80070ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00f      	beq.n	8007118 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80070f8:	7bba      	ldrb	r2, [r7, #14]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007100:	7bba      	ldrb	r2, [r7, #14]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	32ae      	adds	r2, #174	@ 0xae
 8007106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	4798      	blx	r3
 8007112:	4603      	mov	r3, r0
 8007114:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007116:	e004      	b.n	8007122 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007118:	2303      	movs	r3, #3
 800711a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800711c:	e001      	b.n	8007122 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800711e:	2303      	movs	r3, #3
 8007120:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	88db      	ldrh	r3, [r3, #6]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d110      	bne.n	800714c <USBD_StdItfReq+0xc0>
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10d      	bne.n	800714c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fdd3 	bl	8007cdc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007136:	e009      	b.n	800714c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fcf7 	bl	8007b2e <USBD_CtlError>
          break;
 8007140:	e004      	b.n	800714c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fcf2 	bl	8007b2e <USBD_CtlError>
          break;
 800714a:	e000      	b.n	800714e <USBD_StdItfReq+0xc2>
          break;
 800714c:	bf00      	nop
      }
      break;
 800714e:	e004      	b.n	800715a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fceb 	bl	8007b2e <USBD_CtlError>
      break;
 8007158:	bf00      	nop
  }

  return ret;
 800715a:	7bfb      	ldrb	r3, [r7, #15]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	889b      	ldrh	r3, [r3, #4]
 8007176:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007180:	2b40      	cmp	r3, #64	@ 0x40
 8007182:	d007      	beq.n	8007194 <USBD_StdEPReq+0x30>
 8007184:	2b40      	cmp	r3, #64	@ 0x40
 8007186:	f200 817f 	bhi.w	8007488 <USBD_StdEPReq+0x324>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d02a      	beq.n	80071e4 <USBD_StdEPReq+0x80>
 800718e:	2b20      	cmp	r3, #32
 8007190:	f040 817a 	bne.w	8007488 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007194:	7bbb      	ldrb	r3, [r7, #14]
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff fe85 	bl	8006ea8 <USBD_CoreFindEP>
 800719e:	4603      	mov	r3, r0
 80071a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071a2:	7b7b      	ldrb	r3, [r7, #13]
 80071a4:	2bff      	cmp	r3, #255	@ 0xff
 80071a6:	f000 8174 	beq.w	8007492 <USBD_StdEPReq+0x32e>
 80071aa:	7b7b      	ldrb	r3, [r7, #13]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f040 8170 	bne.w	8007492 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80071b2:	7b7a      	ldrb	r2, [r7, #13]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80071ba:	7b7a      	ldrb	r2, [r7, #13]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	32ae      	adds	r2, #174	@ 0xae
 80071c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 8163 	beq.w	8007492 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80071cc:	7b7a      	ldrb	r2, [r7, #13]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	32ae      	adds	r2, #174	@ 0xae
 80071d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	4798      	blx	r3
 80071de:	4603      	mov	r3, r0
 80071e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071e2:	e156      	b.n	8007492 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	785b      	ldrb	r3, [r3, #1]
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	d008      	beq.n	80071fe <USBD_StdEPReq+0x9a>
 80071ec:	2b03      	cmp	r3, #3
 80071ee:	f300 8145 	bgt.w	800747c <USBD_StdEPReq+0x318>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 809b 	beq.w	800732e <USBD_StdEPReq+0x1ca>
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d03c      	beq.n	8007276 <USBD_StdEPReq+0x112>
 80071fc:	e13e      	b.n	800747c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b02      	cmp	r3, #2
 8007208:	d002      	beq.n	8007210 <USBD_StdEPReq+0xac>
 800720a:	2b03      	cmp	r3, #3
 800720c:	d016      	beq.n	800723c <USBD_StdEPReq+0xd8>
 800720e:	e02c      	b.n	800726a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00d      	beq.n	8007232 <USBD_StdEPReq+0xce>
 8007216:	7bbb      	ldrb	r3, [r7, #14]
 8007218:	2b80      	cmp	r3, #128	@ 0x80
 800721a:	d00a      	beq.n	8007232 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800721c:	7bbb      	ldrb	r3, [r7, #14]
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f001 f949 	bl	80084b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007226:	2180      	movs	r1, #128	@ 0x80
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 f945 	bl	80084b8 <USBD_LL_StallEP>
 800722e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007230:	e020      	b.n	8007274 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fc7a 	bl	8007b2e <USBD_CtlError>
              break;
 800723a:	e01b      	b.n	8007274 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	885b      	ldrh	r3, [r3, #2]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10e      	bne.n	8007262 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007244:	7bbb      	ldrb	r3, [r7, #14]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00b      	beq.n	8007262 <USBD_StdEPReq+0xfe>
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	2b80      	cmp	r3, #128	@ 0x80
 800724e:	d008      	beq.n	8007262 <USBD_StdEPReq+0xfe>
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	88db      	ldrh	r3, [r3, #6]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d104      	bne.n	8007262 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007258:	7bbb      	ldrb	r3, [r7, #14]
 800725a:	4619      	mov	r1, r3
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 f92b 	bl	80084b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fd3a 	bl	8007cdc <USBD_CtlSendStatus>

              break;
 8007268:	e004      	b.n	8007274 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fc5e 	bl	8007b2e <USBD_CtlError>
              break;
 8007272:	bf00      	nop
          }
          break;
 8007274:	e107      	b.n	8007486 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b02      	cmp	r3, #2
 8007280:	d002      	beq.n	8007288 <USBD_StdEPReq+0x124>
 8007282:	2b03      	cmp	r3, #3
 8007284:	d016      	beq.n	80072b4 <USBD_StdEPReq+0x150>
 8007286:	e04b      	b.n	8007320 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007288:	7bbb      	ldrb	r3, [r7, #14]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00d      	beq.n	80072aa <USBD_StdEPReq+0x146>
 800728e:	7bbb      	ldrb	r3, [r7, #14]
 8007290:	2b80      	cmp	r3, #128	@ 0x80
 8007292:	d00a      	beq.n	80072aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007294:	7bbb      	ldrb	r3, [r7, #14]
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 f90d 	bl	80084b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800729e:	2180      	movs	r1, #128	@ 0x80
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f001 f909 	bl	80084b8 <USBD_LL_StallEP>
 80072a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072a8:	e040      	b.n	800732c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fc3e 	bl	8007b2e <USBD_CtlError>
              break;
 80072b2:	e03b      	b.n	800732c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	885b      	ldrh	r3, [r3, #2]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d136      	bne.n	800732a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072bc:	7bbb      	ldrb	r3, [r7, #14]
 80072be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d004      	beq.n	80072d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072c6:	7bbb      	ldrb	r3, [r7, #14]
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 f913 	bl	80084f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fd03 	bl	8007cdc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80072d6:	7bbb      	ldrb	r3, [r7, #14]
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7ff fde4 	bl	8006ea8 <USBD_CoreFindEP>
 80072e0:	4603      	mov	r3, r0
 80072e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072e4:	7b7b      	ldrb	r3, [r7, #13]
 80072e6:	2bff      	cmp	r3, #255	@ 0xff
 80072e8:	d01f      	beq.n	800732a <USBD_StdEPReq+0x1c6>
 80072ea:	7b7b      	ldrb	r3, [r7, #13]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d11c      	bne.n	800732a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80072f0:	7b7a      	ldrb	r2, [r7, #13]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80072f8:	7b7a      	ldrb	r2, [r7, #13]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	32ae      	adds	r2, #174	@ 0xae
 80072fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d010      	beq.n	800732a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007308:	7b7a      	ldrb	r2, [r7, #13]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	32ae      	adds	r2, #174	@ 0xae
 800730e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	4798      	blx	r3
 800731a:	4603      	mov	r3, r0
 800731c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800731e:	e004      	b.n	800732a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fc03 	bl	8007b2e <USBD_CtlError>
              break;
 8007328:	e000      	b.n	800732c <USBD_StdEPReq+0x1c8>
              break;
 800732a:	bf00      	nop
          }
          break;
 800732c:	e0ab      	b.n	8007486 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b02      	cmp	r3, #2
 8007338:	d002      	beq.n	8007340 <USBD_StdEPReq+0x1dc>
 800733a:	2b03      	cmp	r3, #3
 800733c:	d032      	beq.n	80073a4 <USBD_StdEPReq+0x240>
 800733e:	e097      	b.n	8007470 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d007      	beq.n	8007356 <USBD_StdEPReq+0x1f2>
 8007346:	7bbb      	ldrb	r3, [r7, #14]
 8007348:	2b80      	cmp	r3, #128	@ 0x80
 800734a:	d004      	beq.n	8007356 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fbed 	bl	8007b2e <USBD_CtlError>
                break;
 8007354:	e091      	b.n	800747a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007356:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800735a:	2b00      	cmp	r3, #0
 800735c:	da0b      	bge.n	8007376 <USBD_StdEPReq+0x212>
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007364:	4613      	mov	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	3310      	adds	r3, #16
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	4413      	add	r3, r2
 8007372:	3304      	adds	r3, #4
 8007374:	e00b      	b.n	800738e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007376:	7bbb      	ldrb	r3, [r7, #14]
 8007378:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800737c:	4613      	mov	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	4413      	add	r3, r2
 800738c:	3304      	adds	r3, #4
 800738e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2202      	movs	r2, #2
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fc43 	bl	8007c28 <USBD_CtlSendData>
              break;
 80073a2:	e06a      	b.n	800747a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	da11      	bge.n	80073d0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	f003 020f 	and.w	r2, r3, #15
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	440b      	add	r3, r1
 80073be:	3324      	adds	r3, #36	@ 0x24
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d117      	bne.n	80073f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fbb0 	bl	8007b2e <USBD_CtlError>
                  break;
 80073ce:	e054      	b.n	800747a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073d0:	7bbb      	ldrb	r3, [r7, #14]
 80073d2:	f003 020f 	and.w	r2, r3, #15
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	4613      	mov	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	440b      	add	r3, r1
 80073e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d104      	bne.n	80073f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fb9d 	bl	8007b2e <USBD_CtlError>
                  break;
 80073f4:	e041      	b.n	800747a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	da0b      	bge.n	8007416 <USBD_StdEPReq+0x2b2>
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007404:	4613      	mov	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	3310      	adds	r3, #16
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	4413      	add	r3, r2
 8007412:	3304      	adds	r3, #4
 8007414:	e00b      	b.n	800742e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800741c:	4613      	mov	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	4413      	add	r3, r2
 800742c:	3304      	adds	r3, #4
 800742e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d002      	beq.n	800743c <USBD_StdEPReq+0x2d8>
 8007436:	7bbb      	ldrb	r3, [r7, #14]
 8007438:	2b80      	cmp	r3, #128	@ 0x80
 800743a:	d103      	bne.n	8007444 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	e00e      	b.n	8007462 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f001 f873 	bl	8008534 <USBD_LL_IsStallEP>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2201      	movs	r2, #1
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	e002      	b.n	8007462 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2200      	movs	r2, #0
 8007460:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2202      	movs	r2, #2
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fbdd 	bl	8007c28 <USBD_CtlSendData>
              break;
 800746e:	e004      	b.n	800747a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fb5b 	bl	8007b2e <USBD_CtlError>
              break;
 8007478:	bf00      	nop
          }
          break;
 800747a:	e004      	b.n	8007486 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fb55 	bl	8007b2e <USBD_CtlError>
          break;
 8007484:	bf00      	nop
      }
      break;
 8007486:	e005      	b.n	8007494 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007488:	6839      	ldr	r1, [r7, #0]
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fb4f 	bl	8007b2e <USBD_CtlError>
      break;
 8007490:	e000      	b.n	8007494 <USBD_StdEPReq+0x330>
      break;
 8007492:	bf00      	nop
  }

  return ret;
 8007494:	7bfb      	ldrb	r3, [r7, #15]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	885b      	ldrh	r3, [r3, #2]
 80074ba:	0a1b      	lsrs	r3, r3, #8
 80074bc:	b29b      	uxth	r3, r3
 80074be:	3b01      	subs	r3, #1
 80074c0:	2b06      	cmp	r3, #6
 80074c2:	f200 8128 	bhi.w	8007716 <USBD_GetDescriptor+0x276>
 80074c6:	a201      	add	r2, pc, #4	@ (adr r2, 80074cc <USBD_GetDescriptor+0x2c>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	080074e9 	.word	0x080074e9
 80074d0:	08007501 	.word	0x08007501
 80074d4:	08007541 	.word	0x08007541
 80074d8:	08007717 	.word	0x08007717
 80074dc:	08007717 	.word	0x08007717
 80074e0:	080076b7 	.word	0x080076b7
 80074e4:	080076e3 	.word	0x080076e3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	7c12      	ldrb	r2, [r2, #16]
 80074f4:	f107 0108 	add.w	r1, r7, #8
 80074f8:	4610      	mov	r0, r2
 80074fa:	4798      	blx	r3
 80074fc:	60f8      	str	r0, [r7, #12]
      break;
 80074fe:	e112      	b.n	8007726 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	7c1b      	ldrb	r3, [r3, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10d      	bne.n	8007524 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800750e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007510:	f107 0208 	add.w	r2, r7, #8
 8007514:	4610      	mov	r0, r2
 8007516:	4798      	blx	r3
 8007518:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3301      	adds	r3, #1
 800751e:	2202      	movs	r2, #2
 8007520:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007522:	e100      	b.n	8007726 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800752a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752c:	f107 0208 	add.w	r2, r7, #8
 8007530:	4610      	mov	r0, r2
 8007532:	4798      	blx	r3
 8007534:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	3301      	adds	r3, #1
 800753a:	2202      	movs	r2, #2
 800753c:	701a      	strb	r2, [r3, #0]
      break;
 800753e:	e0f2      	b.n	8007726 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	885b      	ldrh	r3, [r3, #2]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b05      	cmp	r3, #5
 8007548:	f200 80ac 	bhi.w	80076a4 <USBD_GetDescriptor+0x204>
 800754c:	a201      	add	r2, pc, #4	@ (adr r2, 8007554 <USBD_GetDescriptor+0xb4>)
 800754e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007552:	bf00      	nop
 8007554:	0800756d 	.word	0x0800756d
 8007558:	080075a1 	.word	0x080075a1
 800755c:	080075d5 	.word	0x080075d5
 8007560:	08007609 	.word	0x08007609
 8007564:	0800763d 	.word	0x0800763d
 8007568:	08007671 	.word	0x08007671
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00b      	beq.n	8007590 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	7c12      	ldrb	r2, [r2, #16]
 8007584:	f107 0108 	add.w	r1, r7, #8
 8007588:	4610      	mov	r0, r2
 800758a:	4798      	blx	r3
 800758c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800758e:	e091      	b.n	80076b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 facb 	bl	8007b2e <USBD_CtlError>
            err++;
 8007598:	7afb      	ldrb	r3, [r7, #11]
 800759a:	3301      	adds	r3, #1
 800759c:	72fb      	strb	r3, [r7, #11]
          break;
 800759e:	e089      	b.n	80076b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00b      	beq.n	80075c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	7c12      	ldrb	r2, [r2, #16]
 80075b8:	f107 0108 	add.w	r1, r7, #8
 80075bc:	4610      	mov	r0, r2
 80075be:	4798      	blx	r3
 80075c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075c2:	e077      	b.n	80076b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fab1 	bl	8007b2e <USBD_CtlError>
            err++;
 80075cc:	7afb      	ldrb	r3, [r7, #11]
 80075ce:	3301      	adds	r3, #1
 80075d0:	72fb      	strb	r3, [r7, #11]
          break;
 80075d2:	e06f      	b.n	80076b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00b      	beq.n	80075f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	7c12      	ldrb	r2, [r2, #16]
 80075ec:	f107 0108 	add.w	r1, r7, #8
 80075f0:	4610      	mov	r0, r2
 80075f2:	4798      	blx	r3
 80075f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075f6:	e05d      	b.n	80076b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fa97 	bl	8007b2e <USBD_CtlError>
            err++;
 8007600:	7afb      	ldrb	r3, [r7, #11]
 8007602:	3301      	adds	r3, #1
 8007604:	72fb      	strb	r3, [r7, #11]
          break;
 8007606:	e055      	b.n	80076b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00b      	beq.n	800762c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	7c12      	ldrb	r2, [r2, #16]
 8007620:	f107 0108 	add.w	r1, r7, #8
 8007624:	4610      	mov	r0, r2
 8007626:	4798      	blx	r3
 8007628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800762a:	e043      	b.n	80076b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fa7d 	bl	8007b2e <USBD_CtlError>
            err++;
 8007634:	7afb      	ldrb	r3, [r7, #11]
 8007636:	3301      	adds	r3, #1
 8007638:	72fb      	strb	r3, [r7, #11]
          break;
 800763a:	e03b      	b.n	80076b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007642:	695b      	ldr	r3, [r3, #20]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00b      	beq.n	8007660 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	7c12      	ldrb	r2, [r2, #16]
 8007654:	f107 0108 	add.w	r1, r7, #8
 8007658:	4610      	mov	r0, r2
 800765a:	4798      	blx	r3
 800765c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800765e:	e029      	b.n	80076b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fa63 	bl	8007b2e <USBD_CtlError>
            err++;
 8007668:	7afb      	ldrb	r3, [r7, #11]
 800766a:	3301      	adds	r3, #1
 800766c:	72fb      	strb	r3, [r7, #11]
          break;
 800766e:	e021      	b.n	80076b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00b      	beq.n	8007694 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	7c12      	ldrb	r2, [r2, #16]
 8007688:	f107 0108 	add.w	r1, r7, #8
 800768c:	4610      	mov	r0, r2
 800768e:	4798      	blx	r3
 8007690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007692:	e00f      	b.n	80076b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fa49 	bl	8007b2e <USBD_CtlError>
            err++;
 800769c:	7afb      	ldrb	r3, [r7, #11]
 800769e:	3301      	adds	r3, #1
 80076a0:	72fb      	strb	r3, [r7, #11]
          break;
 80076a2:	e007      	b.n	80076b4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fa41 	bl	8007b2e <USBD_CtlError>
          err++;
 80076ac:	7afb      	ldrb	r3, [r7, #11]
 80076ae:	3301      	adds	r3, #1
 80076b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80076b2:	bf00      	nop
      }
      break;
 80076b4:	e037      	b.n	8007726 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	7c1b      	ldrb	r3, [r3, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d109      	bne.n	80076d2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076c6:	f107 0208 	add.w	r2, r7, #8
 80076ca:	4610      	mov	r0, r2
 80076cc:	4798      	blx	r3
 80076ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076d0:	e029      	b.n	8007726 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fa2a 	bl	8007b2e <USBD_CtlError>
        err++;
 80076da:	7afb      	ldrb	r3, [r7, #11]
 80076dc:	3301      	adds	r3, #1
 80076de:	72fb      	strb	r3, [r7, #11]
      break;
 80076e0:	e021      	b.n	8007726 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	7c1b      	ldrb	r3, [r3, #16]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10d      	bne.n	8007706 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f2:	f107 0208 	add.w	r2, r7, #8
 80076f6:	4610      	mov	r0, r2
 80076f8:	4798      	blx	r3
 80076fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3301      	adds	r3, #1
 8007700:	2207      	movs	r2, #7
 8007702:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007704:	e00f      	b.n	8007726 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fa10 	bl	8007b2e <USBD_CtlError>
        err++;
 800770e:	7afb      	ldrb	r3, [r7, #11]
 8007710:	3301      	adds	r3, #1
 8007712:	72fb      	strb	r3, [r7, #11]
      break;
 8007714:	e007      	b.n	8007726 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fa08 	bl	8007b2e <USBD_CtlError>
      err++;
 800771e:	7afb      	ldrb	r3, [r7, #11]
 8007720:	3301      	adds	r3, #1
 8007722:	72fb      	strb	r3, [r7, #11]
      break;
 8007724:	bf00      	nop
  }

  if (err != 0U)
 8007726:	7afb      	ldrb	r3, [r7, #11]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d11e      	bne.n	800776a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	88db      	ldrh	r3, [r3, #6]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d016      	beq.n	8007762 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007734:	893b      	ldrh	r3, [r7, #8]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00e      	beq.n	8007758 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	88da      	ldrh	r2, [r3, #6]
 800773e:	893b      	ldrh	r3, [r7, #8]
 8007740:	4293      	cmp	r3, r2
 8007742:	bf28      	it	cs
 8007744:	4613      	movcs	r3, r2
 8007746:	b29b      	uxth	r3, r3
 8007748:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800774a:	893b      	ldrh	r3, [r7, #8]
 800774c:	461a      	mov	r2, r3
 800774e:	68f9      	ldr	r1, [r7, #12]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fa69 	bl	8007c28 <USBD_CtlSendData>
 8007756:	e009      	b.n	800776c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f9e7 	bl	8007b2e <USBD_CtlError>
 8007760:	e004      	b.n	800776c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 faba 	bl	8007cdc <USBD_CtlSendStatus>
 8007768:	e000      	b.n	800776c <USBD_GetDescriptor+0x2cc>
    return;
 800776a:	bf00      	nop
  }
}
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop

08007774 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	889b      	ldrh	r3, [r3, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d131      	bne.n	80077ea <USBD_SetAddress+0x76>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	88db      	ldrh	r3, [r3, #6]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d12d      	bne.n	80077ea <USBD_SetAddress+0x76>
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	885b      	ldrh	r3, [r3, #2]
 8007792:	2b7f      	cmp	r3, #127	@ 0x7f
 8007794:	d829      	bhi.n	80077ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	885b      	ldrh	r3, [r3, #2]
 800779a:	b2db      	uxtb	r3, r3
 800779c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d104      	bne.n	80077b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80077ae:	6839      	ldr	r1, [r7, #0]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f9bc 	bl	8007b2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b6:	e01d      	b.n	80077f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	7bfa      	ldrb	r2, [r7, #15]
 80077bc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fee1 	bl	800858c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fa86 	bl	8007cdc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d004      	beq.n	80077e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2202      	movs	r2, #2
 80077da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077de:	e009      	b.n	80077f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e8:	e004      	b.n	80077f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f99e 	bl	8007b2e <USBD_CtlError>
  }
}
 80077f2:	bf00      	nop
 80077f4:	bf00      	nop
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	885b      	ldrh	r3, [r3, #2]
 800780e:	b2da      	uxtb	r2, r3
 8007810:	4b4e      	ldr	r3, [pc, #312]	@ (800794c <USBD_SetConfig+0x150>)
 8007812:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007814:	4b4d      	ldr	r3, [pc, #308]	@ (800794c <USBD_SetConfig+0x150>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d905      	bls.n	8007828 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f985 	bl	8007b2e <USBD_CtlError>
    return USBD_FAIL;
 8007824:	2303      	movs	r3, #3
 8007826:	e08c      	b.n	8007942 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b02      	cmp	r3, #2
 8007832:	d002      	beq.n	800783a <USBD_SetConfig+0x3e>
 8007834:	2b03      	cmp	r3, #3
 8007836:	d029      	beq.n	800788c <USBD_SetConfig+0x90>
 8007838:	e075      	b.n	8007926 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800783a:	4b44      	ldr	r3, [pc, #272]	@ (800794c <USBD_SetConfig+0x150>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d020      	beq.n	8007884 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007842:	4b42      	ldr	r3, [pc, #264]	@ (800794c <USBD_SetConfig+0x150>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800784c:	4b3f      	ldr	r3, [pc, #252]	@ (800794c <USBD_SetConfig+0x150>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7fe ffe3 	bl	800681e <USBD_SetClassConfig>
 8007858:	4603      	mov	r3, r0
 800785a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d008      	beq.n	8007874 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f962 	bl	8007b2e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2202      	movs	r2, #2
 800786e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007872:	e065      	b.n	8007940 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fa31 	bl	8007cdc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2203      	movs	r2, #3
 800787e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007882:	e05d      	b.n	8007940 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fa29 	bl	8007cdc <USBD_CtlSendStatus>
      break;
 800788a:	e059      	b.n	8007940 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800788c:	4b2f      	ldr	r3, [pc, #188]	@ (800794c <USBD_SetConfig+0x150>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d112      	bne.n	80078ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2202      	movs	r2, #2
 8007898:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800789c:	4b2b      	ldr	r3, [pc, #172]	@ (800794c <USBD_SetConfig+0x150>)
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	461a      	mov	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078a6:	4b29      	ldr	r3, [pc, #164]	@ (800794c <USBD_SetConfig+0x150>)
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	4619      	mov	r1, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7fe ffd2 	bl	8006856 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fa12 	bl	8007cdc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078b8:	e042      	b.n	8007940 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80078ba:	4b24      	ldr	r3, [pc, #144]	@ (800794c <USBD_SetConfig+0x150>)
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d02a      	beq.n	800791e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7fe ffc0 	bl	8006856 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80078d6:	4b1d      	ldr	r3, [pc, #116]	@ (800794c <USBD_SetConfig+0x150>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	461a      	mov	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078e0:	4b1a      	ldr	r3, [pc, #104]	@ (800794c <USBD_SetConfig+0x150>)
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7fe ff99 	bl	800681e <USBD_SetClassConfig>
 80078ec:	4603      	mov	r3, r0
 80078ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00f      	beq.n	8007916 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f918 	bl	8007b2e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	b2db      	uxtb	r3, r3
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7fe ffa5 	bl	8006856 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007914:	e014      	b.n	8007940 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f9e0 	bl	8007cdc <USBD_CtlSendStatus>
      break;
 800791c:	e010      	b.n	8007940 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f9dc 	bl	8007cdc <USBD_CtlSendStatus>
      break;
 8007924:	e00c      	b.n	8007940 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f900 	bl	8007b2e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800792e:	4b07      	ldr	r3, [pc, #28]	@ (800794c <USBD_SetConfig+0x150>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7fe ff8e 	bl	8006856 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800793a:	2303      	movs	r3, #3
 800793c:	73fb      	strb	r3, [r7, #15]
      break;
 800793e:	bf00      	nop
  }

  return ret;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	20000210 	.word	0x20000210

08007950 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	88db      	ldrh	r3, [r3, #6]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d004      	beq.n	800796c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f8e2 	bl	8007b2e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800796a:	e023      	b.n	80079b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b02      	cmp	r3, #2
 8007976:	dc02      	bgt.n	800797e <USBD_GetConfig+0x2e>
 8007978:	2b00      	cmp	r3, #0
 800797a:	dc03      	bgt.n	8007984 <USBD_GetConfig+0x34>
 800797c:	e015      	b.n	80079aa <USBD_GetConfig+0x5a>
 800797e:	2b03      	cmp	r3, #3
 8007980:	d00b      	beq.n	800799a <USBD_GetConfig+0x4a>
 8007982:	e012      	b.n	80079aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	3308      	adds	r3, #8
 800798e:	2201      	movs	r2, #1
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f948 	bl	8007c28 <USBD_CtlSendData>
        break;
 8007998:	e00c      	b.n	80079b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	3304      	adds	r3, #4
 800799e:	2201      	movs	r2, #1
 80079a0:	4619      	mov	r1, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f940 	bl	8007c28 <USBD_CtlSendData>
        break;
 80079a8:	e004      	b.n	80079b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f8be 	bl	8007b2e <USBD_CtlError>
        break;
 80079b2:	bf00      	nop
}
 80079b4:	bf00      	nop
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	3b01      	subs	r3, #1
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d81e      	bhi.n	8007a12 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	88db      	ldrh	r3, [r3, #6]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d004      	beq.n	80079e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f8a5 	bl	8007b2e <USBD_CtlError>
        break;
 80079e4:	e01a      	b.n	8007a1c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d005      	beq.n	8007a02 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	f043 0202 	orr.w	r2, r3, #2
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	330c      	adds	r3, #12
 8007a06:	2202      	movs	r2, #2
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f90c 	bl	8007c28 <USBD_CtlSendData>
      break;
 8007a10:	e004      	b.n	8007a1c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f88a 	bl	8007b2e <USBD_CtlError>
      break;
 8007a1a:	bf00      	nop
  }
}
 8007a1c:	bf00      	nop
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	885b      	ldrh	r3, [r3, #2]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d107      	bne.n	8007a46 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f94c 	bl	8007cdc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007a44:	e013      	b.n	8007a6e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	885b      	ldrh	r3, [r3, #2]
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d10b      	bne.n	8007a66 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	889b      	ldrh	r3, [r3, #4]
 8007a52:	0a1b      	lsrs	r3, r3, #8
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f93c 	bl	8007cdc <USBD_CtlSendStatus>
}
 8007a64:	e003      	b.n	8007a6e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f860 	bl	8007b2e <USBD_CtlError>
}
 8007a6e:	bf00      	nop
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b082      	sub	sp, #8
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d80b      	bhi.n	8007aa6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	885b      	ldrh	r3, [r3, #2]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d10c      	bne.n	8007ab0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f91c 	bl	8007cdc <USBD_CtlSendStatus>
      }
      break;
 8007aa4:	e004      	b.n	8007ab0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f840 	bl	8007b2e <USBD_CtlError>
      break;
 8007aae:	e000      	b.n	8007ab2 <USBD_ClrFeature+0x3c>
      break;
 8007ab0:	bf00      	nop
  }
}
 8007ab2:	bf00      	nop
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	781a      	ldrb	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	781a      	ldrb	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f7ff fa40 	bl	8006f6a <SWAPBYTE>
 8007aea:	4603      	mov	r3, r0
 8007aec:	461a      	mov	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3301      	adds	r3, #1
 8007af6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	3301      	adds	r3, #1
 8007afc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f7ff fa33 	bl	8006f6a <SWAPBYTE>
 8007b04:	4603      	mov	r3, r0
 8007b06:	461a      	mov	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	3301      	adds	r3, #1
 8007b16:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f7ff fa26 	bl	8006f6a <SWAPBYTE>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	461a      	mov	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	80da      	strh	r2, [r3, #6]
}
 8007b26:	bf00      	nop
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b38:	2180      	movs	r1, #128	@ 0x80
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fcbc 	bl	80084b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b40:	2100      	movs	r1, #0
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fcb8 	bl	80084b8 <USBD_LL_StallEP>
}
 8007b48:	bf00      	nop
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d042      	beq.n	8007bec <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007b6a:	6938      	ldr	r0, [r7, #16]
 8007b6c:	f000 f842 	bl	8007bf4 <USBD_GetLen>
 8007b70:	4603      	mov	r3, r0
 8007b72:	3301      	adds	r3, #1
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b7a:	d808      	bhi.n	8007b8e <USBD_GetString+0x3e>
 8007b7c:	6938      	ldr	r0, [r7, #16]
 8007b7e:	f000 f839 	bl	8007bf4 <USBD_GetLen>
 8007b82:	4603      	mov	r3, r0
 8007b84:	3301      	adds	r3, #1
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	005b      	lsls	r3, r3, #1
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	e001      	b.n	8007b92 <USBD_GetString+0x42>
 8007b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	7812      	ldrb	r2, [r2, #0]
 8007ba0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ba8:	7dfb      	ldrb	r3, [r7, #23]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	4413      	add	r3, r2
 8007bae:	2203      	movs	r2, #3
 8007bb0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bb2:	7dfb      	ldrb	r3, [r7, #23]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007bb8:	e013      	b.n	8007be2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	7812      	ldrb	r2, [r2, #0]
 8007bc4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	613b      	str	r3, [r7, #16]
    idx++;
 8007bcc:	7dfb      	ldrb	r3, [r7, #23]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	2200      	movs	r2, #0
 8007bda:	701a      	strb	r2, [r3, #0]
    idx++;
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
 8007bde:	3301      	adds	r3, #1
 8007be0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1e7      	bne.n	8007bba <USBD_GetString+0x6a>
 8007bea:	e000      	b.n	8007bee <USBD_GetString+0x9e>
    return;
 8007bec:	bf00      	nop
  }
}
 8007bee:	3718      	adds	r7, #24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c04:	e005      	b.n	8007c12 <USBD_GetLen+0x1e>
  {
    len++;
 8007c06:	7bfb      	ldrb	r3, [r7, #15]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1f5      	bne.n	8007c06 <USBD_GetLen+0x12>
  }

  return len;
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2202      	movs	r2, #2
 8007c38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 fcbb 	bl	80085ca <USBD_LL_Transmit>

  return USBD_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b084      	sub	sp, #16
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	2100      	movs	r1, #0
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 fcaa 	bl	80085ca <USBD_LL_Transmit>

  return USBD_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2203      	movs	r2, #3
 8007c90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	2100      	movs	r1, #0
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 fcae 	bl	800860c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b084      	sub	sp, #16
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	60f8      	str	r0, [r7, #12]
 8007cc2:	60b9      	str	r1, [r7, #8]
 8007cc4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	2100      	movs	r1, #0
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 fc9d 	bl	800860c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2204      	movs	r2, #4
 8007ce8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007cec:	2300      	movs	r3, #0
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fc69 	bl	80085ca <USBD_LL_Transmit>

  return USBD_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b082      	sub	sp, #8
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2205      	movs	r2, #5
 8007d0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d12:	2300      	movs	r3, #0
 8007d14:	2200      	movs	r2, #0
 8007d16:	2100      	movs	r1, #0
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fc77 	bl	800860c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	4912      	ldr	r1, [pc, #72]	@ (8007d78 <MX_USB_DEVICE_Init+0x50>)
 8007d30:	4812      	ldr	r0, [pc, #72]	@ (8007d7c <MX_USB_DEVICE_Init+0x54>)
 8007d32:	f7fe fcf7 	bl	8006724 <USBD_Init>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d001      	beq.n	8007d40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d3c:	f7f8 fdba 	bl	80008b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007d40:	490f      	ldr	r1, [pc, #60]	@ (8007d80 <MX_USB_DEVICE_Init+0x58>)
 8007d42:	480e      	ldr	r0, [pc, #56]	@ (8007d7c <MX_USB_DEVICE_Init+0x54>)
 8007d44:	f7fe fd1e 	bl	8006784 <USBD_RegisterClass>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d001      	beq.n	8007d52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d4e:	f7f8 fdb1 	bl	80008b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007d52:	490c      	ldr	r1, [pc, #48]	@ (8007d84 <MX_USB_DEVICE_Init+0x5c>)
 8007d54:	4809      	ldr	r0, [pc, #36]	@ (8007d7c <MX_USB_DEVICE_Init+0x54>)
 8007d56:	f7fe fc55 	bl	8006604 <USBD_CDC_RegisterInterface>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d60:	f7f8 fda8 	bl	80008b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d64:	4805      	ldr	r0, [pc, #20]	@ (8007d7c <MX_USB_DEVICE_Init+0x54>)
 8007d66:	f7fe fd43 	bl	80067f0 <USBD_Start>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d70:	f7f8 fda0 	bl	80008b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d74:	bf00      	nop
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	200000b0 	.word	0x200000b0
 8007d7c:	20000214 	.word	0x20000214
 8007d80:	2000001c 	.word	0x2000001c
 8007d84:	2000009c 	.word	0x2000009c

08007d88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	4905      	ldr	r1, [pc, #20]	@ (8007da4 <CDC_Init_FS+0x1c>)
 8007d90:	4805      	ldr	r0, [pc, #20]	@ (8007da8 <CDC_Init_FS+0x20>)
 8007d92:	f7fe fc51 	bl	8006638 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007d96:	4905      	ldr	r1, [pc, #20]	@ (8007dac <CDC_Init_FS+0x24>)
 8007d98:	4803      	ldr	r0, [pc, #12]	@ (8007da8 <CDC_Init_FS+0x20>)
 8007d9a:	f7fe fc6f 	bl	800667c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007d9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	20000cf0 	.word	0x20000cf0
 8007da8:	20000214 	.word	0x20000214
 8007dac:	200004f0 	.word	0x200004f0

08007db0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007db0:	b480      	push	{r7}
 8007db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007db4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	6039      	str	r1, [r7, #0]
 8007dca:	71fb      	strb	r3, [r7, #7]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007dd0:	79fb      	ldrb	r3, [r7, #7]
 8007dd2:	2b23      	cmp	r3, #35	@ 0x23
 8007dd4:	d84a      	bhi.n	8007e6c <CDC_Control_FS+0xac>
 8007dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8007ddc <CDC_Control_FS+0x1c>)
 8007dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ddc:	08007e6d 	.word	0x08007e6d
 8007de0:	08007e6d 	.word	0x08007e6d
 8007de4:	08007e6d 	.word	0x08007e6d
 8007de8:	08007e6d 	.word	0x08007e6d
 8007dec:	08007e6d 	.word	0x08007e6d
 8007df0:	08007e6d 	.word	0x08007e6d
 8007df4:	08007e6d 	.word	0x08007e6d
 8007df8:	08007e6d 	.word	0x08007e6d
 8007dfc:	08007e6d 	.word	0x08007e6d
 8007e00:	08007e6d 	.word	0x08007e6d
 8007e04:	08007e6d 	.word	0x08007e6d
 8007e08:	08007e6d 	.word	0x08007e6d
 8007e0c:	08007e6d 	.word	0x08007e6d
 8007e10:	08007e6d 	.word	0x08007e6d
 8007e14:	08007e6d 	.word	0x08007e6d
 8007e18:	08007e6d 	.word	0x08007e6d
 8007e1c:	08007e6d 	.word	0x08007e6d
 8007e20:	08007e6d 	.word	0x08007e6d
 8007e24:	08007e6d 	.word	0x08007e6d
 8007e28:	08007e6d 	.word	0x08007e6d
 8007e2c:	08007e6d 	.word	0x08007e6d
 8007e30:	08007e6d 	.word	0x08007e6d
 8007e34:	08007e6d 	.word	0x08007e6d
 8007e38:	08007e6d 	.word	0x08007e6d
 8007e3c:	08007e6d 	.word	0x08007e6d
 8007e40:	08007e6d 	.word	0x08007e6d
 8007e44:	08007e6d 	.word	0x08007e6d
 8007e48:	08007e6d 	.word	0x08007e6d
 8007e4c:	08007e6d 	.word	0x08007e6d
 8007e50:	08007e6d 	.word	0x08007e6d
 8007e54:	08007e6d 	.word	0x08007e6d
 8007e58:	08007e6d 	.word	0x08007e6d
 8007e5c:	08007e6d 	.word	0x08007e6d
 8007e60:	08007e6d 	.word	0x08007e6d
 8007e64:	08007e6d 	.word	0x08007e6d
 8007e68:	08007e6d 	.word	0x08007e6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007e6c:	bf00      	nop
  }

  return (USBD_OK);
 8007e6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007e86:	6879      	ldr	r1, [r7, #4]
 8007e88:	4805      	ldr	r0, [pc, #20]	@ (8007ea0 <CDC_Receive_FS+0x24>)
 8007e8a:	f7fe fbf7 	bl	800667c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007e8e:	4804      	ldr	r0, [pc, #16]	@ (8007ea0 <CDC_Receive_FS+0x24>)
 8007e90:	f7fe fc12 	bl	80066b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007e94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	20000214 	.word	0x20000214

08007ea4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b087      	sub	sp, #28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007eb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	371c      	adds	r7, #28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
	...

08007ec8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	4603      	mov	r3, r0
 8007ed0:	6039      	str	r1, [r7, #0]
 8007ed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	2212      	movs	r2, #18
 8007ed8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007eda:	4b03      	ldr	r3, [pc, #12]	@ (8007ee8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr
 8007ee8:	200000cc 	.word	0x200000cc

08007eec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	6039      	str	r1, [r7, #0]
 8007ef6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	2204      	movs	r2, #4
 8007efc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007efe:	4b03      	ldr	r3, [pc, #12]	@ (8007f0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	200000e0 	.word	0x200000e0

08007f10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	4603      	mov	r3, r0
 8007f18:	6039      	str	r1, [r7, #0]
 8007f1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f1c:	79fb      	ldrb	r3, [r7, #7]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d105      	bne.n	8007f2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	4907      	ldr	r1, [pc, #28]	@ (8007f44 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f26:	4808      	ldr	r0, [pc, #32]	@ (8007f48 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f28:	f7ff fe12 	bl	8007b50 <USBD_GetString>
 8007f2c:	e004      	b.n	8007f38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	4904      	ldr	r1, [pc, #16]	@ (8007f44 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f32:	4805      	ldr	r0, [pc, #20]	@ (8007f48 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f34:	f7ff fe0c 	bl	8007b50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f38:	4b02      	ldr	r3, [pc, #8]	@ (8007f44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	200014f0 	.word	0x200014f0
 8007f48:	08009094 	.word	0x08009094

08007f4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	4603      	mov	r3, r0
 8007f54:	6039      	str	r1, [r7, #0]
 8007f56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f58:	683a      	ldr	r2, [r7, #0]
 8007f5a:	4904      	ldr	r1, [pc, #16]	@ (8007f6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f5c:	4804      	ldr	r0, [pc, #16]	@ (8007f70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f5e:	f7ff fdf7 	bl	8007b50 <USBD_GetString>
  return USBD_StrDesc;
 8007f62:	4b02      	ldr	r3, [pc, #8]	@ (8007f6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	200014f0 	.word	0x200014f0
 8007f70:	080090ac 	.word	0x080090ac

08007f74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	6039      	str	r1, [r7, #0]
 8007f7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	221a      	movs	r2, #26
 8007f84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f86:	f000 f843 	bl	8008010 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f8a:	4b02      	ldr	r3, [pc, #8]	@ (8007f94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	200000e4 	.word	0x200000e4

08007f98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	6039      	str	r1, [r7, #0]
 8007fa2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007fa4:	79fb      	ldrb	r3, [r7, #7]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d105      	bne.n	8007fb6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	4907      	ldr	r1, [pc, #28]	@ (8007fcc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007fae:	4808      	ldr	r0, [pc, #32]	@ (8007fd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fb0:	f7ff fdce 	bl	8007b50 <USBD_GetString>
 8007fb4:	e004      	b.n	8007fc0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	4904      	ldr	r1, [pc, #16]	@ (8007fcc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007fba:	4805      	ldr	r0, [pc, #20]	@ (8007fd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fbc:	f7ff fdc8 	bl	8007b50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fc0:	4b02      	ldr	r3, [pc, #8]	@ (8007fcc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	200014f0 	.word	0x200014f0
 8007fd0:	080090c0 	.word	0x080090c0

08007fd4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	6039      	str	r1, [r7, #0]
 8007fde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fe0:	79fb      	ldrb	r3, [r7, #7]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d105      	bne.n	8007ff2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	4907      	ldr	r1, [pc, #28]	@ (8008008 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007fea:	4808      	ldr	r0, [pc, #32]	@ (800800c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fec:	f7ff fdb0 	bl	8007b50 <USBD_GetString>
 8007ff0:	e004      	b.n	8007ffc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	4904      	ldr	r1, [pc, #16]	@ (8008008 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ff6:	4805      	ldr	r0, [pc, #20]	@ (800800c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ff8:	f7ff fdaa 	bl	8007b50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ffc:	4b02      	ldr	r3, [pc, #8]	@ (8008008 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	200014f0 	.word	0x200014f0
 800800c:	080090cc 	.word	0x080090cc

08008010 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008016:	4b0f      	ldr	r3, [pc, #60]	@ (8008054 <Get_SerialNum+0x44>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800801c:	4b0e      	ldr	r3, [pc, #56]	@ (8008058 <Get_SerialNum+0x48>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008022:	4b0e      	ldr	r3, [pc, #56]	@ (800805c <Get_SerialNum+0x4c>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4413      	add	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d009      	beq.n	800804a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008036:	2208      	movs	r2, #8
 8008038:	4909      	ldr	r1, [pc, #36]	@ (8008060 <Get_SerialNum+0x50>)
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f000 f814 	bl	8008068 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008040:	2204      	movs	r2, #4
 8008042:	4908      	ldr	r1, [pc, #32]	@ (8008064 <Get_SerialNum+0x54>)
 8008044:	68b8      	ldr	r0, [r7, #8]
 8008046:	f000 f80f 	bl	8008068 <IntToUnicode>
  }
}
 800804a:	bf00      	nop
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	1fff7a10 	.word	0x1fff7a10
 8008058:	1fff7a14 	.word	0x1fff7a14
 800805c:	1fff7a18 	.word	0x1fff7a18
 8008060:	200000e6 	.word	0x200000e6
 8008064:	200000f6 	.word	0x200000f6

08008068 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	4613      	mov	r3, r2
 8008074:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008076:	2300      	movs	r3, #0
 8008078:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800807a:	2300      	movs	r3, #0
 800807c:	75fb      	strb	r3, [r7, #23]
 800807e:	e027      	b.n	80080d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	0f1b      	lsrs	r3, r3, #28
 8008084:	2b09      	cmp	r3, #9
 8008086:	d80b      	bhi.n	80080a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	0f1b      	lsrs	r3, r3, #28
 800808c:	b2da      	uxtb	r2, r3
 800808e:	7dfb      	ldrb	r3, [r7, #23]
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	4619      	mov	r1, r3
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	440b      	add	r3, r1
 8008098:	3230      	adds	r2, #48	@ 0x30
 800809a:	b2d2      	uxtb	r2, r2
 800809c:	701a      	strb	r2, [r3, #0]
 800809e:	e00a      	b.n	80080b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	0f1b      	lsrs	r3, r3, #28
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	7dfb      	ldrb	r3, [r7, #23]
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	4619      	mov	r1, r3
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	440b      	add	r3, r1
 80080b0:	3237      	adds	r2, #55	@ 0x37
 80080b2:	b2d2      	uxtb	r2, r2
 80080b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	011b      	lsls	r3, r3, #4
 80080ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80080bc:	7dfb      	ldrb	r3, [r7, #23]
 80080be:	005b      	lsls	r3, r3, #1
 80080c0:	3301      	adds	r3, #1
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	4413      	add	r3, r2
 80080c6:	2200      	movs	r2, #0
 80080c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80080ca:	7dfb      	ldrb	r3, [r7, #23]
 80080cc:	3301      	adds	r3, #1
 80080ce:	75fb      	strb	r3, [r7, #23]
 80080d0:	7dfa      	ldrb	r2, [r7, #23]
 80080d2:	79fb      	ldrb	r3, [r7, #7]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d3d3      	bcc.n	8008080 <IntToUnicode+0x18>
  }
}
 80080d8:	bf00      	nop
 80080da:	bf00      	nop
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
	...

080080e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b08a      	sub	sp, #40	@ 0x28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080f0:	f107 0314 	add.w	r3, r7, #20
 80080f4:	2200      	movs	r2, #0
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	605a      	str	r2, [r3, #4]
 80080fa:	609a      	str	r2, [r3, #8]
 80080fc:	60da      	str	r2, [r3, #12]
 80080fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008108:	d13a      	bne.n	8008180 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800810a:	2300      	movs	r3, #0
 800810c:	613b      	str	r3, [r7, #16]
 800810e:	4b1e      	ldr	r3, [pc, #120]	@ (8008188 <HAL_PCD_MspInit+0xa0>)
 8008110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008112:	4a1d      	ldr	r2, [pc, #116]	@ (8008188 <HAL_PCD_MspInit+0xa0>)
 8008114:	f043 0301 	orr.w	r3, r3, #1
 8008118:	6313      	str	r3, [r2, #48]	@ 0x30
 800811a:	4b1b      	ldr	r3, [pc, #108]	@ (8008188 <HAL_PCD_MspInit+0xa0>)
 800811c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	613b      	str	r3, [r7, #16]
 8008124:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008126:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800812a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800812c:	2302      	movs	r3, #2
 800812e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008130:	2300      	movs	r3, #0
 8008132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008134:	2303      	movs	r3, #3
 8008136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008138:	230a      	movs	r3, #10
 800813a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800813c:	f107 0314 	add.w	r3, r7, #20
 8008140:	4619      	mov	r1, r3
 8008142:	4812      	ldr	r0, [pc, #72]	@ (800818c <HAL_PCD_MspInit+0xa4>)
 8008144:	f7f8 fec8 	bl	8000ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008148:	4b0f      	ldr	r3, [pc, #60]	@ (8008188 <HAL_PCD_MspInit+0xa0>)
 800814a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800814c:	4a0e      	ldr	r2, [pc, #56]	@ (8008188 <HAL_PCD_MspInit+0xa0>)
 800814e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008152:	6353      	str	r3, [r2, #52]	@ 0x34
 8008154:	2300      	movs	r3, #0
 8008156:	60fb      	str	r3, [r7, #12]
 8008158:	4b0b      	ldr	r3, [pc, #44]	@ (8008188 <HAL_PCD_MspInit+0xa0>)
 800815a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800815c:	4a0a      	ldr	r2, [pc, #40]	@ (8008188 <HAL_PCD_MspInit+0xa0>)
 800815e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008162:	6453      	str	r3, [r2, #68]	@ 0x44
 8008164:	4b08      	ldr	r3, [pc, #32]	@ (8008188 <HAL_PCD_MspInit+0xa0>)
 8008166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008168:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800816c:	60fb      	str	r3, [r7, #12]
 800816e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008170:	2200      	movs	r2, #0
 8008172:	2100      	movs	r1, #0
 8008174:	2043      	movs	r0, #67	@ 0x43
 8008176:	f7f8 fe78 	bl	8000e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800817a:	2043      	movs	r0, #67	@ 0x43
 800817c:	f7f8 fe91 	bl	8000ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008180:	bf00      	nop
 8008182:	3728      	adds	r7, #40	@ 0x28
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	40023800 	.word	0x40023800
 800818c:	40020000 	.word	0x40020000

08008190 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80081a4:	4619      	mov	r1, r3
 80081a6:	4610      	mov	r0, r2
 80081a8:	f7fe fb6f 	bl	800688a <USBD_LL_SetupStage>
}
 80081ac:	bf00      	nop
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	460b      	mov	r3, r1
 80081be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80081c6:	78fa      	ldrb	r2, [r7, #3]
 80081c8:	6879      	ldr	r1, [r7, #4]
 80081ca:	4613      	mov	r3, r2
 80081cc:	00db      	lsls	r3, r3, #3
 80081ce:	4413      	add	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	440b      	add	r3, r1
 80081d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	78fb      	ldrb	r3, [r7, #3]
 80081dc:	4619      	mov	r1, r3
 80081de:	f7fe fba9 	bl	8006934 <USBD_LL_DataOutStage>
}
 80081e2:	bf00      	nop
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b082      	sub	sp, #8
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	460b      	mov	r3, r1
 80081f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80081fc:	78fa      	ldrb	r2, [r7, #3]
 80081fe:	6879      	ldr	r1, [r7, #4]
 8008200:	4613      	mov	r3, r2
 8008202:	00db      	lsls	r3, r3, #3
 8008204:	4413      	add	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	440b      	add	r3, r1
 800820a:	3320      	adds	r3, #32
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	78fb      	ldrb	r3, [r7, #3]
 8008210:	4619      	mov	r1, r3
 8008212:	f7fe fc42 	bl	8006a9a <USBD_LL_DataInStage>
}
 8008216:	bf00      	nop
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b082      	sub	sp, #8
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800822c:	4618      	mov	r0, r3
 800822e:	f7fe fd7c 	bl	8006d2a <USBD_LL_SOF>
}
 8008232:	bf00      	nop
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b084      	sub	sp, #16
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008242:	2301      	movs	r3, #1
 8008244:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	79db      	ldrb	r3, [r3, #7]
 800824a:	2b02      	cmp	r3, #2
 800824c:	d001      	beq.n	8008252 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800824e:	f7f8 fb31 	bl	80008b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008258:	7bfa      	ldrb	r2, [r7, #15]
 800825a:	4611      	mov	r1, r2
 800825c:	4618      	mov	r0, r3
 800825e:	f7fe fd20 	bl	8006ca2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008268:	4618      	mov	r0, r3
 800826a:	f7fe fcc8 	bl	8006bfe <USBD_LL_Reset>
}
 800826e:	bf00      	nop
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
	...

08008278 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008286:	4618      	mov	r0, r3
 8008288:	f7fe fd1b 	bl	8006cc2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	6812      	ldr	r2, [r2, #0]
 800829a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800829e:	f043 0301 	orr.w	r3, r3, #1
 80082a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	7adb      	ldrb	r3, [r3, #11]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d005      	beq.n	80082b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082ac:	4b04      	ldr	r3, [pc, #16]	@ (80082c0 <HAL_PCD_SuspendCallback+0x48>)
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	4a03      	ldr	r2, [pc, #12]	@ (80082c0 <HAL_PCD_SuspendCallback+0x48>)
 80082b2:	f043 0306 	orr.w	r3, r3, #6
 80082b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80082b8:	bf00      	nop
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	e000ed00 	.word	0xe000ed00

080082c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7fe fd11 	bl	8006cfa <USBD_LL_Resume>
}
 80082d8:	bf00      	nop
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	460b      	mov	r3, r1
 80082ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082f2:	78fa      	ldrb	r2, [r7, #3]
 80082f4:	4611      	mov	r1, r2
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fe fd69 	bl	8006dce <USBD_LL_IsoOUTIncomplete>
}
 80082fc:	bf00      	nop
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	460b      	mov	r3, r1
 800830e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008316:	78fa      	ldrb	r2, [r7, #3]
 8008318:	4611      	mov	r1, r2
 800831a:	4618      	mov	r0, r3
 800831c:	f7fe fd25 	bl	8006d6a <USBD_LL_IsoINIncomplete>
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008336:	4618      	mov	r0, r3
 8008338:	f7fe fd7b 	bl	8006e32 <USBD_LL_DevConnected>
}
 800833c:	bf00      	nop
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008352:	4618      	mov	r0, r3
 8008354:	f7fe fd78 	bl	8006e48 <USBD_LL_DevDisconnected>
}
 8008358:	bf00      	nop
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d13c      	bne.n	80083ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008370:	4a20      	ldr	r2, [pc, #128]	@ (80083f4 <USBD_LL_Init+0x94>)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a1e      	ldr	r2, [pc, #120]	@ (80083f4 <USBD_LL_Init+0x94>)
 800837c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008380:	4b1c      	ldr	r3, [pc, #112]	@ (80083f4 <USBD_LL_Init+0x94>)
 8008382:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008386:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008388:	4b1a      	ldr	r3, [pc, #104]	@ (80083f4 <USBD_LL_Init+0x94>)
 800838a:	2204      	movs	r2, #4
 800838c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800838e:	4b19      	ldr	r3, [pc, #100]	@ (80083f4 <USBD_LL_Init+0x94>)
 8008390:	2202      	movs	r2, #2
 8008392:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008394:	4b17      	ldr	r3, [pc, #92]	@ (80083f4 <USBD_LL_Init+0x94>)
 8008396:	2200      	movs	r2, #0
 8008398:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800839a:	4b16      	ldr	r3, [pc, #88]	@ (80083f4 <USBD_LL_Init+0x94>)
 800839c:	2202      	movs	r2, #2
 800839e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80083a0:	4b14      	ldr	r3, [pc, #80]	@ (80083f4 <USBD_LL_Init+0x94>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80083a6:	4b13      	ldr	r3, [pc, #76]	@ (80083f4 <USBD_LL_Init+0x94>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80083ac:	4b11      	ldr	r3, [pc, #68]	@ (80083f4 <USBD_LL_Init+0x94>)
 80083ae:	2200      	movs	r2, #0
 80083b0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80083b2:	4b10      	ldr	r3, [pc, #64]	@ (80083f4 <USBD_LL_Init+0x94>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80083b8:	4b0e      	ldr	r3, [pc, #56]	@ (80083f4 <USBD_LL_Init+0x94>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80083be:	480d      	ldr	r0, [pc, #52]	@ (80083f4 <USBD_LL_Init+0x94>)
 80083c0:	f7f9 ff22 	bl	8002208 <HAL_PCD_Init>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d001      	beq.n	80083ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80083ca:	f7f8 fa73 	bl	80008b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80083ce:	2180      	movs	r1, #128	@ 0x80
 80083d0:	4808      	ldr	r0, [pc, #32]	@ (80083f4 <USBD_LL_Init+0x94>)
 80083d2:	f7fb f94e 	bl	8003672 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80083d6:	2240      	movs	r2, #64	@ 0x40
 80083d8:	2100      	movs	r1, #0
 80083da:	4806      	ldr	r0, [pc, #24]	@ (80083f4 <USBD_LL_Init+0x94>)
 80083dc:	f7fb f902 	bl	80035e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80083e0:	2280      	movs	r2, #128	@ 0x80
 80083e2:	2101      	movs	r1, #1
 80083e4:	4803      	ldr	r0, [pc, #12]	@ (80083f4 <USBD_LL_Init+0x94>)
 80083e6:	f7fb f8fd 	bl	80035e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	200016f0 	.word	0x200016f0

080083f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800840e:	4618      	mov	r0, r3
 8008410:	f7fa f809 	bl	8002426 <HAL_PCD_Start>
 8008414:	4603      	mov	r3, r0
 8008416:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008418:	7bfb      	ldrb	r3, [r7, #15]
 800841a:	4618      	mov	r0, r3
 800841c:	f000 f942 	bl	80086a4 <USBD_Get_USB_Status>
 8008420:	4603      	mov	r3, r0
 8008422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008424:	7bbb      	ldrb	r3, [r7, #14]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b084      	sub	sp, #16
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	4608      	mov	r0, r1
 8008438:	4611      	mov	r1, r2
 800843a:	461a      	mov	r2, r3
 800843c:	4603      	mov	r3, r0
 800843e:	70fb      	strb	r3, [r7, #3]
 8008440:	460b      	mov	r3, r1
 8008442:	70bb      	strb	r3, [r7, #2]
 8008444:	4613      	mov	r3, r2
 8008446:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800844c:	2300      	movs	r3, #0
 800844e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008456:	78bb      	ldrb	r3, [r7, #2]
 8008458:	883a      	ldrh	r2, [r7, #0]
 800845a:	78f9      	ldrb	r1, [r7, #3]
 800845c:	f7fa fcdd 	bl	8002e1a <HAL_PCD_EP_Open>
 8008460:	4603      	mov	r3, r0
 8008462:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008464:	7bfb      	ldrb	r3, [r7, #15]
 8008466:	4618      	mov	r0, r3
 8008468:	f000 f91c 	bl	80086a4 <USBD_Get_USB_Status>
 800846c:	4603      	mov	r3, r0
 800846e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008470:	7bbb      	ldrb	r3, [r7, #14]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b084      	sub	sp, #16
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	460b      	mov	r3, r1
 8008484:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008494:	78fa      	ldrb	r2, [r7, #3]
 8008496:	4611      	mov	r1, r2
 8008498:	4618      	mov	r0, r3
 800849a:	f7fa fd28 	bl	8002eee <HAL_PCD_EP_Close>
 800849e:	4603      	mov	r3, r0
 80084a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f000 f8fd 	bl	80086a4 <USBD_Get_USB_Status>
 80084aa:	4603      	mov	r3, r0
 80084ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	460b      	mov	r3, r1
 80084c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084d2:	78fa      	ldrb	r2, [r7, #3]
 80084d4:	4611      	mov	r1, r2
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fa fde0 	bl	800309c <HAL_PCD_EP_SetStall>
 80084dc:	4603      	mov	r3, r0
 80084de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 f8de 	bl	80086a4 <USBD_Get_USB_Status>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	460b      	mov	r3, r1
 8008500:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008506:	2300      	movs	r3, #0
 8008508:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008510:	78fa      	ldrb	r2, [r7, #3]
 8008512:	4611      	mov	r1, r2
 8008514:	4618      	mov	r0, r3
 8008516:	f7fa fe24 	bl	8003162 <HAL_PCD_EP_ClrStall>
 800851a:	4603      	mov	r3, r0
 800851c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800851e:	7bfb      	ldrb	r3, [r7, #15]
 8008520:	4618      	mov	r0, r3
 8008522:	f000 f8bf 	bl	80086a4 <USBD_Get_USB_Status>
 8008526:	4603      	mov	r3, r0
 8008528:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800852a:	7bbb      	ldrb	r3, [r7, #14]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	460b      	mov	r3, r1
 800853e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008546:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800854c:	2b00      	cmp	r3, #0
 800854e:	da0b      	bge.n	8008568 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008550:	78fb      	ldrb	r3, [r7, #3]
 8008552:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008556:	68f9      	ldr	r1, [r7, #12]
 8008558:	4613      	mov	r3, r2
 800855a:	00db      	lsls	r3, r3, #3
 800855c:	4413      	add	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	440b      	add	r3, r1
 8008562:	3316      	adds	r3, #22
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	e00b      	b.n	8008580 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008568:	78fb      	ldrb	r3, [r7, #3]
 800856a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800856e:	68f9      	ldr	r1, [r7, #12]
 8008570:	4613      	mov	r3, r2
 8008572:	00db      	lsls	r3, r3, #3
 8008574:	4413      	add	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	440b      	add	r3, r1
 800857a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800857e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085a6:	78fa      	ldrb	r2, [r7, #3]
 80085a8:	4611      	mov	r1, r2
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fa fc11 	bl	8002dd2 <HAL_PCD_SetAddress>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 f874 	bl	80086a4 <USBD_Get_USB_Status>
 80085bc:	4603      	mov	r3, r0
 80085be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b086      	sub	sp, #24
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	60f8      	str	r0, [r7, #12]
 80085d2:	607a      	str	r2, [r7, #4]
 80085d4:	603b      	str	r3, [r7, #0]
 80085d6:	460b      	mov	r3, r1
 80085d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80085e8:	7af9      	ldrb	r1, [r7, #11]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	f7fa fd1b 	bl	8003028 <HAL_PCD_EP_Transmit>
 80085f2:	4603      	mov	r3, r0
 80085f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085f6:	7dfb      	ldrb	r3, [r7, #23]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 f853 	bl	80086a4 <USBD_Get_USB_Status>
 80085fe:	4603      	mov	r3, r0
 8008600:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008602:	7dbb      	ldrb	r3, [r7, #22]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3718      	adds	r7, #24
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	607a      	str	r2, [r7, #4]
 8008616:	603b      	str	r3, [r7, #0]
 8008618:	460b      	mov	r3, r1
 800861a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800862a:	7af9      	ldrb	r1, [r7, #11]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	f7fa fca7 	bl	8002f82 <HAL_PCD_EP_Receive>
 8008634:	4603      	mov	r3, r0
 8008636:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008638:	7dfb      	ldrb	r3, [r7, #23]
 800863a:	4618      	mov	r0, r3
 800863c:	f000 f832 	bl	80086a4 <USBD_Get_USB_Status>
 8008640:	4603      	mov	r3, r0
 8008642:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008644:	7dbb      	ldrb	r3, [r7, #22]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3718      	adds	r7, #24
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b082      	sub	sp, #8
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	460b      	mov	r3, r1
 8008658:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008660:	78fa      	ldrb	r2, [r7, #3]
 8008662:	4611      	mov	r1, r2
 8008664:	4618      	mov	r0, r3
 8008666:	f7fa fcc7 	bl	8002ff8 <HAL_PCD_EP_GetRxCount>
 800866a:	4603      	mov	r3, r0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800867c:	4b03      	ldr	r3, [pc, #12]	@ (800868c <USBD_static_malloc+0x18>)
}
 800867e:	4618      	mov	r0, r3
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	20001bd4 	.word	0x20001bd4

08008690 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]

}
 8008698:	bf00      	nop
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	4603      	mov	r3, r0
 80086ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80086b2:	79fb      	ldrb	r3, [r7, #7]
 80086b4:	2b03      	cmp	r3, #3
 80086b6:	d817      	bhi.n	80086e8 <USBD_Get_USB_Status+0x44>
 80086b8:	a201      	add	r2, pc, #4	@ (adr r2, 80086c0 <USBD_Get_USB_Status+0x1c>)
 80086ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086be:	bf00      	nop
 80086c0:	080086d1 	.word	0x080086d1
 80086c4:	080086d7 	.word	0x080086d7
 80086c8:	080086dd 	.word	0x080086dd
 80086cc:	080086e3 	.word	0x080086e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	73fb      	strb	r3, [r7, #15]
    break;
 80086d4:	e00b      	b.n	80086ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086d6:	2303      	movs	r3, #3
 80086d8:	73fb      	strb	r3, [r7, #15]
    break;
 80086da:	e008      	b.n	80086ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086dc:	2301      	movs	r3, #1
 80086de:	73fb      	strb	r3, [r7, #15]
    break;
 80086e0:	e005      	b.n	80086ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086e2:	2303      	movs	r3, #3
 80086e4:	73fb      	strb	r3, [r7, #15]
    break;
 80086e6:	e002      	b.n	80086ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80086e8:	2303      	movs	r3, #3
 80086ea:	73fb      	strb	r3, [r7, #15]
    break;
 80086ec:	bf00      	nop
  }
  return usb_status;
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <sniprintf>:
 80086fc:	b40c      	push	{r2, r3}
 80086fe:	b530      	push	{r4, r5, lr}
 8008700:	4b17      	ldr	r3, [pc, #92]	@ (8008760 <sniprintf+0x64>)
 8008702:	1e0c      	subs	r4, r1, #0
 8008704:	681d      	ldr	r5, [r3, #0]
 8008706:	b09d      	sub	sp, #116	@ 0x74
 8008708:	da08      	bge.n	800871c <sniprintf+0x20>
 800870a:	238b      	movs	r3, #139	@ 0x8b
 800870c:	602b      	str	r3, [r5, #0]
 800870e:	f04f 30ff 	mov.w	r0, #4294967295
 8008712:	b01d      	add	sp, #116	@ 0x74
 8008714:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008718:	b002      	add	sp, #8
 800871a:	4770      	bx	lr
 800871c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008720:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008724:	bf14      	ite	ne
 8008726:	f104 33ff 	addne.w	r3, r4, #4294967295
 800872a:	4623      	moveq	r3, r4
 800872c:	9304      	str	r3, [sp, #16]
 800872e:	9307      	str	r3, [sp, #28]
 8008730:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008734:	9002      	str	r0, [sp, #8]
 8008736:	9006      	str	r0, [sp, #24]
 8008738:	f8ad 3016 	strh.w	r3, [sp, #22]
 800873c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800873e:	ab21      	add	r3, sp, #132	@ 0x84
 8008740:	a902      	add	r1, sp, #8
 8008742:	4628      	mov	r0, r5
 8008744:	9301      	str	r3, [sp, #4]
 8008746:	f000 f995 	bl	8008a74 <_svfiprintf_r>
 800874a:	1c43      	adds	r3, r0, #1
 800874c:	bfbc      	itt	lt
 800874e:	238b      	movlt	r3, #139	@ 0x8b
 8008750:	602b      	strlt	r3, [r5, #0]
 8008752:	2c00      	cmp	r4, #0
 8008754:	d0dd      	beq.n	8008712 <sniprintf+0x16>
 8008756:	9b02      	ldr	r3, [sp, #8]
 8008758:	2200      	movs	r2, #0
 800875a:	701a      	strb	r2, [r3, #0]
 800875c:	e7d9      	b.n	8008712 <sniprintf+0x16>
 800875e:	bf00      	nop
 8008760:	20000100 	.word	0x20000100

08008764 <memset>:
 8008764:	4402      	add	r2, r0
 8008766:	4603      	mov	r3, r0
 8008768:	4293      	cmp	r3, r2
 800876a:	d100      	bne.n	800876e <memset+0xa>
 800876c:	4770      	bx	lr
 800876e:	f803 1b01 	strb.w	r1, [r3], #1
 8008772:	e7f9      	b.n	8008768 <memset+0x4>

08008774 <__errno>:
 8008774:	4b01      	ldr	r3, [pc, #4]	@ (800877c <__errno+0x8>)
 8008776:	6818      	ldr	r0, [r3, #0]
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	20000100 	.word	0x20000100

08008780 <__libc_init_array>:
 8008780:	b570      	push	{r4, r5, r6, lr}
 8008782:	4d0d      	ldr	r5, [pc, #52]	@ (80087b8 <__libc_init_array+0x38>)
 8008784:	4c0d      	ldr	r4, [pc, #52]	@ (80087bc <__libc_init_array+0x3c>)
 8008786:	1b64      	subs	r4, r4, r5
 8008788:	10a4      	asrs	r4, r4, #2
 800878a:	2600      	movs	r6, #0
 800878c:	42a6      	cmp	r6, r4
 800878e:	d109      	bne.n	80087a4 <__libc_init_array+0x24>
 8008790:	4d0b      	ldr	r5, [pc, #44]	@ (80087c0 <__libc_init_array+0x40>)
 8008792:	4c0c      	ldr	r4, [pc, #48]	@ (80087c4 <__libc_init_array+0x44>)
 8008794:	f000 fc66 	bl	8009064 <_init>
 8008798:	1b64      	subs	r4, r4, r5
 800879a:	10a4      	asrs	r4, r4, #2
 800879c:	2600      	movs	r6, #0
 800879e:	42a6      	cmp	r6, r4
 80087a0:	d105      	bne.n	80087ae <__libc_init_array+0x2e>
 80087a2:	bd70      	pop	{r4, r5, r6, pc}
 80087a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80087a8:	4798      	blx	r3
 80087aa:	3601      	adds	r6, #1
 80087ac:	e7ee      	b.n	800878c <__libc_init_array+0xc>
 80087ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80087b2:	4798      	blx	r3
 80087b4:	3601      	adds	r6, #1
 80087b6:	e7f2      	b.n	800879e <__libc_init_array+0x1e>
 80087b8:	08009130 	.word	0x08009130
 80087bc:	08009130 	.word	0x08009130
 80087c0:	08009130 	.word	0x08009130
 80087c4:	08009134 	.word	0x08009134

080087c8 <__retarget_lock_acquire_recursive>:
 80087c8:	4770      	bx	lr

080087ca <__retarget_lock_release_recursive>:
 80087ca:	4770      	bx	lr

080087cc <_free_r>:
 80087cc:	b538      	push	{r3, r4, r5, lr}
 80087ce:	4605      	mov	r5, r0
 80087d0:	2900      	cmp	r1, #0
 80087d2:	d041      	beq.n	8008858 <_free_r+0x8c>
 80087d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087d8:	1f0c      	subs	r4, r1, #4
 80087da:	2b00      	cmp	r3, #0
 80087dc:	bfb8      	it	lt
 80087de:	18e4      	addlt	r4, r4, r3
 80087e0:	f000 f8e0 	bl	80089a4 <__malloc_lock>
 80087e4:	4a1d      	ldr	r2, [pc, #116]	@ (800885c <_free_r+0x90>)
 80087e6:	6813      	ldr	r3, [r2, #0]
 80087e8:	b933      	cbnz	r3, 80087f8 <_free_r+0x2c>
 80087ea:	6063      	str	r3, [r4, #4]
 80087ec:	6014      	str	r4, [r2, #0]
 80087ee:	4628      	mov	r0, r5
 80087f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087f4:	f000 b8dc 	b.w	80089b0 <__malloc_unlock>
 80087f8:	42a3      	cmp	r3, r4
 80087fa:	d908      	bls.n	800880e <_free_r+0x42>
 80087fc:	6820      	ldr	r0, [r4, #0]
 80087fe:	1821      	adds	r1, r4, r0
 8008800:	428b      	cmp	r3, r1
 8008802:	bf01      	itttt	eq
 8008804:	6819      	ldreq	r1, [r3, #0]
 8008806:	685b      	ldreq	r3, [r3, #4]
 8008808:	1809      	addeq	r1, r1, r0
 800880a:	6021      	streq	r1, [r4, #0]
 800880c:	e7ed      	b.n	80087ea <_free_r+0x1e>
 800880e:	461a      	mov	r2, r3
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	b10b      	cbz	r3, 8008818 <_free_r+0x4c>
 8008814:	42a3      	cmp	r3, r4
 8008816:	d9fa      	bls.n	800880e <_free_r+0x42>
 8008818:	6811      	ldr	r1, [r2, #0]
 800881a:	1850      	adds	r0, r2, r1
 800881c:	42a0      	cmp	r0, r4
 800881e:	d10b      	bne.n	8008838 <_free_r+0x6c>
 8008820:	6820      	ldr	r0, [r4, #0]
 8008822:	4401      	add	r1, r0
 8008824:	1850      	adds	r0, r2, r1
 8008826:	4283      	cmp	r3, r0
 8008828:	6011      	str	r1, [r2, #0]
 800882a:	d1e0      	bne.n	80087ee <_free_r+0x22>
 800882c:	6818      	ldr	r0, [r3, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	6053      	str	r3, [r2, #4]
 8008832:	4408      	add	r0, r1
 8008834:	6010      	str	r0, [r2, #0]
 8008836:	e7da      	b.n	80087ee <_free_r+0x22>
 8008838:	d902      	bls.n	8008840 <_free_r+0x74>
 800883a:	230c      	movs	r3, #12
 800883c:	602b      	str	r3, [r5, #0]
 800883e:	e7d6      	b.n	80087ee <_free_r+0x22>
 8008840:	6820      	ldr	r0, [r4, #0]
 8008842:	1821      	adds	r1, r4, r0
 8008844:	428b      	cmp	r3, r1
 8008846:	bf04      	itt	eq
 8008848:	6819      	ldreq	r1, [r3, #0]
 800884a:	685b      	ldreq	r3, [r3, #4]
 800884c:	6063      	str	r3, [r4, #4]
 800884e:	bf04      	itt	eq
 8008850:	1809      	addeq	r1, r1, r0
 8008852:	6021      	streq	r1, [r4, #0]
 8008854:	6054      	str	r4, [r2, #4]
 8008856:	e7ca      	b.n	80087ee <_free_r+0x22>
 8008858:	bd38      	pop	{r3, r4, r5, pc}
 800885a:	bf00      	nop
 800885c:	20001f38 	.word	0x20001f38

08008860 <sbrk_aligned>:
 8008860:	b570      	push	{r4, r5, r6, lr}
 8008862:	4e0f      	ldr	r6, [pc, #60]	@ (80088a0 <sbrk_aligned+0x40>)
 8008864:	460c      	mov	r4, r1
 8008866:	6831      	ldr	r1, [r6, #0]
 8008868:	4605      	mov	r5, r0
 800886a:	b911      	cbnz	r1, 8008872 <sbrk_aligned+0x12>
 800886c:	f000 fba6 	bl	8008fbc <_sbrk_r>
 8008870:	6030      	str	r0, [r6, #0]
 8008872:	4621      	mov	r1, r4
 8008874:	4628      	mov	r0, r5
 8008876:	f000 fba1 	bl	8008fbc <_sbrk_r>
 800887a:	1c43      	adds	r3, r0, #1
 800887c:	d103      	bne.n	8008886 <sbrk_aligned+0x26>
 800887e:	f04f 34ff 	mov.w	r4, #4294967295
 8008882:	4620      	mov	r0, r4
 8008884:	bd70      	pop	{r4, r5, r6, pc}
 8008886:	1cc4      	adds	r4, r0, #3
 8008888:	f024 0403 	bic.w	r4, r4, #3
 800888c:	42a0      	cmp	r0, r4
 800888e:	d0f8      	beq.n	8008882 <sbrk_aligned+0x22>
 8008890:	1a21      	subs	r1, r4, r0
 8008892:	4628      	mov	r0, r5
 8008894:	f000 fb92 	bl	8008fbc <_sbrk_r>
 8008898:	3001      	adds	r0, #1
 800889a:	d1f2      	bne.n	8008882 <sbrk_aligned+0x22>
 800889c:	e7ef      	b.n	800887e <sbrk_aligned+0x1e>
 800889e:	bf00      	nop
 80088a0:	20001f34 	.word	0x20001f34

080088a4 <_malloc_r>:
 80088a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088a8:	1ccd      	adds	r5, r1, #3
 80088aa:	f025 0503 	bic.w	r5, r5, #3
 80088ae:	3508      	adds	r5, #8
 80088b0:	2d0c      	cmp	r5, #12
 80088b2:	bf38      	it	cc
 80088b4:	250c      	movcc	r5, #12
 80088b6:	2d00      	cmp	r5, #0
 80088b8:	4606      	mov	r6, r0
 80088ba:	db01      	blt.n	80088c0 <_malloc_r+0x1c>
 80088bc:	42a9      	cmp	r1, r5
 80088be:	d904      	bls.n	80088ca <_malloc_r+0x26>
 80088c0:	230c      	movs	r3, #12
 80088c2:	6033      	str	r3, [r6, #0]
 80088c4:	2000      	movs	r0, #0
 80088c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089a0 <_malloc_r+0xfc>
 80088ce:	f000 f869 	bl	80089a4 <__malloc_lock>
 80088d2:	f8d8 3000 	ldr.w	r3, [r8]
 80088d6:	461c      	mov	r4, r3
 80088d8:	bb44      	cbnz	r4, 800892c <_malloc_r+0x88>
 80088da:	4629      	mov	r1, r5
 80088dc:	4630      	mov	r0, r6
 80088de:	f7ff ffbf 	bl	8008860 <sbrk_aligned>
 80088e2:	1c43      	adds	r3, r0, #1
 80088e4:	4604      	mov	r4, r0
 80088e6:	d158      	bne.n	800899a <_malloc_r+0xf6>
 80088e8:	f8d8 4000 	ldr.w	r4, [r8]
 80088ec:	4627      	mov	r7, r4
 80088ee:	2f00      	cmp	r7, #0
 80088f0:	d143      	bne.n	800897a <_malloc_r+0xd6>
 80088f2:	2c00      	cmp	r4, #0
 80088f4:	d04b      	beq.n	800898e <_malloc_r+0xea>
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	4639      	mov	r1, r7
 80088fa:	4630      	mov	r0, r6
 80088fc:	eb04 0903 	add.w	r9, r4, r3
 8008900:	f000 fb5c 	bl	8008fbc <_sbrk_r>
 8008904:	4581      	cmp	r9, r0
 8008906:	d142      	bne.n	800898e <_malloc_r+0xea>
 8008908:	6821      	ldr	r1, [r4, #0]
 800890a:	1a6d      	subs	r5, r5, r1
 800890c:	4629      	mov	r1, r5
 800890e:	4630      	mov	r0, r6
 8008910:	f7ff ffa6 	bl	8008860 <sbrk_aligned>
 8008914:	3001      	adds	r0, #1
 8008916:	d03a      	beq.n	800898e <_malloc_r+0xea>
 8008918:	6823      	ldr	r3, [r4, #0]
 800891a:	442b      	add	r3, r5
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	f8d8 3000 	ldr.w	r3, [r8]
 8008922:	685a      	ldr	r2, [r3, #4]
 8008924:	bb62      	cbnz	r2, 8008980 <_malloc_r+0xdc>
 8008926:	f8c8 7000 	str.w	r7, [r8]
 800892a:	e00f      	b.n	800894c <_malloc_r+0xa8>
 800892c:	6822      	ldr	r2, [r4, #0]
 800892e:	1b52      	subs	r2, r2, r5
 8008930:	d420      	bmi.n	8008974 <_malloc_r+0xd0>
 8008932:	2a0b      	cmp	r2, #11
 8008934:	d917      	bls.n	8008966 <_malloc_r+0xc2>
 8008936:	1961      	adds	r1, r4, r5
 8008938:	42a3      	cmp	r3, r4
 800893a:	6025      	str	r5, [r4, #0]
 800893c:	bf18      	it	ne
 800893e:	6059      	strne	r1, [r3, #4]
 8008940:	6863      	ldr	r3, [r4, #4]
 8008942:	bf08      	it	eq
 8008944:	f8c8 1000 	streq.w	r1, [r8]
 8008948:	5162      	str	r2, [r4, r5]
 800894a:	604b      	str	r3, [r1, #4]
 800894c:	4630      	mov	r0, r6
 800894e:	f000 f82f 	bl	80089b0 <__malloc_unlock>
 8008952:	f104 000b 	add.w	r0, r4, #11
 8008956:	1d23      	adds	r3, r4, #4
 8008958:	f020 0007 	bic.w	r0, r0, #7
 800895c:	1ac2      	subs	r2, r0, r3
 800895e:	bf1c      	itt	ne
 8008960:	1a1b      	subne	r3, r3, r0
 8008962:	50a3      	strne	r3, [r4, r2]
 8008964:	e7af      	b.n	80088c6 <_malloc_r+0x22>
 8008966:	6862      	ldr	r2, [r4, #4]
 8008968:	42a3      	cmp	r3, r4
 800896a:	bf0c      	ite	eq
 800896c:	f8c8 2000 	streq.w	r2, [r8]
 8008970:	605a      	strne	r2, [r3, #4]
 8008972:	e7eb      	b.n	800894c <_malloc_r+0xa8>
 8008974:	4623      	mov	r3, r4
 8008976:	6864      	ldr	r4, [r4, #4]
 8008978:	e7ae      	b.n	80088d8 <_malloc_r+0x34>
 800897a:	463c      	mov	r4, r7
 800897c:	687f      	ldr	r7, [r7, #4]
 800897e:	e7b6      	b.n	80088ee <_malloc_r+0x4a>
 8008980:	461a      	mov	r2, r3
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	42a3      	cmp	r3, r4
 8008986:	d1fb      	bne.n	8008980 <_malloc_r+0xdc>
 8008988:	2300      	movs	r3, #0
 800898a:	6053      	str	r3, [r2, #4]
 800898c:	e7de      	b.n	800894c <_malloc_r+0xa8>
 800898e:	230c      	movs	r3, #12
 8008990:	6033      	str	r3, [r6, #0]
 8008992:	4630      	mov	r0, r6
 8008994:	f000 f80c 	bl	80089b0 <__malloc_unlock>
 8008998:	e794      	b.n	80088c4 <_malloc_r+0x20>
 800899a:	6005      	str	r5, [r0, #0]
 800899c:	e7d6      	b.n	800894c <_malloc_r+0xa8>
 800899e:	bf00      	nop
 80089a0:	20001f38 	.word	0x20001f38

080089a4 <__malloc_lock>:
 80089a4:	4801      	ldr	r0, [pc, #4]	@ (80089ac <__malloc_lock+0x8>)
 80089a6:	f7ff bf0f 	b.w	80087c8 <__retarget_lock_acquire_recursive>
 80089aa:	bf00      	nop
 80089ac:	20001f30 	.word	0x20001f30

080089b0 <__malloc_unlock>:
 80089b0:	4801      	ldr	r0, [pc, #4]	@ (80089b8 <__malloc_unlock+0x8>)
 80089b2:	f7ff bf0a 	b.w	80087ca <__retarget_lock_release_recursive>
 80089b6:	bf00      	nop
 80089b8:	20001f30 	.word	0x20001f30

080089bc <__ssputs_r>:
 80089bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c0:	688e      	ldr	r6, [r1, #8]
 80089c2:	461f      	mov	r7, r3
 80089c4:	42be      	cmp	r6, r7
 80089c6:	680b      	ldr	r3, [r1, #0]
 80089c8:	4682      	mov	sl, r0
 80089ca:	460c      	mov	r4, r1
 80089cc:	4690      	mov	r8, r2
 80089ce:	d82d      	bhi.n	8008a2c <__ssputs_r+0x70>
 80089d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80089d8:	d026      	beq.n	8008a28 <__ssputs_r+0x6c>
 80089da:	6965      	ldr	r5, [r4, #20]
 80089dc:	6909      	ldr	r1, [r1, #16]
 80089de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089e2:	eba3 0901 	sub.w	r9, r3, r1
 80089e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089ea:	1c7b      	adds	r3, r7, #1
 80089ec:	444b      	add	r3, r9
 80089ee:	106d      	asrs	r5, r5, #1
 80089f0:	429d      	cmp	r5, r3
 80089f2:	bf38      	it	cc
 80089f4:	461d      	movcc	r5, r3
 80089f6:	0553      	lsls	r3, r2, #21
 80089f8:	d527      	bpl.n	8008a4a <__ssputs_r+0x8e>
 80089fa:	4629      	mov	r1, r5
 80089fc:	f7ff ff52 	bl	80088a4 <_malloc_r>
 8008a00:	4606      	mov	r6, r0
 8008a02:	b360      	cbz	r0, 8008a5e <__ssputs_r+0xa2>
 8008a04:	6921      	ldr	r1, [r4, #16]
 8008a06:	464a      	mov	r2, r9
 8008a08:	f000 fae8 	bl	8008fdc <memcpy>
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a16:	81a3      	strh	r3, [r4, #12]
 8008a18:	6126      	str	r6, [r4, #16]
 8008a1a:	6165      	str	r5, [r4, #20]
 8008a1c:	444e      	add	r6, r9
 8008a1e:	eba5 0509 	sub.w	r5, r5, r9
 8008a22:	6026      	str	r6, [r4, #0]
 8008a24:	60a5      	str	r5, [r4, #8]
 8008a26:	463e      	mov	r6, r7
 8008a28:	42be      	cmp	r6, r7
 8008a2a:	d900      	bls.n	8008a2e <__ssputs_r+0x72>
 8008a2c:	463e      	mov	r6, r7
 8008a2e:	6820      	ldr	r0, [r4, #0]
 8008a30:	4632      	mov	r2, r6
 8008a32:	4641      	mov	r1, r8
 8008a34:	f000 faa8 	bl	8008f88 <memmove>
 8008a38:	68a3      	ldr	r3, [r4, #8]
 8008a3a:	1b9b      	subs	r3, r3, r6
 8008a3c:	60a3      	str	r3, [r4, #8]
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	4433      	add	r3, r6
 8008a42:	6023      	str	r3, [r4, #0]
 8008a44:	2000      	movs	r0, #0
 8008a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a4a:	462a      	mov	r2, r5
 8008a4c:	f000 fad4 	bl	8008ff8 <_realloc_r>
 8008a50:	4606      	mov	r6, r0
 8008a52:	2800      	cmp	r0, #0
 8008a54:	d1e0      	bne.n	8008a18 <__ssputs_r+0x5c>
 8008a56:	6921      	ldr	r1, [r4, #16]
 8008a58:	4650      	mov	r0, sl
 8008a5a:	f7ff feb7 	bl	80087cc <_free_r>
 8008a5e:	230c      	movs	r3, #12
 8008a60:	f8ca 3000 	str.w	r3, [sl]
 8008a64:	89a3      	ldrh	r3, [r4, #12]
 8008a66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a6a:	81a3      	strh	r3, [r4, #12]
 8008a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a70:	e7e9      	b.n	8008a46 <__ssputs_r+0x8a>
	...

08008a74 <_svfiprintf_r>:
 8008a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a78:	4698      	mov	r8, r3
 8008a7a:	898b      	ldrh	r3, [r1, #12]
 8008a7c:	061b      	lsls	r3, r3, #24
 8008a7e:	b09d      	sub	sp, #116	@ 0x74
 8008a80:	4607      	mov	r7, r0
 8008a82:	460d      	mov	r5, r1
 8008a84:	4614      	mov	r4, r2
 8008a86:	d510      	bpl.n	8008aaa <_svfiprintf_r+0x36>
 8008a88:	690b      	ldr	r3, [r1, #16]
 8008a8a:	b973      	cbnz	r3, 8008aaa <_svfiprintf_r+0x36>
 8008a8c:	2140      	movs	r1, #64	@ 0x40
 8008a8e:	f7ff ff09 	bl	80088a4 <_malloc_r>
 8008a92:	6028      	str	r0, [r5, #0]
 8008a94:	6128      	str	r0, [r5, #16]
 8008a96:	b930      	cbnz	r0, 8008aa6 <_svfiprintf_r+0x32>
 8008a98:	230c      	movs	r3, #12
 8008a9a:	603b      	str	r3, [r7, #0]
 8008a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa0:	b01d      	add	sp, #116	@ 0x74
 8008aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa6:	2340      	movs	r3, #64	@ 0x40
 8008aa8:	616b      	str	r3, [r5, #20]
 8008aaa:	2300      	movs	r3, #0
 8008aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aae:	2320      	movs	r3, #32
 8008ab0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ab4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ab8:	2330      	movs	r3, #48	@ 0x30
 8008aba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008c58 <_svfiprintf_r+0x1e4>
 8008abe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ac2:	f04f 0901 	mov.w	r9, #1
 8008ac6:	4623      	mov	r3, r4
 8008ac8:	469a      	mov	sl, r3
 8008aca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ace:	b10a      	cbz	r2, 8008ad4 <_svfiprintf_r+0x60>
 8008ad0:	2a25      	cmp	r2, #37	@ 0x25
 8008ad2:	d1f9      	bne.n	8008ac8 <_svfiprintf_r+0x54>
 8008ad4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ad8:	d00b      	beq.n	8008af2 <_svfiprintf_r+0x7e>
 8008ada:	465b      	mov	r3, fp
 8008adc:	4622      	mov	r2, r4
 8008ade:	4629      	mov	r1, r5
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	f7ff ff6b 	bl	80089bc <__ssputs_r>
 8008ae6:	3001      	adds	r0, #1
 8008ae8:	f000 80a7 	beq.w	8008c3a <_svfiprintf_r+0x1c6>
 8008aec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008aee:	445a      	add	r2, fp
 8008af0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008af2:	f89a 3000 	ldrb.w	r3, [sl]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f000 809f 	beq.w	8008c3a <_svfiprintf_r+0x1c6>
 8008afc:	2300      	movs	r3, #0
 8008afe:	f04f 32ff 	mov.w	r2, #4294967295
 8008b02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b06:	f10a 0a01 	add.w	sl, sl, #1
 8008b0a:	9304      	str	r3, [sp, #16]
 8008b0c:	9307      	str	r3, [sp, #28]
 8008b0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b12:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b14:	4654      	mov	r4, sl
 8008b16:	2205      	movs	r2, #5
 8008b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b1c:	484e      	ldr	r0, [pc, #312]	@ (8008c58 <_svfiprintf_r+0x1e4>)
 8008b1e:	f7f7 fb67 	bl	80001f0 <memchr>
 8008b22:	9a04      	ldr	r2, [sp, #16]
 8008b24:	b9d8      	cbnz	r0, 8008b5e <_svfiprintf_r+0xea>
 8008b26:	06d0      	lsls	r0, r2, #27
 8008b28:	bf44      	itt	mi
 8008b2a:	2320      	movmi	r3, #32
 8008b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b30:	0711      	lsls	r1, r2, #28
 8008b32:	bf44      	itt	mi
 8008b34:	232b      	movmi	r3, #43	@ 0x2b
 8008b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b40:	d015      	beq.n	8008b6e <_svfiprintf_r+0xfa>
 8008b42:	9a07      	ldr	r2, [sp, #28]
 8008b44:	4654      	mov	r4, sl
 8008b46:	2000      	movs	r0, #0
 8008b48:	f04f 0c0a 	mov.w	ip, #10
 8008b4c:	4621      	mov	r1, r4
 8008b4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b52:	3b30      	subs	r3, #48	@ 0x30
 8008b54:	2b09      	cmp	r3, #9
 8008b56:	d94b      	bls.n	8008bf0 <_svfiprintf_r+0x17c>
 8008b58:	b1b0      	cbz	r0, 8008b88 <_svfiprintf_r+0x114>
 8008b5a:	9207      	str	r2, [sp, #28]
 8008b5c:	e014      	b.n	8008b88 <_svfiprintf_r+0x114>
 8008b5e:	eba0 0308 	sub.w	r3, r0, r8
 8008b62:	fa09 f303 	lsl.w	r3, r9, r3
 8008b66:	4313      	orrs	r3, r2
 8008b68:	9304      	str	r3, [sp, #16]
 8008b6a:	46a2      	mov	sl, r4
 8008b6c:	e7d2      	b.n	8008b14 <_svfiprintf_r+0xa0>
 8008b6e:	9b03      	ldr	r3, [sp, #12]
 8008b70:	1d19      	adds	r1, r3, #4
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	9103      	str	r1, [sp, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	bfbb      	ittet	lt
 8008b7a:	425b      	neglt	r3, r3
 8008b7c:	f042 0202 	orrlt.w	r2, r2, #2
 8008b80:	9307      	strge	r3, [sp, #28]
 8008b82:	9307      	strlt	r3, [sp, #28]
 8008b84:	bfb8      	it	lt
 8008b86:	9204      	strlt	r2, [sp, #16]
 8008b88:	7823      	ldrb	r3, [r4, #0]
 8008b8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b8c:	d10a      	bne.n	8008ba4 <_svfiprintf_r+0x130>
 8008b8e:	7863      	ldrb	r3, [r4, #1]
 8008b90:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b92:	d132      	bne.n	8008bfa <_svfiprintf_r+0x186>
 8008b94:	9b03      	ldr	r3, [sp, #12]
 8008b96:	1d1a      	adds	r2, r3, #4
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	9203      	str	r2, [sp, #12]
 8008b9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ba0:	3402      	adds	r4, #2
 8008ba2:	9305      	str	r3, [sp, #20]
 8008ba4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008c68 <_svfiprintf_r+0x1f4>
 8008ba8:	7821      	ldrb	r1, [r4, #0]
 8008baa:	2203      	movs	r2, #3
 8008bac:	4650      	mov	r0, sl
 8008bae:	f7f7 fb1f 	bl	80001f0 <memchr>
 8008bb2:	b138      	cbz	r0, 8008bc4 <_svfiprintf_r+0x150>
 8008bb4:	9b04      	ldr	r3, [sp, #16]
 8008bb6:	eba0 000a 	sub.w	r0, r0, sl
 8008bba:	2240      	movs	r2, #64	@ 0x40
 8008bbc:	4082      	lsls	r2, r0
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	3401      	adds	r4, #1
 8008bc2:	9304      	str	r3, [sp, #16]
 8008bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bc8:	4824      	ldr	r0, [pc, #144]	@ (8008c5c <_svfiprintf_r+0x1e8>)
 8008bca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bce:	2206      	movs	r2, #6
 8008bd0:	f7f7 fb0e 	bl	80001f0 <memchr>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d036      	beq.n	8008c46 <_svfiprintf_r+0x1d2>
 8008bd8:	4b21      	ldr	r3, [pc, #132]	@ (8008c60 <_svfiprintf_r+0x1ec>)
 8008bda:	bb1b      	cbnz	r3, 8008c24 <_svfiprintf_r+0x1b0>
 8008bdc:	9b03      	ldr	r3, [sp, #12]
 8008bde:	3307      	adds	r3, #7
 8008be0:	f023 0307 	bic.w	r3, r3, #7
 8008be4:	3308      	adds	r3, #8
 8008be6:	9303      	str	r3, [sp, #12]
 8008be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bea:	4433      	add	r3, r6
 8008bec:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bee:	e76a      	b.n	8008ac6 <_svfiprintf_r+0x52>
 8008bf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bf4:	460c      	mov	r4, r1
 8008bf6:	2001      	movs	r0, #1
 8008bf8:	e7a8      	b.n	8008b4c <_svfiprintf_r+0xd8>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	3401      	adds	r4, #1
 8008bfe:	9305      	str	r3, [sp, #20]
 8008c00:	4619      	mov	r1, r3
 8008c02:	f04f 0c0a 	mov.w	ip, #10
 8008c06:	4620      	mov	r0, r4
 8008c08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c0c:	3a30      	subs	r2, #48	@ 0x30
 8008c0e:	2a09      	cmp	r2, #9
 8008c10:	d903      	bls.n	8008c1a <_svfiprintf_r+0x1a6>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d0c6      	beq.n	8008ba4 <_svfiprintf_r+0x130>
 8008c16:	9105      	str	r1, [sp, #20]
 8008c18:	e7c4      	b.n	8008ba4 <_svfiprintf_r+0x130>
 8008c1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c1e:	4604      	mov	r4, r0
 8008c20:	2301      	movs	r3, #1
 8008c22:	e7f0      	b.n	8008c06 <_svfiprintf_r+0x192>
 8008c24:	ab03      	add	r3, sp, #12
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	462a      	mov	r2, r5
 8008c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8008c64 <_svfiprintf_r+0x1f0>)
 8008c2c:	a904      	add	r1, sp, #16
 8008c2e:	4638      	mov	r0, r7
 8008c30:	f3af 8000 	nop.w
 8008c34:	1c42      	adds	r2, r0, #1
 8008c36:	4606      	mov	r6, r0
 8008c38:	d1d6      	bne.n	8008be8 <_svfiprintf_r+0x174>
 8008c3a:	89ab      	ldrh	r3, [r5, #12]
 8008c3c:	065b      	lsls	r3, r3, #25
 8008c3e:	f53f af2d 	bmi.w	8008a9c <_svfiprintf_r+0x28>
 8008c42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c44:	e72c      	b.n	8008aa0 <_svfiprintf_r+0x2c>
 8008c46:	ab03      	add	r3, sp, #12
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	462a      	mov	r2, r5
 8008c4c:	4b05      	ldr	r3, [pc, #20]	@ (8008c64 <_svfiprintf_r+0x1f0>)
 8008c4e:	a904      	add	r1, sp, #16
 8008c50:	4638      	mov	r0, r7
 8008c52:	f000 f879 	bl	8008d48 <_printf_i>
 8008c56:	e7ed      	b.n	8008c34 <_svfiprintf_r+0x1c0>
 8008c58:	080090f4 	.word	0x080090f4
 8008c5c:	080090fe 	.word	0x080090fe
 8008c60:	00000000 	.word	0x00000000
 8008c64:	080089bd 	.word	0x080089bd
 8008c68:	080090fa 	.word	0x080090fa

08008c6c <_printf_common>:
 8008c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c70:	4616      	mov	r6, r2
 8008c72:	4698      	mov	r8, r3
 8008c74:	688a      	ldr	r2, [r1, #8]
 8008c76:	690b      	ldr	r3, [r1, #16]
 8008c78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	bfb8      	it	lt
 8008c80:	4613      	movlt	r3, r2
 8008c82:	6033      	str	r3, [r6, #0]
 8008c84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c88:	4607      	mov	r7, r0
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	b10a      	cbz	r2, 8008c92 <_printf_common+0x26>
 8008c8e:	3301      	adds	r3, #1
 8008c90:	6033      	str	r3, [r6, #0]
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	0699      	lsls	r1, r3, #26
 8008c96:	bf42      	ittt	mi
 8008c98:	6833      	ldrmi	r3, [r6, #0]
 8008c9a:	3302      	addmi	r3, #2
 8008c9c:	6033      	strmi	r3, [r6, #0]
 8008c9e:	6825      	ldr	r5, [r4, #0]
 8008ca0:	f015 0506 	ands.w	r5, r5, #6
 8008ca4:	d106      	bne.n	8008cb4 <_printf_common+0x48>
 8008ca6:	f104 0a19 	add.w	sl, r4, #25
 8008caa:	68e3      	ldr	r3, [r4, #12]
 8008cac:	6832      	ldr	r2, [r6, #0]
 8008cae:	1a9b      	subs	r3, r3, r2
 8008cb0:	42ab      	cmp	r3, r5
 8008cb2:	dc26      	bgt.n	8008d02 <_printf_common+0x96>
 8008cb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008cb8:	6822      	ldr	r2, [r4, #0]
 8008cba:	3b00      	subs	r3, #0
 8008cbc:	bf18      	it	ne
 8008cbe:	2301      	movne	r3, #1
 8008cc0:	0692      	lsls	r2, r2, #26
 8008cc2:	d42b      	bmi.n	8008d1c <_printf_common+0xb0>
 8008cc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008cc8:	4641      	mov	r1, r8
 8008cca:	4638      	mov	r0, r7
 8008ccc:	47c8      	blx	r9
 8008cce:	3001      	adds	r0, #1
 8008cd0:	d01e      	beq.n	8008d10 <_printf_common+0xa4>
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	6922      	ldr	r2, [r4, #16]
 8008cd6:	f003 0306 	and.w	r3, r3, #6
 8008cda:	2b04      	cmp	r3, #4
 8008cdc:	bf02      	ittt	eq
 8008cde:	68e5      	ldreq	r5, [r4, #12]
 8008ce0:	6833      	ldreq	r3, [r6, #0]
 8008ce2:	1aed      	subeq	r5, r5, r3
 8008ce4:	68a3      	ldr	r3, [r4, #8]
 8008ce6:	bf0c      	ite	eq
 8008ce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cec:	2500      	movne	r5, #0
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	bfc4      	itt	gt
 8008cf2:	1a9b      	subgt	r3, r3, r2
 8008cf4:	18ed      	addgt	r5, r5, r3
 8008cf6:	2600      	movs	r6, #0
 8008cf8:	341a      	adds	r4, #26
 8008cfa:	42b5      	cmp	r5, r6
 8008cfc:	d11a      	bne.n	8008d34 <_printf_common+0xc8>
 8008cfe:	2000      	movs	r0, #0
 8008d00:	e008      	b.n	8008d14 <_printf_common+0xa8>
 8008d02:	2301      	movs	r3, #1
 8008d04:	4652      	mov	r2, sl
 8008d06:	4641      	mov	r1, r8
 8008d08:	4638      	mov	r0, r7
 8008d0a:	47c8      	blx	r9
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	d103      	bne.n	8008d18 <_printf_common+0xac>
 8008d10:	f04f 30ff 	mov.w	r0, #4294967295
 8008d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d18:	3501      	adds	r5, #1
 8008d1a:	e7c6      	b.n	8008caa <_printf_common+0x3e>
 8008d1c:	18e1      	adds	r1, r4, r3
 8008d1e:	1c5a      	adds	r2, r3, #1
 8008d20:	2030      	movs	r0, #48	@ 0x30
 8008d22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d26:	4422      	add	r2, r4
 8008d28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d30:	3302      	adds	r3, #2
 8008d32:	e7c7      	b.n	8008cc4 <_printf_common+0x58>
 8008d34:	2301      	movs	r3, #1
 8008d36:	4622      	mov	r2, r4
 8008d38:	4641      	mov	r1, r8
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	47c8      	blx	r9
 8008d3e:	3001      	adds	r0, #1
 8008d40:	d0e6      	beq.n	8008d10 <_printf_common+0xa4>
 8008d42:	3601      	adds	r6, #1
 8008d44:	e7d9      	b.n	8008cfa <_printf_common+0x8e>
	...

08008d48 <_printf_i>:
 8008d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d4c:	7e0f      	ldrb	r7, [r1, #24]
 8008d4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d50:	2f78      	cmp	r7, #120	@ 0x78
 8008d52:	4691      	mov	r9, r2
 8008d54:	4680      	mov	r8, r0
 8008d56:	460c      	mov	r4, r1
 8008d58:	469a      	mov	sl, r3
 8008d5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d5e:	d807      	bhi.n	8008d70 <_printf_i+0x28>
 8008d60:	2f62      	cmp	r7, #98	@ 0x62
 8008d62:	d80a      	bhi.n	8008d7a <_printf_i+0x32>
 8008d64:	2f00      	cmp	r7, #0
 8008d66:	f000 80d2 	beq.w	8008f0e <_printf_i+0x1c6>
 8008d6a:	2f58      	cmp	r7, #88	@ 0x58
 8008d6c:	f000 80b9 	beq.w	8008ee2 <_printf_i+0x19a>
 8008d70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d78:	e03a      	b.n	8008df0 <_printf_i+0xa8>
 8008d7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d7e:	2b15      	cmp	r3, #21
 8008d80:	d8f6      	bhi.n	8008d70 <_printf_i+0x28>
 8008d82:	a101      	add	r1, pc, #4	@ (adr r1, 8008d88 <_printf_i+0x40>)
 8008d84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d88:	08008de1 	.word	0x08008de1
 8008d8c:	08008df5 	.word	0x08008df5
 8008d90:	08008d71 	.word	0x08008d71
 8008d94:	08008d71 	.word	0x08008d71
 8008d98:	08008d71 	.word	0x08008d71
 8008d9c:	08008d71 	.word	0x08008d71
 8008da0:	08008df5 	.word	0x08008df5
 8008da4:	08008d71 	.word	0x08008d71
 8008da8:	08008d71 	.word	0x08008d71
 8008dac:	08008d71 	.word	0x08008d71
 8008db0:	08008d71 	.word	0x08008d71
 8008db4:	08008ef5 	.word	0x08008ef5
 8008db8:	08008e1f 	.word	0x08008e1f
 8008dbc:	08008eaf 	.word	0x08008eaf
 8008dc0:	08008d71 	.word	0x08008d71
 8008dc4:	08008d71 	.word	0x08008d71
 8008dc8:	08008f17 	.word	0x08008f17
 8008dcc:	08008d71 	.word	0x08008d71
 8008dd0:	08008e1f 	.word	0x08008e1f
 8008dd4:	08008d71 	.word	0x08008d71
 8008dd8:	08008d71 	.word	0x08008d71
 8008ddc:	08008eb7 	.word	0x08008eb7
 8008de0:	6833      	ldr	r3, [r6, #0]
 8008de2:	1d1a      	adds	r2, r3, #4
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6032      	str	r2, [r6, #0]
 8008de8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008dec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008df0:	2301      	movs	r3, #1
 8008df2:	e09d      	b.n	8008f30 <_printf_i+0x1e8>
 8008df4:	6833      	ldr	r3, [r6, #0]
 8008df6:	6820      	ldr	r0, [r4, #0]
 8008df8:	1d19      	adds	r1, r3, #4
 8008dfa:	6031      	str	r1, [r6, #0]
 8008dfc:	0606      	lsls	r6, r0, #24
 8008dfe:	d501      	bpl.n	8008e04 <_printf_i+0xbc>
 8008e00:	681d      	ldr	r5, [r3, #0]
 8008e02:	e003      	b.n	8008e0c <_printf_i+0xc4>
 8008e04:	0645      	lsls	r5, r0, #25
 8008e06:	d5fb      	bpl.n	8008e00 <_printf_i+0xb8>
 8008e08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e0c:	2d00      	cmp	r5, #0
 8008e0e:	da03      	bge.n	8008e18 <_printf_i+0xd0>
 8008e10:	232d      	movs	r3, #45	@ 0x2d
 8008e12:	426d      	negs	r5, r5
 8008e14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e18:	4859      	ldr	r0, [pc, #356]	@ (8008f80 <_printf_i+0x238>)
 8008e1a:	230a      	movs	r3, #10
 8008e1c:	e011      	b.n	8008e42 <_printf_i+0xfa>
 8008e1e:	6821      	ldr	r1, [r4, #0]
 8008e20:	6833      	ldr	r3, [r6, #0]
 8008e22:	0608      	lsls	r0, r1, #24
 8008e24:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e28:	d402      	bmi.n	8008e30 <_printf_i+0xe8>
 8008e2a:	0649      	lsls	r1, r1, #25
 8008e2c:	bf48      	it	mi
 8008e2e:	b2ad      	uxthmi	r5, r5
 8008e30:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e32:	4853      	ldr	r0, [pc, #332]	@ (8008f80 <_printf_i+0x238>)
 8008e34:	6033      	str	r3, [r6, #0]
 8008e36:	bf14      	ite	ne
 8008e38:	230a      	movne	r3, #10
 8008e3a:	2308      	moveq	r3, #8
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e42:	6866      	ldr	r6, [r4, #4]
 8008e44:	60a6      	str	r6, [r4, #8]
 8008e46:	2e00      	cmp	r6, #0
 8008e48:	bfa2      	ittt	ge
 8008e4a:	6821      	ldrge	r1, [r4, #0]
 8008e4c:	f021 0104 	bicge.w	r1, r1, #4
 8008e50:	6021      	strge	r1, [r4, #0]
 8008e52:	b90d      	cbnz	r5, 8008e58 <_printf_i+0x110>
 8008e54:	2e00      	cmp	r6, #0
 8008e56:	d04b      	beq.n	8008ef0 <_printf_i+0x1a8>
 8008e58:	4616      	mov	r6, r2
 8008e5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e5e:	fb03 5711 	mls	r7, r3, r1, r5
 8008e62:	5dc7      	ldrb	r7, [r0, r7]
 8008e64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e68:	462f      	mov	r7, r5
 8008e6a:	42bb      	cmp	r3, r7
 8008e6c:	460d      	mov	r5, r1
 8008e6e:	d9f4      	bls.n	8008e5a <_printf_i+0x112>
 8008e70:	2b08      	cmp	r3, #8
 8008e72:	d10b      	bne.n	8008e8c <_printf_i+0x144>
 8008e74:	6823      	ldr	r3, [r4, #0]
 8008e76:	07df      	lsls	r7, r3, #31
 8008e78:	d508      	bpl.n	8008e8c <_printf_i+0x144>
 8008e7a:	6923      	ldr	r3, [r4, #16]
 8008e7c:	6861      	ldr	r1, [r4, #4]
 8008e7e:	4299      	cmp	r1, r3
 8008e80:	bfde      	ittt	le
 8008e82:	2330      	movle	r3, #48	@ 0x30
 8008e84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e8c:	1b92      	subs	r2, r2, r6
 8008e8e:	6122      	str	r2, [r4, #16]
 8008e90:	f8cd a000 	str.w	sl, [sp]
 8008e94:	464b      	mov	r3, r9
 8008e96:	aa03      	add	r2, sp, #12
 8008e98:	4621      	mov	r1, r4
 8008e9a:	4640      	mov	r0, r8
 8008e9c:	f7ff fee6 	bl	8008c6c <_printf_common>
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	d14a      	bne.n	8008f3a <_printf_i+0x1f2>
 8008ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea8:	b004      	add	sp, #16
 8008eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eae:	6823      	ldr	r3, [r4, #0]
 8008eb0:	f043 0320 	orr.w	r3, r3, #32
 8008eb4:	6023      	str	r3, [r4, #0]
 8008eb6:	4833      	ldr	r0, [pc, #204]	@ (8008f84 <_printf_i+0x23c>)
 8008eb8:	2778      	movs	r7, #120	@ 0x78
 8008eba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	6831      	ldr	r1, [r6, #0]
 8008ec2:	061f      	lsls	r7, r3, #24
 8008ec4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ec8:	d402      	bmi.n	8008ed0 <_printf_i+0x188>
 8008eca:	065f      	lsls	r7, r3, #25
 8008ecc:	bf48      	it	mi
 8008ece:	b2ad      	uxthmi	r5, r5
 8008ed0:	6031      	str	r1, [r6, #0]
 8008ed2:	07d9      	lsls	r1, r3, #31
 8008ed4:	bf44      	itt	mi
 8008ed6:	f043 0320 	orrmi.w	r3, r3, #32
 8008eda:	6023      	strmi	r3, [r4, #0]
 8008edc:	b11d      	cbz	r5, 8008ee6 <_printf_i+0x19e>
 8008ede:	2310      	movs	r3, #16
 8008ee0:	e7ac      	b.n	8008e3c <_printf_i+0xf4>
 8008ee2:	4827      	ldr	r0, [pc, #156]	@ (8008f80 <_printf_i+0x238>)
 8008ee4:	e7e9      	b.n	8008eba <_printf_i+0x172>
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	f023 0320 	bic.w	r3, r3, #32
 8008eec:	6023      	str	r3, [r4, #0]
 8008eee:	e7f6      	b.n	8008ede <_printf_i+0x196>
 8008ef0:	4616      	mov	r6, r2
 8008ef2:	e7bd      	b.n	8008e70 <_printf_i+0x128>
 8008ef4:	6833      	ldr	r3, [r6, #0]
 8008ef6:	6825      	ldr	r5, [r4, #0]
 8008ef8:	6961      	ldr	r1, [r4, #20]
 8008efa:	1d18      	adds	r0, r3, #4
 8008efc:	6030      	str	r0, [r6, #0]
 8008efe:	062e      	lsls	r6, r5, #24
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	d501      	bpl.n	8008f08 <_printf_i+0x1c0>
 8008f04:	6019      	str	r1, [r3, #0]
 8008f06:	e002      	b.n	8008f0e <_printf_i+0x1c6>
 8008f08:	0668      	lsls	r0, r5, #25
 8008f0a:	d5fb      	bpl.n	8008f04 <_printf_i+0x1bc>
 8008f0c:	8019      	strh	r1, [r3, #0]
 8008f0e:	2300      	movs	r3, #0
 8008f10:	6123      	str	r3, [r4, #16]
 8008f12:	4616      	mov	r6, r2
 8008f14:	e7bc      	b.n	8008e90 <_printf_i+0x148>
 8008f16:	6833      	ldr	r3, [r6, #0]
 8008f18:	1d1a      	adds	r2, r3, #4
 8008f1a:	6032      	str	r2, [r6, #0]
 8008f1c:	681e      	ldr	r6, [r3, #0]
 8008f1e:	6862      	ldr	r2, [r4, #4]
 8008f20:	2100      	movs	r1, #0
 8008f22:	4630      	mov	r0, r6
 8008f24:	f7f7 f964 	bl	80001f0 <memchr>
 8008f28:	b108      	cbz	r0, 8008f2e <_printf_i+0x1e6>
 8008f2a:	1b80      	subs	r0, r0, r6
 8008f2c:	6060      	str	r0, [r4, #4]
 8008f2e:	6863      	ldr	r3, [r4, #4]
 8008f30:	6123      	str	r3, [r4, #16]
 8008f32:	2300      	movs	r3, #0
 8008f34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f38:	e7aa      	b.n	8008e90 <_printf_i+0x148>
 8008f3a:	6923      	ldr	r3, [r4, #16]
 8008f3c:	4632      	mov	r2, r6
 8008f3e:	4649      	mov	r1, r9
 8008f40:	4640      	mov	r0, r8
 8008f42:	47d0      	blx	sl
 8008f44:	3001      	adds	r0, #1
 8008f46:	d0ad      	beq.n	8008ea4 <_printf_i+0x15c>
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	079b      	lsls	r3, r3, #30
 8008f4c:	d413      	bmi.n	8008f76 <_printf_i+0x22e>
 8008f4e:	68e0      	ldr	r0, [r4, #12]
 8008f50:	9b03      	ldr	r3, [sp, #12]
 8008f52:	4298      	cmp	r0, r3
 8008f54:	bfb8      	it	lt
 8008f56:	4618      	movlt	r0, r3
 8008f58:	e7a6      	b.n	8008ea8 <_printf_i+0x160>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	4632      	mov	r2, r6
 8008f5e:	4649      	mov	r1, r9
 8008f60:	4640      	mov	r0, r8
 8008f62:	47d0      	blx	sl
 8008f64:	3001      	adds	r0, #1
 8008f66:	d09d      	beq.n	8008ea4 <_printf_i+0x15c>
 8008f68:	3501      	adds	r5, #1
 8008f6a:	68e3      	ldr	r3, [r4, #12]
 8008f6c:	9903      	ldr	r1, [sp, #12]
 8008f6e:	1a5b      	subs	r3, r3, r1
 8008f70:	42ab      	cmp	r3, r5
 8008f72:	dcf2      	bgt.n	8008f5a <_printf_i+0x212>
 8008f74:	e7eb      	b.n	8008f4e <_printf_i+0x206>
 8008f76:	2500      	movs	r5, #0
 8008f78:	f104 0619 	add.w	r6, r4, #25
 8008f7c:	e7f5      	b.n	8008f6a <_printf_i+0x222>
 8008f7e:	bf00      	nop
 8008f80:	08009105 	.word	0x08009105
 8008f84:	08009116 	.word	0x08009116

08008f88 <memmove>:
 8008f88:	4288      	cmp	r0, r1
 8008f8a:	b510      	push	{r4, lr}
 8008f8c:	eb01 0402 	add.w	r4, r1, r2
 8008f90:	d902      	bls.n	8008f98 <memmove+0x10>
 8008f92:	4284      	cmp	r4, r0
 8008f94:	4623      	mov	r3, r4
 8008f96:	d807      	bhi.n	8008fa8 <memmove+0x20>
 8008f98:	1e43      	subs	r3, r0, #1
 8008f9a:	42a1      	cmp	r1, r4
 8008f9c:	d008      	beq.n	8008fb0 <memmove+0x28>
 8008f9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fa6:	e7f8      	b.n	8008f9a <memmove+0x12>
 8008fa8:	4402      	add	r2, r0
 8008faa:	4601      	mov	r1, r0
 8008fac:	428a      	cmp	r2, r1
 8008fae:	d100      	bne.n	8008fb2 <memmove+0x2a>
 8008fb0:	bd10      	pop	{r4, pc}
 8008fb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fba:	e7f7      	b.n	8008fac <memmove+0x24>

08008fbc <_sbrk_r>:
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	4d06      	ldr	r5, [pc, #24]	@ (8008fd8 <_sbrk_r+0x1c>)
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	4608      	mov	r0, r1
 8008fc6:	602b      	str	r3, [r5, #0]
 8008fc8:	f7f7 fd6c 	bl	8000aa4 <_sbrk>
 8008fcc:	1c43      	adds	r3, r0, #1
 8008fce:	d102      	bne.n	8008fd6 <_sbrk_r+0x1a>
 8008fd0:	682b      	ldr	r3, [r5, #0]
 8008fd2:	b103      	cbz	r3, 8008fd6 <_sbrk_r+0x1a>
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	bd38      	pop	{r3, r4, r5, pc}
 8008fd8:	20001f2c 	.word	0x20001f2c

08008fdc <memcpy>:
 8008fdc:	440a      	add	r2, r1
 8008fde:	4291      	cmp	r1, r2
 8008fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fe4:	d100      	bne.n	8008fe8 <memcpy+0xc>
 8008fe6:	4770      	bx	lr
 8008fe8:	b510      	push	{r4, lr}
 8008fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ff2:	4291      	cmp	r1, r2
 8008ff4:	d1f9      	bne.n	8008fea <memcpy+0xe>
 8008ff6:	bd10      	pop	{r4, pc}

08008ff8 <_realloc_r>:
 8008ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ffc:	4680      	mov	r8, r0
 8008ffe:	4615      	mov	r5, r2
 8009000:	460c      	mov	r4, r1
 8009002:	b921      	cbnz	r1, 800900e <_realloc_r+0x16>
 8009004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009008:	4611      	mov	r1, r2
 800900a:	f7ff bc4b 	b.w	80088a4 <_malloc_r>
 800900e:	b92a      	cbnz	r2, 800901c <_realloc_r+0x24>
 8009010:	f7ff fbdc 	bl	80087cc <_free_r>
 8009014:	2400      	movs	r4, #0
 8009016:	4620      	mov	r0, r4
 8009018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800901c:	f000 f81a 	bl	8009054 <_malloc_usable_size_r>
 8009020:	4285      	cmp	r5, r0
 8009022:	4606      	mov	r6, r0
 8009024:	d802      	bhi.n	800902c <_realloc_r+0x34>
 8009026:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800902a:	d8f4      	bhi.n	8009016 <_realloc_r+0x1e>
 800902c:	4629      	mov	r1, r5
 800902e:	4640      	mov	r0, r8
 8009030:	f7ff fc38 	bl	80088a4 <_malloc_r>
 8009034:	4607      	mov	r7, r0
 8009036:	2800      	cmp	r0, #0
 8009038:	d0ec      	beq.n	8009014 <_realloc_r+0x1c>
 800903a:	42b5      	cmp	r5, r6
 800903c:	462a      	mov	r2, r5
 800903e:	4621      	mov	r1, r4
 8009040:	bf28      	it	cs
 8009042:	4632      	movcs	r2, r6
 8009044:	f7ff ffca 	bl	8008fdc <memcpy>
 8009048:	4621      	mov	r1, r4
 800904a:	4640      	mov	r0, r8
 800904c:	f7ff fbbe 	bl	80087cc <_free_r>
 8009050:	463c      	mov	r4, r7
 8009052:	e7e0      	b.n	8009016 <_realloc_r+0x1e>

08009054 <_malloc_usable_size_r>:
 8009054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009058:	1f18      	subs	r0, r3, #4
 800905a:	2b00      	cmp	r3, #0
 800905c:	bfbc      	itt	lt
 800905e:	580b      	ldrlt	r3, [r1, r0]
 8009060:	18c0      	addlt	r0, r0, r3
 8009062:	4770      	bx	lr

08009064 <_init>:
 8009064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009066:	bf00      	nop
 8009068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800906a:	bc08      	pop	{r3}
 800906c:	469e      	mov	lr, r3
 800906e:	4770      	bx	lr

08009070 <_fini>:
 8009070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009072:	bf00      	nop
 8009074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009076:	bc08      	pop	{r3}
 8009078:	469e      	mov	lr, r3
 800907a:	4770      	bx	lr
