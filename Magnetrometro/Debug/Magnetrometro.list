
Magnetrometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eba0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  0800ed40  0800ed40  0000fd40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2b0  0800f2b0  000112c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2b0  0800f2b0  000102b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2b8  0800f2b8  000112c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2b8  0800f2b8  000102b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f2bc  0800f2bc  000102bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  0800f2c0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e44  200002c8  0800f588  000112c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000210c  0800f588  0001210c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000112c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a56  00000000  00000000  000112f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003969  00000000  00000000  00029d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  0002d6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000116a  00000000  00000000  0002ed20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a881  00000000  00000000  0002fe8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c5fb  00000000  00000000  0004a70b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096ece  00000000  00000000  00066d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fdbd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075b0  00000000  00000000  000fdc18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001051c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c8 	.word	0x200002c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ed28 	.word	0x0800ed28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	0800ed28 	.word	0x0800ed28

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <QMC5883L_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Función para inicializar el sensor QMC5883L
void QMC5883L_Init() {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af02      	add	r7, sp, #8
    uint8_t data[2];
    data[0] = 0x0B; // Registro de configuración 2
 8000ffa:	230b      	movs	r3, #11
 8000ffc:	713b      	strb	r3, [r7, #4]
    data[1] = 0x01; // Reinicio de software
 8000ffe:	2301      	movs	r3, #1
 8001000:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c2, QMC5883L_ADDR, data, 2, HAL_MAX_DELAY);
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <QMC5883L_Init+0x4c>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	4619      	mov	r1, r3
 8001008:	1d3a      	adds	r2, r7, #4
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2302      	movs	r3, #2
 8001012:	480c      	ldr	r0, [pc, #48]	@ (8001044 <QMC5883L_Init+0x50>)
 8001014:	f001 f9e8 	bl	80023e8 <HAL_I2C_Master_Transmit>

    data[0] = 0x09; // Registro de control
 8001018:	2309      	movs	r3, #9
 800101a:	713b      	strb	r3, [r7, #4]
    data[1] = 0x1D; // Configuración (ODR = 50Hz, RNG = 2G, OSR = 512)
 800101c:	231d      	movs	r3, #29
 800101e:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c2, QMC5883L_ADDR, data, 2, HAL_MAX_DELAY);
 8001020:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <QMC5883L_Init+0x4c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	1d3a      	adds	r2, r7, #4
 8001028:	f04f 33ff 	mov.w	r3, #4294967295
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2302      	movs	r3, #2
 8001030:	4804      	ldr	r0, [pc, #16]	@ (8001044 <QMC5883L_Init+0x50>)
 8001032:	f001 f9d9 	bl	80023e8 <HAL_I2C_Master_Transmit>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000000 	.word	0x20000000
 8001044:	200002f0 	.word	0x200002f0

08001048 <QMC5883L_Read>:
// Función para leer los datos de los ejes X, Y, Z
void QMC5883L_Read(int16_t *x, int16_t *y, int16_t *z, float *angulo) {
 8001048:	b5b0      	push	{r4, r5, r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af04      	add	r7, sp, #16
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	603b      	str	r3, [r7, #0]
    uint8_t data[6];
    HAL_I2C_Mem_Read(&hi2c2, QMC5883L_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, data, 6, HAL_MAX_DELAY);
 8001056:	4b44      	ldr	r3, [pc, #272]	@ (8001168 <QMC5883L_Read+0x120>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	9302      	str	r3, [sp, #8]
 8001062:	2306      	movs	r3, #6
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	2200      	movs	r2, #0
 8001070:	483e      	ldr	r0, [pc, #248]	@ (800116c <QMC5883L_Read+0x124>)
 8001072:	f001 fab7 	bl	80025e4 <HAL_I2C_Mem_Read>

    *x = (int16_t)((data[1] << 8) | data[0]) - x_offset;
 8001076:	7c7b      	ldrb	r3, [r7, #17]
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	b21a      	sxth	r2, r3
 800107c:	7c3b      	ldrb	r3, [r7, #16]
 800107e:	b21b      	sxth	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	b21b      	sxth	r3, r3
 8001084:	b29a      	uxth	r2, r3
 8001086:	4b3a      	ldr	r3, [pc, #232]	@ (8001170 <QMC5883L_Read+0x128>)
 8001088:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108c:	b29b      	uxth	r3, r3
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	b29b      	uxth	r3, r3
 8001092:	b21a      	sxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((data[3] << 8) | data[2]) - y_offset;
 8001098:	7cfb      	ldrb	r3, [r7, #19]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	b21a      	sxth	r2, r3
 800109e:	7cbb      	ldrb	r3, [r7, #18]
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	4b32      	ldr	r3, [pc, #200]	@ (8001174 <QMC5883L_Read+0x12c>)
 80010aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((data[5] << 8) | data[4]);
 80010ba:	7d7b      	ldrb	r3, [r7, #21]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	7d3b      	ldrb	r3, [r7, #20]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	801a      	strh	r2, [r3, #0]

    // Calcular el ángulo en grados
    *angulo = atan2((float)*y, (float)*x) * (180.0 / M_PI);
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010da:	ee17 0a90 	vmov	r0, s15
 80010de:	f7ff fa3b 	bl	8000558 <__aeabi_f2d>
 80010e2:	4604      	mov	r4, r0
 80010e4:	460d      	mov	r5, r1
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f4:	ee17 0a90 	vmov	r0, s15
 80010f8:	f7ff fa2e 	bl	8000558 <__aeabi_f2d>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	ec43 2b11 	vmov	d1, r2, r3
 8001104:	ec45 4b10 	vmov	d0, r4, r5
 8001108:	f00d fba4 	bl	800e854 <atan2>
 800110c:	ec51 0b10 	vmov	r0, r1, d0
 8001110:	a313      	add	r3, pc, #76	@ (adr r3, 8001160 <QMC5883L_Read+0x118>)
 8001112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001116:	f7ff fa77 	bl	8000608 <__aeabi_dmul>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff fd69 	bl	8000bf8 <__aeabi_d2f>
 8001126:	4602      	mov	r2, r0
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	601a      	str	r2, [r3, #0]
    if (*angulo < 0) {
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	edd3 7a00 	vldr	s15, [r3]
 8001132:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113a:	d400      	bmi.n	800113e <QMC5883L_Read+0xf6>
        *angulo += 360.0;  // Ajuste para obtener el ángulo en [0, 360] grados
    }
}
 800113c:	e009      	b.n	8001152 <QMC5883L_Read+0x10a>
        *angulo += 360.0;  // Ajuste para obtener el ángulo en [0, 360] grados
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	edd3 7a00 	vldr	s15, [r3]
 8001144:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001178 <QMC5883L_Read+0x130>
 8001148:	ee77 7a87 	vadd.f32	s15, s15, s14
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	edc3 7a00 	vstr	s15, [r3]
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bdb0      	pop	{r4, r5, r7, pc}
 800115a:	bf00      	nop
 800115c:	f3af 8000 	nop.w
 8001160:	1a63c1f8 	.word	0x1a63c1f8
 8001164:	404ca5dc 	.word	0x404ca5dc
 8001168:	20000000 	.word	0x20000000
 800116c:	200002f0 	.word	0x200002f0
 8001170:	200002e4 	.word	0x200002e4
 8001174:	200002e6 	.word	0x200002e6
 8001178:	43b40000 	.word	0x43b40000

0800117c <Calibrate_Sensor>:
void Calibrate_Sensor() {
 800117c:	b580      	push	{r7, lr}
 800117e:	b094      	sub	sp, #80	@ 0x50
 8001180:	af00      	add	r7, sp, #0
    int16_t x_min = 32767, x_max = -32768;
 8001182:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001186:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800118a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800118e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    int16_t y_min = 32767, y_max = -32768;
 8001192:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001196:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800119a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800119e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    uint32_t calibration_duration = HAL_GetTick() + 10000; // 10 segundos de calibración
 80011a2:	f000 fd17 	bl	8001bd4 <HAL_GetTick>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80011ac:	3310      	adds	r3, #16
 80011ae:	647b      	str	r3, [r7, #68]	@ 0x44
    char buffer[64];

    snprintf(buffer, sizeof(buffer), "Calibrando... Gire el sensor 360 grados\r\n");
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4a3c      	ldr	r2, [pc, #240]	@ (80012a4 <Calibrate_Sensor+0x128>)
 80011b4:	2140      	movs	r1, #64	@ 0x40
 80011b6:	4618      	mov	r0, r3
 80011b8:	f009 fee0 	bl	800af7c <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f85e 	bl	8000280 <strlen>
 80011c4:	4603      	mov	r3, r0
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	1d39      	adds	r1, r7, #4
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	4836      	ldr	r0, [pc, #216]	@ (80012a8 <Calibrate_Sensor+0x12c>)
 80011d0:	f004 fc26 	bl	8005a20 <HAL_UART_Transmit>

    while (HAL_GetTick() < calibration_duration) {
 80011d4:	e034      	b.n	8001240 <Calibrate_Sensor+0xc4>
        QMC5883L_Read(&x, &y, &z, NULL);
 80011d6:	2300      	movs	r3, #0
 80011d8:	4a34      	ldr	r2, [pc, #208]	@ (80012ac <Calibrate_Sensor+0x130>)
 80011da:	4935      	ldr	r1, [pc, #212]	@ (80012b0 <Calibrate_Sensor+0x134>)
 80011dc:	4835      	ldr	r0, [pc, #212]	@ (80012b4 <Calibrate_Sensor+0x138>)
 80011de:	f7ff ff33 	bl	8001048 <QMC5883L_Read>

        if (x < x_min) x_min = x;
 80011e2:	4b34      	ldr	r3, [pc, #208]	@ (80012b4 <Calibrate_Sensor+0x138>)
 80011e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e8:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dd03      	ble.n	80011f8 <Calibrate_Sensor+0x7c>
 80011f0:	4b30      	ldr	r3, [pc, #192]	@ (80012b4 <Calibrate_Sensor+0x138>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
        if (x > x_max) x_max = x;
 80011f8:	4b2e      	ldr	r3, [pc, #184]	@ (80012b4 <Calibrate_Sensor+0x138>)
 80011fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fe:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 8001202:	429a      	cmp	r2, r3
 8001204:	da03      	bge.n	800120e <Calibrate_Sensor+0x92>
 8001206:	4b2b      	ldr	r3, [pc, #172]	@ (80012b4 <Calibrate_Sensor+0x138>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
        if (y < y_min) y_min = y;
 800120e:	4b28      	ldr	r3, [pc, #160]	@ (80012b0 <Calibrate_Sensor+0x134>)
 8001210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001214:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 8001218:	429a      	cmp	r2, r3
 800121a:	dd03      	ble.n	8001224 <Calibrate_Sensor+0xa8>
 800121c:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <Calibrate_Sensor+0x134>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        if (y > y_max) y_max = y;
 8001224:	4b22      	ldr	r3, [pc, #136]	@ (80012b0 <Calibrate_Sensor+0x134>)
 8001226:	f9b3 3000 	ldrsh.w	r3, [r3]
 800122a:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 800122e:	429a      	cmp	r2, r3
 8001230:	da03      	bge.n	800123a <Calibrate_Sensor+0xbe>
 8001232:	4b1f      	ldr	r3, [pc, #124]	@ (80012b0 <Calibrate_Sensor+0x134>)
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

        HAL_Delay(100); // Esperar antes de la siguiente lectura
 800123a:	2064      	movs	r0, #100	@ 0x64
 800123c:	f000 fcd6 	bl	8001bec <HAL_Delay>
    while (HAL_GetTick() < calibration_duration) {
 8001240:	f000 fcc8 	bl	8001bd4 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001248:	4293      	cmp	r3, r2
 800124a:	d8c4      	bhi.n	80011d6 <Calibrate_Sensor+0x5a>
    }

    // Calcular los offsets para centrar en cero
    x_offset = (x_max + x_min) / 2;
 800124c:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 8001250:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8001254:	4413      	add	r3, r2
 8001256:	0fda      	lsrs	r2, r3, #31
 8001258:	4413      	add	r3, r2
 800125a:	105b      	asrs	r3, r3, #1
 800125c:	b21a      	sxth	r2, r3
 800125e:	4b16      	ldr	r3, [pc, #88]	@ (80012b8 <Calibrate_Sensor+0x13c>)
 8001260:	801a      	strh	r2, [r3, #0]
    y_offset = (y_max + y_min) / 2;
 8001262:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8001266:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800126a:	4413      	add	r3, r2
 800126c:	0fda      	lsrs	r2, r3, #31
 800126e:	4413      	add	r3, r2
 8001270:	105b      	asrs	r3, r3, #1
 8001272:	b21a      	sxth	r2, r3
 8001274:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <Calibrate_Sensor+0x140>)
 8001276:	801a      	strh	r2, [r3, #0]

    snprintf(buffer, sizeof(buffer), "Calibracion completa.\r\n");
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	4a11      	ldr	r2, [pc, #68]	@ (80012c0 <Calibrate_Sensor+0x144>)
 800127c:	2140      	movs	r1, #64	@ 0x40
 800127e:	4618      	mov	r0, r3
 8001280:	f009 fe7c 	bl	800af7c <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4618      	mov	r0, r3
 8001288:	f7fe fffa 	bl	8000280 <strlen>
 800128c:	4603      	mov	r3, r0
 800128e:	b29a      	uxth	r2, r3
 8001290:	1d39      	adds	r1, r7, #4
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
 8001296:	4804      	ldr	r0, [pc, #16]	@ (80012a8 <Calibrate_Sensor+0x12c>)
 8001298:	f004 fbc2 	bl	8005a20 <HAL_UART_Transmit>
}
 800129c:	bf00      	nop
 800129e:	3750      	adds	r7, #80	@ 0x50
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	0800ed40 	.word	0x0800ed40
 80012a8:	2000038c 	.word	0x2000038c
 80012ac:	200002ec 	.word	0x200002ec
 80012b0:	200002ea 	.word	0x200002ea
 80012b4:	200002e8 	.word	0x200002e8
 80012b8:	200002e4 	.word	0x200002e4
 80012bc:	200002e6 	.word	0x200002e6
 80012c0:	0800ed6c 	.word	0x0800ed6c

080012c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c6:	b099      	sub	sp, #100	@ 0x64
 80012c8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ca:	f000 fc1d 	bl	8001b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ce:	f000 f847 	bl	8001360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d2:	f000 f97d 	bl	80015d0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80012d6:	f008 fa39 	bl	800974c <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 80012da:	f000 f94f 	bl	800157c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80012de:	f000 f8d5 	bl	800148c <MX_TIM3_Init>
  MX_I2C2_Init();
 80012e2:	f000 f8a5 	bl	8001430 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  QMC5883L_Init();
 80012e6:	f7ff fe85 	bl	8000ff4 <QMC5883L_Init>
  Calibrate_Sensor(); // Llamar a la función de calibración al inicio
 80012ea:	f7ff ff47 	bl	800117c <Calibrate_Sensor>
  {
    /* USER CODE END WHILE */
		int16_t x, y, z;
		float angulo;
		char buffer[64];
		QMC5883L_Read(&x, &y, &z, &angulo);
 80012ee:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80012f2:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 80012f6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80012fa:	f107 004e 	add.w	r0, r7, #78	@ 0x4e
 80012fe:	f7ff fea3 	bl	8001048 <QMC5883L_Read>

		snprintf(buffer, sizeof(buffer), "x: %d, y: %d, z: %d, angulo: %.2f grados\r\n", x, y, z, angulo);
 8001302:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8001306:	461e      	mov	r6, r3
 8001308:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800130c:	461c      	mov	r4, r3
 800130e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001312:	461d      	mov	r5, r3
 8001314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f91e 	bl	8000558 <__aeabi_f2d>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	1d38      	adds	r0, r7, #4
 8001322:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001326:	9501      	str	r5, [sp, #4]
 8001328:	9400      	str	r4, [sp, #0]
 800132a:	4633      	mov	r3, r6
 800132c:	4a0a      	ldr	r2, [pc, #40]	@ (8001358 <main+0x94>)
 800132e:	2140      	movs	r1, #64	@ 0x40
 8001330:	f009 fe24 	bl	800af7c <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4618      	mov	r0, r3
 8001338:	f7fe ffa2 	bl	8000280 <strlen>
 800133c:	4603      	mov	r3, r0
 800133e:	b29a      	uxth	r2, r3
 8001340:	1d39      	adds	r1, r7, #4
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	4805      	ldr	r0, [pc, #20]	@ (800135c <main+0x98>)
 8001348:	f004 fb6a 	bl	8005a20 <HAL_UART_Transmit>

		HAL_Delay(500);
 800134c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001350:	f000 fc4c 	bl	8001bec <HAL_Delay>
  {
 8001354:	bf00      	nop
 8001356:	e7ca      	b.n	80012ee <main+0x2a>
 8001358:	0800ed84 	.word	0x0800ed84
 800135c:	2000038c 	.word	0x2000038c

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b094      	sub	sp, #80	@ 0x50
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 0320 	add.w	r3, r7, #32
 800136a:	2230      	movs	r2, #48	@ 0x30
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f009 fe9b 	bl	800b0aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	4b27      	ldr	r3, [pc, #156]	@ (8001428 <SystemClock_Config+0xc8>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138c:	4a26      	ldr	r2, [pc, #152]	@ (8001428 <SystemClock_Config+0xc8>)
 800138e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001392:	6413      	str	r3, [r2, #64]	@ 0x40
 8001394:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <SystemClock_Config+0xc8>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	4b21      	ldr	r3, [pc, #132]	@ (800142c <SystemClock_Config+0xcc>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a20      	ldr	r2, [pc, #128]	@ (800142c <SystemClock_Config+0xcc>)
 80013aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	4b1e      	ldr	r3, [pc, #120]	@ (800142c <SystemClock_Config+0xcc>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013bc:	2301      	movs	r3, #1
 80013be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c6:	2302      	movs	r3, #2
 80013c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80013d0:	2319      	movs	r3, #25
 80013d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80013d4:	2390      	movs	r3, #144	@ 0x90
 80013d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d8:	2302      	movs	r3, #2
 80013da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80013dc:	2303      	movs	r3, #3
 80013de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e0:	f107 0320 	add.w	r3, r7, #32
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 f921 	bl	800462c <HAL_RCC_OscConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013f0:	f000 f924 	bl	800163c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f4:	230f      	movs	r3, #15
 80013f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f8:	2302      	movs	r3, #2
 80013fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001400:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001404:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	2102      	movs	r1, #2
 8001410:	4618      	mov	r0, r3
 8001412:	f003 fb83 	bl	8004b1c <HAL_RCC_ClockConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800141c:	f000 f90e 	bl	800163c <Error_Handler>
  }
}
 8001420:	bf00      	nop
 8001422:	3750      	adds	r7, #80	@ 0x50
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40023800 	.word	0x40023800
 800142c:	40007000 	.word	0x40007000

08001430 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001434:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <MX_I2C2_Init+0x50>)
 8001436:	4a13      	ldr	r2, [pc, #76]	@ (8001484 <MX_I2C2_Init+0x54>)
 8001438:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800143a:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <MX_I2C2_Init+0x50>)
 800143c:	4a12      	ldr	r2, [pc, #72]	@ (8001488 <MX_I2C2_Init+0x58>)
 800143e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001440:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <MX_I2C2_Init+0x50>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001446:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <MX_I2C2_Init+0x50>)
 8001448:	2200      	movs	r2, #0
 800144a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800144c:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <MX_I2C2_Init+0x50>)
 800144e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001452:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001454:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <MX_I2C2_Init+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800145a:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <MX_I2C2_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001460:	4b07      	ldr	r3, [pc, #28]	@ (8001480 <MX_I2C2_Init+0x50>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <MX_I2C2_Init+0x50>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800146c:	4804      	ldr	r0, [pc, #16]	@ (8001480 <MX_I2C2_Init+0x50>)
 800146e:	f000 fe77 	bl	8002160 <HAL_I2C_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001478:	f000 f8e0 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200002f0 	.word	0x200002f0
 8001484:	40005800 	.word	0x40005800
 8001488:	000186a0 	.word	0x000186a0

0800148c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08e      	sub	sp, #56	@ 0x38
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001492:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	f107 0320 	add.w	r3, r7, #32
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
 80014b8:	615a      	str	r2, [r3, #20]
 80014ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001574 <MX_TIM3_Init+0xe8>)
 80014be:	4a2e      	ldr	r2, [pc, #184]	@ (8001578 <MX_TIM3_Init+0xec>)
 80014c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80014c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001574 <MX_TIM3_Init+0xe8>)
 80014c4:	2247      	movs	r2, #71	@ 0x47
 80014c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001574 <MX_TIM3_Init+0xe8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80014ce:	4b29      	ldr	r3, [pc, #164]	@ (8001574 <MX_TIM3_Init+0xe8>)
 80014d0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80014d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d6:	4b27      	ldr	r3, [pc, #156]	@ (8001574 <MX_TIM3_Init+0xe8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014dc:	4b25      	ldr	r3, [pc, #148]	@ (8001574 <MX_TIM3_Init+0xe8>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014e2:	4824      	ldr	r0, [pc, #144]	@ (8001574 <MX_TIM3_Init+0xe8>)
 80014e4:	f003 fcfa 	bl	8004edc <HAL_TIM_Base_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80014ee:	f000 f8a5 	bl	800163c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014fc:	4619      	mov	r1, r3
 80014fe:	481d      	ldr	r0, [pc, #116]	@ (8001574 <MX_TIM3_Init+0xe8>)
 8001500:	f003 fe56 	bl	80051b0 <HAL_TIM_ConfigClockSource>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800150a:	f000 f897 	bl	800163c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800150e:	4819      	ldr	r0, [pc, #100]	@ (8001574 <MX_TIM3_Init+0xe8>)
 8001510:	f003 fd33 	bl	8004f7a <HAL_TIM_PWM_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800151a:	f000 f88f 	bl	800163c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001526:	f107 0320 	add.w	r3, r7, #32
 800152a:	4619      	mov	r1, r3
 800152c:	4811      	ldr	r0, [pc, #68]	@ (8001574 <MX_TIM3_Init+0xe8>)
 800152e:	f004 f9b9 	bl	80058a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001538:	f000 f880 	bl	800163c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153c:	2360      	movs	r3, #96	@ 0x60
 800153e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001540:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001544:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	4619      	mov	r1, r3
 8001554:	4807      	ldr	r0, [pc, #28]	@ (8001574 <MX_TIM3_Init+0xe8>)
 8001556:	f003 fd69 	bl	800502c <HAL_TIM_PWM_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001560:	f000 f86c 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001564:	4803      	ldr	r0, [pc, #12]	@ (8001574 <MX_TIM3_Init+0xe8>)
 8001566:	f000 f911 	bl	800178c <HAL_TIM_MspPostInit>

}
 800156a:	bf00      	nop
 800156c:	3738      	adds	r7, #56	@ 0x38
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000344 	.word	0x20000344
 8001578:	40000400 	.word	0x40000400

0800157c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001580:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <MX_USART2_UART_Init+0x4c>)
 8001582:	4a12      	ldr	r2, [pc, #72]	@ (80015cc <MX_USART2_UART_Init+0x50>)
 8001584:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001586:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <MX_USART2_UART_Init+0x4c>)
 8001588:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800158c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <MX_USART2_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <MX_USART2_UART_Init+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <MX_USART2_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <MX_USART2_UART_Init+0x4c>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <MX_USART2_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <MX_USART2_UART_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <MX_USART2_UART_Init+0x4c>)
 80015b4:	f004 f9e4 	bl	8005980 <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015be:	f000 f83d 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000038c 	.word	0x2000038c
 80015cc:	40004400 	.word	0x40004400

080015d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <MX_GPIO_Init+0x68>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	4a16      	ldr	r2, [pc, #88]	@ (8001638 <MX_GPIO_Init+0x68>)
 80015e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e6:	4b14      	ldr	r3, [pc, #80]	@ (8001638 <MX_GPIO_Init+0x68>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <MX_GPIO_Init+0x68>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001638 <MX_GPIO_Init+0x68>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	@ 0x30
 8001602:	4b0d      	ldr	r3, [pc, #52]	@ (8001638 <MX_GPIO_Init+0x68>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <MX_GPIO_Init+0x68>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a08      	ldr	r2, [pc, #32]	@ (8001638 <MX_GPIO_Init+0x68>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <MX_GPIO_Init+0x68>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800

0800163c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001640:	b672      	cpsid	i
}
 8001642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <Error_Handler+0x8>

08001648 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <HAL_MspInit+0x4c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001656:	4a0f      	ldr	r2, [pc, #60]	@ (8001694 <HAL_MspInit+0x4c>)
 8001658:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800165c:	6453      	str	r3, [r2, #68]	@ 0x44
 800165e:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <HAL_MspInit+0x4c>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <HAL_MspInit+0x4c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	4a08      	ldr	r2, [pc, #32]	@ (8001694 <HAL_MspInit+0x4c>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001678:	6413      	str	r3, [r2, #64]	@ 0x40
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_MspInit+0x4c>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800

08001698 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	@ 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a21      	ldr	r2, [pc, #132]	@ (800173c <HAL_I2C_MspInit+0xa4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d13c      	bne.n	8001734 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b20      	ldr	r3, [pc, #128]	@ (8001740 <HAL_I2C_MspInit+0xa8>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001740 <HAL_I2C_MspInit+0xa8>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <HAL_I2C_MspInit+0xa8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016dc:	2312      	movs	r3, #18
 80016de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e4:	2303      	movs	r3, #3
 80016e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016e8:	2304      	movs	r3, #4
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	4814      	ldr	r0, [pc, #80]	@ (8001744 <HAL_I2C_MspInit+0xac>)
 80016f4:	f000 fbb0 	bl	8001e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016f8:	2308      	movs	r3, #8
 80016fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016fc:	2312      	movs	r3, #18
 80016fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001708:	2309      	movs	r3, #9
 800170a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	480c      	ldr	r0, [pc, #48]	@ (8001744 <HAL_I2C_MspInit+0xac>)
 8001714:	f000 fba0 	bl	8001e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <HAL_I2C_MspInit+0xa8>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001720:	4a07      	ldr	r2, [pc, #28]	@ (8001740 <HAL_I2C_MspInit+0xa8>)
 8001722:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001726:	6413      	str	r3, [r2, #64]	@ 0x40
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <HAL_I2C_MspInit+0xa8>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001734:	bf00      	nop
 8001736:	3728      	adds	r7, #40	@ 0x28
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40005800 	.word	0x40005800
 8001740:	40023800 	.word	0x40023800
 8001744:	40020400 	.word	0x40020400

08001748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0b      	ldr	r2, [pc, #44]	@ (8001784 <HAL_TIM_Base_MspInit+0x3c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d10d      	bne.n	8001776 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <HAL_TIM_Base_MspInit+0x40>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	4a09      	ldr	r2, [pc, #36]	@ (8001788 <HAL_TIM_Base_MspInit+0x40>)
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	6413      	str	r3, [r2, #64]	@ 0x40
 800176a:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <HAL_TIM_Base_MspInit+0x40>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40000400 	.word	0x40000400
 8001788:	40023800 	.word	0x40023800

0800178c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a12      	ldr	r2, [pc, #72]	@ (80017f4 <HAL_TIM_MspPostInit+0x68>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d11d      	bne.n	80017ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <HAL_TIM_MspPostInit+0x6c>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	4a10      	ldr	r2, [pc, #64]	@ (80017f8 <HAL_TIM_MspPostInit+0x6c>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017be:	4b0e      	ldr	r3, [pc, #56]	@ (80017f8 <HAL_TIM_MspPostInit+0x6c>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017ca:	2340      	movs	r3, #64	@ 0x40
 80017cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017da:	2302      	movs	r3, #2
 80017dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	4619      	mov	r1, r3
 80017e4:	4805      	ldr	r0, [pc, #20]	@ (80017fc <HAL_TIM_MspPostInit+0x70>)
 80017e6:	f000 fb37 	bl	8001e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017ea:	bf00      	nop
 80017ec:	3720      	adds	r7, #32
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40000400 	.word	0x40000400
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020000 	.word	0x40020000

08001800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	@ 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a19      	ldr	r2, [pc, #100]	@ (8001884 <HAL_UART_MspInit+0x84>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d12b      	bne.n	800187a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <HAL_UART_MspInit+0x88>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	4a17      	ldr	r2, [pc, #92]	@ (8001888 <HAL_UART_MspInit+0x88>)
 800182c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001830:	6413      	str	r3, [r2, #64]	@ 0x40
 8001832:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <HAL_UART_MspInit+0x88>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <HAL_UART_MspInit+0x88>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a10      	ldr	r2, [pc, #64]	@ (8001888 <HAL_UART_MspInit+0x88>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <HAL_UART_MspInit+0x88>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800185a:	230c      	movs	r3, #12
 800185c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800186a:	2307      	movs	r3, #7
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	@ (800188c <HAL_UART_MspInit+0x8c>)
 8001876:	f000 faef 	bl	8001e58 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	@ 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40004400 	.word	0x40004400
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000

08001890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <NMI_Handler+0x4>

08001898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <HardFault_Handler+0x4>

080018a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <MemManage_Handler+0x4>

080018a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <BusFault_Handler+0x4>

080018b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <UsageFault_Handler+0x4>

080018b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e6:	f000 f961 	bl	8001bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <OTG_FS_IRQHandler+0x10>)
 80018f6:	f001 fd8b 	bl	8003410 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200018bc 	.word	0x200018bc

08001904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return 1;
 8001908:	2301      	movs	r3, #1
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_kill>:

int _kill(int pid, int sig)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800191e:	f009 fc17 	bl	800b150 <__errno>
 8001922:	4603      	mov	r3, r0
 8001924:	2216      	movs	r2, #22
 8001926:	601a      	str	r2, [r3, #0]
  return -1;
 8001928:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <_exit>:

void _exit (int status)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800193c:	f04f 31ff 	mov.w	r1, #4294967295
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ffe7 	bl	8001914 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001946:	bf00      	nop
 8001948:	e7fd      	b.n	8001946 <_exit+0x12>

0800194a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	e00a      	b.n	8001972 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800195c:	f3af 8000 	nop.w
 8001960:	4601      	mov	r1, r0
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	60ba      	str	r2, [r7, #8]
 8001968:	b2ca      	uxtb	r2, r1
 800196a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3301      	adds	r3, #1
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	429a      	cmp	r2, r3
 8001978:	dbf0      	blt.n	800195c <_read+0x12>
  }

  return len;
 800197a:	687b      	ldr	r3, [r7, #4]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e009      	b.n	80019aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	60ba      	str	r2, [r7, #8]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	dbf1      	blt.n	8001996 <_write+0x12>
  }
  return len;
 80019b2:	687b      	ldr	r3, [r7, #4]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_close>:

int _close(int file)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019e4:	605a      	str	r2, [r3, #4]
  return 0;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_isatty>:

int _isatty(int file)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019fc:	2301      	movs	r3, #1
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b085      	sub	sp, #20
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a2c:	4a14      	ldr	r2, [pc, #80]	@ (8001a80 <_sbrk+0x5c>)
 8001a2e:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <_sbrk+0x60>)
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a38:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a40:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <_sbrk+0x64>)
 8001a42:	4a12      	ldr	r2, [pc, #72]	@ (8001a8c <_sbrk+0x68>)
 8001a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d207      	bcs.n	8001a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a54:	f009 fb7c 	bl	800b150 <__errno>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	e009      	b.n	8001a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a64:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <_sbrk+0x64>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6a:	4b07      	ldr	r3, [pc, #28]	@ (8001a88 <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	4a05      	ldr	r2, [pc, #20]	@ (8001a88 <_sbrk+0x64>)
 8001a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20020000 	.word	0x20020000
 8001a84:	00000400 	.word	0x00000400
 8001a88:	200003d4 	.word	0x200003d4
 8001a8c:	20002110 	.word	0x20002110

08001a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a94:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <SystemInit+0x20>)
 8001a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a9a:	4a05      	ldr	r2, [pc, #20]	@ (8001ab0 <SystemInit+0x20>)
 8001a9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ab4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001aec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ab8:	f7ff ffea 	bl	8001a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001abc:	480c      	ldr	r0, [pc, #48]	@ (8001af0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001abe:	490d      	ldr	r1, [pc, #52]	@ (8001af4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8001af8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac4:	e002      	b.n	8001acc <LoopCopyDataInit>

08001ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aca:	3304      	adds	r3, #4

08001acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad0:	d3f9      	bcc.n	8001ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8001afc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8001b00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad8:	e001      	b.n	8001ade <LoopFillZerobss>

08001ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001adc:	3204      	adds	r2, #4

08001ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae0:	d3fb      	bcc.n	8001ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ae2:	f009 fb3b 	bl	800b15c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae6:	f7ff fbed 	bl	80012c4 <main>
  bx  lr    
 8001aea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af4:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8001af8:	0800f2c0 	.word	0x0800f2c0
  ldr r2, =_sbss
 8001afc:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8001b00:	2000210c 	.word	0x2000210c

08001b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <ADC_IRQHandler>
	...

08001b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b48 <HAL_Init+0x40>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0d      	ldr	r2, [pc, #52]	@ (8001b48 <HAL_Init+0x40>)
 8001b12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b18:	4b0b      	ldr	r3, [pc, #44]	@ (8001b48 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b48 <HAL_Init+0x40>)
 8001b1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b24:	4b08      	ldr	r3, [pc, #32]	@ (8001b48 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a07      	ldr	r2, [pc, #28]	@ (8001b48 <HAL_Init+0x40>)
 8001b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b30:	2003      	movs	r0, #3
 8001b32:	f000 f94f 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b36:	200f      	movs	r0, #15
 8001b38:	f000 f808 	bl	8001b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3c:	f7ff fd84 	bl	8001648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023c00 	.word	0x40023c00

08001b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <HAL_InitTick+0x54>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b12      	ldr	r3, [pc, #72]	@ (8001ba4 <HAL_InitTick+0x58>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f967 	bl	8001e3e <HAL_SYSTICK_Config>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00e      	b.n	8001b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b0f      	cmp	r3, #15
 8001b7e:	d80a      	bhi.n	8001b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b80:	2200      	movs	r2, #0
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295
 8001b88:	f000 f92f 	bl	8001dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b8c:	4a06      	ldr	r2, [pc, #24]	@ (8001ba8 <HAL_InitTick+0x5c>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e000      	b.n	8001b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000004 	.word	0x20000004
 8001ba4:	2000000c 	.word	0x2000000c
 8001ba8:	20000008 	.word	0x20000008

08001bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_IncTick+0x20>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <HAL_IncTick+0x24>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	4a04      	ldr	r2, [pc, #16]	@ (8001bd0 <HAL_IncTick+0x24>)
 8001bbe:	6013      	str	r3, [r2, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	2000000c 	.word	0x2000000c
 8001bd0:	200003d8 	.word	0x200003d8

08001bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	@ (8001be8 <HAL_GetTick+0x14>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	200003d8 	.word	0x200003d8

08001bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf4:	f7ff ffee 	bl	8001bd4 <HAL_GetTick>
 8001bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c04:	d005      	beq.n	8001c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c06:	4b0a      	ldr	r3, [pc, #40]	@ (8001c30 <HAL_Delay+0x44>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c12:	bf00      	nop
 8001c14:	f7ff ffde 	bl	8001bd4 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d8f7      	bhi.n	8001c14 <HAL_Delay+0x28>
  {
  }
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000000c 	.word	0x2000000c

08001c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c44:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c50:	4013      	ands	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c66:	4a04      	ldr	r2, [pc, #16]	@ (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	60d3      	str	r3, [r2, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c80:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <__NVIC_GetPriorityGrouping+0x18>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	f003 0307 	and.w	r3, r3, #7
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db0b      	blt.n	8001cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	f003 021f 	and.w	r2, r3, #31
 8001cb0:	4907      	ldr	r1, [pc, #28]	@ (8001cd0 <__NVIC_EnableIRQ+0x38>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	2001      	movs	r0, #1
 8001cba:	fa00 f202 	lsl.w	r2, r0, r2
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100

08001cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	490c      	ldr	r1, [pc, #48]	@ (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4908      	ldr	r1, [pc, #32]	@ (8001d24 <__NVIC_SetPriority+0x50>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	@ 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43d9      	mvns	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	4313      	orrs	r3, r2
         );
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	@ 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001da0:	d301      	bcc.n	8001da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00f      	b.n	8001dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da6:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <SysTick_Config+0x40>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dae:	210f      	movs	r1, #15
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	f7ff ff8e 	bl	8001cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <SysTick_Config+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	@ (8001dd0 <SysTick_Config+0x40>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff29 	bl	8001c34 <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff3e 	bl	8001c7c <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ff8e 	bl	8001d28 <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff5d 	bl	8001cd4 <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff31 	bl	8001c98 <__NVIC_EnableIRQ>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ffa2 	bl	8001d90 <SysTick_Config>
 8001e4c:	4603      	mov	r3, r0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	@ 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	e159      	b.n	8002128 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e74:	2201      	movs	r2, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	f040 8148 	bne.w	8002122 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d005      	beq.n	8001eaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d130      	bne.n	8001f0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 0201 	and.w	r2, r3, #1
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d017      	beq.n	8001f48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d123      	bne.n	8001f9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	08da      	lsrs	r2, r3, #3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3208      	adds	r2, #8
 8001f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3208      	adds	r2, #8
 8001f96:	69b9      	ldr	r1, [r7, #24]
 8001f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0203 	and.w	r2, r3, #3
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80a2 	beq.w	8002122 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b57      	ldr	r3, [pc, #348]	@ (8002140 <HAL_GPIO_Init+0x2e8>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	4a56      	ldr	r2, [pc, #344]	@ (8002140 <HAL_GPIO_Init+0x2e8>)
 8001fe8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fee:	4b54      	ldr	r3, [pc, #336]	@ (8002140 <HAL_GPIO_Init+0x2e8>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ffa:	4a52      	ldr	r2, [pc, #328]	@ (8002144 <HAL_GPIO_Init+0x2ec>)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3302      	adds	r3, #2
 8002002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	220f      	movs	r2, #15
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a49      	ldr	r2, [pc, #292]	@ (8002148 <HAL_GPIO_Init+0x2f0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d019      	beq.n	800205a <HAL_GPIO_Init+0x202>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a48      	ldr	r2, [pc, #288]	@ (800214c <HAL_GPIO_Init+0x2f4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d013      	beq.n	8002056 <HAL_GPIO_Init+0x1fe>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a47      	ldr	r2, [pc, #284]	@ (8002150 <HAL_GPIO_Init+0x2f8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00d      	beq.n	8002052 <HAL_GPIO_Init+0x1fa>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a46      	ldr	r2, [pc, #280]	@ (8002154 <HAL_GPIO_Init+0x2fc>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d007      	beq.n	800204e <HAL_GPIO_Init+0x1f6>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a45      	ldr	r2, [pc, #276]	@ (8002158 <HAL_GPIO_Init+0x300>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d101      	bne.n	800204a <HAL_GPIO_Init+0x1f2>
 8002046:	2304      	movs	r3, #4
 8002048:	e008      	b.n	800205c <HAL_GPIO_Init+0x204>
 800204a:	2307      	movs	r3, #7
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x204>
 800204e:	2303      	movs	r3, #3
 8002050:	e004      	b.n	800205c <HAL_GPIO_Init+0x204>
 8002052:	2302      	movs	r3, #2
 8002054:	e002      	b.n	800205c <HAL_GPIO_Init+0x204>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_GPIO_Init+0x204>
 800205a:	2300      	movs	r3, #0
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	f002 0203 	and.w	r2, r2, #3
 8002062:	0092      	lsls	r2, r2, #2
 8002064:	4093      	lsls	r3, r2
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800206c:	4935      	ldr	r1, [pc, #212]	@ (8002144 <HAL_GPIO_Init+0x2ec>)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3302      	adds	r3, #2
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207a:	4b38      	ldr	r3, [pc, #224]	@ (800215c <HAL_GPIO_Init+0x304>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800209e:	4a2f      	ldr	r2, [pc, #188]	@ (800215c <HAL_GPIO_Init+0x304>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a4:	4b2d      	ldr	r3, [pc, #180]	@ (800215c <HAL_GPIO_Init+0x304>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020c8:	4a24      	ldr	r2, [pc, #144]	@ (800215c <HAL_GPIO_Init+0x304>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ce:	4b23      	ldr	r3, [pc, #140]	@ (800215c <HAL_GPIO_Init+0x304>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f2:	4a1a      	ldr	r2, [pc, #104]	@ (800215c <HAL_GPIO_Init+0x304>)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f8:	4b18      	ldr	r3, [pc, #96]	@ (800215c <HAL_GPIO_Init+0x304>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800211c:	4a0f      	ldr	r2, [pc, #60]	@ (800215c <HAL_GPIO_Init+0x304>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3301      	adds	r3, #1
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	2b0f      	cmp	r3, #15
 800212c:	f67f aea2 	bls.w	8001e74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3724      	adds	r7, #36	@ 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800
 8002144:	40013800 	.word	0x40013800
 8002148:	40020000 	.word	0x40020000
 800214c:	40020400 	.word	0x40020400
 8002150:	40020800 	.word	0x40020800
 8002154:	40020c00 	.word	0x40020c00
 8002158:	40021000 	.word	0x40021000
 800215c:	40013c00 	.word	0x40013c00

08002160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e12b      	b.n	80023ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff fa86 	bl	8001698 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2224      	movs	r2, #36	@ 0x24
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021c4:	f002 fe62 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 80021c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4a81      	ldr	r2, [pc, #516]	@ (80023d4 <HAL_I2C_Init+0x274>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d807      	bhi.n	80021e4 <HAL_I2C_Init+0x84>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4a80      	ldr	r2, [pc, #512]	@ (80023d8 <HAL_I2C_Init+0x278>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	bf94      	ite	ls
 80021dc:	2301      	movls	r3, #1
 80021de:	2300      	movhi	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	e006      	b.n	80021f2 <HAL_I2C_Init+0x92>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4a7d      	ldr	r2, [pc, #500]	@ (80023dc <HAL_I2C_Init+0x27c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	bf94      	ite	ls
 80021ec:	2301      	movls	r3, #1
 80021ee:	2300      	movhi	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0e7      	b.n	80023ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4a78      	ldr	r2, [pc, #480]	@ (80023e0 <HAL_I2C_Init+0x280>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	0c9b      	lsrs	r3, r3, #18
 8002204:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	430a      	orrs	r2, r1
 8002218:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a6a      	ldr	r2, [pc, #424]	@ (80023d4 <HAL_I2C_Init+0x274>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d802      	bhi.n	8002234 <HAL_I2C_Init+0xd4>
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	3301      	adds	r3, #1
 8002232:	e009      	b.n	8002248 <HAL_I2C_Init+0xe8>
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800223a:	fb02 f303 	mul.w	r3, r2, r3
 800223e:	4a69      	ldr	r2, [pc, #420]	@ (80023e4 <HAL_I2C_Init+0x284>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	099b      	lsrs	r3, r3, #6
 8002246:	3301      	adds	r3, #1
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	430b      	orrs	r3, r1
 800224e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800225a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	495c      	ldr	r1, [pc, #368]	@ (80023d4 <HAL_I2C_Init+0x274>)
 8002264:	428b      	cmp	r3, r1
 8002266:	d819      	bhi.n	800229c <HAL_I2C_Init+0x13c>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1e59      	subs	r1, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	fbb1 f3f3 	udiv	r3, r1, r3
 8002276:	1c59      	adds	r1, r3, #1
 8002278:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800227c:	400b      	ands	r3, r1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_I2C_Init+0x138>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1e59      	subs	r1, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002290:	3301      	adds	r3, #1
 8002292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002296:	e051      	b.n	800233c <HAL_I2C_Init+0x1dc>
 8002298:	2304      	movs	r3, #4
 800229a:	e04f      	b.n	800233c <HAL_I2C_Init+0x1dc>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d111      	bne.n	80022c8 <HAL_I2C_Init+0x168>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1e58      	subs	r0, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	440b      	add	r3, r1
 80022b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b6:	3301      	adds	r3, #1
 80022b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf0c      	ite	eq
 80022c0:	2301      	moveq	r3, #1
 80022c2:	2300      	movne	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	e012      	b.n	80022ee <HAL_I2C_Init+0x18e>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1e58      	subs	r0, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	0099      	lsls	r1, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	fbb0 f3f3 	udiv	r3, r0, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Init+0x196>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e022      	b.n	800233c <HAL_I2C_Init+0x1dc>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10e      	bne.n	800231c <HAL_I2C_Init+0x1bc>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1e58      	subs	r0, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6859      	ldr	r1, [r3, #4]
 8002306:	460b      	mov	r3, r1
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	440b      	add	r3, r1
 800230c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002310:	3301      	adds	r3, #1
 8002312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002316:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800231a:	e00f      	b.n	800233c <HAL_I2C_Init+0x1dc>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1e58      	subs	r0, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	0099      	lsls	r1, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002332:	3301      	adds	r3, #1
 8002334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002338:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	6809      	ldr	r1, [r1, #0]
 8002340:	4313      	orrs	r3, r2
 8002342:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800236a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6911      	ldr	r1, [r2, #16]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68d2      	ldr	r2, [r2, #12]
 8002376:	4311      	orrs	r1, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	430b      	orrs	r3, r1
 800237e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	000186a0 	.word	0x000186a0
 80023d8:	001e847f 	.word	0x001e847f
 80023dc:	003d08ff 	.word	0x003d08ff
 80023e0:	431bde83 	.word	0x431bde83
 80023e4:	10624dd3 	.word	0x10624dd3

080023e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	461a      	mov	r2, r3
 80023f4:	460b      	mov	r3, r1
 80023f6:	817b      	strh	r3, [r7, #10]
 80023f8:	4613      	mov	r3, r2
 80023fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023fc:	f7ff fbea 	bl	8001bd4 <HAL_GetTick>
 8002400:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b20      	cmp	r3, #32
 800240c:	f040 80e0 	bne.w	80025d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2319      	movs	r3, #25
 8002416:	2201      	movs	r2, #1
 8002418:	4970      	ldr	r1, [pc, #448]	@ (80025dc <HAL_I2C_Master_Transmit+0x1f4>)
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fc7e 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002426:	2302      	movs	r3, #2
 8002428:	e0d3      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_I2C_Master_Transmit+0x50>
 8002434:	2302      	movs	r3, #2
 8002436:	e0cc      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b01      	cmp	r3, #1
 800244c:	d007      	beq.n	800245e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f042 0201 	orr.w	r2, r2, #1
 800245c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800246c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2221      	movs	r2, #33	@ 0x21
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2210      	movs	r2, #16
 800247a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	893a      	ldrh	r2, [r7, #8]
 800248e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4a50      	ldr	r2, [pc, #320]	@ (80025e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800249e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024a0:	8979      	ldrh	r1, [r7, #10]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	6a3a      	ldr	r2, [r7, #32]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 face 	bl	8002a48 <I2C_MasterRequestWrite>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e08d      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024cc:	e066      	b.n	800259c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	6a39      	ldr	r1, [r7, #32]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 fd3c 	bl	8002f50 <I2C_WaitOnTXEFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00d      	beq.n	80024fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d107      	bne.n	80024f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e06b      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fe:	781a      	ldrb	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b04      	cmp	r3, #4
 8002536:	d11b      	bne.n	8002570 <HAL_I2C_Master_Transmit+0x188>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	d017      	beq.n	8002570 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	781a      	ldrb	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	6a39      	ldr	r1, [r7, #32]
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 fd33 	bl	8002fe0 <I2C_WaitOnBTFFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00d      	beq.n	800259c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002584:	2b04      	cmp	r3, #4
 8002586:	d107      	bne.n	8002598 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002596:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e01a      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d194      	bne.n	80024ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	e000      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025d0:	2302      	movs	r3, #2
  }
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	00100002 	.word	0x00100002
 80025e0:	ffff0000 	.word	0xffff0000

080025e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08c      	sub	sp, #48	@ 0x30
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	4608      	mov	r0, r1
 80025ee:	4611      	mov	r1, r2
 80025f0:	461a      	mov	r2, r3
 80025f2:	4603      	mov	r3, r0
 80025f4:	817b      	strh	r3, [r7, #10]
 80025f6:	460b      	mov	r3, r1
 80025f8:	813b      	strh	r3, [r7, #8]
 80025fa:	4613      	mov	r3, r2
 80025fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025fe:	f7ff fae9 	bl	8001bd4 <HAL_GetTick>
 8002602:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b20      	cmp	r3, #32
 800260e:	f040 8214 	bne.w	8002a3a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2319      	movs	r3, #25
 8002618:	2201      	movs	r2, #1
 800261a:	497b      	ldr	r1, [pc, #492]	@ (8002808 <HAL_I2C_Mem_Read+0x224>)
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 fb7d 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002628:	2302      	movs	r3, #2
 800262a:	e207      	b.n	8002a3c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_I2C_Mem_Read+0x56>
 8002636:	2302      	movs	r3, #2
 8002638:	e200      	b.n	8002a3c <HAL_I2C_Mem_Read+0x458>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d007      	beq.n	8002660 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800266e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2222      	movs	r2, #34	@ 0x22
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2240      	movs	r2, #64	@ 0x40
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800268a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002690:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4a5b      	ldr	r2, [pc, #364]	@ (800280c <HAL_I2C_Mem_Read+0x228>)
 80026a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026a2:	88f8      	ldrh	r0, [r7, #6]
 80026a4:	893a      	ldrh	r2, [r7, #8]
 80026a6:	8979      	ldrh	r1, [r7, #10]
 80026a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	4603      	mov	r3, r0
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fa4a 	bl	8002b4c <I2C_RequestMemoryRead>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e1bc      	b.n	8002a3c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d113      	bne.n	80026f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ca:	2300      	movs	r3, #0
 80026cc:	623b      	str	r3, [r7, #32]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	623b      	str	r3, [r7, #32]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	623b      	str	r3, [r7, #32]
 80026de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	e190      	b.n	8002a14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d11b      	bne.n	8002732 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002708:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	e170      	b.n	8002a14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002736:	2b02      	cmp	r3, #2
 8002738:	d11b      	bne.n	8002772 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002748:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002758:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	e150      	b.n	8002a14 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002788:	e144      	b.n	8002a14 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800278e:	2b03      	cmp	r3, #3
 8002790:	f200 80f1 	bhi.w	8002976 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002798:	2b01      	cmp	r3, #1
 800279a:	d123      	bne.n	80027e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800279c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800279e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 fc65 	bl	8003070 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e145      	b.n	8002a3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027e2:	e117      	b.n	8002a14 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d14e      	bne.n	800288a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f2:	2200      	movs	r2, #0
 80027f4:	4906      	ldr	r1, [pc, #24]	@ (8002810 <HAL_I2C_Mem_Read+0x22c>)
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fa90 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d008      	beq.n	8002814 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e11a      	b.n	8002a3c <HAL_I2C_Mem_Read+0x458>
 8002806:	bf00      	nop
 8002808:	00100002 	.word	0x00100002
 800280c:	ffff0000 	.word	0xffff0000
 8002810:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002822:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800287e:	b29b      	uxth	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002888:	e0c4      	b.n	8002a14 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002890:	2200      	movs	r2, #0
 8002892:	496c      	ldr	r1, [pc, #432]	@ (8002a44 <HAL_I2C_Mem_Read+0x460>)
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 fa41 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0cb      	b.n	8002a3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691a      	ldr	r2, [r3, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ec:	2200      	movs	r2, #0
 80028ee:	4955      	ldr	r1, [pc, #340]	@ (8002a44 <HAL_I2C_Mem_Read+0x460>)
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 fa13 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e09d      	b.n	8002a3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800290e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002974:	e04e      	b.n	8002a14 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002978:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fb78 	bl	8003070 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e058      	b.n	8002a3c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d124      	bne.n	8002a14 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d107      	bne.n	80029e2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029e0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f47f aeb6 	bne.w	800278a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e000      	b.n	8002a3c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002a3a:	2302      	movs	r3, #2
  }
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3728      	adds	r7, #40	@ 0x28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	00010004 	.word	0x00010004

08002a48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	460b      	mov	r3, r1
 8002a56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d006      	beq.n	8002a72 <I2C_MasterRequestWrite+0x2a>
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d003      	beq.n	8002a72 <I2C_MasterRequestWrite+0x2a>
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a70:	d108      	bne.n	8002a84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	e00b      	b.n	8002a9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a88:	2b12      	cmp	r3, #18
 8002a8a:	d107      	bne.n	8002a9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 f937 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00d      	beq.n	8002ad0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ac2:	d103      	bne.n	8002acc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e035      	b.n	8002b3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ad8:	d108      	bne.n	8002aec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ada:	897b      	ldrh	r3, [r7, #10]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ae8:	611a      	str	r2, [r3, #16]
 8002aea:	e01b      	b.n	8002b24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002aec:	897b      	ldrh	r3, [r7, #10]
 8002aee:	11db      	asrs	r3, r3, #7
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	f003 0306 	and.w	r3, r3, #6
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f063 030f 	orn	r3, r3, #15
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	490e      	ldr	r1, [pc, #56]	@ (8002b44 <I2C_MasterRequestWrite+0xfc>)
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f980 	bl	8002e10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e010      	b.n	8002b3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b1a:	897b      	ldrh	r3, [r7, #10]
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	4907      	ldr	r1, [pc, #28]	@ (8002b48 <I2C_MasterRequestWrite+0x100>)
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f970 	bl	8002e10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	00010008 	.word	0x00010008
 8002b48:	00010002 	.word	0x00010002

08002b4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	4608      	mov	r0, r1
 8002b56:	4611      	mov	r1, r2
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	817b      	strh	r3, [r7, #10]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	813b      	strh	r3, [r7, #8]
 8002b62:	4613      	mov	r3, r2
 8002b64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f8c2 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00d      	beq.n	8002bba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bac:	d103      	bne.n	8002bb6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bb4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e0aa      	b.n	8002d10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bba:	897b      	ldrh	r3, [r7, #10]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002bc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	6a3a      	ldr	r2, [r7, #32]
 8002bce:	4952      	ldr	r1, [pc, #328]	@ (8002d18 <I2C_RequestMemoryRead+0x1cc>)
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f91d 	bl	8002e10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e097      	b.n	8002d10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf8:	6a39      	ldr	r1, [r7, #32]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f9a8 	bl	8002f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00d      	beq.n	8002c22 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d107      	bne.n	8002c1e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e076      	b.n	8002d10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d105      	bne.n	8002c34 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c28:	893b      	ldrh	r3, [r7, #8]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	611a      	str	r2, [r3, #16]
 8002c32:	e021      	b.n	8002c78 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c34:	893b      	ldrh	r3, [r7, #8]
 8002c36:	0a1b      	lsrs	r3, r3, #8
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c44:	6a39      	ldr	r1, [r7, #32]
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f982 	bl	8002f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00d      	beq.n	8002c6e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d107      	bne.n	8002c6a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e050      	b.n	8002d10 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c6e:	893b      	ldrh	r3, [r7, #8]
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c7a:	6a39      	ldr	r1, [r7, #32]
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 f967 	bl	8002f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00d      	beq.n	8002ca4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d107      	bne.n	8002ca0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e035      	b.n	8002d10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f82b 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00d      	beq.n	8002ce8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cda:	d103      	bne.n	8002ce4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ce2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e013      	b.n	8002d10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ce8:	897b      	ldrh	r3, [r7, #10]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	6a3a      	ldr	r2, [r7, #32]
 8002cfc:	4906      	ldr	r1, [pc, #24]	@ (8002d18 <I2C_RequestMemoryRead+0x1cc>)
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f886 	bl	8002e10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	00010002 	.word	0x00010002

08002d1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d2c:	e048      	b.n	8002dc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d044      	beq.n	8002dc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d36:	f7fe ff4d 	bl	8001bd4 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d302      	bcc.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d139      	bne.n	8002dc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	0c1b      	lsrs	r3, r3, #16
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d10d      	bne.n	8002d72 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	43da      	mvns	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	4013      	ands	r3, r2
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	bf0c      	ite	eq
 8002d68:	2301      	moveq	r3, #1
 8002d6a:	2300      	movne	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	e00c      	b.n	8002d8c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	43da      	mvns	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d116      	bne.n	8002dc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dac:	f043 0220 	orr.w	r2, r3, #32
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e023      	b.n	8002e08 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	0c1b      	lsrs	r3, r3, #16
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d10d      	bne.n	8002de6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	43da      	mvns	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf0c      	ite	eq
 8002ddc:	2301      	moveq	r3, #1
 8002dde:	2300      	movne	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	e00c      	b.n	8002e00 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	43da      	mvns	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	4013      	ands	r3, r2
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf0c      	ite	eq
 8002df8:	2301      	moveq	r3, #1
 8002dfa:	2300      	movne	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	461a      	mov	r2, r3
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d093      	beq.n	8002d2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e1e:	e071      	b.n	8002f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e2e:	d123      	bne.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e3e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	f043 0204 	orr.w	r2, r3, #4
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e067      	b.n	8002f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7e:	d041      	beq.n	8002f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e80:	f7fe fea8 	bl	8001bd4 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d302      	bcc.n	8002e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d136      	bne.n	8002f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	0c1b      	lsrs	r3, r3, #16
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d10c      	bne.n	8002eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	43da      	mvns	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	bf14      	ite	ne
 8002eb2:	2301      	movne	r3, #1
 8002eb4:	2300      	moveq	r3, #0
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	e00b      	b.n	8002ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	43da      	mvns	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf14      	ite	ne
 8002ecc:	2301      	movne	r3, #1
 8002ece:	2300      	moveq	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d016      	beq.n	8002f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef0:	f043 0220 	orr.w	r2, r3, #32
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e021      	b.n	8002f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	0c1b      	lsrs	r3, r3, #16
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d10c      	bne.n	8002f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	43da      	mvns	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bf14      	ite	ne
 8002f20:	2301      	movne	r3, #1
 8002f22:	2300      	moveq	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	e00b      	b.n	8002f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	43da      	mvns	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	4013      	ands	r3, r2
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	bf14      	ite	ne
 8002f3a:	2301      	movne	r3, #1
 8002f3c:	2300      	moveq	r3, #0
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f47f af6d 	bne.w	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f5c:	e034      	b.n	8002fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f8e3 	bl	800312a <I2C_IsAcknowledgeFailed>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e034      	b.n	8002fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d028      	beq.n	8002fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f76:	f7fe fe2d 	bl	8001bd4 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d302      	bcc.n	8002f8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d11d      	bne.n	8002fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f96:	2b80      	cmp	r3, #128	@ 0x80
 8002f98:	d016      	beq.n	8002fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb4:	f043 0220 	orr.w	r2, r3, #32
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e007      	b.n	8002fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd2:	2b80      	cmp	r3, #128	@ 0x80
 8002fd4:	d1c3      	bne.n	8002f5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fec:	e034      	b.n	8003058 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f89b 	bl	800312a <I2C_IsAcknowledgeFailed>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e034      	b.n	8003068 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d028      	beq.n	8003058 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003006:	f7fe fde5 	bl	8001bd4 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	429a      	cmp	r2, r3
 8003014:	d302      	bcc.n	800301c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d11d      	bne.n	8003058 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b04      	cmp	r3, #4
 8003028:	d016      	beq.n	8003058 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003044:	f043 0220 	orr.w	r2, r3, #32
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e007      	b.n	8003068 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b04      	cmp	r3, #4
 8003064:	d1c3      	bne.n	8002fee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800307c:	e049      	b.n	8003112 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b10      	cmp	r3, #16
 800308a:	d119      	bne.n	80030c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0210 	mvn.w	r2, #16
 8003094:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e030      	b.n	8003122 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c0:	f7fe fd88 	bl	8001bd4 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d302      	bcc.n	80030d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d11d      	bne.n	8003112 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e0:	2b40      	cmp	r3, #64	@ 0x40
 80030e2:	d016      	beq.n	8003112 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	f043 0220 	orr.w	r2, r3, #32
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e007      	b.n	8003122 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800311c:	2b40      	cmp	r3, #64	@ 0x40
 800311e:	d1ae      	bne.n	800307e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800313c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003140:	d11b      	bne.n	800317a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800314a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	f043 0204 	orr.w	r2, r3, #4
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af02      	add	r7, sp, #8
 800318e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e101      	b.n	800339e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d106      	bne.n	80031ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f006 fca9 	bl	8009b0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2203      	movs	r2, #3
 80031be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031c8:	d102      	bne.n	80031d0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f003 f8f6 	bl	80063c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	7c1a      	ldrb	r2, [r3, #16]
 80031e2:	f88d 2000 	strb.w	r2, [sp]
 80031e6:	3304      	adds	r3, #4
 80031e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031ea:	f002 ffd5 	bl	8006198 <USB_CoreInit>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0ce      	b.n	800339e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f003 f8ee 	bl	80063e8 <USB_SetCurrentMode>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2202      	movs	r2, #2
 8003216:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e0bf      	b.n	800339e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800321e:	2300      	movs	r3, #0
 8003220:	73fb      	strb	r3, [r7, #15]
 8003222:	e04a      	b.n	80032ba <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	3315      	adds	r3, #21
 8003234:	2201      	movs	r2, #1
 8003236:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	3314      	adds	r3, #20
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800324c:	7bfa      	ldrb	r2, [r7, #15]
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	b298      	uxth	r0, r3
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	332e      	adds	r3, #46	@ 0x2e
 8003260:	4602      	mov	r2, r0
 8003262:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	3318      	adds	r3, #24
 8003274:	2200      	movs	r2, #0
 8003276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003278:	7bfa      	ldrb	r2, [r7, #15]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	331c      	adds	r3, #28
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800328c:	7bfa      	ldrb	r2, [r7, #15]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	3320      	adds	r3, #32
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032a0:	7bfa      	ldrb	r2, [r7, #15]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	3324      	adds	r3, #36	@ 0x24
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	3301      	adds	r3, #1
 80032b8:	73fb      	strb	r3, [r7, #15]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	791b      	ldrb	r3, [r3, #4]
 80032be:	7bfa      	ldrb	r2, [r7, #15]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d3af      	bcc.n	8003224 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c4:	2300      	movs	r3, #0
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	e044      	b.n	8003354 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032ca:	7bfa      	ldrb	r2, [r7, #15]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032e0:	7bfa      	ldrb	r2, [r7, #15]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80032f2:	7bfa      	ldrb	r2, [r7, #15]
 80032f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032f6:	7bfa      	ldrb	r2, [r7, #15]
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003322:	7bfa      	ldrb	r2, [r7, #15]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003338:	7bfa      	ldrb	r2, [r7, #15]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	3301      	adds	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	791b      	ldrb	r3, [r3, #4]
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	429a      	cmp	r2, r3
 800335c:	d3b5      	bcc.n	80032ca <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	7c1a      	ldrb	r2, [r3, #16]
 8003366:	f88d 2000 	strb.w	r2, [sp]
 800336a:	3304      	adds	r3, #4
 800336c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800336e:	f003 f887 	bl	8006480 <USB_DevInit>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e00c      	b.n	800339e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f004 f8d1 	bl	800753e <USB_DevDisconnect>

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b084      	sub	sp, #16
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_PCD_Start+0x1c>
 80033be:	2302      	movs	r3, #2
 80033c0:	e022      	b.n	8003408 <HAL_PCD_Start+0x62>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d009      	beq.n	80033ea <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d105      	bne.n	80033ea <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f002 ffd8 	bl	80063a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f004 f87f 	bl	80074fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b08d      	sub	sp, #52	@ 0x34
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f004 f93d 	bl	80076a6 <USB_GetMode>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	f040 848c 	bne.w	8003d4c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f004 f8a1 	bl	8007580 <USB_ReadInterrupts>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8482 	beq.w	8003d4a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	0a1b      	lsrs	r3, r3, #8
 8003450:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f004 f88e 	bl	8007580 <USB_ReadInterrupts>
 8003464:	4603      	mov	r3, r0
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b02      	cmp	r3, #2
 800346c:	d107      	bne.n	800347e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f002 0202 	and.w	r2, r2, #2
 800347c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f004 f87c 	bl	8007580 <USB_ReadInterrupts>
 8003488:	4603      	mov	r3, r0
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	2b10      	cmp	r3, #16
 8003490:	d161      	bne.n	8003556 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699a      	ldr	r2, [r3, #24]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0210 	bic.w	r2, r2, #16
 80034a0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	f003 020f 	and.w	r2, r3, #15
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	3304      	adds	r3, #4
 80034c0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	0c5b      	lsrs	r3, r3, #17
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d124      	bne.n	8003518 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d035      	beq.n	8003546 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	461a      	mov	r2, r3
 80034ec:	6a38      	ldr	r0, [r7, #32]
 80034ee:	f003 feb3 	bl	8007258 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	091b      	lsrs	r3, r3, #4
 80034fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034fe:	441a      	add	r2, r3
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	695a      	ldr	r2, [r3, #20]
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003510:	441a      	add	r2, r3
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	615a      	str	r2, [r3, #20]
 8003516:	e016      	b.n	8003546 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	0c5b      	lsrs	r3, r3, #17
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	2b06      	cmp	r3, #6
 8003522:	d110      	bne.n	8003546 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800352a:	2208      	movs	r2, #8
 800352c:	4619      	mov	r1, r3
 800352e:	6a38      	ldr	r0, [r7, #32]
 8003530:	f003 fe92 	bl	8007258 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	091b      	lsrs	r3, r3, #4
 800353c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003540:	441a      	add	r2, r3
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699a      	ldr	r2, [r3, #24]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0210 	orr.w	r2, r2, #16
 8003554:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f004 f810 	bl	8007580 <USB_ReadInterrupts>
 8003560:	4603      	mov	r3, r0
 8003562:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003566:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800356a:	f040 80a7 	bne.w	80036bc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f004 f815 	bl	80075a6 <USB_ReadDevAllOutEpInterrupt>
 800357c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800357e:	e099      	b.n	80036b4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 808e 	beq.w	80036a8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	4611      	mov	r1, r2
 8003596:	4618      	mov	r0, r3
 8003598:	f004 f839 	bl	800760e <USB_ReadDevOutEPInterrupt>
 800359c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00c      	beq.n	80035c2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80035a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035b4:	461a      	mov	r2, r3
 80035b6:	2301      	movs	r3, #1
 80035b8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80035ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 fea3 	bl	8004308 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00c      	beq.n	80035e6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035d8:	461a      	mov	r2, r3
 80035da:	2308      	movs	r3, #8
 80035dc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80035de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 ff79 	bl	80044d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80035f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035fc:	461a      	mov	r2, r3
 80035fe:	2310      	movs	r3, #16
 8003600:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d030      	beq.n	800366e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003614:	2b80      	cmp	r3, #128	@ 0x80
 8003616:	d109      	bne.n	800362c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003626:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800362a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800362c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	4413      	add	r3, r2
 800363e:	3304      	adds	r3, #4
 8003640:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	78db      	ldrb	r3, [r3, #3]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d108      	bne.n	800365c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2200      	movs	r2, #0
 800364e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003652:	b2db      	uxtb	r3, r3
 8003654:	4619      	mov	r1, r3
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f006 fb54 	bl	8009d04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800365c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003668:	461a      	mov	r2, r3
 800366a:	2302      	movs	r3, #2
 800366c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f003 0320 	and.w	r3, r3, #32
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	4413      	add	r3, r2
 8003680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003684:	461a      	mov	r2, r3
 8003686:	2320      	movs	r3, #32
 8003688:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d009      	beq.n	80036a8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a0:	461a      	mov	r2, r3
 80036a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80036a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036aa:	3301      	adds	r3, #1
 80036ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80036ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80036b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f47f af62 	bne.w	8003580 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f003 ff5d 	bl	8007580 <USB_ReadInterrupts>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036d0:	f040 80db 	bne.w	800388a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f003 ff7e 	bl	80075da <USB_ReadDevAllInEpInterrupt>
 80036de:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80036e4:	e0cd      	b.n	8003882 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80c2 	beq.w	8003876 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	4611      	mov	r1, r2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f003 ffa4 	bl	800764a <USB_ReadDevInEPInterrupt>
 8003702:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d057      	beq.n	80037be <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800370e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	2201      	movs	r2, #1
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003722:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	43db      	mvns	r3, r3
 8003728:	69f9      	ldr	r1, [r7, #28]
 800372a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800372e:	4013      	ands	r3, r2
 8003730:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800373e:	461a      	mov	r2, r3
 8003740:	2301      	movs	r3, #1
 8003742:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	799b      	ldrb	r3, [r3, #6]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d132      	bne.n	80037b2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	3320      	adds	r3, #32
 800375c:	6819      	ldr	r1, [r3, #0]
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4403      	add	r3, r0
 800376c:	331c      	adds	r3, #28
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4419      	add	r1, r3
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4403      	add	r3, r0
 8003780:	3320      	adds	r3, #32
 8003782:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003786:	2b00      	cmp	r3, #0
 8003788:	d113      	bne.n	80037b2 <HAL_PCD_IRQHandler+0x3a2>
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	3324      	adds	r3, #36	@ 0x24
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d108      	bne.n	80037b2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037aa:	461a      	mov	r2, r3
 80037ac:	2101      	movs	r1, #1
 80037ae:	f003 ffab 	bl	8007708 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	4619      	mov	r1, r3
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f006 fa28 	bl	8009c0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037d4:	461a      	mov	r2, r3
 80037d6:	2308      	movs	r3, #8
 80037d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80037e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037f0:	461a      	mov	r2, r3
 80037f2:	2310      	movs	r3, #16
 80037f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800380c:	461a      	mov	r2, r3
 800380e:	2340      	movs	r3, #64	@ 0x40
 8003810:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d023      	beq.n	8003864 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800381c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800381e:	6a38      	ldr	r0, [r7, #32]
 8003820:	f002 ff92 	bl	8006748 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003826:	4613      	mov	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	3310      	adds	r3, #16
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	4413      	add	r3, r2
 8003834:	3304      	adds	r3, #4
 8003836:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	78db      	ldrb	r3, [r3, #3]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d108      	bne.n	8003852 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2200      	movs	r2, #0
 8003844:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	b2db      	uxtb	r3, r3
 800384a:	4619      	mov	r1, r3
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f006 fa6b 	bl	8009d28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800385e:	461a      	mov	r2, r3
 8003860:	2302      	movs	r3, #2
 8003862:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800386e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 fcbd 	bl	80041f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	3301      	adds	r3, #1
 800387a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800387c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387e:	085b      	lsrs	r3, r3, #1
 8003880:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003884:	2b00      	cmp	r3, #0
 8003886:	f47f af2e 	bne.w	80036e6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f003 fe76 	bl	8007580 <USB_ReadInterrupts>
 8003894:	4603      	mov	r3, r0
 8003896:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800389a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800389e:	d122      	bne.n	80038e6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d108      	bne.n	80038d0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038c6:	2100      	movs	r1, #0
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 fea3 	bl	8004614 <HAL_PCDEx_LPM_Callback>
 80038ce:	e002      	b.n	80038d6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f006 fa09 	bl	8009ce8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695a      	ldr	r2, [r3, #20]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80038e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f003 fe48 	bl	8007580 <USB_ReadInterrupts>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038fa:	d112      	bne.n	8003922 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b01      	cmp	r3, #1
 800390a:	d102      	bne.n	8003912 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f006 f9c5 	bl	8009c9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695a      	ldr	r2, [r3, #20]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003920:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f003 fe2a 	bl	8007580 <USB_ReadInterrupts>
 800392c:	4603      	mov	r3, r0
 800392e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003936:	f040 80b7 	bne.w	8003aa8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2110      	movs	r1, #16
 8003954:	4618      	mov	r0, r3
 8003956:	f002 fef7 	bl	8006748 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395a:	2300      	movs	r3, #0
 800395c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800395e:	e046      	b.n	80039ee <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800396c:	461a      	mov	r2, r3
 800396e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003972:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003984:	0151      	lsls	r1, r2, #5
 8003986:	69fa      	ldr	r2, [r7, #28]
 8003988:	440a      	add	r2, r1
 800398a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800398e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003992:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	4413      	add	r3, r2
 800399c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039a0:	461a      	mov	r2, r3
 80039a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80039a6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039b8:	0151      	lsls	r1, r2, #5
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	440a      	add	r2, r1
 80039be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80039c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039d8:	0151      	lsls	r1, r2, #5
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	440a      	add	r2, r1
 80039de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80039e6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ea:	3301      	adds	r3, #1
 80039ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	791b      	ldrb	r3, [r3, #4]
 80039f2:	461a      	mov	r2, r3
 80039f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d3b2      	bcc.n	8003960 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a08:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003a0c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	7bdb      	ldrb	r3, [r3, #15]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d016      	beq.n	8003a44 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a26:	f043 030b 	orr.w	r3, r3, #11
 8003a2a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a3c:	f043 030b 	orr.w	r3, r3, #11
 8003a40:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a42:	e015      	b.n	8003a70 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a52:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003a56:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003a5a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a6a:	f043 030b 	orr.w	r3, r3, #11
 8003a6e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a7e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003a82:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a92:	461a      	mov	r2, r3
 8003a94:	f003 fe38 	bl	8007708 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695a      	ldr	r2, [r3, #20]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f003 fd67 	bl	8007580 <USB_ReadInterrupts>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ab8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003abc:	d123      	bne.n	8003b06 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f003 fdfd 	bl	80076c2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f002 feb4 	bl	800683a <USB_GetDevSpeed>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681c      	ldr	r4, [r3, #0]
 8003ade:	f001 f9c9 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8003ae2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4620      	mov	r0, r4
 8003aec:	f002 fbb8 	bl	8006260 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f006 f8b4 	bl	8009c5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695a      	ldr	r2, [r3, #20]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003b04:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f003 fd38 	bl	8007580 <USB_ReadInterrupts>
 8003b10:	4603      	mov	r3, r0
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d10a      	bne.n	8003b30 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f006 f891 	bl	8009c42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f002 0208 	and.w	r2, r2, #8
 8003b2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f003 fd23 	bl	8007580 <USB_ReadInterrupts>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b40:	2b80      	cmp	r3, #128	@ 0x80
 8003b42:	d123      	bne.n	8003b8c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b50:	2301      	movs	r3, #1
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b54:	e014      	b.n	8003b80 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4413      	add	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d105      	bne.n	8003b7a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	4619      	mov	r1, r3
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fb0a 	bl	800418e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	791b      	ldrb	r3, [r3, #4]
 8003b84:	461a      	mov	r2, r3
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d3e4      	bcc.n	8003b56 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f003 fcf5 	bl	8007580 <USB_ReadInterrupts>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ba0:	d13c      	bne.n	8003c1c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ba6:	e02b      	b.n	8003c00 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	3318      	adds	r3, #24
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d115      	bne.n	8003bfa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003bce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	da12      	bge.n	8003bfa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	3317      	adds	r3, #23
 8003be4:	2201      	movs	r2, #1
 8003be6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 faca 	bl	800418e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	791b      	ldrb	r3, [r3, #4]
 8003c04:	461a      	mov	r2, r3
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d3cd      	bcc.n	8003ba8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695a      	ldr	r2, [r3, #20]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003c1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f003 fcad 	bl	8007580 <USB_ReadInterrupts>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c30:	d156      	bne.n	8003ce0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c32:	2301      	movs	r3, #1
 8003c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c36:	e045      	b.n	8003cc4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d12e      	bne.n	8003cbe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	da2b      	bge.n	8003cbe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003c72:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d121      	bne.n	8003cbe <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c7e:	4613      	mov	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cba:	6053      	str	r3, [r2, #4]
            break;
 8003cbc:	e008      	b.n	8003cd0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	791b      	ldrb	r3, [r3, #4]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d3b3      	bcc.n	8003c38 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003cde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f003 fc4b 	bl	8007580 <USB_ReadInterrupts>
 8003cea:	4603      	mov	r3, r0
 8003cec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cf4:	d10a      	bne.n	8003d0c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f006 f828 	bl	8009d4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003d0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f003 fc35 	bl	8007580 <USB_ReadInterrupts>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d115      	bne.n	8003d4c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f006 f818 	bl	8009d68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6859      	ldr	r1, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	605a      	str	r2, [r3, #4]
 8003d48:	e000      	b.n	8003d4c <HAL_PCD_IRQHandler+0x93c>
      return;
 8003d4a:	bf00      	nop
    }
  }
}
 8003d4c:	3734      	adds	r7, #52	@ 0x34
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd90      	pop	{r4, r7, pc}

08003d52 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b082      	sub	sp, #8
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_PCD_SetAddress+0x1a>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e012      	b.n	8003d92 <HAL_PCD_SetAddress+0x40>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	4611      	mov	r1, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f003 fb94 	bl	80074b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	4608      	mov	r0, r1
 8003da4:	4611      	mov	r1, r2
 8003da6:	461a      	mov	r2, r3
 8003da8:	4603      	mov	r3, r0
 8003daa:	70fb      	strb	r3, [r7, #3]
 8003dac:	460b      	mov	r3, r1
 8003dae:	803b      	strh	r3, [r7, #0]
 8003db0:	4613      	mov	r3, r2
 8003db2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	da0f      	bge.n	8003de0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	f003 020f 	and.w	r2, r3, #15
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	3310      	adds	r3, #16
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	705a      	strb	r2, [r3, #1]
 8003dde:	e00f      	b.n	8003e00 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	f003 020f 	and.w	r2, r3, #15
 8003de6:	4613      	mov	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	4413      	add	r3, r2
 8003df6:	3304      	adds	r3, #4
 8003df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003e0c:	883b      	ldrh	r3, [r7, #0]
 8003e0e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	78ba      	ldrb	r2, [r7, #2]
 8003e1a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	785b      	ldrb	r3, [r3, #1]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d004      	beq.n	8003e2e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e2e:	78bb      	ldrb	r3, [r7, #2]
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d102      	bne.n	8003e3a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_PCD_EP_Open+0xae>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e00e      	b.n	8003e66 <HAL_PCD_EP_Open+0xcc>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68f9      	ldr	r1, [r7, #12]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f002 fd14 	bl	8006884 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003e64:	7afb      	ldrb	r3, [r7, #11]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b084      	sub	sp, #16
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	460b      	mov	r3, r1
 8003e78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	da0f      	bge.n	8003ea2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	f003 020f 	and.w	r2, r3, #15
 8003e88:	4613      	mov	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	3310      	adds	r3, #16
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	4413      	add	r3, r2
 8003e96:	3304      	adds	r3, #4
 8003e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	705a      	strb	r2, [r3, #1]
 8003ea0:	e00f      	b.n	8003ec2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	f003 020f 	and.w	r2, r3, #15
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3304      	adds	r3, #4
 8003eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	f003 030f 	and.w	r3, r3, #15
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_PCD_EP_Close+0x6e>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e00e      	b.n	8003efa <HAL_PCD_EP_Close+0x8c>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68f9      	ldr	r1, [r7, #12]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f002 fd52 	bl	8006994 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b086      	sub	sp, #24
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f12:	7afb      	ldrb	r3, [r7, #11]
 8003f14:	f003 020f 	and.w	r2, r3, #15
 8003f18:	4613      	mov	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4413      	add	r3, r2
 8003f28:	3304      	adds	r3, #4
 8003f2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2200      	movs	r2, #0
 8003f42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f44:	7afb      	ldrb	r3, [r7, #11]
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	799b      	ldrb	r3, [r3, #6]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d102      	bne.n	8003f5e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	799b      	ldrb	r3, [r3, #6]
 8003f66:	461a      	mov	r2, r3
 8003f68:	6979      	ldr	r1, [r7, #20]
 8003f6a:	f002 fdef 	bl	8006b4c <USB_EPStartXfer>

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	f003 020f 	and.w	r2, r3, #15
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003f9a:	681b      	ldr	r3, [r3, #0]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	607a      	str	r2, [r7, #4]
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fb8:	7afb      	ldrb	r3, [r7, #11]
 8003fba:	f003 020f 	and.w	r2, r3, #15
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	3310      	adds	r3, #16
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4413      	add	r3, r2
 8003fcc:	3304      	adds	r3, #4
 8003fce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fe8:	7afb      	ldrb	r3, [r7, #11]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	799b      	ldrb	r3, [r3, #6]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d102      	bne.n	8004002 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	799b      	ldrb	r3, [r3, #6]
 800400a:	461a      	mov	r2, r3
 800400c:	6979      	ldr	r1, [r7, #20]
 800400e:	f002 fd9d 	bl	8006b4c <USB_EPStartXfer>

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	7912      	ldrb	r2, [r2, #4]
 8004032:	4293      	cmp	r3, r2
 8004034:	d901      	bls.n	800403a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e04f      	b.n	80040da <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800403a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800403e:	2b00      	cmp	r3, #0
 8004040:	da0f      	bge.n	8004062 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004042:	78fb      	ldrb	r3, [r7, #3]
 8004044:	f003 020f 	and.w	r2, r3, #15
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	3310      	adds	r3, #16
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	4413      	add	r3, r2
 8004056:	3304      	adds	r3, #4
 8004058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	705a      	strb	r2, [r3, #1]
 8004060:	e00d      	b.n	800407e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004062:	78fa      	ldrb	r2, [r7, #3]
 8004064:	4613      	mov	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4413      	add	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	4413      	add	r3, r2
 8004074:	3304      	adds	r3, #4
 8004076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	b2da      	uxtb	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_PCD_EP_SetStall+0x82>
 800409a:	2302      	movs	r3, #2
 800409c:	e01d      	b.n	80040da <HAL_PCD_EP_SetStall+0xbe>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68f9      	ldr	r1, [r7, #12]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f003 f92b 	bl	8007308 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d109      	bne.n	80040d0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	7999      	ldrb	r1, [r3, #6]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040ca:	461a      	mov	r2, r3
 80040cc:	f003 fb1c 	bl	8007708 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	460b      	mov	r3, r1
 80040ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040ee:	78fb      	ldrb	r3, [r7, #3]
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	7912      	ldrb	r2, [r2, #4]
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d901      	bls.n	8004100 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e042      	b.n	8004186 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004104:	2b00      	cmp	r3, #0
 8004106:	da0f      	bge.n	8004128 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	f003 020f 	and.w	r2, r3, #15
 800410e:	4613      	mov	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4413      	add	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	3310      	adds	r3, #16
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	4413      	add	r3, r2
 800411c:	3304      	adds	r3, #4
 800411e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2201      	movs	r2, #1
 8004124:	705a      	strb	r2, [r3, #1]
 8004126:	e00f      	b.n	8004148 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	f003 020f 	and.w	r2, r3, #15
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	4413      	add	r3, r2
 800413e:	3304      	adds	r3, #4
 8004140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	b2da      	uxtb	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_PCD_EP_ClrStall+0x86>
 8004164:	2302      	movs	r3, #2
 8004166:	e00e      	b.n	8004186 <HAL_PCD_EP_ClrStall+0xa4>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68f9      	ldr	r1, [r7, #12]
 8004176:	4618      	mov	r0, r3
 8004178:	f003 f934 	bl	80073e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	460b      	mov	r3, r1
 8004198:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800419a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	da0c      	bge.n	80041bc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041a2:	78fb      	ldrb	r3, [r7, #3]
 80041a4:	f003 020f 	and.w	r2, r3, #15
 80041a8:	4613      	mov	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	3310      	adds	r3, #16
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	4413      	add	r3, r2
 80041b6:	3304      	adds	r3, #4
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	e00c      	b.n	80041d6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	f003 020f 	and.w	r2, r3, #15
 80041c2:	4613      	mov	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	4413      	add	r3, r2
 80041d2:	3304      	adds	r3, #4
 80041d4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68f9      	ldr	r1, [r7, #12]
 80041dc:	4618      	mov	r0, r3
 80041de:	f002 ff53 	bl	8007088 <USB_EPStopXfer>
 80041e2:	4603      	mov	r3, r0
 80041e4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80041e6:	7afb      	ldrb	r3, [r7, #11]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08a      	sub	sp, #40	@ 0x28
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	4613      	mov	r3, r2
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	3310      	adds	r3, #16
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	4413      	add	r3, r2
 8004214:	3304      	adds	r3, #4
 8004216:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	429a      	cmp	r2, r3
 8004222:	d901      	bls.n	8004228 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e06b      	b.n	8004300 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	429a      	cmp	r2, r3
 800423c:	d902      	bls.n	8004244 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	3303      	adds	r3, #3
 8004248:	089b      	lsrs	r3, r3, #2
 800424a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800424c:	e02a      	b.n	80042a4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	691a      	ldr	r2, [r3, #16]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	429a      	cmp	r2, r3
 8004262:	d902      	bls.n	800426a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3303      	adds	r3, #3
 800426e:	089b      	lsrs	r3, r3, #2
 8004270:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	68d9      	ldr	r1, [r3, #12]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	b2da      	uxtb	r2, r3
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	4603      	mov	r3, r0
 8004286:	6978      	ldr	r0, [r7, #20]
 8004288:	f002 ffa8 	bl	80071dc <USB_WritePacket>

    ep->xfer_buff  += len;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	441a      	add	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	441a      	add	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d809      	bhi.n	80042ce <PCD_WriteEmptyTxFifo+0xde>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	695a      	ldr	r2, [r3, #20]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d203      	bcs.n	80042ce <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1bf      	bne.n	800424e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	691a      	ldr	r2, [r3, #16]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d811      	bhi.n	80042fe <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	f003 030f 	and.w	r3, r3, #15
 80042e0:	2201      	movs	r2, #1
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	43db      	mvns	r3, r3
 80042f4:	6939      	ldr	r1, [r7, #16]
 80042f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042fa:	4013      	ands	r3, r2
 80042fc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3720      	adds	r7, #32
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	333c      	adds	r3, #60	@ 0x3c
 8004320:	3304      	adds	r3, #4
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	799b      	ldrb	r3, [r3, #6]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d17b      	bne.n	8004436 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	2b00      	cmp	r3, #0
 8004346:	d015      	beq.n	8004374 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	4a61      	ldr	r2, [pc, #388]	@ (80044d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	f240 80b9 	bls.w	80044c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80b3 	beq.w	80044c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800436a:	461a      	mov	r2, r3
 800436c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004370:	6093      	str	r3, [r2, #8]
 8004372:	e0a7      	b.n	80044c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	2b00      	cmp	r3, #0
 800437c:	d009      	beq.n	8004392 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800438a:	461a      	mov	r2, r3
 800438c:	2320      	movs	r3, #32
 800438e:	6093      	str	r3, [r2, #8]
 8004390:	e098      	b.n	80044c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004398:	2b00      	cmp	r3, #0
 800439a:	f040 8093 	bne.w	80044c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	4a4b      	ldr	r2, [pc, #300]	@ (80044d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d90f      	bls.n	80043c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043bc:	461a      	mov	r2, r3
 80043be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043c2:	6093      	str	r3, [r2, #8]
 80043c4:	e07e      	b.n	80044c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	4613      	mov	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	4413      	add	r3, r2
 80043d8:	3304      	adds	r3, #4
 80043da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a1a      	ldr	r2, [r3, #32]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	0159      	lsls	r1, r3, #5
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	440b      	add	r3, r1
 80043e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f2:	1ad2      	subs	r2, r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d114      	bne.n	8004428 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004410:	461a      	mov	r2, r3
 8004412:	2101      	movs	r1, #1
 8004414:	f003 f978 	bl	8007708 <USB_EP0_OutStart>
 8004418:	e006      	b.n	8004428 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	441a      	add	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	4619      	mov	r1, r3
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f005 fbd2 	bl	8009bd8 <HAL_PCD_DataOutStageCallback>
 8004434:	e046      	b.n	80044c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	4a26      	ldr	r2, [pc, #152]	@ (80044d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d124      	bne.n	8004488 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004454:	461a      	mov	r2, r3
 8004456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800445a:	6093      	str	r3, [r2, #8]
 800445c:	e032      	b.n	80044c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004474:	461a      	mov	r2, r3
 8004476:	2320      	movs	r3, #32
 8004478:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	4619      	mov	r1, r3
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f005 fba9 	bl	8009bd8 <HAL_PCD_DataOutStageCallback>
 8004486:	e01d      	b.n	80044c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d114      	bne.n	80044b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	4613      	mov	r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d108      	bne.n	80044b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044b0:	461a      	mov	r2, r3
 80044b2:	2100      	movs	r1, #0
 80044b4:	f003 f928 	bl	8007708 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	4619      	mov	r1, r3
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f005 fb8a 	bl	8009bd8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	4f54300a 	.word	0x4f54300a
 80044d4:	4f54310a 	.word	0x4f54310a

080044d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	333c      	adds	r3, #60	@ 0x3c
 80044f0:	3304      	adds	r3, #4
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4a15      	ldr	r2, [pc, #84]	@ (8004560 <PCD_EP_OutSetupPacket_int+0x88>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d90e      	bls.n	800452c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004514:	2b00      	cmp	r3, #0
 8004516:	d009      	beq.n	800452c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004524:	461a      	mov	r2, r3
 8004526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800452a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f005 fb41 	bl	8009bb4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4a0a      	ldr	r2, [pc, #40]	@ (8004560 <PCD_EP_OutSetupPacket_int+0x88>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d90c      	bls.n	8004554 <PCD_EP_OutSetupPacket_int+0x7c>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	799b      	ldrb	r3, [r3, #6]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d108      	bne.n	8004554 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800454c:	461a      	mov	r2, r3
 800454e:	2101      	movs	r1, #1
 8004550:	f003 f8da 	bl	8007708 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	4f54300a 	.word	0x4f54300a

08004564 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	70fb      	strb	r3, [r7, #3]
 8004570:	4613      	mov	r3, r2
 8004572:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d107      	bne.n	8004592 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004582:	883b      	ldrh	r3, [r7, #0]
 8004584:	0419      	lsls	r1, r3, #16
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	430a      	orrs	r2, r1
 800458e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004590:	e028      	b.n	80045e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004598:	0c1b      	lsrs	r3, r3, #16
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	4413      	add	r3, r2
 800459e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045a0:	2300      	movs	r3, #0
 80045a2:	73fb      	strb	r3, [r7, #15]
 80045a4:	e00d      	b.n	80045c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	3340      	adds	r3, #64	@ 0x40
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	0c1b      	lsrs	r3, r3, #16
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	4413      	add	r3, r2
 80045ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	3301      	adds	r3, #1
 80045c0:	73fb      	strb	r3, [r7, #15]
 80045c2:	7bfa      	ldrb	r2, [r7, #15]
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d3ec      	bcc.n	80045a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80045cc:	883b      	ldrh	r3, [r7, #0]
 80045ce:	0418      	lsls	r0, r3, #16
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6819      	ldr	r1, [r3, #0]
 80045d4:	78fb      	ldrb	r3, [r7, #3]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	4302      	orrs	r2, r0
 80045dc:	3340      	adds	r3, #64	@ 0x40
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	460b      	mov	r3, r1
 80045fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	887a      	ldrh	r2, [r7, #2]
 8004604:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e267      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d075      	beq.n	8004736 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800464a:	4b88      	ldr	r3, [pc, #544]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	2b04      	cmp	r3, #4
 8004654:	d00c      	beq.n	8004670 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004656:	4b85      	ldr	r3, [pc, #532]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800465e:	2b08      	cmp	r3, #8
 8004660:	d112      	bne.n	8004688 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004662:	4b82      	ldr	r3, [pc, #520]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800466a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800466e:	d10b      	bne.n	8004688 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004670:	4b7e      	ldr	r3, [pc, #504]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d05b      	beq.n	8004734 <HAL_RCC_OscConfig+0x108>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d157      	bne.n	8004734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e242      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004690:	d106      	bne.n	80046a0 <HAL_RCC_OscConfig+0x74>
 8004692:	4b76      	ldr	r3, [pc, #472]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a75      	ldr	r2, [pc, #468]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	e01d      	b.n	80046dc <HAL_RCC_OscConfig+0xb0>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCC_OscConfig+0x98>
 80046aa:	4b70      	ldr	r3, [pc, #448]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a6f      	ldr	r2, [pc, #444]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	4b6d      	ldr	r3, [pc, #436]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a6c      	ldr	r2, [pc, #432]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e00b      	b.n	80046dc <HAL_RCC_OscConfig+0xb0>
 80046c4:	4b69      	ldr	r3, [pc, #420]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a68      	ldr	r2, [pc, #416]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	4b66      	ldr	r3, [pc, #408]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a65      	ldr	r2, [pc, #404]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d013      	beq.n	800470c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7fd fa76 	bl	8001bd4 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ec:	f7fd fa72 	bl	8001bd4 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b64      	cmp	r3, #100	@ 0x64
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e207      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fe:	4b5b      	ldr	r3, [pc, #364]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0xc0>
 800470a:	e014      	b.n	8004736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470c:	f7fd fa62 	bl	8001bd4 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004714:	f7fd fa5e 	bl	8001bd4 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b64      	cmp	r3, #100	@ 0x64
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e1f3      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004726:	4b51      	ldr	r3, [pc, #324]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0xe8>
 8004732:	e000      	b.n	8004736 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d063      	beq.n	800480a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004742:	4b4a      	ldr	r3, [pc, #296]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00b      	beq.n	8004766 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800474e:	4b47      	ldr	r3, [pc, #284]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004756:	2b08      	cmp	r3, #8
 8004758:	d11c      	bne.n	8004794 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800475a:	4b44      	ldr	r3, [pc, #272]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d116      	bne.n	8004794 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004766:	4b41      	ldr	r3, [pc, #260]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <HAL_RCC_OscConfig+0x152>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d001      	beq.n	800477e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e1c7      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477e:	4b3b      	ldr	r3, [pc, #236]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4937      	ldr	r1, [pc, #220]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 800478e:	4313      	orrs	r3, r2
 8004790:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004792:	e03a      	b.n	800480a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d020      	beq.n	80047de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800479c:	4b34      	ldr	r3, [pc, #208]	@ (8004870 <HAL_RCC_OscConfig+0x244>)
 800479e:	2201      	movs	r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a2:	f7fd fa17 	bl	8001bd4 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047aa:	f7fd fa13 	bl	8001bd4 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e1a8      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047bc:	4b2b      	ldr	r3, [pc, #172]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c8:	4b28      	ldr	r3, [pc, #160]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	4925      	ldr	r1, [pc, #148]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	600b      	str	r3, [r1, #0]
 80047dc:	e015      	b.n	800480a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047de:	4b24      	ldr	r3, [pc, #144]	@ (8004870 <HAL_RCC_OscConfig+0x244>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e4:	f7fd f9f6 	bl	8001bd4 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ec:	f7fd f9f2 	bl	8001bd4 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e187      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fe:	4b1b      	ldr	r3, [pc, #108]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d036      	beq.n	8004884 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d016      	beq.n	800484c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800481e:	4b15      	ldr	r3, [pc, #84]	@ (8004874 <HAL_RCC_OscConfig+0x248>)
 8004820:	2201      	movs	r2, #1
 8004822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004824:	f7fd f9d6 	bl	8001bd4 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800482c:	f7fd f9d2 	bl	8001bd4 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e167      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800483e:	4b0b      	ldr	r3, [pc, #44]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0x200>
 800484a:	e01b      	b.n	8004884 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800484c:	4b09      	ldr	r3, [pc, #36]	@ (8004874 <HAL_RCC_OscConfig+0x248>)
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004852:	f7fd f9bf 	bl	8001bd4 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004858:	e00e      	b.n	8004878 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800485a:	f7fd f9bb 	bl	8001bd4 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d907      	bls.n	8004878 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e150      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
 800486c:	40023800 	.word	0x40023800
 8004870:	42470000 	.word	0x42470000
 8004874:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004878:	4b88      	ldr	r3, [pc, #544]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 800487a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1ea      	bne.n	800485a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 8097 	beq.w	80049c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004892:	2300      	movs	r3, #0
 8004894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004896:	4b81      	ldr	r3, [pc, #516]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10f      	bne.n	80048c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a2:	2300      	movs	r3, #0
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	4b7d      	ldr	r3, [pc, #500]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048aa:	4a7c      	ldr	r2, [pc, #496]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 80048ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80048b2:	4b7a      	ldr	r3, [pc, #488]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ba:	60bb      	str	r3, [r7, #8]
 80048bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048be:	2301      	movs	r3, #1
 80048c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c2:	4b77      	ldr	r3, [pc, #476]	@ (8004aa0 <HAL_RCC_OscConfig+0x474>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d118      	bne.n	8004900 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ce:	4b74      	ldr	r3, [pc, #464]	@ (8004aa0 <HAL_RCC_OscConfig+0x474>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a73      	ldr	r2, [pc, #460]	@ (8004aa0 <HAL_RCC_OscConfig+0x474>)
 80048d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048da:	f7fd f97b 	bl	8001bd4 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e2:	f7fd f977 	bl	8001bd4 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e10c      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f4:	4b6a      	ldr	r3, [pc, #424]	@ (8004aa0 <HAL_RCC_OscConfig+0x474>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0f0      	beq.n	80048e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d106      	bne.n	8004916 <HAL_RCC_OscConfig+0x2ea>
 8004908:	4b64      	ldr	r3, [pc, #400]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 800490a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490c:	4a63      	ldr	r2, [pc, #396]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 800490e:	f043 0301 	orr.w	r3, r3, #1
 8004912:	6713      	str	r3, [r2, #112]	@ 0x70
 8004914:	e01c      	b.n	8004950 <HAL_RCC_OscConfig+0x324>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2b05      	cmp	r3, #5
 800491c:	d10c      	bne.n	8004938 <HAL_RCC_OscConfig+0x30c>
 800491e:	4b5f      	ldr	r3, [pc, #380]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 8004920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004922:	4a5e      	ldr	r2, [pc, #376]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 8004924:	f043 0304 	orr.w	r3, r3, #4
 8004928:	6713      	str	r3, [r2, #112]	@ 0x70
 800492a:	4b5c      	ldr	r3, [pc, #368]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 800492c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492e:	4a5b      	ldr	r2, [pc, #364]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 8004930:	f043 0301 	orr.w	r3, r3, #1
 8004934:	6713      	str	r3, [r2, #112]	@ 0x70
 8004936:	e00b      	b.n	8004950 <HAL_RCC_OscConfig+0x324>
 8004938:	4b58      	ldr	r3, [pc, #352]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 800493a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800493c:	4a57      	ldr	r2, [pc, #348]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 800493e:	f023 0301 	bic.w	r3, r3, #1
 8004942:	6713      	str	r3, [r2, #112]	@ 0x70
 8004944:	4b55      	ldr	r3, [pc, #340]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 8004946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004948:	4a54      	ldr	r2, [pc, #336]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 800494a:	f023 0304 	bic.w	r3, r3, #4
 800494e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d015      	beq.n	8004984 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004958:	f7fd f93c 	bl	8001bd4 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800495e:	e00a      	b.n	8004976 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004960:	f7fd f938 	bl	8001bd4 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800496e:	4293      	cmp	r3, r2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e0cb      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004976:	4b49      	ldr	r3, [pc, #292]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0ee      	beq.n	8004960 <HAL_RCC_OscConfig+0x334>
 8004982:	e014      	b.n	80049ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004984:	f7fd f926 	bl	8001bd4 <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800498a:	e00a      	b.n	80049a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800498c:	f7fd f922 	bl	8001bd4 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e0b5      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a2:	4b3e      	ldr	r3, [pc, #248]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 80049a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1ee      	bne.n	800498c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d105      	bne.n	80049c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049b4:	4b39      	ldr	r3, [pc, #228]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 80049b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b8:	4a38      	ldr	r2, [pc, #224]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 80049ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 80a1 	beq.w	8004b0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049ca:	4b34      	ldr	r3, [pc, #208]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d05c      	beq.n	8004a90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d141      	bne.n	8004a62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049de:	4b31      	ldr	r3, [pc, #196]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e4:	f7fd f8f6 	bl	8001bd4 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ec:	f7fd f8f2 	bl	8001bd4 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e087      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fe:	4b27      	ldr	r3, [pc, #156]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69da      	ldr	r2, [r3, #28]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a18:	019b      	lsls	r3, r3, #6
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a20:	085b      	lsrs	r3, r3, #1
 8004a22:	3b01      	subs	r3, #1
 8004a24:	041b      	lsls	r3, r3, #16
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2c:	061b      	lsls	r3, r3, #24
 8004a2e:	491b      	ldr	r1, [pc, #108]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a34:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 8004a36:	2201      	movs	r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3a:	f7fd f8cb 	bl	8001bd4 <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a40:	e008      	b.n	8004a54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a42:	f7fd f8c7 	bl	8001bd4 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e05c      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a54:	4b11      	ldr	r3, [pc, #68]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0f0      	beq.n	8004a42 <HAL_RCC_OscConfig+0x416>
 8004a60:	e054      	b.n	8004b0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a62:	4b10      	ldr	r3, [pc, #64]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a68:	f7fd f8b4 	bl	8001bd4 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a70:	f7fd f8b0 	bl	8001bd4 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e045      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a82:	4b06      	ldr	r3, [pc, #24]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f0      	bne.n	8004a70 <HAL_RCC_OscConfig+0x444>
 8004a8e:	e03d      	b.n	8004b0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d107      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e038      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	40007000 	.word	0x40007000
 8004aa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b18 <HAL_RCC_OscConfig+0x4ec>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d028      	beq.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d121      	bne.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d11a      	bne.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ad8:	4013      	ands	r3, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ade:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d111      	bne.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aee:	085b      	lsrs	r3, r3, #1
 8004af0:	3b01      	subs	r3, #1
 8004af2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d107      	bne.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d001      	beq.n	8004b0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e000      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40023800 	.word	0x40023800

08004b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0cc      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b30:	4b68      	ldr	r3, [pc, #416]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d90c      	bls.n	8004b58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3e:	4b65      	ldr	r3, [pc, #404]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b46:	4b63      	ldr	r3, [pc, #396]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0b8      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d020      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d005      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b70:	4b59      	ldr	r3, [pc, #356]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	4a58      	ldr	r2, [pc, #352]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b88:	4b53      	ldr	r3, [pc, #332]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	4a52      	ldr	r2, [pc, #328]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b94:	4b50      	ldr	r3, [pc, #320]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	494d      	ldr	r1, [pc, #308]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d044      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d107      	bne.n	8004bca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bba:	4b47      	ldr	r3, [pc, #284]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d119      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e07f      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d003      	beq.n	8004bda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d107      	bne.n	8004bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bda:	4b3f      	ldr	r3, [pc, #252]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e06f      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bea:	4b3b      	ldr	r3, [pc, #236]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e067      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bfa:	4b37      	ldr	r3, [pc, #220]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f023 0203 	bic.w	r2, r3, #3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	4934      	ldr	r1, [pc, #208]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c0c:	f7fc ffe2 	bl	8001bd4 <HAL_GetTick>
 8004c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c12:	e00a      	b.n	8004c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c14:	f7fc ffde 	bl	8001bd4 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e04f      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 020c 	and.w	r2, r3, #12
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d1eb      	bne.n	8004c14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c3c:	4b25      	ldr	r3, [pc, #148]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d20c      	bcs.n	8004c64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4a:	4b22      	ldr	r3, [pc, #136]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c52:	4b20      	ldr	r3, [pc, #128]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d001      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e032      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c70:	4b19      	ldr	r3, [pc, #100]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4916      	ldr	r1, [pc, #88]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d009      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c8e:	4b12      	ldr	r3, [pc, #72]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	490e      	ldr	r1, [pc, #56]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ca2:	f000 f821 	bl	8004ce8 <HAL_RCC_GetSysClockFreq>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	091b      	lsrs	r3, r3, #4
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	490a      	ldr	r1, [pc, #40]	@ (8004cdc <HAL_RCC_ClockConfig+0x1c0>)
 8004cb4:	5ccb      	ldrb	r3, [r1, r3]
 8004cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cba:	4a09      	ldr	r2, [pc, #36]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004cbe:	4b09      	ldr	r3, [pc, #36]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fc ff42 	bl	8001b4c <HAL_InitTick>

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40023c00 	.word	0x40023c00
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	0800edf8 	.word	0x0800edf8
 8004ce0:	20000004 	.word	0x20000004
 8004ce4:	20000008 	.word	0x20000008

08004ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cec:	b090      	sub	sp, #64	@ 0x40
 8004cee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d00:	4b59      	ldr	r3, [pc, #356]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f003 030c 	and.w	r3, r3, #12
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d00d      	beq.n	8004d28 <HAL_RCC_GetSysClockFreq+0x40>
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	f200 80a1 	bhi.w	8004e54 <HAL_RCC_GetSysClockFreq+0x16c>
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_RCC_GetSysClockFreq+0x34>
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d003      	beq.n	8004d22 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d1a:	e09b      	b.n	8004e54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d1c:	4b53      	ldr	r3, [pc, #332]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x184>)
 8004d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d20:	e09b      	b.n	8004e5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d22:	4b53      	ldr	r3, [pc, #332]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d26:	e098      	b.n	8004e5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d28:	4b4f      	ldr	r3, [pc, #316]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d32:	4b4d      	ldr	r3, [pc, #308]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d028      	beq.n	8004d90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	099b      	lsrs	r3, r3, #6
 8004d44:	2200      	movs	r2, #0
 8004d46:	623b      	str	r3, [r7, #32]
 8004d48:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d50:	2100      	movs	r1, #0
 8004d52:	4b47      	ldr	r3, [pc, #284]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d54:	fb03 f201 	mul.w	r2, r3, r1
 8004d58:	2300      	movs	r3, #0
 8004d5a:	fb00 f303 	mul.w	r3, r0, r3
 8004d5e:	4413      	add	r3, r2
 8004d60:	4a43      	ldr	r2, [pc, #268]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d62:	fba0 1202 	umull	r1, r2, r0, r2
 8004d66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d68:	460a      	mov	r2, r1
 8004d6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004d6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d6e:	4413      	add	r3, r2
 8004d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d74:	2200      	movs	r2, #0
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	61fa      	str	r2, [r7, #28]
 8004d7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004d82:	f7fb ff89 	bl	8000c98 <__aeabi_uldivmod>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d8e:	e053      	b.n	8004e38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d90:	4b35      	ldr	r3, [pc, #212]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	099b      	lsrs	r3, r3, #6
 8004d96:	2200      	movs	r2, #0
 8004d98:	613b      	str	r3, [r7, #16]
 8004d9a:	617a      	str	r2, [r7, #20]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004da2:	f04f 0b00 	mov.w	fp, #0
 8004da6:	4652      	mov	r2, sl
 8004da8:	465b      	mov	r3, fp
 8004daa:	f04f 0000 	mov.w	r0, #0
 8004dae:	f04f 0100 	mov.w	r1, #0
 8004db2:	0159      	lsls	r1, r3, #5
 8004db4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004db8:	0150      	lsls	r0, r2, #5
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	ebb2 080a 	subs.w	r8, r2, sl
 8004dc2:	eb63 090b 	sbc.w	r9, r3, fp
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004dd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004dd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004dda:	ebb2 0408 	subs.w	r4, r2, r8
 8004dde:	eb63 0509 	sbc.w	r5, r3, r9
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	00eb      	lsls	r3, r5, #3
 8004dec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004df0:	00e2      	lsls	r2, r4, #3
 8004df2:	4614      	mov	r4, r2
 8004df4:	461d      	mov	r5, r3
 8004df6:	eb14 030a 	adds.w	r3, r4, sl
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	eb45 030b 	adc.w	r3, r5, fp
 8004e00:	607b      	str	r3, [r7, #4]
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e0e:	4629      	mov	r1, r5
 8004e10:	028b      	lsls	r3, r1, #10
 8004e12:	4621      	mov	r1, r4
 8004e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e18:	4621      	mov	r1, r4
 8004e1a:	028a      	lsls	r2, r1, #10
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e22:	2200      	movs	r2, #0
 8004e24:	60bb      	str	r3, [r7, #8]
 8004e26:	60fa      	str	r2, [r7, #12]
 8004e28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e2c:	f7fb ff34 	bl	8000c98 <__aeabi_uldivmod>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4613      	mov	r3, r2
 8004e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e38:	4b0b      	ldr	r3, [pc, #44]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	0c1b      	lsrs	r3, r3, #16
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	3301      	adds	r3, #1
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004e48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e52:	e002      	b.n	8004e5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e54:	4b05      	ldr	r3, [pc, #20]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x184>)
 8004e56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3740      	adds	r7, #64	@ 0x40
 8004e60:	46bd      	mov	sp, r7
 8004e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e66:	bf00      	nop
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	00f42400 	.word	0x00f42400
 8004e70:	017d7840 	.word	0x017d7840

08004e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e78:	4b03      	ldr	r3, [pc, #12]	@ (8004e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000004 	.word	0x20000004

08004e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e90:	f7ff fff0 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004e94:	4602      	mov	r2, r0
 8004e96:	4b05      	ldr	r3, [pc, #20]	@ (8004eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	0a9b      	lsrs	r3, r3, #10
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	4903      	ldr	r1, [pc, #12]	@ (8004eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ea2:	5ccb      	ldrb	r3, [r1, r3]
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	0800ee08 	.word	0x0800ee08

08004eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004eb8:	f7ff ffdc 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	4b05      	ldr	r3, [pc, #20]	@ (8004ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	0b5b      	lsrs	r3, r3, #13
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	4903      	ldr	r1, [pc, #12]	@ (8004ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eca:	5ccb      	ldrb	r3, [r1, r3]
 8004ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	0800ee08 	.word	0x0800ee08

08004edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e041      	b.n	8004f72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d106      	bne.n	8004f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7fc fc20 	bl	8001748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3304      	adds	r3, #4
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	f000 fa10 	bl	8005340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e041      	b.n	8005010 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d106      	bne.n	8004fa6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f839 	bl	8005018 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4610      	mov	r0, r2
 8004fba:	f000 f9c1 	bl	8005340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005046:	2302      	movs	r3, #2
 8005048:	e0ae      	b.n	80051a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b0c      	cmp	r3, #12
 8005056:	f200 809f 	bhi.w	8005198 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800505a:	a201      	add	r2, pc, #4	@ (adr r2, 8005060 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800505c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005060:	08005095 	.word	0x08005095
 8005064:	08005199 	.word	0x08005199
 8005068:	08005199 	.word	0x08005199
 800506c:	08005199 	.word	0x08005199
 8005070:	080050d5 	.word	0x080050d5
 8005074:	08005199 	.word	0x08005199
 8005078:	08005199 	.word	0x08005199
 800507c:	08005199 	.word	0x08005199
 8005080:	08005117 	.word	0x08005117
 8005084:	08005199 	.word	0x08005199
 8005088:	08005199 	.word	0x08005199
 800508c:	08005199 	.word	0x08005199
 8005090:	08005157 	.word	0x08005157
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	4618      	mov	r0, r3
 800509c:	f000 f9dc 	bl	8005458 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0208 	orr.w	r2, r2, #8
 80050ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699a      	ldr	r2, [r3, #24]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0204 	bic.w	r2, r2, #4
 80050be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6999      	ldr	r1, [r3, #24]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	691a      	ldr	r2, [r3, #16]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	619a      	str	r2, [r3, #24]
      break;
 80050d2:	e064      	b.n	800519e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fa22 	bl	8005524 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6999      	ldr	r1, [r3, #24]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	021a      	lsls	r2, r3, #8
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	619a      	str	r2, [r3, #24]
      break;
 8005114:	e043      	b.n	800519e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68b9      	ldr	r1, [r7, #8]
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fa6d 	bl	80055fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f042 0208 	orr.w	r2, r2, #8
 8005130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69da      	ldr	r2, [r3, #28]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0204 	bic.w	r2, r2, #4
 8005140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69d9      	ldr	r1, [r3, #28]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	61da      	str	r2, [r3, #28]
      break;
 8005154:	e023      	b.n	800519e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68b9      	ldr	r1, [r7, #8]
 800515c:	4618      	mov	r0, r3
 800515e:	f000 fab7 	bl	80056d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69da      	ldr	r2, [r3, #28]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69da      	ldr	r2, [r3, #28]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69d9      	ldr	r1, [r3, #28]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	021a      	lsls	r2, r3, #8
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	61da      	str	r2, [r3, #28]
      break;
 8005196:	e002      	b.n	800519e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	75fb      	strb	r3, [r7, #23]
      break;
 800519c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_TIM_ConfigClockSource+0x1c>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e0b4      	b.n	8005336 <HAL_TIM_ConfigClockSource+0x186>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80051ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005204:	d03e      	beq.n	8005284 <HAL_TIM_ConfigClockSource+0xd4>
 8005206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800520a:	f200 8087 	bhi.w	800531c <HAL_TIM_ConfigClockSource+0x16c>
 800520e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005212:	f000 8086 	beq.w	8005322 <HAL_TIM_ConfigClockSource+0x172>
 8005216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800521a:	d87f      	bhi.n	800531c <HAL_TIM_ConfigClockSource+0x16c>
 800521c:	2b70      	cmp	r3, #112	@ 0x70
 800521e:	d01a      	beq.n	8005256 <HAL_TIM_ConfigClockSource+0xa6>
 8005220:	2b70      	cmp	r3, #112	@ 0x70
 8005222:	d87b      	bhi.n	800531c <HAL_TIM_ConfigClockSource+0x16c>
 8005224:	2b60      	cmp	r3, #96	@ 0x60
 8005226:	d050      	beq.n	80052ca <HAL_TIM_ConfigClockSource+0x11a>
 8005228:	2b60      	cmp	r3, #96	@ 0x60
 800522a:	d877      	bhi.n	800531c <HAL_TIM_ConfigClockSource+0x16c>
 800522c:	2b50      	cmp	r3, #80	@ 0x50
 800522e:	d03c      	beq.n	80052aa <HAL_TIM_ConfigClockSource+0xfa>
 8005230:	2b50      	cmp	r3, #80	@ 0x50
 8005232:	d873      	bhi.n	800531c <HAL_TIM_ConfigClockSource+0x16c>
 8005234:	2b40      	cmp	r3, #64	@ 0x40
 8005236:	d058      	beq.n	80052ea <HAL_TIM_ConfigClockSource+0x13a>
 8005238:	2b40      	cmp	r3, #64	@ 0x40
 800523a:	d86f      	bhi.n	800531c <HAL_TIM_ConfigClockSource+0x16c>
 800523c:	2b30      	cmp	r3, #48	@ 0x30
 800523e:	d064      	beq.n	800530a <HAL_TIM_ConfigClockSource+0x15a>
 8005240:	2b30      	cmp	r3, #48	@ 0x30
 8005242:	d86b      	bhi.n	800531c <HAL_TIM_ConfigClockSource+0x16c>
 8005244:	2b20      	cmp	r3, #32
 8005246:	d060      	beq.n	800530a <HAL_TIM_ConfigClockSource+0x15a>
 8005248:	2b20      	cmp	r3, #32
 800524a:	d867      	bhi.n	800531c <HAL_TIM_ConfigClockSource+0x16c>
 800524c:	2b00      	cmp	r3, #0
 800524e:	d05c      	beq.n	800530a <HAL_TIM_ConfigClockSource+0x15a>
 8005250:	2b10      	cmp	r3, #16
 8005252:	d05a      	beq.n	800530a <HAL_TIM_ConfigClockSource+0x15a>
 8005254:	e062      	b.n	800531c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005266:	f000 fafd 	bl	8005864 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005278:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	609a      	str	r2, [r3, #8]
      break;
 8005282:	e04f      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005294:	f000 fae6 	bl	8005864 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689a      	ldr	r2, [r3, #8]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052a6:	609a      	str	r2, [r3, #8]
      break;
 80052a8:	e03c      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052b6:	461a      	mov	r2, r3
 80052b8:	f000 fa5a 	bl	8005770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2150      	movs	r1, #80	@ 0x50
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fab3 	bl	800582e <TIM_ITRx_SetConfig>
      break;
 80052c8:	e02c      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052d6:	461a      	mov	r2, r3
 80052d8:	f000 fa79 	bl	80057ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2160      	movs	r1, #96	@ 0x60
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 faa3 	bl	800582e <TIM_ITRx_SetConfig>
      break;
 80052e8:	e01c      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f6:	461a      	mov	r2, r3
 80052f8:	f000 fa3a 	bl	8005770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2140      	movs	r1, #64	@ 0x40
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fa93 	bl	800582e <TIM_ITRx_SetConfig>
      break;
 8005308:	e00c      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4619      	mov	r1, r3
 8005314:	4610      	mov	r0, r2
 8005316:	f000 fa8a 	bl	800582e <TIM_ITRx_SetConfig>
      break;
 800531a:	e003      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	73fb      	strb	r3, [r7, #15]
      break;
 8005320:	e000      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005334:	7bfb      	ldrb	r3, [r7, #15]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a3a      	ldr	r2, [pc, #232]	@ (800543c <TIM_Base_SetConfig+0xfc>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00f      	beq.n	8005378 <TIM_Base_SetConfig+0x38>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800535e:	d00b      	beq.n	8005378 <TIM_Base_SetConfig+0x38>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a37      	ldr	r2, [pc, #220]	@ (8005440 <TIM_Base_SetConfig+0x100>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d007      	beq.n	8005378 <TIM_Base_SetConfig+0x38>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a36      	ldr	r2, [pc, #216]	@ (8005444 <TIM_Base_SetConfig+0x104>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_Base_SetConfig+0x38>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a35      	ldr	r2, [pc, #212]	@ (8005448 <TIM_Base_SetConfig+0x108>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d108      	bne.n	800538a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800537e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a2b      	ldr	r2, [pc, #172]	@ (800543c <TIM_Base_SetConfig+0xfc>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d01b      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005398:	d017      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a28      	ldr	r2, [pc, #160]	@ (8005440 <TIM_Base_SetConfig+0x100>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d013      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a27      	ldr	r2, [pc, #156]	@ (8005444 <TIM_Base_SetConfig+0x104>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00f      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a26      	ldr	r2, [pc, #152]	@ (8005448 <TIM_Base_SetConfig+0x108>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00b      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a25      	ldr	r2, [pc, #148]	@ (800544c <TIM_Base_SetConfig+0x10c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d007      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a24      	ldr	r2, [pc, #144]	@ (8005450 <TIM_Base_SetConfig+0x110>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d003      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a23      	ldr	r2, [pc, #140]	@ (8005454 <TIM_Base_SetConfig+0x114>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d108      	bne.n	80053dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a0e      	ldr	r2, [pc, #56]	@ (800543c <TIM_Base_SetConfig+0xfc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d103      	bne.n	8005410 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	691a      	ldr	r2, [r3, #16]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b01      	cmp	r3, #1
 8005420:	d105      	bne.n	800542e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f023 0201 	bic.w	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	611a      	str	r2, [r3, #16]
  }
}
 800542e:	bf00      	nop
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40010000 	.word	0x40010000
 8005440:	40000400 	.word	0x40000400
 8005444:	40000800 	.word	0x40000800
 8005448:	40000c00 	.word	0x40000c00
 800544c:	40014000 	.word	0x40014000
 8005450:	40014400 	.word	0x40014400
 8005454:	40014800 	.word	0x40014800

08005458 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	f023 0201 	bic.w	r2, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0303 	bic.w	r3, r3, #3
 800548e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f023 0302 	bic.w	r3, r3, #2
 80054a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005520 <TIM_OC1_SetConfig+0xc8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d10c      	bne.n	80054ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f023 0308 	bic.w	r3, r3, #8
 80054ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f023 0304 	bic.w	r3, r3, #4
 80054cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a13      	ldr	r2, [pc, #76]	@ (8005520 <TIM_OC1_SetConfig+0xc8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d111      	bne.n	80054fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	621a      	str	r2, [r3, #32]
}
 8005514:	bf00      	nop
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	40010000 	.word	0x40010000

08005524 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f023 0210 	bic.w	r2, r3, #16
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800555a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	4313      	orrs	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f023 0320 	bic.w	r3, r3, #32
 800556e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a1e      	ldr	r2, [pc, #120]	@ (80055f8 <TIM_OC2_SetConfig+0xd4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d10d      	bne.n	80055a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800558a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800559e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a15      	ldr	r2, [pc, #84]	@ (80055f8 <TIM_OC2_SetConfig+0xd4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d113      	bne.n	80055d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	621a      	str	r2, [r3, #32]
}
 80055ea:	bf00      	nop
 80055ec:	371c      	adds	r7, #28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40010000 	.word	0x40010000

080055fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800562a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0303 	bic.w	r3, r3, #3
 8005632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	021b      	lsls	r3, r3, #8
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	4313      	orrs	r3, r2
 8005650:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a1d      	ldr	r2, [pc, #116]	@ (80056cc <TIM_OC3_SetConfig+0xd0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d10d      	bne.n	8005676 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005660:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	021b      	lsls	r3, r3, #8
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a14      	ldr	r2, [pc, #80]	@ (80056cc <TIM_OC3_SetConfig+0xd0>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d113      	bne.n	80056a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800568c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	621a      	str	r2, [r3, #32]
}
 80056c0:	bf00      	nop
 80056c2:	371c      	adds	r7, #28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	40010000 	.word	0x40010000

080056d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	021b      	lsls	r3, r3, #8
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	4313      	orrs	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800571a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	031b      	lsls	r3, r3, #12
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	4313      	orrs	r3, r2
 8005726:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a10      	ldr	r2, [pc, #64]	@ (800576c <TIM_OC4_SetConfig+0x9c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d109      	bne.n	8005744 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005736:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	019b      	lsls	r3, r3, #6
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	621a      	str	r2, [r3, #32]
}
 800575e:	bf00      	nop
 8005760:	371c      	adds	r7, #28
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	40010000 	.word	0x40010000

08005770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	f023 0201 	bic.w	r2, r3, #1
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800579a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f023 030a 	bic.w	r3, r3, #10
 80057ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	621a      	str	r2, [r3, #32]
}
 80057c2:	bf00      	nop
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b087      	sub	sp, #28
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	f023 0210 	bic.w	r2, r3, #16
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	031b      	lsls	r3, r3, #12
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800580a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	621a      	str	r2, [r3, #32]
}
 8005822:	bf00      	nop
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005844:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	f043 0307 	orr.w	r3, r3, #7
 8005850:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	609a      	str	r2, [r3, #8]
}
 8005858:	bf00      	nop
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800587e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	021a      	lsls	r2, r3, #8
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	431a      	orrs	r2, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4313      	orrs	r3, r2
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	609a      	str	r2, [r3, #8]
}
 8005898:	bf00      	nop
 800589a:	371c      	adds	r7, #28
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e050      	b.n	800595e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1c      	ldr	r2, [pc, #112]	@ (800596c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d018      	beq.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005908:	d013      	beq.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a18      	ldr	r2, [pc, #96]	@ (8005970 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00e      	beq.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a16      	ldr	r2, [pc, #88]	@ (8005974 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d009      	beq.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a15      	ldr	r2, [pc, #84]	@ (8005978 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d004      	beq.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a13      	ldr	r2, [pc, #76]	@ (800597c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d10c      	bne.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	4313      	orrs	r3, r2
 8005942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40010000 	.word	0x40010000
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40000c00 	.word	0x40000c00
 800597c:	40014000 	.word	0x40014000

08005980 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e042      	b.n	8005a18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fb ff2a 	bl	8001800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2224      	movs	r2, #36	@ 0x24
 80059b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f973 	bl	8005cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695a      	ldr	r2, [r3, #20]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08a      	sub	sp, #40	@ 0x28
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	603b      	str	r3, [r7, #0]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d175      	bne.n	8005b2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <HAL_UART_Transmit+0x2c>
 8005a46:	88fb      	ldrh	r3, [r7, #6]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e06e      	b.n	8005b2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2221      	movs	r2, #33	@ 0x21
 8005a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a5e:	f7fc f8b9 	bl	8001bd4 <HAL_GetTick>
 8005a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	88fa      	ldrh	r2, [r7, #6]
 8005a68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	88fa      	ldrh	r2, [r7, #6]
 8005a6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a78:	d108      	bne.n	8005a8c <HAL_UART_Transmit+0x6c>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d104      	bne.n	8005a8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	61bb      	str	r3, [r7, #24]
 8005a8a:	e003      	b.n	8005a94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a90:	2300      	movs	r3, #0
 8005a92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a94:	e02e      	b.n	8005af4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2180      	movs	r1, #128	@ 0x80
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f848 	bl	8005b36 <UART_WaitOnFlagUntilTimeout>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d005      	beq.n	8005ab8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e03a      	b.n	8005b2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10b      	bne.n	8005ad6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005acc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	3302      	adds	r3, #2
 8005ad2:	61bb      	str	r3, [r7, #24]
 8005ad4:	e007      	b.n	8005ae6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	781a      	ldrb	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	3b01      	subs	r3, #1
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1cb      	bne.n	8005a96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2200      	movs	r2, #0
 8005b06:	2140      	movs	r1, #64	@ 0x40
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 f814 	bl	8005b36 <UART_WaitOnFlagUntilTimeout>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d005      	beq.n	8005b20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e006      	b.n	8005b2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	e000      	b.n	8005b2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005b2c:	2302      	movs	r3, #2
  }
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3720      	adds	r7, #32
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b086      	sub	sp, #24
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	603b      	str	r3, [r7, #0]
 8005b42:	4613      	mov	r3, r2
 8005b44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b46:	e03b      	b.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4e:	d037      	beq.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b50:	f7fc f840 	bl	8001bd4 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	6a3a      	ldr	r2, [r7, #32]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d302      	bcc.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e03a      	b.n	8005be0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d023      	beq.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b80      	cmp	r3, #128	@ 0x80
 8005b7c:	d020      	beq.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b40      	cmp	r3, #64	@ 0x40
 8005b82:	d01d      	beq.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	2b08      	cmp	r3, #8
 8005b90:	d116      	bne.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005b92:	2300      	movs	r3, #0
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	617b      	str	r3, [r7, #20]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 f81d 	bl	8005be8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2208      	movs	r2, #8
 8005bb2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e00f      	b.n	8005be0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	bf0c      	ite	eq
 8005bd0:	2301      	moveq	r3, #1
 8005bd2:	2300      	movne	r3, #0
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	79fb      	ldrb	r3, [r7, #7]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d0b4      	beq.n	8005b48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b095      	sub	sp, #84	@ 0x54
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	330c      	adds	r3, #12
 8005c0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c10:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c18:	e841 2300 	strex	r3, r2, [r1]
 8005c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1e5      	bne.n	8005bf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3314      	adds	r3, #20
 8005c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	f023 0301 	bic.w	r3, r3, #1
 8005c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3314      	adds	r3, #20
 8005c42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e5      	bne.n	8005c24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d119      	bne.n	8005c94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	330c      	adds	r3, #12
 8005c66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	e853 3f00 	ldrex	r3, [r3]
 8005c6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f023 0310 	bic.w	r3, r3, #16
 8005c76:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	330c      	adds	r3, #12
 8005c7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c80:	61ba      	str	r2, [r7, #24]
 8005c82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c84:	6979      	ldr	r1, [r7, #20]
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	e841 2300 	strex	r3, r2, [r1]
 8005c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e5      	bne.n	8005c60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ca2:	bf00      	nop
 8005ca4:	3754      	adds	r7, #84	@ 0x54
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
	...

08005cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cb4:	b0c0      	sub	sp, #256	@ 0x100
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ccc:	68d9      	ldr	r1, [r3, #12]
 8005cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	ea40 0301 	orr.w	r3, r0, r1
 8005cd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d08:	f021 010c 	bic.w	r1, r1, #12
 8005d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d16:	430b      	orrs	r3, r1
 8005d18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d2a:	6999      	ldr	r1, [r3, #24]
 8005d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	ea40 0301 	orr.w	r3, r0, r1
 8005d36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	4b8f      	ldr	r3, [pc, #572]	@ (8005f7c <UART_SetConfig+0x2cc>)
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d005      	beq.n	8005d50 <UART_SetConfig+0xa0>
 8005d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	4b8d      	ldr	r3, [pc, #564]	@ (8005f80 <UART_SetConfig+0x2d0>)
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d104      	bne.n	8005d5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d50:	f7ff f8b0 	bl	8004eb4 <HAL_RCC_GetPCLK2Freq>
 8005d54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005d58:	e003      	b.n	8005d62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d5a:	f7ff f897 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 8005d5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d6c:	f040 810c 	bne.w	8005f88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005d7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005d82:	4622      	mov	r2, r4
 8005d84:	462b      	mov	r3, r5
 8005d86:	1891      	adds	r1, r2, r2
 8005d88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005d8a:	415b      	adcs	r3, r3
 8005d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d92:	4621      	mov	r1, r4
 8005d94:	eb12 0801 	adds.w	r8, r2, r1
 8005d98:	4629      	mov	r1, r5
 8005d9a:	eb43 0901 	adc.w	r9, r3, r1
 8005d9e:	f04f 0200 	mov.w	r2, #0
 8005da2:	f04f 0300 	mov.w	r3, #0
 8005da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005db2:	4690      	mov	r8, r2
 8005db4:	4699      	mov	r9, r3
 8005db6:	4623      	mov	r3, r4
 8005db8:	eb18 0303 	adds.w	r3, r8, r3
 8005dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005dc0:	462b      	mov	r3, r5
 8005dc2:	eb49 0303 	adc.w	r3, r9, r3
 8005dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005dd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005dda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005dde:	460b      	mov	r3, r1
 8005de0:	18db      	adds	r3, r3, r3
 8005de2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005de4:	4613      	mov	r3, r2
 8005de6:	eb42 0303 	adc.w	r3, r2, r3
 8005dea:	657b      	str	r3, [r7, #84]	@ 0x54
 8005dec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005df0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005df4:	f7fa ff50 	bl	8000c98 <__aeabi_uldivmod>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4b61      	ldr	r3, [pc, #388]	@ (8005f84 <UART_SetConfig+0x2d4>)
 8005dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	011c      	lsls	r4, r3, #4
 8005e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005e14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005e18:	4642      	mov	r2, r8
 8005e1a:	464b      	mov	r3, r9
 8005e1c:	1891      	adds	r1, r2, r2
 8005e1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005e20:	415b      	adcs	r3, r3
 8005e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005e28:	4641      	mov	r1, r8
 8005e2a:	eb12 0a01 	adds.w	sl, r2, r1
 8005e2e:	4649      	mov	r1, r9
 8005e30:	eb43 0b01 	adc.w	fp, r3, r1
 8005e34:	f04f 0200 	mov.w	r2, #0
 8005e38:	f04f 0300 	mov.w	r3, #0
 8005e3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e48:	4692      	mov	sl, r2
 8005e4a:	469b      	mov	fp, r3
 8005e4c:	4643      	mov	r3, r8
 8005e4e:	eb1a 0303 	adds.w	r3, sl, r3
 8005e52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e56:	464b      	mov	r3, r9
 8005e58:	eb4b 0303 	adc.w	r3, fp, r3
 8005e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005e70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e74:	460b      	mov	r3, r1
 8005e76:	18db      	adds	r3, r3, r3
 8005e78:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	eb42 0303 	adc.w	r3, r2, r3
 8005e80:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005e8a:	f7fa ff05 	bl	8000c98 <__aeabi_uldivmod>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4611      	mov	r1, r2
 8005e94:	4b3b      	ldr	r3, [pc, #236]	@ (8005f84 <UART_SetConfig+0x2d4>)
 8005e96:	fba3 2301 	umull	r2, r3, r3, r1
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	2264      	movs	r2, #100	@ 0x64
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ea2:	1acb      	subs	r3, r1, r3
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005eaa:	4b36      	ldr	r3, [pc, #216]	@ (8005f84 <UART_SetConfig+0x2d4>)
 8005eac:	fba3 2302 	umull	r2, r3, r3, r2
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005eb8:	441c      	add	r4, r3
 8005eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ec4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ec8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ecc:	4642      	mov	r2, r8
 8005ece:	464b      	mov	r3, r9
 8005ed0:	1891      	adds	r1, r2, r2
 8005ed2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ed4:	415b      	adcs	r3, r3
 8005ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ed8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005edc:	4641      	mov	r1, r8
 8005ede:	1851      	adds	r1, r2, r1
 8005ee0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	414b      	adcs	r3, r1
 8005ee6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	f04f 0300 	mov.w	r3, #0
 8005ef0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ef4:	4659      	mov	r1, fp
 8005ef6:	00cb      	lsls	r3, r1, #3
 8005ef8:	4651      	mov	r1, sl
 8005efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005efe:	4651      	mov	r1, sl
 8005f00:	00ca      	lsls	r2, r1, #3
 8005f02:	4610      	mov	r0, r2
 8005f04:	4619      	mov	r1, r3
 8005f06:	4603      	mov	r3, r0
 8005f08:	4642      	mov	r2, r8
 8005f0a:	189b      	adds	r3, r3, r2
 8005f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f10:	464b      	mov	r3, r9
 8005f12:	460a      	mov	r2, r1
 8005f14:	eb42 0303 	adc.w	r3, r2, r3
 8005f18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005f2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005f30:	460b      	mov	r3, r1
 8005f32:	18db      	adds	r3, r3, r3
 8005f34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f36:	4613      	mov	r3, r2
 8005f38:	eb42 0303 	adc.w	r3, r2, r3
 8005f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005f46:	f7fa fea7 	bl	8000c98 <__aeabi_uldivmod>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f84 <UART_SetConfig+0x2d4>)
 8005f50:	fba3 1302 	umull	r1, r3, r3, r2
 8005f54:	095b      	lsrs	r3, r3, #5
 8005f56:	2164      	movs	r1, #100	@ 0x64
 8005f58:	fb01 f303 	mul.w	r3, r1, r3
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	3332      	adds	r3, #50	@ 0x32
 8005f62:	4a08      	ldr	r2, [pc, #32]	@ (8005f84 <UART_SetConfig+0x2d4>)
 8005f64:	fba2 2303 	umull	r2, r3, r2, r3
 8005f68:	095b      	lsrs	r3, r3, #5
 8005f6a:	f003 0207 	and.w	r2, r3, #7
 8005f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4422      	add	r2, r4
 8005f76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f78:	e106      	b.n	8006188 <UART_SetConfig+0x4d8>
 8005f7a:	bf00      	nop
 8005f7c:	40011000 	.word	0x40011000
 8005f80:	40011400 	.word	0x40011400
 8005f84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005f96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005f9a:	4642      	mov	r2, r8
 8005f9c:	464b      	mov	r3, r9
 8005f9e:	1891      	adds	r1, r2, r2
 8005fa0:	6239      	str	r1, [r7, #32]
 8005fa2:	415b      	adcs	r3, r3
 8005fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005faa:	4641      	mov	r1, r8
 8005fac:	1854      	adds	r4, r2, r1
 8005fae:	4649      	mov	r1, r9
 8005fb0:	eb43 0501 	adc.w	r5, r3, r1
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	00eb      	lsls	r3, r5, #3
 8005fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fc2:	00e2      	lsls	r2, r4, #3
 8005fc4:	4614      	mov	r4, r2
 8005fc6:	461d      	mov	r5, r3
 8005fc8:	4643      	mov	r3, r8
 8005fca:	18e3      	adds	r3, r4, r3
 8005fcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005fd0:	464b      	mov	r3, r9
 8005fd2:	eb45 0303 	adc.w	r3, r5, r3
 8005fd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005fe6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	f04f 0300 	mov.w	r3, #0
 8005ff2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	008b      	lsls	r3, r1, #2
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006000:	4621      	mov	r1, r4
 8006002:	008a      	lsls	r2, r1, #2
 8006004:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006008:	f7fa fe46 	bl	8000c98 <__aeabi_uldivmod>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4b60      	ldr	r3, [pc, #384]	@ (8006194 <UART_SetConfig+0x4e4>)
 8006012:	fba3 2302 	umull	r2, r3, r3, r2
 8006016:	095b      	lsrs	r3, r3, #5
 8006018:	011c      	lsls	r4, r3, #4
 800601a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800601e:	2200      	movs	r2, #0
 8006020:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006024:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006028:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800602c:	4642      	mov	r2, r8
 800602e:	464b      	mov	r3, r9
 8006030:	1891      	adds	r1, r2, r2
 8006032:	61b9      	str	r1, [r7, #24]
 8006034:	415b      	adcs	r3, r3
 8006036:	61fb      	str	r3, [r7, #28]
 8006038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800603c:	4641      	mov	r1, r8
 800603e:	1851      	adds	r1, r2, r1
 8006040:	6139      	str	r1, [r7, #16]
 8006042:	4649      	mov	r1, r9
 8006044:	414b      	adcs	r3, r1
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	f04f 0200 	mov.w	r2, #0
 800604c:	f04f 0300 	mov.w	r3, #0
 8006050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006054:	4659      	mov	r1, fp
 8006056:	00cb      	lsls	r3, r1, #3
 8006058:	4651      	mov	r1, sl
 800605a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800605e:	4651      	mov	r1, sl
 8006060:	00ca      	lsls	r2, r1, #3
 8006062:	4610      	mov	r0, r2
 8006064:	4619      	mov	r1, r3
 8006066:	4603      	mov	r3, r0
 8006068:	4642      	mov	r2, r8
 800606a:	189b      	adds	r3, r3, r2
 800606c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006070:	464b      	mov	r3, r9
 8006072:	460a      	mov	r2, r1
 8006074:	eb42 0303 	adc.w	r3, r2, r3
 8006078:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800607c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006086:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006088:	f04f 0200 	mov.w	r2, #0
 800608c:	f04f 0300 	mov.w	r3, #0
 8006090:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006094:	4649      	mov	r1, r9
 8006096:	008b      	lsls	r3, r1, #2
 8006098:	4641      	mov	r1, r8
 800609a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800609e:	4641      	mov	r1, r8
 80060a0:	008a      	lsls	r2, r1, #2
 80060a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80060a6:	f7fa fdf7 	bl	8000c98 <__aeabi_uldivmod>
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4611      	mov	r1, r2
 80060b0:	4b38      	ldr	r3, [pc, #224]	@ (8006194 <UART_SetConfig+0x4e4>)
 80060b2:	fba3 2301 	umull	r2, r3, r3, r1
 80060b6:	095b      	lsrs	r3, r3, #5
 80060b8:	2264      	movs	r2, #100	@ 0x64
 80060ba:	fb02 f303 	mul.w	r3, r2, r3
 80060be:	1acb      	subs	r3, r1, r3
 80060c0:	011b      	lsls	r3, r3, #4
 80060c2:	3332      	adds	r3, #50	@ 0x32
 80060c4:	4a33      	ldr	r2, [pc, #204]	@ (8006194 <UART_SetConfig+0x4e4>)
 80060c6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ca:	095b      	lsrs	r3, r3, #5
 80060cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060d0:	441c      	add	r4, r3
 80060d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060d6:	2200      	movs	r2, #0
 80060d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80060da:	677a      	str	r2, [r7, #116]	@ 0x74
 80060dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80060e0:	4642      	mov	r2, r8
 80060e2:	464b      	mov	r3, r9
 80060e4:	1891      	adds	r1, r2, r2
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	415b      	adcs	r3, r3
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060f0:	4641      	mov	r1, r8
 80060f2:	1851      	adds	r1, r2, r1
 80060f4:	6039      	str	r1, [r7, #0]
 80060f6:	4649      	mov	r1, r9
 80060f8:	414b      	adcs	r3, r1
 80060fa:	607b      	str	r3, [r7, #4]
 80060fc:	f04f 0200 	mov.w	r2, #0
 8006100:	f04f 0300 	mov.w	r3, #0
 8006104:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006108:	4659      	mov	r1, fp
 800610a:	00cb      	lsls	r3, r1, #3
 800610c:	4651      	mov	r1, sl
 800610e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006112:	4651      	mov	r1, sl
 8006114:	00ca      	lsls	r2, r1, #3
 8006116:	4610      	mov	r0, r2
 8006118:	4619      	mov	r1, r3
 800611a:	4603      	mov	r3, r0
 800611c:	4642      	mov	r2, r8
 800611e:	189b      	adds	r3, r3, r2
 8006120:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006122:	464b      	mov	r3, r9
 8006124:	460a      	mov	r2, r1
 8006126:	eb42 0303 	adc.w	r3, r2, r3
 800612a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800612c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	663b      	str	r3, [r7, #96]	@ 0x60
 8006136:	667a      	str	r2, [r7, #100]	@ 0x64
 8006138:	f04f 0200 	mov.w	r2, #0
 800613c:	f04f 0300 	mov.w	r3, #0
 8006140:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006144:	4649      	mov	r1, r9
 8006146:	008b      	lsls	r3, r1, #2
 8006148:	4641      	mov	r1, r8
 800614a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800614e:	4641      	mov	r1, r8
 8006150:	008a      	lsls	r2, r1, #2
 8006152:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006156:	f7fa fd9f 	bl	8000c98 <__aeabi_uldivmod>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	4b0d      	ldr	r3, [pc, #52]	@ (8006194 <UART_SetConfig+0x4e4>)
 8006160:	fba3 1302 	umull	r1, r3, r3, r2
 8006164:	095b      	lsrs	r3, r3, #5
 8006166:	2164      	movs	r1, #100	@ 0x64
 8006168:	fb01 f303 	mul.w	r3, r1, r3
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	3332      	adds	r3, #50	@ 0x32
 8006172:	4a08      	ldr	r2, [pc, #32]	@ (8006194 <UART_SetConfig+0x4e4>)
 8006174:	fba2 2303 	umull	r2, r3, r2, r3
 8006178:	095b      	lsrs	r3, r3, #5
 800617a:	f003 020f 	and.w	r2, r3, #15
 800617e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4422      	add	r2, r4
 8006186:	609a      	str	r2, [r3, #8]
}
 8006188:	bf00      	nop
 800618a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800618e:	46bd      	mov	sp, r7
 8006190:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006194:	51eb851f 	.word	0x51eb851f

08006198 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006198:	b084      	sub	sp, #16
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	f107 001c 	add.w	r0, r7, #28
 80061a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d123      	bne.n	80061fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80061c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d105      	bne.n	80061ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f001 fae8 	bl	80077c4 <USB_CoreReset>
 80061f4:	4603      	mov	r3, r0
 80061f6:	73fb      	strb	r3, [r7, #15]
 80061f8:	e01b      	b.n	8006232 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f001 fadc 	bl	80077c4 <USB_CoreReset>
 800620c:	4603      	mov	r3, r0
 800620e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006210:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006214:	2b00      	cmp	r3, #0
 8006216:	d106      	bne.n	8006226 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	639a      	str	r2, [r3, #56]	@ 0x38
 8006224:	e005      	b.n	8006232 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006232:	7fbb      	ldrb	r3, [r7, #30]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d10b      	bne.n	8006250 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f043 0206 	orr.w	r2, r3, #6
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f043 0220 	orr.w	r2, r3, #32
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006250:	7bfb      	ldrb	r3, [r7, #15]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800625c:	b004      	add	sp, #16
 800625e:	4770      	bx	lr

08006260 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	4613      	mov	r3, r2
 800626c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	2b02      	cmp	r3, #2
 8006272:	d165      	bne.n	8006340 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	4a41      	ldr	r2, [pc, #260]	@ (800637c <USB_SetTurnaroundTime+0x11c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d906      	bls.n	800628a <USB_SetTurnaroundTime+0x2a>
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4a40      	ldr	r2, [pc, #256]	@ (8006380 <USB_SetTurnaroundTime+0x120>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d202      	bcs.n	800628a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006284:	230f      	movs	r3, #15
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	e062      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	4a3c      	ldr	r2, [pc, #240]	@ (8006380 <USB_SetTurnaroundTime+0x120>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d306      	bcc.n	80062a0 <USB_SetTurnaroundTime+0x40>
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	4a3b      	ldr	r2, [pc, #236]	@ (8006384 <USB_SetTurnaroundTime+0x124>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d202      	bcs.n	80062a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800629a:	230e      	movs	r3, #14
 800629c:	617b      	str	r3, [r7, #20]
 800629e:	e057      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4a38      	ldr	r2, [pc, #224]	@ (8006384 <USB_SetTurnaroundTime+0x124>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d306      	bcc.n	80062b6 <USB_SetTurnaroundTime+0x56>
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4a37      	ldr	r2, [pc, #220]	@ (8006388 <USB_SetTurnaroundTime+0x128>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d202      	bcs.n	80062b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80062b0:	230d      	movs	r3, #13
 80062b2:	617b      	str	r3, [r7, #20]
 80062b4:	e04c      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	4a33      	ldr	r2, [pc, #204]	@ (8006388 <USB_SetTurnaroundTime+0x128>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d306      	bcc.n	80062cc <USB_SetTurnaroundTime+0x6c>
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	4a32      	ldr	r2, [pc, #200]	@ (800638c <USB_SetTurnaroundTime+0x12c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d802      	bhi.n	80062cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80062c6:	230c      	movs	r3, #12
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	e041      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	4a2f      	ldr	r2, [pc, #188]	@ (800638c <USB_SetTurnaroundTime+0x12c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d906      	bls.n	80062e2 <USB_SetTurnaroundTime+0x82>
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4a2e      	ldr	r2, [pc, #184]	@ (8006390 <USB_SetTurnaroundTime+0x130>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d802      	bhi.n	80062e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80062dc:	230b      	movs	r3, #11
 80062de:	617b      	str	r3, [r7, #20]
 80062e0:	e036      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4a2a      	ldr	r2, [pc, #168]	@ (8006390 <USB_SetTurnaroundTime+0x130>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d906      	bls.n	80062f8 <USB_SetTurnaroundTime+0x98>
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4a29      	ldr	r2, [pc, #164]	@ (8006394 <USB_SetTurnaroundTime+0x134>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d802      	bhi.n	80062f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80062f2:	230a      	movs	r3, #10
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	e02b      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4a26      	ldr	r2, [pc, #152]	@ (8006394 <USB_SetTurnaroundTime+0x134>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d906      	bls.n	800630e <USB_SetTurnaroundTime+0xae>
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4a25      	ldr	r2, [pc, #148]	@ (8006398 <USB_SetTurnaroundTime+0x138>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d202      	bcs.n	800630e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006308:	2309      	movs	r3, #9
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	e020      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4a21      	ldr	r2, [pc, #132]	@ (8006398 <USB_SetTurnaroundTime+0x138>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d306      	bcc.n	8006324 <USB_SetTurnaroundTime+0xc4>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	4a20      	ldr	r2, [pc, #128]	@ (800639c <USB_SetTurnaroundTime+0x13c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d802      	bhi.n	8006324 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800631e:	2308      	movs	r3, #8
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	e015      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4a1d      	ldr	r2, [pc, #116]	@ (800639c <USB_SetTurnaroundTime+0x13c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d906      	bls.n	800633a <USB_SetTurnaroundTime+0xda>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	4a1c      	ldr	r2, [pc, #112]	@ (80063a0 <USB_SetTurnaroundTime+0x140>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d202      	bcs.n	800633a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006334:	2307      	movs	r3, #7
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	e00a      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800633a:	2306      	movs	r3, #6
 800633c:	617b      	str	r3, [r7, #20]
 800633e:	e007      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d102      	bne.n	800634c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006346:	2309      	movs	r3, #9
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	e001      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800634c:	2309      	movs	r3, #9
 800634e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	68da      	ldr	r2, [r3, #12]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	029b      	lsls	r3, r3, #10
 8006364:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006368:	431a      	orrs	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	371c      	adds	r7, #28
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	00d8acbf 	.word	0x00d8acbf
 8006380:	00e4e1c0 	.word	0x00e4e1c0
 8006384:	00f42400 	.word	0x00f42400
 8006388:	01067380 	.word	0x01067380
 800638c:	011a499f 	.word	0x011a499f
 8006390:	01312cff 	.word	0x01312cff
 8006394:	014ca43f 	.word	0x014ca43f
 8006398:	016e3600 	.word	0x016e3600
 800639c:	01a6ab1f 	.word	0x01a6ab1f
 80063a0:	01e84800 	.word	0x01e84800

080063a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f043 0201 	orr.w	r2, r3, #1
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f023 0201 	bic.w	r2, r3, #1
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d115      	bne.n	8006436 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006416:	200a      	movs	r0, #10
 8006418:	f7fb fbe8 	bl	8001bec <HAL_Delay>
      ms += 10U;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	330a      	adds	r3, #10
 8006420:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f001 f93f 	bl	80076a6 <USB_GetMode>
 8006428:	4603      	mov	r3, r0
 800642a:	2b01      	cmp	r3, #1
 800642c:	d01e      	beq.n	800646c <USB_SetCurrentMode+0x84>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2bc7      	cmp	r3, #199	@ 0xc7
 8006432:	d9f0      	bls.n	8006416 <USB_SetCurrentMode+0x2e>
 8006434:	e01a      	b.n	800646c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006436:	78fb      	ldrb	r3, [r7, #3]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d115      	bne.n	8006468 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006448:	200a      	movs	r0, #10
 800644a:	f7fb fbcf 	bl	8001bec <HAL_Delay>
      ms += 10U;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	330a      	adds	r3, #10
 8006452:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f001 f926 	bl	80076a6 <USB_GetMode>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d005      	beq.n	800646c <USB_SetCurrentMode+0x84>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2bc7      	cmp	r3, #199	@ 0xc7
 8006464:	d9f0      	bls.n	8006448 <USB_SetCurrentMode+0x60>
 8006466:	e001      	b.n	800646c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e005      	b.n	8006478 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006470:	d101      	bne.n	8006476 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e000      	b.n	8006478 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006480:	b084      	sub	sp, #16
 8006482:	b580      	push	{r7, lr}
 8006484:	b086      	sub	sp, #24
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800648e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800649a:	2300      	movs	r3, #0
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	e009      	b.n	80064b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	3340      	adds	r3, #64	@ 0x40
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	2200      	movs	r2, #0
 80064ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	3301      	adds	r3, #1
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	2b0e      	cmp	r3, #14
 80064b8:	d9f2      	bls.n	80064a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80064ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d11c      	bne.n	80064fc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064d0:	f043 0302 	orr.w	r3, r3, #2
 80064d4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064da:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80064fa:	e00b      	b.n	8006514 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006500:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800651a:	461a      	mov	r2, r3
 800651c:	2300      	movs	r3, #0
 800651e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006520:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006524:	2b01      	cmp	r3, #1
 8006526:	d10d      	bne.n	8006544 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006528:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800652c:	2b00      	cmp	r3, #0
 800652e:	d104      	bne.n	800653a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006530:	2100      	movs	r1, #0
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f968 	bl	8006808 <USB_SetDevSpeed>
 8006538:	e008      	b.n	800654c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800653a:	2101      	movs	r1, #1
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f963 	bl	8006808 <USB_SetDevSpeed>
 8006542:	e003      	b.n	800654c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006544:	2103      	movs	r1, #3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f95e 	bl	8006808 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800654c:	2110      	movs	r1, #16
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f8fa 	bl	8006748 <USB_FlushTxFifo>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f924 	bl	80067ac <USB_FlushRxFifo>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006574:	461a      	mov	r2, r3
 8006576:	2300      	movs	r3, #0
 8006578:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006580:	461a      	mov	r2, r3
 8006582:	2300      	movs	r3, #0
 8006584:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800658c:	461a      	mov	r2, r3
 800658e:	2300      	movs	r3, #0
 8006590:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006592:	2300      	movs	r3, #0
 8006594:	613b      	str	r3, [r7, #16]
 8006596:	e043      	b.n	8006620 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065ae:	d118      	bne.n	80065e2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10a      	bne.n	80065cc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065c2:	461a      	mov	r2, r3
 80065c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	e013      	b.n	80065f4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d8:	461a      	mov	r2, r3
 80065da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	e008      	b.n	80065f4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ee:	461a      	mov	r2, r3
 80065f0:	2300      	movs	r3, #0
 80065f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006600:	461a      	mov	r2, r3
 8006602:	2300      	movs	r3, #0
 8006604:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006612:	461a      	mov	r2, r3
 8006614:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006618:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	3301      	adds	r3, #1
 800661e:	613b      	str	r3, [r7, #16]
 8006620:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006624:	461a      	mov	r2, r3
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	4293      	cmp	r3, r2
 800662a:	d3b5      	bcc.n	8006598 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800662c:	2300      	movs	r3, #0
 800662e:	613b      	str	r3, [r7, #16]
 8006630:	e043      	b.n	80066ba <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4413      	add	r3, r2
 800663a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006644:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006648:	d118      	bne.n	800667c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10a      	bne.n	8006666 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800665c:	461a      	mov	r2, r3
 800665e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	e013      	b.n	800668e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006672:	461a      	mov	r2, r3
 8006674:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	e008      	b.n	800668e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006688:	461a      	mov	r2, r3
 800668a:	2300      	movs	r3, #0
 800668c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4413      	add	r3, r2
 8006696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800669a:	461a      	mov	r2, r3
 800669c:	2300      	movs	r3, #0
 800669e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ac:	461a      	mov	r2, r3
 80066ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80066b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	3301      	adds	r3, #1
 80066b8:	613b      	str	r3, [r7, #16]
 80066ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80066be:	461a      	mov	r2, r3
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d3b5      	bcc.n	8006632 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066d8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80066e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d105      	bne.n	80066fc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	f043 0210 	orr.w	r2, r3, #16
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	699a      	ldr	r2, [r3, #24]
 8006700:	4b10      	ldr	r3, [pc, #64]	@ (8006744 <USB_DevInit+0x2c4>)
 8006702:	4313      	orrs	r3, r2
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006708:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800670c:	2b00      	cmp	r3, #0
 800670e:	d005      	beq.n	800671c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	f043 0208 	orr.w	r2, r3, #8
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800671c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006720:	2b01      	cmp	r3, #1
 8006722:	d107      	bne.n	8006734 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800672c:	f043 0304 	orr.w	r3, r3, #4
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006734:	7dfb      	ldrb	r3, [r7, #23]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006740:	b004      	add	sp, #16
 8006742:	4770      	bx	lr
 8006744:	803c3800 	.word	0x803c3800

08006748 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3301      	adds	r3, #1
 800675a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006762:	d901      	bls.n	8006768 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e01b      	b.n	80067a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	daf2      	bge.n	8006756 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	019b      	lsls	r3, r3, #6
 8006778:	f043 0220 	orr.w	r2, r3, #32
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3301      	adds	r3, #1
 8006784:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800678c:	d901      	bls.n	8006792 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e006      	b.n	80067a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 0320 	and.w	r3, r3, #32
 800679a:	2b20      	cmp	r3, #32
 800679c:	d0f0      	beq.n	8006780 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	3301      	adds	r3, #1
 80067bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067c4:	d901      	bls.n	80067ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e018      	b.n	80067fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	daf2      	bge.n	80067b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2210      	movs	r2, #16
 80067da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	3301      	adds	r3, #1
 80067e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067e8:	d901      	bls.n	80067ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e006      	b.n	80067fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0310 	and.w	r3, r3, #16
 80067f6:	2b10      	cmp	r3, #16
 80067f8:	d0f0      	beq.n	80067dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	68f9      	ldr	r1, [r7, #12]
 8006824:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006828:	4313      	orrs	r3, r2
 800682a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800683a:	b480      	push	{r7}
 800683c:	b087      	sub	sp, #28
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 0306 	and.w	r3, r3, #6
 8006852:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d102      	bne.n	8006860 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800685a:	2300      	movs	r3, #0
 800685c:	75fb      	strb	r3, [r7, #23]
 800685e:	e00a      	b.n	8006876 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b02      	cmp	r3, #2
 8006864:	d002      	beq.n	800686c <USB_GetDevSpeed+0x32>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2b06      	cmp	r3, #6
 800686a:	d102      	bne.n	8006872 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800686c:	2302      	movs	r3, #2
 800686e:	75fb      	strb	r3, [r7, #23]
 8006870:	e001      	b.n	8006876 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006872:	230f      	movs	r3, #15
 8006874:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006876:	7dfb      	ldrb	r3, [r7, #23]
}
 8006878:	4618      	mov	r0, r3
 800687a:	371c      	adds	r7, #28
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	785b      	ldrb	r3, [r3, #1]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d13a      	bne.n	8006916 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068a6:	69da      	ldr	r2, [r3, #28]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	f003 030f 	and.w	r3, r3, #15
 80068b0:	2101      	movs	r1, #1
 80068b2:	fa01 f303 	lsl.w	r3, r1, r3
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	68f9      	ldr	r1, [r7, #12]
 80068ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068be:	4313      	orrs	r3, r2
 80068c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d155      	bne.n	8006984 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	791b      	ldrb	r3, [r3, #4]
 80068f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	059b      	lsls	r3, r3, #22
 80068fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068fc:	4313      	orrs	r3, r2
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	0151      	lsls	r1, r2, #5
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	440a      	add	r2, r1
 8006906:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800690a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800690e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006912:	6013      	str	r3, [r2, #0]
 8006914:	e036      	b.n	8006984 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800691c:	69da      	ldr	r2, [r3, #28]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	f003 030f 	and.w	r3, r3, #15
 8006926:	2101      	movs	r1, #1
 8006928:	fa01 f303 	lsl.w	r3, r1, r3
 800692c:	041b      	lsls	r3, r3, #16
 800692e:	68f9      	ldr	r1, [r7, #12]
 8006930:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006934:	4313      	orrs	r3, r2
 8006936:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d11a      	bne.n	8006984 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4413      	add	r3, r2
 8006956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	791b      	ldrb	r3, [r3, #4]
 8006968:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800696a:	430b      	orrs	r3, r1
 800696c:	4313      	orrs	r3, r2
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	0151      	lsls	r1, r2, #5
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	440a      	add	r2, r1
 8006976:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800697a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800697e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006982:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
	...

08006994 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	785b      	ldrb	r3, [r3, #1]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d161      	bne.n	8006a74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069c6:	d11f      	bne.n	8006a08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	0151      	lsls	r1, r2, #5
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	440a      	add	r2, r1
 80069de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80069e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	0151      	lsls	r1, r2, #5
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	440a      	add	r2, r1
 80069fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	f003 030f 	and.w	r3, r3, #15
 8006a18:	2101      	movs	r1, #1
 8006a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	43db      	mvns	r3, r3
 8006a22:	68f9      	ldr	r1, [r7, #12]
 8006a24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a28:	4013      	ands	r3, r2
 8006a2a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a32:	69da      	ldr	r2, [r3, #28]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	f003 030f 	and.w	r3, r3, #15
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	43db      	mvns	r3, r3
 8006a46:	68f9      	ldr	r1, [r7, #12]
 8006a48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	0159      	lsls	r1, r3, #5
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	440b      	add	r3, r1
 8006a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	4b35      	ldr	r3, [pc, #212]	@ (8006b44 <USB_DeactivateEndpoint+0x1b0>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	600b      	str	r3, [r1, #0]
 8006a72:	e060      	b.n	8006b36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a8a:	d11f      	bne.n	8006acc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	0151      	lsls	r1, r2, #5
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	440a      	add	r2, r1
 8006aa2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006aa6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006aaa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	0151      	lsls	r1, r2, #5
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	440a      	add	r2, r1
 8006ac2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ac6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006aca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ad2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	f003 030f 	and.w	r3, r3, #15
 8006adc:	2101      	movs	r1, #1
 8006ade:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae2:	041b      	lsls	r3, r3, #16
 8006ae4:	43db      	mvns	r3, r3
 8006ae6:	68f9      	ldr	r1, [r7, #12]
 8006ae8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006aec:	4013      	ands	r3, r2
 8006aee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af6:	69da      	ldr	r2, [r3, #28]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	f003 030f 	and.w	r3, r3, #15
 8006b00:	2101      	movs	r1, #1
 8006b02:	fa01 f303 	lsl.w	r3, r1, r3
 8006b06:	041b      	lsls	r3, r3, #16
 8006b08:	43db      	mvns	r3, r3
 8006b0a:	68f9      	ldr	r1, [r7, #12]
 8006b0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b10:	4013      	ands	r3, r2
 8006b12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	0159      	lsls	r1, r3, #5
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	440b      	add	r3, r1
 8006b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4b05      	ldr	r3, [pc, #20]	@ (8006b48 <USB_DeactivateEndpoint+0x1b4>)
 8006b32:	4013      	ands	r3, r2
 8006b34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	ec337800 	.word	0xec337800
 8006b48:	eff37800 	.word	0xeff37800

08006b4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08a      	sub	sp, #40	@ 0x28
 8006b50:	af02      	add	r7, sp, #8
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	4613      	mov	r3, r2
 8006b58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	785b      	ldrb	r3, [r3, #1]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	f040 817f 	bne.w	8006e6c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d132      	bne.n	8006bdc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	0151      	lsls	r1, r2, #5
 8006b88:	69fa      	ldr	r2, [r7, #28]
 8006b8a:	440a      	add	r2, r1
 8006b8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b90:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006b94:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006b98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	0151      	lsls	r1, r2, #5
 8006bac:	69fa      	ldr	r2, [r7, #28]
 8006bae:	440a      	add	r2, r1
 8006bb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006bb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	0151      	lsls	r1, r2, #5
 8006bcc:	69fa      	ldr	r2, [r7, #28]
 8006bce:	440a      	add	r2, r1
 8006bd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bd4:	0cdb      	lsrs	r3, r3, #19
 8006bd6:	04db      	lsls	r3, r3, #19
 8006bd8:	6113      	str	r3, [r2, #16]
 8006bda:	e097      	b.n	8006d0c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	0151      	lsls	r1, r2, #5
 8006bee:	69fa      	ldr	r2, [r7, #28]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bf6:	0cdb      	lsrs	r3, r3, #19
 8006bf8:	04db      	lsls	r3, r3, #19
 8006bfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	0151      	lsls	r1, r2, #5
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	440a      	add	r2, r1
 8006c12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c16:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006c1a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006c1e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d11a      	bne.n	8006c5c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d903      	bls.n	8006c3a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	689a      	ldr	r2, [r3, #8]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	0151      	lsls	r1, r2, #5
 8006c4c:	69fa      	ldr	r2, [r7, #28]
 8006c4e:	440a      	add	r2, r1
 8006c50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c58:	6113      	str	r3, [r2, #16]
 8006c5a:	e044      	b.n	8006ce6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	691a      	ldr	r2, [r3, #16]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	4413      	add	r3, r2
 8006c66:	1e5a      	subs	r2, r3, #1
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c70:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c7e:	691a      	ldr	r2, [r3, #16]
 8006c80:	8afb      	ldrh	r3, [r7, #22]
 8006c82:	04d9      	lsls	r1, r3, #19
 8006c84:	4ba4      	ldr	r3, [pc, #656]	@ (8006f18 <USB_EPStartXfer+0x3cc>)
 8006c86:	400b      	ands	r3, r1
 8006c88:	69b9      	ldr	r1, [r7, #24]
 8006c8a:	0148      	lsls	r0, r1, #5
 8006c8c:	69f9      	ldr	r1, [r7, #28]
 8006c8e:	4401      	add	r1, r0
 8006c90:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006c94:	4313      	orrs	r3, r2
 8006c96:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	791b      	ldrb	r3, [r3, #4]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d122      	bne.n	8006ce6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	0151      	lsls	r1, r2, #5
 8006cb2:	69fa      	ldr	r2, [r7, #28]
 8006cb4:	440a      	add	r2, r1
 8006cb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cba:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006cbe:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	8afb      	ldrh	r3, [r7, #22]
 8006cd0:	075b      	lsls	r3, r3, #29
 8006cd2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006cd6:	69b9      	ldr	r1, [r7, #24]
 8006cd8:	0148      	lsls	r0, r1, #5
 8006cda:	69f9      	ldr	r1, [r7, #28]
 8006cdc:	4401      	add	r1, r0
 8006cde:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cfc:	69b9      	ldr	r1, [r7, #24]
 8006cfe:	0148      	lsls	r0, r1, #5
 8006d00:	69f9      	ldr	r1, [r7, #28]
 8006d02:	4401      	add	r1, r0
 8006d04:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d0c:	79fb      	ldrb	r3, [r7, #7]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d14b      	bne.n	8006daa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d009      	beq.n	8006d2e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d26:	461a      	mov	r2, r3
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	791b      	ldrb	r3, [r3, #4]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d128      	bne.n	8006d88 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d110      	bne.n	8006d68 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	0151      	lsls	r1, r2, #5
 8006d58:	69fa      	ldr	r2, [r7, #28]
 8006d5a:	440a      	add	r2, r1
 8006d5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d60:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	e00f      	b.n	8006d88 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69ba      	ldr	r2, [r7, #24]
 8006d78:	0151      	lsls	r1, r2, #5
 8006d7a:	69fa      	ldr	r2, [r7, #28]
 8006d7c:	440a      	add	r2, r1
 8006d7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d86:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	0151      	lsls	r1, r2, #5
 8006d9a:	69fa      	ldr	r2, [r7, #28]
 8006d9c:	440a      	add	r2, r1
 8006d9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006da2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006da6:	6013      	str	r3, [r2, #0]
 8006da8:	e166      	b.n	8007078 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	0151      	lsls	r1, r2, #5
 8006dbc:	69fa      	ldr	r2, [r7, #28]
 8006dbe:	440a      	add	r2, r1
 8006dc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dc4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006dc8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	791b      	ldrb	r3, [r3, #4]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d015      	beq.n	8006dfe <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 814e 	beq.w	8007078 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006de2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	f003 030f 	and.w	r3, r3, #15
 8006dec:	2101      	movs	r1, #1
 8006dee:	fa01 f303 	lsl.w	r3, r1, r3
 8006df2:	69f9      	ldr	r1, [r7, #28]
 8006df4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	634b      	str	r3, [r1, #52]	@ 0x34
 8006dfc:	e13c      	b.n	8007078 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d110      	bne.n	8006e30 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	0151      	lsls	r1, r2, #5
 8006e20:	69fa      	ldr	r2, [r7, #28]
 8006e22:	440a      	add	r2, r1
 8006e24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e2c:	6013      	str	r3, [r2, #0]
 8006e2e:	e00f      	b.n	8006e50 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	0151      	lsls	r1, r2, #5
 8006e42:	69fa      	ldr	r2, [r7, #28]
 8006e44:	440a      	add	r2, r1
 8006e46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e4e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	68d9      	ldr	r1, [r3, #12]
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	781a      	ldrb	r2, [r3, #0]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	b298      	uxth	r0, r3
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	4603      	mov	r3, r0
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 f9b9 	bl	80071dc <USB_WritePacket>
 8006e6a:	e105      	b.n	8007078 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	0151      	lsls	r1, r2, #5
 8006e7e:	69fa      	ldr	r2, [r7, #28]
 8006e80:	440a      	add	r2, r1
 8006e82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e86:	0cdb      	lsrs	r3, r3, #19
 8006e88:	04db      	lsls	r3, r3, #19
 8006e8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	0151      	lsls	r1, r2, #5
 8006e9e:	69fa      	ldr	r2, [r7, #28]
 8006ea0:	440a      	add	r2, r1
 8006ea2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ea6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006eaa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006eae:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d132      	bne.n	8006f1c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	689a      	ldr	r2, [r3, #8]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	689a      	ldr	r2, [r3, #8]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eda:	691a      	ldr	r2, [r3, #16]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ee4:	69b9      	ldr	r1, [r7, #24]
 8006ee6:	0148      	lsls	r0, r1, #5
 8006ee8:	69f9      	ldr	r1, [r7, #28]
 8006eea:	4401      	add	r1, r0
 8006eec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	0151      	lsls	r1, r2, #5
 8006f06:	69fa      	ldr	r2, [r7, #28]
 8006f08:	440a      	add	r2, r1
 8006f0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f12:	6113      	str	r3, [r2, #16]
 8006f14:	e062      	b.n	8006fdc <USB_EPStartXfer+0x490>
 8006f16:	bf00      	nop
 8006f18:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d123      	bne.n	8006f6c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f30:	691a      	ldr	r2, [r3, #16]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f3a:	69b9      	ldr	r1, [r7, #24]
 8006f3c:	0148      	lsls	r0, r1, #5
 8006f3e:	69f9      	ldr	r1, [r7, #28]
 8006f40:	4401      	add	r1, r0
 8006f42:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f46:	4313      	orrs	r3, r2
 8006f48:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	69ba      	ldr	r2, [r7, #24]
 8006f5a:	0151      	lsls	r1, r2, #5
 8006f5c:	69fa      	ldr	r2, [r7, #28]
 8006f5e:	440a      	add	r2, r1
 8006f60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f68:	6113      	str	r3, [r2, #16]
 8006f6a:	e037      	b.n	8006fdc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	691a      	ldr	r2, [r3, #16]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	4413      	add	r3, r2
 8006f76:	1e5a      	subs	r2, r3, #1
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f80:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	8afa      	ldrh	r2, [r7, #22]
 8006f88:	fb03 f202 	mul.w	r2, r3, r2
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f9c:	691a      	ldr	r2, [r3, #16]
 8006f9e:	8afb      	ldrh	r3, [r7, #22]
 8006fa0:	04d9      	lsls	r1, r3, #19
 8006fa2:	4b38      	ldr	r3, [pc, #224]	@ (8007084 <USB_EPStartXfer+0x538>)
 8006fa4:	400b      	ands	r3, r1
 8006fa6:	69b9      	ldr	r1, [r7, #24]
 8006fa8:	0148      	lsls	r0, r1, #5
 8006faa:	69f9      	ldr	r1, [r7, #28]
 8006fac:	4401      	add	r1, r0
 8006fae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fc2:	691a      	ldr	r2, [r3, #16]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fcc:	69b9      	ldr	r1, [r7, #24]
 8006fce:	0148      	lsls	r0, r1, #5
 8006fd0:	69f9      	ldr	r1, [r7, #28]
 8006fd2:	4401      	add	r1, r0
 8006fd4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006fdc:	79fb      	ldrb	r3, [r7, #7]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d10d      	bne.n	8006ffe <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d009      	beq.n	8006ffe <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	68d9      	ldr	r1, [r3, #12]
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ffa:	460a      	mov	r2, r1
 8006ffc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	791b      	ldrb	r3, [r3, #4]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d128      	bne.n	8007058 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007012:	2b00      	cmp	r3, #0
 8007014:	d110      	bne.n	8007038 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	4413      	add	r3, r2
 800701e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	0151      	lsls	r1, r2, #5
 8007028:	69fa      	ldr	r2, [r7, #28]
 800702a:	440a      	add	r2, r1
 800702c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007030:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	e00f      	b.n	8007058 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	0151      	lsls	r1, r2, #5
 800704a:	69fa      	ldr	r2, [r7, #28]
 800704c:	440a      	add	r2, r1
 800704e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007056:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	0151      	lsls	r1, r2, #5
 800706a:	69fa      	ldr	r2, [r7, #28]
 800706c:	440a      	add	r2, r1
 800706e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007072:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007076:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3720      	adds	r7, #32
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	1ff80000 	.word	0x1ff80000

08007088 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007088:	b480      	push	{r7}
 800708a:	b087      	sub	sp, #28
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007092:	2300      	movs	r3, #0
 8007094:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	785b      	ldrb	r3, [r3, #1]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d14a      	bne.n	800713c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070be:	f040 8086 	bne.w	80071ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	7812      	ldrb	r2, [r2, #0]
 80070d6:	0151      	lsls	r1, r2, #5
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	440a      	add	r2, r1
 80070dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80070e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	015a      	lsls	r2, r3, #5
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	7812      	ldrb	r2, [r2, #0]
 80070fa:	0151      	lsls	r1, r2, #5
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	440a      	add	r2, r1
 8007100:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007104:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007108:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3301      	adds	r3, #1
 800710e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007116:	4293      	cmp	r3, r2
 8007118:	d902      	bls.n	8007120 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	75fb      	strb	r3, [r7, #23]
          break;
 800711e:	e056      	b.n	80071ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007134:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007138:	d0e7      	beq.n	800710a <USB_EPStopXfer+0x82>
 800713a:	e048      	b.n	80071ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	015a      	lsls	r2, r3, #5
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	4413      	add	r3, r2
 8007146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007150:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007154:	d13b      	bne.n	80071ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	7812      	ldrb	r2, [r2, #0]
 800716a:	0151      	lsls	r1, r2, #5
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	440a      	add	r2, r1
 8007170:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007174:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007178:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	7812      	ldrb	r2, [r2, #0]
 800718e:	0151      	lsls	r1, r2, #5
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	440a      	add	r2, r1
 8007194:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007198:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800719c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	3301      	adds	r3, #1
 80071a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d902      	bls.n	80071b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	75fb      	strb	r3, [r7, #23]
          break;
 80071b2:	e00c      	b.n	80071ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071cc:	d0e7      	beq.n	800719e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	371c      	adds	r7, #28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80071dc:	b480      	push	{r7}
 80071de:	b089      	sub	sp, #36	@ 0x24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	4611      	mov	r1, r2
 80071e8:	461a      	mov	r2, r3
 80071ea:	460b      	mov	r3, r1
 80071ec:	71fb      	strb	r3, [r7, #7]
 80071ee:	4613      	mov	r3, r2
 80071f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80071fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d123      	bne.n	800724a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007202:	88bb      	ldrh	r3, [r7, #4]
 8007204:	3303      	adds	r3, #3
 8007206:	089b      	lsrs	r3, r3, #2
 8007208:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800720a:	2300      	movs	r3, #0
 800720c:	61bb      	str	r3, [r7, #24]
 800720e:	e018      	b.n	8007242 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007210:	79fb      	ldrb	r3, [r7, #7]
 8007212:	031a      	lsls	r2, r3, #12
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	4413      	add	r3, r2
 8007218:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800721c:	461a      	mov	r2, r3
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	3301      	adds	r3, #1
 8007228:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	3301      	adds	r3, #1
 800722e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	3301      	adds	r3, #1
 8007234:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	3301      	adds	r3, #1
 800723a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	3301      	adds	r3, #1
 8007240:	61bb      	str	r3, [r7, #24]
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	429a      	cmp	r2, r3
 8007248:	d3e2      	bcc.n	8007210 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3724      	adds	r7, #36	@ 0x24
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007258:	b480      	push	{r7}
 800725a:	b08b      	sub	sp, #44	@ 0x2c
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	4613      	mov	r3, r2
 8007264:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800726e:	88fb      	ldrh	r3, [r7, #6]
 8007270:	089b      	lsrs	r3, r3, #2
 8007272:	b29b      	uxth	r3, r3
 8007274:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007276:	88fb      	ldrh	r3, [r7, #6]
 8007278:	f003 0303 	and.w	r3, r3, #3
 800727c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800727e:	2300      	movs	r3, #0
 8007280:	623b      	str	r3, [r7, #32]
 8007282:	e014      	b.n	80072ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007292:	3301      	adds	r3, #1
 8007294:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007298:	3301      	adds	r3, #1
 800729a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800729c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729e:	3301      	adds	r3, #1
 80072a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80072a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a4:	3301      	adds	r3, #1
 80072a6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	3301      	adds	r3, #1
 80072ac:	623b      	str	r3, [r7, #32]
 80072ae:	6a3a      	ldr	r2, [r7, #32]
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d3e6      	bcc.n	8007284 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80072b6:	8bfb      	ldrh	r3, [r7, #30]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d01e      	beq.n	80072fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072c6:	461a      	mov	r2, r3
 80072c8:	f107 0310 	add.w	r3, r7, #16
 80072cc:	6812      	ldr	r2, [r2, #0]
 80072ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	fa22 f303 	lsr.w	r3, r2, r3
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e0:	701a      	strb	r2, [r3, #0]
      i++;
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	3301      	adds	r3, #1
 80072e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80072e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ea:	3301      	adds	r3, #1
 80072ec:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80072ee:	8bfb      	ldrh	r3, [r7, #30]
 80072f0:	3b01      	subs	r3, #1
 80072f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80072f4:	8bfb      	ldrh	r3, [r7, #30]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1ea      	bne.n	80072d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80072fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	372c      	adds	r7, #44	@ 0x2c
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	785b      	ldrb	r3, [r3, #1]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d12c      	bne.n	800737e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	db12      	blt.n	800735c <USB_EPSetStall+0x54>
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00f      	beq.n	800735c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	0151      	lsls	r1, r2, #5
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	440a      	add	r2, r1
 8007352:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007356:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800735a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	0151      	lsls	r1, r2, #5
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	440a      	add	r2, r1
 8007372:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007376:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	e02b      	b.n	80073d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	db12      	blt.n	80073b6 <USB_EPSetStall+0xae>
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00f      	beq.n	80073b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	0151      	lsls	r1, r2, #5
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	440a      	add	r2, r1
 80073ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80073b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	015a      	lsls	r2, r3, #5
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	0151      	lsls	r1, r2, #5
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	440a      	add	r2, r1
 80073cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80073d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	785b      	ldrb	r3, [r3, #1]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d128      	bne.n	8007452 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	015a      	lsls	r2, r3, #5
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	4413      	add	r3, r2
 8007408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	0151      	lsls	r1, r2, #5
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	440a      	add	r2, r1
 8007416:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800741a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800741e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	791b      	ldrb	r3, [r3, #4]
 8007424:	2b03      	cmp	r3, #3
 8007426:	d003      	beq.n	8007430 <USB_EPClearStall+0x4c>
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	791b      	ldrb	r3, [r3, #4]
 800742c:	2b02      	cmp	r3, #2
 800742e:	d138      	bne.n	80074a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	4413      	add	r3, r2
 8007438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	0151      	lsls	r1, r2, #5
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	440a      	add	r2, r1
 8007446:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800744a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	e027      	b.n	80074a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	0151      	lsls	r1, r2, #5
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	440a      	add	r2, r1
 8007468:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800746c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007470:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	791b      	ldrb	r3, [r3, #4]
 8007476:	2b03      	cmp	r3, #3
 8007478:	d003      	beq.n	8007482 <USB_EPClearStall+0x9e>
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	791b      	ldrb	r3, [r3, #4]
 800747e:	2b02      	cmp	r3, #2
 8007480:	d10f      	bne.n	80074a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	4413      	add	r3, r2
 800748a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	0151      	lsls	r1, r2, #5
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	440a      	add	r2, r1
 8007498:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800749c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074ce:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80074d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	78fb      	ldrb	r3, [r7, #3]
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80074e4:	68f9      	ldr	r1, [r7, #12]
 80074e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074ea:	4313      	orrs	r3, r2
 80074ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3714      	adds	r7, #20
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007516:	f023 0303 	bic.w	r3, r3, #3
 800751a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800752a:	f023 0302 	bic.w	r3, r3, #2
 800752e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800753e:	b480      	push	{r7}
 8007540:	b085      	sub	sp, #20
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007558:	f023 0303 	bic.w	r3, r3, #3
 800755c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800756c:	f043 0302 	orr.w	r3, r3, #2
 8007570:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	4013      	ands	r3, r2
 8007596:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007598:	68fb      	ldr	r3, [r7, #12]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b085      	sub	sp, #20
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075c2:	69db      	ldr	r3, [r3, #28]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	4013      	ands	r3, r2
 80075c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	0c1b      	lsrs	r3, r3, #16
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80075da:	b480      	push	{r7}
 80075dc:	b085      	sub	sp, #20
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075f6:	69db      	ldr	r3, [r3, #28]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	4013      	ands	r3, r2
 80075fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	b29b      	uxth	r3, r3
}
 8007602:	4618      	mov	r0, r3
 8007604:	3714      	adds	r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800760e:	b480      	push	{r7}
 8007610:	b085      	sub	sp, #20
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	460b      	mov	r3, r1
 8007618:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800761e:	78fb      	ldrb	r3, [r7, #3]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	4413      	add	r3, r2
 8007626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	4013      	ands	r3, r2
 800763a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800763c:	68bb      	ldr	r3, [r7, #8]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800764a:	b480      	push	{r7}
 800764c:	b087      	sub	sp, #28
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	460b      	mov	r3, r1
 8007654:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800766a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800766c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800766e:	78fb      	ldrb	r3, [r7, #3]
 8007670:	f003 030f 	and.w	r3, r3, #15
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	fa22 f303 	lsr.w	r3, r2, r3
 800767a:	01db      	lsls	r3, r3, #7
 800767c:	b2db      	uxtb	r3, r3
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4313      	orrs	r3, r2
 8007682:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	4013      	ands	r3, r2
 8007696:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007698:	68bb      	ldr	r3, [r7, #8]
}
 800769a:	4618      	mov	r0, r3
 800769c:	371c      	adds	r7, #28
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b083      	sub	sp, #12
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	f003 0301 	and.w	r3, r3, #1
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b085      	sub	sp, #20
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076dc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80076e0:	f023 0307 	bic.w	r3, r3, #7
 80076e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	460b      	mov	r3, r1
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	333c      	adds	r3, #60	@ 0x3c
 800771e:	3304      	adds	r3, #4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	4a26      	ldr	r2, [pc, #152]	@ (80077c0 <USB_EP0_OutStart+0xb8>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d90a      	bls.n	8007742 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007738:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800773c:	d101      	bne.n	8007742 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	e037      	b.n	80077b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007748:	461a      	mov	r2, r3
 800774a:	2300      	movs	r3, #0
 800774c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800775c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007760:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007770:	f043 0318 	orr.w	r3, r3, #24
 8007774:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007784:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007788:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800778a:	7afb      	ldrb	r3, [r7, #11]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d10f      	bne.n	80077b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007796:	461a      	mov	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077aa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80077ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	371c      	adds	r7, #28
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	4f54300a 	.word	0x4f54300a

080077c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077cc:	2300      	movs	r3, #0
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3301      	adds	r3, #1
 80077d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077dc:	d901      	bls.n	80077e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e01b      	b.n	800781a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	daf2      	bge.n	80077d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	f043 0201 	orr.w	r2, r3, #1
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	3301      	adds	r3, #1
 80077fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007806:	d901      	bls.n	800780c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e006      	b.n	800781a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	2b01      	cmp	r3, #1
 8007816:	d0f0      	beq.n	80077fa <USB_CoreReset+0x36>

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
	...

08007828 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007834:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007838:	f002 fc2e 	bl	800a098 <USBD_static_malloc>
 800783c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d109      	bne.n	8007858 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	32b0      	adds	r2, #176	@ 0xb0
 800784e:	2100      	movs	r1, #0
 8007850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007854:	2302      	movs	r3, #2
 8007856:	e0d4      	b.n	8007a02 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007858:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800785c:	2100      	movs	r1, #0
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f003 fc23 	bl	800b0aa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	32b0      	adds	r2, #176	@ 0xb0
 800786e:	68f9      	ldr	r1, [r7, #12]
 8007870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	32b0      	adds	r2, #176	@ 0xb0
 800787e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	7c1b      	ldrb	r3, [r3, #16]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d138      	bne.n	8007902 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007890:	4b5e      	ldr	r3, [pc, #376]	@ (8007a0c <USBD_CDC_Init+0x1e4>)
 8007892:	7819      	ldrb	r1, [r3, #0]
 8007894:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007898:	2202      	movs	r2, #2
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f002 fad9 	bl	8009e52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80078a0:	4b5a      	ldr	r3, [pc, #360]	@ (8007a0c <USBD_CDC_Init+0x1e4>)
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	f003 020f 	and.w	r2, r3, #15
 80078a8:	6879      	ldr	r1, [r7, #4]
 80078aa:	4613      	mov	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	440b      	add	r3, r1
 80078b4:	3324      	adds	r3, #36	@ 0x24
 80078b6:	2201      	movs	r2, #1
 80078b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80078ba:	4b55      	ldr	r3, [pc, #340]	@ (8007a10 <USBD_CDC_Init+0x1e8>)
 80078bc:	7819      	ldrb	r1, [r3, #0]
 80078be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80078c2:	2202      	movs	r2, #2
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f002 fac4 	bl	8009e52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80078ca:	4b51      	ldr	r3, [pc, #324]	@ (8007a10 <USBD_CDC_Init+0x1e8>)
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	f003 020f 	and.w	r2, r3, #15
 80078d2:	6879      	ldr	r1, [r7, #4]
 80078d4:	4613      	mov	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	440b      	add	r3, r1
 80078de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80078e2:	2201      	movs	r2, #1
 80078e4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80078e6:	4b4b      	ldr	r3, [pc, #300]	@ (8007a14 <USBD_CDC_Init+0x1ec>)
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	f003 020f 	and.w	r2, r3, #15
 80078ee:	6879      	ldr	r1, [r7, #4]
 80078f0:	4613      	mov	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	440b      	add	r3, r1
 80078fa:	3326      	adds	r3, #38	@ 0x26
 80078fc:	2210      	movs	r2, #16
 80078fe:	801a      	strh	r2, [r3, #0]
 8007900:	e035      	b.n	800796e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007902:	4b42      	ldr	r3, [pc, #264]	@ (8007a0c <USBD_CDC_Init+0x1e4>)
 8007904:	7819      	ldrb	r1, [r3, #0]
 8007906:	2340      	movs	r3, #64	@ 0x40
 8007908:	2202      	movs	r2, #2
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f002 faa1 	bl	8009e52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007910:	4b3e      	ldr	r3, [pc, #248]	@ (8007a0c <USBD_CDC_Init+0x1e4>)
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	f003 020f 	and.w	r2, r3, #15
 8007918:	6879      	ldr	r1, [r7, #4]
 800791a:	4613      	mov	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	440b      	add	r3, r1
 8007924:	3324      	adds	r3, #36	@ 0x24
 8007926:	2201      	movs	r2, #1
 8007928:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800792a:	4b39      	ldr	r3, [pc, #228]	@ (8007a10 <USBD_CDC_Init+0x1e8>)
 800792c:	7819      	ldrb	r1, [r3, #0]
 800792e:	2340      	movs	r3, #64	@ 0x40
 8007930:	2202      	movs	r2, #2
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f002 fa8d 	bl	8009e52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007938:	4b35      	ldr	r3, [pc, #212]	@ (8007a10 <USBD_CDC_Init+0x1e8>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	f003 020f 	and.w	r2, r3, #15
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007950:	2201      	movs	r2, #1
 8007952:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007954:	4b2f      	ldr	r3, [pc, #188]	@ (8007a14 <USBD_CDC_Init+0x1ec>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	f003 020f 	and.w	r2, r3, #15
 800795c:	6879      	ldr	r1, [r7, #4]
 800795e:	4613      	mov	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	440b      	add	r3, r1
 8007968:	3326      	adds	r3, #38	@ 0x26
 800796a:	2210      	movs	r2, #16
 800796c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800796e:	4b29      	ldr	r3, [pc, #164]	@ (8007a14 <USBD_CDC_Init+0x1ec>)
 8007970:	7819      	ldrb	r1, [r3, #0]
 8007972:	2308      	movs	r3, #8
 8007974:	2203      	movs	r2, #3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f002 fa6b 	bl	8009e52 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800797c:	4b25      	ldr	r3, [pc, #148]	@ (8007a14 <USBD_CDC_Init+0x1ec>)
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	f003 020f 	and.w	r2, r3, #15
 8007984:	6879      	ldr	r1, [r7, #4]
 8007986:	4613      	mov	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	440b      	add	r3, r1
 8007990:	3324      	adds	r3, #36	@ 0x24
 8007992:	2201      	movs	r2, #1
 8007994:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	33b0      	adds	r3, #176	@ 0xb0
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80079cc:	2302      	movs	r3, #2
 80079ce:	e018      	b.n	8007a02 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	7c1b      	ldrb	r3, [r3, #16]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10a      	bne.n	80079ee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079d8:	4b0d      	ldr	r3, [pc, #52]	@ (8007a10 <USBD_CDC_Init+0x1e8>)
 80079da:	7819      	ldrb	r1, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80079e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f002 fb22 	bl	800a030 <USBD_LL_PrepareReceive>
 80079ec:	e008      	b.n	8007a00 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079ee:	4b08      	ldr	r3, [pc, #32]	@ (8007a10 <USBD_CDC_Init+0x1e8>)
 80079f0:	7819      	ldrb	r1, [r3, #0]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80079f8:	2340      	movs	r3, #64	@ 0x40
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f002 fb18 	bl	800a030 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	20000097 	.word	0x20000097
 8007a10:	20000098 	.word	0x20000098
 8007a14:	20000099 	.word	0x20000099

08007a18 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	460b      	mov	r3, r1
 8007a22:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007a24:	4b3a      	ldr	r3, [pc, #232]	@ (8007b10 <USBD_CDC_DeInit+0xf8>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f002 fa37 	bl	8009e9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007a30:	4b37      	ldr	r3, [pc, #220]	@ (8007b10 <USBD_CDC_DeInit+0xf8>)
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	f003 020f 	and.w	r2, r3, #15
 8007a38:	6879      	ldr	r1, [r7, #4]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	440b      	add	r3, r1
 8007a44:	3324      	adds	r3, #36	@ 0x24
 8007a46:	2200      	movs	r2, #0
 8007a48:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007a4a:	4b32      	ldr	r3, [pc, #200]	@ (8007b14 <USBD_CDC_DeInit+0xfc>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f002 fa24 	bl	8009e9e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007a56:	4b2f      	ldr	r3, [pc, #188]	@ (8007b14 <USBD_CDC_DeInit+0xfc>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	f003 020f 	and.w	r2, r3, #15
 8007a5e:	6879      	ldr	r1, [r7, #4]
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	440b      	add	r3, r1
 8007a6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007a6e:	2200      	movs	r2, #0
 8007a70:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007a72:	4b29      	ldr	r3, [pc, #164]	@ (8007b18 <USBD_CDC_DeInit+0x100>)
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f002 fa10 	bl	8009e9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007a7e:	4b26      	ldr	r3, [pc, #152]	@ (8007b18 <USBD_CDC_DeInit+0x100>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	f003 020f 	and.w	r2, r3, #15
 8007a86:	6879      	ldr	r1, [r7, #4]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	440b      	add	r3, r1
 8007a92:	3324      	adds	r3, #36	@ 0x24
 8007a94:	2200      	movs	r2, #0
 8007a96:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007a98:	4b1f      	ldr	r3, [pc, #124]	@ (8007b18 <USBD_CDC_DeInit+0x100>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	f003 020f 	and.w	r2, r3, #15
 8007aa0:	6879      	ldr	r1, [r7, #4]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	440b      	add	r3, r1
 8007aac:	3326      	adds	r3, #38	@ 0x26
 8007aae:	2200      	movs	r2, #0
 8007ab0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	32b0      	adds	r2, #176	@ 0xb0
 8007abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d01f      	beq.n	8007b04 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	33b0      	adds	r3, #176	@ 0xb0
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	32b0      	adds	r2, #176	@ 0xb0
 8007ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f002 fae4 	bl	800a0b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	32b0      	adds	r2, #176	@ 0xb0
 8007af6:	2100      	movs	r1, #0
 8007af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	20000097 	.word	0x20000097
 8007b14:	20000098 	.word	0x20000098
 8007b18:	20000099 	.word	0x20000099

08007b1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	32b0      	adds	r2, #176	@ 0xb0
 8007b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b34:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e0bf      	b.n	8007ccc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d050      	beq.n	8007bfa <USBD_CDC_Setup+0xde>
 8007b58:	2b20      	cmp	r3, #32
 8007b5a:	f040 80af 	bne.w	8007cbc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	88db      	ldrh	r3, [r3, #6]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d03a      	beq.n	8007bdc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	b25b      	sxtb	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	da1b      	bge.n	8007ba8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	33b0      	adds	r3, #176	@ 0xb0
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007b86:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	88d2      	ldrh	r2, [r2, #6]
 8007b8c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	88db      	ldrh	r3, [r3, #6]
 8007b92:	2b07      	cmp	r3, #7
 8007b94:	bf28      	it	cs
 8007b96:	2307      	movcs	r3, #7
 8007b98:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	89fa      	ldrh	r2, [r7, #14]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f001 fd53 	bl	800964c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007ba6:	e090      	b.n	8007cca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	785a      	ldrb	r2, [r3, #1]
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	88db      	ldrh	r3, [r3, #6]
 8007bb6:	2b3f      	cmp	r3, #63	@ 0x3f
 8007bb8:	d803      	bhi.n	8007bc2 <USBD_CDC_Setup+0xa6>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	88db      	ldrh	r3, [r3, #6]
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	e000      	b.n	8007bc4 <USBD_CDC_Setup+0xa8>
 8007bc2:	2240      	movs	r2, #64	@ 0x40
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007bca:	6939      	ldr	r1, [r7, #16]
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f001 fd65 	bl	80096a4 <USBD_CtlPrepareRx>
      break;
 8007bda:	e076      	b.n	8007cca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	33b0      	adds	r3, #176	@ 0xb0
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	7850      	ldrb	r0, [r2, #1]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	4798      	blx	r3
      break;
 8007bf8:	e067      	b.n	8007cca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	785b      	ldrb	r3, [r3, #1]
 8007bfe:	2b0b      	cmp	r3, #11
 8007c00:	d851      	bhi.n	8007ca6 <USBD_CDC_Setup+0x18a>
 8007c02:	a201      	add	r2, pc, #4	@ (adr r2, 8007c08 <USBD_CDC_Setup+0xec>)
 8007c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c08:	08007c39 	.word	0x08007c39
 8007c0c:	08007cb5 	.word	0x08007cb5
 8007c10:	08007ca7 	.word	0x08007ca7
 8007c14:	08007ca7 	.word	0x08007ca7
 8007c18:	08007ca7 	.word	0x08007ca7
 8007c1c:	08007ca7 	.word	0x08007ca7
 8007c20:	08007ca7 	.word	0x08007ca7
 8007c24:	08007ca7 	.word	0x08007ca7
 8007c28:	08007ca7 	.word	0x08007ca7
 8007c2c:	08007ca7 	.word	0x08007ca7
 8007c30:	08007c63 	.word	0x08007c63
 8007c34:	08007c8d 	.word	0x08007c8d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	d107      	bne.n	8007c54 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c44:	f107 030a 	add.w	r3, r7, #10
 8007c48:	2202      	movs	r2, #2
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f001 fcfd 	bl	800964c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c52:	e032      	b.n	8007cba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f001 fc7b 	bl	8009552 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	75fb      	strb	r3, [r7, #23]
          break;
 8007c60:	e02b      	b.n	8007cba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b03      	cmp	r3, #3
 8007c6c:	d107      	bne.n	8007c7e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c6e:	f107 030d 	add.w	r3, r7, #13
 8007c72:	2201      	movs	r2, #1
 8007c74:	4619      	mov	r1, r3
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f001 fce8 	bl	800964c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c7c:	e01d      	b.n	8007cba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 fc66 	bl	8009552 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c86:	2303      	movs	r3, #3
 8007c88:	75fb      	strb	r3, [r7, #23]
          break;
 8007c8a:	e016      	b.n	8007cba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b03      	cmp	r3, #3
 8007c96:	d00f      	beq.n	8007cb8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f001 fc59 	bl	8009552 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ca4:	e008      	b.n	8007cb8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f001 fc52 	bl	8009552 <USBD_CtlError>
          ret = USBD_FAIL;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	75fb      	strb	r3, [r7, #23]
          break;
 8007cb2:	e002      	b.n	8007cba <USBD_CDC_Setup+0x19e>
          break;
 8007cb4:	bf00      	nop
 8007cb6:	e008      	b.n	8007cca <USBD_CDC_Setup+0x1ae>
          break;
 8007cb8:	bf00      	nop
      }
      break;
 8007cba:	e006      	b.n	8007cca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f001 fc47 	bl	8009552 <USBD_CtlError>
      ret = USBD_FAIL;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8007cc8:	bf00      	nop
  }

  return (uint8_t)ret;
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3718      	adds	r7, #24
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ce6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	32b0      	adds	r2, #176	@ 0xb0
 8007cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e065      	b.n	8007dca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	32b0      	adds	r2, #176	@ 0xb0
 8007d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d0c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007d0e:	78fb      	ldrb	r3, [r7, #3]
 8007d10:	f003 020f 	and.w	r2, r3, #15
 8007d14:	6879      	ldr	r1, [r7, #4]
 8007d16:	4613      	mov	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	440b      	add	r3, r1
 8007d20:	3318      	adds	r3, #24
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d02f      	beq.n	8007d88 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007d28:	78fb      	ldrb	r3, [r7, #3]
 8007d2a:	f003 020f 	and.w	r2, r3, #15
 8007d2e:	6879      	ldr	r1, [r7, #4]
 8007d30:	4613      	mov	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	440b      	add	r3, r1
 8007d3a:	3318      	adds	r3, #24
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	78fb      	ldrb	r3, [r7, #3]
 8007d40:	f003 010f 	and.w	r1, r3, #15
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	460b      	mov	r3, r1
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	440b      	add	r3, r1
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4403      	add	r3, r0
 8007d50:	331c      	adds	r3, #28
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d58:	fb01 f303 	mul.w	r3, r1, r3
 8007d5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d112      	bne.n	8007d88 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007d62:	78fb      	ldrb	r3, [r7, #3]
 8007d64:	f003 020f 	and.w	r2, r3, #15
 8007d68:	6879      	ldr	r1, [r7, #4]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	440b      	add	r3, r1
 8007d74:	3318      	adds	r3, #24
 8007d76:	2200      	movs	r2, #0
 8007d78:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d7a:	78f9      	ldrb	r1, [r7, #3]
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	2200      	movs	r2, #0
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f002 f934 	bl	8009fee <USBD_LL_Transmit>
 8007d86:	e01f      	b.n	8007dc8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	33b0      	adds	r3, #176	@ 0xb0
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	4413      	add	r3, r2
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d010      	beq.n	8007dc8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	33b0      	adds	r3, #176	@ 0xb0
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007dc4:	78fa      	ldrb	r2, [r7, #3]
 8007dc6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	32b0      	adds	r2, #176	@ 0xb0
 8007de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	32b0      	adds	r2, #176	@ 0xb0
 8007df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e01a      	b.n	8007e3a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007e04:	78fb      	ldrb	r3, [r7, #3]
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f002 f932 	bl	800a072 <USBD_LL_GetRxDataSize>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	33b0      	adds	r3, #176	@ 0xb0
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007e34:	4611      	mov	r1, r2
 8007e36:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	32b0      	adds	r2, #176	@ 0xb0
 8007e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e024      	b.n	8007eae <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	33b0      	adds	r3, #176	@ 0xb0
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d019      	beq.n	8007eac <USBD_CDC_EP0_RxReady+0x6a>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007e7e:	2bff      	cmp	r3, #255	@ 0xff
 8007e80:	d014      	beq.n	8007eac <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	33b0      	adds	r3, #176	@ 0xb0
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007e9a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007ea2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	22ff      	movs	r2, #255	@ 0xff
 8007ea8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
	...

08007eb8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ec0:	2182      	movs	r1, #130	@ 0x82
 8007ec2:	4818      	ldr	r0, [pc, #96]	@ (8007f24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ec4:	f000 fd0f 	bl	80088e6 <USBD_GetEpDesc>
 8007ec8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007eca:	2101      	movs	r1, #1
 8007ecc:	4815      	ldr	r0, [pc, #84]	@ (8007f24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ece:	f000 fd0a 	bl	80088e6 <USBD_GetEpDesc>
 8007ed2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ed4:	2181      	movs	r1, #129	@ 0x81
 8007ed6:	4813      	ldr	r0, [pc, #76]	@ (8007f24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ed8:	f000 fd05 	bl	80088e6 <USBD_GetEpDesc>
 8007edc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	2210      	movs	r2, #16
 8007ee8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d006      	beq.n	8007efe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ef8:	711a      	strb	r2, [r3, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d006      	beq.n	8007f12 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f0c:	711a      	strb	r2, [r3, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2243      	movs	r2, #67	@ 0x43
 8007f16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f18:	4b02      	ldr	r3, [pc, #8]	@ (8007f24 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20000054 	.word	0x20000054

08007f28 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f30:	2182      	movs	r1, #130	@ 0x82
 8007f32:	4818      	ldr	r0, [pc, #96]	@ (8007f94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f34:	f000 fcd7 	bl	80088e6 <USBD_GetEpDesc>
 8007f38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	4815      	ldr	r0, [pc, #84]	@ (8007f94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f3e:	f000 fcd2 	bl	80088e6 <USBD_GetEpDesc>
 8007f42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f44:	2181      	movs	r1, #129	@ 0x81
 8007f46:	4813      	ldr	r0, [pc, #76]	@ (8007f94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f48:	f000 fccd 	bl	80088e6 <USBD_GetEpDesc>
 8007f4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d002      	beq.n	8007f5a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	2210      	movs	r2, #16
 8007f58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d006      	beq.n	8007f6e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	2200      	movs	r2, #0
 8007f64:	711a      	strb	r2, [r3, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f042 0202 	orr.w	r2, r2, #2
 8007f6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d006      	beq.n	8007f82 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	711a      	strb	r2, [r3, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f042 0202 	orr.w	r2, r2, #2
 8007f80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2243      	movs	r2, #67	@ 0x43
 8007f86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f88:	4b02      	ldr	r3, [pc, #8]	@ (8007f94 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3718      	adds	r7, #24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	20000054 	.word	0x20000054

08007f98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007fa0:	2182      	movs	r1, #130	@ 0x82
 8007fa2:	4818      	ldr	r0, [pc, #96]	@ (8008004 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007fa4:	f000 fc9f 	bl	80088e6 <USBD_GetEpDesc>
 8007fa8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007faa:	2101      	movs	r1, #1
 8007fac:	4815      	ldr	r0, [pc, #84]	@ (8008004 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007fae:	f000 fc9a 	bl	80088e6 <USBD_GetEpDesc>
 8007fb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007fb4:	2181      	movs	r1, #129	@ 0x81
 8007fb6:	4813      	ldr	r0, [pc, #76]	@ (8008004 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007fb8:	f000 fc95 	bl	80088e6 <USBD_GetEpDesc>
 8007fbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	2210      	movs	r2, #16
 8007fc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d006      	beq.n	8007fde <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fd8:	711a      	strb	r2, [r3, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d006      	beq.n	8007ff2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fec:	711a      	strb	r2, [r3, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2243      	movs	r2, #67	@ 0x43
 8007ff6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ff8:	4b02      	ldr	r3, [pc, #8]	@ (8008004 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3718      	adds	r7, #24
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	20000054 	.word	0x20000054

08008008 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	220a      	movs	r2, #10
 8008014:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008016:	4b03      	ldr	r3, [pc, #12]	@ (8008024 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008018:	4618      	mov	r0, r3
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	20000010 	.word	0x20000010

08008028 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d101      	bne.n	800803c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008038:	2303      	movs	r3, #3
 800803a:	e009      	b.n	8008050 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	33b0      	adds	r3, #176	@ 0xb0
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800805c:	b480      	push	{r7}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	32b0      	adds	r2, #176	@ 0xb0
 8008072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008076:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d101      	bne.n	8008082 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800807e:	2303      	movs	r3, #3
 8008080:	e008      	b.n	8008094 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	371c      	adds	r7, #28
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	32b0      	adds	r2, #176	@ 0xb0
 80080b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e004      	b.n	80080ce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
	...

080080dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	32b0      	adds	r2, #176	@ 0xb0
 80080ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	32b0      	adds	r2, #176	@ 0xb0
 80080fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008106:	2303      	movs	r3, #3
 8008108:	e018      	b.n	800813c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	7c1b      	ldrb	r3, [r3, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10a      	bne.n	8008128 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008112:	4b0c      	ldr	r3, [pc, #48]	@ (8008144 <USBD_CDC_ReceivePacket+0x68>)
 8008114:	7819      	ldrb	r1, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800811c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f001 ff85 	bl	800a030 <USBD_LL_PrepareReceive>
 8008126:	e008      	b.n	800813a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008128:	4b06      	ldr	r3, [pc, #24]	@ (8008144 <USBD_CDC_ReceivePacket+0x68>)
 800812a:	7819      	ldrb	r1, [r3, #0]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008132:	2340      	movs	r3, #64	@ 0x40
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 ff7b 	bl	800a030 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	20000098 	.word	0x20000098

08008148 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	4613      	mov	r3, r2
 8008154:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800815c:	2303      	movs	r3, #3
 800815e:	e01f      	b.n	80081a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d003      	beq.n	8008186 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	79fa      	ldrb	r2, [r7, #7]
 8008192:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f001 fdf5 	bl	8009d84 <USBD_LL_Init>
 800819a:	4603      	mov	r3, r0
 800819c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800819e:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3718      	adds	r7, #24
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d101      	bne.n	80081c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80081bc:	2303      	movs	r3, #3
 80081be:	e025      	b.n	800820c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	32ae      	adds	r2, #174	@ 0xae
 80081d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00f      	beq.n	80081fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	32ae      	adds	r2, #174	@ 0xae
 80081e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ec:	f107 020e 	add.w	r2, r7, #14
 80081f0:	4610      	mov	r0, r2
 80081f2:	4798      	blx	r3
 80081f4:	4602      	mov	r2, r0
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008202:	1c5a      	adds	r2, r3, #1
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f001 fdfd 	bl	8009e1c <USBD_LL_Start>
 8008222:	4603      	mov	r3, r0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008234:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008236:	4618      	mov	r0, r3
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b084      	sub	sp, #16
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	460b      	mov	r3, r1
 800824c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008258:	2b00      	cmp	r3, #0
 800825a:	d009      	beq.n	8008270 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	78fa      	ldrb	r2, [r7, #3]
 8008266:	4611      	mov	r1, r2
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	4798      	blx	r3
 800826c:	4603      	mov	r3, r0
 800826e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	460b      	mov	r3, r1
 8008284:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	78fa      	ldrb	r2, [r7, #3]
 8008294:	4611      	mov	r1, r2
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	4798      	blx	r3
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80082a0:	2303      	movs	r3, #3
 80082a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b084      	sub	sp, #16
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	4618      	mov	r0, r3
 80082c2:	f001 f90c 	bl	80094de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80082d4:	461a      	mov	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80082e2:	f003 031f 	and.w	r3, r3, #31
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d01a      	beq.n	8008320 <USBD_LL_SetupStage+0x72>
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d822      	bhi.n	8008334 <USBD_LL_SetupStage+0x86>
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <USBD_LL_SetupStage+0x4a>
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d00a      	beq.n	800830c <USBD_LL_SetupStage+0x5e>
 80082f6:	e01d      	b.n	8008334 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082fe:	4619      	mov	r1, r3
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fb63 	bl	80089cc <USBD_StdDevReq>
 8008306:	4603      	mov	r3, r0
 8008308:	73fb      	strb	r3, [r7, #15]
      break;
 800830a:	e020      	b.n	800834e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fbcb 	bl	8008ab0 <USBD_StdItfReq>
 800831a:	4603      	mov	r3, r0
 800831c:	73fb      	strb	r3, [r7, #15]
      break;
 800831e:	e016      	b.n	800834e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fc2d 	bl	8008b88 <USBD_StdEPReq>
 800832e:	4603      	mov	r3, r0
 8008330:	73fb      	strb	r3, [r7, #15]
      break;
 8008332:	e00c      	b.n	800834e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800833a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800833e:	b2db      	uxtb	r3, r3
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f001 fdca 	bl	8009edc <USBD_LL_StallEP>
 8008348:	4603      	mov	r3, r0
 800834a:	73fb      	strb	r3, [r7, #15]
      break;
 800834c:	bf00      	nop
  }

  return ret;
 800834e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	460b      	mov	r3, r1
 8008362:	607a      	str	r2, [r7, #4]
 8008364:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800836a:	7afb      	ldrb	r3, [r7, #11]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d16e      	bne.n	800844e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008376:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800837e:	2b03      	cmp	r3, #3
 8008380:	f040 8098 	bne.w	80084b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	689a      	ldr	r2, [r3, #8]
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	429a      	cmp	r2, r3
 800838e:	d913      	bls.n	80083b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	1ad2      	subs	r2, r2, r3
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	4293      	cmp	r3, r2
 80083a8:	bf28      	it	cs
 80083aa:	4613      	movcs	r3, r2
 80083ac:	461a      	mov	r2, r3
 80083ae:	6879      	ldr	r1, [r7, #4]
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f001 f994 	bl	80096de <USBD_CtlContinueRx>
 80083b6:	e07d      	b.n	80084b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80083be:	f003 031f 	and.w	r3, r3, #31
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d014      	beq.n	80083f0 <USBD_LL_DataOutStage+0x98>
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d81d      	bhi.n	8008406 <USBD_LL_DataOutStage+0xae>
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d002      	beq.n	80083d4 <USBD_LL_DataOutStage+0x7c>
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d003      	beq.n	80083da <USBD_LL_DataOutStage+0x82>
 80083d2:	e018      	b.n	8008406 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	75bb      	strb	r3, [r7, #22]
            break;
 80083d8:	e018      	b.n	800840c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	4619      	mov	r1, r3
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f000 fa64 	bl	80088b2 <USBD_CoreFindIF>
 80083ea:	4603      	mov	r3, r0
 80083ec:	75bb      	strb	r3, [r7, #22]
            break;
 80083ee:	e00d      	b.n	800840c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	4619      	mov	r1, r3
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f000 fa66 	bl	80088cc <USBD_CoreFindEP>
 8008400:	4603      	mov	r3, r0
 8008402:	75bb      	strb	r3, [r7, #22]
            break;
 8008404:	e002      	b.n	800840c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	75bb      	strb	r3, [r7, #22]
            break;
 800840a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800840c:	7dbb      	ldrb	r3, [r7, #22]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d119      	bne.n	8008446 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b03      	cmp	r3, #3
 800841c:	d113      	bne.n	8008446 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800841e:	7dba      	ldrb	r2, [r7, #22]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	32ae      	adds	r2, #174	@ 0xae
 8008424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00b      	beq.n	8008446 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800842e:	7dba      	ldrb	r2, [r7, #22]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008436:	7dba      	ldrb	r2, [r7, #22]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	32ae      	adds	r2, #174	@ 0xae
 800843c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f001 f95a 	bl	8009700 <USBD_CtlSendStatus>
 800844c:	e032      	b.n	80084b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800844e:	7afb      	ldrb	r3, [r7, #11]
 8008450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008454:	b2db      	uxtb	r3, r3
 8008456:	4619      	mov	r1, r3
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f000 fa37 	bl	80088cc <USBD_CoreFindEP>
 800845e:	4603      	mov	r3, r0
 8008460:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008462:	7dbb      	ldrb	r3, [r7, #22]
 8008464:	2bff      	cmp	r3, #255	@ 0xff
 8008466:	d025      	beq.n	80084b4 <USBD_LL_DataOutStage+0x15c>
 8008468:	7dbb      	ldrb	r3, [r7, #22]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d122      	bne.n	80084b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b03      	cmp	r3, #3
 8008478:	d117      	bne.n	80084aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800847a:	7dba      	ldrb	r2, [r7, #22]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	32ae      	adds	r2, #174	@ 0xae
 8008480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00f      	beq.n	80084aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800848a:	7dba      	ldrb	r2, [r7, #22]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008492:	7dba      	ldrb	r2, [r7, #22]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	32ae      	adds	r2, #174	@ 0xae
 8008498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	7afa      	ldrb	r2, [r7, #11]
 80084a0:	4611      	mov	r1, r2
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	4798      	blx	r3
 80084a6:	4603      	mov	r3, r0
 80084a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80084aa:	7dfb      	ldrb	r3, [r7, #23]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d001      	beq.n	80084b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80084b0:	7dfb      	ldrb	r3, [r7, #23]
 80084b2:	e000      	b.n	80084b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3718      	adds	r7, #24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b086      	sub	sp, #24
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	60f8      	str	r0, [r7, #12]
 80084c6:	460b      	mov	r3, r1
 80084c8:	607a      	str	r2, [r7, #4]
 80084ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80084cc:	7afb      	ldrb	r3, [r7, #11]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d16f      	bne.n	80085b2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	3314      	adds	r3, #20
 80084d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d15a      	bne.n	8008598 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	689a      	ldr	r2, [r3, #8]
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d914      	bls.n	8008518 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	689a      	ldr	r2, [r3, #8]
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	1ad2      	subs	r2, r2, r3
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	461a      	mov	r2, r3
 8008502:	6879      	ldr	r1, [r7, #4]
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f001 f8bc 	bl	8009682 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800850a:	2300      	movs	r3, #0
 800850c:	2200      	movs	r2, #0
 800850e:	2100      	movs	r1, #0
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f001 fd8d 	bl	800a030 <USBD_LL_PrepareReceive>
 8008516:	e03f      	b.n	8008598 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	68da      	ldr	r2, [r3, #12]
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	429a      	cmp	r2, r3
 8008522:	d11c      	bne.n	800855e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800852c:	429a      	cmp	r2, r3
 800852e:	d316      	bcc.n	800855e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	685a      	ldr	r2, [r3, #4]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800853a:	429a      	cmp	r2, r3
 800853c:	d20f      	bcs.n	800855e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800853e:	2200      	movs	r2, #0
 8008540:	2100      	movs	r1, #0
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f001 f89d 	bl	8009682 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008550:	2300      	movs	r3, #0
 8008552:	2200      	movs	r2, #0
 8008554:	2100      	movs	r1, #0
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f001 fd6a 	bl	800a030 <USBD_LL_PrepareReceive>
 800855c:	e01c      	b.n	8008598 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b03      	cmp	r3, #3
 8008568:	d10f      	bne.n	800858a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d009      	beq.n	800858a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800858a:	2180      	movs	r1, #128	@ 0x80
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f001 fca5 	bl	8009edc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f001 f8c7 	bl	8009726 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d03a      	beq.n	8008618 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f7ff fe42 	bl	800822c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80085b0:	e032      	b.n	8008618 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80085b2:	7afb      	ldrb	r3, [r7, #11]
 80085b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	4619      	mov	r1, r3
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f000 f985 	bl	80088cc <USBD_CoreFindEP>
 80085c2:	4603      	mov	r3, r0
 80085c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085c6:	7dfb      	ldrb	r3, [r7, #23]
 80085c8:	2bff      	cmp	r3, #255	@ 0xff
 80085ca:	d025      	beq.n	8008618 <USBD_LL_DataInStage+0x15a>
 80085cc:	7dfb      	ldrb	r3, [r7, #23]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d122      	bne.n	8008618 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d11c      	bne.n	8008618 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80085de:	7dfa      	ldrb	r2, [r7, #23]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	32ae      	adds	r2, #174	@ 0xae
 80085e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d014      	beq.n	8008618 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80085ee:	7dfa      	ldrb	r2, [r7, #23]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80085f6:	7dfa      	ldrb	r2, [r7, #23]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	32ae      	adds	r2, #174	@ 0xae
 80085fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	7afa      	ldrb	r2, [r7, #11]
 8008604:	4611      	mov	r1, r2
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	4798      	blx	r3
 800860a:	4603      	mov	r3, r0
 800860c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800860e:	7dbb      	ldrb	r3, [r7, #22]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008614:	7dbb      	ldrb	r3, [r7, #22]
 8008616:	e000      	b.n	800861a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3718      	adds	r7, #24
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b084      	sub	sp, #16
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800865a:	2b00      	cmp	r3, #0
 800865c:	d014      	beq.n	8008688 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00e      	beq.n	8008688 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	6852      	ldr	r2, [r2, #4]
 8008676:	b2d2      	uxtb	r2, r2
 8008678:	4611      	mov	r1, r2
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	4798      	blx	r3
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d001      	beq.n	8008688 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008684:	2303      	movs	r3, #3
 8008686:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008688:	2340      	movs	r3, #64	@ 0x40
 800868a:	2200      	movs	r2, #0
 800868c:	2100      	movs	r1, #0
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f001 fbdf 	bl	8009e52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2240      	movs	r2, #64	@ 0x40
 80086a0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086a4:	2340      	movs	r3, #64	@ 0x40
 80086a6:	2200      	movs	r2, #0
 80086a8:	2180      	movs	r1, #128	@ 0x80
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f001 fbd1 	bl	8009e52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2240      	movs	r2, #64	@ 0x40
 80086ba:	621a      	str	r2, [r3, #32]

  return ret;
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b083      	sub	sp, #12
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	460b      	mov	r3, r1
 80086d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	78fa      	ldrb	r2, [r7, #3]
 80086d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b083      	sub	sp, #12
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b04      	cmp	r3, #4
 80086f8:	d006      	beq.n	8008708 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008700:	b2da      	uxtb	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2204      	movs	r2, #4
 800870c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800871e:	b480      	push	{r7}
 8008720:	b083      	sub	sp, #12
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b04      	cmp	r3, #4
 8008730:	d106      	bne.n	8008740 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008738:	b2da      	uxtb	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b082      	sub	sp, #8
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b03      	cmp	r3, #3
 8008760:	d110      	bne.n	8008784 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00b      	beq.n	8008784 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008772:	69db      	ldr	r3, [r3, #28]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d005      	beq.n	8008784 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	460b      	mov	r3, r1
 8008798:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	32ae      	adds	r2, #174	@ 0xae
 80087a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d101      	bne.n	80087b0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e01c      	b.n	80087ea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b03      	cmp	r3, #3
 80087ba:	d115      	bne.n	80087e8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	32ae      	adds	r2, #174	@ 0xae
 80087c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ca:	6a1b      	ldr	r3, [r3, #32]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00b      	beq.n	80087e8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	32ae      	adds	r2, #174	@ 0xae
 80087da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	78fa      	ldrb	r2, [r7, #3]
 80087e2:	4611      	mov	r1, r2
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b082      	sub	sp, #8
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	460b      	mov	r3, r1
 80087fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	32ae      	adds	r2, #174	@ 0xae
 8008808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d101      	bne.n	8008814 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008810:	2303      	movs	r3, #3
 8008812:	e01c      	b.n	800884e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b03      	cmp	r3, #3
 800881e:	d115      	bne.n	800884c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	32ae      	adds	r2, #174	@ 0xae
 800882a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800882e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00b      	beq.n	800884c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	32ae      	adds	r2, #174	@ 0xae
 800883e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008844:	78fa      	ldrb	r2, [r7, #3]
 8008846:	4611      	mov	r1, r2
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008856:	b480      	push	{r7}
 8008858:	b083      	sub	sp, #12
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00e      	beq.n	80088a8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	6852      	ldr	r2, [r2, #4]
 8008896:	b2d2      	uxtb	r2, r2
 8008898:	4611      	mov	r1, r2
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	4798      	blx	r3
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80088a4:	2303      	movs	r3, #3
 80088a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b083      	sub	sp, #12
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
 80088ba:	460b      	mov	r3, r1
 80088bc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80088be:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80088d8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80088da:	4618      	mov	r0, r3
 80088dc:	370c      	adds	r7, #12
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b086      	sub	sp, #24
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	460b      	mov	r3, r1
 80088f0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80088fa:	2300      	movs	r3, #0
 80088fc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	885b      	ldrh	r3, [r3, #2]
 8008902:	b29b      	uxth	r3, r3
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	7812      	ldrb	r2, [r2, #0]
 8008908:	4293      	cmp	r3, r2
 800890a:	d91f      	bls.n	800894c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008912:	e013      	b.n	800893c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008914:	f107 030a 	add.w	r3, r7, #10
 8008918:	4619      	mov	r1, r3
 800891a:	6978      	ldr	r0, [r7, #20]
 800891c:	f000 f81b 	bl	8008956 <USBD_GetNextDesc>
 8008920:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	785b      	ldrb	r3, [r3, #1]
 8008926:	2b05      	cmp	r3, #5
 8008928:	d108      	bne.n	800893c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	789b      	ldrb	r3, [r3, #2]
 8008932:	78fa      	ldrb	r2, [r7, #3]
 8008934:	429a      	cmp	r2, r3
 8008936:	d008      	beq.n	800894a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008938:	2300      	movs	r3, #0
 800893a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	885b      	ldrh	r3, [r3, #2]
 8008940:	b29a      	uxth	r2, r3
 8008942:	897b      	ldrh	r3, [r7, #10]
 8008944:	429a      	cmp	r2, r3
 8008946:	d8e5      	bhi.n	8008914 <USBD_GetEpDesc+0x2e>
 8008948:	e000      	b.n	800894c <USBD_GetEpDesc+0x66>
          break;
 800894a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800894c:	693b      	ldr	r3, [r7, #16]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3718      	adds	r7, #24
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008956:	b480      	push	{r7}
 8008958:	b085      	sub	sp, #20
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	68fa      	ldr	r2, [r7, #12]
 800896a:	7812      	ldrb	r2, [r2, #0]
 800896c:	4413      	add	r3, r2
 800896e:	b29a      	uxth	r2, r3
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	461a      	mov	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4413      	add	r3, r2
 800897e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008980:	68fb      	ldr	r3, [r7, #12]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3714      	adds	r7, #20
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800898e:	b480      	push	{r7}
 8008990:	b087      	sub	sp, #28
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	3301      	adds	r3, #1
 80089a4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80089ac:	8a3b      	ldrh	r3, [r7, #16]
 80089ae:	021b      	lsls	r3, r3, #8
 80089b0:	b21a      	sxth	r2, r3
 80089b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	b21b      	sxth	r3, r3
 80089ba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80089bc:	89fb      	ldrh	r3, [r7, #14]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	371c      	adds	r7, #28
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
	...

080089cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089e2:	2b40      	cmp	r3, #64	@ 0x40
 80089e4:	d005      	beq.n	80089f2 <USBD_StdDevReq+0x26>
 80089e6:	2b40      	cmp	r3, #64	@ 0x40
 80089e8:	d857      	bhi.n	8008a9a <USBD_StdDevReq+0xce>
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00f      	beq.n	8008a0e <USBD_StdDevReq+0x42>
 80089ee:	2b20      	cmp	r3, #32
 80089f0:	d153      	bne.n	8008a9a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	32ae      	adds	r2, #174	@ 0xae
 80089fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	4798      	blx	r3
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a0c:	e04a      	b.n	8008aa4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	785b      	ldrb	r3, [r3, #1]
 8008a12:	2b09      	cmp	r3, #9
 8008a14:	d83b      	bhi.n	8008a8e <USBD_StdDevReq+0xc2>
 8008a16:	a201      	add	r2, pc, #4	@ (adr r2, 8008a1c <USBD_StdDevReq+0x50>)
 8008a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1c:	08008a71 	.word	0x08008a71
 8008a20:	08008a85 	.word	0x08008a85
 8008a24:	08008a8f 	.word	0x08008a8f
 8008a28:	08008a7b 	.word	0x08008a7b
 8008a2c:	08008a8f 	.word	0x08008a8f
 8008a30:	08008a4f 	.word	0x08008a4f
 8008a34:	08008a45 	.word	0x08008a45
 8008a38:	08008a8f 	.word	0x08008a8f
 8008a3c:	08008a67 	.word	0x08008a67
 8008a40:	08008a59 	.word	0x08008a59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fa3c 	bl	8008ec4 <USBD_GetDescriptor>
          break;
 8008a4c:	e024      	b.n	8008a98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 fba1 	bl	8009198 <USBD_SetAddress>
          break;
 8008a56:	e01f      	b.n	8008a98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fbe0 	bl	8009220 <USBD_SetConfig>
 8008a60:	4603      	mov	r3, r0
 8008a62:	73fb      	strb	r3, [r7, #15]
          break;
 8008a64:	e018      	b.n	8008a98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fc83 	bl	8009374 <USBD_GetConfig>
          break;
 8008a6e:	e013      	b.n	8008a98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fcb4 	bl	80093e0 <USBD_GetStatus>
          break;
 8008a78:	e00e      	b.n	8008a98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fce3 	bl	8009448 <USBD_SetFeature>
          break;
 8008a82:	e009      	b.n	8008a98 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fd07 	bl	800949a <USBD_ClrFeature>
          break;
 8008a8c:	e004      	b.n	8008a98 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fd5e 	bl	8009552 <USBD_CtlError>
          break;
 8008a96:	bf00      	nop
      }
      break;
 8008a98:	e004      	b.n	8008aa4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fd58 	bl	8009552 <USBD_CtlError>
      break;
 8008aa2:	bf00      	nop
  }

  return ret;
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop

08008ab0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ac6:	2b40      	cmp	r3, #64	@ 0x40
 8008ac8:	d005      	beq.n	8008ad6 <USBD_StdItfReq+0x26>
 8008aca:	2b40      	cmp	r3, #64	@ 0x40
 8008acc:	d852      	bhi.n	8008b74 <USBD_StdItfReq+0xc4>
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <USBD_StdItfReq+0x26>
 8008ad2:	2b20      	cmp	r3, #32
 8008ad4:	d14e      	bne.n	8008b74 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d840      	bhi.n	8008b66 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	889b      	ldrh	r3, [r3, #4]
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d836      	bhi.n	8008b5c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	889b      	ldrh	r3, [r3, #4]
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7ff fedb 	bl	80088b2 <USBD_CoreFindIF>
 8008afc:	4603      	mov	r3, r0
 8008afe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
 8008b02:	2bff      	cmp	r3, #255	@ 0xff
 8008b04:	d01d      	beq.n	8008b42 <USBD_StdItfReq+0x92>
 8008b06:	7bbb      	ldrb	r3, [r7, #14]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d11a      	bne.n	8008b42 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008b0c:	7bba      	ldrb	r2, [r7, #14]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	32ae      	adds	r2, #174	@ 0xae
 8008b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00f      	beq.n	8008b3c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008b1c:	7bba      	ldrb	r2, [r7, #14]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008b24:	7bba      	ldrb	r2, [r7, #14]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	32ae      	adds	r2, #174	@ 0xae
 8008b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	4798      	blx	r3
 8008b36:	4603      	mov	r3, r0
 8008b38:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b3a:	e004      	b.n	8008b46 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b40:	e001      	b.n	8008b46 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008b42:	2303      	movs	r3, #3
 8008b44:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	88db      	ldrh	r3, [r3, #6]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d110      	bne.n	8008b70 <USBD_StdItfReq+0xc0>
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10d      	bne.n	8008b70 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fdd3 	bl	8009700 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b5a:	e009      	b.n	8008b70 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 fcf7 	bl	8009552 <USBD_CtlError>
          break;
 8008b64:	e004      	b.n	8008b70 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fcf2 	bl	8009552 <USBD_CtlError>
          break;
 8008b6e:	e000      	b.n	8008b72 <USBD_StdItfReq+0xc2>
          break;
 8008b70:	bf00      	nop
      }
      break;
 8008b72:	e004      	b.n	8008b7e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fceb 	bl	8009552 <USBD_CtlError>
      break;
 8008b7c:	bf00      	nop
  }

  return ret;
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	889b      	ldrh	r3, [r3, #4]
 8008b9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ba4:	2b40      	cmp	r3, #64	@ 0x40
 8008ba6:	d007      	beq.n	8008bb8 <USBD_StdEPReq+0x30>
 8008ba8:	2b40      	cmp	r3, #64	@ 0x40
 8008baa:	f200 817f 	bhi.w	8008eac <USBD_StdEPReq+0x324>
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d02a      	beq.n	8008c08 <USBD_StdEPReq+0x80>
 8008bb2:	2b20      	cmp	r3, #32
 8008bb4:	f040 817a 	bne.w	8008eac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008bb8:	7bbb      	ldrb	r3, [r7, #14]
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7ff fe85 	bl	80088cc <USBD_CoreFindEP>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bc6:	7b7b      	ldrb	r3, [r7, #13]
 8008bc8:	2bff      	cmp	r3, #255	@ 0xff
 8008bca:	f000 8174 	beq.w	8008eb6 <USBD_StdEPReq+0x32e>
 8008bce:	7b7b      	ldrb	r3, [r7, #13]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f040 8170 	bne.w	8008eb6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008bd6:	7b7a      	ldrb	r2, [r7, #13]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008bde:	7b7a      	ldrb	r2, [r7, #13]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	32ae      	adds	r2, #174	@ 0xae
 8008be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f000 8163 	beq.w	8008eb6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008bf0:	7b7a      	ldrb	r2, [r7, #13]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	32ae      	adds	r2, #174	@ 0xae
 8008bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	4798      	blx	r3
 8008c02:	4603      	mov	r3, r0
 8008c04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c06:	e156      	b.n	8008eb6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	785b      	ldrb	r3, [r3, #1]
 8008c0c:	2b03      	cmp	r3, #3
 8008c0e:	d008      	beq.n	8008c22 <USBD_StdEPReq+0x9a>
 8008c10:	2b03      	cmp	r3, #3
 8008c12:	f300 8145 	bgt.w	8008ea0 <USBD_StdEPReq+0x318>
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 809b 	beq.w	8008d52 <USBD_StdEPReq+0x1ca>
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d03c      	beq.n	8008c9a <USBD_StdEPReq+0x112>
 8008c20:	e13e      	b.n	8008ea0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d002      	beq.n	8008c34 <USBD_StdEPReq+0xac>
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d016      	beq.n	8008c60 <USBD_StdEPReq+0xd8>
 8008c32:	e02c      	b.n	8008c8e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00d      	beq.n	8008c56 <USBD_StdEPReq+0xce>
 8008c3a:	7bbb      	ldrb	r3, [r7, #14]
 8008c3c:	2b80      	cmp	r3, #128	@ 0x80
 8008c3e:	d00a      	beq.n	8008c56 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c40:	7bbb      	ldrb	r3, [r7, #14]
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f001 f949 	bl	8009edc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c4a:	2180      	movs	r1, #128	@ 0x80
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f001 f945 	bl	8009edc <USBD_LL_StallEP>
 8008c52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c54:	e020      	b.n	8008c98 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008c56:	6839      	ldr	r1, [r7, #0]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fc7a 	bl	8009552 <USBD_CtlError>
              break;
 8008c5e:	e01b      	b.n	8008c98 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	885b      	ldrh	r3, [r3, #2]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10e      	bne.n	8008c86 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00b      	beq.n	8008c86 <USBD_StdEPReq+0xfe>
 8008c6e:	7bbb      	ldrb	r3, [r7, #14]
 8008c70:	2b80      	cmp	r3, #128	@ 0x80
 8008c72:	d008      	beq.n	8008c86 <USBD_StdEPReq+0xfe>
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	88db      	ldrh	r3, [r3, #6]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d104      	bne.n	8008c86 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f001 f92b 	bl	8009edc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fd3a 	bl	8009700 <USBD_CtlSendStatus>

              break;
 8008c8c:	e004      	b.n	8008c98 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fc5e 	bl	8009552 <USBD_CtlError>
              break;
 8008c96:	bf00      	nop
          }
          break;
 8008c98:	e107      	b.n	8008eaa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d002      	beq.n	8008cac <USBD_StdEPReq+0x124>
 8008ca6:	2b03      	cmp	r3, #3
 8008ca8:	d016      	beq.n	8008cd8 <USBD_StdEPReq+0x150>
 8008caa:	e04b      	b.n	8008d44 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cac:	7bbb      	ldrb	r3, [r7, #14]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00d      	beq.n	8008cce <USBD_StdEPReq+0x146>
 8008cb2:	7bbb      	ldrb	r3, [r7, #14]
 8008cb4:	2b80      	cmp	r3, #128	@ 0x80
 8008cb6:	d00a      	beq.n	8008cce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cb8:	7bbb      	ldrb	r3, [r7, #14]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f001 f90d 	bl	8009edc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cc2:	2180      	movs	r1, #128	@ 0x80
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f001 f909 	bl	8009edc <USBD_LL_StallEP>
 8008cca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ccc:	e040      	b.n	8008d50 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fc3e 	bl	8009552 <USBD_CtlError>
              break;
 8008cd6:	e03b      	b.n	8008d50 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	885b      	ldrh	r3, [r3, #2]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d136      	bne.n	8008d4e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
 8008ce2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d004      	beq.n	8008cf4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f001 f913 	bl	8009f1a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fd03 	bl	8009700 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7ff fde4 	bl	80088cc <USBD_CoreFindEP>
 8008d04:	4603      	mov	r3, r0
 8008d06:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d08:	7b7b      	ldrb	r3, [r7, #13]
 8008d0a:	2bff      	cmp	r3, #255	@ 0xff
 8008d0c:	d01f      	beq.n	8008d4e <USBD_StdEPReq+0x1c6>
 8008d0e:	7b7b      	ldrb	r3, [r7, #13]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d11c      	bne.n	8008d4e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008d14:	7b7a      	ldrb	r2, [r7, #13]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008d1c:	7b7a      	ldrb	r2, [r7, #13]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	32ae      	adds	r2, #174	@ 0xae
 8008d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d010      	beq.n	8008d4e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d2c:	7b7a      	ldrb	r2, [r7, #13]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	32ae      	adds	r2, #174	@ 0xae
 8008d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	6839      	ldr	r1, [r7, #0]
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	4798      	blx	r3
 8008d3e:	4603      	mov	r3, r0
 8008d40:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008d42:	e004      	b.n	8008d4e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fc03 	bl	8009552 <USBD_CtlError>
              break;
 8008d4c:	e000      	b.n	8008d50 <USBD_StdEPReq+0x1c8>
              break;
 8008d4e:	bf00      	nop
          }
          break;
 8008d50:	e0ab      	b.n	8008eaa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d002      	beq.n	8008d64 <USBD_StdEPReq+0x1dc>
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	d032      	beq.n	8008dc8 <USBD_StdEPReq+0x240>
 8008d62:	e097      	b.n	8008e94 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d007      	beq.n	8008d7a <USBD_StdEPReq+0x1f2>
 8008d6a:	7bbb      	ldrb	r3, [r7, #14]
 8008d6c:	2b80      	cmp	r3, #128	@ 0x80
 8008d6e:	d004      	beq.n	8008d7a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fbed 	bl	8009552 <USBD_CtlError>
                break;
 8008d78:	e091      	b.n	8008e9e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	da0b      	bge.n	8008d9a <USBD_StdEPReq+0x212>
 8008d82:	7bbb      	ldrb	r3, [r7, #14]
 8008d84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d88:	4613      	mov	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4413      	add	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	3310      	adds	r3, #16
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	4413      	add	r3, r2
 8008d96:	3304      	adds	r3, #4
 8008d98:	e00b      	b.n	8008db2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
 8008d9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008da0:	4613      	mov	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	4413      	add	r3, r2
 8008db0:	3304      	adds	r3, #4
 8008db2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2200      	movs	r2, #0
 8008db8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fc43 	bl	800964c <USBD_CtlSendData>
              break;
 8008dc6:	e06a      	b.n	8008e9e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008dc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	da11      	bge.n	8008df4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
 8008dd2:	f003 020f 	and.w	r2, r3, #15
 8008dd6:	6879      	ldr	r1, [r7, #4]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4413      	add	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	440b      	add	r3, r1
 8008de2:	3324      	adds	r3, #36	@ 0x24
 8008de4:	881b      	ldrh	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d117      	bne.n	8008e1a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 fbb0 	bl	8009552 <USBD_CtlError>
                  break;
 8008df2:	e054      	b.n	8008e9e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008df4:	7bbb      	ldrb	r3, [r7, #14]
 8008df6:	f003 020f 	and.w	r2, r3, #15
 8008dfa:	6879      	ldr	r1, [r7, #4]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4413      	add	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	440b      	add	r3, r1
 8008e06:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008e0a:	881b      	ldrh	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d104      	bne.n	8008e1a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fb9d 	bl	8009552 <USBD_CtlError>
                  break;
 8008e18:	e041      	b.n	8008e9e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	da0b      	bge.n	8008e3a <USBD_StdEPReq+0x2b2>
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
 8008e24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	3310      	adds	r3, #16
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	4413      	add	r3, r2
 8008e36:	3304      	adds	r3, #4
 8008e38:	e00b      	b.n	8008e52 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e3a:	7bbb      	ldrb	r3, [r7, #14]
 8008e3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e40:	4613      	mov	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	4413      	add	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	4413      	add	r3, r2
 8008e50:	3304      	adds	r3, #4
 8008e52:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e54:	7bbb      	ldrb	r3, [r7, #14]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d002      	beq.n	8008e60 <USBD_StdEPReq+0x2d8>
 8008e5a:	7bbb      	ldrb	r3, [r7, #14]
 8008e5c:	2b80      	cmp	r3, #128	@ 0x80
 8008e5e:	d103      	bne.n	8008e68 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	e00e      	b.n	8008e86 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e68:	7bbb      	ldrb	r3, [r7, #14]
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f001 f873 	bl	8009f58 <USBD_LL_IsStallEP>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d003      	beq.n	8008e80 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	e002      	b.n	8008e86 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	2200      	movs	r2, #0
 8008e84:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	2202      	movs	r2, #2
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fbdd 	bl	800964c <USBD_CtlSendData>
              break;
 8008e92:	e004      	b.n	8008e9e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fb5b 	bl	8009552 <USBD_CtlError>
              break;
 8008e9c:	bf00      	nop
          }
          break;
 8008e9e:	e004      	b.n	8008eaa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008ea0:	6839      	ldr	r1, [r7, #0]
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fb55 	bl	8009552 <USBD_CtlError>
          break;
 8008ea8:	bf00      	nop
      }
      break;
 8008eaa:	e005      	b.n	8008eb8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fb4f 	bl	8009552 <USBD_CtlError>
      break;
 8008eb4:	e000      	b.n	8008eb8 <USBD_StdEPReq+0x330>
      break;
 8008eb6:	bf00      	nop
  }

  return ret;
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	885b      	ldrh	r3, [r3, #2]
 8008ede:	0a1b      	lsrs	r3, r3, #8
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	2b06      	cmp	r3, #6
 8008ee6:	f200 8128 	bhi.w	800913a <USBD_GetDescriptor+0x276>
 8008eea:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef0 <USBD_GetDescriptor+0x2c>)
 8008eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef0:	08008f0d 	.word	0x08008f0d
 8008ef4:	08008f25 	.word	0x08008f25
 8008ef8:	08008f65 	.word	0x08008f65
 8008efc:	0800913b 	.word	0x0800913b
 8008f00:	0800913b 	.word	0x0800913b
 8008f04:	080090db 	.word	0x080090db
 8008f08:	08009107 	.word	0x08009107
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	7c12      	ldrb	r2, [r2, #16]
 8008f18:	f107 0108 	add.w	r1, r7, #8
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	4798      	blx	r3
 8008f20:	60f8      	str	r0, [r7, #12]
      break;
 8008f22:	e112      	b.n	800914a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	7c1b      	ldrb	r3, [r3, #16]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10d      	bne.n	8008f48 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f34:	f107 0208 	add.w	r2, r7, #8
 8008f38:	4610      	mov	r0, r2
 8008f3a:	4798      	blx	r3
 8008f3c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	3301      	adds	r3, #1
 8008f42:	2202      	movs	r2, #2
 8008f44:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f46:	e100      	b.n	800914a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f50:	f107 0208 	add.w	r2, r7, #8
 8008f54:	4610      	mov	r0, r2
 8008f56:	4798      	blx	r3
 8008f58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	2202      	movs	r2, #2
 8008f60:	701a      	strb	r2, [r3, #0]
      break;
 8008f62:	e0f2      	b.n	800914a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	885b      	ldrh	r3, [r3, #2]
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b05      	cmp	r3, #5
 8008f6c:	f200 80ac 	bhi.w	80090c8 <USBD_GetDescriptor+0x204>
 8008f70:	a201      	add	r2, pc, #4	@ (adr r2, 8008f78 <USBD_GetDescriptor+0xb4>)
 8008f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f76:	bf00      	nop
 8008f78:	08008f91 	.word	0x08008f91
 8008f7c:	08008fc5 	.word	0x08008fc5
 8008f80:	08008ff9 	.word	0x08008ff9
 8008f84:	0800902d 	.word	0x0800902d
 8008f88:	08009061 	.word	0x08009061
 8008f8c:	08009095 	.word	0x08009095
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00b      	beq.n	8008fb4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	7c12      	ldrb	r2, [r2, #16]
 8008fa8:	f107 0108 	add.w	r1, r7, #8
 8008fac:	4610      	mov	r0, r2
 8008fae:	4798      	blx	r3
 8008fb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fb2:	e091      	b.n	80090d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 facb 	bl	8009552 <USBD_CtlError>
            err++;
 8008fbc:	7afb      	ldrb	r3, [r7, #11]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	72fb      	strb	r3, [r7, #11]
          break;
 8008fc2:	e089      	b.n	80090d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00b      	beq.n	8008fe8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	7c12      	ldrb	r2, [r2, #16]
 8008fdc:	f107 0108 	add.w	r1, r7, #8
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	4798      	blx	r3
 8008fe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fe6:	e077      	b.n	80090d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fe8:	6839      	ldr	r1, [r7, #0]
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fab1 	bl	8009552 <USBD_CtlError>
            err++;
 8008ff0:	7afb      	ldrb	r3, [r7, #11]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ff6:	e06f      	b.n	80090d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00b      	beq.n	800901c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	7c12      	ldrb	r2, [r2, #16]
 8009010:	f107 0108 	add.w	r1, r7, #8
 8009014:	4610      	mov	r0, r2
 8009016:	4798      	blx	r3
 8009018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800901a:	e05d      	b.n	80090d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fa97 	bl	8009552 <USBD_CtlError>
            err++;
 8009024:	7afb      	ldrb	r3, [r7, #11]
 8009026:	3301      	adds	r3, #1
 8009028:	72fb      	strb	r3, [r7, #11]
          break;
 800902a:	e055      	b.n	80090d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00b      	beq.n	8009050 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	7c12      	ldrb	r2, [r2, #16]
 8009044:	f107 0108 	add.w	r1, r7, #8
 8009048:	4610      	mov	r0, r2
 800904a:	4798      	blx	r3
 800904c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800904e:	e043      	b.n	80090d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fa7d 	bl	8009552 <USBD_CtlError>
            err++;
 8009058:	7afb      	ldrb	r3, [r7, #11]
 800905a:	3301      	adds	r3, #1
 800905c:	72fb      	strb	r3, [r7, #11]
          break;
 800905e:	e03b      	b.n	80090d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00b      	beq.n	8009084 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009072:	695b      	ldr	r3, [r3, #20]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	7c12      	ldrb	r2, [r2, #16]
 8009078:	f107 0108 	add.w	r1, r7, #8
 800907c:	4610      	mov	r0, r2
 800907e:	4798      	blx	r3
 8009080:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009082:	e029      	b.n	80090d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fa63 	bl	8009552 <USBD_CtlError>
            err++;
 800908c:	7afb      	ldrb	r3, [r7, #11]
 800908e:	3301      	adds	r3, #1
 8009090:	72fb      	strb	r3, [r7, #11]
          break;
 8009092:	e021      	b.n	80090d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00b      	beq.n	80090b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	7c12      	ldrb	r2, [r2, #16]
 80090ac:	f107 0108 	add.w	r1, r7, #8
 80090b0:	4610      	mov	r0, r2
 80090b2:	4798      	blx	r3
 80090b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090b6:	e00f      	b.n	80090d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fa49 	bl	8009552 <USBD_CtlError>
            err++;
 80090c0:	7afb      	ldrb	r3, [r7, #11]
 80090c2:	3301      	adds	r3, #1
 80090c4:	72fb      	strb	r3, [r7, #11]
          break;
 80090c6:	e007      	b.n	80090d8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80090c8:	6839      	ldr	r1, [r7, #0]
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fa41 	bl	8009552 <USBD_CtlError>
          err++;
 80090d0:	7afb      	ldrb	r3, [r7, #11]
 80090d2:	3301      	adds	r3, #1
 80090d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80090d6:	bf00      	nop
      }
      break;
 80090d8:	e037      	b.n	800914a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	7c1b      	ldrb	r3, [r3, #16]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d109      	bne.n	80090f6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ea:	f107 0208 	add.w	r2, r7, #8
 80090ee:	4610      	mov	r0, r2
 80090f0:	4798      	blx	r3
 80090f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090f4:	e029      	b.n	800914a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fa2a 	bl	8009552 <USBD_CtlError>
        err++;
 80090fe:	7afb      	ldrb	r3, [r7, #11]
 8009100:	3301      	adds	r3, #1
 8009102:	72fb      	strb	r3, [r7, #11]
      break;
 8009104:	e021      	b.n	800914a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	7c1b      	ldrb	r3, [r3, #16]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d10d      	bne.n	800912a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009116:	f107 0208 	add.w	r2, r7, #8
 800911a:	4610      	mov	r0, r2
 800911c:	4798      	blx	r3
 800911e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	3301      	adds	r3, #1
 8009124:	2207      	movs	r2, #7
 8009126:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009128:	e00f      	b.n	800914a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fa10 	bl	8009552 <USBD_CtlError>
        err++;
 8009132:	7afb      	ldrb	r3, [r7, #11]
 8009134:	3301      	adds	r3, #1
 8009136:	72fb      	strb	r3, [r7, #11]
      break;
 8009138:	e007      	b.n	800914a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fa08 	bl	8009552 <USBD_CtlError>
      err++;
 8009142:	7afb      	ldrb	r3, [r7, #11]
 8009144:	3301      	adds	r3, #1
 8009146:	72fb      	strb	r3, [r7, #11]
      break;
 8009148:	bf00      	nop
  }

  if (err != 0U)
 800914a:	7afb      	ldrb	r3, [r7, #11]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d11e      	bne.n	800918e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	88db      	ldrh	r3, [r3, #6]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d016      	beq.n	8009186 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009158:	893b      	ldrh	r3, [r7, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00e      	beq.n	800917c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	88da      	ldrh	r2, [r3, #6]
 8009162:	893b      	ldrh	r3, [r7, #8]
 8009164:	4293      	cmp	r3, r2
 8009166:	bf28      	it	cs
 8009168:	4613      	movcs	r3, r2
 800916a:	b29b      	uxth	r3, r3
 800916c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800916e:	893b      	ldrh	r3, [r7, #8]
 8009170:	461a      	mov	r2, r3
 8009172:	68f9      	ldr	r1, [r7, #12]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fa69 	bl	800964c <USBD_CtlSendData>
 800917a:	e009      	b.n	8009190 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f9e7 	bl	8009552 <USBD_CtlError>
 8009184:	e004      	b.n	8009190 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 faba 	bl	8009700 <USBD_CtlSendStatus>
 800918c:	e000      	b.n	8009190 <USBD_GetDescriptor+0x2cc>
    return;
 800918e:	bf00      	nop
  }
}
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop

08009198 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	889b      	ldrh	r3, [r3, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d131      	bne.n	800920e <USBD_SetAddress+0x76>
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	88db      	ldrh	r3, [r3, #6]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d12d      	bne.n	800920e <USBD_SetAddress+0x76>
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	885b      	ldrh	r3, [r3, #2]
 80091b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80091b8:	d829      	bhi.n	800920e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	885b      	ldrh	r3, [r3, #2]
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	2b03      	cmp	r3, #3
 80091d0:	d104      	bne.n	80091dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 f9bc 	bl	8009552 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091da:	e01d      	b.n	8009218 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	7bfa      	ldrb	r2, [r7, #15]
 80091e0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
 80091e6:	4619      	mov	r1, r3
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fee1 	bl	8009fb0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fa86 	bl	8009700 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d004      	beq.n	8009204 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2202      	movs	r2, #2
 80091fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009202:	e009      	b.n	8009218 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800920c:	e004      	b.n	8009218 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f99e 	bl	8009552 <USBD_CtlError>
  }
}
 8009216:	bf00      	nop
 8009218:	bf00      	nop
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800922a:	2300      	movs	r3, #0
 800922c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	885b      	ldrh	r3, [r3, #2]
 8009232:	b2da      	uxtb	r2, r3
 8009234:	4b4e      	ldr	r3, [pc, #312]	@ (8009370 <USBD_SetConfig+0x150>)
 8009236:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009238:	4b4d      	ldr	r3, [pc, #308]	@ (8009370 <USBD_SetConfig+0x150>)
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d905      	bls.n	800924c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009240:	6839      	ldr	r1, [r7, #0]
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f985 	bl	8009552 <USBD_CtlError>
    return USBD_FAIL;
 8009248:	2303      	movs	r3, #3
 800924a:	e08c      	b.n	8009366 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b02      	cmp	r3, #2
 8009256:	d002      	beq.n	800925e <USBD_SetConfig+0x3e>
 8009258:	2b03      	cmp	r3, #3
 800925a:	d029      	beq.n	80092b0 <USBD_SetConfig+0x90>
 800925c:	e075      	b.n	800934a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800925e:	4b44      	ldr	r3, [pc, #272]	@ (8009370 <USBD_SetConfig+0x150>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d020      	beq.n	80092a8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009266:	4b42      	ldr	r3, [pc, #264]	@ (8009370 <USBD_SetConfig+0x150>)
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	461a      	mov	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009270:	4b3f      	ldr	r3, [pc, #252]	@ (8009370 <USBD_SetConfig+0x150>)
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	4619      	mov	r1, r3
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f7fe ffe3 	bl	8008242 <USBD_SetClassConfig>
 800927c:	4603      	mov	r3, r0
 800927e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009280:	7bfb      	ldrb	r3, [r7, #15]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d008      	beq.n	8009298 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f962 	bl	8009552 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2202      	movs	r2, #2
 8009292:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009296:	e065      	b.n	8009364 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 fa31 	bl	8009700 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2203      	movs	r2, #3
 80092a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80092a6:	e05d      	b.n	8009364 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fa29 	bl	8009700 <USBD_CtlSendStatus>
      break;
 80092ae:	e059      	b.n	8009364 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80092b0:	4b2f      	ldr	r3, [pc, #188]	@ (8009370 <USBD_SetConfig+0x150>)
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d112      	bne.n	80092de <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2202      	movs	r2, #2
 80092bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80092c0:	4b2b      	ldr	r3, [pc, #172]	@ (8009370 <USBD_SetConfig+0x150>)
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	461a      	mov	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092ca:	4b29      	ldr	r3, [pc, #164]	@ (8009370 <USBD_SetConfig+0x150>)
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7fe ffd2 	bl	800827a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fa12 	bl	8009700 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092dc:	e042      	b.n	8009364 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80092de:	4b24      	ldr	r3, [pc, #144]	@ (8009370 <USBD_SetConfig+0x150>)
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d02a      	beq.n	8009342 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7fe ffc0 	bl	800827a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80092fa:	4b1d      	ldr	r3, [pc, #116]	@ (8009370 <USBD_SetConfig+0x150>)
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	461a      	mov	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009304:	4b1a      	ldr	r3, [pc, #104]	@ (8009370 <USBD_SetConfig+0x150>)
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	4619      	mov	r1, r3
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f7fe ff99 	bl	8008242 <USBD_SetClassConfig>
 8009310:	4603      	mov	r3, r0
 8009312:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009314:	7bfb      	ldrb	r3, [r7, #15]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00f      	beq.n	800933a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800931a:	6839      	ldr	r1, [r7, #0]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f918 	bl	8009552 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	b2db      	uxtb	r3, r3
 8009328:	4619      	mov	r1, r3
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f7fe ffa5 	bl	800827a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2202      	movs	r2, #2
 8009334:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009338:	e014      	b.n	8009364 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f9e0 	bl	8009700 <USBD_CtlSendStatus>
      break;
 8009340:	e010      	b.n	8009364 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f9dc 	bl	8009700 <USBD_CtlSendStatus>
      break;
 8009348:	e00c      	b.n	8009364 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f900 	bl	8009552 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009352:	4b07      	ldr	r3, [pc, #28]	@ (8009370 <USBD_SetConfig+0x150>)
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f7fe ff8e 	bl	800827a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800935e:	2303      	movs	r3, #3
 8009360:	73fb      	strb	r3, [r7, #15]
      break;
 8009362:	bf00      	nop
  }

  return ret;
 8009364:	7bfb      	ldrb	r3, [r7, #15]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	200003dc 	.word	0x200003dc

08009374 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	88db      	ldrh	r3, [r3, #6]
 8009382:	2b01      	cmp	r3, #1
 8009384:	d004      	beq.n	8009390 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009386:	6839      	ldr	r1, [r7, #0]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f8e2 	bl	8009552 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800938e:	e023      	b.n	80093d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009396:	b2db      	uxtb	r3, r3
 8009398:	2b02      	cmp	r3, #2
 800939a:	dc02      	bgt.n	80093a2 <USBD_GetConfig+0x2e>
 800939c:	2b00      	cmp	r3, #0
 800939e:	dc03      	bgt.n	80093a8 <USBD_GetConfig+0x34>
 80093a0:	e015      	b.n	80093ce <USBD_GetConfig+0x5a>
 80093a2:	2b03      	cmp	r3, #3
 80093a4:	d00b      	beq.n	80093be <USBD_GetConfig+0x4a>
 80093a6:	e012      	b.n	80093ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	3308      	adds	r3, #8
 80093b2:	2201      	movs	r2, #1
 80093b4:	4619      	mov	r1, r3
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f948 	bl	800964c <USBD_CtlSendData>
        break;
 80093bc:	e00c      	b.n	80093d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	3304      	adds	r3, #4
 80093c2:	2201      	movs	r2, #1
 80093c4:	4619      	mov	r1, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f940 	bl	800964c <USBD_CtlSendData>
        break;
 80093cc:	e004      	b.n	80093d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f8be 	bl	8009552 <USBD_CtlError>
        break;
 80093d6:	bf00      	nop
}
 80093d8:	bf00      	nop
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	3b01      	subs	r3, #1
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d81e      	bhi.n	8009436 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	88db      	ldrh	r3, [r3, #6]
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d004      	beq.n	800940a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009400:	6839      	ldr	r1, [r7, #0]
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f8a5 	bl	8009552 <USBD_CtlError>
        break;
 8009408:	e01a      	b.n	8009440 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2201      	movs	r2, #1
 800940e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009416:	2b00      	cmp	r3, #0
 8009418:	d005      	beq.n	8009426 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	f043 0202 	orr.w	r2, r3, #2
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	330c      	adds	r3, #12
 800942a:	2202      	movs	r2, #2
 800942c:	4619      	mov	r1, r3
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f90c 	bl	800964c <USBD_CtlSendData>
      break;
 8009434:	e004      	b.n	8009440 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f88a 	bl	8009552 <USBD_CtlError>
      break;
 800943e:	bf00      	nop
  }
}
 8009440:	bf00      	nop
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	885b      	ldrh	r3, [r3, #2]
 8009456:	2b01      	cmp	r3, #1
 8009458:	d107      	bne.n	800946a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2201      	movs	r2, #1
 800945e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f94c 	bl	8009700 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009468:	e013      	b.n	8009492 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	885b      	ldrh	r3, [r3, #2]
 800946e:	2b02      	cmp	r3, #2
 8009470:	d10b      	bne.n	800948a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	889b      	ldrh	r3, [r3, #4]
 8009476:	0a1b      	lsrs	r3, r3, #8
 8009478:	b29b      	uxth	r3, r3
 800947a:	b2da      	uxtb	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f93c 	bl	8009700 <USBD_CtlSendStatus>
}
 8009488:	e003      	b.n	8009492 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800948a:	6839      	ldr	r1, [r7, #0]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f860 	bl	8009552 <USBD_CtlError>
}
 8009492:	bf00      	nop
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b082      	sub	sp, #8
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	3b01      	subs	r3, #1
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d80b      	bhi.n	80094ca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	885b      	ldrh	r3, [r3, #2]
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d10c      	bne.n	80094d4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f91c 	bl	8009700 <USBD_CtlSendStatus>
      }
      break;
 80094c8:	e004      	b.n	80094d4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80094ca:	6839      	ldr	r1, [r7, #0]
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 f840 	bl	8009552 <USBD_CtlError>
      break;
 80094d2:	e000      	b.n	80094d6 <USBD_ClrFeature+0x3c>
      break;
 80094d4:	bf00      	nop
  }
}
 80094d6:	bf00      	nop
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b084      	sub	sp, #16
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	781a      	ldrb	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	3301      	adds	r3, #1
 80094f8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	781a      	ldrb	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	3301      	adds	r3, #1
 8009506:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f7ff fa40 	bl	800898e <SWAPBYTE>
 800950e:	4603      	mov	r3, r0
 8009510:	461a      	mov	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	3301      	adds	r3, #1
 800951a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	3301      	adds	r3, #1
 8009520:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f7ff fa33 	bl	800898e <SWAPBYTE>
 8009528:	4603      	mov	r3, r0
 800952a:	461a      	mov	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	3301      	adds	r3, #1
 8009534:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	3301      	adds	r3, #1
 800953a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f7ff fa26 	bl	800898e <SWAPBYTE>
 8009542:	4603      	mov	r3, r0
 8009544:	461a      	mov	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	80da      	strh	r2, [r3, #6]
}
 800954a:	bf00      	nop
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b082      	sub	sp, #8
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800955c:	2180      	movs	r1, #128	@ 0x80
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fcbc 	bl	8009edc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009564:	2100      	movs	r1, #0
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fcb8 	bl	8009edc <USBD_LL_StallEP>
}
 800956c:	bf00      	nop
 800956e:	3708      	adds	r7, #8
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009580:	2300      	movs	r3, #0
 8009582:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d042      	beq.n	8009610 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800958e:	6938      	ldr	r0, [r7, #16]
 8009590:	f000 f842 	bl	8009618 <USBD_GetLen>
 8009594:	4603      	mov	r3, r0
 8009596:	3301      	adds	r3, #1
 8009598:	005b      	lsls	r3, r3, #1
 800959a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800959e:	d808      	bhi.n	80095b2 <USBD_GetString+0x3e>
 80095a0:	6938      	ldr	r0, [r7, #16]
 80095a2:	f000 f839 	bl	8009618 <USBD_GetLen>
 80095a6:	4603      	mov	r3, r0
 80095a8:	3301      	adds	r3, #1
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	005b      	lsls	r3, r3, #1
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	e001      	b.n	80095b6 <USBD_GetString+0x42>
 80095b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	4413      	add	r3, r2
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	7812      	ldrb	r2, [r2, #0]
 80095c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80095c6:	7dfb      	ldrb	r3, [r7, #23]
 80095c8:	3301      	adds	r3, #1
 80095ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80095cc:	7dfb      	ldrb	r3, [r7, #23]
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	4413      	add	r3, r2
 80095d2:	2203      	movs	r2, #3
 80095d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80095d6:	7dfb      	ldrb	r3, [r7, #23]
 80095d8:	3301      	adds	r3, #1
 80095da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80095dc:	e013      	b.n	8009606 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80095de:	7dfb      	ldrb	r3, [r7, #23]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	4413      	add	r3, r2
 80095e4:	693a      	ldr	r2, [r7, #16]
 80095e6:	7812      	ldrb	r2, [r2, #0]
 80095e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	3301      	adds	r3, #1
 80095ee:	613b      	str	r3, [r7, #16]
    idx++;
 80095f0:	7dfb      	ldrb	r3, [r7, #23]
 80095f2:	3301      	adds	r3, #1
 80095f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80095f6:	7dfb      	ldrb	r3, [r7, #23]
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	4413      	add	r3, r2
 80095fc:	2200      	movs	r2, #0
 80095fe:	701a      	strb	r2, [r3, #0]
    idx++;
 8009600:	7dfb      	ldrb	r3, [r7, #23]
 8009602:	3301      	adds	r3, #1
 8009604:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1e7      	bne.n	80095de <USBD_GetString+0x6a>
 800960e:	e000      	b.n	8009612 <USBD_GetString+0x9e>
    return;
 8009610:	bf00      	nop
  }
}
 8009612:	3718      	adds	r7, #24
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009620:	2300      	movs	r3, #0
 8009622:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009628:	e005      	b.n	8009636 <USBD_GetLen+0x1e>
  {
    len++;
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	3301      	adds	r3, #1
 800962e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	3301      	adds	r3, #1
 8009634:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1f5      	bne.n	800962a <USBD_GetLen+0x12>
  }

  return len;
 800963e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009640:	4618      	mov	r0, r3
 8009642:	3714      	adds	r7, #20
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2202      	movs	r2, #2
 800965c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	2100      	movs	r1, #0
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f000 fcbb 	bl	8009fee <USBD_LL_Transmit>

  return USBD_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b084      	sub	sp, #16
 8009686:	af00      	add	r7, sp, #0
 8009688:	60f8      	str	r0, [r7, #12]
 800968a:	60b9      	str	r1, [r7, #8]
 800968c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	2100      	movs	r1, #0
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f000 fcaa 	bl	8009fee <USBD_LL_Transmit>

  return USBD_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2203      	movs	r2, #3
 80096b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	2100      	movs	r1, #0
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 fcae 	bl	800a030 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b084      	sub	sp, #16
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	60f8      	str	r0, [r7, #12]
 80096e6:	60b9      	str	r1, [r7, #8]
 80096e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	2100      	movs	r1, #0
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f000 fc9d 	bl	800a030 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2204      	movs	r2, #4
 800970c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009710:	2300      	movs	r3, #0
 8009712:	2200      	movs	r2, #0
 8009714:	2100      	movs	r1, #0
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fc69 	bl	8009fee <USBD_LL_Transmit>

  return USBD_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b082      	sub	sp, #8
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2205      	movs	r2, #5
 8009732:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009736:	2300      	movs	r3, #0
 8009738:	2200      	movs	r2, #0
 800973a:	2100      	movs	r1, #0
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fc77 	bl	800a030 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009750:	2200      	movs	r2, #0
 8009752:	4912      	ldr	r1, [pc, #72]	@ (800979c <MX_USB_DEVICE_Init+0x50>)
 8009754:	4812      	ldr	r0, [pc, #72]	@ (80097a0 <MX_USB_DEVICE_Init+0x54>)
 8009756:	f7fe fcf7 	bl	8008148 <USBD_Init>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009760:	f7f7 ff6c 	bl	800163c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009764:	490f      	ldr	r1, [pc, #60]	@ (80097a4 <MX_USB_DEVICE_Init+0x58>)
 8009766:	480e      	ldr	r0, [pc, #56]	@ (80097a0 <MX_USB_DEVICE_Init+0x54>)
 8009768:	f7fe fd1e 	bl	80081a8 <USBD_RegisterClass>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009772:	f7f7 ff63 	bl	800163c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009776:	490c      	ldr	r1, [pc, #48]	@ (80097a8 <MX_USB_DEVICE_Init+0x5c>)
 8009778:	4809      	ldr	r0, [pc, #36]	@ (80097a0 <MX_USB_DEVICE_Init+0x54>)
 800977a:	f7fe fc55 	bl	8008028 <USBD_CDC_RegisterInterface>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d001      	beq.n	8009788 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009784:	f7f7 ff5a 	bl	800163c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009788:	4805      	ldr	r0, [pc, #20]	@ (80097a0 <MX_USB_DEVICE_Init+0x54>)
 800978a:	f7fe fd43 	bl	8008214 <USBD_Start>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d001      	beq.n	8009798 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009794:	f7f7 ff52 	bl	800163c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009798:	bf00      	nop
 800979a:	bd80      	pop	{r7, pc}
 800979c:	200000b0 	.word	0x200000b0
 80097a0:	200003e0 	.word	0x200003e0
 80097a4:	2000001c 	.word	0x2000001c
 80097a8:	2000009c 	.word	0x2000009c

080097ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80097b0:	2200      	movs	r2, #0
 80097b2:	4905      	ldr	r1, [pc, #20]	@ (80097c8 <CDC_Init_FS+0x1c>)
 80097b4:	4805      	ldr	r0, [pc, #20]	@ (80097cc <CDC_Init_FS+0x20>)
 80097b6:	f7fe fc51 	bl	800805c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80097ba:	4905      	ldr	r1, [pc, #20]	@ (80097d0 <CDC_Init_FS+0x24>)
 80097bc:	4803      	ldr	r0, [pc, #12]	@ (80097cc <CDC_Init_FS+0x20>)
 80097be:	f7fe fc6f 	bl	80080a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80097c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	20000ebc 	.word	0x20000ebc
 80097cc:	200003e0 	.word	0x200003e0
 80097d0:	200006bc 	.word	0x200006bc

080097d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80097d4:	b480      	push	{r7}
 80097d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80097d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80097da:	4618      	mov	r0, r3
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	4603      	mov	r3, r0
 80097ec:	6039      	str	r1, [r7, #0]
 80097ee:	71fb      	strb	r3, [r7, #7]
 80097f0:	4613      	mov	r3, r2
 80097f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	2b23      	cmp	r3, #35	@ 0x23
 80097f8:	d84a      	bhi.n	8009890 <CDC_Control_FS+0xac>
 80097fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009800 <CDC_Control_FS+0x1c>)
 80097fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009800:	08009891 	.word	0x08009891
 8009804:	08009891 	.word	0x08009891
 8009808:	08009891 	.word	0x08009891
 800980c:	08009891 	.word	0x08009891
 8009810:	08009891 	.word	0x08009891
 8009814:	08009891 	.word	0x08009891
 8009818:	08009891 	.word	0x08009891
 800981c:	08009891 	.word	0x08009891
 8009820:	08009891 	.word	0x08009891
 8009824:	08009891 	.word	0x08009891
 8009828:	08009891 	.word	0x08009891
 800982c:	08009891 	.word	0x08009891
 8009830:	08009891 	.word	0x08009891
 8009834:	08009891 	.word	0x08009891
 8009838:	08009891 	.word	0x08009891
 800983c:	08009891 	.word	0x08009891
 8009840:	08009891 	.word	0x08009891
 8009844:	08009891 	.word	0x08009891
 8009848:	08009891 	.word	0x08009891
 800984c:	08009891 	.word	0x08009891
 8009850:	08009891 	.word	0x08009891
 8009854:	08009891 	.word	0x08009891
 8009858:	08009891 	.word	0x08009891
 800985c:	08009891 	.word	0x08009891
 8009860:	08009891 	.word	0x08009891
 8009864:	08009891 	.word	0x08009891
 8009868:	08009891 	.word	0x08009891
 800986c:	08009891 	.word	0x08009891
 8009870:	08009891 	.word	0x08009891
 8009874:	08009891 	.word	0x08009891
 8009878:	08009891 	.word	0x08009891
 800987c:	08009891 	.word	0x08009891
 8009880:	08009891 	.word	0x08009891
 8009884:	08009891 	.word	0x08009891
 8009888:	08009891 	.word	0x08009891
 800988c:	08009891 	.word	0x08009891
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009890:	bf00      	nop
  }

  return (USBD_OK);
 8009892:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009894:	4618      	mov	r0, r3
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80098aa:	6879      	ldr	r1, [r7, #4]
 80098ac:	4805      	ldr	r0, [pc, #20]	@ (80098c4 <CDC_Receive_FS+0x24>)
 80098ae:	f7fe fbf7 	bl	80080a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80098b2:	4804      	ldr	r0, [pc, #16]	@ (80098c4 <CDC_Receive_FS+0x24>)
 80098b4:	f7fe fc12 	bl	80080dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80098b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	200003e0 	.word	0x200003e0

080098c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	4613      	mov	r3, r2
 80098d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80098da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	371c      	adds	r7, #28
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
	...

080098ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	4603      	mov	r3, r0
 80098f4:	6039      	str	r1, [r7, #0]
 80098f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	2212      	movs	r2, #18
 80098fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80098fe:	4b03      	ldr	r3, [pc, #12]	@ (800990c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009900:	4618      	mov	r0, r3
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr
 800990c:	200000cc 	.word	0x200000cc

08009910 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	4603      	mov	r3, r0
 8009918:	6039      	str	r1, [r7, #0]
 800991a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	2204      	movs	r2, #4
 8009920:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009922:	4b03      	ldr	r3, [pc, #12]	@ (8009930 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009924:	4618      	mov	r0, r3
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	200000e0 	.word	0x200000e0

08009934 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	4603      	mov	r3, r0
 800993c:	6039      	str	r1, [r7, #0]
 800993e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009940:	79fb      	ldrb	r3, [r7, #7]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d105      	bne.n	8009952 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	4907      	ldr	r1, [pc, #28]	@ (8009968 <USBD_FS_ProductStrDescriptor+0x34>)
 800994a:	4808      	ldr	r0, [pc, #32]	@ (800996c <USBD_FS_ProductStrDescriptor+0x38>)
 800994c:	f7ff fe12 	bl	8009574 <USBD_GetString>
 8009950:	e004      	b.n	800995c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	4904      	ldr	r1, [pc, #16]	@ (8009968 <USBD_FS_ProductStrDescriptor+0x34>)
 8009956:	4805      	ldr	r0, [pc, #20]	@ (800996c <USBD_FS_ProductStrDescriptor+0x38>)
 8009958:	f7ff fe0c 	bl	8009574 <USBD_GetString>
  }
  return USBD_StrDesc;
 800995c:	4b02      	ldr	r3, [pc, #8]	@ (8009968 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800995e:	4618      	mov	r0, r3
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	200016bc 	.word	0x200016bc
 800996c:	0800edb0 	.word	0x0800edb0

08009970 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	4603      	mov	r3, r0
 8009978:	6039      	str	r1, [r7, #0]
 800997a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800997c:	683a      	ldr	r2, [r7, #0]
 800997e:	4904      	ldr	r1, [pc, #16]	@ (8009990 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009980:	4804      	ldr	r0, [pc, #16]	@ (8009994 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009982:	f7ff fdf7 	bl	8009574 <USBD_GetString>
  return USBD_StrDesc;
 8009986:	4b02      	ldr	r3, [pc, #8]	@ (8009990 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009988:	4618      	mov	r0, r3
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	200016bc 	.word	0x200016bc
 8009994:	0800edc8 	.word	0x0800edc8

08009998 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	4603      	mov	r3, r0
 80099a0:	6039      	str	r1, [r7, #0]
 80099a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	221a      	movs	r2, #26
 80099a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80099aa:	f000 f843 	bl	8009a34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80099ae:	4b02      	ldr	r3, [pc, #8]	@ (80099b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	200000e4 	.word	0x200000e4

080099bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	6039      	str	r1, [r7, #0]
 80099c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80099c8:	79fb      	ldrb	r3, [r7, #7]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d105      	bne.n	80099da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099ce:	683a      	ldr	r2, [r7, #0]
 80099d0:	4907      	ldr	r1, [pc, #28]	@ (80099f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099d2:	4808      	ldr	r0, [pc, #32]	@ (80099f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80099d4:	f7ff fdce 	bl	8009574 <USBD_GetString>
 80099d8:	e004      	b.n	80099e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099da:	683a      	ldr	r2, [r7, #0]
 80099dc:	4904      	ldr	r1, [pc, #16]	@ (80099f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099de:	4805      	ldr	r0, [pc, #20]	@ (80099f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80099e0:	f7ff fdc8 	bl	8009574 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099e4:	4b02      	ldr	r3, [pc, #8]	@ (80099f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	200016bc 	.word	0x200016bc
 80099f4:	0800eddc 	.word	0x0800eddc

080099f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	6039      	str	r1, [r7, #0]
 8009a02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a04:	79fb      	ldrb	r3, [r7, #7]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d105      	bne.n	8009a16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	4907      	ldr	r1, [pc, #28]	@ (8009a2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a0e:	4808      	ldr	r0, [pc, #32]	@ (8009a30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a10:	f7ff fdb0 	bl	8009574 <USBD_GetString>
 8009a14:	e004      	b.n	8009a20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a16:	683a      	ldr	r2, [r7, #0]
 8009a18:	4904      	ldr	r1, [pc, #16]	@ (8009a2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a1a:	4805      	ldr	r0, [pc, #20]	@ (8009a30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a1c:	f7ff fdaa 	bl	8009574 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a20:	4b02      	ldr	r3, [pc, #8]	@ (8009a2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3708      	adds	r7, #8
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	200016bc 	.word	0x200016bc
 8009a30:	0800ede8 	.word	0x0800ede8

08009a34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8009a78 <Get_SerialNum+0x44>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a40:	4b0e      	ldr	r3, [pc, #56]	@ (8009a7c <Get_SerialNum+0x48>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a46:	4b0e      	ldr	r3, [pc, #56]	@ (8009a80 <Get_SerialNum+0x4c>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4413      	add	r3, r2
 8009a52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d009      	beq.n	8009a6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a5a:	2208      	movs	r2, #8
 8009a5c:	4909      	ldr	r1, [pc, #36]	@ (8009a84 <Get_SerialNum+0x50>)
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f000 f814 	bl	8009a8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a64:	2204      	movs	r2, #4
 8009a66:	4908      	ldr	r1, [pc, #32]	@ (8009a88 <Get_SerialNum+0x54>)
 8009a68:	68b8      	ldr	r0, [r7, #8]
 8009a6a:	f000 f80f 	bl	8009a8c <IntToUnicode>
  }
}
 8009a6e:	bf00      	nop
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	1fff7a10 	.word	0x1fff7a10
 8009a7c:	1fff7a14 	.word	0x1fff7a14
 8009a80:	1fff7a18 	.word	0x1fff7a18
 8009a84:	200000e6 	.word	0x200000e6
 8009a88:	200000f6 	.word	0x200000f6

08009a8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b087      	sub	sp, #28
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	4613      	mov	r3, r2
 8009a98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	75fb      	strb	r3, [r7, #23]
 8009aa2:	e027      	b.n	8009af4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	0f1b      	lsrs	r3, r3, #28
 8009aa8:	2b09      	cmp	r3, #9
 8009aaa:	d80b      	bhi.n	8009ac4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	0f1b      	lsrs	r3, r3, #28
 8009ab0:	b2da      	uxtb	r2, r3
 8009ab2:	7dfb      	ldrb	r3, [r7, #23]
 8009ab4:	005b      	lsls	r3, r3, #1
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	440b      	add	r3, r1
 8009abc:	3230      	adds	r2, #48	@ 0x30
 8009abe:	b2d2      	uxtb	r2, r2
 8009ac0:	701a      	strb	r2, [r3, #0]
 8009ac2:	e00a      	b.n	8009ada <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	0f1b      	lsrs	r3, r3, #28
 8009ac8:	b2da      	uxtb	r2, r3
 8009aca:	7dfb      	ldrb	r3, [r7, #23]
 8009acc:	005b      	lsls	r3, r3, #1
 8009ace:	4619      	mov	r1, r3
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	440b      	add	r3, r1
 8009ad4:	3237      	adds	r2, #55	@ 0x37
 8009ad6:	b2d2      	uxtb	r2, r2
 8009ad8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	011b      	lsls	r3, r3, #4
 8009ade:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ae0:	7dfb      	ldrb	r3, [r7, #23]
 8009ae2:	005b      	lsls	r3, r3, #1
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	4413      	add	r3, r2
 8009aea:	2200      	movs	r2, #0
 8009aec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009aee:	7dfb      	ldrb	r3, [r7, #23]
 8009af0:	3301      	adds	r3, #1
 8009af2:	75fb      	strb	r3, [r7, #23]
 8009af4:	7dfa      	ldrb	r2, [r7, #23]
 8009af6:	79fb      	ldrb	r3, [r7, #7]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d3d3      	bcc.n	8009aa4 <IntToUnicode+0x18>
  }
}
 8009afc:	bf00      	nop
 8009afe:	bf00      	nop
 8009b00:	371c      	adds	r7, #28
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
	...

08009b0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b08a      	sub	sp, #40	@ 0x28
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b14:	f107 0314 	add.w	r3, r7, #20
 8009b18:	2200      	movs	r2, #0
 8009b1a:	601a      	str	r2, [r3, #0]
 8009b1c:	605a      	str	r2, [r3, #4]
 8009b1e:	609a      	str	r2, [r3, #8]
 8009b20:	60da      	str	r2, [r3, #12]
 8009b22:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b2c:	d13a      	bne.n	8009ba4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b2e:	2300      	movs	r3, #0
 8009b30:	613b      	str	r3, [r7, #16]
 8009b32:	4b1e      	ldr	r3, [pc, #120]	@ (8009bac <HAL_PCD_MspInit+0xa0>)
 8009b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b36:	4a1d      	ldr	r2, [pc, #116]	@ (8009bac <HAL_PCD_MspInit+0xa0>)
 8009b38:	f043 0301 	orr.w	r3, r3, #1
 8009b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8009bac <HAL_PCD_MspInit+0xa0>)
 8009b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b42:	f003 0301 	and.w	r3, r3, #1
 8009b46:	613b      	str	r3, [r7, #16]
 8009b48:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009b4a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b50:	2302      	movs	r3, #2
 8009b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b54:	2300      	movs	r3, #0
 8009b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b58:	2303      	movs	r3, #3
 8009b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009b5c:	230a      	movs	r3, #10
 8009b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b60:	f107 0314 	add.w	r3, r7, #20
 8009b64:	4619      	mov	r1, r3
 8009b66:	4812      	ldr	r0, [pc, #72]	@ (8009bb0 <HAL_PCD_MspInit+0xa4>)
 8009b68:	f7f8 f976 	bl	8001e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8009bac <HAL_PCD_MspInit+0xa0>)
 8009b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b70:	4a0e      	ldr	r2, [pc, #56]	@ (8009bac <HAL_PCD_MspInit+0xa0>)
 8009b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b76:	6353      	str	r3, [r2, #52]	@ 0x34
 8009b78:	2300      	movs	r3, #0
 8009b7a:	60fb      	str	r3, [r7, #12]
 8009b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8009bac <HAL_PCD_MspInit+0xa0>)
 8009b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b80:	4a0a      	ldr	r2, [pc, #40]	@ (8009bac <HAL_PCD_MspInit+0xa0>)
 8009b82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009b86:	6453      	str	r3, [r2, #68]	@ 0x44
 8009b88:	4b08      	ldr	r3, [pc, #32]	@ (8009bac <HAL_PCD_MspInit+0xa0>)
 8009b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b90:	60fb      	str	r3, [r7, #12]
 8009b92:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b94:	2200      	movs	r2, #0
 8009b96:	2100      	movs	r1, #0
 8009b98:	2043      	movs	r0, #67	@ 0x43
 8009b9a:	f7f8 f926 	bl	8001dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b9e:	2043      	movs	r0, #67	@ 0x43
 8009ba0:	f7f8 f93f 	bl	8001e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009ba4:	bf00      	nop
 8009ba6:	3728      	adds	r7, #40	@ 0x28
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	40023800 	.word	0x40023800
 8009bb0:	40020000 	.word	0x40020000

08009bb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009bc8:	4619      	mov	r1, r3
 8009bca:	4610      	mov	r0, r2
 8009bcc:	f7fe fb6f 	bl	80082ae <USBD_LL_SetupStage>
}
 8009bd0:	bf00      	nop
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	460b      	mov	r3, r1
 8009be2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009bea:	78fa      	ldrb	r2, [r7, #3]
 8009bec:	6879      	ldr	r1, [r7, #4]
 8009bee:	4613      	mov	r3, r2
 8009bf0:	00db      	lsls	r3, r3, #3
 8009bf2:	4413      	add	r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	440b      	add	r3, r1
 8009bf8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	78fb      	ldrb	r3, [r7, #3]
 8009c00:	4619      	mov	r1, r3
 8009c02:	f7fe fba9 	bl	8008358 <USBD_LL_DataOutStage>
}
 8009c06:	bf00      	nop
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b082      	sub	sp, #8
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	460b      	mov	r3, r1
 8009c18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009c20:	78fa      	ldrb	r2, [r7, #3]
 8009c22:	6879      	ldr	r1, [r7, #4]
 8009c24:	4613      	mov	r3, r2
 8009c26:	00db      	lsls	r3, r3, #3
 8009c28:	4413      	add	r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	440b      	add	r3, r1
 8009c2e:	3320      	adds	r3, #32
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	78fb      	ldrb	r3, [r7, #3]
 8009c34:	4619      	mov	r1, r3
 8009c36:	f7fe fc42 	bl	80084be <USBD_LL_DataInStage>
}
 8009c3a:	bf00      	nop
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b082      	sub	sp, #8
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fe fd7c 	bl	800874e <USBD_LL_SOF>
}
 8009c56:	bf00      	nop
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b084      	sub	sp, #16
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c66:	2301      	movs	r3, #1
 8009c68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	79db      	ldrb	r3, [r3, #7]
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d001      	beq.n	8009c76 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009c72:	f7f7 fce3 	bl	800163c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c7c:	7bfa      	ldrb	r2, [r7, #15]
 8009c7e:	4611      	mov	r1, r2
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fe fd20 	bl	80086c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fe fcc8 	bl	8008622 <USBD_LL_Reset>
}
 8009c92:	bf00      	nop
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
	...

08009c9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fe fd1b 	bl	80086e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	6812      	ldr	r2, [r2, #0]
 8009cbe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009cc2:	f043 0301 	orr.w	r3, r3, #1
 8009cc6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	7adb      	ldrb	r3, [r3, #11]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d005      	beq.n	8009cdc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009cd0:	4b04      	ldr	r3, [pc, #16]	@ (8009ce4 <HAL_PCD_SuspendCallback+0x48>)
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	4a03      	ldr	r2, [pc, #12]	@ (8009ce4 <HAL_PCD_SuspendCallback+0x48>)
 8009cd6:	f043 0306 	orr.w	r3, r3, #6
 8009cda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009cdc:	bf00      	nop
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	e000ed00 	.word	0xe000ed00

08009ce8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fe fd11 	bl	800871e <USBD_LL_Resume>
}
 8009cfc:	bf00      	nop
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d16:	78fa      	ldrb	r2, [r7, #3]
 8009d18:	4611      	mov	r1, r2
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fe fd69 	bl	80087f2 <USBD_LL_IsoOUTIncomplete>
}
 8009d20:	bf00      	nop
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	460b      	mov	r3, r1
 8009d32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d3a:	78fa      	ldrb	r2, [r7, #3]
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fe fd25 	bl	800878e <USBD_LL_IsoINIncomplete>
}
 8009d44:	bf00      	nop
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fe fd7b 	bl	8008856 <USBD_LL_DevConnected>
}
 8009d60:	bf00      	nop
 8009d62:	3708      	adds	r7, #8
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fe fd78 	bl	800886c <USBD_LL_DevDisconnected>
}
 8009d7c:	bf00      	nop
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d13c      	bne.n	8009e0e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009d94:	4a20      	ldr	r2, [pc, #128]	@ (8009e18 <USBD_LL_Init+0x94>)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8009e18 <USBD_LL_Init+0x94>)
 8009da0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009da4:	4b1c      	ldr	r3, [pc, #112]	@ (8009e18 <USBD_LL_Init+0x94>)
 8009da6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009daa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009dac:	4b1a      	ldr	r3, [pc, #104]	@ (8009e18 <USBD_LL_Init+0x94>)
 8009dae:	2204      	movs	r2, #4
 8009db0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009db2:	4b19      	ldr	r3, [pc, #100]	@ (8009e18 <USBD_LL_Init+0x94>)
 8009db4:	2202      	movs	r2, #2
 8009db6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009db8:	4b17      	ldr	r3, [pc, #92]	@ (8009e18 <USBD_LL_Init+0x94>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009dbe:	4b16      	ldr	r3, [pc, #88]	@ (8009e18 <USBD_LL_Init+0x94>)
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009dc4:	4b14      	ldr	r3, [pc, #80]	@ (8009e18 <USBD_LL_Init+0x94>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009dca:	4b13      	ldr	r3, [pc, #76]	@ (8009e18 <USBD_LL_Init+0x94>)
 8009dcc:	2200      	movs	r2, #0
 8009dce:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009dd0:	4b11      	ldr	r3, [pc, #68]	@ (8009e18 <USBD_LL_Init+0x94>)
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009dd6:	4b10      	ldr	r3, [pc, #64]	@ (8009e18 <USBD_LL_Init+0x94>)
 8009dd8:	2200      	movs	r2, #0
 8009dda:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8009e18 <USBD_LL_Init+0x94>)
 8009dde:	2200      	movs	r2, #0
 8009de0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009de2:	480d      	ldr	r0, [pc, #52]	@ (8009e18 <USBD_LL_Init+0x94>)
 8009de4:	f7f9 f9d0 	bl	8003188 <HAL_PCD_Init>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d001      	beq.n	8009df2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009dee:	f7f7 fc25 	bl	800163c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009df2:	2180      	movs	r1, #128	@ 0x80
 8009df4:	4808      	ldr	r0, [pc, #32]	@ (8009e18 <USBD_LL_Init+0x94>)
 8009df6:	f7fa fbfc 	bl	80045f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009dfa:	2240      	movs	r2, #64	@ 0x40
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	4806      	ldr	r0, [pc, #24]	@ (8009e18 <USBD_LL_Init+0x94>)
 8009e00:	f7fa fbb0 	bl	8004564 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009e04:	2280      	movs	r2, #128	@ 0x80
 8009e06:	2101      	movs	r1, #1
 8009e08:	4803      	ldr	r0, [pc, #12]	@ (8009e18 <USBD_LL_Init+0x94>)
 8009e0a:	f7fa fbab 	bl	8004564 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	200018bc 	.word	0x200018bc

08009e1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e24:	2300      	movs	r3, #0
 8009e26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7f9 fab7 	bl	80033a6 <HAL_PCD_Start>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 f942 	bl	800a0c8 <USBD_Get_USB_Status>
 8009e44:	4603      	mov	r3, r0
 8009e46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e48:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b084      	sub	sp, #16
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	4608      	mov	r0, r1
 8009e5c:	4611      	mov	r1, r2
 8009e5e:	461a      	mov	r2, r3
 8009e60:	4603      	mov	r3, r0
 8009e62:	70fb      	strb	r3, [r7, #3]
 8009e64:	460b      	mov	r3, r1
 8009e66:	70bb      	strb	r3, [r7, #2]
 8009e68:	4613      	mov	r3, r2
 8009e6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e70:	2300      	movs	r3, #0
 8009e72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009e7a:	78bb      	ldrb	r3, [r7, #2]
 8009e7c:	883a      	ldrh	r2, [r7, #0]
 8009e7e:	78f9      	ldrb	r1, [r7, #3]
 8009e80:	f7f9 ff8b 	bl	8003d9a <HAL_PCD_EP_Open>
 8009e84:	4603      	mov	r3, r0
 8009e86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e88:	7bfb      	ldrb	r3, [r7, #15]
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f000 f91c 	bl	800a0c8 <USBD_Get_USB_Status>
 8009e90:	4603      	mov	r3, r0
 8009e92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e94:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b084      	sub	sp, #16
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009eb8:	78fa      	ldrb	r2, [r7, #3]
 8009eba:	4611      	mov	r1, r2
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7f9 ffd6 	bl	8003e6e <HAL_PCD_EP_Close>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f000 f8fd 	bl	800a0c8 <USBD_Get_USB_Status>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ed2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eec:	2300      	movs	r3, #0
 8009eee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ef6:	78fa      	ldrb	r2, [r7, #3]
 8009ef8:	4611      	mov	r1, r2
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fa f88e 	bl	800401c <HAL_PCD_EP_SetStall>
 8009f00:	4603      	mov	r3, r0
 8009f02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
 8009f06:	4618      	mov	r0, r3
 8009f08:	f000 f8de 	bl	800a0c8 <USBD_Get_USB_Status>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f10:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b084      	sub	sp, #16
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
 8009f22:	460b      	mov	r3, r1
 8009f24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f26:	2300      	movs	r3, #0
 8009f28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f34:	78fa      	ldrb	r2, [r7, #3]
 8009f36:	4611      	mov	r1, r2
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7fa f8d2 	bl	80040e2 <HAL_PCD_EP_ClrStall>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f42:	7bfb      	ldrb	r3, [r7, #15]
 8009f44:	4618      	mov	r0, r3
 8009f46:	f000 f8bf 	bl	800a0c8 <USBD_Get_USB_Status>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	460b      	mov	r3, r1
 8009f62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	da0b      	bge.n	8009f8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f74:	78fb      	ldrb	r3, [r7, #3]
 8009f76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f7a:	68f9      	ldr	r1, [r7, #12]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	00db      	lsls	r3, r3, #3
 8009f80:	4413      	add	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	440b      	add	r3, r1
 8009f86:	3316      	adds	r3, #22
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	e00b      	b.n	8009fa4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f8c:	78fb      	ldrb	r3, [r7, #3]
 8009f8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f92:	68f9      	ldr	r1, [r7, #12]
 8009f94:	4613      	mov	r3, r2
 8009f96:	00db      	lsls	r3, r3, #3
 8009f98:	4413      	add	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	440b      	add	r3, r1
 8009f9e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009fa2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3714      	adds	r7, #20
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009fca:	78fa      	ldrb	r2, [r7, #3]
 8009fcc:	4611      	mov	r1, r2
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7f9 febf 	bl	8003d52 <HAL_PCD_SetAddress>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 f874 	bl	800a0c8 <USBD_Get_USB_Status>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fe4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b086      	sub	sp, #24
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	60f8      	str	r0, [r7, #12]
 8009ff6:	607a      	str	r2, [r7, #4]
 8009ff8:	603b      	str	r3, [r7, #0]
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ffe:	2300      	movs	r3, #0
 800a000:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a002:	2300      	movs	r3, #0
 800a004:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a00c:	7af9      	ldrb	r1, [r7, #11]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	f7f9 ffc9 	bl	8003fa8 <HAL_PCD_EP_Transmit>
 800a016:	4603      	mov	r3, r0
 800a018:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a01a:	7dfb      	ldrb	r3, [r7, #23]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f000 f853 	bl	800a0c8 <USBD_Get_USB_Status>
 800a022:	4603      	mov	r3, r0
 800a024:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a026:	7dbb      	ldrb	r3, [r7, #22]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3718      	adds	r7, #24
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	607a      	str	r2, [r7, #4]
 800a03a:	603b      	str	r3, [r7, #0]
 800a03c:	460b      	mov	r3, r1
 800a03e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a040:	2300      	movs	r3, #0
 800a042:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a044:	2300      	movs	r3, #0
 800a046:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a04e:	7af9      	ldrb	r1, [r7, #11]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	f7f9 ff55 	bl	8003f02 <HAL_PCD_EP_Receive>
 800a058:	4603      	mov	r3, r0
 800a05a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a05c:	7dfb      	ldrb	r3, [r7, #23]
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 f832 	bl	800a0c8 <USBD_Get_USB_Status>
 800a064:	4603      	mov	r3, r0
 800a066:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a068:	7dbb      	ldrb	r3, [r7, #22]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3718      	adds	r7, #24
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b082      	sub	sp, #8
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
 800a07a:	460b      	mov	r3, r1
 800a07c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a084:	78fa      	ldrb	r2, [r7, #3]
 800a086:	4611      	mov	r1, r2
 800a088:	4618      	mov	r0, r3
 800a08a:	f7f9 ff75 	bl	8003f78 <HAL_PCD_EP_GetRxCount>
 800a08e:	4603      	mov	r3, r0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a0a0:	4b03      	ldr	r3, [pc, #12]	@ (800a0b0 <USBD_static_malloc+0x18>)
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	370c      	adds	r7, #12
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr
 800a0ae:	bf00      	nop
 800a0b0:	20001da0 	.word	0x20001da0

0800a0b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]

}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a0d6:	79fb      	ldrb	r3, [r7, #7]
 800a0d8:	2b03      	cmp	r3, #3
 800a0da:	d817      	bhi.n	800a10c <USBD_Get_USB_Status+0x44>
 800a0dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a0e4 <USBD_Get_USB_Status+0x1c>)
 800a0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e2:	bf00      	nop
 800a0e4:	0800a0f5 	.word	0x0800a0f5
 800a0e8:	0800a0fb 	.word	0x0800a0fb
 800a0ec:	0800a101 	.word	0x0800a101
 800a0f0:	0800a107 	.word	0x0800a107
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a0f8:	e00b      	b.n	800a112 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	73fb      	strb	r3, [r7, #15]
    break;
 800a0fe:	e008      	b.n	800a112 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a100:	2301      	movs	r3, #1
 800a102:	73fb      	strb	r3, [r7, #15]
    break;
 800a104:	e005      	b.n	800a112 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a106:	2303      	movs	r3, #3
 800a108:	73fb      	strb	r3, [r7, #15]
    break;
 800a10a:	e002      	b.n	800a112 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a10c:	2303      	movs	r3, #3
 800a10e:	73fb      	strb	r3, [r7, #15]
    break;
 800a110:	bf00      	nop
  }
  return usb_status;
 800a112:	7bfb      	ldrb	r3, [r7, #15]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3714      	adds	r7, #20
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <__cvt>:
 800a120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a124:	ec57 6b10 	vmov	r6, r7, d0
 800a128:	2f00      	cmp	r7, #0
 800a12a:	460c      	mov	r4, r1
 800a12c:	4619      	mov	r1, r3
 800a12e:	463b      	mov	r3, r7
 800a130:	bfbb      	ittet	lt
 800a132:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a136:	461f      	movlt	r7, r3
 800a138:	2300      	movge	r3, #0
 800a13a:	232d      	movlt	r3, #45	@ 0x2d
 800a13c:	700b      	strb	r3, [r1, #0]
 800a13e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a140:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a144:	4691      	mov	r9, r2
 800a146:	f023 0820 	bic.w	r8, r3, #32
 800a14a:	bfbc      	itt	lt
 800a14c:	4632      	movlt	r2, r6
 800a14e:	4616      	movlt	r6, r2
 800a150:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a154:	d005      	beq.n	800a162 <__cvt+0x42>
 800a156:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a15a:	d100      	bne.n	800a15e <__cvt+0x3e>
 800a15c:	3401      	adds	r4, #1
 800a15e:	2102      	movs	r1, #2
 800a160:	e000      	b.n	800a164 <__cvt+0x44>
 800a162:	2103      	movs	r1, #3
 800a164:	ab03      	add	r3, sp, #12
 800a166:	9301      	str	r3, [sp, #4]
 800a168:	ab02      	add	r3, sp, #8
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	ec47 6b10 	vmov	d0, r6, r7
 800a170:	4653      	mov	r3, sl
 800a172:	4622      	mov	r2, r4
 800a174:	f001 f8a8 	bl	800b2c8 <_dtoa_r>
 800a178:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a17c:	4605      	mov	r5, r0
 800a17e:	d119      	bne.n	800a1b4 <__cvt+0x94>
 800a180:	f019 0f01 	tst.w	r9, #1
 800a184:	d00e      	beq.n	800a1a4 <__cvt+0x84>
 800a186:	eb00 0904 	add.w	r9, r0, r4
 800a18a:	2200      	movs	r2, #0
 800a18c:	2300      	movs	r3, #0
 800a18e:	4630      	mov	r0, r6
 800a190:	4639      	mov	r1, r7
 800a192:	f7f6 fca1 	bl	8000ad8 <__aeabi_dcmpeq>
 800a196:	b108      	cbz	r0, 800a19c <__cvt+0x7c>
 800a198:	f8cd 900c 	str.w	r9, [sp, #12]
 800a19c:	2230      	movs	r2, #48	@ 0x30
 800a19e:	9b03      	ldr	r3, [sp, #12]
 800a1a0:	454b      	cmp	r3, r9
 800a1a2:	d31e      	bcc.n	800a1e2 <__cvt+0xc2>
 800a1a4:	9b03      	ldr	r3, [sp, #12]
 800a1a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1a8:	1b5b      	subs	r3, r3, r5
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	6013      	str	r3, [r2, #0]
 800a1ae:	b004      	add	sp, #16
 800a1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a1b8:	eb00 0904 	add.w	r9, r0, r4
 800a1bc:	d1e5      	bne.n	800a18a <__cvt+0x6a>
 800a1be:	7803      	ldrb	r3, [r0, #0]
 800a1c0:	2b30      	cmp	r3, #48	@ 0x30
 800a1c2:	d10a      	bne.n	800a1da <__cvt+0xba>
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	4639      	mov	r1, r7
 800a1cc:	f7f6 fc84 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1d0:	b918      	cbnz	r0, 800a1da <__cvt+0xba>
 800a1d2:	f1c4 0401 	rsb	r4, r4, #1
 800a1d6:	f8ca 4000 	str.w	r4, [sl]
 800a1da:	f8da 3000 	ldr.w	r3, [sl]
 800a1de:	4499      	add	r9, r3
 800a1e0:	e7d3      	b.n	800a18a <__cvt+0x6a>
 800a1e2:	1c59      	adds	r1, r3, #1
 800a1e4:	9103      	str	r1, [sp, #12]
 800a1e6:	701a      	strb	r2, [r3, #0]
 800a1e8:	e7d9      	b.n	800a19e <__cvt+0x7e>

0800a1ea <__exponent>:
 800a1ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1ec:	2900      	cmp	r1, #0
 800a1ee:	bfba      	itte	lt
 800a1f0:	4249      	neglt	r1, r1
 800a1f2:	232d      	movlt	r3, #45	@ 0x2d
 800a1f4:	232b      	movge	r3, #43	@ 0x2b
 800a1f6:	2909      	cmp	r1, #9
 800a1f8:	7002      	strb	r2, [r0, #0]
 800a1fa:	7043      	strb	r3, [r0, #1]
 800a1fc:	dd29      	ble.n	800a252 <__exponent+0x68>
 800a1fe:	f10d 0307 	add.w	r3, sp, #7
 800a202:	461d      	mov	r5, r3
 800a204:	270a      	movs	r7, #10
 800a206:	461a      	mov	r2, r3
 800a208:	fbb1 f6f7 	udiv	r6, r1, r7
 800a20c:	fb07 1416 	mls	r4, r7, r6, r1
 800a210:	3430      	adds	r4, #48	@ 0x30
 800a212:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a216:	460c      	mov	r4, r1
 800a218:	2c63      	cmp	r4, #99	@ 0x63
 800a21a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a21e:	4631      	mov	r1, r6
 800a220:	dcf1      	bgt.n	800a206 <__exponent+0x1c>
 800a222:	3130      	adds	r1, #48	@ 0x30
 800a224:	1e94      	subs	r4, r2, #2
 800a226:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a22a:	1c41      	adds	r1, r0, #1
 800a22c:	4623      	mov	r3, r4
 800a22e:	42ab      	cmp	r3, r5
 800a230:	d30a      	bcc.n	800a248 <__exponent+0x5e>
 800a232:	f10d 0309 	add.w	r3, sp, #9
 800a236:	1a9b      	subs	r3, r3, r2
 800a238:	42ac      	cmp	r4, r5
 800a23a:	bf88      	it	hi
 800a23c:	2300      	movhi	r3, #0
 800a23e:	3302      	adds	r3, #2
 800a240:	4403      	add	r3, r0
 800a242:	1a18      	subs	r0, r3, r0
 800a244:	b003      	add	sp, #12
 800a246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a248:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a24c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a250:	e7ed      	b.n	800a22e <__exponent+0x44>
 800a252:	2330      	movs	r3, #48	@ 0x30
 800a254:	3130      	adds	r1, #48	@ 0x30
 800a256:	7083      	strb	r3, [r0, #2]
 800a258:	70c1      	strb	r1, [r0, #3]
 800a25a:	1d03      	adds	r3, r0, #4
 800a25c:	e7f1      	b.n	800a242 <__exponent+0x58>
	...

0800a260 <_printf_float>:
 800a260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a264:	b08d      	sub	sp, #52	@ 0x34
 800a266:	460c      	mov	r4, r1
 800a268:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a26c:	4616      	mov	r6, r2
 800a26e:	461f      	mov	r7, r3
 800a270:	4605      	mov	r5, r0
 800a272:	f000 ff23 	bl	800b0bc <_localeconv_r>
 800a276:	6803      	ldr	r3, [r0, #0]
 800a278:	9304      	str	r3, [sp, #16]
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7f6 f800 	bl	8000280 <strlen>
 800a280:	2300      	movs	r3, #0
 800a282:	930a      	str	r3, [sp, #40]	@ 0x28
 800a284:	f8d8 3000 	ldr.w	r3, [r8]
 800a288:	9005      	str	r0, [sp, #20]
 800a28a:	3307      	adds	r3, #7
 800a28c:	f023 0307 	bic.w	r3, r3, #7
 800a290:	f103 0208 	add.w	r2, r3, #8
 800a294:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a298:	f8d4 b000 	ldr.w	fp, [r4]
 800a29c:	f8c8 2000 	str.w	r2, [r8]
 800a2a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a2a8:	9307      	str	r3, [sp, #28]
 800a2aa:	f8cd 8018 	str.w	r8, [sp, #24]
 800a2ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a2b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2b6:	4b9c      	ldr	r3, [pc, #624]	@ (800a528 <_printf_float+0x2c8>)
 800a2b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2bc:	f7f6 fc3e 	bl	8000b3c <__aeabi_dcmpun>
 800a2c0:	bb70      	cbnz	r0, 800a320 <_printf_float+0xc0>
 800a2c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2c6:	4b98      	ldr	r3, [pc, #608]	@ (800a528 <_printf_float+0x2c8>)
 800a2c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2cc:	f7f6 fc18 	bl	8000b00 <__aeabi_dcmple>
 800a2d0:	bb30      	cbnz	r0, 800a320 <_printf_float+0xc0>
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	4640      	mov	r0, r8
 800a2d8:	4649      	mov	r1, r9
 800a2da:	f7f6 fc07 	bl	8000aec <__aeabi_dcmplt>
 800a2de:	b110      	cbz	r0, 800a2e6 <_printf_float+0x86>
 800a2e0:	232d      	movs	r3, #45	@ 0x2d
 800a2e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2e6:	4a91      	ldr	r2, [pc, #580]	@ (800a52c <_printf_float+0x2cc>)
 800a2e8:	4b91      	ldr	r3, [pc, #580]	@ (800a530 <_printf_float+0x2d0>)
 800a2ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a2ee:	bf94      	ite	ls
 800a2f0:	4690      	movls	r8, r2
 800a2f2:	4698      	movhi	r8, r3
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	6123      	str	r3, [r4, #16]
 800a2f8:	f02b 0304 	bic.w	r3, fp, #4
 800a2fc:	6023      	str	r3, [r4, #0]
 800a2fe:	f04f 0900 	mov.w	r9, #0
 800a302:	9700      	str	r7, [sp, #0]
 800a304:	4633      	mov	r3, r6
 800a306:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a308:	4621      	mov	r1, r4
 800a30a:	4628      	mov	r0, r5
 800a30c:	f000 f9d2 	bl	800a6b4 <_printf_common>
 800a310:	3001      	adds	r0, #1
 800a312:	f040 808d 	bne.w	800a430 <_printf_float+0x1d0>
 800a316:	f04f 30ff 	mov.w	r0, #4294967295
 800a31a:	b00d      	add	sp, #52	@ 0x34
 800a31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a320:	4642      	mov	r2, r8
 800a322:	464b      	mov	r3, r9
 800a324:	4640      	mov	r0, r8
 800a326:	4649      	mov	r1, r9
 800a328:	f7f6 fc08 	bl	8000b3c <__aeabi_dcmpun>
 800a32c:	b140      	cbz	r0, 800a340 <_printf_float+0xe0>
 800a32e:	464b      	mov	r3, r9
 800a330:	2b00      	cmp	r3, #0
 800a332:	bfbc      	itt	lt
 800a334:	232d      	movlt	r3, #45	@ 0x2d
 800a336:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a33a:	4a7e      	ldr	r2, [pc, #504]	@ (800a534 <_printf_float+0x2d4>)
 800a33c:	4b7e      	ldr	r3, [pc, #504]	@ (800a538 <_printf_float+0x2d8>)
 800a33e:	e7d4      	b.n	800a2ea <_printf_float+0x8a>
 800a340:	6863      	ldr	r3, [r4, #4]
 800a342:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a346:	9206      	str	r2, [sp, #24]
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	d13b      	bne.n	800a3c4 <_printf_float+0x164>
 800a34c:	2306      	movs	r3, #6
 800a34e:	6063      	str	r3, [r4, #4]
 800a350:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a354:	2300      	movs	r3, #0
 800a356:	6022      	str	r2, [r4, #0]
 800a358:	9303      	str	r3, [sp, #12]
 800a35a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a35c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a360:	ab09      	add	r3, sp, #36	@ 0x24
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	6861      	ldr	r1, [r4, #4]
 800a366:	ec49 8b10 	vmov	d0, r8, r9
 800a36a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a36e:	4628      	mov	r0, r5
 800a370:	f7ff fed6 	bl	800a120 <__cvt>
 800a374:	9b06      	ldr	r3, [sp, #24]
 800a376:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a378:	2b47      	cmp	r3, #71	@ 0x47
 800a37a:	4680      	mov	r8, r0
 800a37c:	d129      	bne.n	800a3d2 <_printf_float+0x172>
 800a37e:	1cc8      	adds	r0, r1, #3
 800a380:	db02      	blt.n	800a388 <_printf_float+0x128>
 800a382:	6863      	ldr	r3, [r4, #4]
 800a384:	4299      	cmp	r1, r3
 800a386:	dd41      	ble.n	800a40c <_printf_float+0x1ac>
 800a388:	f1aa 0a02 	sub.w	sl, sl, #2
 800a38c:	fa5f fa8a 	uxtb.w	sl, sl
 800a390:	3901      	subs	r1, #1
 800a392:	4652      	mov	r2, sl
 800a394:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a398:	9109      	str	r1, [sp, #36]	@ 0x24
 800a39a:	f7ff ff26 	bl	800a1ea <__exponent>
 800a39e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3a0:	1813      	adds	r3, r2, r0
 800a3a2:	2a01      	cmp	r2, #1
 800a3a4:	4681      	mov	r9, r0
 800a3a6:	6123      	str	r3, [r4, #16]
 800a3a8:	dc02      	bgt.n	800a3b0 <_printf_float+0x150>
 800a3aa:	6822      	ldr	r2, [r4, #0]
 800a3ac:	07d2      	lsls	r2, r2, #31
 800a3ae:	d501      	bpl.n	800a3b4 <_printf_float+0x154>
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	6123      	str	r3, [r4, #16]
 800a3b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d0a2      	beq.n	800a302 <_printf_float+0xa2>
 800a3bc:	232d      	movs	r3, #45	@ 0x2d
 800a3be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3c2:	e79e      	b.n	800a302 <_printf_float+0xa2>
 800a3c4:	9a06      	ldr	r2, [sp, #24]
 800a3c6:	2a47      	cmp	r2, #71	@ 0x47
 800a3c8:	d1c2      	bne.n	800a350 <_printf_float+0xf0>
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d1c0      	bne.n	800a350 <_printf_float+0xf0>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e7bd      	b.n	800a34e <_printf_float+0xee>
 800a3d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a3d6:	d9db      	bls.n	800a390 <_printf_float+0x130>
 800a3d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a3dc:	d118      	bne.n	800a410 <_printf_float+0x1b0>
 800a3de:	2900      	cmp	r1, #0
 800a3e0:	6863      	ldr	r3, [r4, #4]
 800a3e2:	dd0b      	ble.n	800a3fc <_printf_float+0x19c>
 800a3e4:	6121      	str	r1, [r4, #16]
 800a3e6:	b913      	cbnz	r3, 800a3ee <_printf_float+0x18e>
 800a3e8:	6822      	ldr	r2, [r4, #0]
 800a3ea:	07d0      	lsls	r0, r2, #31
 800a3ec:	d502      	bpl.n	800a3f4 <_printf_float+0x194>
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	440b      	add	r3, r1
 800a3f2:	6123      	str	r3, [r4, #16]
 800a3f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a3f6:	f04f 0900 	mov.w	r9, #0
 800a3fa:	e7db      	b.n	800a3b4 <_printf_float+0x154>
 800a3fc:	b913      	cbnz	r3, 800a404 <_printf_float+0x1a4>
 800a3fe:	6822      	ldr	r2, [r4, #0]
 800a400:	07d2      	lsls	r2, r2, #31
 800a402:	d501      	bpl.n	800a408 <_printf_float+0x1a8>
 800a404:	3302      	adds	r3, #2
 800a406:	e7f4      	b.n	800a3f2 <_printf_float+0x192>
 800a408:	2301      	movs	r3, #1
 800a40a:	e7f2      	b.n	800a3f2 <_printf_float+0x192>
 800a40c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a412:	4299      	cmp	r1, r3
 800a414:	db05      	blt.n	800a422 <_printf_float+0x1c2>
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	6121      	str	r1, [r4, #16]
 800a41a:	07d8      	lsls	r0, r3, #31
 800a41c:	d5ea      	bpl.n	800a3f4 <_printf_float+0x194>
 800a41e:	1c4b      	adds	r3, r1, #1
 800a420:	e7e7      	b.n	800a3f2 <_printf_float+0x192>
 800a422:	2900      	cmp	r1, #0
 800a424:	bfd4      	ite	le
 800a426:	f1c1 0202 	rsble	r2, r1, #2
 800a42a:	2201      	movgt	r2, #1
 800a42c:	4413      	add	r3, r2
 800a42e:	e7e0      	b.n	800a3f2 <_printf_float+0x192>
 800a430:	6823      	ldr	r3, [r4, #0]
 800a432:	055a      	lsls	r2, r3, #21
 800a434:	d407      	bmi.n	800a446 <_printf_float+0x1e6>
 800a436:	6923      	ldr	r3, [r4, #16]
 800a438:	4642      	mov	r2, r8
 800a43a:	4631      	mov	r1, r6
 800a43c:	4628      	mov	r0, r5
 800a43e:	47b8      	blx	r7
 800a440:	3001      	adds	r0, #1
 800a442:	d12b      	bne.n	800a49c <_printf_float+0x23c>
 800a444:	e767      	b.n	800a316 <_printf_float+0xb6>
 800a446:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a44a:	f240 80dd 	bls.w	800a608 <_printf_float+0x3a8>
 800a44e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a452:	2200      	movs	r2, #0
 800a454:	2300      	movs	r3, #0
 800a456:	f7f6 fb3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a45a:	2800      	cmp	r0, #0
 800a45c:	d033      	beq.n	800a4c6 <_printf_float+0x266>
 800a45e:	4a37      	ldr	r2, [pc, #220]	@ (800a53c <_printf_float+0x2dc>)
 800a460:	2301      	movs	r3, #1
 800a462:	4631      	mov	r1, r6
 800a464:	4628      	mov	r0, r5
 800a466:	47b8      	blx	r7
 800a468:	3001      	adds	r0, #1
 800a46a:	f43f af54 	beq.w	800a316 <_printf_float+0xb6>
 800a46e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a472:	4543      	cmp	r3, r8
 800a474:	db02      	blt.n	800a47c <_printf_float+0x21c>
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	07d8      	lsls	r0, r3, #31
 800a47a:	d50f      	bpl.n	800a49c <_printf_float+0x23c>
 800a47c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a480:	4631      	mov	r1, r6
 800a482:	4628      	mov	r0, r5
 800a484:	47b8      	blx	r7
 800a486:	3001      	adds	r0, #1
 800a488:	f43f af45 	beq.w	800a316 <_printf_float+0xb6>
 800a48c:	f04f 0900 	mov.w	r9, #0
 800a490:	f108 38ff 	add.w	r8, r8, #4294967295
 800a494:	f104 0a1a 	add.w	sl, r4, #26
 800a498:	45c8      	cmp	r8, r9
 800a49a:	dc09      	bgt.n	800a4b0 <_printf_float+0x250>
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	079b      	lsls	r3, r3, #30
 800a4a0:	f100 8103 	bmi.w	800a6aa <_printf_float+0x44a>
 800a4a4:	68e0      	ldr	r0, [r4, #12]
 800a4a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4a8:	4298      	cmp	r0, r3
 800a4aa:	bfb8      	it	lt
 800a4ac:	4618      	movlt	r0, r3
 800a4ae:	e734      	b.n	800a31a <_printf_float+0xba>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	4652      	mov	r2, sl
 800a4b4:	4631      	mov	r1, r6
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	47b8      	blx	r7
 800a4ba:	3001      	adds	r0, #1
 800a4bc:	f43f af2b 	beq.w	800a316 <_printf_float+0xb6>
 800a4c0:	f109 0901 	add.w	r9, r9, #1
 800a4c4:	e7e8      	b.n	800a498 <_printf_float+0x238>
 800a4c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	dc39      	bgt.n	800a540 <_printf_float+0x2e0>
 800a4cc:	4a1b      	ldr	r2, [pc, #108]	@ (800a53c <_printf_float+0x2dc>)
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	4631      	mov	r1, r6
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	47b8      	blx	r7
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	f43f af1d 	beq.w	800a316 <_printf_float+0xb6>
 800a4dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a4e0:	ea59 0303 	orrs.w	r3, r9, r3
 800a4e4:	d102      	bne.n	800a4ec <_printf_float+0x28c>
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	07d9      	lsls	r1, r3, #31
 800a4ea:	d5d7      	bpl.n	800a49c <_printf_float+0x23c>
 800a4ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4f0:	4631      	mov	r1, r6
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	47b8      	blx	r7
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	f43f af0d 	beq.w	800a316 <_printf_float+0xb6>
 800a4fc:	f04f 0a00 	mov.w	sl, #0
 800a500:	f104 0b1a 	add.w	fp, r4, #26
 800a504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a506:	425b      	negs	r3, r3
 800a508:	4553      	cmp	r3, sl
 800a50a:	dc01      	bgt.n	800a510 <_printf_float+0x2b0>
 800a50c:	464b      	mov	r3, r9
 800a50e:	e793      	b.n	800a438 <_printf_float+0x1d8>
 800a510:	2301      	movs	r3, #1
 800a512:	465a      	mov	r2, fp
 800a514:	4631      	mov	r1, r6
 800a516:	4628      	mov	r0, r5
 800a518:	47b8      	blx	r7
 800a51a:	3001      	adds	r0, #1
 800a51c:	f43f aefb 	beq.w	800a316 <_printf_float+0xb6>
 800a520:	f10a 0a01 	add.w	sl, sl, #1
 800a524:	e7ee      	b.n	800a504 <_printf_float+0x2a4>
 800a526:	bf00      	nop
 800a528:	7fefffff 	.word	0x7fefffff
 800a52c:	0800ee10 	.word	0x0800ee10
 800a530:	0800ee14 	.word	0x0800ee14
 800a534:	0800ee18 	.word	0x0800ee18
 800a538:	0800ee1c 	.word	0x0800ee1c
 800a53c:	0800ee20 	.word	0x0800ee20
 800a540:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a542:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a546:	4553      	cmp	r3, sl
 800a548:	bfa8      	it	ge
 800a54a:	4653      	movge	r3, sl
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	4699      	mov	r9, r3
 800a550:	dc36      	bgt.n	800a5c0 <_printf_float+0x360>
 800a552:	f04f 0b00 	mov.w	fp, #0
 800a556:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a55a:	f104 021a 	add.w	r2, r4, #26
 800a55e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a560:	9306      	str	r3, [sp, #24]
 800a562:	eba3 0309 	sub.w	r3, r3, r9
 800a566:	455b      	cmp	r3, fp
 800a568:	dc31      	bgt.n	800a5ce <_printf_float+0x36e>
 800a56a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a56c:	459a      	cmp	sl, r3
 800a56e:	dc3a      	bgt.n	800a5e6 <_printf_float+0x386>
 800a570:	6823      	ldr	r3, [r4, #0]
 800a572:	07da      	lsls	r2, r3, #31
 800a574:	d437      	bmi.n	800a5e6 <_printf_float+0x386>
 800a576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a578:	ebaa 0903 	sub.w	r9, sl, r3
 800a57c:	9b06      	ldr	r3, [sp, #24]
 800a57e:	ebaa 0303 	sub.w	r3, sl, r3
 800a582:	4599      	cmp	r9, r3
 800a584:	bfa8      	it	ge
 800a586:	4699      	movge	r9, r3
 800a588:	f1b9 0f00 	cmp.w	r9, #0
 800a58c:	dc33      	bgt.n	800a5f6 <_printf_float+0x396>
 800a58e:	f04f 0800 	mov.w	r8, #0
 800a592:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a596:	f104 0b1a 	add.w	fp, r4, #26
 800a59a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a59c:	ebaa 0303 	sub.w	r3, sl, r3
 800a5a0:	eba3 0309 	sub.w	r3, r3, r9
 800a5a4:	4543      	cmp	r3, r8
 800a5a6:	f77f af79 	ble.w	800a49c <_printf_float+0x23c>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	465a      	mov	r2, fp
 800a5ae:	4631      	mov	r1, r6
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	47b8      	blx	r7
 800a5b4:	3001      	adds	r0, #1
 800a5b6:	f43f aeae 	beq.w	800a316 <_printf_float+0xb6>
 800a5ba:	f108 0801 	add.w	r8, r8, #1
 800a5be:	e7ec      	b.n	800a59a <_printf_float+0x33a>
 800a5c0:	4642      	mov	r2, r8
 800a5c2:	4631      	mov	r1, r6
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	47b8      	blx	r7
 800a5c8:	3001      	adds	r0, #1
 800a5ca:	d1c2      	bne.n	800a552 <_printf_float+0x2f2>
 800a5cc:	e6a3      	b.n	800a316 <_printf_float+0xb6>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	4631      	mov	r1, r6
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	9206      	str	r2, [sp, #24]
 800a5d6:	47b8      	blx	r7
 800a5d8:	3001      	adds	r0, #1
 800a5da:	f43f ae9c 	beq.w	800a316 <_printf_float+0xb6>
 800a5de:	9a06      	ldr	r2, [sp, #24]
 800a5e0:	f10b 0b01 	add.w	fp, fp, #1
 800a5e4:	e7bb      	b.n	800a55e <_printf_float+0x2fe>
 800a5e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5ea:	4631      	mov	r1, r6
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	47b8      	blx	r7
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d1c0      	bne.n	800a576 <_printf_float+0x316>
 800a5f4:	e68f      	b.n	800a316 <_printf_float+0xb6>
 800a5f6:	9a06      	ldr	r2, [sp, #24]
 800a5f8:	464b      	mov	r3, r9
 800a5fa:	4442      	add	r2, r8
 800a5fc:	4631      	mov	r1, r6
 800a5fe:	4628      	mov	r0, r5
 800a600:	47b8      	blx	r7
 800a602:	3001      	adds	r0, #1
 800a604:	d1c3      	bne.n	800a58e <_printf_float+0x32e>
 800a606:	e686      	b.n	800a316 <_printf_float+0xb6>
 800a608:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a60c:	f1ba 0f01 	cmp.w	sl, #1
 800a610:	dc01      	bgt.n	800a616 <_printf_float+0x3b6>
 800a612:	07db      	lsls	r3, r3, #31
 800a614:	d536      	bpl.n	800a684 <_printf_float+0x424>
 800a616:	2301      	movs	r3, #1
 800a618:	4642      	mov	r2, r8
 800a61a:	4631      	mov	r1, r6
 800a61c:	4628      	mov	r0, r5
 800a61e:	47b8      	blx	r7
 800a620:	3001      	adds	r0, #1
 800a622:	f43f ae78 	beq.w	800a316 <_printf_float+0xb6>
 800a626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a62a:	4631      	mov	r1, r6
 800a62c:	4628      	mov	r0, r5
 800a62e:	47b8      	blx	r7
 800a630:	3001      	adds	r0, #1
 800a632:	f43f ae70 	beq.w	800a316 <_printf_float+0xb6>
 800a636:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a63a:	2200      	movs	r2, #0
 800a63c:	2300      	movs	r3, #0
 800a63e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a642:	f7f6 fa49 	bl	8000ad8 <__aeabi_dcmpeq>
 800a646:	b9c0      	cbnz	r0, 800a67a <_printf_float+0x41a>
 800a648:	4653      	mov	r3, sl
 800a64a:	f108 0201 	add.w	r2, r8, #1
 800a64e:	4631      	mov	r1, r6
 800a650:	4628      	mov	r0, r5
 800a652:	47b8      	blx	r7
 800a654:	3001      	adds	r0, #1
 800a656:	d10c      	bne.n	800a672 <_printf_float+0x412>
 800a658:	e65d      	b.n	800a316 <_printf_float+0xb6>
 800a65a:	2301      	movs	r3, #1
 800a65c:	465a      	mov	r2, fp
 800a65e:	4631      	mov	r1, r6
 800a660:	4628      	mov	r0, r5
 800a662:	47b8      	blx	r7
 800a664:	3001      	adds	r0, #1
 800a666:	f43f ae56 	beq.w	800a316 <_printf_float+0xb6>
 800a66a:	f108 0801 	add.w	r8, r8, #1
 800a66e:	45d0      	cmp	r8, sl
 800a670:	dbf3      	blt.n	800a65a <_printf_float+0x3fa>
 800a672:	464b      	mov	r3, r9
 800a674:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a678:	e6df      	b.n	800a43a <_printf_float+0x1da>
 800a67a:	f04f 0800 	mov.w	r8, #0
 800a67e:	f104 0b1a 	add.w	fp, r4, #26
 800a682:	e7f4      	b.n	800a66e <_printf_float+0x40e>
 800a684:	2301      	movs	r3, #1
 800a686:	4642      	mov	r2, r8
 800a688:	e7e1      	b.n	800a64e <_printf_float+0x3ee>
 800a68a:	2301      	movs	r3, #1
 800a68c:	464a      	mov	r2, r9
 800a68e:	4631      	mov	r1, r6
 800a690:	4628      	mov	r0, r5
 800a692:	47b8      	blx	r7
 800a694:	3001      	adds	r0, #1
 800a696:	f43f ae3e 	beq.w	800a316 <_printf_float+0xb6>
 800a69a:	f108 0801 	add.w	r8, r8, #1
 800a69e:	68e3      	ldr	r3, [r4, #12]
 800a6a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6a2:	1a5b      	subs	r3, r3, r1
 800a6a4:	4543      	cmp	r3, r8
 800a6a6:	dcf0      	bgt.n	800a68a <_printf_float+0x42a>
 800a6a8:	e6fc      	b.n	800a4a4 <_printf_float+0x244>
 800a6aa:	f04f 0800 	mov.w	r8, #0
 800a6ae:	f104 0919 	add.w	r9, r4, #25
 800a6b2:	e7f4      	b.n	800a69e <_printf_float+0x43e>

0800a6b4 <_printf_common>:
 800a6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b8:	4616      	mov	r6, r2
 800a6ba:	4698      	mov	r8, r3
 800a6bc:	688a      	ldr	r2, [r1, #8]
 800a6be:	690b      	ldr	r3, [r1, #16]
 800a6c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	bfb8      	it	lt
 800a6c8:	4613      	movlt	r3, r2
 800a6ca:	6033      	str	r3, [r6, #0]
 800a6cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a6d0:	4607      	mov	r7, r0
 800a6d2:	460c      	mov	r4, r1
 800a6d4:	b10a      	cbz	r2, 800a6da <_printf_common+0x26>
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	6033      	str	r3, [r6, #0]
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	0699      	lsls	r1, r3, #26
 800a6de:	bf42      	ittt	mi
 800a6e0:	6833      	ldrmi	r3, [r6, #0]
 800a6e2:	3302      	addmi	r3, #2
 800a6e4:	6033      	strmi	r3, [r6, #0]
 800a6e6:	6825      	ldr	r5, [r4, #0]
 800a6e8:	f015 0506 	ands.w	r5, r5, #6
 800a6ec:	d106      	bne.n	800a6fc <_printf_common+0x48>
 800a6ee:	f104 0a19 	add.w	sl, r4, #25
 800a6f2:	68e3      	ldr	r3, [r4, #12]
 800a6f4:	6832      	ldr	r2, [r6, #0]
 800a6f6:	1a9b      	subs	r3, r3, r2
 800a6f8:	42ab      	cmp	r3, r5
 800a6fa:	dc26      	bgt.n	800a74a <_printf_common+0x96>
 800a6fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a700:	6822      	ldr	r2, [r4, #0]
 800a702:	3b00      	subs	r3, #0
 800a704:	bf18      	it	ne
 800a706:	2301      	movne	r3, #1
 800a708:	0692      	lsls	r2, r2, #26
 800a70a:	d42b      	bmi.n	800a764 <_printf_common+0xb0>
 800a70c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a710:	4641      	mov	r1, r8
 800a712:	4638      	mov	r0, r7
 800a714:	47c8      	blx	r9
 800a716:	3001      	adds	r0, #1
 800a718:	d01e      	beq.n	800a758 <_printf_common+0xa4>
 800a71a:	6823      	ldr	r3, [r4, #0]
 800a71c:	6922      	ldr	r2, [r4, #16]
 800a71e:	f003 0306 	and.w	r3, r3, #6
 800a722:	2b04      	cmp	r3, #4
 800a724:	bf02      	ittt	eq
 800a726:	68e5      	ldreq	r5, [r4, #12]
 800a728:	6833      	ldreq	r3, [r6, #0]
 800a72a:	1aed      	subeq	r5, r5, r3
 800a72c:	68a3      	ldr	r3, [r4, #8]
 800a72e:	bf0c      	ite	eq
 800a730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a734:	2500      	movne	r5, #0
 800a736:	4293      	cmp	r3, r2
 800a738:	bfc4      	itt	gt
 800a73a:	1a9b      	subgt	r3, r3, r2
 800a73c:	18ed      	addgt	r5, r5, r3
 800a73e:	2600      	movs	r6, #0
 800a740:	341a      	adds	r4, #26
 800a742:	42b5      	cmp	r5, r6
 800a744:	d11a      	bne.n	800a77c <_printf_common+0xc8>
 800a746:	2000      	movs	r0, #0
 800a748:	e008      	b.n	800a75c <_printf_common+0xa8>
 800a74a:	2301      	movs	r3, #1
 800a74c:	4652      	mov	r2, sl
 800a74e:	4641      	mov	r1, r8
 800a750:	4638      	mov	r0, r7
 800a752:	47c8      	blx	r9
 800a754:	3001      	adds	r0, #1
 800a756:	d103      	bne.n	800a760 <_printf_common+0xac>
 800a758:	f04f 30ff 	mov.w	r0, #4294967295
 800a75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a760:	3501      	adds	r5, #1
 800a762:	e7c6      	b.n	800a6f2 <_printf_common+0x3e>
 800a764:	18e1      	adds	r1, r4, r3
 800a766:	1c5a      	adds	r2, r3, #1
 800a768:	2030      	movs	r0, #48	@ 0x30
 800a76a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a76e:	4422      	add	r2, r4
 800a770:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a774:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a778:	3302      	adds	r3, #2
 800a77a:	e7c7      	b.n	800a70c <_printf_common+0x58>
 800a77c:	2301      	movs	r3, #1
 800a77e:	4622      	mov	r2, r4
 800a780:	4641      	mov	r1, r8
 800a782:	4638      	mov	r0, r7
 800a784:	47c8      	blx	r9
 800a786:	3001      	adds	r0, #1
 800a788:	d0e6      	beq.n	800a758 <_printf_common+0xa4>
 800a78a:	3601      	adds	r6, #1
 800a78c:	e7d9      	b.n	800a742 <_printf_common+0x8e>
	...

0800a790 <_printf_i>:
 800a790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a794:	7e0f      	ldrb	r7, [r1, #24]
 800a796:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a798:	2f78      	cmp	r7, #120	@ 0x78
 800a79a:	4691      	mov	r9, r2
 800a79c:	4680      	mov	r8, r0
 800a79e:	460c      	mov	r4, r1
 800a7a0:	469a      	mov	sl, r3
 800a7a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a7a6:	d807      	bhi.n	800a7b8 <_printf_i+0x28>
 800a7a8:	2f62      	cmp	r7, #98	@ 0x62
 800a7aa:	d80a      	bhi.n	800a7c2 <_printf_i+0x32>
 800a7ac:	2f00      	cmp	r7, #0
 800a7ae:	f000 80d2 	beq.w	800a956 <_printf_i+0x1c6>
 800a7b2:	2f58      	cmp	r7, #88	@ 0x58
 800a7b4:	f000 80b9 	beq.w	800a92a <_printf_i+0x19a>
 800a7b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a7bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a7c0:	e03a      	b.n	800a838 <_printf_i+0xa8>
 800a7c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a7c6:	2b15      	cmp	r3, #21
 800a7c8:	d8f6      	bhi.n	800a7b8 <_printf_i+0x28>
 800a7ca:	a101      	add	r1, pc, #4	@ (adr r1, 800a7d0 <_printf_i+0x40>)
 800a7cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7d0:	0800a829 	.word	0x0800a829
 800a7d4:	0800a83d 	.word	0x0800a83d
 800a7d8:	0800a7b9 	.word	0x0800a7b9
 800a7dc:	0800a7b9 	.word	0x0800a7b9
 800a7e0:	0800a7b9 	.word	0x0800a7b9
 800a7e4:	0800a7b9 	.word	0x0800a7b9
 800a7e8:	0800a83d 	.word	0x0800a83d
 800a7ec:	0800a7b9 	.word	0x0800a7b9
 800a7f0:	0800a7b9 	.word	0x0800a7b9
 800a7f4:	0800a7b9 	.word	0x0800a7b9
 800a7f8:	0800a7b9 	.word	0x0800a7b9
 800a7fc:	0800a93d 	.word	0x0800a93d
 800a800:	0800a867 	.word	0x0800a867
 800a804:	0800a8f7 	.word	0x0800a8f7
 800a808:	0800a7b9 	.word	0x0800a7b9
 800a80c:	0800a7b9 	.word	0x0800a7b9
 800a810:	0800a95f 	.word	0x0800a95f
 800a814:	0800a7b9 	.word	0x0800a7b9
 800a818:	0800a867 	.word	0x0800a867
 800a81c:	0800a7b9 	.word	0x0800a7b9
 800a820:	0800a7b9 	.word	0x0800a7b9
 800a824:	0800a8ff 	.word	0x0800a8ff
 800a828:	6833      	ldr	r3, [r6, #0]
 800a82a:	1d1a      	adds	r2, r3, #4
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	6032      	str	r2, [r6, #0]
 800a830:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a834:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a838:	2301      	movs	r3, #1
 800a83a:	e09d      	b.n	800a978 <_printf_i+0x1e8>
 800a83c:	6833      	ldr	r3, [r6, #0]
 800a83e:	6820      	ldr	r0, [r4, #0]
 800a840:	1d19      	adds	r1, r3, #4
 800a842:	6031      	str	r1, [r6, #0]
 800a844:	0606      	lsls	r6, r0, #24
 800a846:	d501      	bpl.n	800a84c <_printf_i+0xbc>
 800a848:	681d      	ldr	r5, [r3, #0]
 800a84a:	e003      	b.n	800a854 <_printf_i+0xc4>
 800a84c:	0645      	lsls	r5, r0, #25
 800a84e:	d5fb      	bpl.n	800a848 <_printf_i+0xb8>
 800a850:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a854:	2d00      	cmp	r5, #0
 800a856:	da03      	bge.n	800a860 <_printf_i+0xd0>
 800a858:	232d      	movs	r3, #45	@ 0x2d
 800a85a:	426d      	negs	r5, r5
 800a85c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a860:	4859      	ldr	r0, [pc, #356]	@ (800a9c8 <_printf_i+0x238>)
 800a862:	230a      	movs	r3, #10
 800a864:	e011      	b.n	800a88a <_printf_i+0xfa>
 800a866:	6821      	ldr	r1, [r4, #0]
 800a868:	6833      	ldr	r3, [r6, #0]
 800a86a:	0608      	lsls	r0, r1, #24
 800a86c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a870:	d402      	bmi.n	800a878 <_printf_i+0xe8>
 800a872:	0649      	lsls	r1, r1, #25
 800a874:	bf48      	it	mi
 800a876:	b2ad      	uxthmi	r5, r5
 800a878:	2f6f      	cmp	r7, #111	@ 0x6f
 800a87a:	4853      	ldr	r0, [pc, #332]	@ (800a9c8 <_printf_i+0x238>)
 800a87c:	6033      	str	r3, [r6, #0]
 800a87e:	bf14      	ite	ne
 800a880:	230a      	movne	r3, #10
 800a882:	2308      	moveq	r3, #8
 800a884:	2100      	movs	r1, #0
 800a886:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a88a:	6866      	ldr	r6, [r4, #4]
 800a88c:	60a6      	str	r6, [r4, #8]
 800a88e:	2e00      	cmp	r6, #0
 800a890:	bfa2      	ittt	ge
 800a892:	6821      	ldrge	r1, [r4, #0]
 800a894:	f021 0104 	bicge.w	r1, r1, #4
 800a898:	6021      	strge	r1, [r4, #0]
 800a89a:	b90d      	cbnz	r5, 800a8a0 <_printf_i+0x110>
 800a89c:	2e00      	cmp	r6, #0
 800a89e:	d04b      	beq.n	800a938 <_printf_i+0x1a8>
 800a8a0:	4616      	mov	r6, r2
 800a8a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a8a6:	fb03 5711 	mls	r7, r3, r1, r5
 800a8aa:	5dc7      	ldrb	r7, [r0, r7]
 800a8ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a8b0:	462f      	mov	r7, r5
 800a8b2:	42bb      	cmp	r3, r7
 800a8b4:	460d      	mov	r5, r1
 800a8b6:	d9f4      	bls.n	800a8a2 <_printf_i+0x112>
 800a8b8:	2b08      	cmp	r3, #8
 800a8ba:	d10b      	bne.n	800a8d4 <_printf_i+0x144>
 800a8bc:	6823      	ldr	r3, [r4, #0]
 800a8be:	07df      	lsls	r7, r3, #31
 800a8c0:	d508      	bpl.n	800a8d4 <_printf_i+0x144>
 800a8c2:	6923      	ldr	r3, [r4, #16]
 800a8c4:	6861      	ldr	r1, [r4, #4]
 800a8c6:	4299      	cmp	r1, r3
 800a8c8:	bfde      	ittt	le
 800a8ca:	2330      	movle	r3, #48	@ 0x30
 800a8cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a8d4:	1b92      	subs	r2, r2, r6
 800a8d6:	6122      	str	r2, [r4, #16]
 800a8d8:	f8cd a000 	str.w	sl, [sp]
 800a8dc:	464b      	mov	r3, r9
 800a8de:	aa03      	add	r2, sp, #12
 800a8e0:	4621      	mov	r1, r4
 800a8e2:	4640      	mov	r0, r8
 800a8e4:	f7ff fee6 	bl	800a6b4 <_printf_common>
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	d14a      	bne.n	800a982 <_printf_i+0x1f2>
 800a8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f0:	b004      	add	sp, #16
 800a8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f6:	6823      	ldr	r3, [r4, #0]
 800a8f8:	f043 0320 	orr.w	r3, r3, #32
 800a8fc:	6023      	str	r3, [r4, #0]
 800a8fe:	4833      	ldr	r0, [pc, #204]	@ (800a9cc <_printf_i+0x23c>)
 800a900:	2778      	movs	r7, #120	@ 0x78
 800a902:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	6831      	ldr	r1, [r6, #0]
 800a90a:	061f      	lsls	r7, r3, #24
 800a90c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a910:	d402      	bmi.n	800a918 <_printf_i+0x188>
 800a912:	065f      	lsls	r7, r3, #25
 800a914:	bf48      	it	mi
 800a916:	b2ad      	uxthmi	r5, r5
 800a918:	6031      	str	r1, [r6, #0]
 800a91a:	07d9      	lsls	r1, r3, #31
 800a91c:	bf44      	itt	mi
 800a91e:	f043 0320 	orrmi.w	r3, r3, #32
 800a922:	6023      	strmi	r3, [r4, #0]
 800a924:	b11d      	cbz	r5, 800a92e <_printf_i+0x19e>
 800a926:	2310      	movs	r3, #16
 800a928:	e7ac      	b.n	800a884 <_printf_i+0xf4>
 800a92a:	4827      	ldr	r0, [pc, #156]	@ (800a9c8 <_printf_i+0x238>)
 800a92c:	e7e9      	b.n	800a902 <_printf_i+0x172>
 800a92e:	6823      	ldr	r3, [r4, #0]
 800a930:	f023 0320 	bic.w	r3, r3, #32
 800a934:	6023      	str	r3, [r4, #0]
 800a936:	e7f6      	b.n	800a926 <_printf_i+0x196>
 800a938:	4616      	mov	r6, r2
 800a93a:	e7bd      	b.n	800a8b8 <_printf_i+0x128>
 800a93c:	6833      	ldr	r3, [r6, #0]
 800a93e:	6825      	ldr	r5, [r4, #0]
 800a940:	6961      	ldr	r1, [r4, #20]
 800a942:	1d18      	adds	r0, r3, #4
 800a944:	6030      	str	r0, [r6, #0]
 800a946:	062e      	lsls	r6, r5, #24
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	d501      	bpl.n	800a950 <_printf_i+0x1c0>
 800a94c:	6019      	str	r1, [r3, #0]
 800a94e:	e002      	b.n	800a956 <_printf_i+0x1c6>
 800a950:	0668      	lsls	r0, r5, #25
 800a952:	d5fb      	bpl.n	800a94c <_printf_i+0x1bc>
 800a954:	8019      	strh	r1, [r3, #0]
 800a956:	2300      	movs	r3, #0
 800a958:	6123      	str	r3, [r4, #16]
 800a95a:	4616      	mov	r6, r2
 800a95c:	e7bc      	b.n	800a8d8 <_printf_i+0x148>
 800a95e:	6833      	ldr	r3, [r6, #0]
 800a960:	1d1a      	adds	r2, r3, #4
 800a962:	6032      	str	r2, [r6, #0]
 800a964:	681e      	ldr	r6, [r3, #0]
 800a966:	6862      	ldr	r2, [r4, #4]
 800a968:	2100      	movs	r1, #0
 800a96a:	4630      	mov	r0, r6
 800a96c:	f7f5 fc38 	bl	80001e0 <memchr>
 800a970:	b108      	cbz	r0, 800a976 <_printf_i+0x1e6>
 800a972:	1b80      	subs	r0, r0, r6
 800a974:	6060      	str	r0, [r4, #4]
 800a976:	6863      	ldr	r3, [r4, #4]
 800a978:	6123      	str	r3, [r4, #16]
 800a97a:	2300      	movs	r3, #0
 800a97c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a980:	e7aa      	b.n	800a8d8 <_printf_i+0x148>
 800a982:	6923      	ldr	r3, [r4, #16]
 800a984:	4632      	mov	r2, r6
 800a986:	4649      	mov	r1, r9
 800a988:	4640      	mov	r0, r8
 800a98a:	47d0      	blx	sl
 800a98c:	3001      	adds	r0, #1
 800a98e:	d0ad      	beq.n	800a8ec <_printf_i+0x15c>
 800a990:	6823      	ldr	r3, [r4, #0]
 800a992:	079b      	lsls	r3, r3, #30
 800a994:	d413      	bmi.n	800a9be <_printf_i+0x22e>
 800a996:	68e0      	ldr	r0, [r4, #12]
 800a998:	9b03      	ldr	r3, [sp, #12]
 800a99a:	4298      	cmp	r0, r3
 800a99c:	bfb8      	it	lt
 800a99e:	4618      	movlt	r0, r3
 800a9a0:	e7a6      	b.n	800a8f0 <_printf_i+0x160>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	4632      	mov	r2, r6
 800a9a6:	4649      	mov	r1, r9
 800a9a8:	4640      	mov	r0, r8
 800a9aa:	47d0      	blx	sl
 800a9ac:	3001      	adds	r0, #1
 800a9ae:	d09d      	beq.n	800a8ec <_printf_i+0x15c>
 800a9b0:	3501      	adds	r5, #1
 800a9b2:	68e3      	ldr	r3, [r4, #12]
 800a9b4:	9903      	ldr	r1, [sp, #12]
 800a9b6:	1a5b      	subs	r3, r3, r1
 800a9b8:	42ab      	cmp	r3, r5
 800a9ba:	dcf2      	bgt.n	800a9a2 <_printf_i+0x212>
 800a9bc:	e7eb      	b.n	800a996 <_printf_i+0x206>
 800a9be:	2500      	movs	r5, #0
 800a9c0:	f104 0619 	add.w	r6, r4, #25
 800a9c4:	e7f5      	b.n	800a9b2 <_printf_i+0x222>
 800a9c6:	bf00      	nop
 800a9c8:	0800ee22 	.word	0x0800ee22
 800a9cc:	0800ee33 	.word	0x0800ee33

0800a9d0 <_scanf_float>:
 800a9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d4:	b087      	sub	sp, #28
 800a9d6:	4617      	mov	r7, r2
 800a9d8:	9303      	str	r3, [sp, #12]
 800a9da:	688b      	ldr	r3, [r1, #8]
 800a9dc:	1e5a      	subs	r2, r3, #1
 800a9de:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a9e2:	bf81      	itttt	hi
 800a9e4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a9e8:	eb03 0b05 	addhi.w	fp, r3, r5
 800a9ec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a9f0:	608b      	strhi	r3, [r1, #8]
 800a9f2:	680b      	ldr	r3, [r1, #0]
 800a9f4:	460a      	mov	r2, r1
 800a9f6:	f04f 0500 	mov.w	r5, #0
 800a9fa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a9fe:	f842 3b1c 	str.w	r3, [r2], #28
 800aa02:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aa06:	4680      	mov	r8, r0
 800aa08:	460c      	mov	r4, r1
 800aa0a:	bf98      	it	ls
 800aa0c:	f04f 0b00 	movls.w	fp, #0
 800aa10:	9201      	str	r2, [sp, #4]
 800aa12:	4616      	mov	r6, r2
 800aa14:	46aa      	mov	sl, r5
 800aa16:	46a9      	mov	r9, r5
 800aa18:	9502      	str	r5, [sp, #8]
 800aa1a:	68a2      	ldr	r2, [r4, #8]
 800aa1c:	b152      	cbz	r2, 800aa34 <_scanf_float+0x64>
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	2b4e      	cmp	r3, #78	@ 0x4e
 800aa24:	d864      	bhi.n	800aaf0 <_scanf_float+0x120>
 800aa26:	2b40      	cmp	r3, #64	@ 0x40
 800aa28:	d83c      	bhi.n	800aaa4 <_scanf_float+0xd4>
 800aa2a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800aa2e:	b2c8      	uxtb	r0, r1
 800aa30:	280e      	cmp	r0, #14
 800aa32:	d93a      	bls.n	800aaaa <_scanf_float+0xda>
 800aa34:	f1b9 0f00 	cmp.w	r9, #0
 800aa38:	d003      	beq.n	800aa42 <_scanf_float+0x72>
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa40:	6023      	str	r3, [r4, #0]
 800aa42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa46:	f1ba 0f01 	cmp.w	sl, #1
 800aa4a:	f200 8117 	bhi.w	800ac7c <_scanf_float+0x2ac>
 800aa4e:	9b01      	ldr	r3, [sp, #4]
 800aa50:	429e      	cmp	r6, r3
 800aa52:	f200 8108 	bhi.w	800ac66 <_scanf_float+0x296>
 800aa56:	2001      	movs	r0, #1
 800aa58:	b007      	add	sp, #28
 800aa5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800aa62:	2a0d      	cmp	r2, #13
 800aa64:	d8e6      	bhi.n	800aa34 <_scanf_float+0x64>
 800aa66:	a101      	add	r1, pc, #4	@ (adr r1, 800aa6c <_scanf_float+0x9c>)
 800aa68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aa6c:	0800abb3 	.word	0x0800abb3
 800aa70:	0800aa35 	.word	0x0800aa35
 800aa74:	0800aa35 	.word	0x0800aa35
 800aa78:	0800aa35 	.word	0x0800aa35
 800aa7c:	0800ac13 	.word	0x0800ac13
 800aa80:	0800abeb 	.word	0x0800abeb
 800aa84:	0800aa35 	.word	0x0800aa35
 800aa88:	0800aa35 	.word	0x0800aa35
 800aa8c:	0800abc1 	.word	0x0800abc1
 800aa90:	0800aa35 	.word	0x0800aa35
 800aa94:	0800aa35 	.word	0x0800aa35
 800aa98:	0800aa35 	.word	0x0800aa35
 800aa9c:	0800aa35 	.word	0x0800aa35
 800aaa0:	0800ab79 	.word	0x0800ab79
 800aaa4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800aaa8:	e7db      	b.n	800aa62 <_scanf_float+0x92>
 800aaaa:	290e      	cmp	r1, #14
 800aaac:	d8c2      	bhi.n	800aa34 <_scanf_float+0x64>
 800aaae:	a001      	add	r0, pc, #4	@ (adr r0, 800aab4 <_scanf_float+0xe4>)
 800aab0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aab4:	0800ab69 	.word	0x0800ab69
 800aab8:	0800aa35 	.word	0x0800aa35
 800aabc:	0800ab69 	.word	0x0800ab69
 800aac0:	0800abff 	.word	0x0800abff
 800aac4:	0800aa35 	.word	0x0800aa35
 800aac8:	0800ab11 	.word	0x0800ab11
 800aacc:	0800ab4f 	.word	0x0800ab4f
 800aad0:	0800ab4f 	.word	0x0800ab4f
 800aad4:	0800ab4f 	.word	0x0800ab4f
 800aad8:	0800ab4f 	.word	0x0800ab4f
 800aadc:	0800ab4f 	.word	0x0800ab4f
 800aae0:	0800ab4f 	.word	0x0800ab4f
 800aae4:	0800ab4f 	.word	0x0800ab4f
 800aae8:	0800ab4f 	.word	0x0800ab4f
 800aaec:	0800ab4f 	.word	0x0800ab4f
 800aaf0:	2b6e      	cmp	r3, #110	@ 0x6e
 800aaf2:	d809      	bhi.n	800ab08 <_scanf_float+0x138>
 800aaf4:	2b60      	cmp	r3, #96	@ 0x60
 800aaf6:	d8b2      	bhi.n	800aa5e <_scanf_float+0x8e>
 800aaf8:	2b54      	cmp	r3, #84	@ 0x54
 800aafa:	d07b      	beq.n	800abf4 <_scanf_float+0x224>
 800aafc:	2b59      	cmp	r3, #89	@ 0x59
 800aafe:	d199      	bne.n	800aa34 <_scanf_float+0x64>
 800ab00:	2d07      	cmp	r5, #7
 800ab02:	d197      	bne.n	800aa34 <_scanf_float+0x64>
 800ab04:	2508      	movs	r5, #8
 800ab06:	e02c      	b.n	800ab62 <_scanf_float+0x192>
 800ab08:	2b74      	cmp	r3, #116	@ 0x74
 800ab0a:	d073      	beq.n	800abf4 <_scanf_float+0x224>
 800ab0c:	2b79      	cmp	r3, #121	@ 0x79
 800ab0e:	e7f6      	b.n	800aafe <_scanf_float+0x12e>
 800ab10:	6821      	ldr	r1, [r4, #0]
 800ab12:	05c8      	lsls	r0, r1, #23
 800ab14:	d51b      	bpl.n	800ab4e <_scanf_float+0x17e>
 800ab16:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ab1a:	6021      	str	r1, [r4, #0]
 800ab1c:	f109 0901 	add.w	r9, r9, #1
 800ab20:	f1bb 0f00 	cmp.w	fp, #0
 800ab24:	d003      	beq.n	800ab2e <_scanf_float+0x15e>
 800ab26:	3201      	adds	r2, #1
 800ab28:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab2c:	60a2      	str	r2, [r4, #8]
 800ab2e:	68a3      	ldr	r3, [r4, #8]
 800ab30:	3b01      	subs	r3, #1
 800ab32:	60a3      	str	r3, [r4, #8]
 800ab34:	6923      	ldr	r3, [r4, #16]
 800ab36:	3301      	adds	r3, #1
 800ab38:	6123      	str	r3, [r4, #16]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	607b      	str	r3, [r7, #4]
 800ab42:	f340 8087 	ble.w	800ac54 <_scanf_float+0x284>
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	603b      	str	r3, [r7, #0]
 800ab4c:	e765      	b.n	800aa1a <_scanf_float+0x4a>
 800ab4e:	eb1a 0105 	adds.w	r1, sl, r5
 800ab52:	f47f af6f 	bne.w	800aa34 <_scanf_float+0x64>
 800ab56:	6822      	ldr	r2, [r4, #0]
 800ab58:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ab5c:	6022      	str	r2, [r4, #0]
 800ab5e:	460d      	mov	r5, r1
 800ab60:	468a      	mov	sl, r1
 800ab62:	f806 3b01 	strb.w	r3, [r6], #1
 800ab66:	e7e2      	b.n	800ab2e <_scanf_float+0x15e>
 800ab68:	6822      	ldr	r2, [r4, #0]
 800ab6a:	0610      	lsls	r0, r2, #24
 800ab6c:	f57f af62 	bpl.w	800aa34 <_scanf_float+0x64>
 800ab70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ab74:	6022      	str	r2, [r4, #0]
 800ab76:	e7f4      	b.n	800ab62 <_scanf_float+0x192>
 800ab78:	f1ba 0f00 	cmp.w	sl, #0
 800ab7c:	d10e      	bne.n	800ab9c <_scanf_float+0x1cc>
 800ab7e:	f1b9 0f00 	cmp.w	r9, #0
 800ab82:	d10e      	bne.n	800aba2 <_scanf_float+0x1d2>
 800ab84:	6822      	ldr	r2, [r4, #0]
 800ab86:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ab8a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ab8e:	d108      	bne.n	800aba2 <_scanf_float+0x1d2>
 800ab90:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ab94:	6022      	str	r2, [r4, #0]
 800ab96:	f04f 0a01 	mov.w	sl, #1
 800ab9a:	e7e2      	b.n	800ab62 <_scanf_float+0x192>
 800ab9c:	f1ba 0f02 	cmp.w	sl, #2
 800aba0:	d055      	beq.n	800ac4e <_scanf_float+0x27e>
 800aba2:	2d01      	cmp	r5, #1
 800aba4:	d002      	beq.n	800abac <_scanf_float+0x1dc>
 800aba6:	2d04      	cmp	r5, #4
 800aba8:	f47f af44 	bne.w	800aa34 <_scanf_float+0x64>
 800abac:	3501      	adds	r5, #1
 800abae:	b2ed      	uxtb	r5, r5
 800abb0:	e7d7      	b.n	800ab62 <_scanf_float+0x192>
 800abb2:	f1ba 0f01 	cmp.w	sl, #1
 800abb6:	f47f af3d 	bne.w	800aa34 <_scanf_float+0x64>
 800abba:	f04f 0a02 	mov.w	sl, #2
 800abbe:	e7d0      	b.n	800ab62 <_scanf_float+0x192>
 800abc0:	b97d      	cbnz	r5, 800abe2 <_scanf_float+0x212>
 800abc2:	f1b9 0f00 	cmp.w	r9, #0
 800abc6:	f47f af38 	bne.w	800aa3a <_scanf_float+0x6a>
 800abca:	6822      	ldr	r2, [r4, #0]
 800abcc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800abd0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800abd4:	f040 8108 	bne.w	800ade8 <_scanf_float+0x418>
 800abd8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800abdc:	6022      	str	r2, [r4, #0]
 800abde:	2501      	movs	r5, #1
 800abe0:	e7bf      	b.n	800ab62 <_scanf_float+0x192>
 800abe2:	2d03      	cmp	r5, #3
 800abe4:	d0e2      	beq.n	800abac <_scanf_float+0x1dc>
 800abe6:	2d05      	cmp	r5, #5
 800abe8:	e7de      	b.n	800aba8 <_scanf_float+0x1d8>
 800abea:	2d02      	cmp	r5, #2
 800abec:	f47f af22 	bne.w	800aa34 <_scanf_float+0x64>
 800abf0:	2503      	movs	r5, #3
 800abf2:	e7b6      	b.n	800ab62 <_scanf_float+0x192>
 800abf4:	2d06      	cmp	r5, #6
 800abf6:	f47f af1d 	bne.w	800aa34 <_scanf_float+0x64>
 800abfa:	2507      	movs	r5, #7
 800abfc:	e7b1      	b.n	800ab62 <_scanf_float+0x192>
 800abfe:	6822      	ldr	r2, [r4, #0]
 800ac00:	0591      	lsls	r1, r2, #22
 800ac02:	f57f af17 	bpl.w	800aa34 <_scanf_float+0x64>
 800ac06:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ac0a:	6022      	str	r2, [r4, #0]
 800ac0c:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac10:	e7a7      	b.n	800ab62 <_scanf_float+0x192>
 800ac12:	6822      	ldr	r2, [r4, #0]
 800ac14:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ac18:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ac1c:	d006      	beq.n	800ac2c <_scanf_float+0x25c>
 800ac1e:	0550      	lsls	r0, r2, #21
 800ac20:	f57f af08 	bpl.w	800aa34 <_scanf_float+0x64>
 800ac24:	f1b9 0f00 	cmp.w	r9, #0
 800ac28:	f000 80de 	beq.w	800ade8 <_scanf_float+0x418>
 800ac2c:	0591      	lsls	r1, r2, #22
 800ac2e:	bf58      	it	pl
 800ac30:	9902      	ldrpl	r1, [sp, #8]
 800ac32:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ac36:	bf58      	it	pl
 800ac38:	eba9 0101 	subpl.w	r1, r9, r1
 800ac3c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ac40:	bf58      	it	pl
 800ac42:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ac46:	6022      	str	r2, [r4, #0]
 800ac48:	f04f 0900 	mov.w	r9, #0
 800ac4c:	e789      	b.n	800ab62 <_scanf_float+0x192>
 800ac4e:	f04f 0a03 	mov.w	sl, #3
 800ac52:	e786      	b.n	800ab62 <_scanf_float+0x192>
 800ac54:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ac58:	4639      	mov	r1, r7
 800ac5a:	4640      	mov	r0, r8
 800ac5c:	4798      	blx	r3
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	f43f aedb 	beq.w	800aa1a <_scanf_float+0x4a>
 800ac64:	e6e6      	b.n	800aa34 <_scanf_float+0x64>
 800ac66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ac6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac6e:	463a      	mov	r2, r7
 800ac70:	4640      	mov	r0, r8
 800ac72:	4798      	blx	r3
 800ac74:	6923      	ldr	r3, [r4, #16]
 800ac76:	3b01      	subs	r3, #1
 800ac78:	6123      	str	r3, [r4, #16]
 800ac7a:	e6e8      	b.n	800aa4e <_scanf_float+0x7e>
 800ac7c:	1e6b      	subs	r3, r5, #1
 800ac7e:	2b06      	cmp	r3, #6
 800ac80:	d824      	bhi.n	800accc <_scanf_float+0x2fc>
 800ac82:	2d02      	cmp	r5, #2
 800ac84:	d836      	bhi.n	800acf4 <_scanf_float+0x324>
 800ac86:	9b01      	ldr	r3, [sp, #4]
 800ac88:	429e      	cmp	r6, r3
 800ac8a:	f67f aee4 	bls.w	800aa56 <_scanf_float+0x86>
 800ac8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ac92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac96:	463a      	mov	r2, r7
 800ac98:	4640      	mov	r0, r8
 800ac9a:	4798      	blx	r3
 800ac9c:	6923      	ldr	r3, [r4, #16]
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	6123      	str	r3, [r4, #16]
 800aca2:	e7f0      	b.n	800ac86 <_scanf_float+0x2b6>
 800aca4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aca8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800acac:	463a      	mov	r2, r7
 800acae:	4640      	mov	r0, r8
 800acb0:	4798      	blx	r3
 800acb2:	6923      	ldr	r3, [r4, #16]
 800acb4:	3b01      	subs	r3, #1
 800acb6:	6123      	str	r3, [r4, #16]
 800acb8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acbc:	fa5f fa8a 	uxtb.w	sl, sl
 800acc0:	f1ba 0f02 	cmp.w	sl, #2
 800acc4:	d1ee      	bne.n	800aca4 <_scanf_float+0x2d4>
 800acc6:	3d03      	subs	r5, #3
 800acc8:	b2ed      	uxtb	r5, r5
 800acca:	1b76      	subs	r6, r6, r5
 800accc:	6823      	ldr	r3, [r4, #0]
 800acce:	05da      	lsls	r2, r3, #23
 800acd0:	d530      	bpl.n	800ad34 <_scanf_float+0x364>
 800acd2:	055b      	lsls	r3, r3, #21
 800acd4:	d511      	bpl.n	800acfa <_scanf_float+0x32a>
 800acd6:	9b01      	ldr	r3, [sp, #4]
 800acd8:	429e      	cmp	r6, r3
 800acda:	f67f aebc 	bls.w	800aa56 <_scanf_float+0x86>
 800acde:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ace2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ace6:	463a      	mov	r2, r7
 800ace8:	4640      	mov	r0, r8
 800acea:	4798      	blx	r3
 800acec:	6923      	ldr	r3, [r4, #16]
 800acee:	3b01      	subs	r3, #1
 800acf0:	6123      	str	r3, [r4, #16]
 800acf2:	e7f0      	b.n	800acd6 <_scanf_float+0x306>
 800acf4:	46aa      	mov	sl, r5
 800acf6:	46b3      	mov	fp, r6
 800acf8:	e7de      	b.n	800acb8 <_scanf_float+0x2e8>
 800acfa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800acfe:	6923      	ldr	r3, [r4, #16]
 800ad00:	2965      	cmp	r1, #101	@ 0x65
 800ad02:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad06:	f106 35ff 	add.w	r5, r6, #4294967295
 800ad0a:	6123      	str	r3, [r4, #16]
 800ad0c:	d00c      	beq.n	800ad28 <_scanf_float+0x358>
 800ad0e:	2945      	cmp	r1, #69	@ 0x45
 800ad10:	d00a      	beq.n	800ad28 <_scanf_float+0x358>
 800ad12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad16:	463a      	mov	r2, r7
 800ad18:	4640      	mov	r0, r8
 800ad1a:	4798      	blx	r3
 800ad1c:	6923      	ldr	r3, [r4, #16]
 800ad1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ad22:	3b01      	subs	r3, #1
 800ad24:	1eb5      	subs	r5, r6, #2
 800ad26:	6123      	str	r3, [r4, #16]
 800ad28:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad2c:	463a      	mov	r2, r7
 800ad2e:	4640      	mov	r0, r8
 800ad30:	4798      	blx	r3
 800ad32:	462e      	mov	r6, r5
 800ad34:	6822      	ldr	r2, [r4, #0]
 800ad36:	f012 0210 	ands.w	r2, r2, #16
 800ad3a:	d001      	beq.n	800ad40 <_scanf_float+0x370>
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	e68b      	b.n	800aa58 <_scanf_float+0x88>
 800ad40:	7032      	strb	r2, [r6, #0]
 800ad42:	6823      	ldr	r3, [r4, #0]
 800ad44:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ad48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad4c:	d11c      	bne.n	800ad88 <_scanf_float+0x3b8>
 800ad4e:	9b02      	ldr	r3, [sp, #8]
 800ad50:	454b      	cmp	r3, r9
 800ad52:	eba3 0209 	sub.w	r2, r3, r9
 800ad56:	d123      	bne.n	800ada0 <_scanf_float+0x3d0>
 800ad58:	9901      	ldr	r1, [sp, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	4640      	mov	r0, r8
 800ad5e:	f002 fc2b 	bl	800d5b8 <_strtod_r>
 800ad62:	9b03      	ldr	r3, [sp, #12]
 800ad64:	6821      	ldr	r1, [r4, #0]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f011 0f02 	tst.w	r1, #2
 800ad6c:	ec57 6b10 	vmov	r6, r7, d0
 800ad70:	f103 0204 	add.w	r2, r3, #4
 800ad74:	d01f      	beq.n	800adb6 <_scanf_float+0x3e6>
 800ad76:	9903      	ldr	r1, [sp, #12]
 800ad78:	600a      	str	r2, [r1, #0]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	e9c3 6700 	strd	r6, r7, [r3]
 800ad80:	68e3      	ldr	r3, [r4, #12]
 800ad82:	3301      	adds	r3, #1
 800ad84:	60e3      	str	r3, [r4, #12]
 800ad86:	e7d9      	b.n	800ad3c <_scanf_float+0x36c>
 800ad88:	9b04      	ldr	r3, [sp, #16]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d0e4      	beq.n	800ad58 <_scanf_float+0x388>
 800ad8e:	9905      	ldr	r1, [sp, #20]
 800ad90:	230a      	movs	r3, #10
 800ad92:	3101      	adds	r1, #1
 800ad94:	4640      	mov	r0, r8
 800ad96:	f002 fc8f 	bl	800d6b8 <_strtol_r>
 800ad9a:	9b04      	ldr	r3, [sp, #16]
 800ad9c:	9e05      	ldr	r6, [sp, #20]
 800ad9e:	1ac2      	subs	r2, r0, r3
 800ada0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ada4:	429e      	cmp	r6, r3
 800ada6:	bf28      	it	cs
 800ada8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800adac:	4910      	ldr	r1, [pc, #64]	@ (800adf0 <_scanf_float+0x420>)
 800adae:	4630      	mov	r0, r6
 800adb0:	f000 f918 	bl	800afe4 <siprintf>
 800adb4:	e7d0      	b.n	800ad58 <_scanf_float+0x388>
 800adb6:	f011 0f04 	tst.w	r1, #4
 800adba:	9903      	ldr	r1, [sp, #12]
 800adbc:	600a      	str	r2, [r1, #0]
 800adbe:	d1dc      	bne.n	800ad7a <_scanf_float+0x3aa>
 800adc0:	681d      	ldr	r5, [r3, #0]
 800adc2:	4632      	mov	r2, r6
 800adc4:	463b      	mov	r3, r7
 800adc6:	4630      	mov	r0, r6
 800adc8:	4639      	mov	r1, r7
 800adca:	f7f5 feb7 	bl	8000b3c <__aeabi_dcmpun>
 800adce:	b128      	cbz	r0, 800addc <_scanf_float+0x40c>
 800add0:	4808      	ldr	r0, [pc, #32]	@ (800adf4 <_scanf_float+0x424>)
 800add2:	f000 f9eb 	bl	800b1ac <nanf>
 800add6:	ed85 0a00 	vstr	s0, [r5]
 800adda:	e7d1      	b.n	800ad80 <_scanf_float+0x3b0>
 800addc:	4630      	mov	r0, r6
 800adde:	4639      	mov	r1, r7
 800ade0:	f7f5 ff0a 	bl	8000bf8 <__aeabi_d2f>
 800ade4:	6028      	str	r0, [r5, #0]
 800ade6:	e7cb      	b.n	800ad80 <_scanf_float+0x3b0>
 800ade8:	f04f 0900 	mov.w	r9, #0
 800adec:	e629      	b.n	800aa42 <_scanf_float+0x72>
 800adee:	bf00      	nop
 800adf0:	0800ee44 	.word	0x0800ee44
 800adf4:	0800f1dd 	.word	0x0800f1dd

0800adf8 <std>:
 800adf8:	2300      	movs	r3, #0
 800adfa:	b510      	push	{r4, lr}
 800adfc:	4604      	mov	r4, r0
 800adfe:	e9c0 3300 	strd	r3, r3, [r0]
 800ae02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae06:	6083      	str	r3, [r0, #8]
 800ae08:	8181      	strh	r1, [r0, #12]
 800ae0a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae0c:	81c2      	strh	r2, [r0, #14]
 800ae0e:	6183      	str	r3, [r0, #24]
 800ae10:	4619      	mov	r1, r3
 800ae12:	2208      	movs	r2, #8
 800ae14:	305c      	adds	r0, #92	@ 0x5c
 800ae16:	f000 f948 	bl	800b0aa <memset>
 800ae1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ae50 <std+0x58>)
 800ae1c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ae1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ae54 <std+0x5c>)
 800ae20:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ae22:	4b0d      	ldr	r3, [pc, #52]	@ (800ae58 <std+0x60>)
 800ae24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ae26:	4b0d      	ldr	r3, [pc, #52]	@ (800ae5c <std+0x64>)
 800ae28:	6323      	str	r3, [r4, #48]	@ 0x30
 800ae2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ae60 <std+0x68>)
 800ae2c:	6224      	str	r4, [r4, #32]
 800ae2e:	429c      	cmp	r4, r3
 800ae30:	d006      	beq.n	800ae40 <std+0x48>
 800ae32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ae36:	4294      	cmp	r4, r2
 800ae38:	d002      	beq.n	800ae40 <std+0x48>
 800ae3a:	33d0      	adds	r3, #208	@ 0xd0
 800ae3c:	429c      	cmp	r4, r3
 800ae3e:	d105      	bne.n	800ae4c <std+0x54>
 800ae40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ae44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae48:	f000 b9ac 	b.w	800b1a4 <__retarget_lock_init_recursive>
 800ae4c:	bd10      	pop	{r4, pc}
 800ae4e:	bf00      	nop
 800ae50:	0800b025 	.word	0x0800b025
 800ae54:	0800b047 	.word	0x0800b047
 800ae58:	0800b07f 	.word	0x0800b07f
 800ae5c:	0800b0a3 	.word	0x0800b0a3
 800ae60:	20001fc0 	.word	0x20001fc0

0800ae64 <stdio_exit_handler>:
 800ae64:	4a02      	ldr	r2, [pc, #8]	@ (800ae70 <stdio_exit_handler+0xc>)
 800ae66:	4903      	ldr	r1, [pc, #12]	@ (800ae74 <stdio_exit_handler+0x10>)
 800ae68:	4803      	ldr	r0, [pc, #12]	@ (800ae78 <stdio_exit_handler+0x14>)
 800ae6a:	f000 b869 	b.w	800af40 <_fwalk_sglue>
 800ae6e:	bf00      	nop
 800ae70:	20000100 	.word	0x20000100
 800ae74:	0800da75 	.word	0x0800da75
 800ae78:	20000110 	.word	0x20000110

0800ae7c <cleanup_stdio>:
 800ae7c:	6841      	ldr	r1, [r0, #4]
 800ae7e:	4b0c      	ldr	r3, [pc, #48]	@ (800aeb0 <cleanup_stdio+0x34>)
 800ae80:	4299      	cmp	r1, r3
 800ae82:	b510      	push	{r4, lr}
 800ae84:	4604      	mov	r4, r0
 800ae86:	d001      	beq.n	800ae8c <cleanup_stdio+0x10>
 800ae88:	f002 fdf4 	bl	800da74 <_fflush_r>
 800ae8c:	68a1      	ldr	r1, [r4, #8]
 800ae8e:	4b09      	ldr	r3, [pc, #36]	@ (800aeb4 <cleanup_stdio+0x38>)
 800ae90:	4299      	cmp	r1, r3
 800ae92:	d002      	beq.n	800ae9a <cleanup_stdio+0x1e>
 800ae94:	4620      	mov	r0, r4
 800ae96:	f002 fded 	bl	800da74 <_fflush_r>
 800ae9a:	68e1      	ldr	r1, [r4, #12]
 800ae9c:	4b06      	ldr	r3, [pc, #24]	@ (800aeb8 <cleanup_stdio+0x3c>)
 800ae9e:	4299      	cmp	r1, r3
 800aea0:	d004      	beq.n	800aeac <cleanup_stdio+0x30>
 800aea2:	4620      	mov	r0, r4
 800aea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aea8:	f002 bde4 	b.w	800da74 <_fflush_r>
 800aeac:	bd10      	pop	{r4, pc}
 800aeae:	bf00      	nop
 800aeb0:	20001fc0 	.word	0x20001fc0
 800aeb4:	20002028 	.word	0x20002028
 800aeb8:	20002090 	.word	0x20002090

0800aebc <global_stdio_init.part.0>:
 800aebc:	b510      	push	{r4, lr}
 800aebe:	4b0b      	ldr	r3, [pc, #44]	@ (800aeec <global_stdio_init.part.0+0x30>)
 800aec0:	4c0b      	ldr	r4, [pc, #44]	@ (800aef0 <global_stdio_init.part.0+0x34>)
 800aec2:	4a0c      	ldr	r2, [pc, #48]	@ (800aef4 <global_stdio_init.part.0+0x38>)
 800aec4:	601a      	str	r2, [r3, #0]
 800aec6:	4620      	mov	r0, r4
 800aec8:	2200      	movs	r2, #0
 800aeca:	2104      	movs	r1, #4
 800aecc:	f7ff ff94 	bl	800adf8 <std>
 800aed0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aed4:	2201      	movs	r2, #1
 800aed6:	2109      	movs	r1, #9
 800aed8:	f7ff ff8e 	bl	800adf8 <std>
 800aedc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aee0:	2202      	movs	r2, #2
 800aee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aee6:	2112      	movs	r1, #18
 800aee8:	f7ff bf86 	b.w	800adf8 <std>
 800aeec:	200020f8 	.word	0x200020f8
 800aef0:	20001fc0 	.word	0x20001fc0
 800aef4:	0800ae65 	.word	0x0800ae65

0800aef8 <__sfp_lock_acquire>:
 800aef8:	4801      	ldr	r0, [pc, #4]	@ (800af00 <__sfp_lock_acquire+0x8>)
 800aefa:	f000 b954 	b.w	800b1a6 <__retarget_lock_acquire_recursive>
 800aefe:	bf00      	nop
 800af00:	20002101 	.word	0x20002101

0800af04 <__sfp_lock_release>:
 800af04:	4801      	ldr	r0, [pc, #4]	@ (800af0c <__sfp_lock_release+0x8>)
 800af06:	f000 b94f 	b.w	800b1a8 <__retarget_lock_release_recursive>
 800af0a:	bf00      	nop
 800af0c:	20002101 	.word	0x20002101

0800af10 <__sinit>:
 800af10:	b510      	push	{r4, lr}
 800af12:	4604      	mov	r4, r0
 800af14:	f7ff fff0 	bl	800aef8 <__sfp_lock_acquire>
 800af18:	6a23      	ldr	r3, [r4, #32]
 800af1a:	b11b      	cbz	r3, 800af24 <__sinit+0x14>
 800af1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af20:	f7ff bff0 	b.w	800af04 <__sfp_lock_release>
 800af24:	4b04      	ldr	r3, [pc, #16]	@ (800af38 <__sinit+0x28>)
 800af26:	6223      	str	r3, [r4, #32]
 800af28:	4b04      	ldr	r3, [pc, #16]	@ (800af3c <__sinit+0x2c>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1f5      	bne.n	800af1c <__sinit+0xc>
 800af30:	f7ff ffc4 	bl	800aebc <global_stdio_init.part.0>
 800af34:	e7f2      	b.n	800af1c <__sinit+0xc>
 800af36:	bf00      	nop
 800af38:	0800ae7d 	.word	0x0800ae7d
 800af3c:	200020f8 	.word	0x200020f8

0800af40 <_fwalk_sglue>:
 800af40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af44:	4607      	mov	r7, r0
 800af46:	4688      	mov	r8, r1
 800af48:	4614      	mov	r4, r2
 800af4a:	2600      	movs	r6, #0
 800af4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af50:	f1b9 0901 	subs.w	r9, r9, #1
 800af54:	d505      	bpl.n	800af62 <_fwalk_sglue+0x22>
 800af56:	6824      	ldr	r4, [r4, #0]
 800af58:	2c00      	cmp	r4, #0
 800af5a:	d1f7      	bne.n	800af4c <_fwalk_sglue+0xc>
 800af5c:	4630      	mov	r0, r6
 800af5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af62:	89ab      	ldrh	r3, [r5, #12]
 800af64:	2b01      	cmp	r3, #1
 800af66:	d907      	bls.n	800af78 <_fwalk_sglue+0x38>
 800af68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af6c:	3301      	adds	r3, #1
 800af6e:	d003      	beq.n	800af78 <_fwalk_sglue+0x38>
 800af70:	4629      	mov	r1, r5
 800af72:	4638      	mov	r0, r7
 800af74:	47c0      	blx	r8
 800af76:	4306      	orrs	r6, r0
 800af78:	3568      	adds	r5, #104	@ 0x68
 800af7a:	e7e9      	b.n	800af50 <_fwalk_sglue+0x10>

0800af7c <sniprintf>:
 800af7c:	b40c      	push	{r2, r3}
 800af7e:	b530      	push	{r4, r5, lr}
 800af80:	4b17      	ldr	r3, [pc, #92]	@ (800afe0 <sniprintf+0x64>)
 800af82:	1e0c      	subs	r4, r1, #0
 800af84:	681d      	ldr	r5, [r3, #0]
 800af86:	b09d      	sub	sp, #116	@ 0x74
 800af88:	da08      	bge.n	800af9c <sniprintf+0x20>
 800af8a:	238b      	movs	r3, #139	@ 0x8b
 800af8c:	602b      	str	r3, [r5, #0]
 800af8e:	f04f 30ff 	mov.w	r0, #4294967295
 800af92:	b01d      	add	sp, #116	@ 0x74
 800af94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af98:	b002      	add	sp, #8
 800af9a:	4770      	bx	lr
 800af9c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800afa0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800afa4:	bf14      	ite	ne
 800afa6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800afaa:	4623      	moveq	r3, r4
 800afac:	9304      	str	r3, [sp, #16]
 800afae:	9307      	str	r3, [sp, #28]
 800afb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800afb4:	9002      	str	r0, [sp, #8]
 800afb6:	9006      	str	r0, [sp, #24]
 800afb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800afbc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800afbe:	ab21      	add	r3, sp, #132	@ 0x84
 800afc0:	a902      	add	r1, sp, #8
 800afc2:	4628      	mov	r0, r5
 800afc4:	9301      	str	r3, [sp, #4]
 800afc6:	f002 fbd5 	bl	800d774 <_svfiprintf_r>
 800afca:	1c43      	adds	r3, r0, #1
 800afcc:	bfbc      	itt	lt
 800afce:	238b      	movlt	r3, #139	@ 0x8b
 800afd0:	602b      	strlt	r3, [r5, #0]
 800afd2:	2c00      	cmp	r4, #0
 800afd4:	d0dd      	beq.n	800af92 <sniprintf+0x16>
 800afd6:	9b02      	ldr	r3, [sp, #8]
 800afd8:	2200      	movs	r2, #0
 800afda:	701a      	strb	r2, [r3, #0]
 800afdc:	e7d9      	b.n	800af92 <sniprintf+0x16>
 800afde:	bf00      	nop
 800afe0:	2000010c 	.word	0x2000010c

0800afe4 <siprintf>:
 800afe4:	b40e      	push	{r1, r2, r3}
 800afe6:	b500      	push	{lr}
 800afe8:	b09c      	sub	sp, #112	@ 0x70
 800afea:	ab1d      	add	r3, sp, #116	@ 0x74
 800afec:	9002      	str	r0, [sp, #8]
 800afee:	9006      	str	r0, [sp, #24]
 800aff0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aff4:	4809      	ldr	r0, [pc, #36]	@ (800b01c <siprintf+0x38>)
 800aff6:	9107      	str	r1, [sp, #28]
 800aff8:	9104      	str	r1, [sp, #16]
 800affa:	4909      	ldr	r1, [pc, #36]	@ (800b020 <siprintf+0x3c>)
 800affc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b000:	9105      	str	r1, [sp, #20]
 800b002:	6800      	ldr	r0, [r0, #0]
 800b004:	9301      	str	r3, [sp, #4]
 800b006:	a902      	add	r1, sp, #8
 800b008:	f002 fbb4 	bl	800d774 <_svfiprintf_r>
 800b00c:	9b02      	ldr	r3, [sp, #8]
 800b00e:	2200      	movs	r2, #0
 800b010:	701a      	strb	r2, [r3, #0]
 800b012:	b01c      	add	sp, #112	@ 0x70
 800b014:	f85d eb04 	ldr.w	lr, [sp], #4
 800b018:	b003      	add	sp, #12
 800b01a:	4770      	bx	lr
 800b01c:	2000010c 	.word	0x2000010c
 800b020:	ffff0208 	.word	0xffff0208

0800b024 <__sread>:
 800b024:	b510      	push	{r4, lr}
 800b026:	460c      	mov	r4, r1
 800b028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b02c:	f000 f86c 	bl	800b108 <_read_r>
 800b030:	2800      	cmp	r0, #0
 800b032:	bfab      	itete	ge
 800b034:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b036:	89a3      	ldrhlt	r3, [r4, #12]
 800b038:	181b      	addge	r3, r3, r0
 800b03a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b03e:	bfac      	ite	ge
 800b040:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b042:	81a3      	strhlt	r3, [r4, #12]
 800b044:	bd10      	pop	{r4, pc}

0800b046 <__swrite>:
 800b046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b04a:	461f      	mov	r7, r3
 800b04c:	898b      	ldrh	r3, [r1, #12]
 800b04e:	05db      	lsls	r3, r3, #23
 800b050:	4605      	mov	r5, r0
 800b052:	460c      	mov	r4, r1
 800b054:	4616      	mov	r6, r2
 800b056:	d505      	bpl.n	800b064 <__swrite+0x1e>
 800b058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b05c:	2302      	movs	r3, #2
 800b05e:	2200      	movs	r2, #0
 800b060:	f000 f840 	bl	800b0e4 <_lseek_r>
 800b064:	89a3      	ldrh	r3, [r4, #12]
 800b066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b06a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b06e:	81a3      	strh	r3, [r4, #12]
 800b070:	4632      	mov	r2, r6
 800b072:	463b      	mov	r3, r7
 800b074:	4628      	mov	r0, r5
 800b076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b07a:	f000 b857 	b.w	800b12c <_write_r>

0800b07e <__sseek>:
 800b07e:	b510      	push	{r4, lr}
 800b080:	460c      	mov	r4, r1
 800b082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b086:	f000 f82d 	bl	800b0e4 <_lseek_r>
 800b08a:	1c43      	adds	r3, r0, #1
 800b08c:	89a3      	ldrh	r3, [r4, #12]
 800b08e:	bf15      	itete	ne
 800b090:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b092:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b096:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b09a:	81a3      	strheq	r3, [r4, #12]
 800b09c:	bf18      	it	ne
 800b09e:	81a3      	strhne	r3, [r4, #12]
 800b0a0:	bd10      	pop	{r4, pc}

0800b0a2 <__sclose>:
 800b0a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0a6:	f000 b80d 	b.w	800b0c4 <_close_r>

0800b0aa <memset>:
 800b0aa:	4402      	add	r2, r0
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d100      	bne.n	800b0b4 <memset+0xa>
 800b0b2:	4770      	bx	lr
 800b0b4:	f803 1b01 	strb.w	r1, [r3], #1
 800b0b8:	e7f9      	b.n	800b0ae <memset+0x4>
	...

0800b0bc <_localeconv_r>:
 800b0bc:	4800      	ldr	r0, [pc, #0]	@ (800b0c0 <_localeconv_r+0x4>)
 800b0be:	4770      	bx	lr
 800b0c0:	2000024c 	.word	0x2000024c

0800b0c4 <_close_r>:
 800b0c4:	b538      	push	{r3, r4, r5, lr}
 800b0c6:	4d06      	ldr	r5, [pc, #24]	@ (800b0e0 <_close_r+0x1c>)
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	4608      	mov	r0, r1
 800b0ce:	602b      	str	r3, [r5, #0]
 800b0d0:	f7f6 fc74 	bl	80019bc <_close>
 800b0d4:	1c43      	adds	r3, r0, #1
 800b0d6:	d102      	bne.n	800b0de <_close_r+0x1a>
 800b0d8:	682b      	ldr	r3, [r5, #0]
 800b0da:	b103      	cbz	r3, 800b0de <_close_r+0x1a>
 800b0dc:	6023      	str	r3, [r4, #0]
 800b0de:	bd38      	pop	{r3, r4, r5, pc}
 800b0e0:	200020fc 	.word	0x200020fc

0800b0e4 <_lseek_r>:
 800b0e4:	b538      	push	{r3, r4, r5, lr}
 800b0e6:	4d07      	ldr	r5, [pc, #28]	@ (800b104 <_lseek_r+0x20>)
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	4608      	mov	r0, r1
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	602a      	str	r2, [r5, #0]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	f7f6 fc89 	bl	8001a0a <_lseek>
 800b0f8:	1c43      	adds	r3, r0, #1
 800b0fa:	d102      	bne.n	800b102 <_lseek_r+0x1e>
 800b0fc:	682b      	ldr	r3, [r5, #0]
 800b0fe:	b103      	cbz	r3, 800b102 <_lseek_r+0x1e>
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	bd38      	pop	{r3, r4, r5, pc}
 800b104:	200020fc 	.word	0x200020fc

0800b108 <_read_r>:
 800b108:	b538      	push	{r3, r4, r5, lr}
 800b10a:	4d07      	ldr	r5, [pc, #28]	@ (800b128 <_read_r+0x20>)
 800b10c:	4604      	mov	r4, r0
 800b10e:	4608      	mov	r0, r1
 800b110:	4611      	mov	r1, r2
 800b112:	2200      	movs	r2, #0
 800b114:	602a      	str	r2, [r5, #0]
 800b116:	461a      	mov	r2, r3
 800b118:	f7f6 fc17 	bl	800194a <_read>
 800b11c:	1c43      	adds	r3, r0, #1
 800b11e:	d102      	bne.n	800b126 <_read_r+0x1e>
 800b120:	682b      	ldr	r3, [r5, #0]
 800b122:	b103      	cbz	r3, 800b126 <_read_r+0x1e>
 800b124:	6023      	str	r3, [r4, #0]
 800b126:	bd38      	pop	{r3, r4, r5, pc}
 800b128:	200020fc 	.word	0x200020fc

0800b12c <_write_r>:
 800b12c:	b538      	push	{r3, r4, r5, lr}
 800b12e:	4d07      	ldr	r5, [pc, #28]	@ (800b14c <_write_r+0x20>)
 800b130:	4604      	mov	r4, r0
 800b132:	4608      	mov	r0, r1
 800b134:	4611      	mov	r1, r2
 800b136:	2200      	movs	r2, #0
 800b138:	602a      	str	r2, [r5, #0]
 800b13a:	461a      	mov	r2, r3
 800b13c:	f7f6 fc22 	bl	8001984 <_write>
 800b140:	1c43      	adds	r3, r0, #1
 800b142:	d102      	bne.n	800b14a <_write_r+0x1e>
 800b144:	682b      	ldr	r3, [r5, #0]
 800b146:	b103      	cbz	r3, 800b14a <_write_r+0x1e>
 800b148:	6023      	str	r3, [r4, #0]
 800b14a:	bd38      	pop	{r3, r4, r5, pc}
 800b14c:	200020fc 	.word	0x200020fc

0800b150 <__errno>:
 800b150:	4b01      	ldr	r3, [pc, #4]	@ (800b158 <__errno+0x8>)
 800b152:	6818      	ldr	r0, [r3, #0]
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	2000010c 	.word	0x2000010c

0800b15c <__libc_init_array>:
 800b15c:	b570      	push	{r4, r5, r6, lr}
 800b15e:	4d0d      	ldr	r5, [pc, #52]	@ (800b194 <__libc_init_array+0x38>)
 800b160:	4c0d      	ldr	r4, [pc, #52]	@ (800b198 <__libc_init_array+0x3c>)
 800b162:	1b64      	subs	r4, r4, r5
 800b164:	10a4      	asrs	r4, r4, #2
 800b166:	2600      	movs	r6, #0
 800b168:	42a6      	cmp	r6, r4
 800b16a:	d109      	bne.n	800b180 <__libc_init_array+0x24>
 800b16c:	4d0b      	ldr	r5, [pc, #44]	@ (800b19c <__libc_init_array+0x40>)
 800b16e:	4c0c      	ldr	r4, [pc, #48]	@ (800b1a0 <__libc_init_array+0x44>)
 800b170:	f003 fdda 	bl	800ed28 <_init>
 800b174:	1b64      	subs	r4, r4, r5
 800b176:	10a4      	asrs	r4, r4, #2
 800b178:	2600      	movs	r6, #0
 800b17a:	42a6      	cmp	r6, r4
 800b17c:	d105      	bne.n	800b18a <__libc_init_array+0x2e>
 800b17e:	bd70      	pop	{r4, r5, r6, pc}
 800b180:	f855 3b04 	ldr.w	r3, [r5], #4
 800b184:	4798      	blx	r3
 800b186:	3601      	adds	r6, #1
 800b188:	e7ee      	b.n	800b168 <__libc_init_array+0xc>
 800b18a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b18e:	4798      	blx	r3
 800b190:	3601      	adds	r6, #1
 800b192:	e7f2      	b.n	800b17a <__libc_init_array+0x1e>
 800b194:	0800f2b8 	.word	0x0800f2b8
 800b198:	0800f2b8 	.word	0x0800f2b8
 800b19c:	0800f2b8 	.word	0x0800f2b8
 800b1a0:	0800f2bc 	.word	0x0800f2bc

0800b1a4 <__retarget_lock_init_recursive>:
 800b1a4:	4770      	bx	lr

0800b1a6 <__retarget_lock_acquire_recursive>:
 800b1a6:	4770      	bx	lr

0800b1a8 <__retarget_lock_release_recursive>:
 800b1a8:	4770      	bx	lr
	...

0800b1ac <nanf>:
 800b1ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b1b4 <nanf+0x8>
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	7fc00000 	.word	0x7fc00000

0800b1b8 <quorem>:
 800b1b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1bc:	6903      	ldr	r3, [r0, #16]
 800b1be:	690c      	ldr	r4, [r1, #16]
 800b1c0:	42a3      	cmp	r3, r4
 800b1c2:	4607      	mov	r7, r0
 800b1c4:	db7e      	blt.n	800b2c4 <quorem+0x10c>
 800b1c6:	3c01      	subs	r4, #1
 800b1c8:	f101 0814 	add.w	r8, r1, #20
 800b1cc:	00a3      	lsls	r3, r4, #2
 800b1ce:	f100 0514 	add.w	r5, r0, #20
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1d8:	9301      	str	r3, [sp, #4]
 800b1da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b1de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b1ea:	fbb2 f6f3 	udiv	r6, r2, r3
 800b1ee:	d32e      	bcc.n	800b24e <quorem+0x96>
 800b1f0:	f04f 0a00 	mov.w	sl, #0
 800b1f4:	46c4      	mov	ip, r8
 800b1f6:	46ae      	mov	lr, r5
 800b1f8:	46d3      	mov	fp, sl
 800b1fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b1fe:	b298      	uxth	r0, r3
 800b200:	fb06 a000 	mla	r0, r6, r0, sl
 800b204:	0c02      	lsrs	r2, r0, #16
 800b206:	0c1b      	lsrs	r3, r3, #16
 800b208:	fb06 2303 	mla	r3, r6, r3, r2
 800b20c:	f8de 2000 	ldr.w	r2, [lr]
 800b210:	b280      	uxth	r0, r0
 800b212:	b292      	uxth	r2, r2
 800b214:	1a12      	subs	r2, r2, r0
 800b216:	445a      	add	r2, fp
 800b218:	f8de 0000 	ldr.w	r0, [lr]
 800b21c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b220:	b29b      	uxth	r3, r3
 800b222:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b226:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b22a:	b292      	uxth	r2, r2
 800b22c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b230:	45e1      	cmp	r9, ip
 800b232:	f84e 2b04 	str.w	r2, [lr], #4
 800b236:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b23a:	d2de      	bcs.n	800b1fa <quorem+0x42>
 800b23c:	9b00      	ldr	r3, [sp, #0]
 800b23e:	58eb      	ldr	r3, [r5, r3]
 800b240:	b92b      	cbnz	r3, 800b24e <quorem+0x96>
 800b242:	9b01      	ldr	r3, [sp, #4]
 800b244:	3b04      	subs	r3, #4
 800b246:	429d      	cmp	r5, r3
 800b248:	461a      	mov	r2, r3
 800b24a:	d32f      	bcc.n	800b2ac <quorem+0xf4>
 800b24c:	613c      	str	r4, [r7, #16]
 800b24e:	4638      	mov	r0, r7
 800b250:	f001 f9c2 	bl	800c5d8 <__mcmp>
 800b254:	2800      	cmp	r0, #0
 800b256:	db25      	blt.n	800b2a4 <quorem+0xec>
 800b258:	4629      	mov	r1, r5
 800b25a:	2000      	movs	r0, #0
 800b25c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b260:	f8d1 c000 	ldr.w	ip, [r1]
 800b264:	fa1f fe82 	uxth.w	lr, r2
 800b268:	fa1f f38c 	uxth.w	r3, ip
 800b26c:	eba3 030e 	sub.w	r3, r3, lr
 800b270:	4403      	add	r3, r0
 800b272:	0c12      	lsrs	r2, r2, #16
 800b274:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b278:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b282:	45c1      	cmp	r9, r8
 800b284:	f841 3b04 	str.w	r3, [r1], #4
 800b288:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b28c:	d2e6      	bcs.n	800b25c <quorem+0xa4>
 800b28e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b292:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b296:	b922      	cbnz	r2, 800b2a2 <quorem+0xea>
 800b298:	3b04      	subs	r3, #4
 800b29a:	429d      	cmp	r5, r3
 800b29c:	461a      	mov	r2, r3
 800b29e:	d30b      	bcc.n	800b2b8 <quorem+0x100>
 800b2a0:	613c      	str	r4, [r7, #16]
 800b2a2:	3601      	adds	r6, #1
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	b003      	add	sp, #12
 800b2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ac:	6812      	ldr	r2, [r2, #0]
 800b2ae:	3b04      	subs	r3, #4
 800b2b0:	2a00      	cmp	r2, #0
 800b2b2:	d1cb      	bne.n	800b24c <quorem+0x94>
 800b2b4:	3c01      	subs	r4, #1
 800b2b6:	e7c6      	b.n	800b246 <quorem+0x8e>
 800b2b8:	6812      	ldr	r2, [r2, #0]
 800b2ba:	3b04      	subs	r3, #4
 800b2bc:	2a00      	cmp	r2, #0
 800b2be:	d1ef      	bne.n	800b2a0 <quorem+0xe8>
 800b2c0:	3c01      	subs	r4, #1
 800b2c2:	e7ea      	b.n	800b29a <quorem+0xe2>
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	e7ee      	b.n	800b2a6 <quorem+0xee>

0800b2c8 <_dtoa_r>:
 800b2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2cc:	69c7      	ldr	r7, [r0, #28]
 800b2ce:	b099      	sub	sp, #100	@ 0x64
 800b2d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b2d4:	ec55 4b10 	vmov	r4, r5, d0
 800b2d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b2da:	9109      	str	r1, [sp, #36]	@ 0x24
 800b2dc:	4683      	mov	fp, r0
 800b2de:	920e      	str	r2, [sp, #56]	@ 0x38
 800b2e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b2e2:	b97f      	cbnz	r7, 800b304 <_dtoa_r+0x3c>
 800b2e4:	2010      	movs	r0, #16
 800b2e6:	f000 fdfd 	bl	800bee4 <malloc>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	f8cb 001c 	str.w	r0, [fp, #28]
 800b2f0:	b920      	cbnz	r0, 800b2fc <_dtoa_r+0x34>
 800b2f2:	4ba7      	ldr	r3, [pc, #668]	@ (800b590 <_dtoa_r+0x2c8>)
 800b2f4:	21ef      	movs	r1, #239	@ 0xef
 800b2f6:	48a7      	ldr	r0, [pc, #668]	@ (800b594 <_dtoa_r+0x2cc>)
 800b2f8:	f002 fc36 	bl	800db68 <__assert_func>
 800b2fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b300:	6007      	str	r7, [r0, #0]
 800b302:	60c7      	str	r7, [r0, #12]
 800b304:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b308:	6819      	ldr	r1, [r3, #0]
 800b30a:	b159      	cbz	r1, 800b324 <_dtoa_r+0x5c>
 800b30c:	685a      	ldr	r2, [r3, #4]
 800b30e:	604a      	str	r2, [r1, #4]
 800b310:	2301      	movs	r3, #1
 800b312:	4093      	lsls	r3, r2
 800b314:	608b      	str	r3, [r1, #8]
 800b316:	4658      	mov	r0, fp
 800b318:	f000 feda 	bl	800c0d0 <_Bfree>
 800b31c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b320:	2200      	movs	r2, #0
 800b322:	601a      	str	r2, [r3, #0]
 800b324:	1e2b      	subs	r3, r5, #0
 800b326:	bfb9      	ittee	lt
 800b328:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b32c:	9303      	strlt	r3, [sp, #12]
 800b32e:	2300      	movge	r3, #0
 800b330:	6033      	strge	r3, [r6, #0]
 800b332:	9f03      	ldr	r7, [sp, #12]
 800b334:	4b98      	ldr	r3, [pc, #608]	@ (800b598 <_dtoa_r+0x2d0>)
 800b336:	bfbc      	itt	lt
 800b338:	2201      	movlt	r2, #1
 800b33a:	6032      	strlt	r2, [r6, #0]
 800b33c:	43bb      	bics	r3, r7
 800b33e:	d112      	bne.n	800b366 <_dtoa_r+0x9e>
 800b340:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b342:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b346:	6013      	str	r3, [r2, #0]
 800b348:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b34c:	4323      	orrs	r3, r4
 800b34e:	f000 854d 	beq.w	800bdec <_dtoa_r+0xb24>
 800b352:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b354:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b5ac <_dtoa_r+0x2e4>
 800b358:	2b00      	cmp	r3, #0
 800b35a:	f000 854f 	beq.w	800bdfc <_dtoa_r+0xb34>
 800b35e:	f10a 0303 	add.w	r3, sl, #3
 800b362:	f000 bd49 	b.w	800bdf8 <_dtoa_r+0xb30>
 800b366:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b36a:	2200      	movs	r2, #0
 800b36c:	ec51 0b17 	vmov	r0, r1, d7
 800b370:	2300      	movs	r3, #0
 800b372:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b376:	f7f5 fbaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800b37a:	4680      	mov	r8, r0
 800b37c:	b158      	cbz	r0, 800b396 <_dtoa_r+0xce>
 800b37e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b380:	2301      	movs	r3, #1
 800b382:	6013      	str	r3, [r2, #0]
 800b384:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b386:	b113      	cbz	r3, 800b38e <_dtoa_r+0xc6>
 800b388:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b38a:	4b84      	ldr	r3, [pc, #528]	@ (800b59c <_dtoa_r+0x2d4>)
 800b38c:	6013      	str	r3, [r2, #0]
 800b38e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b5b0 <_dtoa_r+0x2e8>
 800b392:	f000 bd33 	b.w	800bdfc <_dtoa_r+0xb34>
 800b396:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b39a:	aa16      	add	r2, sp, #88	@ 0x58
 800b39c:	a917      	add	r1, sp, #92	@ 0x5c
 800b39e:	4658      	mov	r0, fp
 800b3a0:	f001 fa3a 	bl	800c818 <__d2b>
 800b3a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b3a8:	4681      	mov	r9, r0
 800b3aa:	2e00      	cmp	r6, #0
 800b3ac:	d077      	beq.n	800b49e <_dtoa_r+0x1d6>
 800b3ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b3b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b3b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b3c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b3c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	4b74      	ldr	r3, [pc, #464]	@ (800b5a0 <_dtoa_r+0x2d8>)
 800b3ce:	f7f4 ff63 	bl	8000298 <__aeabi_dsub>
 800b3d2:	a369      	add	r3, pc, #420	@ (adr r3, 800b578 <_dtoa_r+0x2b0>)
 800b3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d8:	f7f5 f916 	bl	8000608 <__aeabi_dmul>
 800b3dc:	a368      	add	r3, pc, #416	@ (adr r3, 800b580 <_dtoa_r+0x2b8>)
 800b3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e2:	f7f4 ff5b 	bl	800029c <__adddf3>
 800b3e6:	4604      	mov	r4, r0
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	460d      	mov	r5, r1
 800b3ec:	f7f5 f8a2 	bl	8000534 <__aeabi_i2d>
 800b3f0:	a365      	add	r3, pc, #404	@ (adr r3, 800b588 <_dtoa_r+0x2c0>)
 800b3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f6:	f7f5 f907 	bl	8000608 <__aeabi_dmul>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	4620      	mov	r0, r4
 800b400:	4629      	mov	r1, r5
 800b402:	f7f4 ff4b 	bl	800029c <__adddf3>
 800b406:	4604      	mov	r4, r0
 800b408:	460d      	mov	r5, r1
 800b40a:	f7f5 fbad 	bl	8000b68 <__aeabi_d2iz>
 800b40e:	2200      	movs	r2, #0
 800b410:	4607      	mov	r7, r0
 800b412:	2300      	movs	r3, #0
 800b414:	4620      	mov	r0, r4
 800b416:	4629      	mov	r1, r5
 800b418:	f7f5 fb68 	bl	8000aec <__aeabi_dcmplt>
 800b41c:	b140      	cbz	r0, 800b430 <_dtoa_r+0x168>
 800b41e:	4638      	mov	r0, r7
 800b420:	f7f5 f888 	bl	8000534 <__aeabi_i2d>
 800b424:	4622      	mov	r2, r4
 800b426:	462b      	mov	r3, r5
 800b428:	f7f5 fb56 	bl	8000ad8 <__aeabi_dcmpeq>
 800b42c:	b900      	cbnz	r0, 800b430 <_dtoa_r+0x168>
 800b42e:	3f01      	subs	r7, #1
 800b430:	2f16      	cmp	r7, #22
 800b432:	d851      	bhi.n	800b4d8 <_dtoa_r+0x210>
 800b434:	4b5b      	ldr	r3, [pc, #364]	@ (800b5a4 <_dtoa_r+0x2dc>)
 800b436:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b442:	f7f5 fb53 	bl	8000aec <__aeabi_dcmplt>
 800b446:	2800      	cmp	r0, #0
 800b448:	d048      	beq.n	800b4dc <_dtoa_r+0x214>
 800b44a:	3f01      	subs	r7, #1
 800b44c:	2300      	movs	r3, #0
 800b44e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b450:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b452:	1b9b      	subs	r3, r3, r6
 800b454:	1e5a      	subs	r2, r3, #1
 800b456:	bf44      	itt	mi
 800b458:	f1c3 0801 	rsbmi	r8, r3, #1
 800b45c:	2300      	movmi	r3, #0
 800b45e:	9208      	str	r2, [sp, #32]
 800b460:	bf54      	ite	pl
 800b462:	f04f 0800 	movpl.w	r8, #0
 800b466:	9308      	strmi	r3, [sp, #32]
 800b468:	2f00      	cmp	r7, #0
 800b46a:	db39      	blt.n	800b4e0 <_dtoa_r+0x218>
 800b46c:	9b08      	ldr	r3, [sp, #32]
 800b46e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b470:	443b      	add	r3, r7
 800b472:	9308      	str	r3, [sp, #32]
 800b474:	2300      	movs	r3, #0
 800b476:	930a      	str	r3, [sp, #40]	@ 0x28
 800b478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b47a:	2b09      	cmp	r3, #9
 800b47c:	d864      	bhi.n	800b548 <_dtoa_r+0x280>
 800b47e:	2b05      	cmp	r3, #5
 800b480:	bfc4      	itt	gt
 800b482:	3b04      	subgt	r3, #4
 800b484:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b488:	f1a3 0302 	sub.w	r3, r3, #2
 800b48c:	bfcc      	ite	gt
 800b48e:	2400      	movgt	r4, #0
 800b490:	2401      	movle	r4, #1
 800b492:	2b03      	cmp	r3, #3
 800b494:	d863      	bhi.n	800b55e <_dtoa_r+0x296>
 800b496:	e8df f003 	tbb	[pc, r3]
 800b49a:	372a      	.short	0x372a
 800b49c:	5535      	.short	0x5535
 800b49e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b4a2:	441e      	add	r6, r3
 800b4a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b4a8:	2b20      	cmp	r3, #32
 800b4aa:	bfc1      	itttt	gt
 800b4ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b4b0:	409f      	lslgt	r7, r3
 800b4b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b4b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b4ba:	bfd6      	itet	le
 800b4bc:	f1c3 0320 	rsble	r3, r3, #32
 800b4c0:	ea47 0003 	orrgt.w	r0, r7, r3
 800b4c4:	fa04 f003 	lslle.w	r0, r4, r3
 800b4c8:	f7f5 f824 	bl	8000514 <__aeabi_ui2d>
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b4d2:	3e01      	subs	r6, #1
 800b4d4:	9214      	str	r2, [sp, #80]	@ 0x50
 800b4d6:	e777      	b.n	800b3c8 <_dtoa_r+0x100>
 800b4d8:	2301      	movs	r3, #1
 800b4da:	e7b8      	b.n	800b44e <_dtoa_r+0x186>
 800b4dc:	9012      	str	r0, [sp, #72]	@ 0x48
 800b4de:	e7b7      	b.n	800b450 <_dtoa_r+0x188>
 800b4e0:	427b      	negs	r3, r7
 800b4e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	eba8 0807 	sub.w	r8, r8, r7
 800b4ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b4ec:	e7c4      	b.n	800b478 <_dtoa_r+0x1b0>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	dc35      	bgt.n	800b564 <_dtoa_r+0x29c>
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	9300      	str	r3, [sp, #0]
 800b4fc:	9307      	str	r3, [sp, #28]
 800b4fe:	461a      	mov	r2, r3
 800b500:	920e      	str	r2, [sp, #56]	@ 0x38
 800b502:	e00b      	b.n	800b51c <_dtoa_r+0x254>
 800b504:	2301      	movs	r3, #1
 800b506:	e7f3      	b.n	800b4f0 <_dtoa_r+0x228>
 800b508:	2300      	movs	r3, #0
 800b50a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b50c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b50e:	18fb      	adds	r3, r7, r3
 800b510:	9300      	str	r3, [sp, #0]
 800b512:	3301      	adds	r3, #1
 800b514:	2b01      	cmp	r3, #1
 800b516:	9307      	str	r3, [sp, #28]
 800b518:	bfb8      	it	lt
 800b51a:	2301      	movlt	r3, #1
 800b51c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b520:	2100      	movs	r1, #0
 800b522:	2204      	movs	r2, #4
 800b524:	f102 0514 	add.w	r5, r2, #20
 800b528:	429d      	cmp	r5, r3
 800b52a:	d91f      	bls.n	800b56c <_dtoa_r+0x2a4>
 800b52c:	6041      	str	r1, [r0, #4]
 800b52e:	4658      	mov	r0, fp
 800b530:	f000 fd8e 	bl	800c050 <_Balloc>
 800b534:	4682      	mov	sl, r0
 800b536:	2800      	cmp	r0, #0
 800b538:	d13c      	bne.n	800b5b4 <_dtoa_r+0x2ec>
 800b53a:	4b1b      	ldr	r3, [pc, #108]	@ (800b5a8 <_dtoa_r+0x2e0>)
 800b53c:	4602      	mov	r2, r0
 800b53e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b542:	e6d8      	b.n	800b2f6 <_dtoa_r+0x2e>
 800b544:	2301      	movs	r3, #1
 800b546:	e7e0      	b.n	800b50a <_dtoa_r+0x242>
 800b548:	2401      	movs	r4, #1
 800b54a:	2300      	movs	r3, #0
 800b54c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b54e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b550:	f04f 33ff 	mov.w	r3, #4294967295
 800b554:	9300      	str	r3, [sp, #0]
 800b556:	9307      	str	r3, [sp, #28]
 800b558:	2200      	movs	r2, #0
 800b55a:	2312      	movs	r3, #18
 800b55c:	e7d0      	b.n	800b500 <_dtoa_r+0x238>
 800b55e:	2301      	movs	r3, #1
 800b560:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b562:	e7f5      	b.n	800b550 <_dtoa_r+0x288>
 800b564:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	9307      	str	r3, [sp, #28]
 800b56a:	e7d7      	b.n	800b51c <_dtoa_r+0x254>
 800b56c:	3101      	adds	r1, #1
 800b56e:	0052      	lsls	r2, r2, #1
 800b570:	e7d8      	b.n	800b524 <_dtoa_r+0x25c>
 800b572:	bf00      	nop
 800b574:	f3af 8000 	nop.w
 800b578:	636f4361 	.word	0x636f4361
 800b57c:	3fd287a7 	.word	0x3fd287a7
 800b580:	8b60c8b3 	.word	0x8b60c8b3
 800b584:	3fc68a28 	.word	0x3fc68a28
 800b588:	509f79fb 	.word	0x509f79fb
 800b58c:	3fd34413 	.word	0x3fd34413
 800b590:	0800ee56 	.word	0x0800ee56
 800b594:	0800ee6d 	.word	0x0800ee6d
 800b598:	7ff00000 	.word	0x7ff00000
 800b59c:	0800ee21 	.word	0x0800ee21
 800b5a0:	3ff80000 	.word	0x3ff80000
 800b5a4:	0800ef68 	.word	0x0800ef68
 800b5a8:	0800eec5 	.word	0x0800eec5
 800b5ac:	0800ee52 	.word	0x0800ee52
 800b5b0:	0800ee20 	.word	0x0800ee20
 800b5b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b5b8:	6018      	str	r0, [r3, #0]
 800b5ba:	9b07      	ldr	r3, [sp, #28]
 800b5bc:	2b0e      	cmp	r3, #14
 800b5be:	f200 80a4 	bhi.w	800b70a <_dtoa_r+0x442>
 800b5c2:	2c00      	cmp	r4, #0
 800b5c4:	f000 80a1 	beq.w	800b70a <_dtoa_r+0x442>
 800b5c8:	2f00      	cmp	r7, #0
 800b5ca:	dd33      	ble.n	800b634 <_dtoa_r+0x36c>
 800b5cc:	4bad      	ldr	r3, [pc, #692]	@ (800b884 <_dtoa_r+0x5bc>)
 800b5ce:	f007 020f 	and.w	r2, r7, #15
 800b5d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5d6:	ed93 7b00 	vldr	d7, [r3]
 800b5da:	05f8      	lsls	r0, r7, #23
 800b5dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b5e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b5e4:	d516      	bpl.n	800b614 <_dtoa_r+0x34c>
 800b5e6:	4ba8      	ldr	r3, [pc, #672]	@ (800b888 <_dtoa_r+0x5c0>)
 800b5e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b5f0:	f7f5 f934 	bl	800085c <__aeabi_ddiv>
 800b5f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5f8:	f004 040f 	and.w	r4, r4, #15
 800b5fc:	2603      	movs	r6, #3
 800b5fe:	4da2      	ldr	r5, [pc, #648]	@ (800b888 <_dtoa_r+0x5c0>)
 800b600:	b954      	cbnz	r4, 800b618 <_dtoa_r+0x350>
 800b602:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b60a:	f7f5 f927 	bl	800085c <__aeabi_ddiv>
 800b60e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b612:	e028      	b.n	800b666 <_dtoa_r+0x39e>
 800b614:	2602      	movs	r6, #2
 800b616:	e7f2      	b.n	800b5fe <_dtoa_r+0x336>
 800b618:	07e1      	lsls	r1, r4, #31
 800b61a:	d508      	bpl.n	800b62e <_dtoa_r+0x366>
 800b61c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b620:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b624:	f7f4 fff0 	bl	8000608 <__aeabi_dmul>
 800b628:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b62c:	3601      	adds	r6, #1
 800b62e:	1064      	asrs	r4, r4, #1
 800b630:	3508      	adds	r5, #8
 800b632:	e7e5      	b.n	800b600 <_dtoa_r+0x338>
 800b634:	f000 80d2 	beq.w	800b7dc <_dtoa_r+0x514>
 800b638:	427c      	negs	r4, r7
 800b63a:	4b92      	ldr	r3, [pc, #584]	@ (800b884 <_dtoa_r+0x5bc>)
 800b63c:	4d92      	ldr	r5, [pc, #584]	@ (800b888 <_dtoa_r+0x5c0>)
 800b63e:	f004 020f 	and.w	r2, r4, #15
 800b642:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b64e:	f7f4 ffdb 	bl	8000608 <__aeabi_dmul>
 800b652:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b656:	1124      	asrs	r4, r4, #4
 800b658:	2300      	movs	r3, #0
 800b65a:	2602      	movs	r6, #2
 800b65c:	2c00      	cmp	r4, #0
 800b65e:	f040 80b2 	bne.w	800b7c6 <_dtoa_r+0x4fe>
 800b662:	2b00      	cmp	r3, #0
 800b664:	d1d3      	bne.n	800b60e <_dtoa_r+0x346>
 800b666:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b668:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f000 80b7 	beq.w	800b7e0 <_dtoa_r+0x518>
 800b672:	4b86      	ldr	r3, [pc, #536]	@ (800b88c <_dtoa_r+0x5c4>)
 800b674:	2200      	movs	r2, #0
 800b676:	4620      	mov	r0, r4
 800b678:	4629      	mov	r1, r5
 800b67a:	f7f5 fa37 	bl	8000aec <__aeabi_dcmplt>
 800b67e:	2800      	cmp	r0, #0
 800b680:	f000 80ae 	beq.w	800b7e0 <_dtoa_r+0x518>
 800b684:	9b07      	ldr	r3, [sp, #28]
 800b686:	2b00      	cmp	r3, #0
 800b688:	f000 80aa 	beq.w	800b7e0 <_dtoa_r+0x518>
 800b68c:	9b00      	ldr	r3, [sp, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	dd37      	ble.n	800b702 <_dtoa_r+0x43a>
 800b692:	1e7b      	subs	r3, r7, #1
 800b694:	9304      	str	r3, [sp, #16]
 800b696:	4620      	mov	r0, r4
 800b698:	4b7d      	ldr	r3, [pc, #500]	@ (800b890 <_dtoa_r+0x5c8>)
 800b69a:	2200      	movs	r2, #0
 800b69c:	4629      	mov	r1, r5
 800b69e:	f7f4 ffb3 	bl	8000608 <__aeabi_dmul>
 800b6a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6a6:	9c00      	ldr	r4, [sp, #0]
 800b6a8:	3601      	adds	r6, #1
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	f7f4 ff42 	bl	8000534 <__aeabi_i2d>
 800b6b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6b4:	f7f4 ffa8 	bl	8000608 <__aeabi_dmul>
 800b6b8:	4b76      	ldr	r3, [pc, #472]	@ (800b894 <_dtoa_r+0x5cc>)
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f7f4 fdee 	bl	800029c <__adddf3>
 800b6c0:	4605      	mov	r5, r0
 800b6c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b6c6:	2c00      	cmp	r4, #0
 800b6c8:	f040 808d 	bne.w	800b7e6 <_dtoa_r+0x51e>
 800b6cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6d0:	4b71      	ldr	r3, [pc, #452]	@ (800b898 <_dtoa_r+0x5d0>)
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f7f4 fde0 	bl	8000298 <__aeabi_dsub>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	460b      	mov	r3, r1
 800b6dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6e0:	462a      	mov	r2, r5
 800b6e2:	4633      	mov	r3, r6
 800b6e4:	f7f5 fa20 	bl	8000b28 <__aeabi_dcmpgt>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	f040 828b 	bne.w	800bc04 <_dtoa_r+0x93c>
 800b6ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6f2:	462a      	mov	r2, r5
 800b6f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b6f8:	f7f5 f9f8 	bl	8000aec <__aeabi_dcmplt>
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	f040 8128 	bne.w	800b952 <_dtoa_r+0x68a>
 800b702:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b706:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b70a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f2c0 815a 	blt.w	800b9c6 <_dtoa_r+0x6fe>
 800b712:	2f0e      	cmp	r7, #14
 800b714:	f300 8157 	bgt.w	800b9c6 <_dtoa_r+0x6fe>
 800b718:	4b5a      	ldr	r3, [pc, #360]	@ (800b884 <_dtoa_r+0x5bc>)
 800b71a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b71e:	ed93 7b00 	vldr	d7, [r3]
 800b722:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b724:	2b00      	cmp	r3, #0
 800b726:	ed8d 7b00 	vstr	d7, [sp]
 800b72a:	da03      	bge.n	800b734 <_dtoa_r+0x46c>
 800b72c:	9b07      	ldr	r3, [sp, #28]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f340 8101 	ble.w	800b936 <_dtoa_r+0x66e>
 800b734:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b738:	4656      	mov	r6, sl
 800b73a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b73e:	4620      	mov	r0, r4
 800b740:	4629      	mov	r1, r5
 800b742:	f7f5 f88b 	bl	800085c <__aeabi_ddiv>
 800b746:	f7f5 fa0f 	bl	8000b68 <__aeabi_d2iz>
 800b74a:	4680      	mov	r8, r0
 800b74c:	f7f4 fef2 	bl	8000534 <__aeabi_i2d>
 800b750:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b754:	f7f4 ff58 	bl	8000608 <__aeabi_dmul>
 800b758:	4602      	mov	r2, r0
 800b75a:	460b      	mov	r3, r1
 800b75c:	4620      	mov	r0, r4
 800b75e:	4629      	mov	r1, r5
 800b760:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b764:	f7f4 fd98 	bl	8000298 <__aeabi_dsub>
 800b768:	f806 4b01 	strb.w	r4, [r6], #1
 800b76c:	9d07      	ldr	r5, [sp, #28]
 800b76e:	eba6 040a 	sub.w	r4, r6, sl
 800b772:	42a5      	cmp	r5, r4
 800b774:	4602      	mov	r2, r0
 800b776:	460b      	mov	r3, r1
 800b778:	f040 8117 	bne.w	800b9aa <_dtoa_r+0x6e2>
 800b77c:	f7f4 fd8e 	bl	800029c <__adddf3>
 800b780:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b784:	4604      	mov	r4, r0
 800b786:	460d      	mov	r5, r1
 800b788:	f7f5 f9ce 	bl	8000b28 <__aeabi_dcmpgt>
 800b78c:	2800      	cmp	r0, #0
 800b78e:	f040 80f9 	bne.w	800b984 <_dtoa_r+0x6bc>
 800b792:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b796:	4620      	mov	r0, r4
 800b798:	4629      	mov	r1, r5
 800b79a:	f7f5 f99d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b79e:	b118      	cbz	r0, 800b7a8 <_dtoa_r+0x4e0>
 800b7a0:	f018 0f01 	tst.w	r8, #1
 800b7a4:	f040 80ee 	bne.w	800b984 <_dtoa_r+0x6bc>
 800b7a8:	4649      	mov	r1, r9
 800b7aa:	4658      	mov	r0, fp
 800b7ac:	f000 fc90 	bl	800c0d0 <_Bfree>
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	7033      	strb	r3, [r6, #0]
 800b7b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b7b6:	3701      	adds	r7, #1
 800b7b8:	601f      	str	r7, [r3, #0]
 800b7ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f000 831d 	beq.w	800bdfc <_dtoa_r+0xb34>
 800b7c2:	601e      	str	r6, [r3, #0]
 800b7c4:	e31a      	b.n	800bdfc <_dtoa_r+0xb34>
 800b7c6:	07e2      	lsls	r2, r4, #31
 800b7c8:	d505      	bpl.n	800b7d6 <_dtoa_r+0x50e>
 800b7ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b7ce:	f7f4 ff1b 	bl	8000608 <__aeabi_dmul>
 800b7d2:	3601      	adds	r6, #1
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	1064      	asrs	r4, r4, #1
 800b7d8:	3508      	adds	r5, #8
 800b7da:	e73f      	b.n	800b65c <_dtoa_r+0x394>
 800b7dc:	2602      	movs	r6, #2
 800b7de:	e742      	b.n	800b666 <_dtoa_r+0x39e>
 800b7e0:	9c07      	ldr	r4, [sp, #28]
 800b7e2:	9704      	str	r7, [sp, #16]
 800b7e4:	e761      	b.n	800b6aa <_dtoa_r+0x3e2>
 800b7e6:	4b27      	ldr	r3, [pc, #156]	@ (800b884 <_dtoa_r+0x5bc>)
 800b7e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b7ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b7ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b7f2:	4454      	add	r4, sl
 800b7f4:	2900      	cmp	r1, #0
 800b7f6:	d053      	beq.n	800b8a0 <_dtoa_r+0x5d8>
 800b7f8:	4928      	ldr	r1, [pc, #160]	@ (800b89c <_dtoa_r+0x5d4>)
 800b7fa:	2000      	movs	r0, #0
 800b7fc:	f7f5 f82e 	bl	800085c <__aeabi_ddiv>
 800b800:	4633      	mov	r3, r6
 800b802:	462a      	mov	r2, r5
 800b804:	f7f4 fd48 	bl	8000298 <__aeabi_dsub>
 800b808:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b80c:	4656      	mov	r6, sl
 800b80e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b812:	f7f5 f9a9 	bl	8000b68 <__aeabi_d2iz>
 800b816:	4605      	mov	r5, r0
 800b818:	f7f4 fe8c 	bl	8000534 <__aeabi_i2d>
 800b81c:	4602      	mov	r2, r0
 800b81e:	460b      	mov	r3, r1
 800b820:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b824:	f7f4 fd38 	bl	8000298 <__aeabi_dsub>
 800b828:	3530      	adds	r5, #48	@ 0x30
 800b82a:	4602      	mov	r2, r0
 800b82c:	460b      	mov	r3, r1
 800b82e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b832:	f806 5b01 	strb.w	r5, [r6], #1
 800b836:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b83a:	f7f5 f957 	bl	8000aec <__aeabi_dcmplt>
 800b83e:	2800      	cmp	r0, #0
 800b840:	d171      	bne.n	800b926 <_dtoa_r+0x65e>
 800b842:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b846:	4911      	ldr	r1, [pc, #68]	@ (800b88c <_dtoa_r+0x5c4>)
 800b848:	2000      	movs	r0, #0
 800b84a:	f7f4 fd25 	bl	8000298 <__aeabi_dsub>
 800b84e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b852:	f7f5 f94b 	bl	8000aec <__aeabi_dcmplt>
 800b856:	2800      	cmp	r0, #0
 800b858:	f040 8095 	bne.w	800b986 <_dtoa_r+0x6be>
 800b85c:	42a6      	cmp	r6, r4
 800b85e:	f43f af50 	beq.w	800b702 <_dtoa_r+0x43a>
 800b862:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b866:	4b0a      	ldr	r3, [pc, #40]	@ (800b890 <_dtoa_r+0x5c8>)
 800b868:	2200      	movs	r2, #0
 800b86a:	f7f4 fecd 	bl	8000608 <__aeabi_dmul>
 800b86e:	4b08      	ldr	r3, [pc, #32]	@ (800b890 <_dtoa_r+0x5c8>)
 800b870:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b874:	2200      	movs	r2, #0
 800b876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b87a:	f7f4 fec5 	bl	8000608 <__aeabi_dmul>
 800b87e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b882:	e7c4      	b.n	800b80e <_dtoa_r+0x546>
 800b884:	0800ef68 	.word	0x0800ef68
 800b888:	0800ef40 	.word	0x0800ef40
 800b88c:	3ff00000 	.word	0x3ff00000
 800b890:	40240000 	.word	0x40240000
 800b894:	401c0000 	.word	0x401c0000
 800b898:	40140000 	.word	0x40140000
 800b89c:	3fe00000 	.word	0x3fe00000
 800b8a0:	4631      	mov	r1, r6
 800b8a2:	4628      	mov	r0, r5
 800b8a4:	f7f4 feb0 	bl	8000608 <__aeabi_dmul>
 800b8a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b8ac:	9415      	str	r4, [sp, #84]	@ 0x54
 800b8ae:	4656      	mov	r6, sl
 800b8b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8b4:	f7f5 f958 	bl	8000b68 <__aeabi_d2iz>
 800b8b8:	4605      	mov	r5, r0
 800b8ba:	f7f4 fe3b 	bl	8000534 <__aeabi_i2d>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8c6:	f7f4 fce7 	bl	8000298 <__aeabi_dsub>
 800b8ca:	3530      	adds	r5, #48	@ 0x30
 800b8cc:	f806 5b01 	strb.w	r5, [r6], #1
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	42a6      	cmp	r6, r4
 800b8d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b8da:	f04f 0200 	mov.w	r2, #0
 800b8de:	d124      	bne.n	800b92a <_dtoa_r+0x662>
 800b8e0:	4bac      	ldr	r3, [pc, #688]	@ (800bb94 <_dtoa_r+0x8cc>)
 800b8e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b8e6:	f7f4 fcd9 	bl	800029c <__adddf3>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8f2:	f7f5 f919 	bl	8000b28 <__aeabi_dcmpgt>
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	d145      	bne.n	800b986 <_dtoa_r+0x6be>
 800b8fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b8fe:	49a5      	ldr	r1, [pc, #660]	@ (800bb94 <_dtoa_r+0x8cc>)
 800b900:	2000      	movs	r0, #0
 800b902:	f7f4 fcc9 	bl	8000298 <__aeabi_dsub>
 800b906:	4602      	mov	r2, r0
 800b908:	460b      	mov	r3, r1
 800b90a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b90e:	f7f5 f8ed 	bl	8000aec <__aeabi_dcmplt>
 800b912:	2800      	cmp	r0, #0
 800b914:	f43f aef5 	beq.w	800b702 <_dtoa_r+0x43a>
 800b918:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b91a:	1e73      	subs	r3, r6, #1
 800b91c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b91e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b922:	2b30      	cmp	r3, #48	@ 0x30
 800b924:	d0f8      	beq.n	800b918 <_dtoa_r+0x650>
 800b926:	9f04      	ldr	r7, [sp, #16]
 800b928:	e73e      	b.n	800b7a8 <_dtoa_r+0x4e0>
 800b92a:	4b9b      	ldr	r3, [pc, #620]	@ (800bb98 <_dtoa_r+0x8d0>)
 800b92c:	f7f4 fe6c 	bl	8000608 <__aeabi_dmul>
 800b930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b934:	e7bc      	b.n	800b8b0 <_dtoa_r+0x5e8>
 800b936:	d10c      	bne.n	800b952 <_dtoa_r+0x68a>
 800b938:	4b98      	ldr	r3, [pc, #608]	@ (800bb9c <_dtoa_r+0x8d4>)
 800b93a:	2200      	movs	r2, #0
 800b93c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b940:	f7f4 fe62 	bl	8000608 <__aeabi_dmul>
 800b944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b948:	f7f5 f8e4 	bl	8000b14 <__aeabi_dcmpge>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	f000 8157 	beq.w	800bc00 <_dtoa_r+0x938>
 800b952:	2400      	movs	r4, #0
 800b954:	4625      	mov	r5, r4
 800b956:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b958:	43db      	mvns	r3, r3
 800b95a:	9304      	str	r3, [sp, #16]
 800b95c:	4656      	mov	r6, sl
 800b95e:	2700      	movs	r7, #0
 800b960:	4621      	mov	r1, r4
 800b962:	4658      	mov	r0, fp
 800b964:	f000 fbb4 	bl	800c0d0 <_Bfree>
 800b968:	2d00      	cmp	r5, #0
 800b96a:	d0dc      	beq.n	800b926 <_dtoa_r+0x65e>
 800b96c:	b12f      	cbz	r7, 800b97a <_dtoa_r+0x6b2>
 800b96e:	42af      	cmp	r7, r5
 800b970:	d003      	beq.n	800b97a <_dtoa_r+0x6b2>
 800b972:	4639      	mov	r1, r7
 800b974:	4658      	mov	r0, fp
 800b976:	f000 fbab 	bl	800c0d0 <_Bfree>
 800b97a:	4629      	mov	r1, r5
 800b97c:	4658      	mov	r0, fp
 800b97e:	f000 fba7 	bl	800c0d0 <_Bfree>
 800b982:	e7d0      	b.n	800b926 <_dtoa_r+0x65e>
 800b984:	9704      	str	r7, [sp, #16]
 800b986:	4633      	mov	r3, r6
 800b988:	461e      	mov	r6, r3
 800b98a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b98e:	2a39      	cmp	r2, #57	@ 0x39
 800b990:	d107      	bne.n	800b9a2 <_dtoa_r+0x6da>
 800b992:	459a      	cmp	sl, r3
 800b994:	d1f8      	bne.n	800b988 <_dtoa_r+0x6c0>
 800b996:	9a04      	ldr	r2, [sp, #16]
 800b998:	3201      	adds	r2, #1
 800b99a:	9204      	str	r2, [sp, #16]
 800b99c:	2230      	movs	r2, #48	@ 0x30
 800b99e:	f88a 2000 	strb.w	r2, [sl]
 800b9a2:	781a      	ldrb	r2, [r3, #0]
 800b9a4:	3201      	adds	r2, #1
 800b9a6:	701a      	strb	r2, [r3, #0]
 800b9a8:	e7bd      	b.n	800b926 <_dtoa_r+0x65e>
 800b9aa:	4b7b      	ldr	r3, [pc, #492]	@ (800bb98 <_dtoa_r+0x8d0>)
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f7f4 fe2b 	bl	8000608 <__aeabi_dmul>
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	460d      	mov	r5, r1
 800b9ba:	f7f5 f88d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	f43f aebb 	beq.w	800b73a <_dtoa_r+0x472>
 800b9c4:	e6f0      	b.n	800b7a8 <_dtoa_r+0x4e0>
 800b9c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b9c8:	2a00      	cmp	r2, #0
 800b9ca:	f000 80db 	beq.w	800bb84 <_dtoa_r+0x8bc>
 800b9ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9d0:	2a01      	cmp	r2, #1
 800b9d2:	f300 80bf 	bgt.w	800bb54 <_dtoa_r+0x88c>
 800b9d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b9d8:	2a00      	cmp	r2, #0
 800b9da:	f000 80b7 	beq.w	800bb4c <_dtoa_r+0x884>
 800b9de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b9e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b9e4:	4646      	mov	r6, r8
 800b9e6:	9a08      	ldr	r2, [sp, #32]
 800b9e8:	2101      	movs	r1, #1
 800b9ea:	441a      	add	r2, r3
 800b9ec:	4658      	mov	r0, fp
 800b9ee:	4498      	add	r8, r3
 800b9f0:	9208      	str	r2, [sp, #32]
 800b9f2:	f000 fc6b 	bl	800c2cc <__i2b>
 800b9f6:	4605      	mov	r5, r0
 800b9f8:	b15e      	cbz	r6, 800ba12 <_dtoa_r+0x74a>
 800b9fa:	9b08      	ldr	r3, [sp, #32]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	dd08      	ble.n	800ba12 <_dtoa_r+0x74a>
 800ba00:	42b3      	cmp	r3, r6
 800ba02:	9a08      	ldr	r2, [sp, #32]
 800ba04:	bfa8      	it	ge
 800ba06:	4633      	movge	r3, r6
 800ba08:	eba8 0803 	sub.w	r8, r8, r3
 800ba0c:	1af6      	subs	r6, r6, r3
 800ba0e:	1ad3      	subs	r3, r2, r3
 800ba10:	9308      	str	r3, [sp, #32]
 800ba12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba14:	b1f3      	cbz	r3, 800ba54 <_dtoa_r+0x78c>
 800ba16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	f000 80b7 	beq.w	800bb8c <_dtoa_r+0x8c4>
 800ba1e:	b18c      	cbz	r4, 800ba44 <_dtoa_r+0x77c>
 800ba20:	4629      	mov	r1, r5
 800ba22:	4622      	mov	r2, r4
 800ba24:	4658      	mov	r0, fp
 800ba26:	f000 fd11 	bl	800c44c <__pow5mult>
 800ba2a:	464a      	mov	r2, r9
 800ba2c:	4601      	mov	r1, r0
 800ba2e:	4605      	mov	r5, r0
 800ba30:	4658      	mov	r0, fp
 800ba32:	f000 fc61 	bl	800c2f8 <__multiply>
 800ba36:	4649      	mov	r1, r9
 800ba38:	9004      	str	r0, [sp, #16]
 800ba3a:	4658      	mov	r0, fp
 800ba3c:	f000 fb48 	bl	800c0d0 <_Bfree>
 800ba40:	9b04      	ldr	r3, [sp, #16]
 800ba42:	4699      	mov	r9, r3
 800ba44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba46:	1b1a      	subs	r2, r3, r4
 800ba48:	d004      	beq.n	800ba54 <_dtoa_r+0x78c>
 800ba4a:	4649      	mov	r1, r9
 800ba4c:	4658      	mov	r0, fp
 800ba4e:	f000 fcfd 	bl	800c44c <__pow5mult>
 800ba52:	4681      	mov	r9, r0
 800ba54:	2101      	movs	r1, #1
 800ba56:	4658      	mov	r0, fp
 800ba58:	f000 fc38 	bl	800c2cc <__i2b>
 800ba5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba5e:	4604      	mov	r4, r0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 81cf 	beq.w	800be04 <_dtoa_r+0xb3c>
 800ba66:	461a      	mov	r2, r3
 800ba68:	4601      	mov	r1, r0
 800ba6a:	4658      	mov	r0, fp
 800ba6c:	f000 fcee 	bl	800c44c <__pow5mult>
 800ba70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	4604      	mov	r4, r0
 800ba76:	f300 8095 	bgt.w	800bba4 <_dtoa_r+0x8dc>
 800ba7a:	9b02      	ldr	r3, [sp, #8]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	f040 8087 	bne.w	800bb90 <_dtoa_r+0x8c8>
 800ba82:	9b03      	ldr	r3, [sp, #12]
 800ba84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f040 8089 	bne.w	800bba0 <_dtoa_r+0x8d8>
 800ba8e:	9b03      	ldr	r3, [sp, #12]
 800ba90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ba94:	0d1b      	lsrs	r3, r3, #20
 800ba96:	051b      	lsls	r3, r3, #20
 800ba98:	b12b      	cbz	r3, 800baa6 <_dtoa_r+0x7de>
 800ba9a:	9b08      	ldr	r3, [sp, #32]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	9308      	str	r3, [sp, #32]
 800baa0:	f108 0801 	add.w	r8, r8, #1
 800baa4:	2301      	movs	r3, #1
 800baa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800baa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f000 81b0 	beq.w	800be10 <_dtoa_r+0xb48>
 800bab0:	6923      	ldr	r3, [r4, #16]
 800bab2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bab6:	6918      	ldr	r0, [r3, #16]
 800bab8:	f000 fbbc 	bl	800c234 <__hi0bits>
 800babc:	f1c0 0020 	rsb	r0, r0, #32
 800bac0:	9b08      	ldr	r3, [sp, #32]
 800bac2:	4418      	add	r0, r3
 800bac4:	f010 001f 	ands.w	r0, r0, #31
 800bac8:	d077      	beq.n	800bbba <_dtoa_r+0x8f2>
 800baca:	f1c0 0320 	rsb	r3, r0, #32
 800bace:	2b04      	cmp	r3, #4
 800bad0:	dd6b      	ble.n	800bbaa <_dtoa_r+0x8e2>
 800bad2:	9b08      	ldr	r3, [sp, #32]
 800bad4:	f1c0 001c 	rsb	r0, r0, #28
 800bad8:	4403      	add	r3, r0
 800bada:	4480      	add	r8, r0
 800badc:	4406      	add	r6, r0
 800bade:	9308      	str	r3, [sp, #32]
 800bae0:	f1b8 0f00 	cmp.w	r8, #0
 800bae4:	dd05      	ble.n	800baf2 <_dtoa_r+0x82a>
 800bae6:	4649      	mov	r1, r9
 800bae8:	4642      	mov	r2, r8
 800baea:	4658      	mov	r0, fp
 800baec:	f000 fd08 	bl	800c500 <__lshift>
 800baf0:	4681      	mov	r9, r0
 800baf2:	9b08      	ldr	r3, [sp, #32]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	dd05      	ble.n	800bb04 <_dtoa_r+0x83c>
 800baf8:	4621      	mov	r1, r4
 800bafa:	461a      	mov	r2, r3
 800bafc:	4658      	mov	r0, fp
 800bafe:	f000 fcff 	bl	800c500 <__lshift>
 800bb02:	4604      	mov	r4, r0
 800bb04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d059      	beq.n	800bbbe <_dtoa_r+0x8f6>
 800bb0a:	4621      	mov	r1, r4
 800bb0c:	4648      	mov	r0, r9
 800bb0e:	f000 fd63 	bl	800c5d8 <__mcmp>
 800bb12:	2800      	cmp	r0, #0
 800bb14:	da53      	bge.n	800bbbe <_dtoa_r+0x8f6>
 800bb16:	1e7b      	subs	r3, r7, #1
 800bb18:	9304      	str	r3, [sp, #16]
 800bb1a:	4649      	mov	r1, r9
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	220a      	movs	r2, #10
 800bb20:	4658      	mov	r0, fp
 800bb22:	f000 faf7 	bl	800c114 <__multadd>
 800bb26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb28:	4681      	mov	r9, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	f000 8172 	beq.w	800be14 <_dtoa_r+0xb4c>
 800bb30:	2300      	movs	r3, #0
 800bb32:	4629      	mov	r1, r5
 800bb34:	220a      	movs	r2, #10
 800bb36:	4658      	mov	r0, fp
 800bb38:	f000 faec 	bl	800c114 <__multadd>
 800bb3c:	9b00      	ldr	r3, [sp, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	4605      	mov	r5, r0
 800bb42:	dc67      	bgt.n	800bc14 <_dtoa_r+0x94c>
 800bb44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb46:	2b02      	cmp	r3, #2
 800bb48:	dc41      	bgt.n	800bbce <_dtoa_r+0x906>
 800bb4a:	e063      	b.n	800bc14 <_dtoa_r+0x94c>
 800bb4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bb4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bb52:	e746      	b.n	800b9e2 <_dtoa_r+0x71a>
 800bb54:	9b07      	ldr	r3, [sp, #28]
 800bb56:	1e5c      	subs	r4, r3, #1
 800bb58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb5a:	42a3      	cmp	r3, r4
 800bb5c:	bfbf      	itttt	lt
 800bb5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bb60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bb62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bb64:	1ae3      	sublt	r3, r4, r3
 800bb66:	bfb4      	ite	lt
 800bb68:	18d2      	addlt	r2, r2, r3
 800bb6a:	1b1c      	subge	r4, r3, r4
 800bb6c:	9b07      	ldr	r3, [sp, #28]
 800bb6e:	bfbc      	itt	lt
 800bb70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bb72:	2400      	movlt	r4, #0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	bfb5      	itete	lt
 800bb78:	eba8 0603 	sublt.w	r6, r8, r3
 800bb7c:	9b07      	ldrge	r3, [sp, #28]
 800bb7e:	2300      	movlt	r3, #0
 800bb80:	4646      	movge	r6, r8
 800bb82:	e730      	b.n	800b9e6 <_dtoa_r+0x71e>
 800bb84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bb86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bb88:	4646      	mov	r6, r8
 800bb8a:	e735      	b.n	800b9f8 <_dtoa_r+0x730>
 800bb8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb8e:	e75c      	b.n	800ba4a <_dtoa_r+0x782>
 800bb90:	2300      	movs	r3, #0
 800bb92:	e788      	b.n	800baa6 <_dtoa_r+0x7de>
 800bb94:	3fe00000 	.word	0x3fe00000
 800bb98:	40240000 	.word	0x40240000
 800bb9c:	40140000 	.word	0x40140000
 800bba0:	9b02      	ldr	r3, [sp, #8]
 800bba2:	e780      	b.n	800baa6 <_dtoa_r+0x7de>
 800bba4:	2300      	movs	r3, #0
 800bba6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bba8:	e782      	b.n	800bab0 <_dtoa_r+0x7e8>
 800bbaa:	d099      	beq.n	800bae0 <_dtoa_r+0x818>
 800bbac:	9a08      	ldr	r2, [sp, #32]
 800bbae:	331c      	adds	r3, #28
 800bbb0:	441a      	add	r2, r3
 800bbb2:	4498      	add	r8, r3
 800bbb4:	441e      	add	r6, r3
 800bbb6:	9208      	str	r2, [sp, #32]
 800bbb8:	e792      	b.n	800bae0 <_dtoa_r+0x818>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	e7f6      	b.n	800bbac <_dtoa_r+0x8e4>
 800bbbe:	9b07      	ldr	r3, [sp, #28]
 800bbc0:	9704      	str	r7, [sp, #16]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	dc20      	bgt.n	800bc08 <_dtoa_r+0x940>
 800bbc6:	9300      	str	r3, [sp, #0]
 800bbc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	dd1e      	ble.n	800bc0c <_dtoa_r+0x944>
 800bbce:	9b00      	ldr	r3, [sp, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	f47f aec0 	bne.w	800b956 <_dtoa_r+0x68e>
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	2205      	movs	r2, #5
 800bbda:	4658      	mov	r0, fp
 800bbdc:	f000 fa9a 	bl	800c114 <__multadd>
 800bbe0:	4601      	mov	r1, r0
 800bbe2:	4604      	mov	r4, r0
 800bbe4:	4648      	mov	r0, r9
 800bbe6:	f000 fcf7 	bl	800c5d8 <__mcmp>
 800bbea:	2800      	cmp	r0, #0
 800bbec:	f77f aeb3 	ble.w	800b956 <_dtoa_r+0x68e>
 800bbf0:	4656      	mov	r6, sl
 800bbf2:	2331      	movs	r3, #49	@ 0x31
 800bbf4:	f806 3b01 	strb.w	r3, [r6], #1
 800bbf8:	9b04      	ldr	r3, [sp, #16]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	9304      	str	r3, [sp, #16]
 800bbfe:	e6ae      	b.n	800b95e <_dtoa_r+0x696>
 800bc00:	9c07      	ldr	r4, [sp, #28]
 800bc02:	9704      	str	r7, [sp, #16]
 800bc04:	4625      	mov	r5, r4
 800bc06:	e7f3      	b.n	800bbf0 <_dtoa_r+0x928>
 800bc08:	9b07      	ldr	r3, [sp, #28]
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	f000 8104 	beq.w	800be1c <_dtoa_r+0xb54>
 800bc14:	2e00      	cmp	r6, #0
 800bc16:	dd05      	ble.n	800bc24 <_dtoa_r+0x95c>
 800bc18:	4629      	mov	r1, r5
 800bc1a:	4632      	mov	r2, r6
 800bc1c:	4658      	mov	r0, fp
 800bc1e:	f000 fc6f 	bl	800c500 <__lshift>
 800bc22:	4605      	mov	r5, r0
 800bc24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d05a      	beq.n	800bce0 <_dtoa_r+0xa18>
 800bc2a:	6869      	ldr	r1, [r5, #4]
 800bc2c:	4658      	mov	r0, fp
 800bc2e:	f000 fa0f 	bl	800c050 <_Balloc>
 800bc32:	4606      	mov	r6, r0
 800bc34:	b928      	cbnz	r0, 800bc42 <_dtoa_r+0x97a>
 800bc36:	4b84      	ldr	r3, [pc, #528]	@ (800be48 <_dtoa_r+0xb80>)
 800bc38:	4602      	mov	r2, r0
 800bc3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bc3e:	f7ff bb5a 	b.w	800b2f6 <_dtoa_r+0x2e>
 800bc42:	692a      	ldr	r2, [r5, #16]
 800bc44:	3202      	adds	r2, #2
 800bc46:	0092      	lsls	r2, r2, #2
 800bc48:	f105 010c 	add.w	r1, r5, #12
 800bc4c:	300c      	adds	r0, #12
 800bc4e:	f001 ff75 	bl	800db3c <memcpy>
 800bc52:	2201      	movs	r2, #1
 800bc54:	4631      	mov	r1, r6
 800bc56:	4658      	mov	r0, fp
 800bc58:	f000 fc52 	bl	800c500 <__lshift>
 800bc5c:	f10a 0301 	add.w	r3, sl, #1
 800bc60:	9307      	str	r3, [sp, #28]
 800bc62:	9b00      	ldr	r3, [sp, #0]
 800bc64:	4453      	add	r3, sl
 800bc66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc68:	9b02      	ldr	r3, [sp, #8]
 800bc6a:	f003 0301 	and.w	r3, r3, #1
 800bc6e:	462f      	mov	r7, r5
 800bc70:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc72:	4605      	mov	r5, r0
 800bc74:	9b07      	ldr	r3, [sp, #28]
 800bc76:	4621      	mov	r1, r4
 800bc78:	3b01      	subs	r3, #1
 800bc7a:	4648      	mov	r0, r9
 800bc7c:	9300      	str	r3, [sp, #0]
 800bc7e:	f7ff fa9b 	bl	800b1b8 <quorem>
 800bc82:	4639      	mov	r1, r7
 800bc84:	9002      	str	r0, [sp, #8]
 800bc86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bc8a:	4648      	mov	r0, r9
 800bc8c:	f000 fca4 	bl	800c5d8 <__mcmp>
 800bc90:	462a      	mov	r2, r5
 800bc92:	9008      	str	r0, [sp, #32]
 800bc94:	4621      	mov	r1, r4
 800bc96:	4658      	mov	r0, fp
 800bc98:	f000 fcba 	bl	800c610 <__mdiff>
 800bc9c:	68c2      	ldr	r2, [r0, #12]
 800bc9e:	4606      	mov	r6, r0
 800bca0:	bb02      	cbnz	r2, 800bce4 <_dtoa_r+0xa1c>
 800bca2:	4601      	mov	r1, r0
 800bca4:	4648      	mov	r0, r9
 800bca6:	f000 fc97 	bl	800c5d8 <__mcmp>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	4631      	mov	r1, r6
 800bcae:	4658      	mov	r0, fp
 800bcb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bcb2:	f000 fa0d 	bl	800c0d0 <_Bfree>
 800bcb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcba:	9e07      	ldr	r6, [sp, #28]
 800bcbc:	ea43 0102 	orr.w	r1, r3, r2
 800bcc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcc2:	4319      	orrs	r1, r3
 800bcc4:	d110      	bne.n	800bce8 <_dtoa_r+0xa20>
 800bcc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bcca:	d029      	beq.n	800bd20 <_dtoa_r+0xa58>
 800bccc:	9b08      	ldr	r3, [sp, #32]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	dd02      	ble.n	800bcd8 <_dtoa_r+0xa10>
 800bcd2:	9b02      	ldr	r3, [sp, #8]
 800bcd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bcd8:	9b00      	ldr	r3, [sp, #0]
 800bcda:	f883 8000 	strb.w	r8, [r3]
 800bcde:	e63f      	b.n	800b960 <_dtoa_r+0x698>
 800bce0:	4628      	mov	r0, r5
 800bce2:	e7bb      	b.n	800bc5c <_dtoa_r+0x994>
 800bce4:	2201      	movs	r2, #1
 800bce6:	e7e1      	b.n	800bcac <_dtoa_r+0x9e4>
 800bce8:	9b08      	ldr	r3, [sp, #32]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	db04      	blt.n	800bcf8 <_dtoa_r+0xa30>
 800bcee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bcf0:	430b      	orrs	r3, r1
 800bcf2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bcf4:	430b      	orrs	r3, r1
 800bcf6:	d120      	bne.n	800bd3a <_dtoa_r+0xa72>
 800bcf8:	2a00      	cmp	r2, #0
 800bcfa:	dded      	ble.n	800bcd8 <_dtoa_r+0xa10>
 800bcfc:	4649      	mov	r1, r9
 800bcfe:	2201      	movs	r2, #1
 800bd00:	4658      	mov	r0, fp
 800bd02:	f000 fbfd 	bl	800c500 <__lshift>
 800bd06:	4621      	mov	r1, r4
 800bd08:	4681      	mov	r9, r0
 800bd0a:	f000 fc65 	bl	800c5d8 <__mcmp>
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	dc03      	bgt.n	800bd1a <_dtoa_r+0xa52>
 800bd12:	d1e1      	bne.n	800bcd8 <_dtoa_r+0xa10>
 800bd14:	f018 0f01 	tst.w	r8, #1
 800bd18:	d0de      	beq.n	800bcd8 <_dtoa_r+0xa10>
 800bd1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bd1e:	d1d8      	bne.n	800bcd2 <_dtoa_r+0xa0a>
 800bd20:	9a00      	ldr	r2, [sp, #0]
 800bd22:	2339      	movs	r3, #57	@ 0x39
 800bd24:	7013      	strb	r3, [r2, #0]
 800bd26:	4633      	mov	r3, r6
 800bd28:	461e      	mov	r6, r3
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bd30:	2a39      	cmp	r2, #57	@ 0x39
 800bd32:	d052      	beq.n	800bdda <_dtoa_r+0xb12>
 800bd34:	3201      	adds	r2, #1
 800bd36:	701a      	strb	r2, [r3, #0]
 800bd38:	e612      	b.n	800b960 <_dtoa_r+0x698>
 800bd3a:	2a00      	cmp	r2, #0
 800bd3c:	dd07      	ble.n	800bd4e <_dtoa_r+0xa86>
 800bd3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bd42:	d0ed      	beq.n	800bd20 <_dtoa_r+0xa58>
 800bd44:	9a00      	ldr	r2, [sp, #0]
 800bd46:	f108 0301 	add.w	r3, r8, #1
 800bd4a:	7013      	strb	r3, [r2, #0]
 800bd4c:	e608      	b.n	800b960 <_dtoa_r+0x698>
 800bd4e:	9b07      	ldr	r3, [sp, #28]
 800bd50:	9a07      	ldr	r2, [sp, #28]
 800bd52:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bd56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d028      	beq.n	800bdae <_dtoa_r+0xae6>
 800bd5c:	4649      	mov	r1, r9
 800bd5e:	2300      	movs	r3, #0
 800bd60:	220a      	movs	r2, #10
 800bd62:	4658      	mov	r0, fp
 800bd64:	f000 f9d6 	bl	800c114 <__multadd>
 800bd68:	42af      	cmp	r7, r5
 800bd6a:	4681      	mov	r9, r0
 800bd6c:	f04f 0300 	mov.w	r3, #0
 800bd70:	f04f 020a 	mov.w	r2, #10
 800bd74:	4639      	mov	r1, r7
 800bd76:	4658      	mov	r0, fp
 800bd78:	d107      	bne.n	800bd8a <_dtoa_r+0xac2>
 800bd7a:	f000 f9cb 	bl	800c114 <__multadd>
 800bd7e:	4607      	mov	r7, r0
 800bd80:	4605      	mov	r5, r0
 800bd82:	9b07      	ldr	r3, [sp, #28]
 800bd84:	3301      	adds	r3, #1
 800bd86:	9307      	str	r3, [sp, #28]
 800bd88:	e774      	b.n	800bc74 <_dtoa_r+0x9ac>
 800bd8a:	f000 f9c3 	bl	800c114 <__multadd>
 800bd8e:	4629      	mov	r1, r5
 800bd90:	4607      	mov	r7, r0
 800bd92:	2300      	movs	r3, #0
 800bd94:	220a      	movs	r2, #10
 800bd96:	4658      	mov	r0, fp
 800bd98:	f000 f9bc 	bl	800c114 <__multadd>
 800bd9c:	4605      	mov	r5, r0
 800bd9e:	e7f0      	b.n	800bd82 <_dtoa_r+0xaba>
 800bda0:	9b00      	ldr	r3, [sp, #0]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	bfcc      	ite	gt
 800bda6:	461e      	movgt	r6, r3
 800bda8:	2601      	movle	r6, #1
 800bdaa:	4456      	add	r6, sl
 800bdac:	2700      	movs	r7, #0
 800bdae:	4649      	mov	r1, r9
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	4658      	mov	r0, fp
 800bdb4:	f000 fba4 	bl	800c500 <__lshift>
 800bdb8:	4621      	mov	r1, r4
 800bdba:	4681      	mov	r9, r0
 800bdbc:	f000 fc0c 	bl	800c5d8 <__mcmp>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	dcb0      	bgt.n	800bd26 <_dtoa_r+0xa5e>
 800bdc4:	d102      	bne.n	800bdcc <_dtoa_r+0xb04>
 800bdc6:	f018 0f01 	tst.w	r8, #1
 800bdca:	d1ac      	bne.n	800bd26 <_dtoa_r+0xa5e>
 800bdcc:	4633      	mov	r3, r6
 800bdce:	461e      	mov	r6, r3
 800bdd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdd4:	2a30      	cmp	r2, #48	@ 0x30
 800bdd6:	d0fa      	beq.n	800bdce <_dtoa_r+0xb06>
 800bdd8:	e5c2      	b.n	800b960 <_dtoa_r+0x698>
 800bdda:	459a      	cmp	sl, r3
 800bddc:	d1a4      	bne.n	800bd28 <_dtoa_r+0xa60>
 800bdde:	9b04      	ldr	r3, [sp, #16]
 800bde0:	3301      	adds	r3, #1
 800bde2:	9304      	str	r3, [sp, #16]
 800bde4:	2331      	movs	r3, #49	@ 0x31
 800bde6:	f88a 3000 	strb.w	r3, [sl]
 800bdea:	e5b9      	b.n	800b960 <_dtoa_r+0x698>
 800bdec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bdee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800be4c <_dtoa_r+0xb84>
 800bdf2:	b11b      	cbz	r3, 800bdfc <_dtoa_r+0xb34>
 800bdf4:	f10a 0308 	add.w	r3, sl, #8
 800bdf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bdfa:	6013      	str	r3, [r2, #0]
 800bdfc:	4650      	mov	r0, sl
 800bdfe:	b019      	add	sp, #100	@ 0x64
 800be00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be06:	2b01      	cmp	r3, #1
 800be08:	f77f ae37 	ble.w	800ba7a <_dtoa_r+0x7b2>
 800be0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800be10:	2001      	movs	r0, #1
 800be12:	e655      	b.n	800bac0 <_dtoa_r+0x7f8>
 800be14:	9b00      	ldr	r3, [sp, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	f77f aed6 	ble.w	800bbc8 <_dtoa_r+0x900>
 800be1c:	4656      	mov	r6, sl
 800be1e:	4621      	mov	r1, r4
 800be20:	4648      	mov	r0, r9
 800be22:	f7ff f9c9 	bl	800b1b8 <quorem>
 800be26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800be2a:	f806 8b01 	strb.w	r8, [r6], #1
 800be2e:	9b00      	ldr	r3, [sp, #0]
 800be30:	eba6 020a 	sub.w	r2, r6, sl
 800be34:	4293      	cmp	r3, r2
 800be36:	ddb3      	ble.n	800bda0 <_dtoa_r+0xad8>
 800be38:	4649      	mov	r1, r9
 800be3a:	2300      	movs	r3, #0
 800be3c:	220a      	movs	r2, #10
 800be3e:	4658      	mov	r0, fp
 800be40:	f000 f968 	bl	800c114 <__multadd>
 800be44:	4681      	mov	r9, r0
 800be46:	e7ea      	b.n	800be1e <_dtoa_r+0xb56>
 800be48:	0800eec5 	.word	0x0800eec5
 800be4c:	0800ee49 	.word	0x0800ee49

0800be50 <_free_r>:
 800be50:	b538      	push	{r3, r4, r5, lr}
 800be52:	4605      	mov	r5, r0
 800be54:	2900      	cmp	r1, #0
 800be56:	d041      	beq.n	800bedc <_free_r+0x8c>
 800be58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be5c:	1f0c      	subs	r4, r1, #4
 800be5e:	2b00      	cmp	r3, #0
 800be60:	bfb8      	it	lt
 800be62:	18e4      	addlt	r4, r4, r3
 800be64:	f000 f8e8 	bl	800c038 <__malloc_lock>
 800be68:	4a1d      	ldr	r2, [pc, #116]	@ (800bee0 <_free_r+0x90>)
 800be6a:	6813      	ldr	r3, [r2, #0]
 800be6c:	b933      	cbnz	r3, 800be7c <_free_r+0x2c>
 800be6e:	6063      	str	r3, [r4, #4]
 800be70:	6014      	str	r4, [r2, #0]
 800be72:	4628      	mov	r0, r5
 800be74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be78:	f000 b8e4 	b.w	800c044 <__malloc_unlock>
 800be7c:	42a3      	cmp	r3, r4
 800be7e:	d908      	bls.n	800be92 <_free_r+0x42>
 800be80:	6820      	ldr	r0, [r4, #0]
 800be82:	1821      	adds	r1, r4, r0
 800be84:	428b      	cmp	r3, r1
 800be86:	bf01      	itttt	eq
 800be88:	6819      	ldreq	r1, [r3, #0]
 800be8a:	685b      	ldreq	r3, [r3, #4]
 800be8c:	1809      	addeq	r1, r1, r0
 800be8e:	6021      	streq	r1, [r4, #0]
 800be90:	e7ed      	b.n	800be6e <_free_r+0x1e>
 800be92:	461a      	mov	r2, r3
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	b10b      	cbz	r3, 800be9c <_free_r+0x4c>
 800be98:	42a3      	cmp	r3, r4
 800be9a:	d9fa      	bls.n	800be92 <_free_r+0x42>
 800be9c:	6811      	ldr	r1, [r2, #0]
 800be9e:	1850      	adds	r0, r2, r1
 800bea0:	42a0      	cmp	r0, r4
 800bea2:	d10b      	bne.n	800bebc <_free_r+0x6c>
 800bea4:	6820      	ldr	r0, [r4, #0]
 800bea6:	4401      	add	r1, r0
 800bea8:	1850      	adds	r0, r2, r1
 800beaa:	4283      	cmp	r3, r0
 800beac:	6011      	str	r1, [r2, #0]
 800beae:	d1e0      	bne.n	800be72 <_free_r+0x22>
 800beb0:	6818      	ldr	r0, [r3, #0]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	6053      	str	r3, [r2, #4]
 800beb6:	4408      	add	r0, r1
 800beb8:	6010      	str	r0, [r2, #0]
 800beba:	e7da      	b.n	800be72 <_free_r+0x22>
 800bebc:	d902      	bls.n	800bec4 <_free_r+0x74>
 800bebe:	230c      	movs	r3, #12
 800bec0:	602b      	str	r3, [r5, #0]
 800bec2:	e7d6      	b.n	800be72 <_free_r+0x22>
 800bec4:	6820      	ldr	r0, [r4, #0]
 800bec6:	1821      	adds	r1, r4, r0
 800bec8:	428b      	cmp	r3, r1
 800beca:	bf04      	itt	eq
 800becc:	6819      	ldreq	r1, [r3, #0]
 800bece:	685b      	ldreq	r3, [r3, #4]
 800bed0:	6063      	str	r3, [r4, #4]
 800bed2:	bf04      	itt	eq
 800bed4:	1809      	addeq	r1, r1, r0
 800bed6:	6021      	streq	r1, [r4, #0]
 800bed8:	6054      	str	r4, [r2, #4]
 800beda:	e7ca      	b.n	800be72 <_free_r+0x22>
 800bedc:	bd38      	pop	{r3, r4, r5, pc}
 800bede:	bf00      	nop
 800bee0:	20002108 	.word	0x20002108

0800bee4 <malloc>:
 800bee4:	4b02      	ldr	r3, [pc, #8]	@ (800bef0 <malloc+0xc>)
 800bee6:	4601      	mov	r1, r0
 800bee8:	6818      	ldr	r0, [r3, #0]
 800beea:	f000 b825 	b.w	800bf38 <_malloc_r>
 800beee:	bf00      	nop
 800bef0:	2000010c 	.word	0x2000010c

0800bef4 <sbrk_aligned>:
 800bef4:	b570      	push	{r4, r5, r6, lr}
 800bef6:	4e0f      	ldr	r6, [pc, #60]	@ (800bf34 <sbrk_aligned+0x40>)
 800bef8:	460c      	mov	r4, r1
 800befa:	6831      	ldr	r1, [r6, #0]
 800befc:	4605      	mov	r5, r0
 800befe:	b911      	cbnz	r1, 800bf06 <sbrk_aligned+0x12>
 800bf00:	f001 fe0c 	bl	800db1c <_sbrk_r>
 800bf04:	6030      	str	r0, [r6, #0]
 800bf06:	4621      	mov	r1, r4
 800bf08:	4628      	mov	r0, r5
 800bf0a:	f001 fe07 	bl	800db1c <_sbrk_r>
 800bf0e:	1c43      	adds	r3, r0, #1
 800bf10:	d103      	bne.n	800bf1a <sbrk_aligned+0x26>
 800bf12:	f04f 34ff 	mov.w	r4, #4294967295
 800bf16:	4620      	mov	r0, r4
 800bf18:	bd70      	pop	{r4, r5, r6, pc}
 800bf1a:	1cc4      	adds	r4, r0, #3
 800bf1c:	f024 0403 	bic.w	r4, r4, #3
 800bf20:	42a0      	cmp	r0, r4
 800bf22:	d0f8      	beq.n	800bf16 <sbrk_aligned+0x22>
 800bf24:	1a21      	subs	r1, r4, r0
 800bf26:	4628      	mov	r0, r5
 800bf28:	f001 fdf8 	bl	800db1c <_sbrk_r>
 800bf2c:	3001      	adds	r0, #1
 800bf2e:	d1f2      	bne.n	800bf16 <sbrk_aligned+0x22>
 800bf30:	e7ef      	b.n	800bf12 <sbrk_aligned+0x1e>
 800bf32:	bf00      	nop
 800bf34:	20002104 	.word	0x20002104

0800bf38 <_malloc_r>:
 800bf38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf3c:	1ccd      	adds	r5, r1, #3
 800bf3e:	f025 0503 	bic.w	r5, r5, #3
 800bf42:	3508      	adds	r5, #8
 800bf44:	2d0c      	cmp	r5, #12
 800bf46:	bf38      	it	cc
 800bf48:	250c      	movcc	r5, #12
 800bf4a:	2d00      	cmp	r5, #0
 800bf4c:	4606      	mov	r6, r0
 800bf4e:	db01      	blt.n	800bf54 <_malloc_r+0x1c>
 800bf50:	42a9      	cmp	r1, r5
 800bf52:	d904      	bls.n	800bf5e <_malloc_r+0x26>
 800bf54:	230c      	movs	r3, #12
 800bf56:	6033      	str	r3, [r6, #0]
 800bf58:	2000      	movs	r0, #0
 800bf5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c034 <_malloc_r+0xfc>
 800bf62:	f000 f869 	bl	800c038 <__malloc_lock>
 800bf66:	f8d8 3000 	ldr.w	r3, [r8]
 800bf6a:	461c      	mov	r4, r3
 800bf6c:	bb44      	cbnz	r4, 800bfc0 <_malloc_r+0x88>
 800bf6e:	4629      	mov	r1, r5
 800bf70:	4630      	mov	r0, r6
 800bf72:	f7ff ffbf 	bl	800bef4 <sbrk_aligned>
 800bf76:	1c43      	adds	r3, r0, #1
 800bf78:	4604      	mov	r4, r0
 800bf7a:	d158      	bne.n	800c02e <_malloc_r+0xf6>
 800bf7c:	f8d8 4000 	ldr.w	r4, [r8]
 800bf80:	4627      	mov	r7, r4
 800bf82:	2f00      	cmp	r7, #0
 800bf84:	d143      	bne.n	800c00e <_malloc_r+0xd6>
 800bf86:	2c00      	cmp	r4, #0
 800bf88:	d04b      	beq.n	800c022 <_malloc_r+0xea>
 800bf8a:	6823      	ldr	r3, [r4, #0]
 800bf8c:	4639      	mov	r1, r7
 800bf8e:	4630      	mov	r0, r6
 800bf90:	eb04 0903 	add.w	r9, r4, r3
 800bf94:	f001 fdc2 	bl	800db1c <_sbrk_r>
 800bf98:	4581      	cmp	r9, r0
 800bf9a:	d142      	bne.n	800c022 <_malloc_r+0xea>
 800bf9c:	6821      	ldr	r1, [r4, #0]
 800bf9e:	1a6d      	subs	r5, r5, r1
 800bfa0:	4629      	mov	r1, r5
 800bfa2:	4630      	mov	r0, r6
 800bfa4:	f7ff ffa6 	bl	800bef4 <sbrk_aligned>
 800bfa8:	3001      	adds	r0, #1
 800bfaa:	d03a      	beq.n	800c022 <_malloc_r+0xea>
 800bfac:	6823      	ldr	r3, [r4, #0]
 800bfae:	442b      	add	r3, r5
 800bfb0:	6023      	str	r3, [r4, #0]
 800bfb2:	f8d8 3000 	ldr.w	r3, [r8]
 800bfb6:	685a      	ldr	r2, [r3, #4]
 800bfb8:	bb62      	cbnz	r2, 800c014 <_malloc_r+0xdc>
 800bfba:	f8c8 7000 	str.w	r7, [r8]
 800bfbe:	e00f      	b.n	800bfe0 <_malloc_r+0xa8>
 800bfc0:	6822      	ldr	r2, [r4, #0]
 800bfc2:	1b52      	subs	r2, r2, r5
 800bfc4:	d420      	bmi.n	800c008 <_malloc_r+0xd0>
 800bfc6:	2a0b      	cmp	r2, #11
 800bfc8:	d917      	bls.n	800bffa <_malloc_r+0xc2>
 800bfca:	1961      	adds	r1, r4, r5
 800bfcc:	42a3      	cmp	r3, r4
 800bfce:	6025      	str	r5, [r4, #0]
 800bfd0:	bf18      	it	ne
 800bfd2:	6059      	strne	r1, [r3, #4]
 800bfd4:	6863      	ldr	r3, [r4, #4]
 800bfd6:	bf08      	it	eq
 800bfd8:	f8c8 1000 	streq.w	r1, [r8]
 800bfdc:	5162      	str	r2, [r4, r5]
 800bfde:	604b      	str	r3, [r1, #4]
 800bfe0:	4630      	mov	r0, r6
 800bfe2:	f000 f82f 	bl	800c044 <__malloc_unlock>
 800bfe6:	f104 000b 	add.w	r0, r4, #11
 800bfea:	1d23      	adds	r3, r4, #4
 800bfec:	f020 0007 	bic.w	r0, r0, #7
 800bff0:	1ac2      	subs	r2, r0, r3
 800bff2:	bf1c      	itt	ne
 800bff4:	1a1b      	subne	r3, r3, r0
 800bff6:	50a3      	strne	r3, [r4, r2]
 800bff8:	e7af      	b.n	800bf5a <_malloc_r+0x22>
 800bffa:	6862      	ldr	r2, [r4, #4]
 800bffc:	42a3      	cmp	r3, r4
 800bffe:	bf0c      	ite	eq
 800c000:	f8c8 2000 	streq.w	r2, [r8]
 800c004:	605a      	strne	r2, [r3, #4]
 800c006:	e7eb      	b.n	800bfe0 <_malloc_r+0xa8>
 800c008:	4623      	mov	r3, r4
 800c00a:	6864      	ldr	r4, [r4, #4]
 800c00c:	e7ae      	b.n	800bf6c <_malloc_r+0x34>
 800c00e:	463c      	mov	r4, r7
 800c010:	687f      	ldr	r7, [r7, #4]
 800c012:	e7b6      	b.n	800bf82 <_malloc_r+0x4a>
 800c014:	461a      	mov	r2, r3
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	42a3      	cmp	r3, r4
 800c01a:	d1fb      	bne.n	800c014 <_malloc_r+0xdc>
 800c01c:	2300      	movs	r3, #0
 800c01e:	6053      	str	r3, [r2, #4]
 800c020:	e7de      	b.n	800bfe0 <_malloc_r+0xa8>
 800c022:	230c      	movs	r3, #12
 800c024:	6033      	str	r3, [r6, #0]
 800c026:	4630      	mov	r0, r6
 800c028:	f000 f80c 	bl	800c044 <__malloc_unlock>
 800c02c:	e794      	b.n	800bf58 <_malloc_r+0x20>
 800c02e:	6005      	str	r5, [r0, #0]
 800c030:	e7d6      	b.n	800bfe0 <_malloc_r+0xa8>
 800c032:	bf00      	nop
 800c034:	20002108 	.word	0x20002108

0800c038 <__malloc_lock>:
 800c038:	4801      	ldr	r0, [pc, #4]	@ (800c040 <__malloc_lock+0x8>)
 800c03a:	f7ff b8b4 	b.w	800b1a6 <__retarget_lock_acquire_recursive>
 800c03e:	bf00      	nop
 800c040:	20002100 	.word	0x20002100

0800c044 <__malloc_unlock>:
 800c044:	4801      	ldr	r0, [pc, #4]	@ (800c04c <__malloc_unlock+0x8>)
 800c046:	f7ff b8af 	b.w	800b1a8 <__retarget_lock_release_recursive>
 800c04a:	bf00      	nop
 800c04c:	20002100 	.word	0x20002100

0800c050 <_Balloc>:
 800c050:	b570      	push	{r4, r5, r6, lr}
 800c052:	69c6      	ldr	r6, [r0, #28]
 800c054:	4604      	mov	r4, r0
 800c056:	460d      	mov	r5, r1
 800c058:	b976      	cbnz	r6, 800c078 <_Balloc+0x28>
 800c05a:	2010      	movs	r0, #16
 800c05c:	f7ff ff42 	bl	800bee4 <malloc>
 800c060:	4602      	mov	r2, r0
 800c062:	61e0      	str	r0, [r4, #28]
 800c064:	b920      	cbnz	r0, 800c070 <_Balloc+0x20>
 800c066:	4b18      	ldr	r3, [pc, #96]	@ (800c0c8 <_Balloc+0x78>)
 800c068:	4818      	ldr	r0, [pc, #96]	@ (800c0cc <_Balloc+0x7c>)
 800c06a:	216b      	movs	r1, #107	@ 0x6b
 800c06c:	f001 fd7c 	bl	800db68 <__assert_func>
 800c070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c074:	6006      	str	r6, [r0, #0]
 800c076:	60c6      	str	r6, [r0, #12]
 800c078:	69e6      	ldr	r6, [r4, #28]
 800c07a:	68f3      	ldr	r3, [r6, #12]
 800c07c:	b183      	cbz	r3, 800c0a0 <_Balloc+0x50>
 800c07e:	69e3      	ldr	r3, [r4, #28]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c086:	b9b8      	cbnz	r0, 800c0b8 <_Balloc+0x68>
 800c088:	2101      	movs	r1, #1
 800c08a:	fa01 f605 	lsl.w	r6, r1, r5
 800c08e:	1d72      	adds	r2, r6, #5
 800c090:	0092      	lsls	r2, r2, #2
 800c092:	4620      	mov	r0, r4
 800c094:	f001 fd86 	bl	800dba4 <_calloc_r>
 800c098:	b160      	cbz	r0, 800c0b4 <_Balloc+0x64>
 800c09a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c09e:	e00e      	b.n	800c0be <_Balloc+0x6e>
 800c0a0:	2221      	movs	r2, #33	@ 0x21
 800c0a2:	2104      	movs	r1, #4
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f001 fd7d 	bl	800dba4 <_calloc_r>
 800c0aa:	69e3      	ldr	r3, [r4, #28]
 800c0ac:	60f0      	str	r0, [r6, #12]
 800c0ae:	68db      	ldr	r3, [r3, #12]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d1e4      	bne.n	800c07e <_Balloc+0x2e>
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	bd70      	pop	{r4, r5, r6, pc}
 800c0b8:	6802      	ldr	r2, [r0, #0]
 800c0ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0be:	2300      	movs	r3, #0
 800c0c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0c4:	e7f7      	b.n	800c0b6 <_Balloc+0x66>
 800c0c6:	bf00      	nop
 800c0c8:	0800ee56 	.word	0x0800ee56
 800c0cc:	0800eed6 	.word	0x0800eed6

0800c0d0 <_Bfree>:
 800c0d0:	b570      	push	{r4, r5, r6, lr}
 800c0d2:	69c6      	ldr	r6, [r0, #28]
 800c0d4:	4605      	mov	r5, r0
 800c0d6:	460c      	mov	r4, r1
 800c0d8:	b976      	cbnz	r6, 800c0f8 <_Bfree+0x28>
 800c0da:	2010      	movs	r0, #16
 800c0dc:	f7ff ff02 	bl	800bee4 <malloc>
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	61e8      	str	r0, [r5, #28]
 800c0e4:	b920      	cbnz	r0, 800c0f0 <_Bfree+0x20>
 800c0e6:	4b09      	ldr	r3, [pc, #36]	@ (800c10c <_Bfree+0x3c>)
 800c0e8:	4809      	ldr	r0, [pc, #36]	@ (800c110 <_Bfree+0x40>)
 800c0ea:	218f      	movs	r1, #143	@ 0x8f
 800c0ec:	f001 fd3c 	bl	800db68 <__assert_func>
 800c0f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0f4:	6006      	str	r6, [r0, #0]
 800c0f6:	60c6      	str	r6, [r0, #12]
 800c0f8:	b13c      	cbz	r4, 800c10a <_Bfree+0x3a>
 800c0fa:	69eb      	ldr	r3, [r5, #28]
 800c0fc:	6862      	ldr	r2, [r4, #4]
 800c0fe:	68db      	ldr	r3, [r3, #12]
 800c100:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c104:	6021      	str	r1, [r4, #0]
 800c106:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c10a:	bd70      	pop	{r4, r5, r6, pc}
 800c10c:	0800ee56 	.word	0x0800ee56
 800c110:	0800eed6 	.word	0x0800eed6

0800c114 <__multadd>:
 800c114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c118:	690d      	ldr	r5, [r1, #16]
 800c11a:	4607      	mov	r7, r0
 800c11c:	460c      	mov	r4, r1
 800c11e:	461e      	mov	r6, r3
 800c120:	f101 0c14 	add.w	ip, r1, #20
 800c124:	2000      	movs	r0, #0
 800c126:	f8dc 3000 	ldr.w	r3, [ip]
 800c12a:	b299      	uxth	r1, r3
 800c12c:	fb02 6101 	mla	r1, r2, r1, r6
 800c130:	0c1e      	lsrs	r6, r3, #16
 800c132:	0c0b      	lsrs	r3, r1, #16
 800c134:	fb02 3306 	mla	r3, r2, r6, r3
 800c138:	b289      	uxth	r1, r1
 800c13a:	3001      	adds	r0, #1
 800c13c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c140:	4285      	cmp	r5, r0
 800c142:	f84c 1b04 	str.w	r1, [ip], #4
 800c146:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c14a:	dcec      	bgt.n	800c126 <__multadd+0x12>
 800c14c:	b30e      	cbz	r6, 800c192 <__multadd+0x7e>
 800c14e:	68a3      	ldr	r3, [r4, #8]
 800c150:	42ab      	cmp	r3, r5
 800c152:	dc19      	bgt.n	800c188 <__multadd+0x74>
 800c154:	6861      	ldr	r1, [r4, #4]
 800c156:	4638      	mov	r0, r7
 800c158:	3101      	adds	r1, #1
 800c15a:	f7ff ff79 	bl	800c050 <_Balloc>
 800c15e:	4680      	mov	r8, r0
 800c160:	b928      	cbnz	r0, 800c16e <__multadd+0x5a>
 800c162:	4602      	mov	r2, r0
 800c164:	4b0c      	ldr	r3, [pc, #48]	@ (800c198 <__multadd+0x84>)
 800c166:	480d      	ldr	r0, [pc, #52]	@ (800c19c <__multadd+0x88>)
 800c168:	21ba      	movs	r1, #186	@ 0xba
 800c16a:	f001 fcfd 	bl	800db68 <__assert_func>
 800c16e:	6922      	ldr	r2, [r4, #16]
 800c170:	3202      	adds	r2, #2
 800c172:	f104 010c 	add.w	r1, r4, #12
 800c176:	0092      	lsls	r2, r2, #2
 800c178:	300c      	adds	r0, #12
 800c17a:	f001 fcdf 	bl	800db3c <memcpy>
 800c17e:	4621      	mov	r1, r4
 800c180:	4638      	mov	r0, r7
 800c182:	f7ff ffa5 	bl	800c0d0 <_Bfree>
 800c186:	4644      	mov	r4, r8
 800c188:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c18c:	3501      	adds	r5, #1
 800c18e:	615e      	str	r6, [r3, #20]
 800c190:	6125      	str	r5, [r4, #16]
 800c192:	4620      	mov	r0, r4
 800c194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c198:	0800eec5 	.word	0x0800eec5
 800c19c:	0800eed6 	.word	0x0800eed6

0800c1a0 <__s2b>:
 800c1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1a4:	460c      	mov	r4, r1
 800c1a6:	4615      	mov	r5, r2
 800c1a8:	461f      	mov	r7, r3
 800c1aa:	2209      	movs	r2, #9
 800c1ac:	3308      	adds	r3, #8
 800c1ae:	4606      	mov	r6, r0
 800c1b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1b4:	2100      	movs	r1, #0
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	db09      	blt.n	800c1d0 <__s2b+0x30>
 800c1bc:	4630      	mov	r0, r6
 800c1be:	f7ff ff47 	bl	800c050 <_Balloc>
 800c1c2:	b940      	cbnz	r0, 800c1d6 <__s2b+0x36>
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	4b19      	ldr	r3, [pc, #100]	@ (800c22c <__s2b+0x8c>)
 800c1c8:	4819      	ldr	r0, [pc, #100]	@ (800c230 <__s2b+0x90>)
 800c1ca:	21d3      	movs	r1, #211	@ 0xd3
 800c1cc:	f001 fccc 	bl	800db68 <__assert_func>
 800c1d0:	0052      	lsls	r2, r2, #1
 800c1d2:	3101      	adds	r1, #1
 800c1d4:	e7f0      	b.n	800c1b8 <__s2b+0x18>
 800c1d6:	9b08      	ldr	r3, [sp, #32]
 800c1d8:	6143      	str	r3, [r0, #20]
 800c1da:	2d09      	cmp	r5, #9
 800c1dc:	f04f 0301 	mov.w	r3, #1
 800c1e0:	6103      	str	r3, [r0, #16]
 800c1e2:	dd16      	ble.n	800c212 <__s2b+0x72>
 800c1e4:	f104 0909 	add.w	r9, r4, #9
 800c1e8:	46c8      	mov	r8, r9
 800c1ea:	442c      	add	r4, r5
 800c1ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c1f0:	4601      	mov	r1, r0
 800c1f2:	3b30      	subs	r3, #48	@ 0x30
 800c1f4:	220a      	movs	r2, #10
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	f7ff ff8c 	bl	800c114 <__multadd>
 800c1fc:	45a0      	cmp	r8, r4
 800c1fe:	d1f5      	bne.n	800c1ec <__s2b+0x4c>
 800c200:	f1a5 0408 	sub.w	r4, r5, #8
 800c204:	444c      	add	r4, r9
 800c206:	1b2d      	subs	r5, r5, r4
 800c208:	1963      	adds	r3, r4, r5
 800c20a:	42bb      	cmp	r3, r7
 800c20c:	db04      	blt.n	800c218 <__s2b+0x78>
 800c20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c212:	340a      	adds	r4, #10
 800c214:	2509      	movs	r5, #9
 800c216:	e7f6      	b.n	800c206 <__s2b+0x66>
 800c218:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c21c:	4601      	mov	r1, r0
 800c21e:	3b30      	subs	r3, #48	@ 0x30
 800c220:	220a      	movs	r2, #10
 800c222:	4630      	mov	r0, r6
 800c224:	f7ff ff76 	bl	800c114 <__multadd>
 800c228:	e7ee      	b.n	800c208 <__s2b+0x68>
 800c22a:	bf00      	nop
 800c22c:	0800eec5 	.word	0x0800eec5
 800c230:	0800eed6 	.word	0x0800eed6

0800c234 <__hi0bits>:
 800c234:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c238:	4603      	mov	r3, r0
 800c23a:	bf36      	itet	cc
 800c23c:	0403      	lslcc	r3, r0, #16
 800c23e:	2000      	movcs	r0, #0
 800c240:	2010      	movcc	r0, #16
 800c242:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c246:	bf3c      	itt	cc
 800c248:	021b      	lslcc	r3, r3, #8
 800c24a:	3008      	addcc	r0, #8
 800c24c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c250:	bf3c      	itt	cc
 800c252:	011b      	lslcc	r3, r3, #4
 800c254:	3004      	addcc	r0, #4
 800c256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c25a:	bf3c      	itt	cc
 800c25c:	009b      	lslcc	r3, r3, #2
 800c25e:	3002      	addcc	r0, #2
 800c260:	2b00      	cmp	r3, #0
 800c262:	db05      	blt.n	800c270 <__hi0bits+0x3c>
 800c264:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c268:	f100 0001 	add.w	r0, r0, #1
 800c26c:	bf08      	it	eq
 800c26e:	2020      	moveq	r0, #32
 800c270:	4770      	bx	lr

0800c272 <__lo0bits>:
 800c272:	6803      	ldr	r3, [r0, #0]
 800c274:	4602      	mov	r2, r0
 800c276:	f013 0007 	ands.w	r0, r3, #7
 800c27a:	d00b      	beq.n	800c294 <__lo0bits+0x22>
 800c27c:	07d9      	lsls	r1, r3, #31
 800c27e:	d421      	bmi.n	800c2c4 <__lo0bits+0x52>
 800c280:	0798      	lsls	r0, r3, #30
 800c282:	bf49      	itett	mi
 800c284:	085b      	lsrmi	r3, r3, #1
 800c286:	089b      	lsrpl	r3, r3, #2
 800c288:	2001      	movmi	r0, #1
 800c28a:	6013      	strmi	r3, [r2, #0]
 800c28c:	bf5c      	itt	pl
 800c28e:	6013      	strpl	r3, [r2, #0]
 800c290:	2002      	movpl	r0, #2
 800c292:	4770      	bx	lr
 800c294:	b299      	uxth	r1, r3
 800c296:	b909      	cbnz	r1, 800c29c <__lo0bits+0x2a>
 800c298:	0c1b      	lsrs	r3, r3, #16
 800c29a:	2010      	movs	r0, #16
 800c29c:	b2d9      	uxtb	r1, r3
 800c29e:	b909      	cbnz	r1, 800c2a4 <__lo0bits+0x32>
 800c2a0:	3008      	adds	r0, #8
 800c2a2:	0a1b      	lsrs	r3, r3, #8
 800c2a4:	0719      	lsls	r1, r3, #28
 800c2a6:	bf04      	itt	eq
 800c2a8:	091b      	lsreq	r3, r3, #4
 800c2aa:	3004      	addeq	r0, #4
 800c2ac:	0799      	lsls	r1, r3, #30
 800c2ae:	bf04      	itt	eq
 800c2b0:	089b      	lsreq	r3, r3, #2
 800c2b2:	3002      	addeq	r0, #2
 800c2b4:	07d9      	lsls	r1, r3, #31
 800c2b6:	d403      	bmi.n	800c2c0 <__lo0bits+0x4e>
 800c2b8:	085b      	lsrs	r3, r3, #1
 800c2ba:	f100 0001 	add.w	r0, r0, #1
 800c2be:	d003      	beq.n	800c2c8 <__lo0bits+0x56>
 800c2c0:	6013      	str	r3, [r2, #0]
 800c2c2:	4770      	bx	lr
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	4770      	bx	lr
 800c2c8:	2020      	movs	r0, #32
 800c2ca:	4770      	bx	lr

0800c2cc <__i2b>:
 800c2cc:	b510      	push	{r4, lr}
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	2101      	movs	r1, #1
 800c2d2:	f7ff febd 	bl	800c050 <_Balloc>
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	b928      	cbnz	r0, 800c2e6 <__i2b+0x1a>
 800c2da:	4b05      	ldr	r3, [pc, #20]	@ (800c2f0 <__i2b+0x24>)
 800c2dc:	4805      	ldr	r0, [pc, #20]	@ (800c2f4 <__i2b+0x28>)
 800c2de:	f240 1145 	movw	r1, #325	@ 0x145
 800c2e2:	f001 fc41 	bl	800db68 <__assert_func>
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	6144      	str	r4, [r0, #20]
 800c2ea:	6103      	str	r3, [r0, #16]
 800c2ec:	bd10      	pop	{r4, pc}
 800c2ee:	bf00      	nop
 800c2f0:	0800eec5 	.word	0x0800eec5
 800c2f4:	0800eed6 	.word	0x0800eed6

0800c2f8 <__multiply>:
 800c2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fc:	4614      	mov	r4, r2
 800c2fe:	690a      	ldr	r2, [r1, #16]
 800c300:	6923      	ldr	r3, [r4, #16]
 800c302:	429a      	cmp	r2, r3
 800c304:	bfa8      	it	ge
 800c306:	4623      	movge	r3, r4
 800c308:	460f      	mov	r7, r1
 800c30a:	bfa4      	itt	ge
 800c30c:	460c      	movge	r4, r1
 800c30e:	461f      	movge	r7, r3
 800c310:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c314:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c318:	68a3      	ldr	r3, [r4, #8]
 800c31a:	6861      	ldr	r1, [r4, #4]
 800c31c:	eb0a 0609 	add.w	r6, sl, r9
 800c320:	42b3      	cmp	r3, r6
 800c322:	b085      	sub	sp, #20
 800c324:	bfb8      	it	lt
 800c326:	3101      	addlt	r1, #1
 800c328:	f7ff fe92 	bl	800c050 <_Balloc>
 800c32c:	b930      	cbnz	r0, 800c33c <__multiply+0x44>
 800c32e:	4602      	mov	r2, r0
 800c330:	4b44      	ldr	r3, [pc, #272]	@ (800c444 <__multiply+0x14c>)
 800c332:	4845      	ldr	r0, [pc, #276]	@ (800c448 <__multiply+0x150>)
 800c334:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c338:	f001 fc16 	bl	800db68 <__assert_func>
 800c33c:	f100 0514 	add.w	r5, r0, #20
 800c340:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c344:	462b      	mov	r3, r5
 800c346:	2200      	movs	r2, #0
 800c348:	4543      	cmp	r3, r8
 800c34a:	d321      	bcc.n	800c390 <__multiply+0x98>
 800c34c:	f107 0114 	add.w	r1, r7, #20
 800c350:	f104 0214 	add.w	r2, r4, #20
 800c354:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c358:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c35c:	9302      	str	r3, [sp, #8]
 800c35e:	1b13      	subs	r3, r2, r4
 800c360:	3b15      	subs	r3, #21
 800c362:	f023 0303 	bic.w	r3, r3, #3
 800c366:	3304      	adds	r3, #4
 800c368:	f104 0715 	add.w	r7, r4, #21
 800c36c:	42ba      	cmp	r2, r7
 800c36e:	bf38      	it	cc
 800c370:	2304      	movcc	r3, #4
 800c372:	9301      	str	r3, [sp, #4]
 800c374:	9b02      	ldr	r3, [sp, #8]
 800c376:	9103      	str	r1, [sp, #12]
 800c378:	428b      	cmp	r3, r1
 800c37a:	d80c      	bhi.n	800c396 <__multiply+0x9e>
 800c37c:	2e00      	cmp	r6, #0
 800c37e:	dd03      	ble.n	800c388 <__multiply+0x90>
 800c380:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c384:	2b00      	cmp	r3, #0
 800c386:	d05b      	beq.n	800c440 <__multiply+0x148>
 800c388:	6106      	str	r6, [r0, #16]
 800c38a:	b005      	add	sp, #20
 800c38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c390:	f843 2b04 	str.w	r2, [r3], #4
 800c394:	e7d8      	b.n	800c348 <__multiply+0x50>
 800c396:	f8b1 a000 	ldrh.w	sl, [r1]
 800c39a:	f1ba 0f00 	cmp.w	sl, #0
 800c39e:	d024      	beq.n	800c3ea <__multiply+0xf2>
 800c3a0:	f104 0e14 	add.w	lr, r4, #20
 800c3a4:	46a9      	mov	r9, r5
 800c3a6:	f04f 0c00 	mov.w	ip, #0
 800c3aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c3ae:	f8d9 3000 	ldr.w	r3, [r9]
 800c3b2:	fa1f fb87 	uxth.w	fp, r7
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	fb0a 330b 	mla	r3, sl, fp, r3
 800c3bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c3c0:	f8d9 7000 	ldr.w	r7, [r9]
 800c3c4:	4463      	add	r3, ip
 800c3c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c3ca:	fb0a c70b 	mla	r7, sl, fp, ip
 800c3ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c3d8:	4572      	cmp	r2, lr
 800c3da:	f849 3b04 	str.w	r3, [r9], #4
 800c3de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c3e2:	d8e2      	bhi.n	800c3aa <__multiply+0xb2>
 800c3e4:	9b01      	ldr	r3, [sp, #4]
 800c3e6:	f845 c003 	str.w	ip, [r5, r3]
 800c3ea:	9b03      	ldr	r3, [sp, #12]
 800c3ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c3f0:	3104      	adds	r1, #4
 800c3f2:	f1b9 0f00 	cmp.w	r9, #0
 800c3f6:	d021      	beq.n	800c43c <__multiply+0x144>
 800c3f8:	682b      	ldr	r3, [r5, #0]
 800c3fa:	f104 0c14 	add.w	ip, r4, #20
 800c3fe:	46ae      	mov	lr, r5
 800c400:	f04f 0a00 	mov.w	sl, #0
 800c404:	f8bc b000 	ldrh.w	fp, [ip]
 800c408:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c40c:	fb09 770b 	mla	r7, r9, fp, r7
 800c410:	4457      	add	r7, sl
 800c412:	b29b      	uxth	r3, r3
 800c414:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c418:	f84e 3b04 	str.w	r3, [lr], #4
 800c41c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c420:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c424:	f8be 3000 	ldrh.w	r3, [lr]
 800c428:	fb09 330a 	mla	r3, r9, sl, r3
 800c42c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c430:	4562      	cmp	r2, ip
 800c432:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c436:	d8e5      	bhi.n	800c404 <__multiply+0x10c>
 800c438:	9f01      	ldr	r7, [sp, #4]
 800c43a:	51eb      	str	r3, [r5, r7]
 800c43c:	3504      	adds	r5, #4
 800c43e:	e799      	b.n	800c374 <__multiply+0x7c>
 800c440:	3e01      	subs	r6, #1
 800c442:	e79b      	b.n	800c37c <__multiply+0x84>
 800c444:	0800eec5 	.word	0x0800eec5
 800c448:	0800eed6 	.word	0x0800eed6

0800c44c <__pow5mult>:
 800c44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c450:	4615      	mov	r5, r2
 800c452:	f012 0203 	ands.w	r2, r2, #3
 800c456:	4607      	mov	r7, r0
 800c458:	460e      	mov	r6, r1
 800c45a:	d007      	beq.n	800c46c <__pow5mult+0x20>
 800c45c:	4c25      	ldr	r4, [pc, #148]	@ (800c4f4 <__pow5mult+0xa8>)
 800c45e:	3a01      	subs	r2, #1
 800c460:	2300      	movs	r3, #0
 800c462:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c466:	f7ff fe55 	bl	800c114 <__multadd>
 800c46a:	4606      	mov	r6, r0
 800c46c:	10ad      	asrs	r5, r5, #2
 800c46e:	d03d      	beq.n	800c4ec <__pow5mult+0xa0>
 800c470:	69fc      	ldr	r4, [r7, #28]
 800c472:	b97c      	cbnz	r4, 800c494 <__pow5mult+0x48>
 800c474:	2010      	movs	r0, #16
 800c476:	f7ff fd35 	bl	800bee4 <malloc>
 800c47a:	4602      	mov	r2, r0
 800c47c:	61f8      	str	r0, [r7, #28]
 800c47e:	b928      	cbnz	r0, 800c48c <__pow5mult+0x40>
 800c480:	4b1d      	ldr	r3, [pc, #116]	@ (800c4f8 <__pow5mult+0xac>)
 800c482:	481e      	ldr	r0, [pc, #120]	@ (800c4fc <__pow5mult+0xb0>)
 800c484:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c488:	f001 fb6e 	bl	800db68 <__assert_func>
 800c48c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c490:	6004      	str	r4, [r0, #0]
 800c492:	60c4      	str	r4, [r0, #12]
 800c494:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c498:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c49c:	b94c      	cbnz	r4, 800c4b2 <__pow5mult+0x66>
 800c49e:	f240 2171 	movw	r1, #625	@ 0x271
 800c4a2:	4638      	mov	r0, r7
 800c4a4:	f7ff ff12 	bl	800c2cc <__i2b>
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800c4ae:	4604      	mov	r4, r0
 800c4b0:	6003      	str	r3, [r0, #0]
 800c4b2:	f04f 0900 	mov.w	r9, #0
 800c4b6:	07eb      	lsls	r3, r5, #31
 800c4b8:	d50a      	bpl.n	800c4d0 <__pow5mult+0x84>
 800c4ba:	4631      	mov	r1, r6
 800c4bc:	4622      	mov	r2, r4
 800c4be:	4638      	mov	r0, r7
 800c4c0:	f7ff ff1a 	bl	800c2f8 <__multiply>
 800c4c4:	4631      	mov	r1, r6
 800c4c6:	4680      	mov	r8, r0
 800c4c8:	4638      	mov	r0, r7
 800c4ca:	f7ff fe01 	bl	800c0d0 <_Bfree>
 800c4ce:	4646      	mov	r6, r8
 800c4d0:	106d      	asrs	r5, r5, #1
 800c4d2:	d00b      	beq.n	800c4ec <__pow5mult+0xa0>
 800c4d4:	6820      	ldr	r0, [r4, #0]
 800c4d6:	b938      	cbnz	r0, 800c4e8 <__pow5mult+0x9c>
 800c4d8:	4622      	mov	r2, r4
 800c4da:	4621      	mov	r1, r4
 800c4dc:	4638      	mov	r0, r7
 800c4de:	f7ff ff0b 	bl	800c2f8 <__multiply>
 800c4e2:	6020      	str	r0, [r4, #0]
 800c4e4:	f8c0 9000 	str.w	r9, [r0]
 800c4e8:	4604      	mov	r4, r0
 800c4ea:	e7e4      	b.n	800c4b6 <__pow5mult+0x6a>
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4f2:	bf00      	nop
 800c4f4:	0800ef30 	.word	0x0800ef30
 800c4f8:	0800ee56 	.word	0x0800ee56
 800c4fc:	0800eed6 	.word	0x0800eed6

0800c500 <__lshift>:
 800c500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c504:	460c      	mov	r4, r1
 800c506:	6849      	ldr	r1, [r1, #4]
 800c508:	6923      	ldr	r3, [r4, #16]
 800c50a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c50e:	68a3      	ldr	r3, [r4, #8]
 800c510:	4607      	mov	r7, r0
 800c512:	4691      	mov	r9, r2
 800c514:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c518:	f108 0601 	add.w	r6, r8, #1
 800c51c:	42b3      	cmp	r3, r6
 800c51e:	db0b      	blt.n	800c538 <__lshift+0x38>
 800c520:	4638      	mov	r0, r7
 800c522:	f7ff fd95 	bl	800c050 <_Balloc>
 800c526:	4605      	mov	r5, r0
 800c528:	b948      	cbnz	r0, 800c53e <__lshift+0x3e>
 800c52a:	4602      	mov	r2, r0
 800c52c:	4b28      	ldr	r3, [pc, #160]	@ (800c5d0 <__lshift+0xd0>)
 800c52e:	4829      	ldr	r0, [pc, #164]	@ (800c5d4 <__lshift+0xd4>)
 800c530:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c534:	f001 fb18 	bl	800db68 <__assert_func>
 800c538:	3101      	adds	r1, #1
 800c53a:	005b      	lsls	r3, r3, #1
 800c53c:	e7ee      	b.n	800c51c <__lshift+0x1c>
 800c53e:	2300      	movs	r3, #0
 800c540:	f100 0114 	add.w	r1, r0, #20
 800c544:	f100 0210 	add.w	r2, r0, #16
 800c548:	4618      	mov	r0, r3
 800c54a:	4553      	cmp	r3, sl
 800c54c:	db33      	blt.n	800c5b6 <__lshift+0xb6>
 800c54e:	6920      	ldr	r0, [r4, #16]
 800c550:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c554:	f104 0314 	add.w	r3, r4, #20
 800c558:	f019 091f 	ands.w	r9, r9, #31
 800c55c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c560:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c564:	d02b      	beq.n	800c5be <__lshift+0xbe>
 800c566:	f1c9 0e20 	rsb	lr, r9, #32
 800c56a:	468a      	mov	sl, r1
 800c56c:	2200      	movs	r2, #0
 800c56e:	6818      	ldr	r0, [r3, #0]
 800c570:	fa00 f009 	lsl.w	r0, r0, r9
 800c574:	4310      	orrs	r0, r2
 800c576:	f84a 0b04 	str.w	r0, [sl], #4
 800c57a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c57e:	459c      	cmp	ip, r3
 800c580:	fa22 f20e 	lsr.w	r2, r2, lr
 800c584:	d8f3      	bhi.n	800c56e <__lshift+0x6e>
 800c586:	ebac 0304 	sub.w	r3, ip, r4
 800c58a:	3b15      	subs	r3, #21
 800c58c:	f023 0303 	bic.w	r3, r3, #3
 800c590:	3304      	adds	r3, #4
 800c592:	f104 0015 	add.w	r0, r4, #21
 800c596:	4584      	cmp	ip, r0
 800c598:	bf38      	it	cc
 800c59a:	2304      	movcc	r3, #4
 800c59c:	50ca      	str	r2, [r1, r3]
 800c59e:	b10a      	cbz	r2, 800c5a4 <__lshift+0xa4>
 800c5a0:	f108 0602 	add.w	r6, r8, #2
 800c5a4:	3e01      	subs	r6, #1
 800c5a6:	4638      	mov	r0, r7
 800c5a8:	612e      	str	r6, [r5, #16]
 800c5aa:	4621      	mov	r1, r4
 800c5ac:	f7ff fd90 	bl	800c0d0 <_Bfree>
 800c5b0:	4628      	mov	r0, r5
 800c5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	e7c5      	b.n	800c54a <__lshift+0x4a>
 800c5be:	3904      	subs	r1, #4
 800c5c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c5c8:	459c      	cmp	ip, r3
 800c5ca:	d8f9      	bhi.n	800c5c0 <__lshift+0xc0>
 800c5cc:	e7ea      	b.n	800c5a4 <__lshift+0xa4>
 800c5ce:	bf00      	nop
 800c5d0:	0800eec5 	.word	0x0800eec5
 800c5d4:	0800eed6 	.word	0x0800eed6

0800c5d8 <__mcmp>:
 800c5d8:	690a      	ldr	r2, [r1, #16]
 800c5da:	4603      	mov	r3, r0
 800c5dc:	6900      	ldr	r0, [r0, #16]
 800c5de:	1a80      	subs	r0, r0, r2
 800c5e0:	b530      	push	{r4, r5, lr}
 800c5e2:	d10e      	bne.n	800c602 <__mcmp+0x2a>
 800c5e4:	3314      	adds	r3, #20
 800c5e6:	3114      	adds	r1, #20
 800c5e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c5ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c5f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c5f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c5f8:	4295      	cmp	r5, r2
 800c5fa:	d003      	beq.n	800c604 <__mcmp+0x2c>
 800c5fc:	d205      	bcs.n	800c60a <__mcmp+0x32>
 800c5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c602:	bd30      	pop	{r4, r5, pc}
 800c604:	42a3      	cmp	r3, r4
 800c606:	d3f3      	bcc.n	800c5f0 <__mcmp+0x18>
 800c608:	e7fb      	b.n	800c602 <__mcmp+0x2a>
 800c60a:	2001      	movs	r0, #1
 800c60c:	e7f9      	b.n	800c602 <__mcmp+0x2a>
	...

0800c610 <__mdiff>:
 800c610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c614:	4689      	mov	r9, r1
 800c616:	4606      	mov	r6, r0
 800c618:	4611      	mov	r1, r2
 800c61a:	4648      	mov	r0, r9
 800c61c:	4614      	mov	r4, r2
 800c61e:	f7ff ffdb 	bl	800c5d8 <__mcmp>
 800c622:	1e05      	subs	r5, r0, #0
 800c624:	d112      	bne.n	800c64c <__mdiff+0x3c>
 800c626:	4629      	mov	r1, r5
 800c628:	4630      	mov	r0, r6
 800c62a:	f7ff fd11 	bl	800c050 <_Balloc>
 800c62e:	4602      	mov	r2, r0
 800c630:	b928      	cbnz	r0, 800c63e <__mdiff+0x2e>
 800c632:	4b3f      	ldr	r3, [pc, #252]	@ (800c730 <__mdiff+0x120>)
 800c634:	f240 2137 	movw	r1, #567	@ 0x237
 800c638:	483e      	ldr	r0, [pc, #248]	@ (800c734 <__mdiff+0x124>)
 800c63a:	f001 fa95 	bl	800db68 <__assert_func>
 800c63e:	2301      	movs	r3, #1
 800c640:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c644:	4610      	mov	r0, r2
 800c646:	b003      	add	sp, #12
 800c648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c64c:	bfbc      	itt	lt
 800c64e:	464b      	movlt	r3, r9
 800c650:	46a1      	movlt	r9, r4
 800c652:	4630      	mov	r0, r6
 800c654:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c658:	bfba      	itte	lt
 800c65a:	461c      	movlt	r4, r3
 800c65c:	2501      	movlt	r5, #1
 800c65e:	2500      	movge	r5, #0
 800c660:	f7ff fcf6 	bl	800c050 <_Balloc>
 800c664:	4602      	mov	r2, r0
 800c666:	b918      	cbnz	r0, 800c670 <__mdiff+0x60>
 800c668:	4b31      	ldr	r3, [pc, #196]	@ (800c730 <__mdiff+0x120>)
 800c66a:	f240 2145 	movw	r1, #581	@ 0x245
 800c66e:	e7e3      	b.n	800c638 <__mdiff+0x28>
 800c670:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c674:	6926      	ldr	r6, [r4, #16]
 800c676:	60c5      	str	r5, [r0, #12]
 800c678:	f109 0310 	add.w	r3, r9, #16
 800c67c:	f109 0514 	add.w	r5, r9, #20
 800c680:	f104 0e14 	add.w	lr, r4, #20
 800c684:	f100 0b14 	add.w	fp, r0, #20
 800c688:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c68c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c690:	9301      	str	r3, [sp, #4]
 800c692:	46d9      	mov	r9, fp
 800c694:	f04f 0c00 	mov.w	ip, #0
 800c698:	9b01      	ldr	r3, [sp, #4]
 800c69a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c69e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c6a2:	9301      	str	r3, [sp, #4]
 800c6a4:	fa1f f38a 	uxth.w	r3, sl
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	b283      	uxth	r3, r0
 800c6ac:	1acb      	subs	r3, r1, r3
 800c6ae:	0c00      	lsrs	r0, r0, #16
 800c6b0:	4463      	add	r3, ip
 800c6b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c6b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c6c0:	4576      	cmp	r6, lr
 800c6c2:	f849 3b04 	str.w	r3, [r9], #4
 800c6c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c6ca:	d8e5      	bhi.n	800c698 <__mdiff+0x88>
 800c6cc:	1b33      	subs	r3, r6, r4
 800c6ce:	3b15      	subs	r3, #21
 800c6d0:	f023 0303 	bic.w	r3, r3, #3
 800c6d4:	3415      	adds	r4, #21
 800c6d6:	3304      	adds	r3, #4
 800c6d8:	42a6      	cmp	r6, r4
 800c6da:	bf38      	it	cc
 800c6dc:	2304      	movcc	r3, #4
 800c6de:	441d      	add	r5, r3
 800c6e0:	445b      	add	r3, fp
 800c6e2:	461e      	mov	r6, r3
 800c6e4:	462c      	mov	r4, r5
 800c6e6:	4544      	cmp	r4, r8
 800c6e8:	d30e      	bcc.n	800c708 <__mdiff+0xf8>
 800c6ea:	f108 0103 	add.w	r1, r8, #3
 800c6ee:	1b49      	subs	r1, r1, r5
 800c6f0:	f021 0103 	bic.w	r1, r1, #3
 800c6f4:	3d03      	subs	r5, #3
 800c6f6:	45a8      	cmp	r8, r5
 800c6f8:	bf38      	it	cc
 800c6fa:	2100      	movcc	r1, #0
 800c6fc:	440b      	add	r3, r1
 800c6fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c702:	b191      	cbz	r1, 800c72a <__mdiff+0x11a>
 800c704:	6117      	str	r7, [r2, #16]
 800c706:	e79d      	b.n	800c644 <__mdiff+0x34>
 800c708:	f854 1b04 	ldr.w	r1, [r4], #4
 800c70c:	46e6      	mov	lr, ip
 800c70e:	0c08      	lsrs	r0, r1, #16
 800c710:	fa1c fc81 	uxtah	ip, ip, r1
 800c714:	4471      	add	r1, lr
 800c716:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c71a:	b289      	uxth	r1, r1
 800c71c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c720:	f846 1b04 	str.w	r1, [r6], #4
 800c724:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c728:	e7dd      	b.n	800c6e6 <__mdiff+0xd6>
 800c72a:	3f01      	subs	r7, #1
 800c72c:	e7e7      	b.n	800c6fe <__mdiff+0xee>
 800c72e:	bf00      	nop
 800c730:	0800eec5 	.word	0x0800eec5
 800c734:	0800eed6 	.word	0x0800eed6

0800c738 <__ulp>:
 800c738:	b082      	sub	sp, #8
 800c73a:	ed8d 0b00 	vstr	d0, [sp]
 800c73e:	9a01      	ldr	r2, [sp, #4]
 800c740:	4b0f      	ldr	r3, [pc, #60]	@ (800c780 <__ulp+0x48>)
 800c742:	4013      	ands	r3, r2
 800c744:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c748:	2b00      	cmp	r3, #0
 800c74a:	dc08      	bgt.n	800c75e <__ulp+0x26>
 800c74c:	425b      	negs	r3, r3
 800c74e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c752:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c756:	da04      	bge.n	800c762 <__ulp+0x2a>
 800c758:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c75c:	4113      	asrs	r3, r2
 800c75e:	2200      	movs	r2, #0
 800c760:	e008      	b.n	800c774 <__ulp+0x3c>
 800c762:	f1a2 0314 	sub.w	r3, r2, #20
 800c766:	2b1e      	cmp	r3, #30
 800c768:	bfda      	itte	le
 800c76a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c76e:	40da      	lsrle	r2, r3
 800c770:	2201      	movgt	r2, #1
 800c772:	2300      	movs	r3, #0
 800c774:	4619      	mov	r1, r3
 800c776:	4610      	mov	r0, r2
 800c778:	ec41 0b10 	vmov	d0, r0, r1
 800c77c:	b002      	add	sp, #8
 800c77e:	4770      	bx	lr
 800c780:	7ff00000 	.word	0x7ff00000

0800c784 <__b2d>:
 800c784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c788:	6906      	ldr	r6, [r0, #16]
 800c78a:	f100 0814 	add.w	r8, r0, #20
 800c78e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c792:	1f37      	subs	r7, r6, #4
 800c794:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c798:	4610      	mov	r0, r2
 800c79a:	f7ff fd4b 	bl	800c234 <__hi0bits>
 800c79e:	f1c0 0320 	rsb	r3, r0, #32
 800c7a2:	280a      	cmp	r0, #10
 800c7a4:	600b      	str	r3, [r1, #0]
 800c7a6:	491b      	ldr	r1, [pc, #108]	@ (800c814 <__b2d+0x90>)
 800c7a8:	dc15      	bgt.n	800c7d6 <__b2d+0x52>
 800c7aa:	f1c0 0c0b 	rsb	ip, r0, #11
 800c7ae:	fa22 f30c 	lsr.w	r3, r2, ip
 800c7b2:	45b8      	cmp	r8, r7
 800c7b4:	ea43 0501 	orr.w	r5, r3, r1
 800c7b8:	bf34      	ite	cc
 800c7ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c7be:	2300      	movcs	r3, #0
 800c7c0:	3015      	adds	r0, #21
 800c7c2:	fa02 f000 	lsl.w	r0, r2, r0
 800c7c6:	fa23 f30c 	lsr.w	r3, r3, ip
 800c7ca:	4303      	orrs	r3, r0
 800c7cc:	461c      	mov	r4, r3
 800c7ce:	ec45 4b10 	vmov	d0, r4, r5
 800c7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7d6:	45b8      	cmp	r8, r7
 800c7d8:	bf3a      	itte	cc
 800c7da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c7de:	f1a6 0708 	subcc.w	r7, r6, #8
 800c7e2:	2300      	movcs	r3, #0
 800c7e4:	380b      	subs	r0, #11
 800c7e6:	d012      	beq.n	800c80e <__b2d+0x8a>
 800c7e8:	f1c0 0120 	rsb	r1, r0, #32
 800c7ec:	fa23 f401 	lsr.w	r4, r3, r1
 800c7f0:	4082      	lsls	r2, r0
 800c7f2:	4322      	orrs	r2, r4
 800c7f4:	4547      	cmp	r7, r8
 800c7f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c7fa:	bf8c      	ite	hi
 800c7fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c800:	2200      	movls	r2, #0
 800c802:	4083      	lsls	r3, r0
 800c804:	40ca      	lsrs	r2, r1
 800c806:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c80a:	4313      	orrs	r3, r2
 800c80c:	e7de      	b.n	800c7cc <__b2d+0x48>
 800c80e:	ea42 0501 	orr.w	r5, r2, r1
 800c812:	e7db      	b.n	800c7cc <__b2d+0x48>
 800c814:	3ff00000 	.word	0x3ff00000

0800c818 <__d2b>:
 800c818:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c81c:	460f      	mov	r7, r1
 800c81e:	2101      	movs	r1, #1
 800c820:	ec59 8b10 	vmov	r8, r9, d0
 800c824:	4616      	mov	r6, r2
 800c826:	f7ff fc13 	bl	800c050 <_Balloc>
 800c82a:	4604      	mov	r4, r0
 800c82c:	b930      	cbnz	r0, 800c83c <__d2b+0x24>
 800c82e:	4602      	mov	r2, r0
 800c830:	4b23      	ldr	r3, [pc, #140]	@ (800c8c0 <__d2b+0xa8>)
 800c832:	4824      	ldr	r0, [pc, #144]	@ (800c8c4 <__d2b+0xac>)
 800c834:	f240 310f 	movw	r1, #783	@ 0x30f
 800c838:	f001 f996 	bl	800db68 <__assert_func>
 800c83c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c840:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c844:	b10d      	cbz	r5, 800c84a <__d2b+0x32>
 800c846:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c84a:	9301      	str	r3, [sp, #4]
 800c84c:	f1b8 0300 	subs.w	r3, r8, #0
 800c850:	d023      	beq.n	800c89a <__d2b+0x82>
 800c852:	4668      	mov	r0, sp
 800c854:	9300      	str	r3, [sp, #0]
 800c856:	f7ff fd0c 	bl	800c272 <__lo0bits>
 800c85a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c85e:	b1d0      	cbz	r0, 800c896 <__d2b+0x7e>
 800c860:	f1c0 0320 	rsb	r3, r0, #32
 800c864:	fa02 f303 	lsl.w	r3, r2, r3
 800c868:	430b      	orrs	r3, r1
 800c86a:	40c2      	lsrs	r2, r0
 800c86c:	6163      	str	r3, [r4, #20]
 800c86e:	9201      	str	r2, [sp, #4]
 800c870:	9b01      	ldr	r3, [sp, #4]
 800c872:	61a3      	str	r3, [r4, #24]
 800c874:	2b00      	cmp	r3, #0
 800c876:	bf0c      	ite	eq
 800c878:	2201      	moveq	r2, #1
 800c87a:	2202      	movne	r2, #2
 800c87c:	6122      	str	r2, [r4, #16]
 800c87e:	b1a5      	cbz	r5, 800c8aa <__d2b+0x92>
 800c880:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c884:	4405      	add	r5, r0
 800c886:	603d      	str	r5, [r7, #0]
 800c888:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c88c:	6030      	str	r0, [r6, #0]
 800c88e:	4620      	mov	r0, r4
 800c890:	b003      	add	sp, #12
 800c892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c896:	6161      	str	r1, [r4, #20]
 800c898:	e7ea      	b.n	800c870 <__d2b+0x58>
 800c89a:	a801      	add	r0, sp, #4
 800c89c:	f7ff fce9 	bl	800c272 <__lo0bits>
 800c8a0:	9b01      	ldr	r3, [sp, #4]
 800c8a2:	6163      	str	r3, [r4, #20]
 800c8a4:	3020      	adds	r0, #32
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	e7e8      	b.n	800c87c <__d2b+0x64>
 800c8aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c8ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c8b2:	6038      	str	r0, [r7, #0]
 800c8b4:	6918      	ldr	r0, [r3, #16]
 800c8b6:	f7ff fcbd 	bl	800c234 <__hi0bits>
 800c8ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c8be:	e7e5      	b.n	800c88c <__d2b+0x74>
 800c8c0:	0800eec5 	.word	0x0800eec5
 800c8c4:	0800eed6 	.word	0x0800eed6

0800c8c8 <__ratio>:
 800c8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8cc:	b085      	sub	sp, #20
 800c8ce:	e9cd 1000 	strd	r1, r0, [sp]
 800c8d2:	a902      	add	r1, sp, #8
 800c8d4:	f7ff ff56 	bl	800c784 <__b2d>
 800c8d8:	9800      	ldr	r0, [sp, #0]
 800c8da:	a903      	add	r1, sp, #12
 800c8dc:	ec55 4b10 	vmov	r4, r5, d0
 800c8e0:	f7ff ff50 	bl	800c784 <__b2d>
 800c8e4:	9b01      	ldr	r3, [sp, #4]
 800c8e6:	6919      	ldr	r1, [r3, #16]
 800c8e8:	9b00      	ldr	r3, [sp, #0]
 800c8ea:	691b      	ldr	r3, [r3, #16]
 800c8ec:	1ac9      	subs	r1, r1, r3
 800c8ee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c8f2:	1a9b      	subs	r3, r3, r2
 800c8f4:	ec5b ab10 	vmov	sl, fp, d0
 800c8f8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	bfce      	itee	gt
 800c900:	462a      	movgt	r2, r5
 800c902:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c906:	465a      	movle	r2, fp
 800c908:	462f      	mov	r7, r5
 800c90a:	46d9      	mov	r9, fp
 800c90c:	bfcc      	ite	gt
 800c90e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c912:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c916:	464b      	mov	r3, r9
 800c918:	4652      	mov	r2, sl
 800c91a:	4620      	mov	r0, r4
 800c91c:	4639      	mov	r1, r7
 800c91e:	f7f3 ff9d 	bl	800085c <__aeabi_ddiv>
 800c922:	ec41 0b10 	vmov	d0, r0, r1
 800c926:	b005      	add	sp, #20
 800c928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c92c <__copybits>:
 800c92c:	3901      	subs	r1, #1
 800c92e:	b570      	push	{r4, r5, r6, lr}
 800c930:	1149      	asrs	r1, r1, #5
 800c932:	6914      	ldr	r4, [r2, #16]
 800c934:	3101      	adds	r1, #1
 800c936:	f102 0314 	add.w	r3, r2, #20
 800c93a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c93e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c942:	1f05      	subs	r5, r0, #4
 800c944:	42a3      	cmp	r3, r4
 800c946:	d30c      	bcc.n	800c962 <__copybits+0x36>
 800c948:	1aa3      	subs	r3, r4, r2
 800c94a:	3b11      	subs	r3, #17
 800c94c:	f023 0303 	bic.w	r3, r3, #3
 800c950:	3211      	adds	r2, #17
 800c952:	42a2      	cmp	r2, r4
 800c954:	bf88      	it	hi
 800c956:	2300      	movhi	r3, #0
 800c958:	4418      	add	r0, r3
 800c95a:	2300      	movs	r3, #0
 800c95c:	4288      	cmp	r0, r1
 800c95e:	d305      	bcc.n	800c96c <__copybits+0x40>
 800c960:	bd70      	pop	{r4, r5, r6, pc}
 800c962:	f853 6b04 	ldr.w	r6, [r3], #4
 800c966:	f845 6f04 	str.w	r6, [r5, #4]!
 800c96a:	e7eb      	b.n	800c944 <__copybits+0x18>
 800c96c:	f840 3b04 	str.w	r3, [r0], #4
 800c970:	e7f4      	b.n	800c95c <__copybits+0x30>

0800c972 <__any_on>:
 800c972:	f100 0214 	add.w	r2, r0, #20
 800c976:	6900      	ldr	r0, [r0, #16]
 800c978:	114b      	asrs	r3, r1, #5
 800c97a:	4298      	cmp	r0, r3
 800c97c:	b510      	push	{r4, lr}
 800c97e:	db11      	blt.n	800c9a4 <__any_on+0x32>
 800c980:	dd0a      	ble.n	800c998 <__any_on+0x26>
 800c982:	f011 011f 	ands.w	r1, r1, #31
 800c986:	d007      	beq.n	800c998 <__any_on+0x26>
 800c988:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c98c:	fa24 f001 	lsr.w	r0, r4, r1
 800c990:	fa00 f101 	lsl.w	r1, r0, r1
 800c994:	428c      	cmp	r4, r1
 800c996:	d10b      	bne.n	800c9b0 <__any_on+0x3e>
 800c998:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d803      	bhi.n	800c9a8 <__any_on+0x36>
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	bd10      	pop	{r4, pc}
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	e7f7      	b.n	800c998 <__any_on+0x26>
 800c9a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9ac:	2900      	cmp	r1, #0
 800c9ae:	d0f5      	beq.n	800c99c <__any_on+0x2a>
 800c9b0:	2001      	movs	r0, #1
 800c9b2:	e7f6      	b.n	800c9a2 <__any_on+0x30>

0800c9b4 <sulp>:
 800c9b4:	b570      	push	{r4, r5, r6, lr}
 800c9b6:	4604      	mov	r4, r0
 800c9b8:	460d      	mov	r5, r1
 800c9ba:	ec45 4b10 	vmov	d0, r4, r5
 800c9be:	4616      	mov	r6, r2
 800c9c0:	f7ff feba 	bl	800c738 <__ulp>
 800c9c4:	ec51 0b10 	vmov	r0, r1, d0
 800c9c8:	b17e      	cbz	r6, 800c9ea <sulp+0x36>
 800c9ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c9ce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	dd09      	ble.n	800c9ea <sulp+0x36>
 800c9d6:	051b      	lsls	r3, r3, #20
 800c9d8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c9dc:	2400      	movs	r4, #0
 800c9de:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c9e2:	4622      	mov	r2, r4
 800c9e4:	462b      	mov	r3, r5
 800c9e6:	f7f3 fe0f 	bl	8000608 <__aeabi_dmul>
 800c9ea:	ec41 0b10 	vmov	d0, r0, r1
 800c9ee:	bd70      	pop	{r4, r5, r6, pc}

0800c9f0 <_strtod_l>:
 800c9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f4:	b09f      	sub	sp, #124	@ 0x7c
 800c9f6:	460c      	mov	r4, r1
 800c9f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	921a      	str	r2, [sp, #104]	@ 0x68
 800c9fe:	9005      	str	r0, [sp, #20]
 800ca00:	f04f 0a00 	mov.w	sl, #0
 800ca04:	f04f 0b00 	mov.w	fp, #0
 800ca08:	460a      	mov	r2, r1
 800ca0a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca0c:	7811      	ldrb	r1, [r2, #0]
 800ca0e:	292b      	cmp	r1, #43	@ 0x2b
 800ca10:	d04a      	beq.n	800caa8 <_strtod_l+0xb8>
 800ca12:	d838      	bhi.n	800ca86 <_strtod_l+0x96>
 800ca14:	290d      	cmp	r1, #13
 800ca16:	d832      	bhi.n	800ca7e <_strtod_l+0x8e>
 800ca18:	2908      	cmp	r1, #8
 800ca1a:	d832      	bhi.n	800ca82 <_strtod_l+0x92>
 800ca1c:	2900      	cmp	r1, #0
 800ca1e:	d03b      	beq.n	800ca98 <_strtod_l+0xa8>
 800ca20:	2200      	movs	r2, #0
 800ca22:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ca24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ca26:	782a      	ldrb	r2, [r5, #0]
 800ca28:	2a30      	cmp	r2, #48	@ 0x30
 800ca2a:	f040 80b3 	bne.w	800cb94 <_strtod_l+0x1a4>
 800ca2e:	786a      	ldrb	r2, [r5, #1]
 800ca30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ca34:	2a58      	cmp	r2, #88	@ 0x58
 800ca36:	d16e      	bne.n	800cb16 <_strtod_l+0x126>
 800ca38:	9302      	str	r3, [sp, #8]
 800ca3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca3c:	9301      	str	r3, [sp, #4]
 800ca3e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ca40:	9300      	str	r3, [sp, #0]
 800ca42:	4a8e      	ldr	r2, [pc, #568]	@ (800cc7c <_strtod_l+0x28c>)
 800ca44:	9805      	ldr	r0, [sp, #20]
 800ca46:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ca48:	a919      	add	r1, sp, #100	@ 0x64
 800ca4a:	f001 f927 	bl	800dc9c <__gethex>
 800ca4e:	f010 060f 	ands.w	r6, r0, #15
 800ca52:	4604      	mov	r4, r0
 800ca54:	d005      	beq.n	800ca62 <_strtod_l+0x72>
 800ca56:	2e06      	cmp	r6, #6
 800ca58:	d128      	bne.n	800caac <_strtod_l+0xbc>
 800ca5a:	3501      	adds	r5, #1
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ca60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	f040 858e 	bne.w	800d586 <_strtod_l+0xb96>
 800ca6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca6c:	b1cb      	cbz	r3, 800caa2 <_strtod_l+0xb2>
 800ca6e:	4652      	mov	r2, sl
 800ca70:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ca74:	ec43 2b10 	vmov	d0, r2, r3
 800ca78:	b01f      	add	sp, #124	@ 0x7c
 800ca7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca7e:	2920      	cmp	r1, #32
 800ca80:	d1ce      	bne.n	800ca20 <_strtod_l+0x30>
 800ca82:	3201      	adds	r2, #1
 800ca84:	e7c1      	b.n	800ca0a <_strtod_l+0x1a>
 800ca86:	292d      	cmp	r1, #45	@ 0x2d
 800ca88:	d1ca      	bne.n	800ca20 <_strtod_l+0x30>
 800ca8a:	2101      	movs	r1, #1
 800ca8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ca8e:	1c51      	adds	r1, r2, #1
 800ca90:	9119      	str	r1, [sp, #100]	@ 0x64
 800ca92:	7852      	ldrb	r2, [r2, #1]
 800ca94:	2a00      	cmp	r2, #0
 800ca96:	d1c5      	bne.n	800ca24 <_strtod_l+0x34>
 800ca98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ca9a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	f040 8570 	bne.w	800d582 <_strtod_l+0xb92>
 800caa2:	4652      	mov	r2, sl
 800caa4:	465b      	mov	r3, fp
 800caa6:	e7e5      	b.n	800ca74 <_strtod_l+0x84>
 800caa8:	2100      	movs	r1, #0
 800caaa:	e7ef      	b.n	800ca8c <_strtod_l+0x9c>
 800caac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800caae:	b13a      	cbz	r2, 800cac0 <_strtod_l+0xd0>
 800cab0:	2135      	movs	r1, #53	@ 0x35
 800cab2:	a81c      	add	r0, sp, #112	@ 0x70
 800cab4:	f7ff ff3a 	bl	800c92c <__copybits>
 800cab8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800caba:	9805      	ldr	r0, [sp, #20]
 800cabc:	f7ff fb08 	bl	800c0d0 <_Bfree>
 800cac0:	3e01      	subs	r6, #1
 800cac2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cac4:	2e04      	cmp	r6, #4
 800cac6:	d806      	bhi.n	800cad6 <_strtod_l+0xe6>
 800cac8:	e8df f006 	tbb	[pc, r6]
 800cacc:	201d0314 	.word	0x201d0314
 800cad0:	14          	.byte	0x14
 800cad1:	00          	.byte	0x00
 800cad2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cad6:	05e1      	lsls	r1, r4, #23
 800cad8:	bf48      	it	mi
 800cada:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cade:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cae2:	0d1b      	lsrs	r3, r3, #20
 800cae4:	051b      	lsls	r3, r3, #20
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d1bb      	bne.n	800ca62 <_strtod_l+0x72>
 800caea:	f7fe fb31 	bl	800b150 <__errno>
 800caee:	2322      	movs	r3, #34	@ 0x22
 800caf0:	6003      	str	r3, [r0, #0]
 800caf2:	e7b6      	b.n	800ca62 <_strtod_l+0x72>
 800caf4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800caf8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cafc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cb00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cb04:	e7e7      	b.n	800cad6 <_strtod_l+0xe6>
 800cb06:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cc84 <_strtod_l+0x294>
 800cb0a:	e7e4      	b.n	800cad6 <_strtod_l+0xe6>
 800cb0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cb10:	f04f 3aff 	mov.w	sl, #4294967295
 800cb14:	e7df      	b.n	800cad6 <_strtod_l+0xe6>
 800cb16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb18:	1c5a      	adds	r2, r3, #1
 800cb1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb1c:	785b      	ldrb	r3, [r3, #1]
 800cb1e:	2b30      	cmp	r3, #48	@ 0x30
 800cb20:	d0f9      	beq.n	800cb16 <_strtod_l+0x126>
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d09d      	beq.n	800ca62 <_strtod_l+0x72>
 800cb26:	2301      	movs	r3, #1
 800cb28:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb2c:	930c      	str	r3, [sp, #48]	@ 0x30
 800cb2e:	2300      	movs	r3, #0
 800cb30:	9308      	str	r3, [sp, #32]
 800cb32:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb34:	461f      	mov	r7, r3
 800cb36:	220a      	movs	r2, #10
 800cb38:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cb3a:	7805      	ldrb	r5, [r0, #0]
 800cb3c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cb40:	b2d9      	uxtb	r1, r3
 800cb42:	2909      	cmp	r1, #9
 800cb44:	d928      	bls.n	800cb98 <_strtod_l+0x1a8>
 800cb46:	494e      	ldr	r1, [pc, #312]	@ (800cc80 <_strtod_l+0x290>)
 800cb48:	2201      	movs	r2, #1
 800cb4a:	f000 ffd5 	bl	800daf8 <strncmp>
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	d032      	beq.n	800cbb8 <_strtod_l+0x1c8>
 800cb52:	2000      	movs	r0, #0
 800cb54:	462a      	mov	r2, r5
 800cb56:	4681      	mov	r9, r0
 800cb58:	463d      	mov	r5, r7
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2a65      	cmp	r2, #101	@ 0x65
 800cb5e:	d001      	beq.n	800cb64 <_strtod_l+0x174>
 800cb60:	2a45      	cmp	r2, #69	@ 0x45
 800cb62:	d114      	bne.n	800cb8e <_strtod_l+0x19e>
 800cb64:	b91d      	cbnz	r5, 800cb6e <_strtod_l+0x17e>
 800cb66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb68:	4302      	orrs	r2, r0
 800cb6a:	d095      	beq.n	800ca98 <_strtod_l+0xa8>
 800cb6c:	2500      	movs	r5, #0
 800cb6e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cb70:	1c62      	adds	r2, r4, #1
 800cb72:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb74:	7862      	ldrb	r2, [r4, #1]
 800cb76:	2a2b      	cmp	r2, #43	@ 0x2b
 800cb78:	d077      	beq.n	800cc6a <_strtod_l+0x27a>
 800cb7a:	2a2d      	cmp	r2, #45	@ 0x2d
 800cb7c:	d07b      	beq.n	800cc76 <_strtod_l+0x286>
 800cb7e:	f04f 0c00 	mov.w	ip, #0
 800cb82:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cb86:	2909      	cmp	r1, #9
 800cb88:	f240 8082 	bls.w	800cc90 <_strtod_l+0x2a0>
 800cb8c:	9419      	str	r4, [sp, #100]	@ 0x64
 800cb8e:	f04f 0800 	mov.w	r8, #0
 800cb92:	e0a2      	b.n	800ccda <_strtod_l+0x2ea>
 800cb94:	2300      	movs	r3, #0
 800cb96:	e7c7      	b.n	800cb28 <_strtod_l+0x138>
 800cb98:	2f08      	cmp	r7, #8
 800cb9a:	bfd5      	itete	le
 800cb9c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cb9e:	9908      	ldrgt	r1, [sp, #32]
 800cba0:	fb02 3301 	mlale	r3, r2, r1, r3
 800cba4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cba8:	f100 0001 	add.w	r0, r0, #1
 800cbac:	bfd4      	ite	le
 800cbae:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cbb0:	9308      	strgt	r3, [sp, #32]
 800cbb2:	3701      	adds	r7, #1
 800cbb4:	9019      	str	r0, [sp, #100]	@ 0x64
 800cbb6:	e7bf      	b.n	800cb38 <_strtod_l+0x148>
 800cbb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbba:	1c5a      	adds	r2, r3, #1
 800cbbc:	9219      	str	r2, [sp, #100]	@ 0x64
 800cbbe:	785a      	ldrb	r2, [r3, #1]
 800cbc0:	b37f      	cbz	r7, 800cc22 <_strtod_l+0x232>
 800cbc2:	4681      	mov	r9, r0
 800cbc4:	463d      	mov	r5, r7
 800cbc6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cbca:	2b09      	cmp	r3, #9
 800cbcc:	d912      	bls.n	800cbf4 <_strtod_l+0x204>
 800cbce:	2301      	movs	r3, #1
 800cbd0:	e7c4      	b.n	800cb5c <_strtod_l+0x16c>
 800cbd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbd4:	1c5a      	adds	r2, r3, #1
 800cbd6:	9219      	str	r2, [sp, #100]	@ 0x64
 800cbd8:	785a      	ldrb	r2, [r3, #1]
 800cbda:	3001      	adds	r0, #1
 800cbdc:	2a30      	cmp	r2, #48	@ 0x30
 800cbde:	d0f8      	beq.n	800cbd2 <_strtod_l+0x1e2>
 800cbe0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cbe4:	2b08      	cmp	r3, #8
 800cbe6:	f200 84d3 	bhi.w	800d590 <_strtod_l+0xba0>
 800cbea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbec:	930c      	str	r3, [sp, #48]	@ 0x30
 800cbee:	4681      	mov	r9, r0
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	4605      	mov	r5, r0
 800cbf4:	3a30      	subs	r2, #48	@ 0x30
 800cbf6:	f100 0301 	add.w	r3, r0, #1
 800cbfa:	d02a      	beq.n	800cc52 <_strtod_l+0x262>
 800cbfc:	4499      	add	r9, r3
 800cbfe:	eb00 0c05 	add.w	ip, r0, r5
 800cc02:	462b      	mov	r3, r5
 800cc04:	210a      	movs	r1, #10
 800cc06:	4563      	cmp	r3, ip
 800cc08:	d10d      	bne.n	800cc26 <_strtod_l+0x236>
 800cc0a:	1c69      	adds	r1, r5, #1
 800cc0c:	4401      	add	r1, r0
 800cc0e:	4428      	add	r0, r5
 800cc10:	2808      	cmp	r0, #8
 800cc12:	dc16      	bgt.n	800cc42 <_strtod_l+0x252>
 800cc14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cc16:	230a      	movs	r3, #10
 800cc18:	fb03 2300 	mla	r3, r3, r0, r2
 800cc1c:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc1e:	2300      	movs	r3, #0
 800cc20:	e018      	b.n	800cc54 <_strtod_l+0x264>
 800cc22:	4638      	mov	r0, r7
 800cc24:	e7da      	b.n	800cbdc <_strtod_l+0x1ec>
 800cc26:	2b08      	cmp	r3, #8
 800cc28:	f103 0301 	add.w	r3, r3, #1
 800cc2c:	dc03      	bgt.n	800cc36 <_strtod_l+0x246>
 800cc2e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cc30:	434e      	muls	r6, r1
 800cc32:	960a      	str	r6, [sp, #40]	@ 0x28
 800cc34:	e7e7      	b.n	800cc06 <_strtod_l+0x216>
 800cc36:	2b10      	cmp	r3, #16
 800cc38:	bfde      	ittt	le
 800cc3a:	9e08      	ldrle	r6, [sp, #32]
 800cc3c:	434e      	mulle	r6, r1
 800cc3e:	9608      	strle	r6, [sp, #32]
 800cc40:	e7e1      	b.n	800cc06 <_strtod_l+0x216>
 800cc42:	280f      	cmp	r0, #15
 800cc44:	dceb      	bgt.n	800cc1e <_strtod_l+0x22e>
 800cc46:	9808      	ldr	r0, [sp, #32]
 800cc48:	230a      	movs	r3, #10
 800cc4a:	fb03 2300 	mla	r3, r3, r0, r2
 800cc4e:	9308      	str	r3, [sp, #32]
 800cc50:	e7e5      	b.n	800cc1e <_strtod_l+0x22e>
 800cc52:	4629      	mov	r1, r5
 800cc54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cc56:	1c50      	adds	r0, r2, #1
 800cc58:	9019      	str	r0, [sp, #100]	@ 0x64
 800cc5a:	7852      	ldrb	r2, [r2, #1]
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	460d      	mov	r5, r1
 800cc60:	e7b1      	b.n	800cbc6 <_strtod_l+0x1d6>
 800cc62:	f04f 0900 	mov.w	r9, #0
 800cc66:	2301      	movs	r3, #1
 800cc68:	e77d      	b.n	800cb66 <_strtod_l+0x176>
 800cc6a:	f04f 0c00 	mov.w	ip, #0
 800cc6e:	1ca2      	adds	r2, r4, #2
 800cc70:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc72:	78a2      	ldrb	r2, [r4, #2]
 800cc74:	e785      	b.n	800cb82 <_strtod_l+0x192>
 800cc76:	f04f 0c01 	mov.w	ip, #1
 800cc7a:	e7f8      	b.n	800cc6e <_strtod_l+0x27e>
 800cc7c:	0800f048 	.word	0x0800f048
 800cc80:	0800f030 	.word	0x0800f030
 800cc84:	7ff00000 	.word	0x7ff00000
 800cc88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cc8a:	1c51      	adds	r1, r2, #1
 800cc8c:	9119      	str	r1, [sp, #100]	@ 0x64
 800cc8e:	7852      	ldrb	r2, [r2, #1]
 800cc90:	2a30      	cmp	r2, #48	@ 0x30
 800cc92:	d0f9      	beq.n	800cc88 <_strtod_l+0x298>
 800cc94:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cc98:	2908      	cmp	r1, #8
 800cc9a:	f63f af78 	bhi.w	800cb8e <_strtod_l+0x19e>
 800cc9e:	3a30      	subs	r2, #48	@ 0x30
 800cca0:	920e      	str	r2, [sp, #56]	@ 0x38
 800cca2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cca4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cca6:	f04f 080a 	mov.w	r8, #10
 800ccaa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ccac:	1c56      	adds	r6, r2, #1
 800ccae:	9619      	str	r6, [sp, #100]	@ 0x64
 800ccb0:	7852      	ldrb	r2, [r2, #1]
 800ccb2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ccb6:	f1be 0f09 	cmp.w	lr, #9
 800ccba:	d939      	bls.n	800cd30 <_strtod_l+0x340>
 800ccbc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ccbe:	1a76      	subs	r6, r6, r1
 800ccc0:	2e08      	cmp	r6, #8
 800ccc2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ccc6:	dc03      	bgt.n	800ccd0 <_strtod_l+0x2e0>
 800ccc8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ccca:	4588      	cmp	r8, r1
 800cccc:	bfa8      	it	ge
 800ccce:	4688      	movge	r8, r1
 800ccd0:	f1bc 0f00 	cmp.w	ip, #0
 800ccd4:	d001      	beq.n	800ccda <_strtod_l+0x2ea>
 800ccd6:	f1c8 0800 	rsb	r8, r8, #0
 800ccda:	2d00      	cmp	r5, #0
 800ccdc:	d14e      	bne.n	800cd7c <_strtod_l+0x38c>
 800ccde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cce0:	4308      	orrs	r0, r1
 800cce2:	f47f aebe 	bne.w	800ca62 <_strtod_l+0x72>
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	f47f aed6 	bne.w	800ca98 <_strtod_l+0xa8>
 800ccec:	2a69      	cmp	r2, #105	@ 0x69
 800ccee:	d028      	beq.n	800cd42 <_strtod_l+0x352>
 800ccf0:	dc25      	bgt.n	800cd3e <_strtod_l+0x34e>
 800ccf2:	2a49      	cmp	r2, #73	@ 0x49
 800ccf4:	d025      	beq.n	800cd42 <_strtod_l+0x352>
 800ccf6:	2a4e      	cmp	r2, #78	@ 0x4e
 800ccf8:	f47f aece 	bne.w	800ca98 <_strtod_l+0xa8>
 800ccfc:	499b      	ldr	r1, [pc, #620]	@ (800cf6c <_strtod_l+0x57c>)
 800ccfe:	a819      	add	r0, sp, #100	@ 0x64
 800cd00:	f001 f9ee 	bl	800e0e0 <__match>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	f43f aec7 	beq.w	800ca98 <_strtod_l+0xa8>
 800cd0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	2b28      	cmp	r3, #40	@ 0x28
 800cd10:	d12e      	bne.n	800cd70 <_strtod_l+0x380>
 800cd12:	4997      	ldr	r1, [pc, #604]	@ (800cf70 <_strtod_l+0x580>)
 800cd14:	aa1c      	add	r2, sp, #112	@ 0x70
 800cd16:	a819      	add	r0, sp, #100	@ 0x64
 800cd18:	f001 f9f6 	bl	800e108 <__hexnan>
 800cd1c:	2805      	cmp	r0, #5
 800cd1e:	d127      	bne.n	800cd70 <_strtod_l+0x380>
 800cd20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cd22:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cd26:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cd2a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cd2e:	e698      	b.n	800ca62 <_strtod_l+0x72>
 800cd30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cd32:	fb08 2101 	mla	r1, r8, r1, r2
 800cd36:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cd3a:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd3c:	e7b5      	b.n	800ccaa <_strtod_l+0x2ba>
 800cd3e:	2a6e      	cmp	r2, #110	@ 0x6e
 800cd40:	e7da      	b.n	800ccf8 <_strtod_l+0x308>
 800cd42:	498c      	ldr	r1, [pc, #560]	@ (800cf74 <_strtod_l+0x584>)
 800cd44:	a819      	add	r0, sp, #100	@ 0x64
 800cd46:	f001 f9cb 	bl	800e0e0 <__match>
 800cd4a:	2800      	cmp	r0, #0
 800cd4c:	f43f aea4 	beq.w	800ca98 <_strtod_l+0xa8>
 800cd50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd52:	4989      	ldr	r1, [pc, #548]	@ (800cf78 <_strtod_l+0x588>)
 800cd54:	3b01      	subs	r3, #1
 800cd56:	a819      	add	r0, sp, #100	@ 0x64
 800cd58:	9319      	str	r3, [sp, #100]	@ 0x64
 800cd5a:	f001 f9c1 	bl	800e0e0 <__match>
 800cd5e:	b910      	cbnz	r0, 800cd66 <_strtod_l+0x376>
 800cd60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd62:	3301      	adds	r3, #1
 800cd64:	9319      	str	r3, [sp, #100]	@ 0x64
 800cd66:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cf88 <_strtod_l+0x598>
 800cd6a:	f04f 0a00 	mov.w	sl, #0
 800cd6e:	e678      	b.n	800ca62 <_strtod_l+0x72>
 800cd70:	4882      	ldr	r0, [pc, #520]	@ (800cf7c <_strtod_l+0x58c>)
 800cd72:	f000 fef1 	bl	800db58 <nan>
 800cd76:	ec5b ab10 	vmov	sl, fp, d0
 800cd7a:	e672      	b.n	800ca62 <_strtod_l+0x72>
 800cd7c:	eba8 0309 	sub.w	r3, r8, r9
 800cd80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cd82:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd84:	2f00      	cmp	r7, #0
 800cd86:	bf08      	it	eq
 800cd88:	462f      	moveq	r7, r5
 800cd8a:	2d10      	cmp	r5, #16
 800cd8c:	462c      	mov	r4, r5
 800cd8e:	bfa8      	it	ge
 800cd90:	2410      	movge	r4, #16
 800cd92:	f7f3 fbbf 	bl	8000514 <__aeabi_ui2d>
 800cd96:	2d09      	cmp	r5, #9
 800cd98:	4682      	mov	sl, r0
 800cd9a:	468b      	mov	fp, r1
 800cd9c:	dc13      	bgt.n	800cdc6 <_strtod_l+0x3d6>
 800cd9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f43f ae5e 	beq.w	800ca62 <_strtod_l+0x72>
 800cda6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cda8:	dd78      	ble.n	800ce9c <_strtod_l+0x4ac>
 800cdaa:	2b16      	cmp	r3, #22
 800cdac:	dc5f      	bgt.n	800ce6e <_strtod_l+0x47e>
 800cdae:	4974      	ldr	r1, [pc, #464]	@ (800cf80 <_strtod_l+0x590>)
 800cdb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cdb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdb8:	4652      	mov	r2, sl
 800cdba:	465b      	mov	r3, fp
 800cdbc:	f7f3 fc24 	bl	8000608 <__aeabi_dmul>
 800cdc0:	4682      	mov	sl, r0
 800cdc2:	468b      	mov	fp, r1
 800cdc4:	e64d      	b.n	800ca62 <_strtod_l+0x72>
 800cdc6:	4b6e      	ldr	r3, [pc, #440]	@ (800cf80 <_strtod_l+0x590>)
 800cdc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cdcc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cdd0:	f7f3 fc1a 	bl	8000608 <__aeabi_dmul>
 800cdd4:	4682      	mov	sl, r0
 800cdd6:	9808      	ldr	r0, [sp, #32]
 800cdd8:	468b      	mov	fp, r1
 800cdda:	f7f3 fb9b 	bl	8000514 <__aeabi_ui2d>
 800cdde:	4602      	mov	r2, r0
 800cde0:	460b      	mov	r3, r1
 800cde2:	4650      	mov	r0, sl
 800cde4:	4659      	mov	r1, fp
 800cde6:	f7f3 fa59 	bl	800029c <__adddf3>
 800cdea:	2d0f      	cmp	r5, #15
 800cdec:	4682      	mov	sl, r0
 800cdee:	468b      	mov	fp, r1
 800cdf0:	ddd5      	ble.n	800cd9e <_strtod_l+0x3ae>
 800cdf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdf4:	1b2c      	subs	r4, r5, r4
 800cdf6:	441c      	add	r4, r3
 800cdf8:	2c00      	cmp	r4, #0
 800cdfa:	f340 8096 	ble.w	800cf2a <_strtod_l+0x53a>
 800cdfe:	f014 030f 	ands.w	r3, r4, #15
 800ce02:	d00a      	beq.n	800ce1a <_strtod_l+0x42a>
 800ce04:	495e      	ldr	r1, [pc, #376]	@ (800cf80 <_strtod_l+0x590>)
 800ce06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce0a:	4652      	mov	r2, sl
 800ce0c:	465b      	mov	r3, fp
 800ce0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce12:	f7f3 fbf9 	bl	8000608 <__aeabi_dmul>
 800ce16:	4682      	mov	sl, r0
 800ce18:	468b      	mov	fp, r1
 800ce1a:	f034 040f 	bics.w	r4, r4, #15
 800ce1e:	d073      	beq.n	800cf08 <_strtod_l+0x518>
 800ce20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ce24:	dd48      	ble.n	800ceb8 <_strtod_l+0x4c8>
 800ce26:	2400      	movs	r4, #0
 800ce28:	46a0      	mov	r8, r4
 800ce2a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ce2c:	46a1      	mov	r9, r4
 800ce2e:	9a05      	ldr	r2, [sp, #20]
 800ce30:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cf88 <_strtod_l+0x598>
 800ce34:	2322      	movs	r3, #34	@ 0x22
 800ce36:	6013      	str	r3, [r2, #0]
 800ce38:	f04f 0a00 	mov.w	sl, #0
 800ce3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	f43f ae0f 	beq.w	800ca62 <_strtod_l+0x72>
 800ce44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce46:	9805      	ldr	r0, [sp, #20]
 800ce48:	f7ff f942 	bl	800c0d0 <_Bfree>
 800ce4c:	9805      	ldr	r0, [sp, #20]
 800ce4e:	4649      	mov	r1, r9
 800ce50:	f7ff f93e 	bl	800c0d0 <_Bfree>
 800ce54:	9805      	ldr	r0, [sp, #20]
 800ce56:	4641      	mov	r1, r8
 800ce58:	f7ff f93a 	bl	800c0d0 <_Bfree>
 800ce5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ce5e:	9805      	ldr	r0, [sp, #20]
 800ce60:	f7ff f936 	bl	800c0d0 <_Bfree>
 800ce64:	9805      	ldr	r0, [sp, #20]
 800ce66:	4621      	mov	r1, r4
 800ce68:	f7ff f932 	bl	800c0d0 <_Bfree>
 800ce6c:	e5f9      	b.n	800ca62 <_strtod_l+0x72>
 800ce6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ce74:	4293      	cmp	r3, r2
 800ce76:	dbbc      	blt.n	800cdf2 <_strtod_l+0x402>
 800ce78:	4c41      	ldr	r4, [pc, #260]	@ (800cf80 <_strtod_l+0x590>)
 800ce7a:	f1c5 050f 	rsb	r5, r5, #15
 800ce7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ce82:	4652      	mov	r2, sl
 800ce84:	465b      	mov	r3, fp
 800ce86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce8a:	f7f3 fbbd 	bl	8000608 <__aeabi_dmul>
 800ce8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce90:	1b5d      	subs	r5, r3, r5
 800ce92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ce96:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ce9a:	e78f      	b.n	800cdbc <_strtod_l+0x3cc>
 800ce9c:	3316      	adds	r3, #22
 800ce9e:	dba8      	blt.n	800cdf2 <_strtod_l+0x402>
 800cea0:	4b37      	ldr	r3, [pc, #220]	@ (800cf80 <_strtod_l+0x590>)
 800cea2:	eba9 0808 	sub.w	r8, r9, r8
 800cea6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ceaa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ceae:	4650      	mov	r0, sl
 800ceb0:	4659      	mov	r1, fp
 800ceb2:	f7f3 fcd3 	bl	800085c <__aeabi_ddiv>
 800ceb6:	e783      	b.n	800cdc0 <_strtod_l+0x3d0>
 800ceb8:	4b32      	ldr	r3, [pc, #200]	@ (800cf84 <_strtod_l+0x594>)
 800ceba:	9308      	str	r3, [sp, #32]
 800cebc:	2300      	movs	r3, #0
 800cebe:	1124      	asrs	r4, r4, #4
 800cec0:	4650      	mov	r0, sl
 800cec2:	4659      	mov	r1, fp
 800cec4:	461e      	mov	r6, r3
 800cec6:	2c01      	cmp	r4, #1
 800cec8:	dc21      	bgt.n	800cf0e <_strtod_l+0x51e>
 800ceca:	b10b      	cbz	r3, 800ced0 <_strtod_l+0x4e0>
 800cecc:	4682      	mov	sl, r0
 800cece:	468b      	mov	fp, r1
 800ced0:	492c      	ldr	r1, [pc, #176]	@ (800cf84 <_strtod_l+0x594>)
 800ced2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ced6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ceda:	4652      	mov	r2, sl
 800cedc:	465b      	mov	r3, fp
 800cede:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cee2:	f7f3 fb91 	bl	8000608 <__aeabi_dmul>
 800cee6:	4b28      	ldr	r3, [pc, #160]	@ (800cf88 <_strtod_l+0x598>)
 800cee8:	460a      	mov	r2, r1
 800ceea:	400b      	ands	r3, r1
 800ceec:	4927      	ldr	r1, [pc, #156]	@ (800cf8c <_strtod_l+0x59c>)
 800ceee:	428b      	cmp	r3, r1
 800cef0:	4682      	mov	sl, r0
 800cef2:	d898      	bhi.n	800ce26 <_strtod_l+0x436>
 800cef4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cef8:	428b      	cmp	r3, r1
 800cefa:	bf86      	itte	hi
 800cefc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800cf90 <_strtod_l+0x5a0>
 800cf00:	f04f 3aff 	movhi.w	sl, #4294967295
 800cf04:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cf08:	2300      	movs	r3, #0
 800cf0a:	9308      	str	r3, [sp, #32]
 800cf0c:	e07a      	b.n	800d004 <_strtod_l+0x614>
 800cf0e:	07e2      	lsls	r2, r4, #31
 800cf10:	d505      	bpl.n	800cf1e <_strtod_l+0x52e>
 800cf12:	9b08      	ldr	r3, [sp, #32]
 800cf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf18:	f7f3 fb76 	bl	8000608 <__aeabi_dmul>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	9a08      	ldr	r2, [sp, #32]
 800cf20:	3208      	adds	r2, #8
 800cf22:	3601      	adds	r6, #1
 800cf24:	1064      	asrs	r4, r4, #1
 800cf26:	9208      	str	r2, [sp, #32]
 800cf28:	e7cd      	b.n	800cec6 <_strtod_l+0x4d6>
 800cf2a:	d0ed      	beq.n	800cf08 <_strtod_l+0x518>
 800cf2c:	4264      	negs	r4, r4
 800cf2e:	f014 020f 	ands.w	r2, r4, #15
 800cf32:	d00a      	beq.n	800cf4a <_strtod_l+0x55a>
 800cf34:	4b12      	ldr	r3, [pc, #72]	@ (800cf80 <_strtod_l+0x590>)
 800cf36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf3a:	4650      	mov	r0, sl
 800cf3c:	4659      	mov	r1, fp
 800cf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf42:	f7f3 fc8b 	bl	800085c <__aeabi_ddiv>
 800cf46:	4682      	mov	sl, r0
 800cf48:	468b      	mov	fp, r1
 800cf4a:	1124      	asrs	r4, r4, #4
 800cf4c:	d0dc      	beq.n	800cf08 <_strtod_l+0x518>
 800cf4e:	2c1f      	cmp	r4, #31
 800cf50:	dd20      	ble.n	800cf94 <_strtod_l+0x5a4>
 800cf52:	2400      	movs	r4, #0
 800cf54:	46a0      	mov	r8, r4
 800cf56:	940a      	str	r4, [sp, #40]	@ 0x28
 800cf58:	46a1      	mov	r9, r4
 800cf5a:	9a05      	ldr	r2, [sp, #20]
 800cf5c:	2322      	movs	r3, #34	@ 0x22
 800cf5e:	f04f 0a00 	mov.w	sl, #0
 800cf62:	f04f 0b00 	mov.w	fp, #0
 800cf66:	6013      	str	r3, [r2, #0]
 800cf68:	e768      	b.n	800ce3c <_strtod_l+0x44c>
 800cf6a:	bf00      	nop
 800cf6c:	0800ee1d 	.word	0x0800ee1d
 800cf70:	0800f034 	.word	0x0800f034
 800cf74:	0800ee15 	.word	0x0800ee15
 800cf78:	0800ee4c 	.word	0x0800ee4c
 800cf7c:	0800f1dd 	.word	0x0800f1dd
 800cf80:	0800ef68 	.word	0x0800ef68
 800cf84:	0800ef40 	.word	0x0800ef40
 800cf88:	7ff00000 	.word	0x7ff00000
 800cf8c:	7ca00000 	.word	0x7ca00000
 800cf90:	7fefffff 	.word	0x7fefffff
 800cf94:	f014 0310 	ands.w	r3, r4, #16
 800cf98:	bf18      	it	ne
 800cf9a:	236a      	movne	r3, #106	@ 0x6a
 800cf9c:	4ea9      	ldr	r6, [pc, #676]	@ (800d244 <_strtod_l+0x854>)
 800cf9e:	9308      	str	r3, [sp, #32]
 800cfa0:	4650      	mov	r0, sl
 800cfa2:	4659      	mov	r1, fp
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	07e2      	lsls	r2, r4, #31
 800cfa8:	d504      	bpl.n	800cfb4 <_strtod_l+0x5c4>
 800cfaa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cfae:	f7f3 fb2b 	bl	8000608 <__aeabi_dmul>
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	1064      	asrs	r4, r4, #1
 800cfb6:	f106 0608 	add.w	r6, r6, #8
 800cfba:	d1f4      	bne.n	800cfa6 <_strtod_l+0x5b6>
 800cfbc:	b10b      	cbz	r3, 800cfc2 <_strtod_l+0x5d2>
 800cfbe:	4682      	mov	sl, r0
 800cfc0:	468b      	mov	fp, r1
 800cfc2:	9b08      	ldr	r3, [sp, #32]
 800cfc4:	b1b3      	cbz	r3, 800cff4 <_strtod_l+0x604>
 800cfc6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cfca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	4659      	mov	r1, fp
 800cfd2:	dd0f      	ble.n	800cff4 <_strtod_l+0x604>
 800cfd4:	2b1f      	cmp	r3, #31
 800cfd6:	dd55      	ble.n	800d084 <_strtod_l+0x694>
 800cfd8:	2b34      	cmp	r3, #52	@ 0x34
 800cfda:	bfde      	ittt	le
 800cfdc:	f04f 33ff 	movle.w	r3, #4294967295
 800cfe0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cfe4:	4093      	lslle	r3, r2
 800cfe6:	f04f 0a00 	mov.w	sl, #0
 800cfea:	bfcc      	ite	gt
 800cfec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cff0:	ea03 0b01 	andle.w	fp, r3, r1
 800cff4:	2200      	movs	r2, #0
 800cff6:	2300      	movs	r3, #0
 800cff8:	4650      	mov	r0, sl
 800cffa:	4659      	mov	r1, fp
 800cffc:	f7f3 fd6c 	bl	8000ad8 <__aeabi_dcmpeq>
 800d000:	2800      	cmp	r0, #0
 800d002:	d1a6      	bne.n	800cf52 <_strtod_l+0x562>
 800d004:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d006:	9300      	str	r3, [sp, #0]
 800d008:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d00a:	9805      	ldr	r0, [sp, #20]
 800d00c:	462b      	mov	r3, r5
 800d00e:	463a      	mov	r2, r7
 800d010:	f7ff f8c6 	bl	800c1a0 <__s2b>
 800d014:	900a      	str	r0, [sp, #40]	@ 0x28
 800d016:	2800      	cmp	r0, #0
 800d018:	f43f af05 	beq.w	800ce26 <_strtod_l+0x436>
 800d01c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d01e:	2a00      	cmp	r2, #0
 800d020:	eba9 0308 	sub.w	r3, r9, r8
 800d024:	bfa8      	it	ge
 800d026:	2300      	movge	r3, #0
 800d028:	9312      	str	r3, [sp, #72]	@ 0x48
 800d02a:	2400      	movs	r4, #0
 800d02c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d030:	9316      	str	r3, [sp, #88]	@ 0x58
 800d032:	46a0      	mov	r8, r4
 800d034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d036:	9805      	ldr	r0, [sp, #20]
 800d038:	6859      	ldr	r1, [r3, #4]
 800d03a:	f7ff f809 	bl	800c050 <_Balloc>
 800d03e:	4681      	mov	r9, r0
 800d040:	2800      	cmp	r0, #0
 800d042:	f43f aef4 	beq.w	800ce2e <_strtod_l+0x43e>
 800d046:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d048:	691a      	ldr	r2, [r3, #16]
 800d04a:	3202      	adds	r2, #2
 800d04c:	f103 010c 	add.w	r1, r3, #12
 800d050:	0092      	lsls	r2, r2, #2
 800d052:	300c      	adds	r0, #12
 800d054:	f000 fd72 	bl	800db3c <memcpy>
 800d058:	ec4b ab10 	vmov	d0, sl, fp
 800d05c:	9805      	ldr	r0, [sp, #20]
 800d05e:	aa1c      	add	r2, sp, #112	@ 0x70
 800d060:	a91b      	add	r1, sp, #108	@ 0x6c
 800d062:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d066:	f7ff fbd7 	bl	800c818 <__d2b>
 800d06a:	901a      	str	r0, [sp, #104]	@ 0x68
 800d06c:	2800      	cmp	r0, #0
 800d06e:	f43f aede 	beq.w	800ce2e <_strtod_l+0x43e>
 800d072:	9805      	ldr	r0, [sp, #20]
 800d074:	2101      	movs	r1, #1
 800d076:	f7ff f929 	bl	800c2cc <__i2b>
 800d07a:	4680      	mov	r8, r0
 800d07c:	b948      	cbnz	r0, 800d092 <_strtod_l+0x6a2>
 800d07e:	f04f 0800 	mov.w	r8, #0
 800d082:	e6d4      	b.n	800ce2e <_strtod_l+0x43e>
 800d084:	f04f 32ff 	mov.w	r2, #4294967295
 800d088:	fa02 f303 	lsl.w	r3, r2, r3
 800d08c:	ea03 0a0a 	and.w	sl, r3, sl
 800d090:	e7b0      	b.n	800cff4 <_strtod_l+0x604>
 800d092:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d094:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d096:	2d00      	cmp	r5, #0
 800d098:	bfab      	itete	ge
 800d09a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d09c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d09e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d0a0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d0a2:	bfac      	ite	ge
 800d0a4:	18ef      	addge	r7, r5, r3
 800d0a6:	1b5e      	sublt	r6, r3, r5
 800d0a8:	9b08      	ldr	r3, [sp, #32]
 800d0aa:	1aed      	subs	r5, r5, r3
 800d0ac:	4415      	add	r5, r2
 800d0ae:	4b66      	ldr	r3, [pc, #408]	@ (800d248 <_strtod_l+0x858>)
 800d0b0:	3d01      	subs	r5, #1
 800d0b2:	429d      	cmp	r5, r3
 800d0b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d0b8:	da50      	bge.n	800d15c <_strtod_l+0x76c>
 800d0ba:	1b5b      	subs	r3, r3, r5
 800d0bc:	2b1f      	cmp	r3, #31
 800d0be:	eba2 0203 	sub.w	r2, r2, r3
 800d0c2:	f04f 0101 	mov.w	r1, #1
 800d0c6:	dc3d      	bgt.n	800d144 <_strtod_l+0x754>
 800d0c8:	fa01 f303 	lsl.w	r3, r1, r3
 800d0cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800d0d2:	18bd      	adds	r5, r7, r2
 800d0d4:	9b08      	ldr	r3, [sp, #32]
 800d0d6:	42af      	cmp	r7, r5
 800d0d8:	4416      	add	r6, r2
 800d0da:	441e      	add	r6, r3
 800d0dc:	463b      	mov	r3, r7
 800d0de:	bfa8      	it	ge
 800d0e0:	462b      	movge	r3, r5
 800d0e2:	42b3      	cmp	r3, r6
 800d0e4:	bfa8      	it	ge
 800d0e6:	4633      	movge	r3, r6
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	bfc2      	ittt	gt
 800d0ec:	1aed      	subgt	r5, r5, r3
 800d0ee:	1af6      	subgt	r6, r6, r3
 800d0f0:	1aff      	subgt	r7, r7, r3
 800d0f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	dd16      	ble.n	800d126 <_strtod_l+0x736>
 800d0f8:	4641      	mov	r1, r8
 800d0fa:	9805      	ldr	r0, [sp, #20]
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	f7ff f9a5 	bl	800c44c <__pow5mult>
 800d102:	4680      	mov	r8, r0
 800d104:	2800      	cmp	r0, #0
 800d106:	d0ba      	beq.n	800d07e <_strtod_l+0x68e>
 800d108:	4601      	mov	r1, r0
 800d10a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d10c:	9805      	ldr	r0, [sp, #20]
 800d10e:	f7ff f8f3 	bl	800c2f8 <__multiply>
 800d112:	900e      	str	r0, [sp, #56]	@ 0x38
 800d114:	2800      	cmp	r0, #0
 800d116:	f43f ae8a 	beq.w	800ce2e <_strtod_l+0x43e>
 800d11a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d11c:	9805      	ldr	r0, [sp, #20]
 800d11e:	f7fe ffd7 	bl	800c0d0 <_Bfree>
 800d122:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d124:	931a      	str	r3, [sp, #104]	@ 0x68
 800d126:	2d00      	cmp	r5, #0
 800d128:	dc1d      	bgt.n	800d166 <_strtod_l+0x776>
 800d12a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	dd23      	ble.n	800d178 <_strtod_l+0x788>
 800d130:	4649      	mov	r1, r9
 800d132:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d134:	9805      	ldr	r0, [sp, #20]
 800d136:	f7ff f989 	bl	800c44c <__pow5mult>
 800d13a:	4681      	mov	r9, r0
 800d13c:	b9e0      	cbnz	r0, 800d178 <_strtod_l+0x788>
 800d13e:	f04f 0900 	mov.w	r9, #0
 800d142:	e674      	b.n	800ce2e <_strtod_l+0x43e>
 800d144:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d148:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d14c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d150:	35e2      	adds	r5, #226	@ 0xe2
 800d152:	fa01 f305 	lsl.w	r3, r1, r5
 800d156:	9310      	str	r3, [sp, #64]	@ 0x40
 800d158:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d15a:	e7ba      	b.n	800d0d2 <_strtod_l+0x6e2>
 800d15c:	2300      	movs	r3, #0
 800d15e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d160:	2301      	movs	r3, #1
 800d162:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d164:	e7b5      	b.n	800d0d2 <_strtod_l+0x6e2>
 800d166:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d168:	9805      	ldr	r0, [sp, #20]
 800d16a:	462a      	mov	r2, r5
 800d16c:	f7ff f9c8 	bl	800c500 <__lshift>
 800d170:	901a      	str	r0, [sp, #104]	@ 0x68
 800d172:	2800      	cmp	r0, #0
 800d174:	d1d9      	bne.n	800d12a <_strtod_l+0x73a>
 800d176:	e65a      	b.n	800ce2e <_strtod_l+0x43e>
 800d178:	2e00      	cmp	r6, #0
 800d17a:	dd07      	ble.n	800d18c <_strtod_l+0x79c>
 800d17c:	4649      	mov	r1, r9
 800d17e:	9805      	ldr	r0, [sp, #20]
 800d180:	4632      	mov	r2, r6
 800d182:	f7ff f9bd 	bl	800c500 <__lshift>
 800d186:	4681      	mov	r9, r0
 800d188:	2800      	cmp	r0, #0
 800d18a:	d0d8      	beq.n	800d13e <_strtod_l+0x74e>
 800d18c:	2f00      	cmp	r7, #0
 800d18e:	dd08      	ble.n	800d1a2 <_strtod_l+0x7b2>
 800d190:	4641      	mov	r1, r8
 800d192:	9805      	ldr	r0, [sp, #20]
 800d194:	463a      	mov	r2, r7
 800d196:	f7ff f9b3 	bl	800c500 <__lshift>
 800d19a:	4680      	mov	r8, r0
 800d19c:	2800      	cmp	r0, #0
 800d19e:	f43f ae46 	beq.w	800ce2e <_strtod_l+0x43e>
 800d1a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1a4:	9805      	ldr	r0, [sp, #20]
 800d1a6:	464a      	mov	r2, r9
 800d1a8:	f7ff fa32 	bl	800c610 <__mdiff>
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	2800      	cmp	r0, #0
 800d1b0:	f43f ae3d 	beq.w	800ce2e <_strtod_l+0x43e>
 800d1b4:	68c3      	ldr	r3, [r0, #12]
 800d1b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	60c3      	str	r3, [r0, #12]
 800d1bc:	4641      	mov	r1, r8
 800d1be:	f7ff fa0b 	bl	800c5d8 <__mcmp>
 800d1c2:	2800      	cmp	r0, #0
 800d1c4:	da46      	bge.n	800d254 <_strtod_l+0x864>
 800d1c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1c8:	ea53 030a 	orrs.w	r3, r3, sl
 800d1cc:	d16c      	bne.n	800d2a8 <_strtod_l+0x8b8>
 800d1ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d168      	bne.n	800d2a8 <_strtod_l+0x8b8>
 800d1d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d1da:	0d1b      	lsrs	r3, r3, #20
 800d1dc:	051b      	lsls	r3, r3, #20
 800d1de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d1e2:	d961      	bls.n	800d2a8 <_strtod_l+0x8b8>
 800d1e4:	6963      	ldr	r3, [r4, #20]
 800d1e6:	b913      	cbnz	r3, 800d1ee <_strtod_l+0x7fe>
 800d1e8:	6923      	ldr	r3, [r4, #16]
 800d1ea:	2b01      	cmp	r3, #1
 800d1ec:	dd5c      	ble.n	800d2a8 <_strtod_l+0x8b8>
 800d1ee:	4621      	mov	r1, r4
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	9805      	ldr	r0, [sp, #20]
 800d1f4:	f7ff f984 	bl	800c500 <__lshift>
 800d1f8:	4641      	mov	r1, r8
 800d1fa:	4604      	mov	r4, r0
 800d1fc:	f7ff f9ec 	bl	800c5d8 <__mcmp>
 800d200:	2800      	cmp	r0, #0
 800d202:	dd51      	ble.n	800d2a8 <_strtod_l+0x8b8>
 800d204:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d208:	9a08      	ldr	r2, [sp, #32]
 800d20a:	0d1b      	lsrs	r3, r3, #20
 800d20c:	051b      	lsls	r3, r3, #20
 800d20e:	2a00      	cmp	r2, #0
 800d210:	d06b      	beq.n	800d2ea <_strtod_l+0x8fa>
 800d212:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d216:	d868      	bhi.n	800d2ea <_strtod_l+0x8fa>
 800d218:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d21c:	f67f ae9d 	bls.w	800cf5a <_strtod_l+0x56a>
 800d220:	4b0a      	ldr	r3, [pc, #40]	@ (800d24c <_strtod_l+0x85c>)
 800d222:	4650      	mov	r0, sl
 800d224:	4659      	mov	r1, fp
 800d226:	2200      	movs	r2, #0
 800d228:	f7f3 f9ee 	bl	8000608 <__aeabi_dmul>
 800d22c:	4b08      	ldr	r3, [pc, #32]	@ (800d250 <_strtod_l+0x860>)
 800d22e:	400b      	ands	r3, r1
 800d230:	4682      	mov	sl, r0
 800d232:	468b      	mov	fp, r1
 800d234:	2b00      	cmp	r3, #0
 800d236:	f47f ae05 	bne.w	800ce44 <_strtod_l+0x454>
 800d23a:	9a05      	ldr	r2, [sp, #20]
 800d23c:	2322      	movs	r3, #34	@ 0x22
 800d23e:	6013      	str	r3, [r2, #0]
 800d240:	e600      	b.n	800ce44 <_strtod_l+0x454>
 800d242:	bf00      	nop
 800d244:	0800f060 	.word	0x0800f060
 800d248:	fffffc02 	.word	0xfffffc02
 800d24c:	39500000 	.word	0x39500000
 800d250:	7ff00000 	.word	0x7ff00000
 800d254:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d258:	d165      	bne.n	800d326 <_strtod_l+0x936>
 800d25a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d25c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d260:	b35a      	cbz	r2, 800d2ba <_strtod_l+0x8ca>
 800d262:	4a9f      	ldr	r2, [pc, #636]	@ (800d4e0 <_strtod_l+0xaf0>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d12b      	bne.n	800d2c0 <_strtod_l+0x8d0>
 800d268:	9b08      	ldr	r3, [sp, #32]
 800d26a:	4651      	mov	r1, sl
 800d26c:	b303      	cbz	r3, 800d2b0 <_strtod_l+0x8c0>
 800d26e:	4b9d      	ldr	r3, [pc, #628]	@ (800d4e4 <_strtod_l+0xaf4>)
 800d270:	465a      	mov	r2, fp
 800d272:	4013      	ands	r3, r2
 800d274:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d278:	f04f 32ff 	mov.w	r2, #4294967295
 800d27c:	d81b      	bhi.n	800d2b6 <_strtod_l+0x8c6>
 800d27e:	0d1b      	lsrs	r3, r3, #20
 800d280:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d284:	fa02 f303 	lsl.w	r3, r2, r3
 800d288:	4299      	cmp	r1, r3
 800d28a:	d119      	bne.n	800d2c0 <_strtod_l+0x8d0>
 800d28c:	4b96      	ldr	r3, [pc, #600]	@ (800d4e8 <_strtod_l+0xaf8>)
 800d28e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d290:	429a      	cmp	r2, r3
 800d292:	d102      	bne.n	800d29a <_strtod_l+0x8aa>
 800d294:	3101      	adds	r1, #1
 800d296:	f43f adca 	beq.w	800ce2e <_strtod_l+0x43e>
 800d29a:	4b92      	ldr	r3, [pc, #584]	@ (800d4e4 <_strtod_l+0xaf4>)
 800d29c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d29e:	401a      	ands	r2, r3
 800d2a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d2a4:	f04f 0a00 	mov.w	sl, #0
 800d2a8:	9b08      	ldr	r3, [sp, #32]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d1b8      	bne.n	800d220 <_strtod_l+0x830>
 800d2ae:	e5c9      	b.n	800ce44 <_strtod_l+0x454>
 800d2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800d2b4:	e7e8      	b.n	800d288 <_strtod_l+0x898>
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	e7e6      	b.n	800d288 <_strtod_l+0x898>
 800d2ba:	ea53 030a 	orrs.w	r3, r3, sl
 800d2be:	d0a1      	beq.n	800d204 <_strtod_l+0x814>
 800d2c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d2c2:	b1db      	cbz	r3, 800d2fc <_strtod_l+0x90c>
 800d2c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2c6:	4213      	tst	r3, r2
 800d2c8:	d0ee      	beq.n	800d2a8 <_strtod_l+0x8b8>
 800d2ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2cc:	9a08      	ldr	r2, [sp, #32]
 800d2ce:	4650      	mov	r0, sl
 800d2d0:	4659      	mov	r1, fp
 800d2d2:	b1bb      	cbz	r3, 800d304 <_strtod_l+0x914>
 800d2d4:	f7ff fb6e 	bl	800c9b4 <sulp>
 800d2d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d2dc:	ec53 2b10 	vmov	r2, r3, d0
 800d2e0:	f7f2 ffdc 	bl	800029c <__adddf3>
 800d2e4:	4682      	mov	sl, r0
 800d2e6:	468b      	mov	fp, r1
 800d2e8:	e7de      	b.n	800d2a8 <_strtod_l+0x8b8>
 800d2ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d2ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d2f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d2f6:	f04f 3aff 	mov.w	sl, #4294967295
 800d2fa:	e7d5      	b.n	800d2a8 <_strtod_l+0x8b8>
 800d2fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d2fe:	ea13 0f0a 	tst.w	r3, sl
 800d302:	e7e1      	b.n	800d2c8 <_strtod_l+0x8d8>
 800d304:	f7ff fb56 	bl	800c9b4 <sulp>
 800d308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d30c:	ec53 2b10 	vmov	r2, r3, d0
 800d310:	f7f2 ffc2 	bl	8000298 <__aeabi_dsub>
 800d314:	2200      	movs	r2, #0
 800d316:	2300      	movs	r3, #0
 800d318:	4682      	mov	sl, r0
 800d31a:	468b      	mov	fp, r1
 800d31c:	f7f3 fbdc 	bl	8000ad8 <__aeabi_dcmpeq>
 800d320:	2800      	cmp	r0, #0
 800d322:	d0c1      	beq.n	800d2a8 <_strtod_l+0x8b8>
 800d324:	e619      	b.n	800cf5a <_strtod_l+0x56a>
 800d326:	4641      	mov	r1, r8
 800d328:	4620      	mov	r0, r4
 800d32a:	f7ff facd 	bl	800c8c8 <__ratio>
 800d32e:	ec57 6b10 	vmov	r6, r7, d0
 800d332:	2200      	movs	r2, #0
 800d334:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d338:	4630      	mov	r0, r6
 800d33a:	4639      	mov	r1, r7
 800d33c:	f7f3 fbe0 	bl	8000b00 <__aeabi_dcmple>
 800d340:	2800      	cmp	r0, #0
 800d342:	d06f      	beq.n	800d424 <_strtod_l+0xa34>
 800d344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d346:	2b00      	cmp	r3, #0
 800d348:	d17a      	bne.n	800d440 <_strtod_l+0xa50>
 800d34a:	f1ba 0f00 	cmp.w	sl, #0
 800d34e:	d158      	bne.n	800d402 <_strtod_l+0xa12>
 800d350:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d352:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d356:	2b00      	cmp	r3, #0
 800d358:	d15a      	bne.n	800d410 <_strtod_l+0xa20>
 800d35a:	4b64      	ldr	r3, [pc, #400]	@ (800d4ec <_strtod_l+0xafc>)
 800d35c:	2200      	movs	r2, #0
 800d35e:	4630      	mov	r0, r6
 800d360:	4639      	mov	r1, r7
 800d362:	f7f3 fbc3 	bl	8000aec <__aeabi_dcmplt>
 800d366:	2800      	cmp	r0, #0
 800d368:	d159      	bne.n	800d41e <_strtod_l+0xa2e>
 800d36a:	4630      	mov	r0, r6
 800d36c:	4639      	mov	r1, r7
 800d36e:	4b60      	ldr	r3, [pc, #384]	@ (800d4f0 <_strtod_l+0xb00>)
 800d370:	2200      	movs	r2, #0
 800d372:	f7f3 f949 	bl	8000608 <__aeabi_dmul>
 800d376:	4606      	mov	r6, r0
 800d378:	460f      	mov	r7, r1
 800d37a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d37e:	9606      	str	r6, [sp, #24]
 800d380:	9307      	str	r3, [sp, #28]
 800d382:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d386:	4d57      	ldr	r5, [pc, #348]	@ (800d4e4 <_strtod_l+0xaf4>)
 800d388:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d38c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d38e:	401d      	ands	r5, r3
 800d390:	4b58      	ldr	r3, [pc, #352]	@ (800d4f4 <_strtod_l+0xb04>)
 800d392:	429d      	cmp	r5, r3
 800d394:	f040 80b2 	bne.w	800d4fc <_strtod_l+0xb0c>
 800d398:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d39a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d39e:	ec4b ab10 	vmov	d0, sl, fp
 800d3a2:	f7ff f9c9 	bl	800c738 <__ulp>
 800d3a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3aa:	ec51 0b10 	vmov	r0, r1, d0
 800d3ae:	f7f3 f92b 	bl	8000608 <__aeabi_dmul>
 800d3b2:	4652      	mov	r2, sl
 800d3b4:	465b      	mov	r3, fp
 800d3b6:	f7f2 ff71 	bl	800029c <__adddf3>
 800d3ba:	460b      	mov	r3, r1
 800d3bc:	4949      	ldr	r1, [pc, #292]	@ (800d4e4 <_strtod_l+0xaf4>)
 800d3be:	4a4e      	ldr	r2, [pc, #312]	@ (800d4f8 <_strtod_l+0xb08>)
 800d3c0:	4019      	ands	r1, r3
 800d3c2:	4291      	cmp	r1, r2
 800d3c4:	4682      	mov	sl, r0
 800d3c6:	d942      	bls.n	800d44e <_strtod_l+0xa5e>
 800d3c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d3ca:	4b47      	ldr	r3, [pc, #284]	@ (800d4e8 <_strtod_l+0xaf8>)
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d103      	bne.n	800d3d8 <_strtod_l+0x9e8>
 800d3d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	f43f ad2b 	beq.w	800ce2e <_strtod_l+0x43e>
 800d3d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d4e8 <_strtod_l+0xaf8>
 800d3dc:	f04f 3aff 	mov.w	sl, #4294967295
 800d3e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d3e2:	9805      	ldr	r0, [sp, #20]
 800d3e4:	f7fe fe74 	bl	800c0d0 <_Bfree>
 800d3e8:	9805      	ldr	r0, [sp, #20]
 800d3ea:	4649      	mov	r1, r9
 800d3ec:	f7fe fe70 	bl	800c0d0 <_Bfree>
 800d3f0:	9805      	ldr	r0, [sp, #20]
 800d3f2:	4641      	mov	r1, r8
 800d3f4:	f7fe fe6c 	bl	800c0d0 <_Bfree>
 800d3f8:	9805      	ldr	r0, [sp, #20]
 800d3fa:	4621      	mov	r1, r4
 800d3fc:	f7fe fe68 	bl	800c0d0 <_Bfree>
 800d400:	e618      	b.n	800d034 <_strtod_l+0x644>
 800d402:	f1ba 0f01 	cmp.w	sl, #1
 800d406:	d103      	bne.n	800d410 <_strtod_l+0xa20>
 800d408:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	f43f ada5 	beq.w	800cf5a <_strtod_l+0x56a>
 800d410:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d4c0 <_strtod_l+0xad0>
 800d414:	4f35      	ldr	r7, [pc, #212]	@ (800d4ec <_strtod_l+0xafc>)
 800d416:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d41a:	2600      	movs	r6, #0
 800d41c:	e7b1      	b.n	800d382 <_strtod_l+0x992>
 800d41e:	4f34      	ldr	r7, [pc, #208]	@ (800d4f0 <_strtod_l+0xb00>)
 800d420:	2600      	movs	r6, #0
 800d422:	e7aa      	b.n	800d37a <_strtod_l+0x98a>
 800d424:	4b32      	ldr	r3, [pc, #200]	@ (800d4f0 <_strtod_l+0xb00>)
 800d426:	4630      	mov	r0, r6
 800d428:	4639      	mov	r1, r7
 800d42a:	2200      	movs	r2, #0
 800d42c:	f7f3 f8ec 	bl	8000608 <__aeabi_dmul>
 800d430:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d432:	4606      	mov	r6, r0
 800d434:	460f      	mov	r7, r1
 800d436:	2b00      	cmp	r3, #0
 800d438:	d09f      	beq.n	800d37a <_strtod_l+0x98a>
 800d43a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d43e:	e7a0      	b.n	800d382 <_strtod_l+0x992>
 800d440:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d4c8 <_strtod_l+0xad8>
 800d444:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d448:	ec57 6b17 	vmov	r6, r7, d7
 800d44c:	e799      	b.n	800d382 <_strtod_l+0x992>
 800d44e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d452:	9b08      	ldr	r3, [sp, #32]
 800d454:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d1c1      	bne.n	800d3e0 <_strtod_l+0x9f0>
 800d45c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d460:	0d1b      	lsrs	r3, r3, #20
 800d462:	051b      	lsls	r3, r3, #20
 800d464:	429d      	cmp	r5, r3
 800d466:	d1bb      	bne.n	800d3e0 <_strtod_l+0x9f0>
 800d468:	4630      	mov	r0, r6
 800d46a:	4639      	mov	r1, r7
 800d46c:	f7f3 fc2c 	bl	8000cc8 <__aeabi_d2lz>
 800d470:	f7f3 f89c 	bl	80005ac <__aeabi_l2d>
 800d474:	4602      	mov	r2, r0
 800d476:	460b      	mov	r3, r1
 800d478:	4630      	mov	r0, r6
 800d47a:	4639      	mov	r1, r7
 800d47c:	f7f2 ff0c 	bl	8000298 <__aeabi_dsub>
 800d480:	460b      	mov	r3, r1
 800d482:	4602      	mov	r2, r0
 800d484:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d488:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d48c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d48e:	ea46 060a 	orr.w	r6, r6, sl
 800d492:	431e      	orrs	r6, r3
 800d494:	d06f      	beq.n	800d576 <_strtod_l+0xb86>
 800d496:	a30e      	add	r3, pc, #56	@ (adr r3, 800d4d0 <_strtod_l+0xae0>)
 800d498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49c:	f7f3 fb26 	bl	8000aec <__aeabi_dcmplt>
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	f47f accf 	bne.w	800ce44 <_strtod_l+0x454>
 800d4a6:	a30c      	add	r3, pc, #48	@ (adr r3, 800d4d8 <_strtod_l+0xae8>)
 800d4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4b0:	f7f3 fb3a 	bl	8000b28 <__aeabi_dcmpgt>
 800d4b4:	2800      	cmp	r0, #0
 800d4b6:	d093      	beq.n	800d3e0 <_strtod_l+0x9f0>
 800d4b8:	e4c4      	b.n	800ce44 <_strtod_l+0x454>
 800d4ba:	bf00      	nop
 800d4bc:	f3af 8000 	nop.w
 800d4c0:	00000000 	.word	0x00000000
 800d4c4:	bff00000 	.word	0xbff00000
 800d4c8:	00000000 	.word	0x00000000
 800d4cc:	3ff00000 	.word	0x3ff00000
 800d4d0:	94a03595 	.word	0x94a03595
 800d4d4:	3fdfffff 	.word	0x3fdfffff
 800d4d8:	35afe535 	.word	0x35afe535
 800d4dc:	3fe00000 	.word	0x3fe00000
 800d4e0:	000fffff 	.word	0x000fffff
 800d4e4:	7ff00000 	.word	0x7ff00000
 800d4e8:	7fefffff 	.word	0x7fefffff
 800d4ec:	3ff00000 	.word	0x3ff00000
 800d4f0:	3fe00000 	.word	0x3fe00000
 800d4f4:	7fe00000 	.word	0x7fe00000
 800d4f8:	7c9fffff 	.word	0x7c9fffff
 800d4fc:	9b08      	ldr	r3, [sp, #32]
 800d4fe:	b323      	cbz	r3, 800d54a <_strtod_l+0xb5a>
 800d500:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d504:	d821      	bhi.n	800d54a <_strtod_l+0xb5a>
 800d506:	a328      	add	r3, pc, #160	@ (adr r3, 800d5a8 <_strtod_l+0xbb8>)
 800d508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50c:	4630      	mov	r0, r6
 800d50e:	4639      	mov	r1, r7
 800d510:	f7f3 faf6 	bl	8000b00 <__aeabi_dcmple>
 800d514:	b1a0      	cbz	r0, 800d540 <_strtod_l+0xb50>
 800d516:	4639      	mov	r1, r7
 800d518:	4630      	mov	r0, r6
 800d51a:	f7f3 fb4d 	bl	8000bb8 <__aeabi_d2uiz>
 800d51e:	2801      	cmp	r0, #1
 800d520:	bf38      	it	cc
 800d522:	2001      	movcc	r0, #1
 800d524:	f7f2 fff6 	bl	8000514 <__aeabi_ui2d>
 800d528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d52a:	4606      	mov	r6, r0
 800d52c:	460f      	mov	r7, r1
 800d52e:	b9fb      	cbnz	r3, 800d570 <_strtod_l+0xb80>
 800d530:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d534:	9014      	str	r0, [sp, #80]	@ 0x50
 800d536:	9315      	str	r3, [sp, #84]	@ 0x54
 800d538:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d53c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d540:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d542:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d546:	1b5b      	subs	r3, r3, r5
 800d548:	9311      	str	r3, [sp, #68]	@ 0x44
 800d54a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d54e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d552:	f7ff f8f1 	bl	800c738 <__ulp>
 800d556:	4650      	mov	r0, sl
 800d558:	ec53 2b10 	vmov	r2, r3, d0
 800d55c:	4659      	mov	r1, fp
 800d55e:	f7f3 f853 	bl	8000608 <__aeabi_dmul>
 800d562:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d566:	f7f2 fe99 	bl	800029c <__adddf3>
 800d56a:	4682      	mov	sl, r0
 800d56c:	468b      	mov	fp, r1
 800d56e:	e770      	b.n	800d452 <_strtod_l+0xa62>
 800d570:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d574:	e7e0      	b.n	800d538 <_strtod_l+0xb48>
 800d576:	a30e      	add	r3, pc, #56	@ (adr r3, 800d5b0 <_strtod_l+0xbc0>)
 800d578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57c:	f7f3 fab6 	bl	8000aec <__aeabi_dcmplt>
 800d580:	e798      	b.n	800d4b4 <_strtod_l+0xac4>
 800d582:	2300      	movs	r3, #0
 800d584:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d586:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d588:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d58a:	6013      	str	r3, [r2, #0]
 800d58c:	f7ff ba6d 	b.w	800ca6a <_strtod_l+0x7a>
 800d590:	2a65      	cmp	r2, #101	@ 0x65
 800d592:	f43f ab66 	beq.w	800cc62 <_strtod_l+0x272>
 800d596:	2a45      	cmp	r2, #69	@ 0x45
 800d598:	f43f ab63 	beq.w	800cc62 <_strtod_l+0x272>
 800d59c:	2301      	movs	r3, #1
 800d59e:	f7ff bb9e 	b.w	800ccde <_strtod_l+0x2ee>
 800d5a2:	bf00      	nop
 800d5a4:	f3af 8000 	nop.w
 800d5a8:	ffc00000 	.word	0xffc00000
 800d5ac:	41dfffff 	.word	0x41dfffff
 800d5b0:	94a03595 	.word	0x94a03595
 800d5b4:	3fcfffff 	.word	0x3fcfffff

0800d5b8 <_strtod_r>:
 800d5b8:	4b01      	ldr	r3, [pc, #4]	@ (800d5c0 <_strtod_r+0x8>)
 800d5ba:	f7ff ba19 	b.w	800c9f0 <_strtod_l>
 800d5be:	bf00      	nop
 800d5c0:	2000015c 	.word	0x2000015c

0800d5c4 <_strtol_l.constprop.0>:
 800d5c4:	2b24      	cmp	r3, #36	@ 0x24
 800d5c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5ca:	4686      	mov	lr, r0
 800d5cc:	4690      	mov	r8, r2
 800d5ce:	d801      	bhi.n	800d5d4 <_strtol_l.constprop.0+0x10>
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d106      	bne.n	800d5e2 <_strtol_l.constprop.0+0x1e>
 800d5d4:	f7fd fdbc 	bl	800b150 <__errno>
 800d5d8:	2316      	movs	r3, #22
 800d5da:	6003      	str	r3, [r0, #0]
 800d5dc:	2000      	movs	r0, #0
 800d5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5e2:	4834      	ldr	r0, [pc, #208]	@ (800d6b4 <_strtol_l.constprop.0+0xf0>)
 800d5e4:	460d      	mov	r5, r1
 800d5e6:	462a      	mov	r2, r5
 800d5e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d5ec:	5d06      	ldrb	r6, [r0, r4]
 800d5ee:	f016 0608 	ands.w	r6, r6, #8
 800d5f2:	d1f8      	bne.n	800d5e6 <_strtol_l.constprop.0+0x22>
 800d5f4:	2c2d      	cmp	r4, #45	@ 0x2d
 800d5f6:	d12d      	bne.n	800d654 <_strtol_l.constprop.0+0x90>
 800d5f8:	782c      	ldrb	r4, [r5, #0]
 800d5fa:	2601      	movs	r6, #1
 800d5fc:	1c95      	adds	r5, r2, #2
 800d5fe:	f033 0210 	bics.w	r2, r3, #16
 800d602:	d109      	bne.n	800d618 <_strtol_l.constprop.0+0x54>
 800d604:	2c30      	cmp	r4, #48	@ 0x30
 800d606:	d12a      	bne.n	800d65e <_strtol_l.constprop.0+0x9a>
 800d608:	782a      	ldrb	r2, [r5, #0]
 800d60a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d60e:	2a58      	cmp	r2, #88	@ 0x58
 800d610:	d125      	bne.n	800d65e <_strtol_l.constprop.0+0x9a>
 800d612:	786c      	ldrb	r4, [r5, #1]
 800d614:	2310      	movs	r3, #16
 800d616:	3502      	adds	r5, #2
 800d618:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d61c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d620:	2200      	movs	r2, #0
 800d622:	fbbc f9f3 	udiv	r9, ip, r3
 800d626:	4610      	mov	r0, r2
 800d628:	fb03 ca19 	mls	sl, r3, r9, ip
 800d62c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d630:	2f09      	cmp	r7, #9
 800d632:	d81b      	bhi.n	800d66c <_strtol_l.constprop.0+0xa8>
 800d634:	463c      	mov	r4, r7
 800d636:	42a3      	cmp	r3, r4
 800d638:	dd27      	ble.n	800d68a <_strtol_l.constprop.0+0xc6>
 800d63a:	1c57      	adds	r7, r2, #1
 800d63c:	d007      	beq.n	800d64e <_strtol_l.constprop.0+0x8a>
 800d63e:	4581      	cmp	r9, r0
 800d640:	d320      	bcc.n	800d684 <_strtol_l.constprop.0+0xc0>
 800d642:	d101      	bne.n	800d648 <_strtol_l.constprop.0+0x84>
 800d644:	45a2      	cmp	sl, r4
 800d646:	db1d      	blt.n	800d684 <_strtol_l.constprop.0+0xc0>
 800d648:	fb00 4003 	mla	r0, r0, r3, r4
 800d64c:	2201      	movs	r2, #1
 800d64e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d652:	e7eb      	b.n	800d62c <_strtol_l.constprop.0+0x68>
 800d654:	2c2b      	cmp	r4, #43	@ 0x2b
 800d656:	bf04      	itt	eq
 800d658:	782c      	ldrbeq	r4, [r5, #0]
 800d65a:	1c95      	addeq	r5, r2, #2
 800d65c:	e7cf      	b.n	800d5fe <_strtol_l.constprop.0+0x3a>
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d1da      	bne.n	800d618 <_strtol_l.constprop.0+0x54>
 800d662:	2c30      	cmp	r4, #48	@ 0x30
 800d664:	bf0c      	ite	eq
 800d666:	2308      	moveq	r3, #8
 800d668:	230a      	movne	r3, #10
 800d66a:	e7d5      	b.n	800d618 <_strtol_l.constprop.0+0x54>
 800d66c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d670:	2f19      	cmp	r7, #25
 800d672:	d801      	bhi.n	800d678 <_strtol_l.constprop.0+0xb4>
 800d674:	3c37      	subs	r4, #55	@ 0x37
 800d676:	e7de      	b.n	800d636 <_strtol_l.constprop.0+0x72>
 800d678:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d67c:	2f19      	cmp	r7, #25
 800d67e:	d804      	bhi.n	800d68a <_strtol_l.constprop.0+0xc6>
 800d680:	3c57      	subs	r4, #87	@ 0x57
 800d682:	e7d8      	b.n	800d636 <_strtol_l.constprop.0+0x72>
 800d684:	f04f 32ff 	mov.w	r2, #4294967295
 800d688:	e7e1      	b.n	800d64e <_strtol_l.constprop.0+0x8a>
 800d68a:	1c53      	adds	r3, r2, #1
 800d68c:	d108      	bne.n	800d6a0 <_strtol_l.constprop.0+0xdc>
 800d68e:	2322      	movs	r3, #34	@ 0x22
 800d690:	f8ce 3000 	str.w	r3, [lr]
 800d694:	4660      	mov	r0, ip
 800d696:	f1b8 0f00 	cmp.w	r8, #0
 800d69a:	d0a0      	beq.n	800d5de <_strtol_l.constprop.0+0x1a>
 800d69c:	1e69      	subs	r1, r5, #1
 800d69e:	e006      	b.n	800d6ae <_strtol_l.constprop.0+0xea>
 800d6a0:	b106      	cbz	r6, 800d6a4 <_strtol_l.constprop.0+0xe0>
 800d6a2:	4240      	negs	r0, r0
 800d6a4:	f1b8 0f00 	cmp.w	r8, #0
 800d6a8:	d099      	beq.n	800d5de <_strtol_l.constprop.0+0x1a>
 800d6aa:	2a00      	cmp	r2, #0
 800d6ac:	d1f6      	bne.n	800d69c <_strtol_l.constprop.0+0xd8>
 800d6ae:	f8c8 1000 	str.w	r1, [r8]
 800d6b2:	e794      	b.n	800d5de <_strtol_l.constprop.0+0x1a>
 800d6b4:	0800f089 	.word	0x0800f089

0800d6b8 <_strtol_r>:
 800d6b8:	f7ff bf84 	b.w	800d5c4 <_strtol_l.constprop.0>

0800d6bc <__ssputs_r>:
 800d6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6c0:	688e      	ldr	r6, [r1, #8]
 800d6c2:	461f      	mov	r7, r3
 800d6c4:	42be      	cmp	r6, r7
 800d6c6:	680b      	ldr	r3, [r1, #0]
 800d6c8:	4682      	mov	sl, r0
 800d6ca:	460c      	mov	r4, r1
 800d6cc:	4690      	mov	r8, r2
 800d6ce:	d82d      	bhi.n	800d72c <__ssputs_r+0x70>
 800d6d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d6d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d6d8:	d026      	beq.n	800d728 <__ssputs_r+0x6c>
 800d6da:	6965      	ldr	r5, [r4, #20]
 800d6dc:	6909      	ldr	r1, [r1, #16]
 800d6de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d6e2:	eba3 0901 	sub.w	r9, r3, r1
 800d6e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d6ea:	1c7b      	adds	r3, r7, #1
 800d6ec:	444b      	add	r3, r9
 800d6ee:	106d      	asrs	r5, r5, #1
 800d6f0:	429d      	cmp	r5, r3
 800d6f2:	bf38      	it	cc
 800d6f4:	461d      	movcc	r5, r3
 800d6f6:	0553      	lsls	r3, r2, #21
 800d6f8:	d527      	bpl.n	800d74a <__ssputs_r+0x8e>
 800d6fa:	4629      	mov	r1, r5
 800d6fc:	f7fe fc1c 	bl	800bf38 <_malloc_r>
 800d700:	4606      	mov	r6, r0
 800d702:	b360      	cbz	r0, 800d75e <__ssputs_r+0xa2>
 800d704:	6921      	ldr	r1, [r4, #16]
 800d706:	464a      	mov	r2, r9
 800d708:	f000 fa18 	bl	800db3c <memcpy>
 800d70c:	89a3      	ldrh	r3, [r4, #12]
 800d70e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d716:	81a3      	strh	r3, [r4, #12]
 800d718:	6126      	str	r6, [r4, #16]
 800d71a:	6165      	str	r5, [r4, #20]
 800d71c:	444e      	add	r6, r9
 800d71e:	eba5 0509 	sub.w	r5, r5, r9
 800d722:	6026      	str	r6, [r4, #0]
 800d724:	60a5      	str	r5, [r4, #8]
 800d726:	463e      	mov	r6, r7
 800d728:	42be      	cmp	r6, r7
 800d72a:	d900      	bls.n	800d72e <__ssputs_r+0x72>
 800d72c:	463e      	mov	r6, r7
 800d72e:	6820      	ldr	r0, [r4, #0]
 800d730:	4632      	mov	r2, r6
 800d732:	4641      	mov	r1, r8
 800d734:	f000 f9c6 	bl	800dac4 <memmove>
 800d738:	68a3      	ldr	r3, [r4, #8]
 800d73a:	1b9b      	subs	r3, r3, r6
 800d73c:	60a3      	str	r3, [r4, #8]
 800d73e:	6823      	ldr	r3, [r4, #0]
 800d740:	4433      	add	r3, r6
 800d742:	6023      	str	r3, [r4, #0]
 800d744:	2000      	movs	r0, #0
 800d746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d74a:	462a      	mov	r2, r5
 800d74c:	f000 fd89 	bl	800e262 <_realloc_r>
 800d750:	4606      	mov	r6, r0
 800d752:	2800      	cmp	r0, #0
 800d754:	d1e0      	bne.n	800d718 <__ssputs_r+0x5c>
 800d756:	6921      	ldr	r1, [r4, #16]
 800d758:	4650      	mov	r0, sl
 800d75a:	f7fe fb79 	bl	800be50 <_free_r>
 800d75e:	230c      	movs	r3, #12
 800d760:	f8ca 3000 	str.w	r3, [sl]
 800d764:	89a3      	ldrh	r3, [r4, #12]
 800d766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d76a:	81a3      	strh	r3, [r4, #12]
 800d76c:	f04f 30ff 	mov.w	r0, #4294967295
 800d770:	e7e9      	b.n	800d746 <__ssputs_r+0x8a>
	...

0800d774 <_svfiprintf_r>:
 800d774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d778:	4698      	mov	r8, r3
 800d77a:	898b      	ldrh	r3, [r1, #12]
 800d77c:	061b      	lsls	r3, r3, #24
 800d77e:	b09d      	sub	sp, #116	@ 0x74
 800d780:	4607      	mov	r7, r0
 800d782:	460d      	mov	r5, r1
 800d784:	4614      	mov	r4, r2
 800d786:	d510      	bpl.n	800d7aa <_svfiprintf_r+0x36>
 800d788:	690b      	ldr	r3, [r1, #16]
 800d78a:	b973      	cbnz	r3, 800d7aa <_svfiprintf_r+0x36>
 800d78c:	2140      	movs	r1, #64	@ 0x40
 800d78e:	f7fe fbd3 	bl	800bf38 <_malloc_r>
 800d792:	6028      	str	r0, [r5, #0]
 800d794:	6128      	str	r0, [r5, #16]
 800d796:	b930      	cbnz	r0, 800d7a6 <_svfiprintf_r+0x32>
 800d798:	230c      	movs	r3, #12
 800d79a:	603b      	str	r3, [r7, #0]
 800d79c:	f04f 30ff 	mov.w	r0, #4294967295
 800d7a0:	b01d      	add	sp, #116	@ 0x74
 800d7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7a6:	2340      	movs	r3, #64	@ 0x40
 800d7a8:	616b      	str	r3, [r5, #20]
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7ae:	2320      	movs	r3, #32
 800d7b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d7b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7b8:	2330      	movs	r3, #48	@ 0x30
 800d7ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d958 <_svfiprintf_r+0x1e4>
 800d7be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d7c2:	f04f 0901 	mov.w	r9, #1
 800d7c6:	4623      	mov	r3, r4
 800d7c8:	469a      	mov	sl, r3
 800d7ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7ce:	b10a      	cbz	r2, 800d7d4 <_svfiprintf_r+0x60>
 800d7d0:	2a25      	cmp	r2, #37	@ 0x25
 800d7d2:	d1f9      	bne.n	800d7c8 <_svfiprintf_r+0x54>
 800d7d4:	ebba 0b04 	subs.w	fp, sl, r4
 800d7d8:	d00b      	beq.n	800d7f2 <_svfiprintf_r+0x7e>
 800d7da:	465b      	mov	r3, fp
 800d7dc:	4622      	mov	r2, r4
 800d7de:	4629      	mov	r1, r5
 800d7e0:	4638      	mov	r0, r7
 800d7e2:	f7ff ff6b 	bl	800d6bc <__ssputs_r>
 800d7e6:	3001      	adds	r0, #1
 800d7e8:	f000 80a7 	beq.w	800d93a <_svfiprintf_r+0x1c6>
 800d7ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7ee:	445a      	add	r2, fp
 800d7f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d7f2:	f89a 3000 	ldrb.w	r3, [sl]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	f000 809f 	beq.w	800d93a <_svfiprintf_r+0x1c6>
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d806:	f10a 0a01 	add.w	sl, sl, #1
 800d80a:	9304      	str	r3, [sp, #16]
 800d80c:	9307      	str	r3, [sp, #28]
 800d80e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d812:	931a      	str	r3, [sp, #104]	@ 0x68
 800d814:	4654      	mov	r4, sl
 800d816:	2205      	movs	r2, #5
 800d818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d81c:	484e      	ldr	r0, [pc, #312]	@ (800d958 <_svfiprintf_r+0x1e4>)
 800d81e:	f7f2 fcdf 	bl	80001e0 <memchr>
 800d822:	9a04      	ldr	r2, [sp, #16]
 800d824:	b9d8      	cbnz	r0, 800d85e <_svfiprintf_r+0xea>
 800d826:	06d0      	lsls	r0, r2, #27
 800d828:	bf44      	itt	mi
 800d82a:	2320      	movmi	r3, #32
 800d82c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d830:	0711      	lsls	r1, r2, #28
 800d832:	bf44      	itt	mi
 800d834:	232b      	movmi	r3, #43	@ 0x2b
 800d836:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d83a:	f89a 3000 	ldrb.w	r3, [sl]
 800d83e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d840:	d015      	beq.n	800d86e <_svfiprintf_r+0xfa>
 800d842:	9a07      	ldr	r2, [sp, #28]
 800d844:	4654      	mov	r4, sl
 800d846:	2000      	movs	r0, #0
 800d848:	f04f 0c0a 	mov.w	ip, #10
 800d84c:	4621      	mov	r1, r4
 800d84e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d852:	3b30      	subs	r3, #48	@ 0x30
 800d854:	2b09      	cmp	r3, #9
 800d856:	d94b      	bls.n	800d8f0 <_svfiprintf_r+0x17c>
 800d858:	b1b0      	cbz	r0, 800d888 <_svfiprintf_r+0x114>
 800d85a:	9207      	str	r2, [sp, #28]
 800d85c:	e014      	b.n	800d888 <_svfiprintf_r+0x114>
 800d85e:	eba0 0308 	sub.w	r3, r0, r8
 800d862:	fa09 f303 	lsl.w	r3, r9, r3
 800d866:	4313      	orrs	r3, r2
 800d868:	9304      	str	r3, [sp, #16]
 800d86a:	46a2      	mov	sl, r4
 800d86c:	e7d2      	b.n	800d814 <_svfiprintf_r+0xa0>
 800d86e:	9b03      	ldr	r3, [sp, #12]
 800d870:	1d19      	adds	r1, r3, #4
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	9103      	str	r1, [sp, #12]
 800d876:	2b00      	cmp	r3, #0
 800d878:	bfbb      	ittet	lt
 800d87a:	425b      	neglt	r3, r3
 800d87c:	f042 0202 	orrlt.w	r2, r2, #2
 800d880:	9307      	strge	r3, [sp, #28]
 800d882:	9307      	strlt	r3, [sp, #28]
 800d884:	bfb8      	it	lt
 800d886:	9204      	strlt	r2, [sp, #16]
 800d888:	7823      	ldrb	r3, [r4, #0]
 800d88a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d88c:	d10a      	bne.n	800d8a4 <_svfiprintf_r+0x130>
 800d88e:	7863      	ldrb	r3, [r4, #1]
 800d890:	2b2a      	cmp	r3, #42	@ 0x2a
 800d892:	d132      	bne.n	800d8fa <_svfiprintf_r+0x186>
 800d894:	9b03      	ldr	r3, [sp, #12]
 800d896:	1d1a      	adds	r2, r3, #4
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	9203      	str	r2, [sp, #12]
 800d89c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d8a0:	3402      	adds	r4, #2
 800d8a2:	9305      	str	r3, [sp, #20]
 800d8a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d968 <_svfiprintf_r+0x1f4>
 800d8a8:	7821      	ldrb	r1, [r4, #0]
 800d8aa:	2203      	movs	r2, #3
 800d8ac:	4650      	mov	r0, sl
 800d8ae:	f7f2 fc97 	bl	80001e0 <memchr>
 800d8b2:	b138      	cbz	r0, 800d8c4 <_svfiprintf_r+0x150>
 800d8b4:	9b04      	ldr	r3, [sp, #16]
 800d8b6:	eba0 000a 	sub.w	r0, r0, sl
 800d8ba:	2240      	movs	r2, #64	@ 0x40
 800d8bc:	4082      	lsls	r2, r0
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	3401      	adds	r4, #1
 800d8c2:	9304      	str	r3, [sp, #16]
 800d8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8c8:	4824      	ldr	r0, [pc, #144]	@ (800d95c <_svfiprintf_r+0x1e8>)
 800d8ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d8ce:	2206      	movs	r2, #6
 800d8d0:	f7f2 fc86 	bl	80001e0 <memchr>
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	d036      	beq.n	800d946 <_svfiprintf_r+0x1d2>
 800d8d8:	4b21      	ldr	r3, [pc, #132]	@ (800d960 <_svfiprintf_r+0x1ec>)
 800d8da:	bb1b      	cbnz	r3, 800d924 <_svfiprintf_r+0x1b0>
 800d8dc:	9b03      	ldr	r3, [sp, #12]
 800d8de:	3307      	adds	r3, #7
 800d8e0:	f023 0307 	bic.w	r3, r3, #7
 800d8e4:	3308      	adds	r3, #8
 800d8e6:	9303      	str	r3, [sp, #12]
 800d8e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8ea:	4433      	add	r3, r6
 800d8ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8ee:	e76a      	b.n	800d7c6 <_svfiprintf_r+0x52>
 800d8f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8f4:	460c      	mov	r4, r1
 800d8f6:	2001      	movs	r0, #1
 800d8f8:	e7a8      	b.n	800d84c <_svfiprintf_r+0xd8>
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	3401      	adds	r4, #1
 800d8fe:	9305      	str	r3, [sp, #20]
 800d900:	4619      	mov	r1, r3
 800d902:	f04f 0c0a 	mov.w	ip, #10
 800d906:	4620      	mov	r0, r4
 800d908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d90c:	3a30      	subs	r2, #48	@ 0x30
 800d90e:	2a09      	cmp	r2, #9
 800d910:	d903      	bls.n	800d91a <_svfiprintf_r+0x1a6>
 800d912:	2b00      	cmp	r3, #0
 800d914:	d0c6      	beq.n	800d8a4 <_svfiprintf_r+0x130>
 800d916:	9105      	str	r1, [sp, #20]
 800d918:	e7c4      	b.n	800d8a4 <_svfiprintf_r+0x130>
 800d91a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d91e:	4604      	mov	r4, r0
 800d920:	2301      	movs	r3, #1
 800d922:	e7f0      	b.n	800d906 <_svfiprintf_r+0x192>
 800d924:	ab03      	add	r3, sp, #12
 800d926:	9300      	str	r3, [sp, #0]
 800d928:	462a      	mov	r2, r5
 800d92a:	4b0e      	ldr	r3, [pc, #56]	@ (800d964 <_svfiprintf_r+0x1f0>)
 800d92c:	a904      	add	r1, sp, #16
 800d92e:	4638      	mov	r0, r7
 800d930:	f7fc fc96 	bl	800a260 <_printf_float>
 800d934:	1c42      	adds	r2, r0, #1
 800d936:	4606      	mov	r6, r0
 800d938:	d1d6      	bne.n	800d8e8 <_svfiprintf_r+0x174>
 800d93a:	89ab      	ldrh	r3, [r5, #12]
 800d93c:	065b      	lsls	r3, r3, #25
 800d93e:	f53f af2d 	bmi.w	800d79c <_svfiprintf_r+0x28>
 800d942:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d944:	e72c      	b.n	800d7a0 <_svfiprintf_r+0x2c>
 800d946:	ab03      	add	r3, sp, #12
 800d948:	9300      	str	r3, [sp, #0]
 800d94a:	462a      	mov	r2, r5
 800d94c:	4b05      	ldr	r3, [pc, #20]	@ (800d964 <_svfiprintf_r+0x1f0>)
 800d94e:	a904      	add	r1, sp, #16
 800d950:	4638      	mov	r0, r7
 800d952:	f7fc ff1d 	bl	800a790 <_printf_i>
 800d956:	e7ed      	b.n	800d934 <_svfiprintf_r+0x1c0>
 800d958:	0800f189 	.word	0x0800f189
 800d95c:	0800f193 	.word	0x0800f193
 800d960:	0800a261 	.word	0x0800a261
 800d964:	0800d6bd 	.word	0x0800d6bd
 800d968:	0800f18f 	.word	0x0800f18f

0800d96c <__sflush_r>:
 800d96c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d974:	0716      	lsls	r6, r2, #28
 800d976:	4605      	mov	r5, r0
 800d978:	460c      	mov	r4, r1
 800d97a:	d454      	bmi.n	800da26 <__sflush_r+0xba>
 800d97c:	684b      	ldr	r3, [r1, #4]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	dc02      	bgt.n	800d988 <__sflush_r+0x1c>
 800d982:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d984:	2b00      	cmp	r3, #0
 800d986:	dd48      	ble.n	800da1a <__sflush_r+0xae>
 800d988:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d98a:	2e00      	cmp	r6, #0
 800d98c:	d045      	beq.n	800da1a <__sflush_r+0xae>
 800d98e:	2300      	movs	r3, #0
 800d990:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d994:	682f      	ldr	r7, [r5, #0]
 800d996:	6a21      	ldr	r1, [r4, #32]
 800d998:	602b      	str	r3, [r5, #0]
 800d99a:	d030      	beq.n	800d9fe <__sflush_r+0x92>
 800d99c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d99e:	89a3      	ldrh	r3, [r4, #12]
 800d9a0:	0759      	lsls	r1, r3, #29
 800d9a2:	d505      	bpl.n	800d9b0 <__sflush_r+0x44>
 800d9a4:	6863      	ldr	r3, [r4, #4]
 800d9a6:	1ad2      	subs	r2, r2, r3
 800d9a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d9aa:	b10b      	cbz	r3, 800d9b0 <__sflush_r+0x44>
 800d9ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d9ae:	1ad2      	subs	r2, r2, r3
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9b4:	6a21      	ldr	r1, [r4, #32]
 800d9b6:	4628      	mov	r0, r5
 800d9b8:	47b0      	blx	r6
 800d9ba:	1c43      	adds	r3, r0, #1
 800d9bc:	89a3      	ldrh	r3, [r4, #12]
 800d9be:	d106      	bne.n	800d9ce <__sflush_r+0x62>
 800d9c0:	6829      	ldr	r1, [r5, #0]
 800d9c2:	291d      	cmp	r1, #29
 800d9c4:	d82b      	bhi.n	800da1e <__sflush_r+0xb2>
 800d9c6:	4a2a      	ldr	r2, [pc, #168]	@ (800da70 <__sflush_r+0x104>)
 800d9c8:	410a      	asrs	r2, r1
 800d9ca:	07d6      	lsls	r6, r2, #31
 800d9cc:	d427      	bmi.n	800da1e <__sflush_r+0xb2>
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	6062      	str	r2, [r4, #4]
 800d9d2:	04d9      	lsls	r1, r3, #19
 800d9d4:	6922      	ldr	r2, [r4, #16]
 800d9d6:	6022      	str	r2, [r4, #0]
 800d9d8:	d504      	bpl.n	800d9e4 <__sflush_r+0x78>
 800d9da:	1c42      	adds	r2, r0, #1
 800d9dc:	d101      	bne.n	800d9e2 <__sflush_r+0x76>
 800d9de:	682b      	ldr	r3, [r5, #0]
 800d9e0:	b903      	cbnz	r3, 800d9e4 <__sflush_r+0x78>
 800d9e2:	6560      	str	r0, [r4, #84]	@ 0x54
 800d9e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d9e6:	602f      	str	r7, [r5, #0]
 800d9e8:	b1b9      	cbz	r1, 800da1a <__sflush_r+0xae>
 800d9ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d9ee:	4299      	cmp	r1, r3
 800d9f0:	d002      	beq.n	800d9f8 <__sflush_r+0x8c>
 800d9f2:	4628      	mov	r0, r5
 800d9f4:	f7fe fa2c 	bl	800be50 <_free_r>
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	6363      	str	r3, [r4, #52]	@ 0x34
 800d9fc:	e00d      	b.n	800da1a <__sflush_r+0xae>
 800d9fe:	2301      	movs	r3, #1
 800da00:	4628      	mov	r0, r5
 800da02:	47b0      	blx	r6
 800da04:	4602      	mov	r2, r0
 800da06:	1c50      	adds	r0, r2, #1
 800da08:	d1c9      	bne.n	800d99e <__sflush_r+0x32>
 800da0a:	682b      	ldr	r3, [r5, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d0c6      	beq.n	800d99e <__sflush_r+0x32>
 800da10:	2b1d      	cmp	r3, #29
 800da12:	d001      	beq.n	800da18 <__sflush_r+0xac>
 800da14:	2b16      	cmp	r3, #22
 800da16:	d11e      	bne.n	800da56 <__sflush_r+0xea>
 800da18:	602f      	str	r7, [r5, #0]
 800da1a:	2000      	movs	r0, #0
 800da1c:	e022      	b.n	800da64 <__sflush_r+0xf8>
 800da1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da22:	b21b      	sxth	r3, r3
 800da24:	e01b      	b.n	800da5e <__sflush_r+0xf2>
 800da26:	690f      	ldr	r7, [r1, #16]
 800da28:	2f00      	cmp	r7, #0
 800da2a:	d0f6      	beq.n	800da1a <__sflush_r+0xae>
 800da2c:	0793      	lsls	r3, r2, #30
 800da2e:	680e      	ldr	r6, [r1, #0]
 800da30:	bf08      	it	eq
 800da32:	694b      	ldreq	r3, [r1, #20]
 800da34:	600f      	str	r7, [r1, #0]
 800da36:	bf18      	it	ne
 800da38:	2300      	movne	r3, #0
 800da3a:	eba6 0807 	sub.w	r8, r6, r7
 800da3e:	608b      	str	r3, [r1, #8]
 800da40:	f1b8 0f00 	cmp.w	r8, #0
 800da44:	dde9      	ble.n	800da1a <__sflush_r+0xae>
 800da46:	6a21      	ldr	r1, [r4, #32]
 800da48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800da4a:	4643      	mov	r3, r8
 800da4c:	463a      	mov	r2, r7
 800da4e:	4628      	mov	r0, r5
 800da50:	47b0      	blx	r6
 800da52:	2800      	cmp	r0, #0
 800da54:	dc08      	bgt.n	800da68 <__sflush_r+0xfc>
 800da56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da5e:	81a3      	strh	r3, [r4, #12]
 800da60:	f04f 30ff 	mov.w	r0, #4294967295
 800da64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da68:	4407      	add	r7, r0
 800da6a:	eba8 0800 	sub.w	r8, r8, r0
 800da6e:	e7e7      	b.n	800da40 <__sflush_r+0xd4>
 800da70:	dfbffffe 	.word	0xdfbffffe

0800da74 <_fflush_r>:
 800da74:	b538      	push	{r3, r4, r5, lr}
 800da76:	690b      	ldr	r3, [r1, #16]
 800da78:	4605      	mov	r5, r0
 800da7a:	460c      	mov	r4, r1
 800da7c:	b913      	cbnz	r3, 800da84 <_fflush_r+0x10>
 800da7e:	2500      	movs	r5, #0
 800da80:	4628      	mov	r0, r5
 800da82:	bd38      	pop	{r3, r4, r5, pc}
 800da84:	b118      	cbz	r0, 800da8e <_fflush_r+0x1a>
 800da86:	6a03      	ldr	r3, [r0, #32]
 800da88:	b90b      	cbnz	r3, 800da8e <_fflush_r+0x1a>
 800da8a:	f7fd fa41 	bl	800af10 <__sinit>
 800da8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d0f3      	beq.n	800da7e <_fflush_r+0xa>
 800da96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800da98:	07d0      	lsls	r0, r2, #31
 800da9a:	d404      	bmi.n	800daa6 <_fflush_r+0x32>
 800da9c:	0599      	lsls	r1, r3, #22
 800da9e:	d402      	bmi.n	800daa6 <_fflush_r+0x32>
 800daa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800daa2:	f7fd fb80 	bl	800b1a6 <__retarget_lock_acquire_recursive>
 800daa6:	4628      	mov	r0, r5
 800daa8:	4621      	mov	r1, r4
 800daaa:	f7ff ff5f 	bl	800d96c <__sflush_r>
 800daae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dab0:	07da      	lsls	r2, r3, #31
 800dab2:	4605      	mov	r5, r0
 800dab4:	d4e4      	bmi.n	800da80 <_fflush_r+0xc>
 800dab6:	89a3      	ldrh	r3, [r4, #12]
 800dab8:	059b      	lsls	r3, r3, #22
 800daba:	d4e1      	bmi.n	800da80 <_fflush_r+0xc>
 800dabc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dabe:	f7fd fb73 	bl	800b1a8 <__retarget_lock_release_recursive>
 800dac2:	e7dd      	b.n	800da80 <_fflush_r+0xc>

0800dac4 <memmove>:
 800dac4:	4288      	cmp	r0, r1
 800dac6:	b510      	push	{r4, lr}
 800dac8:	eb01 0402 	add.w	r4, r1, r2
 800dacc:	d902      	bls.n	800dad4 <memmove+0x10>
 800dace:	4284      	cmp	r4, r0
 800dad0:	4623      	mov	r3, r4
 800dad2:	d807      	bhi.n	800dae4 <memmove+0x20>
 800dad4:	1e43      	subs	r3, r0, #1
 800dad6:	42a1      	cmp	r1, r4
 800dad8:	d008      	beq.n	800daec <memmove+0x28>
 800dada:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dade:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dae2:	e7f8      	b.n	800dad6 <memmove+0x12>
 800dae4:	4402      	add	r2, r0
 800dae6:	4601      	mov	r1, r0
 800dae8:	428a      	cmp	r2, r1
 800daea:	d100      	bne.n	800daee <memmove+0x2a>
 800daec:	bd10      	pop	{r4, pc}
 800daee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800daf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800daf6:	e7f7      	b.n	800dae8 <memmove+0x24>

0800daf8 <strncmp>:
 800daf8:	b510      	push	{r4, lr}
 800dafa:	b16a      	cbz	r2, 800db18 <strncmp+0x20>
 800dafc:	3901      	subs	r1, #1
 800dafe:	1884      	adds	r4, r0, r2
 800db00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db04:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800db08:	429a      	cmp	r2, r3
 800db0a:	d103      	bne.n	800db14 <strncmp+0x1c>
 800db0c:	42a0      	cmp	r0, r4
 800db0e:	d001      	beq.n	800db14 <strncmp+0x1c>
 800db10:	2a00      	cmp	r2, #0
 800db12:	d1f5      	bne.n	800db00 <strncmp+0x8>
 800db14:	1ad0      	subs	r0, r2, r3
 800db16:	bd10      	pop	{r4, pc}
 800db18:	4610      	mov	r0, r2
 800db1a:	e7fc      	b.n	800db16 <strncmp+0x1e>

0800db1c <_sbrk_r>:
 800db1c:	b538      	push	{r3, r4, r5, lr}
 800db1e:	4d06      	ldr	r5, [pc, #24]	@ (800db38 <_sbrk_r+0x1c>)
 800db20:	2300      	movs	r3, #0
 800db22:	4604      	mov	r4, r0
 800db24:	4608      	mov	r0, r1
 800db26:	602b      	str	r3, [r5, #0]
 800db28:	f7f3 ff7c 	bl	8001a24 <_sbrk>
 800db2c:	1c43      	adds	r3, r0, #1
 800db2e:	d102      	bne.n	800db36 <_sbrk_r+0x1a>
 800db30:	682b      	ldr	r3, [r5, #0]
 800db32:	b103      	cbz	r3, 800db36 <_sbrk_r+0x1a>
 800db34:	6023      	str	r3, [r4, #0]
 800db36:	bd38      	pop	{r3, r4, r5, pc}
 800db38:	200020fc 	.word	0x200020fc

0800db3c <memcpy>:
 800db3c:	440a      	add	r2, r1
 800db3e:	4291      	cmp	r1, r2
 800db40:	f100 33ff 	add.w	r3, r0, #4294967295
 800db44:	d100      	bne.n	800db48 <memcpy+0xc>
 800db46:	4770      	bx	lr
 800db48:	b510      	push	{r4, lr}
 800db4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db52:	4291      	cmp	r1, r2
 800db54:	d1f9      	bne.n	800db4a <memcpy+0xe>
 800db56:	bd10      	pop	{r4, pc}

0800db58 <nan>:
 800db58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800db60 <nan+0x8>
 800db5c:	4770      	bx	lr
 800db5e:	bf00      	nop
 800db60:	00000000 	.word	0x00000000
 800db64:	7ff80000 	.word	0x7ff80000

0800db68 <__assert_func>:
 800db68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db6a:	4614      	mov	r4, r2
 800db6c:	461a      	mov	r2, r3
 800db6e:	4b09      	ldr	r3, [pc, #36]	@ (800db94 <__assert_func+0x2c>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	4605      	mov	r5, r0
 800db74:	68d8      	ldr	r0, [r3, #12]
 800db76:	b954      	cbnz	r4, 800db8e <__assert_func+0x26>
 800db78:	4b07      	ldr	r3, [pc, #28]	@ (800db98 <__assert_func+0x30>)
 800db7a:	461c      	mov	r4, r3
 800db7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db80:	9100      	str	r1, [sp, #0]
 800db82:	462b      	mov	r3, r5
 800db84:	4905      	ldr	r1, [pc, #20]	@ (800db9c <__assert_func+0x34>)
 800db86:	f000 fba7 	bl	800e2d8 <fiprintf>
 800db8a:	f000 fbb7 	bl	800e2fc <abort>
 800db8e:	4b04      	ldr	r3, [pc, #16]	@ (800dba0 <__assert_func+0x38>)
 800db90:	e7f4      	b.n	800db7c <__assert_func+0x14>
 800db92:	bf00      	nop
 800db94:	2000010c 	.word	0x2000010c
 800db98:	0800f1dd 	.word	0x0800f1dd
 800db9c:	0800f1af 	.word	0x0800f1af
 800dba0:	0800f1a2 	.word	0x0800f1a2

0800dba4 <_calloc_r>:
 800dba4:	b570      	push	{r4, r5, r6, lr}
 800dba6:	fba1 5402 	umull	r5, r4, r1, r2
 800dbaa:	b93c      	cbnz	r4, 800dbbc <_calloc_r+0x18>
 800dbac:	4629      	mov	r1, r5
 800dbae:	f7fe f9c3 	bl	800bf38 <_malloc_r>
 800dbb2:	4606      	mov	r6, r0
 800dbb4:	b928      	cbnz	r0, 800dbc2 <_calloc_r+0x1e>
 800dbb6:	2600      	movs	r6, #0
 800dbb8:	4630      	mov	r0, r6
 800dbba:	bd70      	pop	{r4, r5, r6, pc}
 800dbbc:	220c      	movs	r2, #12
 800dbbe:	6002      	str	r2, [r0, #0]
 800dbc0:	e7f9      	b.n	800dbb6 <_calloc_r+0x12>
 800dbc2:	462a      	mov	r2, r5
 800dbc4:	4621      	mov	r1, r4
 800dbc6:	f7fd fa70 	bl	800b0aa <memset>
 800dbca:	e7f5      	b.n	800dbb8 <_calloc_r+0x14>

0800dbcc <rshift>:
 800dbcc:	6903      	ldr	r3, [r0, #16]
 800dbce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dbd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dbd6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dbda:	f100 0414 	add.w	r4, r0, #20
 800dbde:	dd45      	ble.n	800dc6c <rshift+0xa0>
 800dbe0:	f011 011f 	ands.w	r1, r1, #31
 800dbe4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dbe8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dbec:	d10c      	bne.n	800dc08 <rshift+0x3c>
 800dbee:	f100 0710 	add.w	r7, r0, #16
 800dbf2:	4629      	mov	r1, r5
 800dbf4:	42b1      	cmp	r1, r6
 800dbf6:	d334      	bcc.n	800dc62 <rshift+0x96>
 800dbf8:	1a9b      	subs	r3, r3, r2
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	1eea      	subs	r2, r5, #3
 800dbfe:	4296      	cmp	r6, r2
 800dc00:	bf38      	it	cc
 800dc02:	2300      	movcc	r3, #0
 800dc04:	4423      	add	r3, r4
 800dc06:	e015      	b.n	800dc34 <rshift+0x68>
 800dc08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dc0c:	f1c1 0820 	rsb	r8, r1, #32
 800dc10:	40cf      	lsrs	r7, r1
 800dc12:	f105 0e04 	add.w	lr, r5, #4
 800dc16:	46a1      	mov	r9, r4
 800dc18:	4576      	cmp	r6, lr
 800dc1a:	46f4      	mov	ip, lr
 800dc1c:	d815      	bhi.n	800dc4a <rshift+0x7e>
 800dc1e:	1a9a      	subs	r2, r3, r2
 800dc20:	0092      	lsls	r2, r2, #2
 800dc22:	3a04      	subs	r2, #4
 800dc24:	3501      	adds	r5, #1
 800dc26:	42ae      	cmp	r6, r5
 800dc28:	bf38      	it	cc
 800dc2a:	2200      	movcc	r2, #0
 800dc2c:	18a3      	adds	r3, r4, r2
 800dc2e:	50a7      	str	r7, [r4, r2]
 800dc30:	b107      	cbz	r7, 800dc34 <rshift+0x68>
 800dc32:	3304      	adds	r3, #4
 800dc34:	1b1a      	subs	r2, r3, r4
 800dc36:	42a3      	cmp	r3, r4
 800dc38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dc3c:	bf08      	it	eq
 800dc3e:	2300      	moveq	r3, #0
 800dc40:	6102      	str	r2, [r0, #16]
 800dc42:	bf08      	it	eq
 800dc44:	6143      	streq	r3, [r0, #20]
 800dc46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc4a:	f8dc c000 	ldr.w	ip, [ip]
 800dc4e:	fa0c fc08 	lsl.w	ip, ip, r8
 800dc52:	ea4c 0707 	orr.w	r7, ip, r7
 800dc56:	f849 7b04 	str.w	r7, [r9], #4
 800dc5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dc5e:	40cf      	lsrs	r7, r1
 800dc60:	e7da      	b.n	800dc18 <rshift+0x4c>
 800dc62:	f851 cb04 	ldr.w	ip, [r1], #4
 800dc66:	f847 cf04 	str.w	ip, [r7, #4]!
 800dc6a:	e7c3      	b.n	800dbf4 <rshift+0x28>
 800dc6c:	4623      	mov	r3, r4
 800dc6e:	e7e1      	b.n	800dc34 <rshift+0x68>

0800dc70 <__hexdig_fun>:
 800dc70:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dc74:	2b09      	cmp	r3, #9
 800dc76:	d802      	bhi.n	800dc7e <__hexdig_fun+0xe>
 800dc78:	3820      	subs	r0, #32
 800dc7a:	b2c0      	uxtb	r0, r0
 800dc7c:	4770      	bx	lr
 800dc7e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dc82:	2b05      	cmp	r3, #5
 800dc84:	d801      	bhi.n	800dc8a <__hexdig_fun+0x1a>
 800dc86:	3847      	subs	r0, #71	@ 0x47
 800dc88:	e7f7      	b.n	800dc7a <__hexdig_fun+0xa>
 800dc8a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dc8e:	2b05      	cmp	r3, #5
 800dc90:	d801      	bhi.n	800dc96 <__hexdig_fun+0x26>
 800dc92:	3827      	subs	r0, #39	@ 0x27
 800dc94:	e7f1      	b.n	800dc7a <__hexdig_fun+0xa>
 800dc96:	2000      	movs	r0, #0
 800dc98:	4770      	bx	lr
	...

0800dc9c <__gethex>:
 800dc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca0:	b085      	sub	sp, #20
 800dca2:	468a      	mov	sl, r1
 800dca4:	9302      	str	r3, [sp, #8]
 800dca6:	680b      	ldr	r3, [r1, #0]
 800dca8:	9001      	str	r0, [sp, #4]
 800dcaa:	4690      	mov	r8, r2
 800dcac:	1c9c      	adds	r4, r3, #2
 800dcae:	46a1      	mov	r9, r4
 800dcb0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dcb4:	2830      	cmp	r0, #48	@ 0x30
 800dcb6:	d0fa      	beq.n	800dcae <__gethex+0x12>
 800dcb8:	eba9 0303 	sub.w	r3, r9, r3
 800dcbc:	f1a3 0b02 	sub.w	fp, r3, #2
 800dcc0:	f7ff ffd6 	bl	800dc70 <__hexdig_fun>
 800dcc4:	4605      	mov	r5, r0
 800dcc6:	2800      	cmp	r0, #0
 800dcc8:	d168      	bne.n	800dd9c <__gethex+0x100>
 800dcca:	49a0      	ldr	r1, [pc, #640]	@ (800df4c <__gethex+0x2b0>)
 800dccc:	2201      	movs	r2, #1
 800dcce:	4648      	mov	r0, r9
 800dcd0:	f7ff ff12 	bl	800daf8 <strncmp>
 800dcd4:	4607      	mov	r7, r0
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	d167      	bne.n	800ddaa <__gethex+0x10e>
 800dcda:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dcde:	4626      	mov	r6, r4
 800dce0:	f7ff ffc6 	bl	800dc70 <__hexdig_fun>
 800dce4:	2800      	cmp	r0, #0
 800dce6:	d062      	beq.n	800ddae <__gethex+0x112>
 800dce8:	4623      	mov	r3, r4
 800dcea:	7818      	ldrb	r0, [r3, #0]
 800dcec:	2830      	cmp	r0, #48	@ 0x30
 800dcee:	4699      	mov	r9, r3
 800dcf0:	f103 0301 	add.w	r3, r3, #1
 800dcf4:	d0f9      	beq.n	800dcea <__gethex+0x4e>
 800dcf6:	f7ff ffbb 	bl	800dc70 <__hexdig_fun>
 800dcfa:	fab0 f580 	clz	r5, r0
 800dcfe:	096d      	lsrs	r5, r5, #5
 800dd00:	f04f 0b01 	mov.w	fp, #1
 800dd04:	464a      	mov	r2, r9
 800dd06:	4616      	mov	r6, r2
 800dd08:	3201      	adds	r2, #1
 800dd0a:	7830      	ldrb	r0, [r6, #0]
 800dd0c:	f7ff ffb0 	bl	800dc70 <__hexdig_fun>
 800dd10:	2800      	cmp	r0, #0
 800dd12:	d1f8      	bne.n	800dd06 <__gethex+0x6a>
 800dd14:	498d      	ldr	r1, [pc, #564]	@ (800df4c <__gethex+0x2b0>)
 800dd16:	2201      	movs	r2, #1
 800dd18:	4630      	mov	r0, r6
 800dd1a:	f7ff feed 	bl	800daf8 <strncmp>
 800dd1e:	2800      	cmp	r0, #0
 800dd20:	d13f      	bne.n	800dda2 <__gethex+0x106>
 800dd22:	b944      	cbnz	r4, 800dd36 <__gethex+0x9a>
 800dd24:	1c74      	adds	r4, r6, #1
 800dd26:	4622      	mov	r2, r4
 800dd28:	4616      	mov	r6, r2
 800dd2a:	3201      	adds	r2, #1
 800dd2c:	7830      	ldrb	r0, [r6, #0]
 800dd2e:	f7ff ff9f 	bl	800dc70 <__hexdig_fun>
 800dd32:	2800      	cmp	r0, #0
 800dd34:	d1f8      	bne.n	800dd28 <__gethex+0x8c>
 800dd36:	1ba4      	subs	r4, r4, r6
 800dd38:	00a7      	lsls	r7, r4, #2
 800dd3a:	7833      	ldrb	r3, [r6, #0]
 800dd3c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dd40:	2b50      	cmp	r3, #80	@ 0x50
 800dd42:	d13e      	bne.n	800ddc2 <__gethex+0x126>
 800dd44:	7873      	ldrb	r3, [r6, #1]
 800dd46:	2b2b      	cmp	r3, #43	@ 0x2b
 800dd48:	d033      	beq.n	800ddb2 <__gethex+0x116>
 800dd4a:	2b2d      	cmp	r3, #45	@ 0x2d
 800dd4c:	d034      	beq.n	800ddb8 <__gethex+0x11c>
 800dd4e:	1c71      	adds	r1, r6, #1
 800dd50:	2400      	movs	r4, #0
 800dd52:	7808      	ldrb	r0, [r1, #0]
 800dd54:	f7ff ff8c 	bl	800dc70 <__hexdig_fun>
 800dd58:	1e43      	subs	r3, r0, #1
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	2b18      	cmp	r3, #24
 800dd5e:	d830      	bhi.n	800ddc2 <__gethex+0x126>
 800dd60:	f1a0 0210 	sub.w	r2, r0, #16
 800dd64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dd68:	f7ff ff82 	bl	800dc70 <__hexdig_fun>
 800dd6c:	f100 3cff 	add.w	ip, r0, #4294967295
 800dd70:	fa5f fc8c 	uxtb.w	ip, ip
 800dd74:	f1bc 0f18 	cmp.w	ip, #24
 800dd78:	f04f 030a 	mov.w	r3, #10
 800dd7c:	d91e      	bls.n	800ddbc <__gethex+0x120>
 800dd7e:	b104      	cbz	r4, 800dd82 <__gethex+0xe6>
 800dd80:	4252      	negs	r2, r2
 800dd82:	4417      	add	r7, r2
 800dd84:	f8ca 1000 	str.w	r1, [sl]
 800dd88:	b1ed      	cbz	r5, 800ddc6 <__gethex+0x12a>
 800dd8a:	f1bb 0f00 	cmp.w	fp, #0
 800dd8e:	bf0c      	ite	eq
 800dd90:	2506      	moveq	r5, #6
 800dd92:	2500      	movne	r5, #0
 800dd94:	4628      	mov	r0, r5
 800dd96:	b005      	add	sp, #20
 800dd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd9c:	2500      	movs	r5, #0
 800dd9e:	462c      	mov	r4, r5
 800dda0:	e7b0      	b.n	800dd04 <__gethex+0x68>
 800dda2:	2c00      	cmp	r4, #0
 800dda4:	d1c7      	bne.n	800dd36 <__gethex+0x9a>
 800dda6:	4627      	mov	r7, r4
 800dda8:	e7c7      	b.n	800dd3a <__gethex+0x9e>
 800ddaa:	464e      	mov	r6, r9
 800ddac:	462f      	mov	r7, r5
 800ddae:	2501      	movs	r5, #1
 800ddb0:	e7c3      	b.n	800dd3a <__gethex+0x9e>
 800ddb2:	2400      	movs	r4, #0
 800ddb4:	1cb1      	adds	r1, r6, #2
 800ddb6:	e7cc      	b.n	800dd52 <__gethex+0xb6>
 800ddb8:	2401      	movs	r4, #1
 800ddba:	e7fb      	b.n	800ddb4 <__gethex+0x118>
 800ddbc:	fb03 0002 	mla	r0, r3, r2, r0
 800ddc0:	e7ce      	b.n	800dd60 <__gethex+0xc4>
 800ddc2:	4631      	mov	r1, r6
 800ddc4:	e7de      	b.n	800dd84 <__gethex+0xe8>
 800ddc6:	eba6 0309 	sub.w	r3, r6, r9
 800ddca:	3b01      	subs	r3, #1
 800ddcc:	4629      	mov	r1, r5
 800ddce:	2b07      	cmp	r3, #7
 800ddd0:	dc0a      	bgt.n	800dde8 <__gethex+0x14c>
 800ddd2:	9801      	ldr	r0, [sp, #4]
 800ddd4:	f7fe f93c 	bl	800c050 <_Balloc>
 800ddd8:	4604      	mov	r4, r0
 800ddda:	b940      	cbnz	r0, 800ddee <__gethex+0x152>
 800dddc:	4b5c      	ldr	r3, [pc, #368]	@ (800df50 <__gethex+0x2b4>)
 800ddde:	4602      	mov	r2, r0
 800dde0:	21e4      	movs	r1, #228	@ 0xe4
 800dde2:	485c      	ldr	r0, [pc, #368]	@ (800df54 <__gethex+0x2b8>)
 800dde4:	f7ff fec0 	bl	800db68 <__assert_func>
 800dde8:	3101      	adds	r1, #1
 800ddea:	105b      	asrs	r3, r3, #1
 800ddec:	e7ef      	b.n	800ddce <__gethex+0x132>
 800ddee:	f100 0a14 	add.w	sl, r0, #20
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	4655      	mov	r5, sl
 800ddf6:	469b      	mov	fp, r3
 800ddf8:	45b1      	cmp	r9, r6
 800ddfa:	d337      	bcc.n	800de6c <__gethex+0x1d0>
 800ddfc:	f845 bb04 	str.w	fp, [r5], #4
 800de00:	eba5 050a 	sub.w	r5, r5, sl
 800de04:	10ad      	asrs	r5, r5, #2
 800de06:	6125      	str	r5, [r4, #16]
 800de08:	4658      	mov	r0, fp
 800de0a:	f7fe fa13 	bl	800c234 <__hi0bits>
 800de0e:	016d      	lsls	r5, r5, #5
 800de10:	f8d8 6000 	ldr.w	r6, [r8]
 800de14:	1a2d      	subs	r5, r5, r0
 800de16:	42b5      	cmp	r5, r6
 800de18:	dd54      	ble.n	800dec4 <__gethex+0x228>
 800de1a:	1bad      	subs	r5, r5, r6
 800de1c:	4629      	mov	r1, r5
 800de1e:	4620      	mov	r0, r4
 800de20:	f7fe fda7 	bl	800c972 <__any_on>
 800de24:	4681      	mov	r9, r0
 800de26:	b178      	cbz	r0, 800de48 <__gethex+0x1ac>
 800de28:	1e6b      	subs	r3, r5, #1
 800de2a:	1159      	asrs	r1, r3, #5
 800de2c:	f003 021f 	and.w	r2, r3, #31
 800de30:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800de34:	f04f 0901 	mov.w	r9, #1
 800de38:	fa09 f202 	lsl.w	r2, r9, r2
 800de3c:	420a      	tst	r2, r1
 800de3e:	d003      	beq.n	800de48 <__gethex+0x1ac>
 800de40:	454b      	cmp	r3, r9
 800de42:	dc36      	bgt.n	800deb2 <__gethex+0x216>
 800de44:	f04f 0902 	mov.w	r9, #2
 800de48:	4629      	mov	r1, r5
 800de4a:	4620      	mov	r0, r4
 800de4c:	f7ff febe 	bl	800dbcc <rshift>
 800de50:	442f      	add	r7, r5
 800de52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de56:	42bb      	cmp	r3, r7
 800de58:	da42      	bge.n	800dee0 <__gethex+0x244>
 800de5a:	9801      	ldr	r0, [sp, #4]
 800de5c:	4621      	mov	r1, r4
 800de5e:	f7fe f937 	bl	800c0d0 <_Bfree>
 800de62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de64:	2300      	movs	r3, #0
 800de66:	6013      	str	r3, [r2, #0]
 800de68:	25a3      	movs	r5, #163	@ 0xa3
 800de6a:	e793      	b.n	800dd94 <__gethex+0xf8>
 800de6c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800de70:	2a2e      	cmp	r2, #46	@ 0x2e
 800de72:	d012      	beq.n	800de9a <__gethex+0x1fe>
 800de74:	2b20      	cmp	r3, #32
 800de76:	d104      	bne.n	800de82 <__gethex+0x1e6>
 800de78:	f845 bb04 	str.w	fp, [r5], #4
 800de7c:	f04f 0b00 	mov.w	fp, #0
 800de80:	465b      	mov	r3, fp
 800de82:	7830      	ldrb	r0, [r6, #0]
 800de84:	9303      	str	r3, [sp, #12]
 800de86:	f7ff fef3 	bl	800dc70 <__hexdig_fun>
 800de8a:	9b03      	ldr	r3, [sp, #12]
 800de8c:	f000 000f 	and.w	r0, r0, #15
 800de90:	4098      	lsls	r0, r3
 800de92:	ea4b 0b00 	orr.w	fp, fp, r0
 800de96:	3304      	adds	r3, #4
 800de98:	e7ae      	b.n	800ddf8 <__gethex+0x15c>
 800de9a:	45b1      	cmp	r9, r6
 800de9c:	d8ea      	bhi.n	800de74 <__gethex+0x1d8>
 800de9e:	492b      	ldr	r1, [pc, #172]	@ (800df4c <__gethex+0x2b0>)
 800dea0:	9303      	str	r3, [sp, #12]
 800dea2:	2201      	movs	r2, #1
 800dea4:	4630      	mov	r0, r6
 800dea6:	f7ff fe27 	bl	800daf8 <strncmp>
 800deaa:	9b03      	ldr	r3, [sp, #12]
 800deac:	2800      	cmp	r0, #0
 800deae:	d1e1      	bne.n	800de74 <__gethex+0x1d8>
 800deb0:	e7a2      	b.n	800ddf8 <__gethex+0x15c>
 800deb2:	1ea9      	subs	r1, r5, #2
 800deb4:	4620      	mov	r0, r4
 800deb6:	f7fe fd5c 	bl	800c972 <__any_on>
 800deba:	2800      	cmp	r0, #0
 800debc:	d0c2      	beq.n	800de44 <__gethex+0x1a8>
 800debe:	f04f 0903 	mov.w	r9, #3
 800dec2:	e7c1      	b.n	800de48 <__gethex+0x1ac>
 800dec4:	da09      	bge.n	800deda <__gethex+0x23e>
 800dec6:	1b75      	subs	r5, r6, r5
 800dec8:	4621      	mov	r1, r4
 800deca:	9801      	ldr	r0, [sp, #4]
 800decc:	462a      	mov	r2, r5
 800dece:	f7fe fb17 	bl	800c500 <__lshift>
 800ded2:	1b7f      	subs	r7, r7, r5
 800ded4:	4604      	mov	r4, r0
 800ded6:	f100 0a14 	add.w	sl, r0, #20
 800deda:	f04f 0900 	mov.w	r9, #0
 800dede:	e7b8      	b.n	800de52 <__gethex+0x1b6>
 800dee0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dee4:	42bd      	cmp	r5, r7
 800dee6:	dd6f      	ble.n	800dfc8 <__gethex+0x32c>
 800dee8:	1bed      	subs	r5, r5, r7
 800deea:	42ae      	cmp	r6, r5
 800deec:	dc34      	bgt.n	800df58 <__gethex+0x2bc>
 800deee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800def2:	2b02      	cmp	r3, #2
 800def4:	d022      	beq.n	800df3c <__gethex+0x2a0>
 800def6:	2b03      	cmp	r3, #3
 800def8:	d024      	beq.n	800df44 <__gethex+0x2a8>
 800defa:	2b01      	cmp	r3, #1
 800defc:	d115      	bne.n	800df2a <__gethex+0x28e>
 800defe:	42ae      	cmp	r6, r5
 800df00:	d113      	bne.n	800df2a <__gethex+0x28e>
 800df02:	2e01      	cmp	r6, #1
 800df04:	d10b      	bne.n	800df1e <__gethex+0x282>
 800df06:	9a02      	ldr	r2, [sp, #8]
 800df08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800df0c:	6013      	str	r3, [r2, #0]
 800df0e:	2301      	movs	r3, #1
 800df10:	6123      	str	r3, [r4, #16]
 800df12:	f8ca 3000 	str.w	r3, [sl]
 800df16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df18:	2562      	movs	r5, #98	@ 0x62
 800df1a:	601c      	str	r4, [r3, #0]
 800df1c:	e73a      	b.n	800dd94 <__gethex+0xf8>
 800df1e:	1e71      	subs	r1, r6, #1
 800df20:	4620      	mov	r0, r4
 800df22:	f7fe fd26 	bl	800c972 <__any_on>
 800df26:	2800      	cmp	r0, #0
 800df28:	d1ed      	bne.n	800df06 <__gethex+0x26a>
 800df2a:	9801      	ldr	r0, [sp, #4]
 800df2c:	4621      	mov	r1, r4
 800df2e:	f7fe f8cf 	bl	800c0d0 <_Bfree>
 800df32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df34:	2300      	movs	r3, #0
 800df36:	6013      	str	r3, [r2, #0]
 800df38:	2550      	movs	r5, #80	@ 0x50
 800df3a:	e72b      	b.n	800dd94 <__gethex+0xf8>
 800df3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d1f3      	bne.n	800df2a <__gethex+0x28e>
 800df42:	e7e0      	b.n	800df06 <__gethex+0x26a>
 800df44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df46:	2b00      	cmp	r3, #0
 800df48:	d1dd      	bne.n	800df06 <__gethex+0x26a>
 800df4a:	e7ee      	b.n	800df2a <__gethex+0x28e>
 800df4c:	0800f030 	.word	0x0800f030
 800df50:	0800eec5 	.word	0x0800eec5
 800df54:	0800f1de 	.word	0x0800f1de
 800df58:	1e6f      	subs	r7, r5, #1
 800df5a:	f1b9 0f00 	cmp.w	r9, #0
 800df5e:	d130      	bne.n	800dfc2 <__gethex+0x326>
 800df60:	b127      	cbz	r7, 800df6c <__gethex+0x2d0>
 800df62:	4639      	mov	r1, r7
 800df64:	4620      	mov	r0, r4
 800df66:	f7fe fd04 	bl	800c972 <__any_on>
 800df6a:	4681      	mov	r9, r0
 800df6c:	117a      	asrs	r2, r7, #5
 800df6e:	2301      	movs	r3, #1
 800df70:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800df74:	f007 071f 	and.w	r7, r7, #31
 800df78:	40bb      	lsls	r3, r7
 800df7a:	4213      	tst	r3, r2
 800df7c:	4629      	mov	r1, r5
 800df7e:	4620      	mov	r0, r4
 800df80:	bf18      	it	ne
 800df82:	f049 0902 	orrne.w	r9, r9, #2
 800df86:	f7ff fe21 	bl	800dbcc <rshift>
 800df8a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800df8e:	1b76      	subs	r6, r6, r5
 800df90:	2502      	movs	r5, #2
 800df92:	f1b9 0f00 	cmp.w	r9, #0
 800df96:	d047      	beq.n	800e028 <__gethex+0x38c>
 800df98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df9c:	2b02      	cmp	r3, #2
 800df9e:	d015      	beq.n	800dfcc <__gethex+0x330>
 800dfa0:	2b03      	cmp	r3, #3
 800dfa2:	d017      	beq.n	800dfd4 <__gethex+0x338>
 800dfa4:	2b01      	cmp	r3, #1
 800dfa6:	d109      	bne.n	800dfbc <__gethex+0x320>
 800dfa8:	f019 0f02 	tst.w	r9, #2
 800dfac:	d006      	beq.n	800dfbc <__gethex+0x320>
 800dfae:	f8da 3000 	ldr.w	r3, [sl]
 800dfb2:	ea49 0903 	orr.w	r9, r9, r3
 800dfb6:	f019 0f01 	tst.w	r9, #1
 800dfba:	d10e      	bne.n	800dfda <__gethex+0x33e>
 800dfbc:	f045 0510 	orr.w	r5, r5, #16
 800dfc0:	e032      	b.n	800e028 <__gethex+0x38c>
 800dfc2:	f04f 0901 	mov.w	r9, #1
 800dfc6:	e7d1      	b.n	800df6c <__gethex+0x2d0>
 800dfc8:	2501      	movs	r5, #1
 800dfca:	e7e2      	b.n	800df92 <__gethex+0x2f6>
 800dfcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfce:	f1c3 0301 	rsb	r3, r3, #1
 800dfd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dfd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d0f0      	beq.n	800dfbc <__gethex+0x320>
 800dfda:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dfde:	f104 0314 	add.w	r3, r4, #20
 800dfe2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dfe6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dfea:	f04f 0c00 	mov.w	ip, #0
 800dfee:	4618      	mov	r0, r3
 800dff0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dff4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dff8:	d01b      	beq.n	800e032 <__gethex+0x396>
 800dffa:	3201      	adds	r2, #1
 800dffc:	6002      	str	r2, [r0, #0]
 800dffe:	2d02      	cmp	r5, #2
 800e000:	f104 0314 	add.w	r3, r4, #20
 800e004:	d13c      	bne.n	800e080 <__gethex+0x3e4>
 800e006:	f8d8 2000 	ldr.w	r2, [r8]
 800e00a:	3a01      	subs	r2, #1
 800e00c:	42b2      	cmp	r2, r6
 800e00e:	d109      	bne.n	800e024 <__gethex+0x388>
 800e010:	1171      	asrs	r1, r6, #5
 800e012:	2201      	movs	r2, #1
 800e014:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e018:	f006 061f 	and.w	r6, r6, #31
 800e01c:	fa02 f606 	lsl.w	r6, r2, r6
 800e020:	421e      	tst	r6, r3
 800e022:	d13a      	bne.n	800e09a <__gethex+0x3fe>
 800e024:	f045 0520 	orr.w	r5, r5, #32
 800e028:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e02a:	601c      	str	r4, [r3, #0]
 800e02c:	9b02      	ldr	r3, [sp, #8]
 800e02e:	601f      	str	r7, [r3, #0]
 800e030:	e6b0      	b.n	800dd94 <__gethex+0xf8>
 800e032:	4299      	cmp	r1, r3
 800e034:	f843 cc04 	str.w	ip, [r3, #-4]
 800e038:	d8d9      	bhi.n	800dfee <__gethex+0x352>
 800e03a:	68a3      	ldr	r3, [r4, #8]
 800e03c:	459b      	cmp	fp, r3
 800e03e:	db17      	blt.n	800e070 <__gethex+0x3d4>
 800e040:	6861      	ldr	r1, [r4, #4]
 800e042:	9801      	ldr	r0, [sp, #4]
 800e044:	3101      	adds	r1, #1
 800e046:	f7fe f803 	bl	800c050 <_Balloc>
 800e04a:	4681      	mov	r9, r0
 800e04c:	b918      	cbnz	r0, 800e056 <__gethex+0x3ba>
 800e04e:	4b1a      	ldr	r3, [pc, #104]	@ (800e0b8 <__gethex+0x41c>)
 800e050:	4602      	mov	r2, r0
 800e052:	2184      	movs	r1, #132	@ 0x84
 800e054:	e6c5      	b.n	800dde2 <__gethex+0x146>
 800e056:	6922      	ldr	r2, [r4, #16]
 800e058:	3202      	adds	r2, #2
 800e05a:	f104 010c 	add.w	r1, r4, #12
 800e05e:	0092      	lsls	r2, r2, #2
 800e060:	300c      	adds	r0, #12
 800e062:	f7ff fd6b 	bl	800db3c <memcpy>
 800e066:	4621      	mov	r1, r4
 800e068:	9801      	ldr	r0, [sp, #4]
 800e06a:	f7fe f831 	bl	800c0d0 <_Bfree>
 800e06e:	464c      	mov	r4, r9
 800e070:	6923      	ldr	r3, [r4, #16]
 800e072:	1c5a      	adds	r2, r3, #1
 800e074:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e078:	6122      	str	r2, [r4, #16]
 800e07a:	2201      	movs	r2, #1
 800e07c:	615a      	str	r2, [r3, #20]
 800e07e:	e7be      	b.n	800dffe <__gethex+0x362>
 800e080:	6922      	ldr	r2, [r4, #16]
 800e082:	455a      	cmp	r2, fp
 800e084:	dd0b      	ble.n	800e09e <__gethex+0x402>
 800e086:	2101      	movs	r1, #1
 800e088:	4620      	mov	r0, r4
 800e08a:	f7ff fd9f 	bl	800dbcc <rshift>
 800e08e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e092:	3701      	adds	r7, #1
 800e094:	42bb      	cmp	r3, r7
 800e096:	f6ff aee0 	blt.w	800de5a <__gethex+0x1be>
 800e09a:	2501      	movs	r5, #1
 800e09c:	e7c2      	b.n	800e024 <__gethex+0x388>
 800e09e:	f016 061f 	ands.w	r6, r6, #31
 800e0a2:	d0fa      	beq.n	800e09a <__gethex+0x3fe>
 800e0a4:	4453      	add	r3, sl
 800e0a6:	f1c6 0620 	rsb	r6, r6, #32
 800e0aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e0ae:	f7fe f8c1 	bl	800c234 <__hi0bits>
 800e0b2:	42b0      	cmp	r0, r6
 800e0b4:	dbe7      	blt.n	800e086 <__gethex+0x3ea>
 800e0b6:	e7f0      	b.n	800e09a <__gethex+0x3fe>
 800e0b8:	0800eec5 	.word	0x0800eec5

0800e0bc <L_shift>:
 800e0bc:	f1c2 0208 	rsb	r2, r2, #8
 800e0c0:	0092      	lsls	r2, r2, #2
 800e0c2:	b570      	push	{r4, r5, r6, lr}
 800e0c4:	f1c2 0620 	rsb	r6, r2, #32
 800e0c8:	6843      	ldr	r3, [r0, #4]
 800e0ca:	6804      	ldr	r4, [r0, #0]
 800e0cc:	fa03 f506 	lsl.w	r5, r3, r6
 800e0d0:	432c      	orrs	r4, r5
 800e0d2:	40d3      	lsrs	r3, r2
 800e0d4:	6004      	str	r4, [r0, #0]
 800e0d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e0da:	4288      	cmp	r0, r1
 800e0dc:	d3f4      	bcc.n	800e0c8 <L_shift+0xc>
 800e0de:	bd70      	pop	{r4, r5, r6, pc}

0800e0e0 <__match>:
 800e0e0:	b530      	push	{r4, r5, lr}
 800e0e2:	6803      	ldr	r3, [r0, #0]
 800e0e4:	3301      	adds	r3, #1
 800e0e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0ea:	b914      	cbnz	r4, 800e0f2 <__match+0x12>
 800e0ec:	6003      	str	r3, [r0, #0]
 800e0ee:	2001      	movs	r0, #1
 800e0f0:	bd30      	pop	{r4, r5, pc}
 800e0f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e0fa:	2d19      	cmp	r5, #25
 800e0fc:	bf98      	it	ls
 800e0fe:	3220      	addls	r2, #32
 800e100:	42a2      	cmp	r2, r4
 800e102:	d0f0      	beq.n	800e0e6 <__match+0x6>
 800e104:	2000      	movs	r0, #0
 800e106:	e7f3      	b.n	800e0f0 <__match+0x10>

0800e108 <__hexnan>:
 800e108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e10c:	680b      	ldr	r3, [r1, #0]
 800e10e:	6801      	ldr	r1, [r0, #0]
 800e110:	115e      	asrs	r6, r3, #5
 800e112:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e116:	f013 031f 	ands.w	r3, r3, #31
 800e11a:	b087      	sub	sp, #28
 800e11c:	bf18      	it	ne
 800e11e:	3604      	addne	r6, #4
 800e120:	2500      	movs	r5, #0
 800e122:	1f37      	subs	r7, r6, #4
 800e124:	4682      	mov	sl, r0
 800e126:	4690      	mov	r8, r2
 800e128:	9301      	str	r3, [sp, #4]
 800e12a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e12e:	46b9      	mov	r9, r7
 800e130:	463c      	mov	r4, r7
 800e132:	9502      	str	r5, [sp, #8]
 800e134:	46ab      	mov	fp, r5
 800e136:	784a      	ldrb	r2, [r1, #1]
 800e138:	1c4b      	adds	r3, r1, #1
 800e13a:	9303      	str	r3, [sp, #12]
 800e13c:	b342      	cbz	r2, 800e190 <__hexnan+0x88>
 800e13e:	4610      	mov	r0, r2
 800e140:	9105      	str	r1, [sp, #20]
 800e142:	9204      	str	r2, [sp, #16]
 800e144:	f7ff fd94 	bl	800dc70 <__hexdig_fun>
 800e148:	2800      	cmp	r0, #0
 800e14a:	d151      	bne.n	800e1f0 <__hexnan+0xe8>
 800e14c:	9a04      	ldr	r2, [sp, #16]
 800e14e:	9905      	ldr	r1, [sp, #20]
 800e150:	2a20      	cmp	r2, #32
 800e152:	d818      	bhi.n	800e186 <__hexnan+0x7e>
 800e154:	9b02      	ldr	r3, [sp, #8]
 800e156:	459b      	cmp	fp, r3
 800e158:	dd13      	ble.n	800e182 <__hexnan+0x7a>
 800e15a:	454c      	cmp	r4, r9
 800e15c:	d206      	bcs.n	800e16c <__hexnan+0x64>
 800e15e:	2d07      	cmp	r5, #7
 800e160:	dc04      	bgt.n	800e16c <__hexnan+0x64>
 800e162:	462a      	mov	r2, r5
 800e164:	4649      	mov	r1, r9
 800e166:	4620      	mov	r0, r4
 800e168:	f7ff ffa8 	bl	800e0bc <L_shift>
 800e16c:	4544      	cmp	r4, r8
 800e16e:	d952      	bls.n	800e216 <__hexnan+0x10e>
 800e170:	2300      	movs	r3, #0
 800e172:	f1a4 0904 	sub.w	r9, r4, #4
 800e176:	f844 3c04 	str.w	r3, [r4, #-4]
 800e17a:	f8cd b008 	str.w	fp, [sp, #8]
 800e17e:	464c      	mov	r4, r9
 800e180:	461d      	mov	r5, r3
 800e182:	9903      	ldr	r1, [sp, #12]
 800e184:	e7d7      	b.n	800e136 <__hexnan+0x2e>
 800e186:	2a29      	cmp	r2, #41	@ 0x29
 800e188:	d157      	bne.n	800e23a <__hexnan+0x132>
 800e18a:	3102      	adds	r1, #2
 800e18c:	f8ca 1000 	str.w	r1, [sl]
 800e190:	f1bb 0f00 	cmp.w	fp, #0
 800e194:	d051      	beq.n	800e23a <__hexnan+0x132>
 800e196:	454c      	cmp	r4, r9
 800e198:	d206      	bcs.n	800e1a8 <__hexnan+0xa0>
 800e19a:	2d07      	cmp	r5, #7
 800e19c:	dc04      	bgt.n	800e1a8 <__hexnan+0xa0>
 800e19e:	462a      	mov	r2, r5
 800e1a0:	4649      	mov	r1, r9
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	f7ff ff8a 	bl	800e0bc <L_shift>
 800e1a8:	4544      	cmp	r4, r8
 800e1aa:	d936      	bls.n	800e21a <__hexnan+0x112>
 800e1ac:	f1a8 0204 	sub.w	r2, r8, #4
 800e1b0:	4623      	mov	r3, r4
 800e1b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e1b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e1ba:	429f      	cmp	r7, r3
 800e1bc:	d2f9      	bcs.n	800e1b2 <__hexnan+0xaa>
 800e1be:	1b3b      	subs	r3, r7, r4
 800e1c0:	f023 0303 	bic.w	r3, r3, #3
 800e1c4:	3304      	adds	r3, #4
 800e1c6:	3401      	adds	r4, #1
 800e1c8:	3e03      	subs	r6, #3
 800e1ca:	42b4      	cmp	r4, r6
 800e1cc:	bf88      	it	hi
 800e1ce:	2304      	movhi	r3, #4
 800e1d0:	4443      	add	r3, r8
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	f843 2b04 	str.w	r2, [r3], #4
 800e1d8:	429f      	cmp	r7, r3
 800e1da:	d2fb      	bcs.n	800e1d4 <__hexnan+0xcc>
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	b91b      	cbnz	r3, 800e1e8 <__hexnan+0xe0>
 800e1e0:	4547      	cmp	r7, r8
 800e1e2:	d128      	bne.n	800e236 <__hexnan+0x12e>
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	603b      	str	r3, [r7, #0]
 800e1e8:	2005      	movs	r0, #5
 800e1ea:	b007      	add	sp, #28
 800e1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1f0:	3501      	adds	r5, #1
 800e1f2:	2d08      	cmp	r5, #8
 800e1f4:	f10b 0b01 	add.w	fp, fp, #1
 800e1f8:	dd06      	ble.n	800e208 <__hexnan+0x100>
 800e1fa:	4544      	cmp	r4, r8
 800e1fc:	d9c1      	bls.n	800e182 <__hexnan+0x7a>
 800e1fe:	2300      	movs	r3, #0
 800e200:	f844 3c04 	str.w	r3, [r4, #-4]
 800e204:	2501      	movs	r5, #1
 800e206:	3c04      	subs	r4, #4
 800e208:	6822      	ldr	r2, [r4, #0]
 800e20a:	f000 000f 	and.w	r0, r0, #15
 800e20e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e212:	6020      	str	r0, [r4, #0]
 800e214:	e7b5      	b.n	800e182 <__hexnan+0x7a>
 800e216:	2508      	movs	r5, #8
 800e218:	e7b3      	b.n	800e182 <__hexnan+0x7a>
 800e21a:	9b01      	ldr	r3, [sp, #4]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d0dd      	beq.n	800e1dc <__hexnan+0xd4>
 800e220:	f1c3 0320 	rsb	r3, r3, #32
 800e224:	f04f 32ff 	mov.w	r2, #4294967295
 800e228:	40da      	lsrs	r2, r3
 800e22a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e22e:	4013      	ands	r3, r2
 800e230:	f846 3c04 	str.w	r3, [r6, #-4]
 800e234:	e7d2      	b.n	800e1dc <__hexnan+0xd4>
 800e236:	3f04      	subs	r7, #4
 800e238:	e7d0      	b.n	800e1dc <__hexnan+0xd4>
 800e23a:	2004      	movs	r0, #4
 800e23c:	e7d5      	b.n	800e1ea <__hexnan+0xe2>

0800e23e <__ascii_mbtowc>:
 800e23e:	b082      	sub	sp, #8
 800e240:	b901      	cbnz	r1, 800e244 <__ascii_mbtowc+0x6>
 800e242:	a901      	add	r1, sp, #4
 800e244:	b142      	cbz	r2, 800e258 <__ascii_mbtowc+0x1a>
 800e246:	b14b      	cbz	r3, 800e25c <__ascii_mbtowc+0x1e>
 800e248:	7813      	ldrb	r3, [r2, #0]
 800e24a:	600b      	str	r3, [r1, #0]
 800e24c:	7812      	ldrb	r2, [r2, #0]
 800e24e:	1e10      	subs	r0, r2, #0
 800e250:	bf18      	it	ne
 800e252:	2001      	movne	r0, #1
 800e254:	b002      	add	sp, #8
 800e256:	4770      	bx	lr
 800e258:	4610      	mov	r0, r2
 800e25a:	e7fb      	b.n	800e254 <__ascii_mbtowc+0x16>
 800e25c:	f06f 0001 	mvn.w	r0, #1
 800e260:	e7f8      	b.n	800e254 <__ascii_mbtowc+0x16>

0800e262 <_realloc_r>:
 800e262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e266:	4680      	mov	r8, r0
 800e268:	4615      	mov	r5, r2
 800e26a:	460c      	mov	r4, r1
 800e26c:	b921      	cbnz	r1, 800e278 <_realloc_r+0x16>
 800e26e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e272:	4611      	mov	r1, r2
 800e274:	f7fd be60 	b.w	800bf38 <_malloc_r>
 800e278:	b92a      	cbnz	r2, 800e286 <_realloc_r+0x24>
 800e27a:	f7fd fde9 	bl	800be50 <_free_r>
 800e27e:	2400      	movs	r4, #0
 800e280:	4620      	mov	r0, r4
 800e282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e286:	f000 f840 	bl	800e30a <_malloc_usable_size_r>
 800e28a:	4285      	cmp	r5, r0
 800e28c:	4606      	mov	r6, r0
 800e28e:	d802      	bhi.n	800e296 <_realloc_r+0x34>
 800e290:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e294:	d8f4      	bhi.n	800e280 <_realloc_r+0x1e>
 800e296:	4629      	mov	r1, r5
 800e298:	4640      	mov	r0, r8
 800e29a:	f7fd fe4d 	bl	800bf38 <_malloc_r>
 800e29e:	4607      	mov	r7, r0
 800e2a0:	2800      	cmp	r0, #0
 800e2a2:	d0ec      	beq.n	800e27e <_realloc_r+0x1c>
 800e2a4:	42b5      	cmp	r5, r6
 800e2a6:	462a      	mov	r2, r5
 800e2a8:	4621      	mov	r1, r4
 800e2aa:	bf28      	it	cs
 800e2ac:	4632      	movcs	r2, r6
 800e2ae:	f7ff fc45 	bl	800db3c <memcpy>
 800e2b2:	4621      	mov	r1, r4
 800e2b4:	4640      	mov	r0, r8
 800e2b6:	f7fd fdcb 	bl	800be50 <_free_r>
 800e2ba:	463c      	mov	r4, r7
 800e2bc:	e7e0      	b.n	800e280 <_realloc_r+0x1e>

0800e2be <__ascii_wctomb>:
 800e2be:	4603      	mov	r3, r0
 800e2c0:	4608      	mov	r0, r1
 800e2c2:	b141      	cbz	r1, 800e2d6 <__ascii_wctomb+0x18>
 800e2c4:	2aff      	cmp	r2, #255	@ 0xff
 800e2c6:	d904      	bls.n	800e2d2 <__ascii_wctomb+0x14>
 800e2c8:	228a      	movs	r2, #138	@ 0x8a
 800e2ca:	601a      	str	r2, [r3, #0]
 800e2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d0:	4770      	bx	lr
 800e2d2:	700a      	strb	r2, [r1, #0]
 800e2d4:	2001      	movs	r0, #1
 800e2d6:	4770      	bx	lr

0800e2d8 <fiprintf>:
 800e2d8:	b40e      	push	{r1, r2, r3}
 800e2da:	b503      	push	{r0, r1, lr}
 800e2dc:	4601      	mov	r1, r0
 800e2de:	ab03      	add	r3, sp, #12
 800e2e0:	4805      	ldr	r0, [pc, #20]	@ (800e2f8 <fiprintf+0x20>)
 800e2e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2e6:	6800      	ldr	r0, [r0, #0]
 800e2e8:	9301      	str	r3, [sp, #4]
 800e2ea:	f000 f83f 	bl	800e36c <_vfiprintf_r>
 800e2ee:	b002      	add	sp, #8
 800e2f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2f4:	b003      	add	sp, #12
 800e2f6:	4770      	bx	lr
 800e2f8:	2000010c 	.word	0x2000010c

0800e2fc <abort>:
 800e2fc:	b508      	push	{r3, lr}
 800e2fe:	2006      	movs	r0, #6
 800e300:	f000 fa08 	bl	800e714 <raise>
 800e304:	2001      	movs	r0, #1
 800e306:	f7f3 fb15 	bl	8001934 <_exit>

0800e30a <_malloc_usable_size_r>:
 800e30a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e30e:	1f18      	subs	r0, r3, #4
 800e310:	2b00      	cmp	r3, #0
 800e312:	bfbc      	itt	lt
 800e314:	580b      	ldrlt	r3, [r1, r0]
 800e316:	18c0      	addlt	r0, r0, r3
 800e318:	4770      	bx	lr

0800e31a <__sfputc_r>:
 800e31a:	6893      	ldr	r3, [r2, #8]
 800e31c:	3b01      	subs	r3, #1
 800e31e:	2b00      	cmp	r3, #0
 800e320:	b410      	push	{r4}
 800e322:	6093      	str	r3, [r2, #8]
 800e324:	da08      	bge.n	800e338 <__sfputc_r+0x1e>
 800e326:	6994      	ldr	r4, [r2, #24]
 800e328:	42a3      	cmp	r3, r4
 800e32a:	db01      	blt.n	800e330 <__sfputc_r+0x16>
 800e32c:	290a      	cmp	r1, #10
 800e32e:	d103      	bne.n	800e338 <__sfputc_r+0x1e>
 800e330:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e334:	f000 b932 	b.w	800e59c <__swbuf_r>
 800e338:	6813      	ldr	r3, [r2, #0]
 800e33a:	1c58      	adds	r0, r3, #1
 800e33c:	6010      	str	r0, [r2, #0]
 800e33e:	7019      	strb	r1, [r3, #0]
 800e340:	4608      	mov	r0, r1
 800e342:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e346:	4770      	bx	lr

0800e348 <__sfputs_r>:
 800e348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e34a:	4606      	mov	r6, r0
 800e34c:	460f      	mov	r7, r1
 800e34e:	4614      	mov	r4, r2
 800e350:	18d5      	adds	r5, r2, r3
 800e352:	42ac      	cmp	r4, r5
 800e354:	d101      	bne.n	800e35a <__sfputs_r+0x12>
 800e356:	2000      	movs	r0, #0
 800e358:	e007      	b.n	800e36a <__sfputs_r+0x22>
 800e35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e35e:	463a      	mov	r2, r7
 800e360:	4630      	mov	r0, r6
 800e362:	f7ff ffda 	bl	800e31a <__sfputc_r>
 800e366:	1c43      	adds	r3, r0, #1
 800e368:	d1f3      	bne.n	800e352 <__sfputs_r+0xa>
 800e36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e36c <_vfiprintf_r>:
 800e36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e370:	460d      	mov	r5, r1
 800e372:	b09d      	sub	sp, #116	@ 0x74
 800e374:	4614      	mov	r4, r2
 800e376:	4698      	mov	r8, r3
 800e378:	4606      	mov	r6, r0
 800e37a:	b118      	cbz	r0, 800e384 <_vfiprintf_r+0x18>
 800e37c:	6a03      	ldr	r3, [r0, #32]
 800e37e:	b90b      	cbnz	r3, 800e384 <_vfiprintf_r+0x18>
 800e380:	f7fc fdc6 	bl	800af10 <__sinit>
 800e384:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e386:	07d9      	lsls	r1, r3, #31
 800e388:	d405      	bmi.n	800e396 <_vfiprintf_r+0x2a>
 800e38a:	89ab      	ldrh	r3, [r5, #12]
 800e38c:	059a      	lsls	r2, r3, #22
 800e38e:	d402      	bmi.n	800e396 <_vfiprintf_r+0x2a>
 800e390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e392:	f7fc ff08 	bl	800b1a6 <__retarget_lock_acquire_recursive>
 800e396:	89ab      	ldrh	r3, [r5, #12]
 800e398:	071b      	lsls	r3, r3, #28
 800e39a:	d501      	bpl.n	800e3a0 <_vfiprintf_r+0x34>
 800e39c:	692b      	ldr	r3, [r5, #16]
 800e39e:	b99b      	cbnz	r3, 800e3c8 <_vfiprintf_r+0x5c>
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	4630      	mov	r0, r6
 800e3a4:	f000 f938 	bl	800e618 <__swsetup_r>
 800e3a8:	b170      	cbz	r0, 800e3c8 <_vfiprintf_r+0x5c>
 800e3aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3ac:	07dc      	lsls	r4, r3, #31
 800e3ae:	d504      	bpl.n	800e3ba <_vfiprintf_r+0x4e>
 800e3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e3b4:	b01d      	add	sp, #116	@ 0x74
 800e3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ba:	89ab      	ldrh	r3, [r5, #12]
 800e3bc:	0598      	lsls	r0, r3, #22
 800e3be:	d4f7      	bmi.n	800e3b0 <_vfiprintf_r+0x44>
 800e3c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3c2:	f7fc fef1 	bl	800b1a8 <__retarget_lock_release_recursive>
 800e3c6:	e7f3      	b.n	800e3b0 <_vfiprintf_r+0x44>
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3cc:	2320      	movs	r3, #32
 800e3ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e3d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3d6:	2330      	movs	r3, #48	@ 0x30
 800e3d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e588 <_vfiprintf_r+0x21c>
 800e3dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e3e0:	f04f 0901 	mov.w	r9, #1
 800e3e4:	4623      	mov	r3, r4
 800e3e6:	469a      	mov	sl, r3
 800e3e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3ec:	b10a      	cbz	r2, 800e3f2 <_vfiprintf_r+0x86>
 800e3ee:	2a25      	cmp	r2, #37	@ 0x25
 800e3f0:	d1f9      	bne.n	800e3e6 <_vfiprintf_r+0x7a>
 800e3f2:	ebba 0b04 	subs.w	fp, sl, r4
 800e3f6:	d00b      	beq.n	800e410 <_vfiprintf_r+0xa4>
 800e3f8:	465b      	mov	r3, fp
 800e3fa:	4622      	mov	r2, r4
 800e3fc:	4629      	mov	r1, r5
 800e3fe:	4630      	mov	r0, r6
 800e400:	f7ff ffa2 	bl	800e348 <__sfputs_r>
 800e404:	3001      	adds	r0, #1
 800e406:	f000 80a7 	beq.w	800e558 <_vfiprintf_r+0x1ec>
 800e40a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e40c:	445a      	add	r2, fp
 800e40e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e410:	f89a 3000 	ldrb.w	r3, [sl]
 800e414:	2b00      	cmp	r3, #0
 800e416:	f000 809f 	beq.w	800e558 <_vfiprintf_r+0x1ec>
 800e41a:	2300      	movs	r3, #0
 800e41c:	f04f 32ff 	mov.w	r2, #4294967295
 800e420:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e424:	f10a 0a01 	add.w	sl, sl, #1
 800e428:	9304      	str	r3, [sp, #16]
 800e42a:	9307      	str	r3, [sp, #28]
 800e42c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e430:	931a      	str	r3, [sp, #104]	@ 0x68
 800e432:	4654      	mov	r4, sl
 800e434:	2205      	movs	r2, #5
 800e436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e43a:	4853      	ldr	r0, [pc, #332]	@ (800e588 <_vfiprintf_r+0x21c>)
 800e43c:	f7f1 fed0 	bl	80001e0 <memchr>
 800e440:	9a04      	ldr	r2, [sp, #16]
 800e442:	b9d8      	cbnz	r0, 800e47c <_vfiprintf_r+0x110>
 800e444:	06d1      	lsls	r1, r2, #27
 800e446:	bf44      	itt	mi
 800e448:	2320      	movmi	r3, #32
 800e44a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e44e:	0713      	lsls	r3, r2, #28
 800e450:	bf44      	itt	mi
 800e452:	232b      	movmi	r3, #43	@ 0x2b
 800e454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e458:	f89a 3000 	ldrb.w	r3, [sl]
 800e45c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e45e:	d015      	beq.n	800e48c <_vfiprintf_r+0x120>
 800e460:	9a07      	ldr	r2, [sp, #28]
 800e462:	4654      	mov	r4, sl
 800e464:	2000      	movs	r0, #0
 800e466:	f04f 0c0a 	mov.w	ip, #10
 800e46a:	4621      	mov	r1, r4
 800e46c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e470:	3b30      	subs	r3, #48	@ 0x30
 800e472:	2b09      	cmp	r3, #9
 800e474:	d94b      	bls.n	800e50e <_vfiprintf_r+0x1a2>
 800e476:	b1b0      	cbz	r0, 800e4a6 <_vfiprintf_r+0x13a>
 800e478:	9207      	str	r2, [sp, #28]
 800e47a:	e014      	b.n	800e4a6 <_vfiprintf_r+0x13a>
 800e47c:	eba0 0308 	sub.w	r3, r0, r8
 800e480:	fa09 f303 	lsl.w	r3, r9, r3
 800e484:	4313      	orrs	r3, r2
 800e486:	9304      	str	r3, [sp, #16]
 800e488:	46a2      	mov	sl, r4
 800e48a:	e7d2      	b.n	800e432 <_vfiprintf_r+0xc6>
 800e48c:	9b03      	ldr	r3, [sp, #12]
 800e48e:	1d19      	adds	r1, r3, #4
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	9103      	str	r1, [sp, #12]
 800e494:	2b00      	cmp	r3, #0
 800e496:	bfbb      	ittet	lt
 800e498:	425b      	neglt	r3, r3
 800e49a:	f042 0202 	orrlt.w	r2, r2, #2
 800e49e:	9307      	strge	r3, [sp, #28]
 800e4a0:	9307      	strlt	r3, [sp, #28]
 800e4a2:	bfb8      	it	lt
 800e4a4:	9204      	strlt	r2, [sp, #16]
 800e4a6:	7823      	ldrb	r3, [r4, #0]
 800e4a8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e4aa:	d10a      	bne.n	800e4c2 <_vfiprintf_r+0x156>
 800e4ac:	7863      	ldrb	r3, [r4, #1]
 800e4ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4b0:	d132      	bne.n	800e518 <_vfiprintf_r+0x1ac>
 800e4b2:	9b03      	ldr	r3, [sp, #12]
 800e4b4:	1d1a      	adds	r2, r3, #4
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	9203      	str	r2, [sp, #12]
 800e4ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e4be:	3402      	adds	r4, #2
 800e4c0:	9305      	str	r3, [sp, #20]
 800e4c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e598 <_vfiprintf_r+0x22c>
 800e4c6:	7821      	ldrb	r1, [r4, #0]
 800e4c8:	2203      	movs	r2, #3
 800e4ca:	4650      	mov	r0, sl
 800e4cc:	f7f1 fe88 	bl	80001e0 <memchr>
 800e4d0:	b138      	cbz	r0, 800e4e2 <_vfiprintf_r+0x176>
 800e4d2:	9b04      	ldr	r3, [sp, #16]
 800e4d4:	eba0 000a 	sub.w	r0, r0, sl
 800e4d8:	2240      	movs	r2, #64	@ 0x40
 800e4da:	4082      	lsls	r2, r0
 800e4dc:	4313      	orrs	r3, r2
 800e4de:	3401      	adds	r4, #1
 800e4e0:	9304      	str	r3, [sp, #16]
 800e4e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4e6:	4829      	ldr	r0, [pc, #164]	@ (800e58c <_vfiprintf_r+0x220>)
 800e4e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e4ec:	2206      	movs	r2, #6
 800e4ee:	f7f1 fe77 	bl	80001e0 <memchr>
 800e4f2:	2800      	cmp	r0, #0
 800e4f4:	d03f      	beq.n	800e576 <_vfiprintf_r+0x20a>
 800e4f6:	4b26      	ldr	r3, [pc, #152]	@ (800e590 <_vfiprintf_r+0x224>)
 800e4f8:	bb1b      	cbnz	r3, 800e542 <_vfiprintf_r+0x1d6>
 800e4fa:	9b03      	ldr	r3, [sp, #12]
 800e4fc:	3307      	adds	r3, #7
 800e4fe:	f023 0307 	bic.w	r3, r3, #7
 800e502:	3308      	adds	r3, #8
 800e504:	9303      	str	r3, [sp, #12]
 800e506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e508:	443b      	add	r3, r7
 800e50a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e50c:	e76a      	b.n	800e3e4 <_vfiprintf_r+0x78>
 800e50e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e512:	460c      	mov	r4, r1
 800e514:	2001      	movs	r0, #1
 800e516:	e7a8      	b.n	800e46a <_vfiprintf_r+0xfe>
 800e518:	2300      	movs	r3, #0
 800e51a:	3401      	adds	r4, #1
 800e51c:	9305      	str	r3, [sp, #20]
 800e51e:	4619      	mov	r1, r3
 800e520:	f04f 0c0a 	mov.w	ip, #10
 800e524:	4620      	mov	r0, r4
 800e526:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e52a:	3a30      	subs	r2, #48	@ 0x30
 800e52c:	2a09      	cmp	r2, #9
 800e52e:	d903      	bls.n	800e538 <_vfiprintf_r+0x1cc>
 800e530:	2b00      	cmp	r3, #0
 800e532:	d0c6      	beq.n	800e4c2 <_vfiprintf_r+0x156>
 800e534:	9105      	str	r1, [sp, #20]
 800e536:	e7c4      	b.n	800e4c2 <_vfiprintf_r+0x156>
 800e538:	fb0c 2101 	mla	r1, ip, r1, r2
 800e53c:	4604      	mov	r4, r0
 800e53e:	2301      	movs	r3, #1
 800e540:	e7f0      	b.n	800e524 <_vfiprintf_r+0x1b8>
 800e542:	ab03      	add	r3, sp, #12
 800e544:	9300      	str	r3, [sp, #0]
 800e546:	462a      	mov	r2, r5
 800e548:	4b12      	ldr	r3, [pc, #72]	@ (800e594 <_vfiprintf_r+0x228>)
 800e54a:	a904      	add	r1, sp, #16
 800e54c:	4630      	mov	r0, r6
 800e54e:	f7fb fe87 	bl	800a260 <_printf_float>
 800e552:	4607      	mov	r7, r0
 800e554:	1c78      	adds	r0, r7, #1
 800e556:	d1d6      	bne.n	800e506 <_vfiprintf_r+0x19a>
 800e558:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e55a:	07d9      	lsls	r1, r3, #31
 800e55c:	d405      	bmi.n	800e56a <_vfiprintf_r+0x1fe>
 800e55e:	89ab      	ldrh	r3, [r5, #12]
 800e560:	059a      	lsls	r2, r3, #22
 800e562:	d402      	bmi.n	800e56a <_vfiprintf_r+0x1fe>
 800e564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e566:	f7fc fe1f 	bl	800b1a8 <__retarget_lock_release_recursive>
 800e56a:	89ab      	ldrh	r3, [r5, #12]
 800e56c:	065b      	lsls	r3, r3, #25
 800e56e:	f53f af1f 	bmi.w	800e3b0 <_vfiprintf_r+0x44>
 800e572:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e574:	e71e      	b.n	800e3b4 <_vfiprintf_r+0x48>
 800e576:	ab03      	add	r3, sp, #12
 800e578:	9300      	str	r3, [sp, #0]
 800e57a:	462a      	mov	r2, r5
 800e57c:	4b05      	ldr	r3, [pc, #20]	@ (800e594 <_vfiprintf_r+0x228>)
 800e57e:	a904      	add	r1, sp, #16
 800e580:	4630      	mov	r0, r6
 800e582:	f7fc f905 	bl	800a790 <_printf_i>
 800e586:	e7e4      	b.n	800e552 <_vfiprintf_r+0x1e6>
 800e588:	0800f189 	.word	0x0800f189
 800e58c:	0800f193 	.word	0x0800f193
 800e590:	0800a261 	.word	0x0800a261
 800e594:	0800e349 	.word	0x0800e349
 800e598:	0800f18f 	.word	0x0800f18f

0800e59c <__swbuf_r>:
 800e59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e59e:	460e      	mov	r6, r1
 800e5a0:	4614      	mov	r4, r2
 800e5a2:	4605      	mov	r5, r0
 800e5a4:	b118      	cbz	r0, 800e5ae <__swbuf_r+0x12>
 800e5a6:	6a03      	ldr	r3, [r0, #32]
 800e5a8:	b90b      	cbnz	r3, 800e5ae <__swbuf_r+0x12>
 800e5aa:	f7fc fcb1 	bl	800af10 <__sinit>
 800e5ae:	69a3      	ldr	r3, [r4, #24]
 800e5b0:	60a3      	str	r3, [r4, #8]
 800e5b2:	89a3      	ldrh	r3, [r4, #12]
 800e5b4:	071a      	lsls	r2, r3, #28
 800e5b6:	d501      	bpl.n	800e5bc <__swbuf_r+0x20>
 800e5b8:	6923      	ldr	r3, [r4, #16]
 800e5ba:	b943      	cbnz	r3, 800e5ce <__swbuf_r+0x32>
 800e5bc:	4621      	mov	r1, r4
 800e5be:	4628      	mov	r0, r5
 800e5c0:	f000 f82a 	bl	800e618 <__swsetup_r>
 800e5c4:	b118      	cbz	r0, 800e5ce <__swbuf_r+0x32>
 800e5c6:	f04f 37ff 	mov.w	r7, #4294967295
 800e5ca:	4638      	mov	r0, r7
 800e5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5ce:	6823      	ldr	r3, [r4, #0]
 800e5d0:	6922      	ldr	r2, [r4, #16]
 800e5d2:	1a98      	subs	r0, r3, r2
 800e5d4:	6963      	ldr	r3, [r4, #20]
 800e5d6:	b2f6      	uxtb	r6, r6
 800e5d8:	4283      	cmp	r3, r0
 800e5da:	4637      	mov	r7, r6
 800e5dc:	dc05      	bgt.n	800e5ea <__swbuf_r+0x4e>
 800e5de:	4621      	mov	r1, r4
 800e5e0:	4628      	mov	r0, r5
 800e5e2:	f7ff fa47 	bl	800da74 <_fflush_r>
 800e5e6:	2800      	cmp	r0, #0
 800e5e8:	d1ed      	bne.n	800e5c6 <__swbuf_r+0x2a>
 800e5ea:	68a3      	ldr	r3, [r4, #8]
 800e5ec:	3b01      	subs	r3, #1
 800e5ee:	60a3      	str	r3, [r4, #8]
 800e5f0:	6823      	ldr	r3, [r4, #0]
 800e5f2:	1c5a      	adds	r2, r3, #1
 800e5f4:	6022      	str	r2, [r4, #0]
 800e5f6:	701e      	strb	r6, [r3, #0]
 800e5f8:	6962      	ldr	r2, [r4, #20]
 800e5fa:	1c43      	adds	r3, r0, #1
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d004      	beq.n	800e60a <__swbuf_r+0x6e>
 800e600:	89a3      	ldrh	r3, [r4, #12]
 800e602:	07db      	lsls	r3, r3, #31
 800e604:	d5e1      	bpl.n	800e5ca <__swbuf_r+0x2e>
 800e606:	2e0a      	cmp	r6, #10
 800e608:	d1df      	bne.n	800e5ca <__swbuf_r+0x2e>
 800e60a:	4621      	mov	r1, r4
 800e60c:	4628      	mov	r0, r5
 800e60e:	f7ff fa31 	bl	800da74 <_fflush_r>
 800e612:	2800      	cmp	r0, #0
 800e614:	d0d9      	beq.n	800e5ca <__swbuf_r+0x2e>
 800e616:	e7d6      	b.n	800e5c6 <__swbuf_r+0x2a>

0800e618 <__swsetup_r>:
 800e618:	b538      	push	{r3, r4, r5, lr}
 800e61a:	4b29      	ldr	r3, [pc, #164]	@ (800e6c0 <__swsetup_r+0xa8>)
 800e61c:	4605      	mov	r5, r0
 800e61e:	6818      	ldr	r0, [r3, #0]
 800e620:	460c      	mov	r4, r1
 800e622:	b118      	cbz	r0, 800e62c <__swsetup_r+0x14>
 800e624:	6a03      	ldr	r3, [r0, #32]
 800e626:	b90b      	cbnz	r3, 800e62c <__swsetup_r+0x14>
 800e628:	f7fc fc72 	bl	800af10 <__sinit>
 800e62c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e630:	0719      	lsls	r1, r3, #28
 800e632:	d422      	bmi.n	800e67a <__swsetup_r+0x62>
 800e634:	06da      	lsls	r2, r3, #27
 800e636:	d407      	bmi.n	800e648 <__swsetup_r+0x30>
 800e638:	2209      	movs	r2, #9
 800e63a:	602a      	str	r2, [r5, #0]
 800e63c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e640:	81a3      	strh	r3, [r4, #12]
 800e642:	f04f 30ff 	mov.w	r0, #4294967295
 800e646:	e033      	b.n	800e6b0 <__swsetup_r+0x98>
 800e648:	0758      	lsls	r0, r3, #29
 800e64a:	d512      	bpl.n	800e672 <__swsetup_r+0x5a>
 800e64c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e64e:	b141      	cbz	r1, 800e662 <__swsetup_r+0x4a>
 800e650:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e654:	4299      	cmp	r1, r3
 800e656:	d002      	beq.n	800e65e <__swsetup_r+0x46>
 800e658:	4628      	mov	r0, r5
 800e65a:	f7fd fbf9 	bl	800be50 <_free_r>
 800e65e:	2300      	movs	r3, #0
 800e660:	6363      	str	r3, [r4, #52]	@ 0x34
 800e662:	89a3      	ldrh	r3, [r4, #12]
 800e664:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e668:	81a3      	strh	r3, [r4, #12]
 800e66a:	2300      	movs	r3, #0
 800e66c:	6063      	str	r3, [r4, #4]
 800e66e:	6923      	ldr	r3, [r4, #16]
 800e670:	6023      	str	r3, [r4, #0]
 800e672:	89a3      	ldrh	r3, [r4, #12]
 800e674:	f043 0308 	orr.w	r3, r3, #8
 800e678:	81a3      	strh	r3, [r4, #12]
 800e67a:	6923      	ldr	r3, [r4, #16]
 800e67c:	b94b      	cbnz	r3, 800e692 <__swsetup_r+0x7a>
 800e67e:	89a3      	ldrh	r3, [r4, #12]
 800e680:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e688:	d003      	beq.n	800e692 <__swsetup_r+0x7a>
 800e68a:	4621      	mov	r1, r4
 800e68c:	4628      	mov	r0, r5
 800e68e:	f000 f883 	bl	800e798 <__smakebuf_r>
 800e692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e696:	f013 0201 	ands.w	r2, r3, #1
 800e69a:	d00a      	beq.n	800e6b2 <__swsetup_r+0x9a>
 800e69c:	2200      	movs	r2, #0
 800e69e:	60a2      	str	r2, [r4, #8]
 800e6a0:	6962      	ldr	r2, [r4, #20]
 800e6a2:	4252      	negs	r2, r2
 800e6a4:	61a2      	str	r2, [r4, #24]
 800e6a6:	6922      	ldr	r2, [r4, #16]
 800e6a8:	b942      	cbnz	r2, 800e6bc <__swsetup_r+0xa4>
 800e6aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e6ae:	d1c5      	bne.n	800e63c <__swsetup_r+0x24>
 800e6b0:	bd38      	pop	{r3, r4, r5, pc}
 800e6b2:	0799      	lsls	r1, r3, #30
 800e6b4:	bf58      	it	pl
 800e6b6:	6962      	ldrpl	r2, [r4, #20]
 800e6b8:	60a2      	str	r2, [r4, #8]
 800e6ba:	e7f4      	b.n	800e6a6 <__swsetup_r+0x8e>
 800e6bc:	2000      	movs	r0, #0
 800e6be:	e7f7      	b.n	800e6b0 <__swsetup_r+0x98>
 800e6c0:	2000010c 	.word	0x2000010c

0800e6c4 <_raise_r>:
 800e6c4:	291f      	cmp	r1, #31
 800e6c6:	b538      	push	{r3, r4, r5, lr}
 800e6c8:	4605      	mov	r5, r0
 800e6ca:	460c      	mov	r4, r1
 800e6cc:	d904      	bls.n	800e6d8 <_raise_r+0x14>
 800e6ce:	2316      	movs	r3, #22
 800e6d0:	6003      	str	r3, [r0, #0]
 800e6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d6:	bd38      	pop	{r3, r4, r5, pc}
 800e6d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e6da:	b112      	cbz	r2, 800e6e2 <_raise_r+0x1e>
 800e6dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6e0:	b94b      	cbnz	r3, 800e6f6 <_raise_r+0x32>
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	f000 f830 	bl	800e748 <_getpid_r>
 800e6e8:	4622      	mov	r2, r4
 800e6ea:	4601      	mov	r1, r0
 800e6ec:	4628      	mov	r0, r5
 800e6ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6f2:	f000 b817 	b.w	800e724 <_kill_r>
 800e6f6:	2b01      	cmp	r3, #1
 800e6f8:	d00a      	beq.n	800e710 <_raise_r+0x4c>
 800e6fa:	1c59      	adds	r1, r3, #1
 800e6fc:	d103      	bne.n	800e706 <_raise_r+0x42>
 800e6fe:	2316      	movs	r3, #22
 800e700:	6003      	str	r3, [r0, #0]
 800e702:	2001      	movs	r0, #1
 800e704:	e7e7      	b.n	800e6d6 <_raise_r+0x12>
 800e706:	2100      	movs	r1, #0
 800e708:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e70c:	4620      	mov	r0, r4
 800e70e:	4798      	blx	r3
 800e710:	2000      	movs	r0, #0
 800e712:	e7e0      	b.n	800e6d6 <_raise_r+0x12>

0800e714 <raise>:
 800e714:	4b02      	ldr	r3, [pc, #8]	@ (800e720 <raise+0xc>)
 800e716:	4601      	mov	r1, r0
 800e718:	6818      	ldr	r0, [r3, #0]
 800e71a:	f7ff bfd3 	b.w	800e6c4 <_raise_r>
 800e71e:	bf00      	nop
 800e720:	2000010c 	.word	0x2000010c

0800e724 <_kill_r>:
 800e724:	b538      	push	{r3, r4, r5, lr}
 800e726:	4d07      	ldr	r5, [pc, #28]	@ (800e744 <_kill_r+0x20>)
 800e728:	2300      	movs	r3, #0
 800e72a:	4604      	mov	r4, r0
 800e72c:	4608      	mov	r0, r1
 800e72e:	4611      	mov	r1, r2
 800e730:	602b      	str	r3, [r5, #0]
 800e732:	f7f3 f8ef 	bl	8001914 <_kill>
 800e736:	1c43      	adds	r3, r0, #1
 800e738:	d102      	bne.n	800e740 <_kill_r+0x1c>
 800e73a:	682b      	ldr	r3, [r5, #0]
 800e73c:	b103      	cbz	r3, 800e740 <_kill_r+0x1c>
 800e73e:	6023      	str	r3, [r4, #0]
 800e740:	bd38      	pop	{r3, r4, r5, pc}
 800e742:	bf00      	nop
 800e744:	200020fc 	.word	0x200020fc

0800e748 <_getpid_r>:
 800e748:	f7f3 b8dc 	b.w	8001904 <_getpid>

0800e74c <__swhatbuf_r>:
 800e74c:	b570      	push	{r4, r5, r6, lr}
 800e74e:	460c      	mov	r4, r1
 800e750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e754:	2900      	cmp	r1, #0
 800e756:	b096      	sub	sp, #88	@ 0x58
 800e758:	4615      	mov	r5, r2
 800e75a:	461e      	mov	r6, r3
 800e75c:	da0d      	bge.n	800e77a <__swhatbuf_r+0x2e>
 800e75e:	89a3      	ldrh	r3, [r4, #12]
 800e760:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e764:	f04f 0100 	mov.w	r1, #0
 800e768:	bf14      	ite	ne
 800e76a:	2340      	movne	r3, #64	@ 0x40
 800e76c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e770:	2000      	movs	r0, #0
 800e772:	6031      	str	r1, [r6, #0]
 800e774:	602b      	str	r3, [r5, #0]
 800e776:	b016      	add	sp, #88	@ 0x58
 800e778:	bd70      	pop	{r4, r5, r6, pc}
 800e77a:	466a      	mov	r2, sp
 800e77c:	f000 f848 	bl	800e810 <_fstat_r>
 800e780:	2800      	cmp	r0, #0
 800e782:	dbec      	blt.n	800e75e <__swhatbuf_r+0x12>
 800e784:	9901      	ldr	r1, [sp, #4]
 800e786:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e78a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e78e:	4259      	negs	r1, r3
 800e790:	4159      	adcs	r1, r3
 800e792:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e796:	e7eb      	b.n	800e770 <__swhatbuf_r+0x24>

0800e798 <__smakebuf_r>:
 800e798:	898b      	ldrh	r3, [r1, #12]
 800e79a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e79c:	079d      	lsls	r5, r3, #30
 800e79e:	4606      	mov	r6, r0
 800e7a0:	460c      	mov	r4, r1
 800e7a2:	d507      	bpl.n	800e7b4 <__smakebuf_r+0x1c>
 800e7a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e7a8:	6023      	str	r3, [r4, #0]
 800e7aa:	6123      	str	r3, [r4, #16]
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	6163      	str	r3, [r4, #20]
 800e7b0:	b003      	add	sp, #12
 800e7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7b4:	ab01      	add	r3, sp, #4
 800e7b6:	466a      	mov	r2, sp
 800e7b8:	f7ff ffc8 	bl	800e74c <__swhatbuf_r>
 800e7bc:	9f00      	ldr	r7, [sp, #0]
 800e7be:	4605      	mov	r5, r0
 800e7c0:	4639      	mov	r1, r7
 800e7c2:	4630      	mov	r0, r6
 800e7c4:	f7fd fbb8 	bl	800bf38 <_malloc_r>
 800e7c8:	b948      	cbnz	r0, 800e7de <__smakebuf_r+0x46>
 800e7ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7ce:	059a      	lsls	r2, r3, #22
 800e7d0:	d4ee      	bmi.n	800e7b0 <__smakebuf_r+0x18>
 800e7d2:	f023 0303 	bic.w	r3, r3, #3
 800e7d6:	f043 0302 	orr.w	r3, r3, #2
 800e7da:	81a3      	strh	r3, [r4, #12]
 800e7dc:	e7e2      	b.n	800e7a4 <__smakebuf_r+0xc>
 800e7de:	89a3      	ldrh	r3, [r4, #12]
 800e7e0:	6020      	str	r0, [r4, #0]
 800e7e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7e6:	81a3      	strh	r3, [r4, #12]
 800e7e8:	9b01      	ldr	r3, [sp, #4]
 800e7ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e7ee:	b15b      	cbz	r3, 800e808 <__smakebuf_r+0x70>
 800e7f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7f4:	4630      	mov	r0, r6
 800e7f6:	f000 f81d 	bl	800e834 <_isatty_r>
 800e7fa:	b128      	cbz	r0, 800e808 <__smakebuf_r+0x70>
 800e7fc:	89a3      	ldrh	r3, [r4, #12]
 800e7fe:	f023 0303 	bic.w	r3, r3, #3
 800e802:	f043 0301 	orr.w	r3, r3, #1
 800e806:	81a3      	strh	r3, [r4, #12]
 800e808:	89a3      	ldrh	r3, [r4, #12]
 800e80a:	431d      	orrs	r5, r3
 800e80c:	81a5      	strh	r5, [r4, #12]
 800e80e:	e7cf      	b.n	800e7b0 <__smakebuf_r+0x18>

0800e810 <_fstat_r>:
 800e810:	b538      	push	{r3, r4, r5, lr}
 800e812:	4d07      	ldr	r5, [pc, #28]	@ (800e830 <_fstat_r+0x20>)
 800e814:	2300      	movs	r3, #0
 800e816:	4604      	mov	r4, r0
 800e818:	4608      	mov	r0, r1
 800e81a:	4611      	mov	r1, r2
 800e81c:	602b      	str	r3, [r5, #0]
 800e81e:	f7f3 f8d9 	bl	80019d4 <_fstat>
 800e822:	1c43      	adds	r3, r0, #1
 800e824:	d102      	bne.n	800e82c <_fstat_r+0x1c>
 800e826:	682b      	ldr	r3, [r5, #0]
 800e828:	b103      	cbz	r3, 800e82c <_fstat_r+0x1c>
 800e82a:	6023      	str	r3, [r4, #0]
 800e82c:	bd38      	pop	{r3, r4, r5, pc}
 800e82e:	bf00      	nop
 800e830:	200020fc 	.word	0x200020fc

0800e834 <_isatty_r>:
 800e834:	b538      	push	{r3, r4, r5, lr}
 800e836:	4d06      	ldr	r5, [pc, #24]	@ (800e850 <_isatty_r+0x1c>)
 800e838:	2300      	movs	r3, #0
 800e83a:	4604      	mov	r4, r0
 800e83c:	4608      	mov	r0, r1
 800e83e:	602b      	str	r3, [r5, #0]
 800e840:	f7f3 f8d8 	bl	80019f4 <_isatty>
 800e844:	1c43      	adds	r3, r0, #1
 800e846:	d102      	bne.n	800e84e <_isatty_r+0x1a>
 800e848:	682b      	ldr	r3, [r5, #0]
 800e84a:	b103      	cbz	r3, 800e84e <_isatty_r+0x1a>
 800e84c:	6023      	str	r3, [r4, #0]
 800e84e:	bd38      	pop	{r3, r4, r5, pc}
 800e850:	200020fc 	.word	0x200020fc

0800e854 <atan2>:
 800e854:	f000 b800 	b.w	800e858 <__ieee754_atan2>

0800e858 <__ieee754_atan2>:
 800e858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e85c:	ec57 6b11 	vmov	r6, r7, d1
 800e860:	4273      	negs	r3, r6
 800e862:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800e9e0 <__ieee754_atan2+0x188>
 800e866:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800e86a:	4333      	orrs	r3, r6
 800e86c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e870:	4543      	cmp	r3, r8
 800e872:	ec51 0b10 	vmov	r0, r1, d0
 800e876:	4635      	mov	r5, r6
 800e878:	d809      	bhi.n	800e88e <__ieee754_atan2+0x36>
 800e87a:	4244      	negs	r4, r0
 800e87c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e880:	4304      	orrs	r4, r0
 800e882:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e886:	4544      	cmp	r4, r8
 800e888:	468e      	mov	lr, r1
 800e88a:	4681      	mov	r9, r0
 800e88c:	d907      	bls.n	800e89e <__ieee754_atan2+0x46>
 800e88e:	4632      	mov	r2, r6
 800e890:	463b      	mov	r3, r7
 800e892:	f7f1 fd03 	bl	800029c <__adddf3>
 800e896:	ec41 0b10 	vmov	d0, r0, r1
 800e89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e89e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800e8a2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800e8a6:	4334      	orrs	r4, r6
 800e8a8:	d103      	bne.n	800e8b2 <__ieee754_atan2+0x5a>
 800e8aa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8ae:	f000 b89b 	b.w	800e9e8 <atan>
 800e8b2:	17bc      	asrs	r4, r7, #30
 800e8b4:	f004 0402 	and.w	r4, r4, #2
 800e8b8:	ea53 0909 	orrs.w	r9, r3, r9
 800e8bc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e8c0:	d107      	bne.n	800e8d2 <__ieee754_atan2+0x7a>
 800e8c2:	2c02      	cmp	r4, #2
 800e8c4:	d05f      	beq.n	800e986 <__ieee754_atan2+0x12e>
 800e8c6:	2c03      	cmp	r4, #3
 800e8c8:	d1e5      	bne.n	800e896 <__ieee754_atan2+0x3e>
 800e8ca:	a141      	add	r1, pc, #260	@ (adr r1, 800e9d0 <__ieee754_atan2+0x178>)
 800e8cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8d0:	e7e1      	b.n	800e896 <__ieee754_atan2+0x3e>
 800e8d2:	4315      	orrs	r5, r2
 800e8d4:	d106      	bne.n	800e8e4 <__ieee754_atan2+0x8c>
 800e8d6:	f1be 0f00 	cmp.w	lr, #0
 800e8da:	da5f      	bge.n	800e99c <__ieee754_atan2+0x144>
 800e8dc:	a13e      	add	r1, pc, #248	@ (adr r1, 800e9d8 <__ieee754_atan2+0x180>)
 800e8de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8e2:	e7d8      	b.n	800e896 <__ieee754_atan2+0x3e>
 800e8e4:	4542      	cmp	r2, r8
 800e8e6:	d10f      	bne.n	800e908 <__ieee754_atan2+0xb0>
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	f104 34ff 	add.w	r4, r4, #4294967295
 800e8ee:	d107      	bne.n	800e900 <__ieee754_atan2+0xa8>
 800e8f0:	2c02      	cmp	r4, #2
 800e8f2:	d84c      	bhi.n	800e98e <__ieee754_atan2+0x136>
 800e8f4:	4b34      	ldr	r3, [pc, #208]	@ (800e9c8 <__ieee754_atan2+0x170>)
 800e8f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e8fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e8fe:	e7ca      	b.n	800e896 <__ieee754_atan2+0x3e>
 800e900:	2c02      	cmp	r4, #2
 800e902:	d848      	bhi.n	800e996 <__ieee754_atan2+0x13e>
 800e904:	4b31      	ldr	r3, [pc, #196]	@ (800e9cc <__ieee754_atan2+0x174>)
 800e906:	e7f6      	b.n	800e8f6 <__ieee754_atan2+0x9e>
 800e908:	4543      	cmp	r3, r8
 800e90a:	d0e4      	beq.n	800e8d6 <__ieee754_atan2+0x7e>
 800e90c:	1a9b      	subs	r3, r3, r2
 800e90e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800e912:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e916:	da1e      	bge.n	800e956 <__ieee754_atan2+0xfe>
 800e918:	2f00      	cmp	r7, #0
 800e91a:	da01      	bge.n	800e920 <__ieee754_atan2+0xc8>
 800e91c:	323c      	adds	r2, #60	@ 0x3c
 800e91e:	db1e      	blt.n	800e95e <__ieee754_atan2+0x106>
 800e920:	4632      	mov	r2, r6
 800e922:	463b      	mov	r3, r7
 800e924:	f7f1 ff9a 	bl	800085c <__aeabi_ddiv>
 800e928:	ec41 0b10 	vmov	d0, r0, r1
 800e92c:	f000 f9f4 	bl	800ed18 <fabs>
 800e930:	f000 f85a 	bl	800e9e8 <atan>
 800e934:	ec51 0b10 	vmov	r0, r1, d0
 800e938:	2c01      	cmp	r4, #1
 800e93a:	d013      	beq.n	800e964 <__ieee754_atan2+0x10c>
 800e93c:	2c02      	cmp	r4, #2
 800e93e:	d015      	beq.n	800e96c <__ieee754_atan2+0x114>
 800e940:	2c00      	cmp	r4, #0
 800e942:	d0a8      	beq.n	800e896 <__ieee754_atan2+0x3e>
 800e944:	a318      	add	r3, pc, #96	@ (adr r3, 800e9a8 <__ieee754_atan2+0x150>)
 800e946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e94a:	f7f1 fca5 	bl	8000298 <__aeabi_dsub>
 800e94e:	a318      	add	r3, pc, #96	@ (adr r3, 800e9b0 <__ieee754_atan2+0x158>)
 800e950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e954:	e014      	b.n	800e980 <__ieee754_atan2+0x128>
 800e956:	a118      	add	r1, pc, #96	@ (adr r1, 800e9b8 <__ieee754_atan2+0x160>)
 800e958:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e95c:	e7ec      	b.n	800e938 <__ieee754_atan2+0xe0>
 800e95e:	2000      	movs	r0, #0
 800e960:	2100      	movs	r1, #0
 800e962:	e7e9      	b.n	800e938 <__ieee754_atan2+0xe0>
 800e964:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e968:	4619      	mov	r1, r3
 800e96a:	e794      	b.n	800e896 <__ieee754_atan2+0x3e>
 800e96c:	a30e      	add	r3, pc, #56	@ (adr r3, 800e9a8 <__ieee754_atan2+0x150>)
 800e96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e972:	f7f1 fc91 	bl	8000298 <__aeabi_dsub>
 800e976:	4602      	mov	r2, r0
 800e978:	460b      	mov	r3, r1
 800e97a:	a10d      	add	r1, pc, #52	@ (adr r1, 800e9b0 <__ieee754_atan2+0x158>)
 800e97c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e980:	f7f1 fc8a 	bl	8000298 <__aeabi_dsub>
 800e984:	e787      	b.n	800e896 <__ieee754_atan2+0x3e>
 800e986:	a10a      	add	r1, pc, #40	@ (adr r1, 800e9b0 <__ieee754_atan2+0x158>)
 800e988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e98c:	e783      	b.n	800e896 <__ieee754_atan2+0x3e>
 800e98e:	a10c      	add	r1, pc, #48	@ (adr r1, 800e9c0 <__ieee754_atan2+0x168>)
 800e990:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e994:	e77f      	b.n	800e896 <__ieee754_atan2+0x3e>
 800e996:	2000      	movs	r0, #0
 800e998:	2100      	movs	r1, #0
 800e99a:	e77c      	b.n	800e896 <__ieee754_atan2+0x3e>
 800e99c:	a106      	add	r1, pc, #24	@ (adr r1, 800e9b8 <__ieee754_atan2+0x160>)
 800e99e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9a2:	e778      	b.n	800e896 <__ieee754_atan2+0x3e>
 800e9a4:	f3af 8000 	nop.w
 800e9a8:	33145c07 	.word	0x33145c07
 800e9ac:	3ca1a626 	.word	0x3ca1a626
 800e9b0:	54442d18 	.word	0x54442d18
 800e9b4:	400921fb 	.word	0x400921fb
 800e9b8:	54442d18 	.word	0x54442d18
 800e9bc:	3ff921fb 	.word	0x3ff921fb
 800e9c0:	54442d18 	.word	0x54442d18
 800e9c4:	3fe921fb 	.word	0x3fe921fb
 800e9c8:	0800f258 	.word	0x0800f258
 800e9cc:	0800f240 	.word	0x0800f240
 800e9d0:	54442d18 	.word	0x54442d18
 800e9d4:	c00921fb 	.word	0xc00921fb
 800e9d8:	54442d18 	.word	0x54442d18
 800e9dc:	bff921fb 	.word	0xbff921fb
 800e9e0:	7ff00000 	.word	0x7ff00000
 800e9e4:	00000000 	.word	0x00000000

0800e9e8 <atan>:
 800e9e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ec:	ec55 4b10 	vmov	r4, r5, d0
 800e9f0:	4bbf      	ldr	r3, [pc, #764]	@ (800ecf0 <atan+0x308>)
 800e9f2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e9f6:	429e      	cmp	r6, r3
 800e9f8:	46ab      	mov	fp, r5
 800e9fa:	d918      	bls.n	800ea2e <atan+0x46>
 800e9fc:	4bbd      	ldr	r3, [pc, #756]	@ (800ecf4 <atan+0x30c>)
 800e9fe:	429e      	cmp	r6, r3
 800ea00:	d801      	bhi.n	800ea06 <atan+0x1e>
 800ea02:	d109      	bne.n	800ea18 <atan+0x30>
 800ea04:	b144      	cbz	r4, 800ea18 <atan+0x30>
 800ea06:	4622      	mov	r2, r4
 800ea08:	462b      	mov	r3, r5
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	4629      	mov	r1, r5
 800ea0e:	f7f1 fc45 	bl	800029c <__adddf3>
 800ea12:	4604      	mov	r4, r0
 800ea14:	460d      	mov	r5, r1
 800ea16:	e006      	b.n	800ea26 <atan+0x3e>
 800ea18:	f1bb 0f00 	cmp.w	fp, #0
 800ea1c:	f340 812b 	ble.w	800ec76 <atan+0x28e>
 800ea20:	a597      	add	r5, pc, #604	@ (adr r5, 800ec80 <atan+0x298>)
 800ea22:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ea26:	ec45 4b10 	vmov	d0, r4, r5
 800ea2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea2e:	4bb2      	ldr	r3, [pc, #712]	@ (800ecf8 <atan+0x310>)
 800ea30:	429e      	cmp	r6, r3
 800ea32:	d813      	bhi.n	800ea5c <atan+0x74>
 800ea34:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800ea38:	429e      	cmp	r6, r3
 800ea3a:	d80c      	bhi.n	800ea56 <atan+0x6e>
 800ea3c:	a392      	add	r3, pc, #584	@ (adr r3, 800ec88 <atan+0x2a0>)
 800ea3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea42:	4620      	mov	r0, r4
 800ea44:	4629      	mov	r1, r5
 800ea46:	f7f1 fc29 	bl	800029c <__adddf3>
 800ea4a:	4bac      	ldr	r3, [pc, #688]	@ (800ecfc <atan+0x314>)
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	f7f2 f86b 	bl	8000b28 <__aeabi_dcmpgt>
 800ea52:	2800      	cmp	r0, #0
 800ea54:	d1e7      	bne.n	800ea26 <atan+0x3e>
 800ea56:	f04f 3aff 	mov.w	sl, #4294967295
 800ea5a:	e029      	b.n	800eab0 <atan+0xc8>
 800ea5c:	f000 f95c 	bl	800ed18 <fabs>
 800ea60:	4ba7      	ldr	r3, [pc, #668]	@ (800ed00 <atan+0x318>)
 800ea62:	429e      	cmp	r6, r3
 800ea64:	ec55 4b10 	vmov	r4, r5, d0
 800ea68:	f200 80bc 	bhi.w	800ebe4 <atan+0x1fc>
 800ea6c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800ea70:	429e      	cmp	r6, r3
 800ea72:	f200 809e 	bhi.w	800ebb2 <atan+0x1ca>
 800ea76:	4622      	mov	r2, r4
 800ea78:	462b      	mov	r3, r5
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	4629      	mov	r1, r5
 800ea7e:	f7f1 fc0d 	bl	800029c <__adddf3>
 800ea82:	4b9e      	ldr	r3, [pc, #632]	@ (800ecfc <atan+0x314>)
 800ea84:	2200      	movs	r2, #0
 800ea86:	f7f1 fc07 	bl	8000298 <__aeabi_dsub>
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	4606      	mov	r6, r0
 800ea8e:	460f      	mov	r7, r1
 800ea90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ea94:	4620      	mov	r0, r4
 800ea96:	4629      	mov	r1, r5
 800ea98:	f7f1 fc00 	bl	800029c <__adddf3>
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	4630      	mov	r0, r6
 800eaa2:	4639      	mov	r1, r7
 800eaa4:	f7f1 feda 	bl	800085c <__aeabi_ddiv>
 800eaa8:	f04f 0a00 	mov.w	sl, #0
 800eaac:	4604      	mov	r4, r0
 800eaae:	460d      	mov	r5, r1
 800eab0:	4622      	mov	r2, r4
 800eab2:	462b      	mov	r3, r5
 800eab4:	4620      	mov	r0, r4
 800eab6:	4629      	mov	r1, r5
 800eab8:	f7f1 fda6 	bl	8000608 <__aeabi_dmul>
 800eabc:	4602      	mov	r2, r0
 800eabe:	460b      	mov	r3, r1
 800eac0:	4680      	mov	r8, r0
 800eac2:	4689      	mov	r9, r1
 800eac4:	f7f1 fda0 	bl	8000608 <__aeabi_dmul>
 800eac8:	a371      	add	r3, pc, #452	@ (adr r3, 800ec90 <atan+0x2a8>)
 800eaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eace:	4606      	mov	r6, r0
 800ead0:	460f      	mov	r7, r1
 800ead2:	f7f1 fd99 	bl	8000608 <__aeabi_dmul>
 800ead6:	a370      	add	r3, pc, #448	@ (adr r3, 800ec98 <atan+0x2b0>)
 800ead8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eadc:	f7f1 fbde 	bl	800029c <__adddf3>
 800eae0:	4632      	mov	r2, r6
 800eae2:	463b      	mov	r3, r7
 800eae4:	f7f1 fd90 	bl	8000608 <__aeabi_dmul>
 800eae8:	a36d      	add	r3, pc, #436	@ (adr r3, 800eca0 <atan+0x2b8>)
 800eaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaee:	f7f1 fbd5 	bl	800029c <__adddf3>
 800eaf2:	4632      	mov	r2, r6
 800eaf4:	463b      	mov	r3, r7
 800eaf6:	f7f1 fd87 	bl	8000608 <__aeabi_dmul>
 800eafa:	a36b      	add	r3, pc, #428	@ (adr r3, 800eca8 <atan+0x2c0>)
 800eafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb00:	f7f1 fbcc 	bl	800029c <__adddf3>
 800eb04:	4632      	mov	r2, r6
 800eb06:	463b      	mov	r3, r7
 800eb08:	f7f1 fd7e 	bl	8000608 <__aeabi_dmul>
 800eb0c:	a368      	add	r3, pc, #416	@ (adr r3, 800ecb0 <atan+0x2c8>)
 800eb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb12:	f7f1 fbc3 	bl	800029c <__adddf3>
 800eb16:	4632      	mov	r2, r6
 800eb18:	463b      	mov	r3, r7
 800eb1a:	f7f1 fd75 	bl	8000608 <__aeabi_dmul>
 800eb1e:	a366      	add	r3, pc, #408	@ (adr r3, 800ecb8 <atan+0x2d0>)
 800eb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb24:	f7f1 fbba 	bl	800029c <__adddf3>
 800eb28:	4642      	mov	r2, r8
 800eb2a:	464b      	mov	r3, r9
 800eb2c:	f7f1 fd6c 	bl	8000608 <__aeabi_dmul>
 800eb30:	a363      	add	r3, pc, #396	@ (adr r3, 800ecc0 <atan+0x2d8>)
 800eb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb36:	4680      	mov	r8, r0
 800eb38:	4689      	mov	r9, r1
 800eb3a:	4630      	mov	r0, r6
 800eb3c:	4639      	mov	r1, r7
 800eb3e:	f7f1 fd63 	bl	8000608 <__aeabi_dmul>
 800eb42:	a361      	add	r3, pc, #388	@ (adr r3, 800ecc8 <atan+0x2e0>)
 800eb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb48:	f7f1 fba6 	bl	8000298 <__aeabi_dsub>
 800eb4c:	4632      	mov	r2, r6
 800eb4e:	463b      	mov	r3, r7
 800eb50:	f7f1 fd5a 	bl	8000608 <__aeabi_dmul>
 800eb54:	a35e      	add	r3, pc, #376	@ (adr r3, 800ecd0 <atan+0x2e8>)
 800eb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5a:	f7f1 fb9d 	bl	8000298 <__aeabi_dsub>
 800eb5e:	4632      	mov	r2, r6
 800eb60:	463b      	mov	r3, r7
 800eb62:	f7f1 fd51 	bl	8000608 <__aeabi_dmul>
 800eb66:	a35c      	add	r3, pc, #368	@ (adr r3, 800ecd8 <atan+0x2f0>)
 800eb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6c:	f7f1 fb94 	bl	8000298 <__aeabi_dsub>
 800eb70:	4632      	mov	r2, r6
 800eb72:	463b      	mov	r3, r7
 800eb74:	f7f1 fd48 	bl	8000608 <__aeabi_dmul>
 800eb78:	a359      	add	r3, pc, #356	@ (adr r3, 800ece0 <atan+0x2f8>)
 800eb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7e:	f7f1 fb8b 	bl	8000298 <__aeabi_dsub>
 800eb82:	4632      	mov	r2, r6
 800eb84:	463b      	mov	r3, r7
 800eb86:	f7f1 fd3f 	bl	8000608 <__aeabi_dmul>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	460b      	mov	r3, r1
 800eb8e:	4640      	mov	r0, r8
 800eb90:	4649      	mov	r1, r9
 800eb92:	f7f1 fb83 	bl	800029c <__adddf3>
 800eb96:	4622      	mov	r2, r4
 800eb98:	462b      	mov	r3, r5
 800eb9a:	f7f1 fd35 	bl	8000608 <__aeabi_dmul>
 800eb9e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800eba2:	4602      	mov	r2, r0
 800eba4:	460b      	mov	r3, r1
 800eba6:	d148      	bne.n	800ec3a <atan+0x252>
 800eba8:	4620      	mov	r0, r4
 800ebaa:	4629      	mov	r1, r5
 800ebac:	f7f1 fb74 	bl	8000298 <__aeabi_dsub>
 800ebb0:	e72f      	b.n	800ea12 <atan+0x2a>
 800ebb2:	4b52      	ldr	r3, [pc, #328]	@ (800ecfc <atan+0x314>)
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	4620      	mov	r0, r4
 800ebb8:	4629      	mov	r1, r5
 800ebba:	f7f1 fb6d 	bl	8000298 <__aeabi_dsub>
 800ebbe:	4b4f      	ldr	r3, [pc, #316]	@ (800ecfc <atan+0x314>)
 800ebc0:	4606      	mov	r6, r0
 800ebc2:	460f      	mov	r7, r1
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	4620      	mov	r0, r4
 800ebc8:	4629      	mov	r1, r5
 800ebca:	f7f1 fb67 	bl	800029c <__adddf3>
 800ebce:	4602      	mov	r2, r0
 800ebd0:	460b      	mov	r3, r1
 800ebd2:	4630      	mov	r0, r6
 800ebd4:	4639      	mov	r1, r7
 800ebd6:	f7f1 fe41 	bl	800085c <__aeabi_ddiv>
 800ebda:	f04f 0a01 	mov.w	sl, #1
 800ebde:	4604      	mov	r4, r0
 800ebe0:	460d      	mov	r5, r1
 800ebe2:	e765      	b.n	800eab0 <atan+0xc8>
 800ebe4:	4b47      	ldr	r3, [pc, #284]	@ (800ed04 <atan+0x31c>)
 800ebe6:	429e      	cmp	r6, r3
 800ebe8:	d21c      	bcs.n	800ec24 <atan+0x23c>
 800ebea:	4b47      	ldr	r3, [pc, #284]	@ (800ed08 <atan+0x320>)
 800ebec:	2200      	movs	r2, #0
 800ebee:	4620      	mov	r0, r4
 800ebf0:	4629      	mov	r1, r5
 800ebf2:	f7f1 fb51 	bl	8000298 <__aeabi_dsub>
 800ebf6:	4b44      	ldr	r3, [pc, #272]	@ (800ed08 <atan+0x320>)
 800ebf8:	4606      	mov	r6, r0
 800ebfa:	460f      	mov	r7, r1
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	4620      	mov	r0, r4
 800ec00:	4629      	mov	r1, r5
 800ec02:	f7f1 fd01 	bl	8000608 <__aeabi_dmul>
 800ec06:	4b3d      	ldr	r3, [pc, #244]	@ (800ecfc <atan+0x314>)
 800ec08:	2200      	movs	r2, #0
 800ec0a:	f7f1 fb47 	bl	800029c <__adddf3>
 800ec0e:	4602      	mov	r2, r0
 800ec10:	460b      	mov	r3, r1
 800ec12:	4630      	mov	r0, r6
 800ec14:	4639      	mov	r1, r7
 800ec16:	f7f1 fe21 	bl	800085c <__aeabi_ddiv>
 800ec1a:	f04f 0a02 	mov.w	sl, #2
 800ec1e:	4604      	mov	r4, r0
 800ec20:	460d      	mov	r5, r1
 800ec22:	e745      	b.n	800eab0 <atan+0xc8>
 800ec24:	4622      	mov	r2, r4
 800ec26:	462b      	mov	r3, r5
 800ec28:	4938      	ldr	r1, [pc, #224]	@ (800ed0c <atan+0x324>)
 800ec2a:	2000      	movs	r0, #0
 800ec2c:	f7f1 fe16 	bl	800085c <__aeabi_ddiv>
 800ec30:	f04f 0a03 	mov.w	sl, #3
 800ec34:	4604      	mov	r4, r0
 800ec36:	460d      	mov	r5, r1
 800ec38:	e73a      	b.n	800eab0 <atan+0xc8>
 800ec3a:	4b35      	ldr	r3, [pc, #212]	@ (800ed10 <atan+0x328>)
 800ec3c:	4e35      	ldr	r6, [pc, #212]	@ (800ed14 <atan+0x32c>)
 800ec3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ec42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec46:	f7f1 fb27 	bl	8000298 <__aeabi_dsub>
 800ec4a:	4622      	mov	r2, r4
 800ec4c:	462b      	mov	r3, r5
 800ec4e:	f7f1 fb23 	bl	8000298 <__aeabi_dsub>
 800ec52:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ec56:	4602      	mov	r2, r0
 800ec58:	460b      	mov	r3, r1
 800ec5a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ec5e:	f7f1 fb1b 	bl	8000298 <__aeabi_dsub>
 800ec62:	f1bb 0f00 	cmp.w	fp, #0
 800ec66:	4604      	mov	r4, r0
 800ec68:	460d      	mov	r5, r1
 800ec6a:	f6bf aedc 	bge.w	800ea26 <atan+0x3e>
 800ec6e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ec72:	461d      	mov	r5, r3
 800ec74:	e6d7      	b.n	800ea26 <atan+0x3e>
 800ec76:	a51c      	add	r5, pc, #112	@ (adr r5, 800ece8 <atan+0x300>)
 800ec78:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ec7c:	e6d3      	b.n	800ea26 <atan+0x3e>
 800ec7e:	bf00      	nop
 800ec80:	54442d18 	.word	0x54442d18
 800ec84:	3ff921fb 	.word	0x3ff921fb
 800ec88:	8800759c 	.word	0x8800759c
 800ec8c:	7e37e43c 	.word	0x7e37e43c
 800ec90:	e322da11 	.word	0xe322da11
 800ec94:	3f90ad3a 	.word	0x3f90ad3a
 800ec98:	24760deb 	.word	0x24760deb
 800ec9c:	3fa97b4b 	.word	0x3fa97b4b
 800eca0:	a0d03d51 	.word	0xa0d03d51
 800eca4:	3fb10d66 	.word	0x3fb10d66
 800eca8:	c54c206e 	.word	0xc54c206e
 800ecac:	3fb745cd 	.word	0x3fb745cd
 800ecb0:	920083ff 	.word	0x920083ff
 800ecb4:	3fc24924 	.word	0x3fc24924
 800ecb8:	5555550d 	.word	0x5555550d
 800ecbc:	3fd55555 	.word	0x3fd55555
 800ecc0:	2c6a6c2f 	.word	0x2c6a6c2f
 800ecc4:	bfa2b444 	.word	0xbfa2b444
 800ecc8:	52defd9a 	.word	0x52defd9a
 800eccc:	3fadde2d 	.word	0x3fadde2d
 800ecd0:	af749a6d 	.word	0xaf749a6d
 800ecd4:	3fb3b0f2 	.word	0x3fb3b0f2
 800ecd8:	fe231671 	.word	0xfe231671
 800ecdc:	3fbc71c6 	.word	0x3fbc71c6
 800ece0:	9998ebc4 	.word	0x9998ebc4
 800ece4:	3fc99999 	.word	0x3fc99999
 800ece8:	54442d18 	.word	0x54442d18
 800ecec:	bff921fb 	.word	0xbff921fb
 800ecf0:	440fffff 	.word	0x440fffff
 800ecf4:	7ff00000 	.word	0x7ff00000
 800ecf8:	3fdbffff 	.word	0x3fdbffff
 800ecfc:	3ff00000 	.word	0x3ff00000
 800ed00:	3ff2ffff 	.word	0x3ff2ffff
 800ed04:	40038000 	.word	0x40038000
 800ed08:	3ff80000 	.word	0x3ff80000
 800ed0c:	bff00000 	.word	0xbff00000
 800ed10:	0800f270 	.word	0x0800f270
 800ed14:	0800f290 	.word	0x0800f290

0800ed18 <fabs>:
 800ed18:	ec51 0b10 	vmov	r0, r1, d0
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ed22:	ec43 2b10 	vmov	d0, r2, r3
 800ed26:	4770      	bx	lr

0800ed28 <_init>:
 800ed28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed2a:	bf00      	nop
 800ed2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed2e:	bc08      	pop	{r3}
 800ed30:	469e      	mov	lr, r3
 800ed32:	4770      	bx	lr

0800ed34 <_fini>:
 800ed34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed36:	bf00      	nop
 800ed38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed3a:	bc08      	pop	{r3}
 800ed3c:	469e      	mov	lr, r3
 800ed3e:	4770      	bx	lr
