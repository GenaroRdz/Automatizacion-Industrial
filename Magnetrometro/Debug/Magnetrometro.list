
Magnetrometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009064  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08009204  08009204  0000a204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800930c  0800930c  0000b150  2**0
                  CONTENTS
  4 .ARM          00000008  0800930c  0800930c  0000a30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009314  08009314  0000b150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009314  08009314  0000a314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009318  08009318  0000a318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  0800931c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001df0  20000150  0800946c  0000b150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f40  0800946c  0000bf40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b150  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b53  00000000  00000000  0000b180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e2  00000000  00000000  0001ecd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00021eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c98  00000000  00000000  00022f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b7d  00000000  00000000  00023bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167ba  00000000  00000000  0003c735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c461  00000000  00000000  00052eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df350  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004960  00000000  00000000  000df394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e3cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080091ec 	.word	0x080091ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	080091ec 	.word	0x080091ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <QMC5883L_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Función para inicializar el sensor QMC5883L
void QMC5883L_Init() {
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af02      	add	r7, sp, #8
    uint8_t data[2];
    data[0] = 0x0B; // Registro de configuración 2
 8000586:	230b      	movs	r3, #11
 8000588:	713b      	strb	r3, [r7, #4]
    data[1] = 0x01; // Reinicio de software
 800058a:	2301      	movs	r3, #1
 800058c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, QMC5883L_ADDR, data, 2, HAL_MAX_DELAY);
 800058e:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <QMC5883L_Init+0x4c>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	4619      	mov	r1, r3
 8000594:	1d3a      	adds	r2, r7, #4
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2302      	movs	r3, #2
 800059e:	480c      	ldr	r0, [pc, #48]	@ (80005d0 <QMC5883L_Init+0x50>)
 80005a0:	f001 f826 	bl	80015f0 <HAL_I2C_Master_Transmit>

    data[0] = 0x09; // Registro de control
 80005a4:	2309      	movs	r3, #9
 80005a6:	713b      	strb	r3, [r7, #4]
    data[1] = 0x1D; // Configuración (ODR = 50Hz, RNG = 2G, OSR = 512)
 80005a8:	231d      	movs	r3, #29
 80005aa:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, QMC5883L_ADDR, data, 2, HAL_MAX_DELAY);
 80005ac:	4b07      	ldr	r3, [pc, #28]	@ (80005cc <QMC5883L_Init+0x4c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4619      	mov	r1, r3
 80005b2:	1d3a      	adds	r2, r7, #4
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2302      	movs	r3, #2
 80005bc:	4804      	ldr	r0, [pc, #16]	@ (80005d0 <QMC5883L_Init+0x50>)
 80005be:	f001 f817 	bl	80015f0 <HAL_I2C_Master_Transmit>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000000 	.word	0x20000000
 80005d0:	20000170 	.word	0x20000170

080005d4 <QMC5883L_Read>:
// Función para leer los datos de los ejes X, Y, Z
void QMC5883L_Read(int16_t *x, int16_t *y, int16_t *z) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	@ 0x28
 80005d8:	af04      	add	r7, sp, #16
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
	uint8_t data[6];
    HAL_I2C_Mem_Read(&hi2c1, QMC5883L_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, data, 6, HAL_MAX_DELAY);
 80005e0:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <QMC5883L_Read+0x6c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	9302      	str	r3, [sp, #8]
 80005ec:	2306      	movs	r3, #6
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2301      	movs	r3, #1
 80005f8:	2200      	movs	r2, #0
 80005fa:	4812      	ldr	r0, [pc, #72]	@ (8000644 <QMC5883L_Read+0x70>)
 80005fc:	f001 f8f6 	bl	80017ec <HAL_I2C_Mem_Read>

    *x = (int16_t)((data[1] << 8) | data[0]);
 8000600:	7c7b      	ldrb	r3, [r7, #17]
 8000602:	021b      	lsls	r3, r3, #8
 8000604:	b21a      	sxth	r2, r3
 8000606:	7c3b      	ldrb	r3, [r7, #16]
 8000608:	b21b      	sxth	r3, r3
 800060a:	4313      	orrs	r3, r2
 800060c:	b21a      	sxth	r2, r3
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((data[3] << 8) | data[2]);
 8000612:	7cfb      	ldrb	r3, [r7, #19]
 8000614:	021b      	lsls	r3, r3, #8
 8000616:	b21a      	sxth	r2, r3
 8000618:	7cbb      	ldrb	r3, [r7, #18]
 800061a:	b21b      	sxth	r3, r3
 800061c:	4313      	orrs	r3, r2
 800061e:	b21a      	sxth	r2, r3
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((data[5] << 8) | data[4]);
 8000624:	7d7b      	ldrb	r3, [r7, #21]
 8000626:	021b      	lsls	r3, r3, #8
 8000628:	b21a      	sxth	r2, r3
 800062a:	7d3b      	ldrb	r3, [r7, #20]
 800062c:	b21b      	sxth	r3, r3
 800062e:	4313      	orrs	r3, r2
 8000630:	b21a      	sxth	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	801a      	strh	r2, [r3, #0]
}
 8000636:	bf00      	nop
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000000 	.word	0x20000000
 8000644:	20000170 	.word	0x20000170

08000648 <Calibrate_Sensor>:
void Calibrate_Sensor() {
 8000648:	b580      	push	{r7, lr}
 800064a:	b098      	sub	sp, #96	@ 0x60
 800064c:	af02      	add	r7, sp, #8
    int16_t x, y, z;
    int16_t x_min = 32767, x_max = -32768;
 800064e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000652:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8000656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800065a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    int16_t y_min = 32767, y_max = -32768;
 800065e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000662:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8000666:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800066a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

    uint32_t calibration_duration = HAL_GetTick() + 10000; // 10 segundos de calibración
 800066e:	f000 fbb5 	bl	8000ddc <HAL_GetTick>
 8000672:	4603      	mov	r3, r0
 8000674:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8000678:	3310      	adds	r3, #16
 800067a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    char buffer[64];

    snprintf(buffer, sizeof(buffer), "Calibrando... Gire el sensor 360 grados\r\n");
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	4a40      	ldr	r2, [pc, #256]	@ (8000780 <Calibrate_Sensor+0x138>)
 8000680:	2140      	movs	r1, #64	@ 0x40
 8000682:	4618      	mov	r0, r3
 8000684:	f008 f8fe 	bl	8008884 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff fda8 	bl	80001e0 <strlen>
 8000690:	4603      	mov	r3, r0
 8000692:	b29a      	uxth	r2, r3
 8000694:	1d39      	adds	r1, r7, #4
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	483a      	ldr	r0, [pc, #232]	@ (8000784 <Calibrate_Sensor+0x13c>)
 800069c:	f003 fd72 	bl	8004184 <HAL_UART_Transmit>

    while (HAL_GetTick() < calibration_duration) {
 80006a0:	e033      	b.n	800070a <Calibrate_Sensor+0xc2>
        QMC5883L_Read(&x, &y, &z);
 80006a2:	f107 0246 	add.w	r2, r7, #70	@ 0x46
 80006a6:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80006aa:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff90 	bl	80005d4 <QMC5883L_Read>

        if (x < x_min) x_min = x;
 80006b4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80006b8:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	@ 0x56
 80006bc:	429a      	cmp	r2, r3
 80006be:	dd03      	ble.n	80006c8 <Calibrate_Sensor+0x80>
 80006c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80006c4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
        if (x > x_max) x_max = x;
 80006c8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80006cc:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	@ 0x54
 80006d0:	429a      	cmp	r2, r3
 80006d2:	da03      	bge.n	80006dc <Calibrate_Sensor+0x94>
 80006d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80006d8:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        if (y < y_min) y_min = y;
 80006dc:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 80006e0:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	@ 0x52
 80006e4:	429a      	cmp	r2, r3
 80006e6:	dd03      	ble.n	80006f0 <Calibrate_Sensor+0xa8>
 80006e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80006ec:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
        if (y > y_max) y_max = y;
 80006f0:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 80006f4:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	@ 0x50
 80006f8:	429a      	cmp	r2, r3
 80006fa:	da03      	bge.n	8000704 <Calibrate_Sensor+0xbc>
 80006fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000700:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

        HAL_Delay(100); // Esperar antes de la siguiente lectura
 8000704:	2064      	movs	r0, #100	@ 0x64
 8000706:	f000 fb75 	bl	8000df4 <HAL_Delay>
    while (HAL_GetTick() < calibration_duration) {
 800070a:	f000 fb67 	bl	8000ddc <HAL_GetTick>
 800070e:	4602      	mov	r2, r0
 8000710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000712:	4293      	cmp	r3, r2
 8000714:	d8c5      	bhi.n	80006a2 <Calibrate_Sensor+0x5a>
    }

    // Calcular los offsets para centrar en cero
    x_offset = (x_max + x_min) / 2;
 8000716:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	@ 0x54
 800071a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 800071e:	4413      	add	r3, r2
 8000720:	0fda      	lsrs	r2, r3, #31
 8000722:	4413      	add	r3, r2
 8000724:	105b      	asrs	r3, r3, #1
 8000726:	b21a      	sxth	r2, r3
 8000728:	4b17      	ldr	r3, [pc, #92]	@ (8000788 <Calibrate_Sensor+0x140>)
 800072a:	801a      	strh	r2, [r3, #0]
    y_offset = (y_max + y_min) / 2;
 800072c:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	@ 0x50
 8000730:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 8000734:	4413      	add	r3, r2
 8000736:	0fda      	lsrs	r2, r3, #31
 8000738:	4413      	add	r3, r2
 800073a:	105b      	asrs	r3, r3, #1
 800073c:	b21a      	sxth	r2, r3
 800073e:	4b13      	ldr	r3, [pc, #76]	@ (800078c <Calibrate_Sensor+0x144>)
 8000740:	801a      	strh	r2, [r3, #0]

    snprintf(buffer, sizeof(buffer), "Calibracion completa.\r\nOffsets - x: %d, y: %d\r\n", x_offset, y_offset);
 8000742:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <Calibrate_Sensor+0x140>)
 8000744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000748:	461a      	mov	r2, r3
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <Calibrate_Sensor+0x144>)
 800074c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000750:	1d38      	adds	r0, r7, #4
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	4613      	mov	r3, r2
 8000756:	4a0e      	ldr	r2, [pc, #56]	@ (8000790 <Calibrate_Sensor+0x148>)
 8000758:	2140      	movs	r1, #64	@ 0x40
 800075a:	f008 f893 	bl	8008884 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fd3d 	bl	80001e0 <strlen>
 8000766:	4603      	mov	r3, r0
 8000768:	b29a      	uxth	r2, r3
 800076a:	1d39      	adds	r1, r7, #4
 800076c:	f04f 33ff 	mov.w	r3, #4294967295
 8000770:	4804      	ldr	r0, [pc, #16]	@ (8000784 <Calibrate_Sensor+0x13c>)
 8000772:	f003 fd07 	bl	8004184 <HAL_UART_Transmit>
}
 8000776:	bf00      	nop
 8000778:	3758      	adds	r7, #88	@ 0x58
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	08009204 	.word	0x08009204
 8000784:	200001c4 	.word	0x200001c4
 8000788:	2000016c 	.word	0x2000016c
 800078c:	2000016e 	.word	0x2000016e
 8000790:	08009230 	.word	0x08009230

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b094      	sub	sp, #80	@ 0x50
 8000798:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079a:	f000 fab9 	bl	8000d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079e:	f000 f857 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a2:	f000 f915 	bl	80009d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007a6:	f000 f8bb 	bl	8000920 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80007aa:	f007 fb81 	bl	8007eb0 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 80007ae:	f000 f8e5 	bl	800097c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  QMC5883L_Init();
 80007b2:	f7ff fee5 	bl	8000580 <QMC5883L_Init>
  Calibrate_Sensor(); // Llamar a la función de calibración al inicio
 80007b6:	f7ff ff47 	bl	8000648 <Calibrate_Sensor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      QMC5883L_Read(&x, &y, &z);
 80007ba:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80007be:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80007c2:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff04 	bl	80005d4 <QMC5883L_Read>

      // Aplicar la calibración (offset) a las lecturas
      x -= x_offset;
 80007cc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <main+0xac>)
 80007d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	1ad3      	subs	r3, r2, r3
 80007dc:	b29b      	uxth	r3, r3
 80007de:	b21b      	sxth	r3, r3
 80007e0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y -= y_offset;
 80007e4:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <main+0xb0>)
 80007ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      snprintf(buffer, sizeof(buffer), "x: %d, y: %d, z: %d\r\n", x, y, z);
 80007fc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8000800:	4619      	mov	r1, r3
 8000802:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8000806:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 800080a:	4638      	mov	r0, r7
 800080c:	9201      	str	r2, [sp, #4]
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	460b      	mov	r3, r1
 8000812:	4a0d      	ldr	r2, [pc, #52]	@ (8000848 <main+0xb4>)
 8000814:	2140      	movs	r1, #64	@ 0x40
 8000816:	f008 f835 	bl	8008884 <sniprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800081a:	463b      	mov	r3, r7
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fcdf 	bl	80001e0 <strlen>
 8000822:	4603      	mov	r3, r0
 8000824:	b29a      	uxth	r2, r3
 8000826:	4639      	mov	r1, r7
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	4807      	ldr	r0, [pc, #28]	@ (800084c <main+0xb8>)
 800082e:	f003 fca9 	bl	8004184 <HAL_UART_Transmit>

      HAL_Delay(500);
 8000832:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000836:	f000 fadd 	bl	8000df4 <HAL_Delay>
      QMC5883L_Read(&x, &y, &z);
 800083a:	bf00      	nop
 800083c:	e7bd      	b.n	80007ba <main+0x26>
 800083e:	bf00      	nop
 8000840:	2000016c 	.word	0x2000016c
 8000844:	2000016e 	.word	0x2000016e
 8000848:	08009260 	.word	0x08009260
 800084c:	200001c4 	.word	0x200001c4

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b094      	sub	sp, #80	@ 0x50
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	2230      	movs	r2, #48	@ 0x30
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f008 f844 	bl	80088ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	4b27      	ldr	r3, [pc, #156]	@ (8000918 <SystemClock_Config+0xc8>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	4a26      	ldr	r2, [pc, #152]	@ (8000918 <SystemClock_Config+0xc8>)
 800087e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000882:	6413      	str	r3, [r2, #64]	@ 0x40
 8000884:	4b24      	ldr	r3, [pc, #144]	@ (8000918 <SystemClock_Config+0xc8>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	4b21      	ldr	r3, [pc, #132]	@ (800091c <SystemClock_Config+0xcc>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a20      	ldr	r2, [pc, #128]	@ (800091c <SystemClock_Config+0xcc>)
 800089a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	4b1e      	ldr	r3, [pc, #120]	@ (800091c <SystemClock_Config+0xcc>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ac:	2301      	movs	r3, #1
 80008ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b6:	2302      	movs	r3, #2
 80008b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008c0:	2319      	movs	r3, #25
 80008c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80008c4:	2390      	movs	r3, #144	@ 0x90
 80008c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008cc:	2303      	movs	r3, #3
 80008ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d0:	f107 0320 	add.w	r3, r7, #32
 80008d4:	4618      	mov	r0, r3
 80008d6:	f002 ffad 	bl	8003834 <HAL_RCC_OscConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008e0:	f000 f8ac 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e4:	230f      	movs	r3, #15
 80008e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e8:	2302      	movs	r3, #2
 80008ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	2102      	movs	r1, #2
 8000900:	4618      	mov	r0, r3
 8000902:	f003 fa0f 	bl	8003d24 <HAL_RCC_ClockConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800090c:	f000 f896 	bl	8000a3c <Error_Handler>
  }
}
 8000910:	bf00      	nop
 8000912:	3750      	adds	r7, #80	@ 0x50
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800
 800091c:	40007000 	.word	0x40007000

08000920 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <MX_I2C1_Init+0x50>)
 8000926:	4a13      	ldr	r2, [pc, #76]	@ (8000974 <MX_I2C1_Init+0x54>)
 8000928:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800092a:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_I2C1_Init+0x50>)
 800092c:	4a12      	ldr	r2, [pc, #72]	@ (8000978 <MX_I2C1_Init+0x58>)
 800092e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000930:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <MX_I2C1_Init+0x50>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <MX_I2C1_Init+0x50>)
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <MX_I2C1_Init+0x50>)
 800093e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000942:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000944:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <MX_I2C1_Init+0x50>)
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <MX_I2C1_Init+0x50>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000950:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <MX_I2C1_Init+0x50>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <MX_I2C1_Init+0x50>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	@ (8000970 <MX_I2C1_Init+0x50>)
 800095e:	f000 fd03 	bl	8001368 <HAL_I2C_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000968:	f000 f868 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000170 	.word	0x20000170
 8000974:	40005400 	.word	0x40005400
 8000978:	000186a0 	.word	0x000186a0

0800097c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000982:	4a12      	ldr	r2, [pc, #72]	@ (80009cc <MX_USART2_UART_Init+0x50>)
 8000984:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000988:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800098c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009b4:	f003 fb96 	bl	80040e4 <HAL_UART_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009be:	f000 f83d 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200001c4 	.word	0x200001c4
 80009cc:	40004400 	.word	0x40004400

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <MX_GPIO_Init+0x68>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a16      	ldr	r2, [pc, #88]	@ (8000a38 <MX_GPIO_Init+0x68>)
 80009e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <MX_GPIO_Init+0x68>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <MX_GPIO_Init+0x68>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000a38 <MX_GPIO_Init+0x68>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <MX_GPIO_Init+0x68>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <MX_GPIO_Init+0x68>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a08      	ldr	r2, [pc, #32]	@ (8000a38 <MX_GPIO_Init+0x68>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_GPIO_Init+0x68>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <Error_Handler+0x8>

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a56:	4a0f      	ldr	r2, [pc, #60]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	4a08      	ldr	r2, [pc, #32]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	@ 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a19      	ldr	r2, [pc, #100]	@ (8000b1c <HAL_I2C_MspInit+0x84>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d12b      	bne.n	8000b12 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <HAL_I2C_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a17      	ldr	r2, [pc, #92]	@ (8000b20 <HAL_I2C_MspInit+0x88>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <HAL_I2C_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ad6:	23c0      	movs	r3, #192	@ 0xc0
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ada:	2312      	movs	r3, #18
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	480c      	ldr	r0, [pc, #48]	@ (8000b24 <HAL_I2C_MspInit+0x8c>)
 8000af2:	f000 fab5 	bl	8001060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <HAL_I2C_MspInit+0x88>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afe:	4a08      	ldr	r2, [pc, #32]	@ (8000b20 <HAL_I2C_MspInit+0x88>)
 8000b00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <HAL_I2C_MspInit+0x88>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	@ 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020400 	.word	0x40020400

08000b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a19      	ldr	r2, [pc, #100]	@ (8000bac <HAL_UART_MspInit+0x84>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12b      	bne.n	8000ba2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	4a17      	ldr	r2, [pc, #92]	@ (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5a:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a10      	ldr	r2, [pc, #64]	@ (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b82:	230c      	movs	r3, #12
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b92:	2307      	movs	r3, #7
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <HAL_UART_MspInit+0x8c>)
 8000b9e:	f000 fa5f 	bl	8001060 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	@ 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40004400 	.word	0x40004400
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <NMI_Handler+0x4>

08000bc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <MemManage_Handler+0x4>

08000bd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <UsageFault_Handler+0x4>

08000be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0e:	f000 f8d1 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c1c:	4802      	ldr	r0, [pc, #8]	@ (8000c28 <OTG_FS_IRQHandler+0x10>)
 8000c1e:	f001 fcfb 	bl	8002618 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200016f4 	.word	0x200016f4

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	@ (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	@ (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f007 fe4e 	bl	80088fc <__errno>
 8000c60:	4603      	mov	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	@ (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20020000 	.word	0x20020000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	2000020c 	.word	0x2000020c
 8000c94:	20001f40 	.word	0x20001f40

08000c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	@ (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cc0:	f7ff ffea 	bl	8000c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	@ (8000cfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cea:	f007 fe0d 	bl	8008908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cee:	f7ff fd51 	bl	8000794 <main>
  bx  lr    
 8000cf2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8000d00:	0800931c 	.word	0x0800931c
  ldr r2, =_sbss
 8000d04:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000d08:	20001f40 	.word	0x20001f40

08000d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC_IRQHandler>
	...

08000d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d14:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0d      	ldr	r2, [pc, #52]	@ (8000d50 <HAL_Init+0x40>)
 8000d1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d20:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <HAL_Init+0x40>)
 8000d26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2c:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a07      	ldr	r2, [pc, #28]	@ (8000d50 <HAL_Init+0x40>)
 8000d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f000 f94f 	bl	8000fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3e:	200f      	movs	r0, #15
 8000d40:	f000 f808 	bl	8000d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d44:	f7ff fe80 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023c00 	.word	0x40023c00

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d5c:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <HAL_InitTick+0x54>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_InitTick+0x58>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f967 	bl	8001046 <HAL_SYSTICK_Config>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00e      	b.n	8000da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d80a      	bhi.n	8000d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f000 f92f 	bl	8000ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d94:	4a06      	ldr	r2, [pc, #24]	@ (8000db0 <HAL_InitTick+0x5c>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000004 	.word	0x20000004
 8000dac:	2000000c 	.word	0x2000000c
 8000db0:	20000008 	.word	0x20000008

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_IncTick+0x20>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_IncTick+0x24>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <HAL_IncTick+0x24>)
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2000000c 	.word	0x2000000c
 8000dd8:	20000210 	.word	0x20000210

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b03      	ldr	r3, [pc, #12]	@ (8000df0 <HAL_GetTick+0x14>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000210 	.word	0x20000210

08000df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dfc:	f7ff ffee 	bl	8000ddc <HAL_GetTick>
 8000e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0c:	d005      	beq.n	8000e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e38 <HAL_Delay+0x44>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1a:	bf00      	nop
 8000e1c:	f7ff ffde 	bl	8000ddc <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d8f7      	bhi.n	8000e1c <HAL_Delay+0x28>
  {
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	2000000c 	.word	0x2000000c

08000e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6e:	4a04      	ldr	r2, [pc, #16]	@ (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	60d3      	str	r3, [r2, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e88:	4b04      	ldr	r3, [pc, #16]	@ (8000e9c <__NVIC_GetPriorityGrouping+0x18>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	f003 0307 	and.w	r3, r3, #7
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db0b      	blt.n	8000eca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f003 021f 	and.w	r2, r3, #31
 8000eb8:	4907      	ldr	r1, [pc, #28]	@ (8000ed8 <__NVIC_EnableIRQ+0x38>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000e100 	.word	0xe000e100

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db0a      	blt.n	8000f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	490c      	ldr	r1, [pc, #48]	@ (8000f28 <__NVIC_SetPriority+0x4c>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f04:	e00a      	b.n	8000f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4908      	ldr	r1, [pc, #32]	@ (8000f2c <__NVIC_SetPriority+0x50>)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	3b04      	subs	r3, #4
 8000f14:	0112      	lsls	r2, r2, #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	@ 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	bf28      	it	cs
 8000f4e:	2304      	movcs	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3304      	adds	r3, #4
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d902      	bls.n	8000f60 <NVIC_EncodePriority+0x30>
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	e000      	b.n	8000f62 <NVIC_EncodePriority+0x32>
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 32ff 	mov.w	r2, #4294967295
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	43d9      	mvns	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	4313      	orrs	r3, r2
         );
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3724      	adds	r7, #36	@ 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fa8:	d301      	bcc.n	8000fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00f      	b.n	8000fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fae:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <SysTick_Config+0x40>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb6:	210f      	movs	r1, #15
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f7ff ff8e 	bl	8000edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc0:	4b05      	ldr	r3, [pc, #20]	@ (8000fd8 <SysTick_Config+0x40>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc6:	4b04      	ldr	r3, [pc, #16]	@ (8000fd8 <SysTick_Config+0x40>)
 8000fc8:	2207      	movs	r2, #7
 8000fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ff29 	bl	8000e3c <__NVIC_SetPriorityGrouping>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001004:	f7ff ff3e 	bl	8000e84 <__NVIC_GetPriorityGrouping>
 8001008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	6978      	ldr	r0, [r7, #20]
 8001010:	f7ff ff8e 	bl	8000f30 <NVIC_EncodePriority>
 8001014:	4602      	mov	r2, r0
 8001016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff5d 	bl	8000edc <__NVIC_SetPriority>
}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff31 	bl	8000ea0 <__NVIC_EnableIRQ>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ffa2 	bl	8000f98 <SysTick_Config>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	@ 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	e159      	b.n	8001330 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	429a      	cmp	r2, r3
 8001096:	f040 8148 	bne.w	800132a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d005      	beq.n	80010b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d130      	bne.n	8001114 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e8:	2201      	movs	r2, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	091b      	lsrs	r3, r3, #4
 80010fe:	f003 0201 	and.w	r2, r3, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b03      	cmp	r3, #3
 800111e:	d017      	beq.n	8001150 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d123      	bne.n	80011a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	08da      	lsrs	r2, r3, #3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3208      	adds	r2, #8
 8001164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	220f      	movs	r2, #15
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	691a      	ldr	r2, [r3, #16]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	08da      	lsrs	r2, r3, #3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3208      	adds	r2, #8
 800119e:	69b9      	ldr	r1, [r7, #24]
 80011a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0203 	and.w	r2, r3, #3
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80a2 	beq.w	800132a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b57      	ldr	r3, [pc, #348]	@ (8001348 <HAL_GPIO_Init+0x2e8>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	4a56      	ldr	r2, [pc, #344]	@ (8001348 <HAL_GPIO_Init+0x2e8>)
 80011f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f6:	4b54      	ldr	r3, [pc, #336]	@ (8001348 <HAL_GPIO_Init+0x2e8>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001202:	4a52      	ldr	r2, [pc, #328]	@ (800134c <HAL_GPIO_Init+0x2ec>)
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3302      	adds	r3, #2
 800120a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	220f      	movs	r2, #15
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a49      	ldr	r2, [pc, #292]	@ (8001350 <HAL_GPIO_Init+0x2f0>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d019      	beq.n	8001262 <HAL_GPIO_Init+0x202>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a48      	ldr	r2, [pc, #288]	@ (8001354 <HAL_GPIO_Init+0x2f4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d013      	beq.n	800125e <HAL_GPIO_Init+0x1fe>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a47      	ldr	r2, [pc, #284]	@ (8001358 <HAL_GPIO_Init+0x2f8>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d00d      	beq.n	800125a <HAL_GPIO_Init+0x1fa>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a46      	ldr	r2, [pc, #280]	@ (800135c <HAL_GPIO_Init+0x2fc>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d007      	beq.n	8001256 <HAL_GPIO_Init+0x1f6>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a45      	ldr	r2, [pc, #276]	@ (8001360 <HAL_GPIO_Init+0x300>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_GPIO_Init+0x1f2>
 800124e:	2304      	movs	r3, #4
 8001250:	e008      	b.n	8001264 <HAL_GPIO_Init+0x204>
 8001252:	2307      	movs	r3, #7
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x204>
 8001256:	2303      	movs	r3, #3
 8001258:	e004      	b.n	8001264 <HAL_GPIO_Init+0x204>
 800125a:	2302      	movs	r3, #2
 800125c:	e002      	b.n	8001264 <HAL_GPIO_Init+0x204>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_GPIO_Init+0x204>
 8001262:	2300      	movs	r3, #0
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	f002 0203 	and.w	r2, r2, #3
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	4093      	lsls	r3, r2
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001274:	4935      	ldr	r1, [pc, #212]	@ (800134c <HAL_GPIO_Init+0x2ec>)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	3302      	adds	r3, #2
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001282:	4b38      	ldr	r3, [pc, #224]	@ (8001364 <HAL_GPIO_Init+0x304>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001364 <HAL_GPIO_Init+0x304>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001364 <HAL_GPIO_Init+0x304>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d0:	4a24      	ldr	r2, [pc, #144]	@ (8001364 <HAL_GPIO_Init+0x304>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012d6:	4b23      	ldr	r3, [pc, #140]	@ (8001364 <HAL_GPIO_Init+0x304>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001364 <HAL_GPIO_Init+0x304>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001300:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <HAL_GPIO_Init+0x304>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001324:	4a0f      	ldr	r2, [pc, #60]	@ (8001364 <HAL_GPIO_Init+0x304>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3301      	adds	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b0f      	cmp	r3, #15
 8001334:	f67f aea2 	bls.w	800107c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3724      	adds	r7, #36	@ 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40013800 	.word	0x40013800
 8001350:	40020000 	.word	0x40020000
 8001354:	40020400 	.word	0x40020400
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40021000 	.word	0x40021000
 8001364:	40013c00 	.word	0x40013c00

08001368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e12b      	b.n	80015d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d106      	bne.n	8001394 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff fb82 	bl	8000a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2224      	movs	r2, #36	@ 0x24
 8001398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0201 	bic.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013cc:	f002 fe62 	bl	8004094 <HAL_RCC_GetPCLK1Freq>
 80013d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4a81      	ldr	r2, [pc, #516]	@ (80015dc <HAL_I2C_Init+0x274>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d807      	bhi.n	80013ec <HAL_I2C_Init+0x84>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4a80      	ldr	r2, [pc, #512]	@ (80015e0 <HAL_I2C_Init+0x278>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	bf94      	ite	ls
 80013e4:	2301      	movls	r3, #1
 80013e6:	2300      	movhi	r3, #0
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	e006      	b.n	80013fa <HAL_I2C_Init+0x92>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4a7d      	ldr	r2, [pc, #500]	@ (80015e4 <HAL_I2C_Init+0x27c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	bf94      	ite	ls
 80013f4:	2301      	movls	r3, #1
 80013f6:	2300      	movhi	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e0e7      	b.n	80015d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4a78      	ldr	r2, [pc, #480]	@ (80015e8 <HAL_I2C_Init+0x280>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	0c9b      	lsrs	r3, r3, #18
 800140c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	430a      	orrs	r2, r1
 8001420:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4a6a      	ldr	r2, [pc, #424]	@ (80015dc <HAL_I2C_Init+0x274>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d802      	bhi.n	800143c <HAL_I2C_Init+0xd4>
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	3301      	adds	r3, #1
 800143a:	e009      	b.n	8001450 <HAL_I2C_Init+0xe8>
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001442:	fb02 f303 	mul.w	r3, r2, r3
 8001446:	4a69      	ldr	r2, [pc, #420]	@ (80015ec <HAL_I2C_Init+0x284>)
 8001448:	fba2 2303 	umull	r2, r3, r2, r3
 800144c:	099b      	lsrs	r3, r3, #6
 800144e:	3301      	adds	r3, #1
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	430b      	orrs	r3, r1
 8001456:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001462:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	495c      	ldr	r1, [pc, #368]	@ (80015dc <HAL_I2C_Init+0x274>)
 800146c:	428b      	cmp	r3, r1
 800146e:	d819      	bhi.n	80014a4 <HAL_I2C_Init+0x13c>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	1e59      	subs	r1, r3, #1
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fbb1 f3f3 	udiv	r3, r1, r3
 800147e:	1c59      	adds	r1, r3, #1
 8001480:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001484:	400b      	ands	r3, r1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00a      	beq.n	80014a0 <HAL_I2C_Init+0x138>
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1e59      	subs	r1, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	fbb1 f3f3 	udiv	r3, r1, r3
 8001498:	3301      	adds	r3, #1
 800149a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149e:	e051      	b.n	8001544 <HAL_I2C_Init+0x1dc>
 80014a0:	2304      	movs	r3, #4
 80014a2:	e04f      	b.n	8001544 <HAL_I2C_Init+0x1dc>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d111      	bne.n	80014d0 <HAL_I2C_Init+0x168>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	1e58      	subs	r0, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6859      	ldr	r1, [r3, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	440b      	add	r3, r1
 80014ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80014be:	3301      	adds	r3, #1
 80014c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf0c      	ite	eq
 80014c8:	2301      	moveq	r3, #1
 80014ca:	2300      	movne	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	e012      	b.n	80014f6 <HAL_I2C_Init+0x18e>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	1e58      	subs	r0, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6859      	ldr	r1, [r3, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	0099      	lsls	r1, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e6:	3301      	adds	r3, #1
 80014e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_I2C_Init+0x196>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e022      	b.n	8001544 <HAL_I2C_Init+0x1dc>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10e      	bne.n	8001524 <HAL_I2C_Init+0x1bc>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1e58      	subs	r0, r3, #1
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6859      	ldr	r1, [r3, #4]
 800150e:	460b      	mov	r3, r1
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	440b      	add	r3, r1
 8001514:	fbb0 f3f3 	udiv	r3, r0, r3
 8001518:	3301      	adds	r3, #1
 800151a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800151e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001522:	e00f      	b.n	8001544 <HAL_I2C_Init+0x1dc>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	1e58      	subs	r0, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6859      	ldr	r1, [r3, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	0099      	lsls	r1, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	fbb0 f3f3 	udiv	r3, r0, r3
 800153a:	3301      	adds	r3, #1
 800153c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001540:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	6809      	ldr	r1, [r1, #0]
 8001548:	4313      	orrs	r3, r2
 800154a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69da      	ldr	r2, [r3, #28]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001572:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6911      	ldr	r1, [r2, #16]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68d2      	ldr	r2, [r2, #12]
 800157e:	4311      	orrs	r1, r2
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	430b      	orrs	r3, r1
 8001586:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2220      	movs	r2, #32
 80015be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	000186a0 	.word	0x000186a0
 80015e0:	001e847f 	.word	0x001e847f
 80015e4:	003d08ff 	.word	0x003d08ff
 80015e8:	431bde83 	.word	0x431bde83
 80015ec:	10624dd3 	.word	0x10624dd3

080015f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	461a      	mov	r2, r3
 80015fc:	460b      	mov	r3, r1
 80015fe:	817b      	strh	r3, [r7, #10]
 8001600:	4613      	mov	r3, r2
 8001602:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff fbea 	bl	8000ddc <HAL_GetTick>
 8001608:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b20      	cmp	r3, #32
 8001614:	f040 80e0 	bne.w	80017d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2319      	movs	r3, #25
 800161e:	2201      	movs	r2, #1
 8001620:	4970      	ldr	r1, [pc, #448]	@ (80017e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f000 fc7e 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800162e:	2302      	movs	r3, #2
 8001630:	e0d3      	b.n	80017da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_I2C_Master_Transmit+0x50>
 800163c:	2302      	movs	r3, #2
 800163e:	e0cc      	b.n	80017da <HAL_I2C_Master_Transmit+0x1ea>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b01      	cmp	r3, #1
 8001654:	d007      	beq.n	8001666 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f042 0201 	orr.w	r2, r2, #1
 8001664:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001674:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2221      	movs	r2, #33	@ 0x21
 800167a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2210      	movs	r2, #16
 8001682:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	893a      	ldrh	r2, [r7, #8]
 8001696:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800169c:	b29a      	uxth	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4a50      	ldr	r2, [pc, #320]	@ (80017e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80016a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016a8:	8979      	ldrh	r1, [r7, #10]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	6a3a      	ldr	r2, [r7, #32]
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f000 face 	bl	8001c50 <I2C_MasterRequestWrite>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e08d      	b.n	80017da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016d4:	e066      	b.n	80017a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	6a39      	ldr	r1, [r7, #32]
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 fd3c 	bl	8002158 <I2C_WaitOnTXEFlagUntilTimeout>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00d      	beq.n	8001702 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d107      	bne.n	80016fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e06b      	b.n	80017da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001706:	781a      	ldrb	r2, [r3, #0]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800171c:	b29b      	uxth	r3, r3
 800171e:	3b01      	subs	r3, #1
 8001720:	b29a      	uxth	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800172a:	3b01      	subs	r3, #1
 800172c:	b29a      	uxth	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b04      	cmp	r3, #4
 800173e:	d11b      	bne.n	8001778 <HAL_I2C_Master_Transmit+0x188>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001744:	2b00      	cmp	r3, #0
 8001746:	d017      	beq.n	8001778 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174c:	781a      	ldrb	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001762:	b29b      	uxth	r3, r3
 8001764:	3b01      	subs	r3, #1
 8001766:	b29a      	uxth	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001770:	3b01      	subs	r3, #1
 8001772:	b29a      	uxth	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	6a39      	ldr	r1, [r7, #32]
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f000 fd33 	bl	80021e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00d      	beq.n	80017a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	2b04      	cmp	r3, #4
 800178e:	d107      	bne.n	80017a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800179e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e01a      	b.n	80017da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d194      	bne.n	80016d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2220      	movs	r2, #32
 80017c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	e000      	b.n	80017da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017d8:	2302      	movs	r3, #2
  }
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	00100002 	.word	0x00100002
 80017e8:	ffff0000 	.word	0xffff0000

080017ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08c      	sub	sp, #48	@ 0x30
 80017f0:	af02      	add	r7, sp, #8
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	4608      	mov	r0, r1
 80017f6:	4611      	mov	r1, r2
 80017f8:	461a      	mov	r2, r3
 80017fa:	4603      	mov	r3, r0
 80017fc:	817b      	strh	r3, [r7, #10]
 80017fe:	460b      	mov	r3, r1
 8001800:	813b      	strh	r3, [r7, #8]
 8001802:	4613      	mov	r3, r2
 8001804:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001806:	f7ff fae9 	bl	8000ddc <HAL_GetTick>
 800180a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b20      	cmp	r3, #32
 8001816:	f040 8214 	bne.w	8001c42 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2319      	movs	r3, #25
 8001820:	2201      	movs	r2, #1
 8001822:	497b      	ldr	r1, [pc, #492]	@ (8001a10 <HAL_I2C_Mem_Read+0x224>)
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f000 fb7d 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001830:	2302      	movs	r3, #2
 8001832:	e207      	b.n	8001c44 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_I2C_Mem_Read+0x56>
 800183e:	2302      	movs	r3, #2
 8001840:	e200      	b.n	8001c44 <HAL_I2C_Mem_Read+0x458>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b01      	cmp	r3, #1
 8001856:	d007      	beq.n	8001868 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0201 	orr.w	r2, r2, #1
 8001866:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001876:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2222      	movs	r2, #34	@ 0x22
 800187c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2240      	movs	r2, #64	@ 0x40
 8001884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001892:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001898:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189e:	b29a      	uxth	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001a14 <HAL_I2C_Mem_Read+0x228>)
 80018a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018aa:	88f8      	ldrh	r0, [r7, #6]
 80018ac:	893a      	ldrh	r2, [r7, #8]
 80018ae:	8979      	ldrh	r1, [r7, #10]
 80018b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	4603      	mov	r3, r0
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f000 fa4a 	bl	8001d54 <I2C_RequestMemoryRead>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e1bc      	b.n	8001c44 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d113      	bne.n	80018fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018d2:	2300      	movs	r3, #0
 80018d4:	623b      	str	r3, [r7, #32]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	623b      	str	r3, [r7, #32]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	623b      	str	r3, [r7, #32]
 80018e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	e190      	b.n	8001c1c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d11b      	bne.n	800193a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001910:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	e170      	b.n	8001c1c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800193e:	2b02      	cmp	r3, #2
 8001940:	d11b      	bne.n	800197a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001950:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001960:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	e150      	b.n	8001c1c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001990:	e144      	b.n	8001c1c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001996:	2b03      	cmp	r3, #3
 8001998:	f200 80f1 	bhi.w	8001b7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d123      	bne.n	80019ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 fc65 	bl	8002278 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e145      	b.n	8001c44 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	691a      	ldr	r2, [r3, #16]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80019ea:	e117      	b.n	8001c1c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d14e      	bne.n	8001a92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019fa:	2200      	movs	r2, #0
 80019fc:	4906      	ldr	r1, [pc, #24]	@ (8001a18 <HAL_I2C_Mem_Read+0x22c>)
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 fa90 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d008      	beq.n	8001a1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e11a      	b.n	8001c44 <HAL_I2C_Mem_Read+0x458>
 8001a0e:	bf00      	nop
 8001a10:	00100002 	.word	0x00100002
 8001a14:	ffff0000 	.word	0xffff0000
 8001a18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001a90:	e0c4      	b.n	8001c1c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a98:	2200      	movs	r2, #0
 8001a9a:	496c      	ldr	r1, [pc, #432]	@ (8001c4c <HAL_I2C_Mem_Read+0x460>)
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f000 fa41 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0cb      	b.n	8001c44 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001aba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691a      	ldr	r2, [r3, #16]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001af4:	2200      	movs	r2, #0
 8001af6:	4955      	ldr	r1, [pc, #340]	@ (8001c4c <HAL_I2C_Mem_Read+0x460>)
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 fa13 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e09d      	b.n	8001c44 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691a      	ldr	r2, [r3, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	3b01      	subs	r3, #1
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b7c:	e04e      	b.n	8001c1c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b80:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 fb78 	bl	8002278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e058      	b.n	8001c44 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d124      	bne.n	8001c1c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d107      	bne.n	8001bea <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001be8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f47f aeb6 	bne.w	8001992 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e000      	b.n	8001c44 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001c42:	2302      	movs	r3, #2
  }
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3728      	adds	r7, #40	@ 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	00010004 	.word	0x00010004

08001c50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d006      	beq.n	8001c7a <I2C_MasterRequestWrite+0x2a>
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d003      	beq.n	8001c7a <I2C_MasterRequestWrite+0x2a>
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c78:	d108      	bne.n	8001c8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e00b      	b.n	8001ca4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c90:	2b12      	cmp	r3, #18
 8001c92:	d107      	bne.n	8001ca4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ca2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 f937 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00d      	beq.n	8001cd8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cca:	d103      	bne.n	8001cd4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cd2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e035      	b.n	8001d44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ce0:	d108      	bne.n	8001cf4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ce2:	897b      	ldrh	r3, [r7, #10]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001cf0:	611a      	str	r2, [r3, #16]
 8001cf2:	e01b      	b.n	8001d2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cf4:	897b      	ldrh	r3, [r7, #10]
 8001cf6:	11db      	asrs	r3, r3, #7
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	f003 0306 	and.w	r3, r3, #6
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f063 030f 	orn	r3, r3, #15
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	490e      	ldr	r1, [pc, #56]	@ (8001d4c <I2C_MasterRequestWrite+0xfc>)
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 f980 	bl	8002018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e010      	b.n	8001d44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d22:	897b      	ldrh	r3, [r7, #10]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	4907      	ldr	r1, [pc, #28]	@ (8001d50 <I2C_MasterRequestWrite+0x100>)
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 f970 	bl	8002018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	00010008 	.word	0x00010008
 8001d50:	00010002 	.word	0x00010002

08001d54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	4608      	mov	r0, r1
 8001d5e:	4611      	mov	r1, r2
 8001d60:	461a      	mov	r2, r3
 8001d62:	4603      	mov	r3, r0
 8001d64:	817b      	strh	r3, [r7, #10]
 8001d66:	460b      	mov	r3, r1
 8001d68:	813b      	strh	r3, [r7, #8]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f8c2 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00d      	beq.n	8001dc2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001db4:	d103      	bne.n	8001dbe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e0aa      	b.n	8001f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dc2:	897b      	ldrh	r3, [r7, #10]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001dd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd4:	6a3a      	ldr	r2, [r7, #32]
 8001dd6:	4952      	ldr	r1, [pc, #328]	@ (8001f20 <I2C_RequestMemoryRead+0x1cc>)
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 f91d 	bl	8002018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e097      	b.n	8001f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e00:	6a39      	ldr	r1, [r7, #32]
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 f9a8 	bl	8002158 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00d      	beq.n	8001e2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d107      	bne.n	8001e26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e076      	b.n	8001f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d105      	bne.n	8001e3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e30:	893b      	ldrh	r3, [r7, #8]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	611a      	str	r2, [r3, #16]
 8001e3a:	e021      	b.n	8001e80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e3c:	893b      	ldrh	r3, [r7, #8]
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e4c:	6a39      	ldr	r1, [r7, #32]
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 f982 	bl	8002158 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00d      	beq.n	8001e76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d107      	bne.n	8001e72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e050      	b.n	8001f18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e76:	893b      	ldrh	r3, [r7, #8]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e82:	6a39      	ldr	r1, [r7, #32]
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 f967 	bl	8002158 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00d      	beq.n	8001eac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d107      	bne.n	8001ea8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ea6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e035      	b.n	8001f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001eba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 f82b 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00d      	beq.n	8001ef0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ee2:	d103      	bne.n	8001eec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e013      	b.n	8001f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001ef0:	897b      	ldrh	r3, [r7, #10]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f02:	6a3a      	ldr	r2, [r7, #32]
 8001f04:	4906      	ldr	r1, [pc, #24]	@ (8001f20 <I2C_RequestMemoryRead+0x1cc>)
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 f886 	bl	8002018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	00010002 	.word	0x00010002

08001f24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	4613      	mov	r3, r2
 8001f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f34:	e048      	b.n	8001fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3c:	d044      	beq.n	8001fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3e:	f7fe ff4d 	bl	8000ddc <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d302      	bcc.n	8001f54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d139      	bne.n	8001fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	0c1b      	lsrs	r3, r3, #16
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d10d      	bne.n	8001f7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	43da      	mvns	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bf0c      	ite	eq
 8001f70:	2301      	moveq	r3, #1
 8001f72:	2300      	movne	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	461a      	mov	r2, r3
 8001f78:	e00c      	b.n	8001f94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	43da      	mvns	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	4013      	ands	r3, r2
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d116      	bne.n	8001fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	f043 0220 	orr.w	r2, r3, #32
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e023      	b.n	8002010 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	0c1b      	lsrs	r3, r3, #16
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d10d      	bne.n	8001fee <I2C_WaitOnFlagUntilTimeout+0xca>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	43da      	mvns	r2, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	bf0c      	ite	eq
 8001fe4:	2301      	moveq	r3, #1
 8001fe6:	2300      	movne	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	e00c      	b.n	8002008 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	43da      	mvns	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf0c      	ite	eq
 8002000:	2301      	moveq	r3, #1
 8002002:	2300      	movne	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	429a      	cmp	r2, r3
 800200c:	d093      	beq.n	8001f36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002026:	e071      	b.n	800210c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002036:	d123      	bne.n	8002080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002046:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002050:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206c:	f043 0204 	orr.w	r2, r3, #4
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e067      	b.n	8002150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002086:	d041      	beq.n	800210c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002088:	f7fe fea8 	bl	8000ddc <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	429a      	cmp	r2, r3
 8002096:	d302      	bcc.n	800209e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d136      	bne.n	800210c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	0c1b      	lsrs	r3, r3, #16
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d10c      	bne.n	80020c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4013      	ands	r3, r2
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf14      	ite	ne
 80020ba:	2301      	movne	r3, #1
 80020bc:	2300      	moveq	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	e00b      	b.n	80020da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	43da      	mvns	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	4013      	ands	r3, r2
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d016      	beq.n	800210c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	f043 0220 	orr.w	r2, r3, #32
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e021      	b.n	8002150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	0c1b      	lsrs	r3, r3, #16
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d10c      	bne.n	8002130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	43da      	mvns	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	4013      	ands	r3, r2
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	bf14      	ite	ne
 8002128:	2301      	movne	r3, #1
 800212a:	2300      	moveq	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	e00b      	b.n	8002148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	43da      	mvns	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4013      	ands	r3, r2
 800213c:	b29b      	uxth	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf14      	ite	ne
 8002142:	2301      	movne	r3, #1
 8002144:	2300      	moveq	r3, #0
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	f47f af6d 	bne.w	8002028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002164:	e034      	b.n	80021d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 f8e3 	bl	8002332 <I2C_IsAcknowledgeFailed>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e034      	b.n	80021e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217c:	d028      	beq.n	80021d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217e:	f7fe fe2d 	bl	8000ddc <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	429a      	cmp	r2, r3
 800218c:	d302      	bcc.n	8002194 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d11d      	bne.n	80021d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800219e:	2b80      	cmp	r3, #128	@ 0x80
 80021a0:	d016      	beq.n	80021d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	f043 0220 	orr.w	r2, r3, #32
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e007      	b.n	80021e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021da:	2b80      	cmp	r3, #128	@ 0x80
 80021dc:	d1c3      	bne.n	8002166 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021f4:	e034      	b.n	8002260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f89b 	bl	8002332 <I2C_IsAcknowledgeFailed>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e034      	b.n	8002270 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d028      	beq.n	8002260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220e:	f7fe fde5 	bl	8000ddc <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	429a      	cmp	r2, r3
 800221c:	d302      	bcc.n	8002224 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d11d      	bne.n	8002260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b04      	cmp	r3, #4
 8002230:	d016      	beq.n	8002260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	f043 0220 	orr.w	r2, r3, #32
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e007      	b.n	8002270 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b04      	cmp	r3, #4
 800226c:	d1c3      	bne.n	80021f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002284:	e049      	b.n	800231a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b10      	cmp	r3, #16
 8002292:	d119      	bne.n	80022c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0210 	mvn.w	r2, #16
 800229c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e030      	b.n	800232a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c8:	f7fe fd88 	bl	8000ddc <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d302      	bcc.n	80022de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d11d      	bne.n	800231a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e8:	2b40      	cmp	r3, #64	@ 0x40
 80022ea:	d016      	beq.n	800231a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	f043 0220 	orr.w	r2, r3, #32
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e007      	b.n	800232a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002324:	2b40      	cmp	r3, #64	@ 0x40
 8002326:	d1ae      	bne.n	8002286 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002348:	d11b      	bne.n	8002382 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002352:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2220      	movs	r2, #32
 800235e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	f043 0204 	orr.w	r2, r3, #4
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af02      	add	r7, sp, #8
 8002396:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e101      	b.n	80025a6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d106      	bne.n	80023c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f005 ff57 	bl	8008270 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2203      	movs	r2, #3
 80023c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023d0:	d102      	bne.n	80023d8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f002 fba4 	bl	8004b2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	7c1a      	ldrb	r2, [r3, #16]
 80023ea:	f88d 2000 	strb.w	r2, [sp]
 80023ee:	3304      	adds	r3, #4
 80023f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023f2:	f002 fa83 	bl	80048fc <USB_CoreInit>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0ce      	b.n	80025a6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f002 fb9c 	bl	8004b4c <USB_SetCurrentMode>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2202      	movs	r2, #2
 800241e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e0bf      	b.n	80025a6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002426:	2300      	movs	r3, #0
 8002428:	73fb      	strb	r3, [r7, #15]
 800242a:	e04a      	b.n	80024c2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800242c:	7bfa      	ldrb	r2, [r7, #15]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	3315      	adds	r3, #21
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002440:	7bfa      	ldrb	r2, [r7, #15]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	3314      	adds	r3, #20
 8002450:	7bfa      	ldrb	r2, [r7, #15]
 8002452:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002454:	7bfa      	ldrb	r2, [r7, #15]
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	b298      	uxth	r0, r3
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	332e      	adds	r3, #46	@ 0x2e
 8002468:	4602      	mov	r2, r0
 800246a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800246c:	7bfa      	ldrb	r2, [r7, #15]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	3318      	adds	r3, #24
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002480:	7bfa      	ldrb	r2, [r7, #15]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4413      	add	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	331c      	adds	r3, #28
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002494:	7bfa      	ldrb	r2, [r7, #15]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	3320      	adds	r3, #32
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	3324      	adds	r3, #36	@ 0x24
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	3301      	adds	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	791b      	ldrb	r3, [r3, #4]
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d3af      	bcc.n	800242c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	73fb      	strb	r3, [r7, #15]
 80024d0:	e044      	b.n	800255c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024fe:	7bfa      	ldrb	r2, [r7, #15]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002514:	7bfa      	ldrb	r2, [r7, #15]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002540:	7bfa      	ldrb	r2, [r7, #15]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	3301      	adds	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	791b      	ldrb	r3, [r3, #4]
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	429a      	cmp	r2, r3
 8002564:	d3b5      	bcc.n	80024d2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	7c1a      	ldrb	r2, [r3, #16]
 800256e:	f88d 2000 	strb.w	r2, [sp]
 8002572:	3304      	adds	r3, #4
 8002574:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002576:	f002 fb35 	bl	8004be4 <USB_DevInit>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e00c      	b.n	80025a6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f003 fb7f 	bl	8005ca2 <USB_DevDisconnect>

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_PCD_Start+0x1c>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e022      	b.n	8002610 <HAL_PCD_Start+0x62>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d009      	beq.n	80025f2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d105      	bne.n	80025f2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f002 fa86 	bl	8004b08 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f003 fb2d 	bl	8005c60 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b08d      	sub	sp, #52	@ 0x34
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f003 fbeb 	bl	8005e0a <USB_GetMode>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 848c 	bne.w	8002f54 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f003 fb4f 	bl	8005ce4 <USB_ReadInterrupts>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 8482 	beq.w	8002f52 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f003 fb3c 	bl	8005ce4 <USB_ReadInterrupts>
 800266c:	4603      	mov	r3, r0
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b02      	cmp	r3, #2
 8002674:	d107      	bne.n	8002686 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695a      	ldr	r2, [r3, #20]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f002 0202 	and.w	r2, r2, #2
 8002684:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f003 fb2a 	bl	8005ce4 <USB_ReadInterrupts>
 8002690:	4603      	mov	r3, r0
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	2b10      	cmp	r3, #16
 8002698:	d161      	bne.n	800275e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699a      	ldr	r2, [r3, #24]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0210 	bic.w	r2, r2, #16
 80026a8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	f003 020f 	and.w	r2, r3, #15
 80026b6:	4613      	mov	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	3304      	adds	r3, #4
 80026c8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	0c5b      	lsrs	r3, r3, #17
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d124      	bne.n	8002720 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d035      	beq.n	800274e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	6a38      	ldr	r0, [r7, #32]
 80026f6:	f003 f961 	bl	80059bc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002706:	441a      	add	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	091b      	lsrs	r3, r3, #4
 8002714:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002718:	441a      	add	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	615a      	str	r2, [r3, #20]
 800271e:	e016      	b.n	800274e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	0c5b      	lsrs	r3, r3, #17
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	2b06      	cmp	r3, #6
 800272a:	d110      	bne.n	800274e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002732:	2208      	movs	r2, #8
 8002734:	4619      	mov	r1, r3
 8002736:	6a38      	ldr	r0, [r7, #32]
 8002738:	f003 f940 	bl	80059bc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002748:	441a      	add	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699a      	ldr	r2, [r3, #24]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0210 	orr.w	r2, r2, #16
 800275c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f003 fabe 	bl	8005ce4 <USB_ReadInterrupts>
 8002768:	4603      	mov	r3, r0
 800276a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800276e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002772:	f040 80a7 	bne.w	80028c4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f003 fac3 	bl	8005d0a <USB_ReadDevAllOutEpInterrupt>
 8002784:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002786:	e099      	b.n	80028bc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 808e 	beq.w	80028b0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f003 fae7 	bl	8005d72 <USB_ReadDevOutEPInterrupt>
 80027a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00c      	beq.n	80027ca <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027bc:	461a      	mov	r2, r3
 80027be:	2301      	movs	r3, #1
 80027c0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80027c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 fea3 	bl	8003510 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00c      	beq.n	80027ee <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027e0:	461a      	mov	r2, r3
 80027e2:	2308      	movs	r3, #8
 80027e4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 ff79 	bl	80036e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002804:	461a      	mov	r2, r3
 8002806:	2310      	movs	r3, #16
 8002808:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d030      	beq.n	8002876 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281c:	2b80      	cmp	r3, #128	@ 0x80
 800281e:	d109      	bne.n	8002834 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800282e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002832:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002836:	4613      	mov	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	3304      	adds	r3, #4
 8002848:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	78db      	ldrb	r3, [r3, #3]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d108      	bne.n	8002864 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2200      	movs	r2, #0
 8002856:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	b2db      	uxtb	r3, r3
 800285c:	4619      	mov	r1, r3
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f005 fe02 	bl	8008468 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	4413      	add	r3, r2
 800286c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002870:	461a      	mov	r2, r3
 8002872:	2302      	movs	r3, #2
 8002874:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	4413      	add	r3, r2
 8002888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800288c:	461a      	mov	r2, r3
 800288e:	2320      	movs	r3, #32
 8002890:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d009      	beq.n	80028b0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028a8:	461a      	mov	r2, r3
 80028aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028ae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b2:	3301      	adds	r3, #1
 80028b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80028b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b8:	085b      	lsrs	r3, r3, #1
 80028ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80028bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f47f af62 	bne.w	8002788 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f003 fa0b 	bl	8005ce4 <USB_ReadInterrupts>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028d8:	f040 80db 	bne.w	8002a92 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f003 fa2c 	bl	8005d3e <USB_ReadDevAllInEpInterrupt>
 80028e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80028ec:	e0cd      	b.n	8002a8a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80c2 	beq.w	8002a7e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f003 fa52 	bl	8005dae <USB_ReadDevInEPInterrupt>
 800290a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d057      	beq.n	80029c6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	2201      	movs	r2, #1
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800292a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	43db      	mvns	r3, r3
 8002930:	69f9      	ldr	r1, [r7, #28]
 8002932:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002936:	4013      	ands	r3, r2
 8002938:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	4413      	add	r3, r2
 8002942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002946:	461a      	mov	r2, r3
 8002948:	2301      	movs	r3, #1
 800294a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	799b      	ldrb	r3, [r3, #6]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d132      	bne.n	80029ba <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3320      	adds	r3, #32
 8002964:	6819      	ldr	r1, [r3, #0]
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800296a:	4613      	mov	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4403      	add	r3, r0
 8002974:	331c      	adds	r3, #28
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4419      	add	r1, r3
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4403      	add	r3, r0
 8002988:	3320      	adds	r3, #32
 800298a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800298c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298e:	2b00      	cmp	r3, #0
 8002990:	d113      	bne.n	80029ba <HAL_PCD_IRQHandler+0x3a2>
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	3324      	adds	r3, #36	@ 0x24
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d108      	bne.n	80029ba <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029b2:	461a      	mov	r2, r3
 80029b4:	2101      	movs	r1, #1
 80029b6:	f003 fa59 	bl	8005e6c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	4619      	mov	r1, r3
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f005 fcd6 	bl	8008372 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029dc:	461a      	mov	r2, r3
 80029de:	2308      	movs	r3, #8
 80029e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029f8:	461a      	mov	r2, r3
 80029fa:	2310      	movs	r3, #16
 80029fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a14:	461a      	mov	r2, r3
 8002a16:	2340      	movs	r3, #64	@ 0x40
 8002a18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d023      	beq.n	8002a6c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a26:	6a38      	ldr	r0, [r7, #32]
 8002a28:	f002 fa40 	bl	8004eac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	3310      	adds	r3, #16
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	78db      	ldrb	r3, [r3, #3]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d108      	bne.n	8002a5a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	4619      	mov	r1, r3
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f005 fd19 	bl	800848c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a66:	461a      	mov	r2, r3
 8002a68:	2302      	movs	r3, #2
 8002a6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fcbd 	bl	80033f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	3301      	adds	r3, #1
 8002a82:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f47f af2e 	bne.w	80028ee <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f003 f924 	bl	8005ce4 <USB_ReadInterrupts>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002aa6:	d122      	bne.n	8002aee <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	69fa      	ldr	r2, [r7, #28]
 8002ab2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d108      	bne.n	8002ad8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ace:	2100      	movs	r1, #0
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fea3 	bl	800381c <HAL_PCDEx_LPM_Callback>
 8002ad6:	e002      	b.n	8002ade <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f005 fcb7 	bl	800844c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695a      	ldr	r2, [r3, #20]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f003 f8f6 	bl	8005ce4 <USB_ReadInterrupts>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b02:	d112      	bne.n	8002b2a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d102      	bne.n	8002b1a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f005 fc73 	bl	8008400 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002b28:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f003 f8d8 	bl	8005ce4 <USB_ReadInterrupts>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b3e:	f040 80b7 	bne.w	8002cb0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2110      	movs	r1, #16
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f002 f9a5 	bl	8004eac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b62:	2300      	movs	r3, #0
 8002b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b66:	e046      	b.n	8002bf6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b74:	461a      	mov	r2, r3
 8002b76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b7a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b8c:	0151      	lsls	r1, r2, #5
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	440a      	add	r2, r1
 8002b92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002b96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002bae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bc0:	0151      	lsls	r1, r2, #5
 8002bc2:	69fa      	ldr	r2, [r7, #28]
 8002bc4:	440a      	add	r2, r1
 8002bc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002bca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002bce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002be0:	0151      	lsls	r1, r2, #5
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	440a      	add	r2, r1
 8002be6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002bea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002bee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	791b      	ldrb	r3, [r3, #4]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d3b2      	bcc.n	8002b68 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c10:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002c14:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	7bdb      	ldrb	r3, [r3, #15]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d016      	beq.n	8002c4c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c2e:	f043 030b 	orr.w	r3, r3, #11
 8002c32:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c44:	f043 030b 	orr.w	r3, r3, #11
 8002c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c4a:	e015      	b.n	8002c78 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c5e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002c62:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c72:	f043 030b 	orr.w	r3, r3, #11
 8002c76:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c86:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002c8a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f003 f8e6 	bl	8005e6c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002cae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f003 f815 	bl	8005ce4 <USB_ReadInterrupts>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cc4:	d123      	bne.n	8002d0e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f003 f8ab 	bl	8005e26 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f002 f962 	bl	8004f9e <USB_GetDevSpeed>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	461a      	mov	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681c      	ldr	r4, [r3, #0]
 8002ce6:	f001 f9c9 	bl	800407c <HAL_RCC_GetHCLKFreq>
 8002cea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f001 fe66 	bl	80049c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f005 fb62 	bl	80083c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002d0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f002 ffe6 	bl	8005ce4 <USB_ReadInterrupts>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d10a      	bne.n	8002d38 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f005 fb3f 	bl	80083a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695a      	ldr	r2, [r3, #20]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f002 0208 	and.w	r2, r2, #8
 8002d36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f002 ffd1 	bl	8005ce4 <USB_ReadInterrupts>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d48:	2b80      	cmp	r3, #128	@ 0x80
 8002d4a:	d123      	bne.n	8002d94 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d58:	2301      	movs	r3, #1
 8002d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d5c:	e014      	b.n	8002d88 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d62:	4613      	mov	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d105      	bne.n	8002d82 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fb0a 	bl	8003396 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	3301      	adds	r3, #1
 8002d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	791b      	ldrb	r3, [r3, #4]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d3e4      	bcc.n	8002d5e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f002 ffa3 	bl	8005ce4 <USB_ReadInterrupts>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002da4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002da8:	d13c      	bne.n	8002e24 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002daa:	2301      	movs	r3, #1
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dae:	e02b      	b.n	8002e08 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4413      	add	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	3318      	adds	r3, #24
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d115      	bne.n	8002e02 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002dd6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	da12      	bge.n	8002e02 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	3317      	adds	r3, #23
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 faca 	bl	8003396 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	3301      	adds	r3, #1
 8002e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	791b      	ldrb	r3, [r3, #4]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d3cd      	bcc.n	8002db0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002e22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f002 ff5b 	bl	8005ce4 <USB_ReadInterrupts>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e38:	d156      	bne.n	8002ee8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e3e:	e045      	b.n	8002ecc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d12e      	bne.n	8002ec6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	da2b      	bge.n	8002ec6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002e7a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d121      	bne.n	8002ec6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e86:	4613      	mov	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10a      	bne.n	8002ec6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	69fa      	ldr	r2, [r7, #28]
 8002eba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ebe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ec2:	6053      	str	r3, [r2, #4]
            break;
 8002ec4:	e008      	b.n	8002ed8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	3301      	adds	r3, #1
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	791b      	ldrb	r3, [r3, #4]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d3b3      	bcc.n	8002e40 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002ee6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f002 fef9 	bl	8005ce4 <USB_ReadInterrupts>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002efc:	d10a      	bne.n	8002f14 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f005 fad6 	bl	80084b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002f12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f002 fee3 	bl	8005ce4 <USB_ReadInterrupts>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d115      	bne.n	8002f54 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f005 fac6 	bl	80084cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6859      	ldr	r1, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	e000      	b.n	8002f54 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002f52:	bf00      	nop
    }
  }
}
 8002f54:	3734      	adds	r7, #52	@ 0x34
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd90      	pop	{r4, r7, pc}

08002f5a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	460b      	mov	r3, r1
 8002f64:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_PCD_SetAddress+0x1a>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e012      	b.n	8002f9a <HAL_PCD_SetAddress+0x40>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f002 fe42 	bl	8005c14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	4608      	mov	r0, r1
 8002fac:	4611      	mov	r1, r2
 8002fae:	461a      	mov	r2, r3
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	70fb      	strb	r3, [r7, #3]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	803b      	strh	r3, [r7, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	da0f      	bge.n	8002fe8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	f003 020f 	and.w	r2, r3, #15
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	3310      	adds	r3, #16
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	4413      	add	r3, r2
 8002fdc:	3304      	adds	r3, #4
 8002fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	705a      	strb	r2, [r3, #1]
 8002fe6:	e00f      	b.n	8003008 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	f003 020f 	and.w	r2, r3, #15
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3304      	adds	r3, #4
 8003000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	b2da      	uxtb	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003014:	883b      	ldrh	r3, [r7, #0]
 8003016:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	78ba      	ldrb	r2, [r7, #2]
 8003022:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	785b      	ldrb	r3, [r3, #1]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d004      	beq.n	8003036 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003036:	78bb      	ldrb	r3, [r7, #2]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d102      	bne.n	8003042 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_PCD_EP_Open+0xae>
 800304c:	2302      	movs	r3, #2
 800304e:	e00e      	b.n	800306e <HAL_PCD_EP_Open+0xcc>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68f9      	ldr	r1, [r7, #12]
 800305e:	4618      	mov	r0, r3
 8003060:	f001 ffc2 	bl	8004fe8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800306c:	7afb      	ldrb	r3, [r7, #11]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	460b      	mov	r3, r1
 8003080:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003082:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003086:	2b00      	cmp	r3, #0
 8003088:	da0f      	bge.n	80030aa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	f003 020f 	and.w	r2, r3, #15
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	3310      	adds	r3, #16
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	4413      	add	r3, r2
 800309e:	3304      	adds	r3, #4
 80030a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2201      	movs	r2, #1
 80030a6:	705a      	strb	r2, [r3, #1]
 80030a8:	e00f      	b.n	80030ca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	f003 020f 	and.w	r2, r3, #15
 80030b0:	4613      	mov	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	4413      	add	r3, r2
 80030c0:	3304      	adds	r3, #4
 80030c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80030ca:	78fb      	ldrb	r3, [r7, #3]
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_PCD_EP_Close+0x6e>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e00e      	b.n	8003102 <HAL_PCD_EP_Close+0x8c>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68f9      	ldr	r1, [r7, #12]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f002 f800 	bl	80050f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	460b      	mov	r3, r1
 8003118:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800311a:	7afb      	ldrb	r3, [r7, #11]
 800311c:	f003 020f 	and.w	r2, r3, #15
 8003120:	4613      	mov	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	3304      	adds	r3, #4
 8003132:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2200      	movs	r2, #0
 8003144:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2200      	movs	r2, #0
 800314a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800314c:	7afb      	ldrb	r3, [r7, #11]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	b2da      	uxtb	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	799b      	ldrb	r3, [r3, #6]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d102      	bne.n	8003166 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	799b      	ldrb	r3, [r3, #6]
 800316e:	461a      	mov	r2, r3
 8003170:	6979      	ldr	r1, [r7, #20]
 8003172:	f002 f89d 	bl	80052b0 <USB_EPStartXfer>

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	f003 020f 	and.w	r2, r3, #15
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	460b      	mov	r3, r1
 80031be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c0:	7afb      	ldrb	r3, [r7, #11]
 80031c2:	f003 020f 	and.w	r2, r3, #15
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	3310      	adds	r3, #16
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4413      	add	r3, r2
 80031d4:	3304      	adds	r3, #4
 80031d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2200      	movs	r2, #0
 80031e8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2201      	movs	r2, #1
 80031ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031f0:	7afb      	ldrb	r3, [r7, #11]
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	799b      	ldrb	r3, [r3, #6]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d102      	bne.n	800320a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	799b      	ldrb	r3, [r3, #6]
 8003212:	461a      	mov	r2, r3
 8003214:	6979      	ldr	r1, [r7, #20]
 8003216:	f002 f84b 	bl	80052b0 <USB_EPStartXfer>

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	7912      	ldrb	r2, [r2, #4]
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e04f      	b.n	80032e2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003246:	2b00      	cmp	r3, #0
 8003248:	da0f      	bge.n	800326a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	f003 020f 	and.w	r2, r3, #15
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	3310      	adds	r3, #16
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	3304      	adds	r3, #4
 8003260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	705a      	strb	r2, [r3, #1]
 8003268:	e00d      	b.n	8003286 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	4413      	add	r3, r2
 800327c:	3304      	adds	r3, #4
 800327e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	b2da      	uxtb	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_PCD_EP_SetStall+0x82>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e01d      	b.n	80032e2 <HAL_PCD_EP_SetStall+0xbe>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68f9      	ldr	r1, [r7, #12]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f002 fbd9 	bl	8005a6c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032ba:	78fb      	ldrb	r3, [r7, #3]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d109      	bne.n	80032d8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	7999      	ldrb	r1, [r3, #6]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032d2:	461a      	mov	r2, r3
 80032d4:	f002 fdca 	bl	8005e6c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	460b      	mov	r3, r1
 80032f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	7912      	ldrb	r2, [r2, #4]
 8003300:	4293      	cmp	r3, r2
 8003302:	d901      	bls.n	8003308 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e042      	b.n	800338e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800330c:	2b00      	cmp	r3, #0
 800330e:	da0f      	bge.n	8003330 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	f003 020f 	and.w	r2, r3, #15
 8003316:	4613      	mov	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	3310      	adds	r3, #16
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	4413      	add	r3, r2
 8003324:	3304      	adds	r3, #4
 8003326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	705a      	strb	r2, [r3, #1]
 800332e:	e00f      	b.n	8003350 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	f003 020f 	and.w	r2, r3, #15
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	3304      	adds	r3, #4
 8003348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003356:	78fb      	ldrb	r3, [r7, #3]
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	b2da      	uxtb	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_PCD_EP_ClrStall+0x86>
 800336c:	2302      	movs	r3, #2
 800336e:	e00e      	b.n	800338e <HAL_PCD_EP_ClrStall+0xa4>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68f9      	ldr	r1, [r7, #12]
 800337e:	4618      	mov	r0, r3
 8003380:	f002 fbe2 	bl	8005b48 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b084      	sub	sp, #16
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	460b      	mov	r3, r1
 80033a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80033a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	da0c      	bge.n	80033c4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033aa:	78fb      	ldrb	r3, [r7, #3]
 80033ac:	f003 020f 	and.w	r2, r3, #15
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	3310      	adds	r3, #16
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	3304      	adds	r3, #4
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	e00c      	b.n	80033de <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	f003 020f 	and.w	r2, r3, #15
 80033ca:	4613      	mov	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	3304      	adds	r3, #4
 80033dc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68f9      	ldr	r1, [r7, #12]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f002 fa01 	bl	80057ec <USB_EPStopXfer>
 80033ea:	4603      	mov	r3, r0
 80033ec:	72fb      	strb	r3, [r7, #11]

  return ret;
 80033ee:	7afb      	ldrb	r3, [r7, #11]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	@ 0x28
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	4613      	mov	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4413      	add	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	3310      	adds	r3, #16
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	4413      	add	r3, r2
 800341c:	3304      	adds	r3, #4
 800341e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	429a      	cmp	r2, r3
 800342a:	d901      	bls.n	8003430 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e06b      	b.n	8003508 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	429a      	cmp	r2, r3
 8003444:	d902      	bls.n	800344c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	3303      	adds	r3, #3
 8003450:	089b      	lsrs	r3, r3, #2
 8003452:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003454:	e02a      	b.n	80034ac <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	429a      	cmp	r2, r3
 800346a:	d902      	bls.n	8003472 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3303      	adds	r3, #3
 8003476:	089b      	lsrs	r3, r3, #2
 8003478:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	68d9      	ldr	r1, [r3, #12]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	b2da      	uxtb	r2, r3
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	4603      	mov	r3, r0
 800348e:	6978      	ldr	r0, [r7, #20]
 8003490:	f002 fa56 	bl	8005940 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	441a      	add	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	441a      	add	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d809      	bhi.n	80034d6 <PCD_WriteEmptyTxFifo+0xde>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	695a      	ldr	r2, [r3, #20]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d203      	bcs.n	80034d6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1bf      	bne.n	8003456 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d811      	bhi.n	8003506 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	2201      	movs	r2, #1
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	43db      	mvns	r3, r3
 80034fc:	6939      	ldr	r1, [r7, #16]
 80034fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003502:	4013      	ands	r3, r2
 8003504:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3720      	adds	r7, #32
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	333c      	adds	r3, #60	@ 0x3c
 8003528:	3304      	adds	r3, #4
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	4413      	add	r3, r2
 8003536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	799b      	ldrb	r3, [r3, #6]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d17b      	bne.n	800363e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d015      	beq.n	800357c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	4a61      	ldr	r2, [pc, #388]	@ (80036d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	f240 80b9 	bls.w	80036cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80b3 	beq.w	80036cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003572:	461a      	mov	r2, r3
 8003574:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003578:	6093      	str	r3, [r2, #8]
 800357a:	e0a7      	b.n	80036cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d009      	beq.n	800359a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	4413      	add	r3, r2
 800358e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003592:	461a      	mov	r2, r3
 8003594:	2320      	movs	r3, #32
 8003596:	6093      	str	r3, [r2, #8]
 8003598:	e098      	b.n	80036cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f040 8093 	bne.w	80036cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	4a4b      	ldr	r2, [pc, #300]	@ (80036d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d90f      	bls.n	80035ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035c4:	461a      	mov	r2, r3
 80035c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035ca:	6093      	str	r3, [r2, #8]
 80035cc:	e07e      	b.n	80036cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	4413      	add	r3, r2
 80035e0:	3304      	adds	r3, #4
 80035e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a1a      	ldr	r2, [r3, #32]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	0159      	lsls	r1, r3, #5
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	440b      	add	r3, r1
 80035f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035fa:	1ad2      	subs	r2, r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d114      	bne.n	8003630 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d109      	bne.n	8003622 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003618:	461a      	mov	r2, r3
 800361a:	2101      	movs	r1, #1
 800361c:	f002 fc26 	bl	8005e6c <USB_EP0_OutStart>
 8003620:	e006      	b.n	8003630 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	441a      	add	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	4619      	mov	r1, r3
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f004 fe80 	bl	800833c <HAL_PCD_DataOutStageCallback>
 800363c:	e046      	b.n	80036cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	4a26      	ldr	r2, [pc, #152]	@ (80036dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d124      	bne.n	8003690 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800365c:	461a      	mov	r2, r3
 800365e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003662:	6093      	str	r3, [r2, #8]
 8003664:	e032      	b.n	80036cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	4413      	add	r3, r2
 8003678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800367c:	461a      	mov	r2, r3
 800367e:	2320      	movs	r3, #32
 8003680:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	4619      	mov	r1, r3
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f004 fe57 	bl	800833c <HAL_PCD_DataOutStageCallback>
 800368e:	e01d      	b.n	80036cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d114      	bne.n	80036c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	4613      	mov	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d108      	bne.n	80036c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036b8:	461a      	mov	r2, r3
 80036ba:	2100      	movs	r1, #0
 80036bc:	f002 fbd6 	bl	8005e6c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	4619      	mov	r1, r3
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f004 fe38 	bl	800833c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3720      	adds	r7, #32
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	4f54300a 	.word	0x4f54300a
 80036dc:	4f54310a 	.word	0x4f54310a

080036e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	333c      	adds	r3, #60	@ 0x3c
 80036f8:	3304      	adds	r3, #4
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4a15      	ldr	r2, [pc, #84]	@ (8003768 <PCD_EP_OutSetupPacket_int+0x88>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d90e      	bls.n	8003734 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800371c:	2b00      	cmp	r3, #0
 800371e:	d009      	beq.n	8003734 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4413      	add	r3, r2
 8003728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800372c:	461a      	mov	r2, r3
 800372e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003732:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f004 fdef 	bl	8008318 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4a0a      	ldr	r2, [pc, #40]	@ (8003768 <PCD_EP_OutSetupPacket_int+0x88>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d90c      	bls.n	800375c <PCD_EP_OutSetupPacket_int+0x7c>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	799b      	ldrb	r3, [r3, #6]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d108      	bne.n	800375c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003754:	461a      	mov	r2, r3
 8003756:	2101      	movs	r1, #1
 8003758:	f002 fb88 	bl	8005e6c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	4f54300a 	.word	0x4f54300a

0800376c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	70fb      	strb	r3, [r7, #3]
 8003778:	4613      	mov	r3, r2
 800377a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d107      	bne.n	800379a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800378a:	883b      	ldrh	r3, [r7, #0]
 800378c:	0419      	lsls	r1, r3, #16
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	430a      	orrs	r2, r1
 8003796:	629a      	str	r2, [r3, #40]	@ 0x28
 8003798:	e028      	b.n	80037ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	4413      	add	r3, r2
 80037a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037a8:	2300      	movs	r3, #0
 80037aa:	73fb      	strb	r3, [r7, #15]
 80037ac:	e00d      	b.n	80037ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	3340      	adds	r3, #64	@ 0x40
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	0c1b      	lsrs	r3, r3, #16
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	4413      	add	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	3301      	adds	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
 80037ca:	7bfa      	ldrb	r2, [r7, #15]
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d3ec      	bcc.n	80037ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037d4:	883b      	ldrh	r3, [r7, #0]
 80037d6:	0418      	lsls	r0, r3, #16
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6819      	ldr	r1, [r3, #0]
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	3b01      	subs	r3, #1
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	4302      	orrs	r2, r0
 80037e4:	3340      	adds	r3, #64	@ 0x40
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	460b      	mov	r3, r1
 8003804:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	887a      	ldrh	r2, [r7, #2]
 800380c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e267      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d075      	beq.n	800393e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003852:	4b88      	ldr	r3, [pc, #544]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 030c 	and.w	r3, r3, #12
 800385a:	2b04      	cmp	r3, #4
 800385c:	d00c      	beq.n	8003878 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800385e:	4b85      	ldr	r3, [pc, #532]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003866:	2b08      	cmp	r3, #8
 8003868:	d112      	bne.n	8003890 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800386a:	4b82      	ldr	r3, [pc, #520]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003872:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003876:	d10b      	bne.n	8003890 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003878:	4b7e      	ldr	r3, [pc, #504]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d05b      	beq.n	800393c <HAL_RCC_OscConfig+0x108>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d157      	bne.n	800393c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e242      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003898:	d106      	bne.n	80038a8 <HAL_RCC_OscConfig+0x74>
 800389a:	4b76      	ldr	r3, [pc, #472]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a75      	ldr	r2, [pc, #468]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e01d      	b.n	80038e4 <HAL_RCC_OscConfig+0xb0>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038b0:	d10c      	bne.n	80038cc <HAL_RCC_OscConfig+0x98>
 80038b2:	4b70      	ldr	r3, [pc, #448]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a6f      	ldr	r2, [pc, #444]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	4b6d      	ldr	r3, [pc, #436]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6c      	ldr	r2, [pc, #432]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e00b      	b.n	80038e4 <HAL_RCC_OscConfig+0xb0>
 80038cc:	4b69      	ldr	r3, [pc, #420]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a68      	ldr	r2, [pc, #416]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	4b66      	ldr	r3, [pc, #408]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a65      	ldr	r2, [pc, #404]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d013      	beq.n	8003914 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fd fa76 	bl	8000ddc <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f4:	f7fd fa72 	bl	8000ddc <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	@ 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e207      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b5b      	ldr	r3, [pc, #364]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0xc0>
 8003912:	e014      	b.n	800393e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fd fa62 	bl	8000ddc <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800391c:	f7fd fa5e 	bl	8000ddc <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	@ 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e1f3      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392e:	4b51      	ldr	r3, [pc, #324]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0xe8>
 800393a:	e000      	b.n	800393e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d063      	beq.n	8003a12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800394a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00b      	beq.n	800396e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003956:	4b47      	ldr	r3, [pc, #284]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800395e:	2b08      	cmp	r3, #8
 8003960:	d11c      	bne.n	800399c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003962:	4b44      	ldr	r3, [pc, #272]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d116      	bne.n	800399c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396e:	4b41      	ldr	r3, [pc, #260]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <HAL_RCC_OscConfig+0x152>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d001      	beq.n	8003986 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e1c7      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003986:	4b3b      	ldr	r3, [pc, #236]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4937      	ldr	r1, [pc, #220]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399a:	e03a      	b.n	8003a12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d020      	beq.n	80039e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a4:	4b34      	ldr	r3, [pc, #208]	@ (8003a78 <HAL_RCC_OscConfig+0x244>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039aa:	f7fd fa17 	bl	8000ddc <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b2:	f7fd fa13 	bl	8000ddc <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e1a8      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d0:	4b28      	ldr	r3, [pc, #160]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4925      	ldr	r1, [pc, #148]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	600b      	str	r3, [r1, #0]
 80039e4:	e015      	b.n	8003a12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e6:	4b24      	ldr	r3, [pc, #144]	@ (8003a78 <HAL_RCC_OscConfig+0x244>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ec:	f7fd f9f6 	bl	8000ddc <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f4:	f7fd f9f2 	bl	8000ddc <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e187      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a06:	4b1b      	ldr	r3, [pc, #108]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d036      	beq.n	8003a8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d016      	beq.n	8003a54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a26:	4b15      	ldr	r3, [pc, #84]	@ (8003a7c <HAL_RCC_OscConfig+0x248>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2c:	f7fd f9d6 	bl	8000ddc <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a34:	f7fd f9d2 	bl	8000ddc <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e167      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a46:	4b0b      	ldr	r3, [pc, #44]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x200>
 8003a52:	e01b      	b.n	8003a8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a54:	4b09      	ldr	r3, [pc, #36]	@ (8003a7c <HAL_RCC_OscConfig+0x248>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5a:	f7fd f9bf 	bl	8000ddc <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a60:	e00e      	b.n	8003a80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a62:	f7fd f9bb 	bl	8000ddc <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d907      	bls.n	8003a80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e150      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
 8003a74:	40023800 	.word	0x40023800
 8003a78:	42470000 	.word	0x42470000
 8003a7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a80:	4b88      	ldr	r3, [pc, #544]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1ea      	bne.n	8003a62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8097 	beq.w	8003bc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9e:	4b81      	ldr	r3, [pc, #516]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10f      	bne.n	8003aca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	4b7d      	ldr	r3, [pc, #500]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aba:	4b7a      	ldr	r3, [pc, #488]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aca:	4b77      	ldr	r3, [pc, #476]	@ (8003ca8 <HAL_RCC_OscConfig+0x474>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d118      	bne.n	8003b08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad6:	4b74      	ldr	r3, [pc, #464]	@ (8003ca8 <HAL_RCC_OscConfig+0x474>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a73      	ldr	r2, [pc, #460]	@ (8003ca8 <HAL_RCC_OscConfig+0x474>)
 8003adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae2:	f7fd f97b 	bl	8000ddc <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aea:	f7fd f977 	bl	8000ddc <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e10c      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afc:	4b6a      	ldr	r3, [pc, #424]	@ (8003ca8 <HAL_RCC_OscConfig+0x474>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d106      	bne.n	8003b1e <HAL_RCC_OscConfig+0x2ea>
 8003b10:	4b64      	ldr	r3, [pc, #400]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b14:	4a63      	ldr	r2, [pc, #396]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b1c:	e01c      	b.n	8003b58 <HAL_RCC_OscConfig+0x324>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b05      	cmp	r3, #5
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x30c>
 8003b26:	4b5f      	ldr	r3, [pc, #380]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	4a5e      	ldr	r2, [pc, #376]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b2c:	f043 0304 	orr.w	r3, r3, #4
 8003b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b32:	4b5c      	ldr	r3, [pc, #368]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b36:	4a5b      	ldr	r2, [pc, #364]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b3e:	e00b      	b.n	8003b58 <HAL_RCC_OscConfig+0x324>
 8003b40:	4b58      	ldr	r3, [pc, #352]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b44:	4a57      	ldr	r2, [pc, #348]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b4c:	4b55      	ldr	r3, [pc, #340]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b50:	4a54      	ldr	r2, [pc, #336]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b52:	f023 0304 	bic.w	r3, r3, #4
 8003b56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d015      	beq.n	8003b8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b60:	f7fd f93c 	bl	8000ddc <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b68:	f7fd f938 	bl	8000ddc <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e0cb      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7e:	4b49      	ldr	r3, [pc, #292]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0ee      	beq.n	8003b68 <HAL_RCC_OscConfig+0x334>
 8003b8a:	e014      	b.n	8003bb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8c:	f7fd f926 	bl	8000ddc <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b92:	e00a      	b.n	8003baa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b94:	f7fd f922 	bl	8000ddc <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e0b5      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003baa:	4b3e      	ldr	r3, [pc, #248]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1ee      	bne.n	8003b94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bb6:	7dfb      	ldrb	r3, [r7, #23]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d105      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bbc:	4b39      	ldr	r3, [pc, #228]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc0:	4a38      	ldr	r2, [pc, #224]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 80a1 	beq.w	8003d14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bd2:	4b34      	ldr	r3, [pc, #208]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d05c      	beq.n	8003c98 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d141      	bne.n	8003c6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be6:	4b31      	ldr	r3, [pc, #196]	@ (8003cac <HAL_RCC_OscConfig+0x478>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bec:	f7fd f8f6 	bl	8000ddc <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf4:	f7fd f8f2 	bl	8000ddc <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e087      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c06:	4b27      	ldr	r3, [pc, #156]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69da      	ldr	r2, [r3, #28]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	019b      	lsls	r3, r3, #6
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c34:	061b      	lsls	r3, r3, #24
 8003c36:	491b      	ldr	r1, [pc, #108]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cac <HAL_RCC_OscConfig+0x478>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c42:	f7fd f8cb 	bl	8000ddc <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4a:	f7fd f8c7 	bl	8000ddc <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e05c      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x416>
 8003c68:	e054      	b.n	8003d14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6a:	4b10      	ldr	r3, [pc, #64]	@ (8003cac <HAL_RCC_OscConfig+0x478>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7fd f8b4 	bl	8000ddc <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c78:	f7fd f8b0 	bl	8000ddc <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e045      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0x444>
 8003c96:	e03d      	b.n	8003d14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d107      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e038      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	40007000 	.word	0x40007000
 8003cac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d20 <HAL_RCC_OscConfig+0x4ec>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d028      	beq.n	8003d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d121      	bne.n	8003d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d11a      	bne.n	8003d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ce6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d111      	bne.n	8003d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf6:	085b      	lsrs	r3, r3, #1
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d107      	bne.n	8003d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d001      	beq.n	8003d14 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40023800 	.word	0x40023800

08003d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0cc      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d38:	4b68      	ldr	r3, [pc, #416]	@ (8003edc <HAL_RCC_ClockConfig+0x1b8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d90c      	bls.n	8003d60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d46:	4b65      	ldr	r3, [pc, #404]	@ (8003edc <HAL_RCC_ClockConfig+0x1b8>)
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4e:	4b63      	ldr	r3, [pc, #396]	@ (8003edc <HAL_RCC_ClockConfig+0x1b8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e0b8      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d020      	beq.n	8003dae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d78:	4b59      	ldr	r3, [pc, #356]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4a58      	ldr	r2, [pc, #352]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d90:	4b53      	ldr	r3, [pc, #332]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	4a52      	ldr	r2, [pc, #328]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d9c:	4b50      	ldr	r3, [pc, #320]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	494d      	ldr	r1, [pc, #308]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d044      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d107      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	4b47      	ldr	r3, [pc, #284]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d119      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e07f      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d003      	beq.n	8003de2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d107      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e06f      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e067      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e02:	4b37      	ldr	r3, [pc, #220]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f023 0203 	bic.w	r2, r3, #3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	4934      	ldr	r1, [pc, #208]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e14:	f7fc ffe2 	bl	8000ddc <HAL_GetTick>
 8003e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e1c:	f7fc ffde 	bl	8000ddc <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e04f      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e32:	4b2b      	ldr	r3, [pc, #172]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 020c 	and.w	r2, r3, #12
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d1eb      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e44:	4b25      	ldr	r3, [pc, #148]	@ (8003edc <HAL_RCC_ClockConfig+0x1b8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d20c      	bcs.n	8003e6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e52:	4b22      	ldr	r3, [pc, #136]	@ (8003edc <HAL_RCC_ClockConfig+0x1b8>)
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5a:	4b20      	ldr	r3, [pc, #128]	@ (8003edc <HAL_RCC_ClockConfig+0x1b8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d001      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e032      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e78:	4b19      	ldr	r3, [pc, #100]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4916      	ldr	r1, [pc, #88]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d009      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e96:	4b12      	ldr	r3, [pc, #72]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	490e      	ldr	r1, [pc, #56]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eaa:	f000 f821 	bl	8003ef0 <HAL_RCC_GetSysClockFreq>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	490a      	ldr	r1, [pc, #40]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8003ebc:	5ccb      	ldrb	r3, [r1, r3]
 8003ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec2:	4a09      	ldr	r2, [pc, #36]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ec6:	4b09      	ldr	r3, [pc, #36]	@ (8003eec <HAL_RCC_ClockConfig+0x1c8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fc ff42 	bl	8000d54 <HAL_InitTick>

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40023c00 	.word	0x40023c00
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	080092c0 	.word	0x080092c0
 8003ee8:	20000004 	.word	0x20000004
 8003eec:	20000008 	.word	0x20000008

08003ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef4:	b090      	sub	sp, #64	@ 0x40
 8003ef6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f08:	4b59      	ldr	r3, [pc, #356]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 030c 	and.w	r3, r3, #12
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d00d      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x40>
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	f200 80a1 	bhi.w	800405c <HAL_RCC_GetSysClockFreq+0x16c>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0x34>
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d003      	beq.n	8003f2a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f22:	e09b      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f24:	4b53      	ldr	r3, [pc, #332]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f26:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f28:	e09b      	b.n	8004062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f2a:	4b53      	ldr	r3, [pc, #332]	@ (8004078 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f2e:	e098      	b.n	8004062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f30:	4b4f      	ldr	r3, [pc, #316]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f38:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f3a:	4b4d      	ldr	r3, [pc, #308]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d028      	beq.n	8003f98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f46:	4b4a      	ldr	r3, [pc, #296]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	099b      	lsrs	r3, r3, #6
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	623b      	str	r3, [r7, #32]
 8003f50:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f58:	2100      	movs	r1, #0
 8003f5a:	4b47      	ldr	r3, [pc, #284]	@ (8004078 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f5c:	fb03 f201 	mul.w	r2, r3, r1
 8003f60:	2300      	movs	r3, #0
 8003f62:	fb00 f303 	mul.w	r3, r0, r3
 8003f66:	4413      	add	r3, r2
 8003f68:	4a43      	ldr	r2, [pc, #268]	@ (8004078 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f6a:	fba0 1202 	umull	r1, r2, r0, r2
 8003f6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f70:	460a      	mov	r2, r1
 8003f72:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003f74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f76:	4413      	add	r3, r2
 8003f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	61bb      	str	r3, [r7, #24]
 8003f80:	61fa      	str	r2, [r7, #28]
 8003f82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003f8a:	f7fc f981 	bl	8000290 <__aeabi_uldivmod>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4613      	mov	r3, r2
 8003f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f96:	e053      	b.n	8004040 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f98:	4b35      	ldr	r3, [pc, #212]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	099b      	lsrs	r3, r3, #6
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	617a      	str	r2, [r7, #20]
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003faa:	f04f 0b00 	mov.w	fp, #0
 8003fae:	4652      	mov	r2, sl
 8003fb0:	465b      	mov	r3, fp
 8003fb2:	f04f 0000 	mov.w	r0, #0
 8003fb6:	f04f 0100 	mov.w	r1, #0
 8003fba:	0159      	lsls	r1, r3, #5
 8003fbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fc0:	0150      	lsls	r0, r2, #5
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	ebb2 080a 	subs.w	r8, r2, sl
 8003fca:	eb63 090b 	sbc.w	r9, r3, fp
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	f04f 0300 	mov.w	r3, #0
 8003fd6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003fda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003fde:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003fe2:	ebb2 0408 	subs.w	r4, r2, r8
 8003fe6:	eb63 0509 	sbc.w	r5, r3, r9
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	00eb      	lsls	r3, r5, #3
 8003ff4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ff8:	00e2      	lsls	r2, r4, #3
 8003ffa:	4614      	mov	r4, r2
 8003ffc:	461d      	mov	r5, r3
 8003ffe:	eb14 030a 	adds.w	r3, r4, sl
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	eb45 030b 	adc.w	r3, r5, fp
 8004008:	607b      	str	r3, [r7, #4]
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004016:	4629      	mov	r1, r5
 8004018:	028b      	lsls	r3, r1, #10
 800401a:	4621      	mov	r1, r4
 800401c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004020:	4621      	mov	r1, r4
 8004022:	028a      	lsls	r2, r1, #10
 8004024:	4610      	mov	r0, r2
 8004026:	4619      	mov	r1, r3
 8004028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800402a:	2200      	movs	r2, #0
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	60fa      	str	r2, [r7, #12]
 8004030:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004034:	f7fc f92c 	bl	8000290 <__aeabi_uldivmod>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4613      	mov	r3, r2
 800403e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004040:	4b0b      	ldr	r3, [pc, #44]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x180>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	0c1b      	lsrs	r3, r3, #16
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	3301      	adds	r3, #1
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004050:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004054:	fbb2 f3f3 	udiv	r3, r2, r3
 8004058:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800405a:	e002      	b.n	8004062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800405c:	4b05      	ldr	r3, [pc, #20]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x184>)
 800405e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004064:	4618      	mov	r0, r3
 8004066:	3740      	adds	r7, #64	@ 0x40
 8004068:	46bd      	mov	sp, r7
 800406a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800
 8004074:	00f42400 	.word	0x00f42400
 8004078:	017d7840 	.word	0x017d7840

0800407c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004080:	4b03      	ldr	r3, [pc, #12]	@ (8004090 <HAL_RCC_GetHCLKFreq+0x14>)
 8004082:	681b      	ldr	r3, [r3, #0]
}
 8004084:	4618      	mov	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	20000004 	.word	0x20000004

08004094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004098:	f7ff fff0 	bl	800407c <HAL_RCC_GetHCLKFreq>
 800409c:	4602      	mov	r2, r0
 800409e:	4b05      	ldr	r3, [pc, #20]	@ (80040b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	0a9b      	lsrs	r3, r3, #10
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	4903      	ldr	r1, [pc, #12]	@ (80040b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040aa:	5ccb      	ldrb	r3, [r1, r3]
 80040ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40023800 	.word	0x40023800
 80040b8:	080092d0 	.word	0x080092d0

080040bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040c0:	f7ff ffdc 	bl	800407c <HAL_RCC_GetHCLKFreq>
 80040c4:	4602      	mov	r2, r0
 80040c6:	4b05      	ldr	r3, [pc, #20]	@ (80040dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	0b5b      	lsrs	r3, r3, #13
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	4903      	ldr	r1, [pc, #12]	@ (80040e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040d2:	5ccb      	ldrb	r3, [r1, r3]
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d8:	4618      	mov	r0, r3
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40023800 	.word	0x40023800
 80040e0:	080092d0 	.word	0x080092d0

080040e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e042      	b.n	800417c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fc fd0c 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2224      	movs	r2, #36	@ 0x24
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004126:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f973 	bl	8004414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800413c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695a      	ldr	r2, [r3, #20]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800414c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800415c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08a      	sub	sp, #40	@ 0x28
 8004188:	af02      	add	r7, sp, #8
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	4613      	mov	r3, r2
 8004192:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	d175      	bne.n	8004290 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <HAL_UART_Transmit+0x2c>
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e06e      	b.n	8004292 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2221      	movs	r2, #33	@ 0x21
 80041be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041c2:	f7fc fe0b 	bl	8000ddc <HAL_GetTick>
 80041c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	88fa      	ldrh	r2, [r7, #6]
 80041cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	88fa      	ldrh	r2, [r7, #6]
 80041d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041dc:	d108      	bne.n	80041f0 <HAL_UART_Transmit+0x6c>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d104      	bne.n	80041f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	61bb      	str	r3, [r7, #24]
 80041ee:	e003      	b.n	80041f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041f8:	e02e      	b.n	8004258 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2200      	movs	r2, #0
 8004202:	2180      	movs	r1, #128	@ 0x80
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f848 	bl	800429a <UART_WaitOnFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e03a      	b.n	8004292 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10b      	bne.n	800423a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004230:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	3302      	adds	r3, #2
 8004236:	61bb      	str	r3, [r7, #24]
 8004238:	e007      	b.n	800424a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	781a      	ldrb	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	3301      	adds	r3, #1
 8004248:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1cb      	bne.n	80041fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2200      	movs	r2, #0
 800426a:	2140      	movs	r1, #64	@ 0x40
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f814 	bl	800429a <UART_WaitOnFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e006      	b.n	8004292 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	e000      	b.n	8004292 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004290:	2302      	movs	r3, #2
  }
}
 8004292:	4618      	mov	r0, r3
 8004294:	3720      	adds	r7, #32
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b086      	sub	sp, #24
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	603b      	str	r3, [r7, #0]
 80042a6:	4613      	mov	r3, r2
 80042a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042aa:	e03b      	b.n	8004324 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b2:	d037      	beq.n	8004324 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b4:	f7fc fd92 	bl	8000ddc <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	6a3a      	ldr	r2, [r7, #32]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d302      	bcc.n	80042ca <UART_WaitOnFlagUntilTimeout+0x30>
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e03a      	b.n	8004344 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d023      	beq.n	8004324 <UART_WaitOnFlagUntilTimeout+0x8a>
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b80      	cmp	r3, #128	@ 0x80
 80042e0:	d020      	beq.n	8004324 <UART_WaitOnFlagUntilTimeout+0x8a>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b40      	cmp	r3, #64	@ 0x40
 80042e6:	d01d      	beq.n	8004324 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d116      	bne.n	8004324 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f81d 	bl	800434c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2208      	movs	r2, #8
 8004316:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e00f      	b.n	8004344 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4013      	ands	r3, r2
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	429a      	cmp	r2, r3
 8004332:	bf0c      	ite	eq
 8004334:	2301      	moveq	r3, #1
 8004336:	2300      	movne	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	461a      	mov	r2, r3
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	429a      	cmp	r2, r3
 8004340:	d0b4      	beq.n	80042ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800434c:	b480      	push	{r7}
 800434e:	b095      	sub	sp, #84	@ 0x54
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	330c      	adds	r3, #12
 800435a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004366:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800436a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004374:	643a      	str	r2, [r7, #64]	@ 0x40
 8004376:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800437a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e5      	bne.n	8004354 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3314      	adds	r3, #20
 800438e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	61fb      	str	r3, [r7, #28]
   return(result);
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f023 0301 	bic.w	r3, r3, #1
 800439e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3314      	adds	r3, #20
 80043a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e5      	bne.n	8004388 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d119      	bne.n	80043f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	330c      	adds	r3, #12
 80043ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f023 0310 	bic.w	r3, r3, #16
 80043da:	647b      	str	r3, [r7, #68]	@ 0x44
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	330c      	adds	r3, #12
 80043e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043e4:	61ba      	str	r2, [r7, #24]
 80043e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	6979      	ldr	r1, [r7, #20]
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	e841 2300 	strex	r3, r2, [r1]
 80043f0:	613b      	str	r3, [r7, #16]
   return(result);
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e5      	bne.n	80043c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004406:	bf00      	nop
 8004408:	3754      	adds	r7, #84	@ 0x54
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004418:	b0c0      	sub	sp, #256	@ 0x100
 800441a:	af00      	add	r7, sp, #0
 800441c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004430:	68d9      	ldr	r1, [r3, #12]
 8004432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	ea40 0301 	orr.w	r3, r0, r1
 800443c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800443e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	431a      	orrs	r2, r3
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	431a      	orrs	r2, r3
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800446c:	f021 010c 	bic.w	r1, r1, #12
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800447a:	430b      	orrs	r3, r1
 800447c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800448a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448e:	6999      	ldr	r1, [r3, #24]
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	ea40 0301 	orr.w	r3, r0, r1
 800449a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800449c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4b8f      	ldr	r3, [pc, #572]	@ (80046e0 <UART_SetConfig+0x2cc>)
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d005      	beq.n	80044b4 <UART_SetConfig+0xa0>
 80044a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	4b8d      	ldr	r3, [pc, #564]	@ (80046e4 <UART_SetConfig+0x2d0>)
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d104      	bne.n	80044be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044b4:	f7ff fe02 	bl	80040bc <HAL_RCC_GetPCLK2Freq>
 80044b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80044bc:	e003      	b.n	80044c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044be:	f7ff fde9 	bl	8004094 <HAL_RCC_GetPCLK1Freq>
 80044c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044d0:	f040 810c 	bne.w	80046ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044d8:	2200      	movs	r2, #0
 80044da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80044e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80044e6:	4622      	mov	r2, r4
 80044e8:	462b      	mov	r3, r5
 80044ea:	1891      	adds	r1, r2, r2
 80044ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80044ee:	415b      	adcs	r3, r3
 80044f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044f6:	4621      	mov	r1, r4
 80044f8:	eb12 0801 	adds.w	r8, r2, r1
 80044fc:	4629      	mov	r1, r5
 80044fe:	eb43 0901 	adc.w	r9, r3, r1
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800450e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004516:	4690      	mov	r8, r2
 8004518:	4699      	mov	r9, r3
 800451a:	4623      	mov	r3, r4
 800451c:	eb18 0303 	adds.w	r3, r8, r3
 8004520:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004524:	462b      	mov	r3, r5
 8004526:	eb49 0303 	adc.w	r3, r9, r3
 800452a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800452e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800453a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800453e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004542:	460b      	mov	r3, r1
 8004544:	18db      	adds	r3, r3, r3
 8004546:	653b      	str	r3, [r7, #80]	@ 0x50
 8004548:	4613      	mov	r3, r2
 800454a:	eb42 0303 	adc.w	r3, r2, r3
 800454e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004550:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004554:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004558:	f7fb fe9a 	bl	8000290 <__aeabi_uldivmod>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4b61      	ldr	r3, [pc, #388]	@ (80046e8 <UART_SetConfig+0x2d4>)
 8004562:	fba3 2302 	umull	r2, r3, r3, r2
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	011c      	lsls	r4, r3, #4
 800456a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800456e:	2200      	movs	r2, #0
 8004570:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004574:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004578:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800457c:	4642      	mov	r2, r8
 800457e:	464b      	mov	r3, r9
 8004580:	1891      	adds	r1, r2, r2
 8004582:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004584:	415b      	adcs	r3, r3
 8004586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004588:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800458c:	4641      	mov	r1, r8
 800458e:	eb12 0a01 	adds.w	sl, r2, r1
 8004592:	4649      	mov	r1, r9
 8004594:	eb43 0b01 	adc.w	fp, r3, r1
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045ac:	4692      	mov	sl, r2
 80045ae:	469b      	mov	fp, r3
 80045b0:	4643      	mov	r3, r8
 80045b2:	eb1a 0303 	adds.w	r3, sl, r3
 80045b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045ba:	464b      	mov	r3, r9
 80045bc:	eb4b 0303 	adc.w	r3, fp, r3
 80045c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80045d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045d8:	460b      	mov	r3, r1
 80045da:	18db      	adds	r3, r3, r3
 80045dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80045de:	4613      	mov	r3, r2
 80045e0:	eb42 0303 	adc.w	r3, r2, r3
 80045e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80045ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80045ee:	f7fb fe4f 	bl	8000290 <__aeabi_uldivmod>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4611      	mov	r1, r2
 80045f8:	4b3b      	ldr	r3, [pc, #236]	@ (80046e8 <UART_SetConfig+0x2d4>)
 80045fa:	fba3 2301 	umull	r2, r3, r3, r1
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	2264      	movs	r2, #100	@ 0x64
 8004602:	fb02 f303 	mul.w	r3, r2, r3
 8004606:	1acb      	subs	r3, r1, r3
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800460e:	4b36      	ldr	r3, [pc, #216]	@ (80046e8 <UART_SetConfig+0x2d4>)
 8004610:	fba3 2302 	umull	r2, r3, r3, r2
 8004614:	095b      	lsrs	r3, r3, #5
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800461c:	441c      	add	r4, r3
 800461e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004622:	2200      	movs	r2, #0
 8004624:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004628:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800462c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004630:	4642      	mov	r2, r8
 8004632:	464b      	mov	r3, r9
 8004634:	1891      	adds	r1, r2, r2
 8004636:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004638:	415b      	adcs	r3, r3
 800463a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800463c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004640:	4641      	mov	r1, r8
 8004642:	1851      	adds	r1, r2, r1
 8004644:	6339      	str	r1, [r7, #48]	@ 0x30
 8004646:	4649      	mov	r1, r9
 8004648:	414b      	adcs	r3, r1
 800464a:	637b      	str	r3, [r7, #52]	@ 0x34
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004658:	4659      	mov	r1, fp
 800465a:	00cb      	lsls	r3, r1, #3
 800465c:	4651      	mov	r1, sl
 800465e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004662:	4651      	mov	r1, sl
 8004664:	00ca      	lsls	r2, r1, #3
 8004666:	4610      	mov	r0, r2
 8004668:	4619      	mov	r1, r3
 800466a:	4603      	mov	r3, r0
 800466c:	4642      	mov	r2, r8
 800466e:	189b      	adds	r3, r3, r2
 8004670:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004674:	464b      	mov	r3, r9
 8004676:	460a      	mov	r2, r1
 8004678:	eb42 0303 	adc.w	r3, r2, r3
 800467c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800468c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004690:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004694:	460b      	mov	r3, r1
 8004696:	18db      	adds	r3, r3, r3
 8004698:	62bb      	str	r3, [r7, #40]	@ 0x28
 800469a:	4613      	mov	r3, r2
 800469c:	eb42 0303 	adc.w	r3, r2, r3
 80046a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80046aa:	f7fb fdf1 	bl	8000290 <__aeabi_uldivmod>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4b0d      	ldr	r3, [pc, #52]	@ (80046e8 <UART_SetConfig+0x2d4>)
 80046b4:	fba3 1302 	umull	r1, r3, r3, r2
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	2164      	movs	r1, #100	@ 0x64
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	3332      	adds	r3, #50	@ 0x32
 80046c6:	4a08      	ldr	r2, [pc, #32]	@ (80046e8 <UART_SetConfig+0x2d4>)
 80046c8:	fba2 2303 	umull	r2, r3, r2, r3
 80046cc:	095b      	lsrs	r3, r3, #5
 80046ce:	f003 0207 	and.w	r2, r3, #7
 80046d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4422      	add	r2, r4
 80046da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046dc:	e106      	b.n	80048ec <UART_SetConfig+0x4d8>
 80046de:	bf00      	nop
 80046e0:	40011000 	.word	0x40011000
 80046e4:	40011400 	.word	0x40011400
 80046e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046f0:	2200      	movs	r2, #0
 80046f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046fe:	4642      	mov	r2, r8
 8004700:	464b      	mov	r3, r9
 8004702:	1891      	adds	r1, r2, r2
 8004704:	6239      	str	r1, [r7, #32]
 8004706:	415b      	adcs	r3, r3
 8004708:	627b      	str	r3, [r7, #36]	@ 0x24
 800470a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800470e:	4641      	mov	r1, r8
 8004710:	1854      	adds	r4, r2, r1
 8004712:	4649      	mov	r1, r9
 8004714:	eb43 0501 	adc.w	r5, r3, r1
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	00eb      	lsls	r3, r5, #3
 8004722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004726:	00e2      	lsls	r2, r4, #3
 8004728:	4614      	mov	r4, r2
 800472a:	461d      	mov	r5, r3
 800472c:	4643      	mov	r3, r8
 800472e:	18e3      	adds	r3, r4, r3
 8004730:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004734:	464b      	mov	r3, r9
 8004736:	eb45 0303 	adc.w	r3, r5, r3
 800473a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800473e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800474a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800475a:	4629      	mov	r1, r5
 800475c:	008b      	lsls	r3, r1, #2
 800475e:	4621      	mov	r1, r4
 8004760:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004764:	4621      	mov	r1, r4
 8004766:	008a      	lsls	r2, r1, #2
 8004768:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800476c:	f7fb fd90 	bl	8000290 <__aeabi_uldivmod>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4b60      	ldr	r3, [pc, #384]	@ (80048f8 <UART_SetConfig+0x4e4>)
 8004776:	fba3 2302 	umull	r2, r3, r3, r2
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	011c      	lsls	r4, r3, #4
 800477e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004782:	2200      	movs	r2, #0
 8004784:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004788:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800478c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004790:	4642      	mov	r2, r8
 8004792:	464b      	mov	r3, r9
 8004794:	1891      	adds	r1, r2, r2
 8004796:	61b9      	str	r1, [r7, #24]
 8004798:	415b      	adcs	r3, r3
 800479a:	61fb      	str	r3, [r7, #28]
 800479c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047a0:	4641      	mov	r1, r8
 80047a2:	1851      	adds	r1, r2, r1
 80047a4:	6139      	str	r1, [r7, #16]
 80047a6:	4649      	mov	r1, r9
 80047a8:	414b      	adcs	r3, r1
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047b8:	4659      	mov	r1, fp
 80047ba:	00cb      	lsls	r3, r1, #3
 80047bc:	4651      	mov	r1, sl
 80047be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047c2:	4651      	mov	r1, sl
 80047c4:	00ca      	lsls	r2, r1, #3
 80047c6:	4610      	mov	r0, r2
 80047c8:	4619      	mov	r1, r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	4642      	mov	r2, r8
 80047ce:	189b      	adds	r3, r3, r2
 80047d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047d4:	464b      	mov	r3, r9
 80047d6:	460a      	mov	r2, r1
 80047d8:	eb42 0303 	adc.w	r3, r2, r3
 80047dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047f8:	4649      	mov	r1, r9
 80047fa:	008b      	lsls	r3, r1, #2
 80047fc:	4641      	mov	r1, r8
 80047fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004802:	4641      	mov	r1, r8
 8004804:	008a      	lsls	r2, r1, #2
 8004806:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800480a:	f7fb fd41 	bl	8000290 <__aeabi_uldivmod>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4611      	mov	r1, r2
 8004814:	4b38      	ldr	r3, [pc, #224]	@ (80048f8 <UART_SetConfig+0x4e4>)
 8004816:	fba3 2301 	umull	r2, r3, r3, r1
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	2264      	movs	r2, #100	@ 0x64
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	1acb      	subs	r3, r1, r3
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	3332      	adds	r3, #50	@ 0x32
 8004828:	4a33      	ldr	r2, [pc, #204]	@ (80048f8 <UART_SetConfig+0x4e4>)
 800482a:	fba2 2303 	umull	r2, r3, r2, r3
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004834:	441c      	add	r4, r3
 8004836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800483a:	2200      	movs	r2, #0
 800483c:	673b      	str	r3, [r7, #112]	@ 0x70
 800483e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004840:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004844:	4642      	mov	r2, r8
 8004846:	464b      	mov	r3, r9
 8004848:	1891      	adds	r1, r2, r2
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	415b      	adcs	r3, r3
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004854:	4641      	mov	r1, r8
 8004856:	1851      	adds	r1, r2, r1
 8004858:	6039      	str	r1, [r7, #0]
 800485a:	4649      	mov	r1, r9
 800485c:	414b      	adcs	r3, r1
 800485e:	607b      	str	r3, [r7, #4]
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800486c:	4659      	mov	r1, fp
 800486e:	00cb      	lsls	r3, r1, #3
 8004870:	4651      	mov	r1, sl
 8004872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004876:	4651      	mov	r1, sl
 8004878:	00ca      	lsls	r2, r1, #3
 800487a:	4610      	mov	r0, r2
 800487c:	4619      	mov	r1, r3
 800487e:	4603      	mov	r3, r0
 8004880:	4642      	mov	r2, r8
 8004882:	189b      	adds	r3, r3, r2
 8004884:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004886:	464b      	mov	r3, r9
 8004888:	460a      	mov	r2, r1
 800488a:	eb42 0303 	adc.w	r3, r2, r3
 800488e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	663b      	str	r3, [r7, #96]	@ 0x60
 800489a:	667a      	str	r2, [r7, #100]	@ 0x64
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80048a8:	4649      	mov	r1, r9
 80048aa:	008b      	lsls	r3, r1, #2
 80048ac:	4641      	mov	r1, r8
 80048ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b2:	4641      	mov	r1, r8
 80048b4:	008a      	lsls	r2, r1, #2
 80048b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80048ba:	f7fb fce9 	bl	8000290 <__aeabi_uldivmod>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4b0d      	ldr	r3, [pc, #52]	@ (80048f8 <UART_SetConfig+0x4e4>)
 80048c4:	fba3 1302 	umull	r1, r3, r3, r2
 80048c8:	095b      	lsrs	r3, r3, #5
 80048ca:	2164      	movs	r1, #100	@ 0x64
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	3332      	adds	r3, #50	@ 0x32
 80048d6:	4a08      	ldr	r2, [pc, #32]	@ (80048f8 <UART_SetConfig+0x4e4>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	f003 020f 	and.w	r2, r3, #15
 80048e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4422      	add	r2, r4
 80048ea:	609a      	str	r2, [r3, #8]
}
 80048ec:	bf00      	nop
 80048ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048f2:	46bd      	mov	sp, r7
 80048f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048f8:	51eb851f 	.word	0x51eb851f

080048fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048fc:	b084      	sub	sp, #16
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	f107 001c 	add.w	r0, r7, #28
 800490a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800490e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004912:	2b01      	cmp	r3, #1
 8004914:	d123      	bne.n	800495e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800492a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800493e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004942:	2b01      	cmp	r3, #1
 8004944:	d105      	bne.n	8004952 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f001 fae8 	bl	8005f28 <USB_CoreReset>
 8004958:	4603      	mov	r3, r0
 800495a:	73fb      	strb	r3, [r7, #15]
 800495c:	e01b      	b.n	8004996 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f001 fadc 	bl	8005f28 <USB_CoreReset>
 8004970:	4603      	mov	r3, r0
 8004972:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004974:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004980:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	639a      	str	r2, [r3, #56]	@ 0x38
 8004988:	e005      	b.n	8004996 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004996:	7fbb      	ldrb	r3, [r7, #30]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d10b      	bne.n	80049b4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f043 0206 	orr.w	r2, r3, #6
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f043 0220 	orr.w	r2, r3, #32
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049c0:	b004      	add	sp, #16
 80049c2:	4770      	bx	lr

080049c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	4613      	mov	r3, r2
 80049d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d165      	bne.n	8004aa4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4a41      	ldr	r2, [pc, #260]	@ (8004ae0 <USB_SetTurnaroundTime+0x11c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d906      	bls.n	80049ee <USB_SetTurnaroundTime+0x2a>
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4a40      	ldr	r2, [pc, #256]	@ (8004ae4 <USB_SetTurnaroundTime+0x120>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d202      	bcs.n	80049ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80049e8:	230f      	movs	r3, #15
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	e062      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ae4 <USB_SetTurnaroundTime+0x120>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d306      	bcc.n	8004a04 <USB_SetTurnaroundTime+0x40>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4a3b      	ldr	r2, [pc, #236]	@ (8004ae8 <USB_SetTurnaroundTime+0x124>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d202      	bcs.n	8004a04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80049fe:	230e      	movs	r3, #14
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	e057      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4a38      	ldr	r2, [pc, #224]	@ (8004ae8 <USB_SetTurnaroundTime+0x124>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d306      	bcc.n	8004a1a <USB_SetTurnaroundTime+0x56>
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4a37      	ldr	r2, [pc, #220]	@ (8004aec <USB_SetTurnaroundTime+0x128>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d202      	bcs.n	8004a1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a14:	230d      	movs	r3, #13
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	e04c      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	4a33      	ldr	r2, [pc, #204]	@ (8004aec <USB_SetTurnaroundTime+0x128>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d306      	bcc.n	8004a30 <USB_SetTurnaroundTime+0x6c>
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4a32      	ldr	r2, [pc, #200]	@ (8004af0 <USB_SetTurnaroundTime+0x12c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d802      	bhi.n	8004a30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a2a:	230c      	movs	r3, #12
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	e041      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4a2f      	ldr	r2, [pc, #188]	@ (8004af0 <USB_SetTurnaroundTime+0x12c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d906      	bls.n	8004a46 <USB_SetTurnaroundTime+0x82>
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4a2e      	ldr	r2, [pc, #184]	@ (8004af4 <USB_SetTurnaroundTime+0x130>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d802      	bhi.n	8004a46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a40:	230b      	movs	r3, #11
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	e036      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4a2a      	ldr	r2, [pc, #168]	@ (8004af4 <USB_SetTurnaroundTime+0x130>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d906      	bls.n	8004a5c <USB_SetTurnaroundTime+0x98>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	4a29      	ldr	r2, [pc, #164]	@ (8004af8 <USB_SetTurnaroundTime+0x134>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d802      	bhi.n	8004a5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004a56:	230a      	movs	r3, #10
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	e02b      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4a26      	ldr	r2, [pc, #152]	@ (8004af8 <USB_SetTurnaroundTime+0x134>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d906      	bls.n	8004a72 <USB_SetTurnaroundTime+0xae>
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4a25      	ldr	r2, [pc, #148]	@ (8004afc <USB_SetTurnaroundTime+0x138>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d202      	bcs.n	8004a72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004a6c:	2309      	movs	r3, #9
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	e020      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	4a21      	ldr	r2, [pc, #132]	@ (8004afc <USB_SetTurnaroundTime+0x138>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d306      	bcc.n	8004a88 <USB_SetTurnaroundTime+0xc4>
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	4a20      	ldr	r2, [pc, #128]	@ (8004b00 <USB_SetTurnaroundTime+0x13c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d802      	bhi.n	8004a88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004a82:	2308      	movs	r3, #8
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	e015      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8004b00 <USB_SetTurnaroundTime+0x13c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d906      	bls.n	8004a9e <USB_SetTurnaroundTime+0xda>
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4a1c      	ldr	r2, [pc, #112]	@ (8004b04 <USB_SetTurnaroundTime+0x140>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d202      	bcs.n	8004a9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004a98:	2307      	movs	r3, #7
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	e00a      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004a9e:	2306      	movs	r3, #6
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	e007      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004aa4:	79fb      	ldrb	r3, [r7, #7]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d102      	bne.n	8004ab0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004aaa:	2309      	movs	r3, #9
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	e001      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ab0:	2309      	movs	r3, #9
 8004ab2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	029b      	lsls	r3, r3, #10
 8004ac8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004acc:	431a      	orrs	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	371c      	adds	r7, #28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	00d8acbf 	.word	0x00d8acbf
 8004ae4:	00e4e1c0 	.word	0x00e4e1c0
 8004ae8:	00f42400 	.word	0x00f42400
 8004aec:	01067380 	.word	0x01067380
 8004af0:	011a499f 	.word	0x011a499f
 8004af4:	01312cff 	.word	0x01312cff
 8004af8:	014ca43f 	.word	0x014ca43f
 8004afc:	016e3600 	.word	0x016e3600
 8004b00:	01a6ab1f 	.word	0x01a6ab1f
 8004b04:	01e84800 	.word	0x01e84800

08004b08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f043 0201 	orr.w	r2, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f023 0201 	bic.w	r2, r3, #1
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d115      	bne.n	8004b9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004b7a:	200a      	movs	r0, #10
 8004b7c:	f7fc f93a 	bl	8000df4 <HAL_Delay>
      ms += 10U;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	330a      	adds	r3, #10
 8004b84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f001 f93f 	bl	8005e0a <USB_GetMode>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d01e      	beq.n	8004bd0 <USB_SetCurrentMode+0x84>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2bc7      	cmp	r3, #199	@ 0xc7
 8004b96:	d9f0      	bls.n	8004b7a <USB_SetCurrentMode+0x2e>
 8004b98:	e01a      	b.n	8004bd0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d115      	bne.n	8004bcc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004bac:	200a      	movs	r0, #10
 8004bae:	f7fc f921 	bl	8000df4 <HAL_Delay>
      ms += 10U;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	330a      	adds	r3, #10
 8004bb6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f001 f926 	bl	8005e0a <USB_GetMode>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <USB_SetCurrentMode+0x84>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2bc7      	cmp	r3, #199	@ 0xc7
 8004bc8:	d9f0      	bls.n	8004bac <USB_SetCurrentMode+0x60>
 8004bca:	e001      	b.n	8004bd0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e005      	b.n	8004bdc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2bc8      	cmp	r3, #200	@ 0xc8
 8004bd4:	d101      	bne.n	8004bda <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004be4:	b084      	sub	sp, #16
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b086      	sub	sp, #24
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004bfe:	2300      	movs	r3, #0
 8004c00:	613b      	str	r3, [r7, #16]
 8004c02:	e009      	b.n	8004c18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	3340      	adds	r3, #64	@ 0x40
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	2200      	movs	r2, #0
 8004c10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	3301      	adds	r3, #1
 8004c16:	613b      	str	r3, [r7, #16]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	2b0e      	cmp	r3, #14
 8004c1c:	d9f2      	bls.n	8004c04 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c1e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d11c      	bne.n	8004c60 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c34:	f043 0302 	orr.w	r3, r3, #2
 8004c38:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c56:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004c5e:	e00b      	b.n	8004c78 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c64:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c70:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004c7e:	461a      	mov	r2, r3
 8004c80:	2300      	movs	r3, #0
 8004c82:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c84:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d10d      	bne.n	8004ca8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d104      	bne.n	8004c9e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c94:	2100      	movs	r1, #0
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f968 	bl	8004f6c <USB_SetDevSpeed>
 8004c9c:	e008      	b.n	8004cb0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f963 	bl	8004f6c <USB_SetDevSpeed>
 8004ca6:	e003      	b.n	8004cb0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ca8:	2103      	movs	r1, #3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f95e 	bl	8004f6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cb0:	2110      	movs	r1, #16
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f8fa 	bl	8004eac <USB_FlushTxFifo>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f924 	bl	8004f10 <USB_FlushRxFifo>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2300      	movs	r3, #0
 8004cdc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	613b      	str	r3, [r7, #16]
 8004cfa:	e043      	b.n	8004d84 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d12:	d118      	bne.n	8004d46 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10a      	bne.n	8004d30 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d26:	461a      	mov	r2, r3
 8004d28:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	e013      	b.n	8004d58 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	e008      	b.n	8004d58 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d52:	461a      	mov	r2, r3
 8004d54:	2300      	movs	r3, #0
 8004d56:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d64:	461a      	mov	r2, r3
 8004d66:	2300      	movs	r3, #0
 8004d68:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d76:	461a      	mov	r2, r3
 8004d78:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	3301      	adds	r3, #1
 8004d82:	613b      	str	r3, [r7, #16]
 8004d84:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004d88:	461a      	mov	r2, r3
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d3b5      	bcc.n	8004cfc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d90:	2300      	movs	r3, #0
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	e043      	b.n	8004e1e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004da8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dac:	d118      	bne.n	8004de0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	e013      	b.n	8004df2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	e008      	b.n	8004df2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dec:	461a      	mov	r2, r3
 8004dee:	2300      	movs	r3, #0
 8004df0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dfe:	461a      	mov	r2, r3
 8004e00:	2300      	movs	r3, #0
 8004e02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e10:	461a      	mov	r2, r3
 8004e12:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	613b      	str	r3, [r7, #16]
 8004e1e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e22:	461a      	mov	r2, r3
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d3b5      	bcc.n	8004d96 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e3c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004e4a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d105      	bne.n	8004e60 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	f043 0210 	orr.w	r2, r3, #16
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699a      	ldr	r2, [r3, #24]
 8004e64:	4b10      	ldr	r3, [pc, #64]	@ (8004ea8 <USB_DevInit+0x2c4>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e6c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	f043 0208 	orr.w	r2, r3, #8
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e80:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d107      	bne.n	8004e98 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e90:	f043 0304 	orr.w	r3, r3, #4
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ea4:	b004      	add	sp, #16
 8004ea6:	4770      	bx	lr
 8004ea8:	803c3800 	.word	0x803c3800

08004eac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ec6:	d901      	bls.n	8004ecc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e01b      	b.n	8004f04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	daf2      	bge.n	8004eba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	019b      	lsls	r3, r3, #6
 8004edc:	f043 0220 	orr.w	r2, r3, #32
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ef0:	d901      	bls.n	8004ef6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e006      	b.n	8004f04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b20      	cmp	r3, #32
 8004f00:	d0f0      	beq.n	8004ee4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f28:	d901      	bls.n	8004f2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e018      	b.n	8004f60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	daf2      	bge.n	8004f1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2210      	movs	r2, #16
 8004f3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3301      	adds	r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f4c:	d901      	bls.n	8004f52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e006      	b.n	8004f60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f003 0310 	and.w	r3, r3, #16
 8004f5a:	2b10      	cmp	r3, #16
 8004f5c:	d0f0      	beq.n	8004f40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	68f9      	ldr	r1, [r7, #12]
 8004f88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b087      	sub	sp, #28
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 0306 	and.w	r3, r3, #6
 8004fb6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d102      	bne.n	8004fc4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	75fb      	strb	r3, [r7, #23]
 8004fc2:	e00a      	b.n	8004fda <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d002      	beq.n	8004fd0 <USB_GetDevSpeed+0x32>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b06      	cmp	r3, #6
 8004fce:	d102      	bne.n	8004fd6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	75fb      	strb	r3, [r7, #23]
 8004fd4:	e001      	b.n	8004fda <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004fd6:	230f      	movs	r3, #15
 8004fd8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	785b      	ldrb	r3, [r3, #1]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d13a      	bne.n	800507a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800500a:	69da      	ldr	r2, [r3, #28]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	2101      	movs	r1, #1
 8005016:	fa01 f303 	lsl.w	r3, r1, r3
 800501a:	b29b      	uxth	r3, r3
 800501c:	68f9      	ldr	r1, [r7, #12]
 800501e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005022:	4313      	orrs	r3, r2
 8005024:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d155      	bne.n	80050e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	791b      	ldrb	r3, [r3, #4]
 8005056:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005058:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	059b      	lsls	r3, r3, #22
 800505e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005060:	4313      	orrs	r3, r2
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	0151      	lsls	r1, r2, #5
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	440a      	add	r2, r1
 800506a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800506e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	e036      	b.n	80050e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005080:	69da      	ldr	r2, [r3, #28]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	2101      	movs	r1, #1
 800508c:	fa01 f303 	lsl.w	r3, r1, r3
 8005090:	041b      	lsls	r3, r3, #16
 8005092:	68f9      	ldr	r1, [r7, #12]
 8005094:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005098:	4313      	orrs	r3, r2
 800509a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d11a      	bne.n	80050e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	791b      	ldrb	r3, [r3, #4]
 80050cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050ce:	430b      	orrs	r3, r1
 80050d0:	4313      	orrs	r3, r2
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	0151      	lsls	r1, r2, #5
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	440a      	add	r2, r1
 80050da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
	...

080050f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	785b      	ldrb	r3, [r3, #1]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d161      	bne.n	80051d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005126:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800512a:	d11f      	bne.n	800516c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	0151      	lsls	r1, r2, #5
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	440a      	add	r2, r1
 8005142:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005146:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800514a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	0151      	lsls	r1, r2, #5
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	440a      	add	r2, r1
 8005162:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005166:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800516a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005172:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	f003 030f 	and.w	r3, r3, #15
 800517c:	2101      	movs	r1, #1
 800517e:	fa01 f303 	lsl.w	r3, r1, r3
 8005182:	b29b      	uxth	r3, r3
 8005184:	43db      	mvns	r3, r3
 8005186:	68f9      	ldr	r1, [r7, #12]
 8005188:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800518c:	4013      	ands	r3, r2
 800518e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005196:	69da      	ldr	r2, [r3, #28]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	2101      	movs	r1, #1
 80051a2:	fa01 f303 	lsl.w	r3, r1, r3
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	68f9      	ldr	r1, [r7, #12]
 80051ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051b0:	4013      	ands	r3, r2
 80051b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	0159      	lsls	r1, r3, #5
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	440b      	add	r3, r1
 80051ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ce:	4619      	mov	r1, r3
 80051d0:	4b35      	ldr	r3, [pc, #212]	@ (80052a8 <USB_DeactivateEndpoint+0x1b0>)
 80051d2:	4013      	ands	r3, r2
 80051d4:	600b      	str	r3, [r1, #0]
 80051d6:	e060      	b.n	800529a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051ee:	d11f      	bne.n	8005230 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	0151      	lsls	r1, r2, #5
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	440a      	add	r2, r1
 8005206:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800520a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800520e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	0151      	lsls	r1, r2, #5
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	440a      	add	r2, r1
 8005226:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800522a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800522e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005236:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	2101      	movs	r1, #1
 8005242:	fa01 f303 	lsl.w	r3, r1, r3
 8005246:	041b      	lsls	r3, r3, #16
 8005248:	43db      	mvns	r3, r3
 800524a:	68f9      	ldr	r1, [r7, #12]
 800524c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005250:	4013      	ands	r3, r2
 8005252:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	2101      	movs	r1, #1
 8005266:	fa01 f303 	lsl.w	r3, r1, r3
 800526a:	041b      	lsls	r3, r3, #16
 800526c:	43db      	mvns	r3, r3
 800526e:	68f9      	ldr	r1, [r7, #12]
 8005270:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005274:	4013      	ands	r3, r2
 8005276:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	0159      	lsls	r1, r3, #5
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	440b      	add	r3, r1
 800528e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005292:	4619      	mov	r1, r3
 8005294:	4b05      	ldr	r3, [pc, #20]	@ (80052ac <USB_DeactivateEndpoint+0x1b4>)
 8005296:	4013      	ands	r3, r2
 8005298:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	ec337800 	.word	0xec337800
 80052ac:	eff37800 	.word	0xeff37800

080052b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08a      	sub	sp, #40	@ 0x28
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	4613      	mov	r3, r2
 80052bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	785b      	ldrb	r3, [r3, #1]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	f040 817f 	bne.w	80055d0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d132      	bne.n	8005340 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	0151      	lsls	r1, r2, #5
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	440a      	add	r2, r1
 80052f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052f4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80052f8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80052fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	440a      	add	r2, r1
 8005314:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005318:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800531c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	0151      	lsls	r1, r2, #5
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	440a      	add	r2, r1
 8005334:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005338:	0cdb      	lsrs	r3, r3, #19
 800533a:	04db      	lsls	r3, r3, #19
 800533c:	6113      	str	r3, [r2, #16]
 800533e:	e097      	b.n	8005470 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	0151      	lsls	r1, r2, #5
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	440a      	add	r2, r1
 8005356:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800535a:	0cdb      	lsrs	r3, r3, #19
 800535c:	04db      	lsls	r3, r3, #19
 800535e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	0151      	lsls	r1, r2, #5
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	440a      	add	r2, r1
 8005376:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800537a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800537e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005382:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d11a      	bne.n	80053c0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	691a      	ldr	r2, [r3, #16]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	429a      	cmp	r2, r3
 8005394:	d903      	bls.n	800539e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	689a      	ldr	r2, [r3, #8]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	0151      	lsls	r1, r2, #5
 80053b0:	69fa      	ldr	r2, [r7, #28]
 80053b2:	440a      	add	r2, r1
 80053b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053bc:	6113      	str	r3, [r2, #16]
 80053be:	e044      	b.n	800544a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	691a      	ldr	r2, [r3, #16]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	4413      	add	r3, r2
 80053ca:	1e5a      	subs	r2, r3, #1
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	8afb      	ldrh	r3, [r7, #22]
 80053e6:	04d9      	lsls	r1, r3, #19
 80053e8:	4ba4      	ldr	r3, [pc, #656]	@ (800567c <USB_EPStartXfer+0x3cc>)
 80053ea:	400b      	ands	r3, r1
 80053ec:	69b9      	ldr	r1, [r7, #24]
 80053ee:	0148      	lsls	r0, r1, #5
 80053f0:	69f9      	ldr	r1, [r7, #28]
 80053f2:	4401      	add	r1, r0
 80053f4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80053f8:	4313      	orrs	r3, r2
 80053fa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	791b      	ldrb	r3, [r3, #4]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d122      	bne.n	800544a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	0151      	lsls	r1, r2, #5
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	440a      	add	r2, r1
 800541a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800541e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005422:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	8afb      	ldrh	r3, [r7, #22]
 8005434:	075b      	lsls	r3, r3, #29
 8005436:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800543a:	69b9      	ldr	r1, [r7, #24]
 800543c:	0148      	lsls	r0, r1, #5
 800543e:	69f9      	ldr	r1, [r7, #28]
 8005440:	4401      	add	r1, r0
 8005442:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005446:	4313      	orrs	r3, r2
 8005448:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005460:	69b9      	ldr	r1, [r7, #24]
 8005462:	0148      	lsls	r0, r1, #5
 8005464:	69f9      	ldr	r1, [r7, #28]
 8005466:	4401      	add	r1, r0
 8005468:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800546c:	4313      	orrs	r3, r2
 800546e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d14b      	bne.n	800550e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800548a:	461a      	mov	r2, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	791b      	ldrb	r3, [r3, #4]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d128      	bne.n	80054ec <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d110      	bne.n	80054cc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	0151      	lsls	r1, r2, #5
 80054bc:	69fa      	ldr	r2, [r7, #28]
 80054be:	440a      	add	r2, r1
 80054c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	e00f      	b.n	80054ec <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	0151      	lsls	r1, r2, #5
 80054de:	69fa      	ldr	r2, [r7, #28]
 80054e0:	440a      	add	r2, r1
 80054e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054ea:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	0151      	lsls	r1, r2, #5
 80054fe:	69fa      	ldr	r2, [r7, #28]
 8005500:	440a      	add	r2, r1
 8005502:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005506:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	e166      	b.n	80057dc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	0151      	lsls	r1, r2, #5
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	440a      	add	r2, r1
 8005524:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005528:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800552c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	791b      	ldrb	r3, [r3, #4]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d015      	beq.n	8005562 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 814e 	beq.w	80057dc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005546:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	2101      	movs	r1, #1
 8005552:	fa01 f303 	lsl.w	r3, r1, r3
 8005556:	69f9      	ldr	r1, [r7, #28]
 8005558:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800555c:	4313      	orrs	r3, r2
 800555e:	634b      	str	r3, [r1, #52]	@ 0x34
 8005560:	e13c      	b.n	80057dc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556e:	2b00      	cmp	r3, #0
 8005570:	d110      	bne.n	8005594 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	0151      	lsls	r1, r2, #5
 8005584:	69fa      	ldr	r2, [r7, #28]
 8005586:	440a      	add	r2, r1
 8005588:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800558c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	e00f      	b.n	80055b4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	0151      	lsls	r1, r2, #5
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	440a      	add	r2, r1
 80055aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055b2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	68d9      	ldr	r1, [r3, #12]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	781a      	ldrb	r2, [r3, #0]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	b298      	uxth	r0, r3
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	4603      	mov	r3, r0
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 f9b9 	bl	8005940 <USB_WritePacket>
 80055ce:	e105      	b.n	80057dc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	0151      	lsls	r1, r2, #5
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	440a      	add	r2, r1
 80055e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055ea:	0cdb      	lsrs	r3, r3, #19
 80055ec:	04db      	lsls	r3, r3, #19
 80055ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	0151      	lsls	r1, r2, #5
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	440a      	add	r2, r1
 8005606:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800560a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800560e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005612:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d132      	bne.n	8005680 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800563e:	691a      	ldr	r2, [r3, #16]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005648:	69b9      	ldr	r1, [r7, #24]
 800564a:	0148      	lsls	r0, r1, #5
 800564c:	69f9      	ldr	r1, [r7, #28]
 800564e:	4401      	add	r1, r0
 8005650:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005654:	4313      	orrs	r3, r2
 8005656:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	69fa      	ldr	r2, [r7, #28]
 800566c:	440a      	add	r2, r1
 800566e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005672:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005676:	6113      	str	r3, [r2, #16]
 8005678:	e062      	b.n	8005740 <USB_EPStartXfer+0x490>
 800567a:	bf00      	nop
 800567c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d123      	bne.n	80056d0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005694:	691a      	ldr	r2, [r3, #16]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800569e:	69b9      	ldr	r1, [r7, #24]
 80056a0:	0148      	lsls	r0, r1, #5
 80056a2:	69f9      	ldr	r1, [r7, #28]
 80056a4:	4401      	add	r1, r0
 80056a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80056aa:	4313      	orrs	r3, r2
 80056ac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	0151      	lsls	r1, r2, #5
 80056c0:	69fa      	ldr	r2, [r7, #28]
 80056c2:	440a      	add	r2, r1
 80056c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056cc:	6113      	str	r3, [r2, #16]
 80056ce:	e037      	b.n	8005740 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	4413      	add	r3, r2
 80056da:	1e5a      	subs	r2, r3, #1
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	8afa      	ldrh	r2, [r7, #22]
 80056ec:	fb03 f202 	mul.w	r2, r3, r2
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005700:	691a      	ldr	r2, [r3, #16]
 8005702:	8afb      	ldrh	r3, [r7, #22]
 8005704:	04d9      	lsls	r1, r3, #19
 8005706:	4b38      	ldr	r3, [pc, #224]	@ (80057e8 <USB_EPStartXfer+0x538>)
 8005708:	400b      	ands	r3, r1
 800570a:	69b9      	ldr	r1, [r7, #24]
 800570c:	0148      	lsls	r0, r1, #5
 800570e:	69f9      	ldr	r1, [r7, #28]
 8005710:	4401      	add	r1, r0
 8005712:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005716:	4313      	orrs	r3, r2
 8005718:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005730:	69b9      	ldr	r1, [r7, #24]
 8005732:	0148      	lsls	r0, r1, #5
 8005734:	69f9      	ldr	r1, [r7, #28]
 8005736:	4401      	add	r1, r0
 8005738:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800573c:	4313      	orrs	r3, r2
 800573e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d10d      	bne.n	8005762 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	68d9      	ldr	r1, [r3, #12]
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800575e:	460a      	mov	r2, r1
 8005760:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	791b      	ldrb	r3, [r3, #4]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d128      	bne.n	80057bc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005776:	2b00      	cmp	r3, #0
 8005778:	d110      	bne.n	800579c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	0151      	lsls	r1, r2, #5
 800578c:	69fa      	ldr	r2, [r7, #28]
 800578e:	440a      	add	r2, r1
 8005790:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005794:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	e00f      	b.n	80057bc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	0151      	lsls	r1, r2, #5
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	440a      	add	r2, r1
 80057b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	0151      	lsls	r1, r2, #5
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	440a      	add	r2, r1
 80057d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057d6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80057da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	1ff80000 	.word	0x1ff80000

080057ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80057fa:	2300      	movs	r3, #0
 80057fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	785b      	ldrb	r3, [r3, #1]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d14a      	bne.n	80058a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800581e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005822:	f040 8086 	bne.w	8005932 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	7812      	ldrb	r2, [r2, #0]
 800583a:	0151      	lsls	r1, r2, #5
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	440a      	add	r2, r1
 8005840:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005844:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005848:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	7812      	ldrb	r2, [r2, #0]
 800585e:	0151      	lsls	r1, r2, #5
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	440a      	add	r2, r1
 8005864:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005868:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800586c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	3301      	adds	r3, #1
 8005872:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f242 7210 	movw	r2, #10000	@ 0x2710
 800587a:	4293      	cmp	r3, r2
 800587c:	d902      	bls.n	8005884 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	75fb      	strb	r3, [r7, #23]
          break;
 8005882:	e056      	b.n	8005932 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005898:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800589c:	d0e7      	beq.n	800586e <USB_EPStopXfer+0x82>
 800589e:	e048      	b.n	8005932 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058b8:	d13b      	bne.n	8005932 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	7812      	ldrb	r2, [r2, #0]
 80058ce:	0151      	lsls	r1, r2, #5
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	440a      	add	r2, r1
 80058d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80058dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	7812      	ldrb	r2, [r2, #0]
 80058f2:	0151      	lsls	r1, r2, #5
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	440a      	add	r2, r1
 80058f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005900:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3301      	adds	r3, #1
 8005906:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800590e:	4293      	cmp	r3, r2
 8005910:	d902      	bls.n	8005918 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	75fb      	strb	r3, [r7, #23]
          break;
 8005916:	e00c      	b.n	8005932 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800592c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005930:	d0e7      	beq.n	8005902 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005932:	7dfb      	ldrb	r3, [r7, #23]
}
 8005934:	4618      	mov	r0, r3
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005940:	b480      	push	{r7}
 8005942:	b089      	sub	sp, #36	@ 0x24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	4611      	mov	r1, r2
 800594c:	461a      	mov	r2, r3
 800594e:	460b      	mov	r3, r1
 8005950:	71fb      	strb	r3, [r7, #7]
 8005952:	4613      	mov	r3, r2
 8005954:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800595e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005962:	2b00      	cmp	r3, #0
 8005964:	d123      	bne.n	80059ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005966:	88bb      	ldrh	r3, [r7, #4]
 8005968:	3303      	adds	r3, #3
 800596a:	089b      	lsrs	r3, r3, #2
 800596c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800596e:	2300      	movs	r3, #0
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	e018      	b.n	80059a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005974:	79fb      	ldrb	r3, [r7, #7]
 8005976:	031a      	lsls	r2, r3, #12
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	4413      	add	r3, r2
 800597c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005980:	461a      	mov	r2, r3
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	3301      	adds	r3, #1
 800598c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	3301      	adds	r3, #1
 8005992:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	3301      	adds	r3, #1
 8005998:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	3301      	adds	r3, #1
 800599e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	3301      	adds	r3, #1
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d3e2      	bcc.n	8005974 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3724      	adds	r7, #36	@ 0x24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059bc:	b480      	push	{r7}
 80059be:	b08b      	sub	sp, #44	@ 0x2c
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	4613      	mov	r3, r2
 80059c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80059d2:	88fb      	ldrh	r3, [r7, #6]
 80059d4:	089b      	lsrs	r3, r3, #2
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80059da:	88fb      	ldrh	r3, [r7, #6]
 80059dc:	f003 0303 	and.w	r3, r3, #3
 80059e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80059e2:	2300      	movs	r3, #0
 80059e4:	623b      	str	r3, [r7, #32]
 80059e6:	e014      	b.n	8005a12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80059f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f6:	3301      	adds	r3, #1
 80059f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fc:	3301      	adds	r3, #1
 80059fe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a02:	3301      	adds	r3, #1
 8005a04:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	3301      	adds	r3, #1
 8005a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	623b      	str	r3, [r7, #32]
 8005a12:	6a3a      	ldr	r2, [r7, #32]
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d3e6      	bcc.n	80059e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a1a:	8bfb      	ldrh	r3, [r7, #30]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d01e      	beq.n	8005a5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f107 0310 	add.w	r3, r7, #16
 8005a30:	6812      	ldr	r2, [r2, #0]
 8005a32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a44:	701a      	strb	r2, [r3, #0]
      i++;
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4e:	3301      	adds	r3, #1
 8005a50:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005a52:	8bfb      	ldrh	r3, [r7, #30]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a58:	8bfb      	ldrh	r3, [r7, #30]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1ea      	bne.n	8005a34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	372c      	adds	r7, #44	@ 0x2c
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	785b      	ldrb	r3, [r3, #1]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d12c      	bne.n	8005ae2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	db12      	blt.n	8005ac0 <USB_EPSetStall+0x54>
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00f      	beq.n	8005ac0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005abe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	0151      	lsls	r1, r2, #5
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	440a      	add	r2, r1
 8005ad6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ada:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	e02b      	b.n	8005b3a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	db12      	blt.n	8005b1a <USB_EPSetStall+0xae>
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00f      	beq.n	8005b1a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	0151      	lsls	r1, r2, #5
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	440a      	add	r2, r1
 8005b10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b14:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b18:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	0151      	lsls	r1, r2, #5
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	440a      	add	r2, r1
 8005b30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	785b      	ldrb	r3, [r3, #1]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d128      	bne.n	8005bb6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b82:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	791b      	ldrb	r3, [r3, #4]
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d003      	beq.n	8005b94 <USB_EPClearStall+0x4c>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	791b      	ldrb	r3, [r3, #4]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d138      	bne.n	8005c06 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	0151      	lsls	r1, r2, #5
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	440a      	add	r2, r1
 8005baa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bb2:	6013      	str	r3, [r2, #0]
 8005bb4:	e027      	b.n	8005c06 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	0151      	lsls	r1, r2, #5
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bd0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005bd4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	791b      	ldrb	r3, [r3, #4]
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d003      	beq.n	8005be6 <USB_EPClearStall+0x9e>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	791b      	ldrb	r3, [r3, #4]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d10f      	bne.n	8005c06 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	0151      	lsls	r1, r2, #5
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	440a      	add	r2, r1
 8005bfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c04:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c32:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005c36:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005c48:	68f9      	ldr	r1, [r7, #12]
 8005c4a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005c7a:	f023 0303 	bic.w	r3, r3, #3
 8005c7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c8e:	f023 0302 	bic.w	r3, r3, #2
 8005c92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b085      	sub	sp, #20
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005cbc:	f023 0303 	bic.w	r3, r3, #3
 8005cc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cd0:	f043 0302 	orr.w	r3, r3, #2
 8005cd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b085      	sub	sp, #20
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	0c1b      	lsrs	r3, r3, #16
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b085      	sub	sp, #20
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	b29b      	uxth	r3, r3
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b085      	sub	sp, #20
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005d82:	78fb      	ldrb	r3, [r7, #3]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005da0:	68bb      	ldr	r3, [r7, #8]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b087      	sub	sp, #28
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	460b      	mov	r3, r1
 8005db8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dd0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005dd2:	78fb      	ldrb	r3, [r7, #3]
 8005dd4:	f003 030f 	and.w	r3, r3, #15
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	fa22 f303 	lsr.w	r3, r2, r3
 8005dde:	01db      	lsls	r3, r3, #7
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005dfc:	68bb      	ldr	r3, [r7, #8]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	f003 0301 	and.w	r3, r3, #1
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e40:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005e44:	f023 0307 	bic.w	r3, r3, #7
 8005e48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	460b      	mov	r3, r1
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	333c      	adds	r3, #60	@ 0x3c
 8005e82:	3304      	adds	r3, #4
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	4a26      	ldr	r2, [pc, #152]	@ (8005f24 <USB_EP0_OutStart+0xb8>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d90a      	bls.n	8005ea6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ea0:	d101      	bne.n	8005ea6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	e037      	b.n	8005f16 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eac:	461a      	mov	r2, r3
 8005eae:	2300      	movs	r3, #0
 8005eb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ec0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ec4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ed4:	f043 0318 	orr.w	r3, r3, #24
 8005ed8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ee8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005eec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005eee:	7afb      	ldrb	r3, [r7, #11]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d10f      	bne.n	8005f14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005efa:	461a      	mov	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f0e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005f12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	4f54300a 	.word	0x4f54300a

08005f28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	3301      	adds	r3, #1
 8005f38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f40:	d901      	bls.n	8005f46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e01b      	b.n	8005f7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	daf2      	bge.n	8005f34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f043 0201 	orr.w	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3301      	adds	r3, #1
 8005f62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f6a:	d901      	bls.n	8005f70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e006      	b.n	8005f7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d0f0      	beq.n	8005f5e <USB_CoreReset+0x36>

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
	...

08005f8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	460b      	mov	r3, r1
 8005f96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005f98:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005f9c:	f002 fc2e 	bl	80087fc <USBD_static_malloc>
 8005fa0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d109      	bne.n	8005fbc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	32b0      	adds	r2, #176	@ 0xb0
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e0d4      	b.n	8006166 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005fbc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f002 fc92 	bl	80088ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	32b0      	adds	r2, #176	@ 0xb0
 8005fd2:	68f9      	ldr	r1, [r7, #12]
 8005fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	32b0      	adds	r2, #176	@ 0xb0
 8005fe2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	7c1b      	ldrb	r3, [r3, #16]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d138      	bne.n	8006066 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005ff4:	4b5e      	ldr	r3, [pc, #376]	@ (8006170 <USBD_CDC_Init+0x1e4>)
 8005ff6:	7819      	ldrb	r1, [r3, #0]
 8005ff8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f002 fad9 	bl	80085b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006004:	4b5a      	ldr	r3, [pc, #360]	@ (8006170 <USBD_CDC_Init+0x1e4>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	f003 020f 	and.w	r2, r3, #15
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	4613      	mov	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	440b      	add	r3, r1
 8006018:	3324      	adds	r3, #36	@ 0x24
 800601a:	2201      	movs	r2, #1
 800601c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800601e:	4b55      	ldr	r3, [pc, #340]	@ (8006174 <USBD_CDC_Init+0x1e8>)
 8006020:	7819      	ldrb	r1, [r3, #0]
 8006022:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006026:	2202      	movs	r2, #2
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f002 fac4 	bl	80085b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800602e:	4b51      	ldr	r3, [pc, #324]	@ (8006174 <USBD_CDC_Init+0x1e8>)
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	f003 020f 	and.w	r2, r3, #15
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	4613      	mov	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006046:	2201      	movs	r2, #1
 8006048:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800604a:	4b4b      	ldr	r3, [pc, #300]	@ (8006178 <USBD_CDC_Init+0x1ec>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	f003 020f 	and.w	r2, r3, #15
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	3326      	adds	r3, #38	@ 0x26
 8006060:	2210      	movs	r2, #16
 8006062:	801a      	strh	r2, [r3, #0]
 8006064:	e035      	b.n	80060d2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006066:	4b42      	ldr	r3, [pc, #264]	@ (8006170 <USBD_CDC_Init+0x1e4>)
 8006068:	7819      	ldrb	r1, [r3, #0]
 800606a:	2340      	movs	r3, #64	@ 0x40
 800606c:	2202      	movs	r2, #2
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f002 faa1 	bl	80085b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006074:	4b3e      	ldr	r3, [pc, #248]	@ (8006170 <USBD_CDC_Init+0x1e4>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	f003 020f 	and.w	r2, r3, #15
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	4613      	mov	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	440b      	add	r3, r1
 8006088:	3324      	adds	r3, #36	@ 0x24
 800608a:	2201      	movs	r2, #1
 800608c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800608e:	4b39      	ldr	r3, [pc, #228]	@ (8006174 <USBD_CDC_Init+0x1e8>)
 8006090:	7819      	ldrb	r1, [r3, #0]
 8006092:	2340      	movs	r3, #64	@ 0x40
 8006094:	2202      	movs	r2, #2
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f002 fa8d 	bl	80085b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800609c:	4b35      	ldr	r3, [pc, #212]	@ (8006174 <USBD_CDC_Init+0x1e8>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	f003 020f 	and.w	r2, r3, #15
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	440b      	add	r3, r1
 80060b0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80060b4:	2201      	movs	r2, #1
 80060b6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80060b8:	4b2f      	ldr	r3, [pc, #188]	@ (8006178 <USBD_CDC_Init+0x1ec>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	f003 020f 	and.w	r2, r3, #15
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	3326      	adds	r3, #38	@ 0x26
 80060ce:	2210      	movs	r2, #16
 80060d0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80060d2:	4b29      	ldr	r3, [pc, #164]	@ (8006178 <USBD_CDC_Init+0x1ec>)
 80060d4:	7819      	ldrb	r1, [r3, #0]
 80060d6:	2308      	movs	r3, #8
 80060d8:	2203      	movs	r2, #3
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f002 fa6b 	bl	80085b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80060e0:	4b25      	ldr	r3, [pc, #148]	@ (8006178 <USBD_CDC_Init+0x1ec>)
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	f003 020f 	and.w	r2, r3, #15
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	4613      	mov	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	440b      	add	r3, r1
 80060f4:	3324      	adds	r3, #36	@ 0x24
 80060f6:	2201      	movs	r2, #1
 80060f8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	33b0      	adds	r3, #176	@ 0xb0
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006130:	2302      	movs	r3, #2
 8006132:	e018      	b.n	8006166 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	7c1b      	ldrb	r3, [r3, #16]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10a      	bne.n	8006152 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800613c:	4b0d      	ldr	r3, [pc, #52]	@ (8006174 <USBD_CDC_Init+0x1e8>)
 800613e:	7819      	ldrb	r1, [r3, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006146:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f002 fb22 	bl	8008794 <USBD_LL_PrepareReceive>
 8006150:	e008      	b.n	8006164 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006152:	4b08      	ldr	r3, [pc, #32]	@ (8006174 <USBD_CDC_Init+0x1e8>)
 8006154:	7819      	ldrb	r1, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800615c:	2340      	movs	r3, #64	@ 0x40
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f002 fb18 	bl	8008794 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	20000097 	.word	0x20000097
 8006174:	20000098 	.word	0x20000098
 8006178:	20000099 	.word	0x20000099

0800617c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006188:	4b3a      	ldr	r3, [pc, #232]	@ (8006274 <USBD_CDC_DeInit+0xf8>)
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	4619      	mov	r1, r3
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f002 fa37 	bl	8008602 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006194:	4b37      	ldr	r3, [pc, #220]	@ (8006274 <USBD_CDC_DeInit+0xf8>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	f003 020f 	and.w	r2, r3, #15
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	440b      	add	r3, r1
 80061a8:	3324      	adds	r3, #36	@ 0x24
 80061aa:	2200      	movs	r2, #0
 80061ac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80061ae:	4b32      	ldr	r3, [pc, #200]	@ (8006278 <USBD_CDC_DeInit+0xfc>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f002 fa24 	bl	8008602 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80061ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006278 <USBD_CDC_DeInit+0xfc>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	f003 020f 	and.w	r2, r3, #15
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	440b      	add	r3, r1
 80061ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80061d2:	2200      	movs	r2, #0
 80061d4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80061d6:	4b29      	ldr	r3, [pc, #164]	@ (800627c <USBD_CDC_DeInit+0x100>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f002 fa10 	bl	8008602 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80061e2:	4b26      	ldr	r3, [pc, #152]	@ (800627c <USBD_CDC_DeInit+0x100>)
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	f003 020f 	and.w	r2, r3, #15
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	440b      	add	r3, r1
 80061f6:	3324      	adds	r3, #36	@ 0x24
 80061f8:	2200      	movs	r2, #0
 80061fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80061fc:	4b1f      	ldr	r3, [pc, #124]	@ (800627c <USBD_CDC_DeInit+0x100>)
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	f003 020f 	and.w	r2, r3, #15
 8006204:	6879      	ldr	r1, [r7, #4]
 8006206:	4613      	mov	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	440b      	add	r3, r1
 8006210:	3326      	adds	r3, #38	@ 0x26
 8006212:	2200      	movs	r2, #0
 8006214:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	32b0      	adds	r2, #176	@ 0xb0
 8006220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01f      	beq.n	8006268 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	33b0      	adds	r3, #176	@ 0xb0
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	32b0      	adds	r2, #176	@ 0xb0
 8006246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624a:	4618      	mov	r0, r3
 800624c:	f002 fae4 	bl	8008818 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	32b0      	adds	r2, #176	@ 0xb0
 800625a:	2100      	movs	r1, #0
 800625c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20000097 	.word	0x20000097
 8006278:	20000098 	.word	0x20000098
 800627c:	20000099 	.word	0x20000099

08006280 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	32b0      	adds	r2, #176	@ 0xb0
 8006294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006298:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e0bf      	b.n	8006430 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d050      	beq.n	800635e <USBD_CDC_Setup+0xde>
 80062bc:	2b20      	cmp	r3, #32
 80062be:	f040 80af 	bne.w	8006420 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	88db      	ldrh	r3, [r3, #6]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d03a      	beq.n	8006340 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	b25b      	sxtb	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	da1b      	bge.n	800630c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	33b0      	adds	r3, #176	@ 0xb0
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80062ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	88d2      	ldrh	r2, [r2, #6]
 80062f0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	88db      	ldrh	r3, [r3, #6]
 80062f6:	2b07      	cmp	r3, #7
 80062f8:	bf28      	it	cs
 80062fa:	2307      	movcs	r3, #7
 80062fc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	89fa      	ldrh	r2, [r7, #14]
 8006302:	4619      	mov	r1, r3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 fd53 	bl	8007db0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800630a:	e090      	b.n	800642e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	785a      	ldrb	r2, [r3, #1]
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	88db      	ldrh	r3, [r3, #6]
 800631a:	2b3f      	cmp	r3, #63	@ 0x3f
 800631c:	d803      	bhi.n	8006326 <USBD_CDC_Setup+0xa6>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	88db      	ldrh	r3, [r3, #6]
 8006322:	b2da      	uxtb	r2, r3
 8006324:	e000      	b.n	8006328 <USBD_CDC_Setup+0xa8>
 8006326:	2240      	movs	r2, #64	@ 0x40
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800632e:	6939      	ldr	r1, [r7, #16]
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006336:	461a      	mov	r2, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f001 fd65 	bl	8007e08 <USBD_CtlPrepareRx>
      break;
 800633e:	e076      	b.n	800642e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	33b0      	adds	r3, #176	@ 0xb0
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	7850      	ldrb	r0, [r2, #1]
 8006356:	2200      	movs	r2, #0
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	4798      	blx	r3
      break;
 800635c:	e067      	b.n	800642e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	785b      	ldrb	r3, [r3, #1]
 8006362:	2b0b      	cmp	r3, #11
 8006364:	d851      	bhi.n	800640a <USBD_CDC_Setup+0x18a>
 8006366:	a201      	add	r2, pc, #4	@ (adr r2, 800636c <USBD_CDC_Setup+0xec>)
 8006368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636c:	0800639d 	.word	0x0800639d
 8006370:	08006419 	.word	0x08006419
 8006374:	0800640b 	.word	0x0800640b
 8006378:	0800640b 	.word	0x0800640b
 800637c:	0800640b 	.word	0x0800640b
 8006380:	0800640b 	.word	0x0800640b
 8006384:	0800640b 	.word	0x0800640b
 8006388:	0800640b 	.word	0x0800640b
 800638c:	0800640b 	.word	0x0800640b
 8006390:	0800640b 	.word	0x0800640b
 8006394:	080063c7 	.word	0x080063c7
 8006398:	080063f1 	.word	0x080063f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b03      	cmp	r3, #3
 80063a6:	d107      	bne.n	80063b8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80063a8:	f107 030a 	add.w	r3, r7, #10
 80063ac:	2202      	movs	r2, #2
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f001 fcfd 	bl	8007db0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063b6:	e032      	b.n	800641e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80063b8:	6839      	ldr	r1, [r7, #0]
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f001 fc7b 	bl	8007cb6 <USBD_CtlError>
            ret = USBD_FAIL;
 80063c0:	2303      	movs	r3, #3
 80063c2:	75fb      	strb	r3, [r7, #23]
          break;
 80063c4:	e02b      	b.n	800641e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	d107      	bne.n	80063e2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80063d2:	f107 030d 	add.w	r3, r7, #13
 80063d6:	2201      	movs	r2, #1
 80063d8:	4619      	mov	r1, r3
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f001 fce8 	bl	8007db0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063e0:	e01d      	b.n	800641e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f001 fc66 	bl	8007cb6 <USBD_CtlError>
            ret = USBD_FAIL;
 80063ea:	2303      	movs	r3, #3
 80063ec:	75fb      	strb	r3, [r7, #23]
          break;
 80063ee:	e016      	b.n	800641e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b03      	cmp	r3, #3
 80063fa:	d00f      	beq.n	800641c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f001 fc59 	bl	8007cb6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006404:	2303      	movs	r3, #3
 8006406:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006408:	e008      	b.n	800641c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800640a:	6839      	ldr	r1, [r7, #0]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f001 fc52 	bl	8007cb6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006412:	2303      	movs	r3, #3
 8006414:	75fb      	strb	r3, [r7, #23]
          break;
 8006416:	e002      	b.n	800641e <USBD_CDC_Setup+0x19e>
          break;
 8006418:	bf00      	nop
 800641a:	e008      	b.n	800642e <USBD_CDC_Setup+0x1ae>
          break;
 800641c:	bf00      	nop
      }
      break;
 800641e:	e006      	b.n	800642e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006420:	6839      	ldr	r1, [r7, #0]
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f001 fc47 	bl	8007cb6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006428:	2303      	movs	r3, #3
 800642a:	75fb      	strb	r3, [r7, #23]
      break;
 800642c:	bf00      	nop
  }

  return (uint8_t)ret;
 800642e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800644a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	32b0      	adds	r2, #176	@ 0xb0
 8006456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800645e:	2303      	movs	r3, #3
 8006460:	e065      	b.n	800652e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	32b0      	adds	r2, #176	@ 0xb0
 800646c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006470:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006472:	78fb      	ldrb	r3, [r7, #3]
 8006474:	f003 020f 	and.w	r2, r3, #15
 8006478:	6879      	ldr	r1, [r7, #4]
 800647a:	4613      	mov	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	440b      	add	r3, r1
 8006484:	3318      	adds	r3, #24
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d02f      	beq.n	80064ec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800648c:	78fb      	ldrb	r3, [r7, #3]
 800648e:	f003 020f 	and.w	r2, r3, #15
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	440b      	add	r3, r1
 800649e:	3318      	adds	r3, #24
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	78fb      	ldrb	r3, [r7, #3]
 80064a4:	f003 010f 	and.w	r1, r3, #15
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	460b      	mov	r3, r1
 80064ac:	00db      	lsls	r3, r3, #3
 80064ae:	440b      	add	r3, r1
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4403      	add	r3, r0
 80064b4:	331c      	adds	r3, #28
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80064bc:	fb01 f303 	mul.w	r3, r1, r3
 80064c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d112      	bne.n	80064ec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80064c6:	78fb      	ldrb	r3, [r7, #3]
 80064c8:	f003 020f 	and.w	r2, r3, #15
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	4613      	mov	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	440b      	add	r3, r1
 80064d8:	3318      	adds	r3, #24
 80064da:	2200      	movs	r2, #0
 80064dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80064de:	78f9      	ldrb	r1, [r7, #3]
 80064e0:	2300      	movs	r3, #0
 80064e2:	2200      	movs	r2, #0
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f002 f934 	bl	8008752 <USBD_LL_Transmit>
 80064ea:	e01f      	b.n	800652c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	33b0      	adds	r3, #176	@ 0xb0
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d010      	beq.n	800652c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	33b0      	adds	r3, #176	@ 0xb0
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006528:	78fa      	ldrb	r2, [r7, #3]
 800652a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	460b      	mov	r3, r1
 8006540:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	32b0      	adds	r2, #176	@ 0xb0
 800654c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006550:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	32b0      	adds	r2, #176	@ 0xb0
 800655c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006564:	2303      	movs	r3, #3
 8006566:	e01a      	b.n	800659e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	4619      	mov	r1, r3
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f002 f932 	bl	80087d6 <USBD_LL_GetRxDataSize>
 8006572:	4602      	mov	r2, r0
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	33b0      	adds	r3, #176	@ 0xb0
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006598:	4611      	mov	r1, r2
 800659a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	32b0      	adds	r2, #176	@ 0xb0
 80065b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e024      	b.n	8006612 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	33b0      	adds	r3, #176	@ 0xb0
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d019      	beq.n	8006610 <USBD_CDC_EP0_RxReady+0x6a>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80065e2:	2bff      	cmp	r3, #255	@ 0xff
 80065e4:	d014      	beq.n	8006610 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	33b0      	adds	r3, #176	@ 0xb0
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80065fe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006606:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	22ff      	movs	r2, #255	@ 0xff
 800660c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
	...

0800661c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006624:	2182      	movs	r1, #130	@ 0x82
 8006626:	4818      	ldr	r0, [pc, #96]	@ (8006688 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006628:	f000 fd0f 	bl	800704a <USBD_GetEpDesc>
 800662c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800662e:	2101      	movs	r1, #1
 8006630:	4815      	ldr	r0, [pc, #84]	@ (8006688 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006632:	f000 fd0a 	bl	800704a <USBD_GetEpDesc>
 8006636:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006638:	2181      	movs	r1, #129	@ 0x81
 800663a:	4813      	ldr	r0, [pc, #76]	@ (8006688 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800663c:	f000 fd05 	bl	800704a <USBD_GetEpDesc>
 8006640:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2210      	movs	r2, #16
 800664c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d006      	beq.n	8006662 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2200      	movs	r2, #0
 8006658:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800665c:	711a      	strb	r2, [r3, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d006      	beq.n	8006676 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006670:	711a      	strb	r2, [r3, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2243      	movs	r2, #67	@ 0x43
 800667a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800667c:	4b02      	ldr	r3, [pc, #8]	@ (8006688 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20000054 	.word	0x20000054

0800668c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006694:	2182      	movs	r1, #130	@ 0x82
 8006696:	4818      	ldr	r0, [pc, #96]	@ (80066f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006698:	f000 fcd7 	bl	800704a <USBD_GetEpDesc>
 800669c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800669e:	2101      	movs	r1, #1
 80066a0:	4815      	ldr	r0, [pc, #84]	@ (80066f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066a2:	f000 fcd2 	bl	800704a <USBD_GetEpDesc>
 80066a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80066a8:	2181      	movs	r1, #129	@ 0x81
 80066aa:	4813      	ldr	r0, [pc, #76]	@ (80066f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066ac:	f000 fccd 	bl	800704a <USBD_GetEpDesc>
 80066b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2210      	movs	r2, #16
 80066bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d006      	beq.n	80066d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	2200      	movs	r2, #0
 80066c8:	711a      	strb	r2, [r3, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f042 0202 	orr.w	r2, r2, #2
 80066d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d006      	beq.n	80066e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	711a      	strb	r2, [r3, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f042 0202 	orr.w	r2, r2, #2
 80066e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2243      	movs	r2, #67	@ 0x43
 80066ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80066ec:	4b02      	ldr	r3, [pc, #8]	@ (80066f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3718      	adds	r7, #24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	20000054 	.word	0x20000054

080066fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006704:	2182      	movs	r1, #130	@ 0x82
 8006706:	4818      	ldr	r0, [pc, #96]	@ (8006768 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006708:	f000 fc9f 	bl	800704a <USBD_GetEpDesc>
 800670c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800670e:	2101      	movs	r1, #1
 8006710:	4815      	ldr	r0, [pc, #84]	@ (8006768 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006712:	f000 fc9a 	bl	800704a <USBD_GetEpDesc>
 8006716:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006718:	2181      	movs	r1, #129	@ 0x81
 800671a:	4813      	ldr	r0, [pc, #76]	@ (8006768 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800671c:	f000 fc95 	bl	800704a <USBD_GetEpDesc>
 8006720:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2210      	movs	r2, #16
 800672c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d006      	beq.n	8006742 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	2200      	movs	r2, #0
 8006738:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800673c:	711a      	strb	r2, [r3, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d006      	beq.n	8006756 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006750:	711a      	strb	r2, [r3, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2243      	movs	r2, #67	@ 0x43
 800675a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800675c:	4b02      	ldr	r3, [pc, #8]	@ (8006768 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20000054 	.word	0x20000054

0800676c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	220a      	movs	r2, #10
 8006778:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800677a:	4b03      	ldr	r3, [pc, #12]	@ (8006788 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	20000010 	.word	0x20000010

0800678c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800679c:	2303      	movs	r3, #3
 800679e:	e009      	b.n	80067b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	33b0      	adds	r3, #176	@ 0xb0
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	32b0      	adds	r2, #176	@ 0xb0
 80067d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067da:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e008      	b.n	80067f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	371c      	adds	r7, #28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	32b0      	adds	r2, #176	@ 0xb0
 8006818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006824:	2303      	movs	r3, #3
 8006826:	e004      	b.n	8006832 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
	...

08006840 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	32b0      	adds	r2, #176	@ 0xb0
 8006852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006856:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	32b0      	adds	r2, #176	@ 0xb0
 8006862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800686a:	2303      	movs	r3, #3
 800686c:	e018      	b.n	80068a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	7c1b      	ldrb	r3, [r3, #16]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10a      	bne.n	800688c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006876:	4b0c      	ldr	r3, [pc, #48]	@ (80068a8 <USBD_CDC_ReceivePacket+0x68>)
 8006878:	7819      	ldrb	r1, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006880:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f001 ff85 	bl	8008794 <USBD_LL_PrepareReceive>
 800688a:	e008      	b.n	800689e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800688c:	4b06      	ldr	r3, [pc, #24]	@ (80068a8 <USBD_CDC_ReceivePacket+0x68>)
 800688e:	7819      	ldrb	r1, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006896:	2340      	movs	r3, #64	@ 0x40
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 ff7b 	bl	8008794 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	20000098 	.word	0x20000098

080068ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	4613      	mov	r3, r2
 80068b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e01f      	b.n	8006904 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	79fa      	ldrb	r2, [r7, #7]
 80068f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f001 fdf5 	bl	80084e8 <USBD_LL_Init>
 80068fe:	4603      	mov	r3, r0
 8006900:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006902:	7dfb      	ldrb	r3, [r7, #23]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006920:	2303      	movs	r3, #3
 8006922:	e025      	b.n	8006970 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	32ae      	adds	r2, #174	@ 0xae
 8006936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800693a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00f      	beq.n	8006960 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	32ae      	adds	r2, #174	@ 0xae
 800694a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800694e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006950:	f107 020e 	add.w	r2, r7, #14
 8006954:	4610      	mov	r0, r2
 8006956:	4798      	blx	r3
 8006958:	4602      	mov	r2, r0
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f001 fdfd 	bl	8008580 <USBD_LL_Start>
 8006986:	4603      	mov	r3, r0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006998:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800699a:	4618      	mov	r0, r3
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b084      	sub	sp, #16
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	460b      	mov	r3, r1
 80069b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d009      	beq.n	80069d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	78fa      	ldrb	r2, [r7, #3]
 80069ca:	4611      	mov	r1, r2
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	4798      	blx	r3
 80069d0:	4603      	mov	r3, r0
 80069d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	460b      	mov	r3, r1
 80069e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	78fa      	ldrb	r2, [r7, #3]
 80069f8:	4611      	mov	r1, r2
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	4798      	blx	r3
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006a04:	2303      	movs	r3, #3
 8006a06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b084      	sub	sp, #16
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f001 f90c 	bl	8007c42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006a38:	461a      	mov	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006a46:	f003 031f 	and.w	r3, r3, #31
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d01a      	beq.n	8006a84 <USBD_LL_SetupStage+0x72>
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d822      	bhi.n	8006a98 <USBD_LL_SetupStage+0x86>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d002      	beq.n	8006a5c <USBD_LL_SetupStage+0x4a>
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d00a      	beq.n	8006a70 <USBD_LL_SetupStage+0x5e>
 8006a5a:	e01d      	b.n	8006a98 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a62:	4619      	mov	r1, r3
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fb63 	bl	8007130 <USBD_StdDevReq>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a6e:	e020      	b.n	8006ab2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fbcb 	bl	8007214 <USBD_StdItfReq>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	73fb      	strb	r3, [r7, #15]
      break;
 8006a82:	e016      	b.n	8006ab2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fc2d 	bl	80072ec <USBD_StdEPReq>
 8006a92:	4603      	mov	r3, r0
 8006a94:	73fb      	strb	r3, [r7, #15]
      break;
 8006a96:	e00c      	b.n	8006ab2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006a9e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f001 fdca 	bl	8008640 <USBD_LL_StallEP>
 8006aac:	4603      	mov	r3, r0
 8006aae:	73fb      	strb	r3, [r7, #15]
      break;
 8006ab0:	bf00      	nop
  }

  return ret;
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006ace:	7afb      	ldrb	r3, [r7, #11]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d16e      	bne.n	8006bb2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006ada:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	f040 8098 	bne.w	8006c18 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d913      	bls.n	8006b1c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	1ad2      	subs	r2, r2, r3
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	bf28      	it	cs
 8006b0e:	4613      	movcs	r3, r2
 8006b10:	461a      	mov	r2, r3
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f001 f994 	bl	8007e42 <USBD_CtlContinueRx>
 8006b1a:	e07d      	b.n	8006c18 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006b22:	f003 031f 	and.w	r3, r3, #31
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d014      	beq.n	8006b54 <USBD_LL_DataOutStage+0x98>
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d81d      	bhi.n	8006b6a <USBD_LL_DataOutStage+0xae>
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <USBD_LL_DataOutStage+0x7c>
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d003      	beq.n	8006b3e <USBD_LL_DataOutStage+0x82>
 8006b36:	e018      	b.n	8006b6a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	75bb      	strb	r3, [r7, #22]
            break;
 8006b3c:	e018      	b.n	8006b70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	4619      	mov	r1, r3
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 fa64 	bl	8007016 <USBD_CoreFindIF>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	75bb      	strb	r3, [r7, #22]
            break;
 8006b52:	e00d      	b.n	8006b70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 fa66 	bl	8007030 <USBD_CoreFindEP>
 8006b64:	4603      	mov	r3, r0
 8006b66:	75bb      	strb	r3, [r7, #22]
            break;
 8006b68:	e002      	b.n	8006b70 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	75bb      	strb	r3, [r7, #22]
            break;
 8006b6e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006b70:	7dbb      	ldrb	r3, [r7, #22]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d119      	bne.n	8006baa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d113      	bne.n	8006baa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006b82:	7dba      	ldrb	r2, [r7, #22]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	32ae      	adds	r2, #174	@ 0xae
 8006b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00b      	beq.n	8006baa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006b92:	7dba      	ldrb	r2, [r7, #22]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006b9a:	7dba      	ldrb	r2, [r7, #22]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	32ae      	adds	r2, #174	@ 0xae
 8006ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f001 f95a 	bl	8007e64 <USBD_CtlSendStatus>
 8006bb0:	e032      	b.n	8006c18 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006bb2:	7afb      	ldrb	r3, [r7, #11]
 8006bb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	4619      	mov	r1, r3
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 fa37 	bl	8007030 <USBD_CoreFindEP>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bc6:	7dbb      	ldrb	r3, [r7, #22]
 8006bc8:	2bff      	cmp	r3, #255	@ 0xff
 8006bca:	d025      	beq.n	8006c18 <USBD_LL_DataOutStage+0x15c>
 8006bcc:	7dbb      	ldrb	r3, [r7, #22]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d122      	bne.n	8006c18 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d117      	bne.n	8006c0e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006bde:	7dba      	ldrb	r2, [r7, #22]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	32ae      	adds	r2, #174	@ 0xae
 8006be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00f      	beq.n	8006c0e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006bee:	7dba      	ldrb	r2, [r7, #22]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006bf6:	7dba      	ldrb	r2, [r7, #22]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	32ae      	adds	r2, #174	@ 0xae
 8006bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	7afa      	ldrb	r2, [r7, #11]
 8006c04:	4611      	mov	r1, r2
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	4798      	blx	r3
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d001      	beq.n	8006c18 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006c14:	7dfb      	ldrb	r3, [r7, #23]
 8006c16:	e000      	b.n	8006c1a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3718      	adds	r7, #24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b086      	sub	sp, #24
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	607a      	str	r2, [r7, #4]
 8006c2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006c30:	7afb      	ldrb	r3, [r7, #11]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d16f      	bne.n	8006d16 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	3314      	adds	r3, #20
 8006c3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d15a      	bne.n	8006cfc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	689a      	ldr	r2, [r3, #8]
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d914      	bls.n	8006c7c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	689a      	ldr	r2, [r3, #8]
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	1ad2      	subs	r2, r2, r3
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	461a      	mov	r2, r3
 8006c66:	6879      	ldr	r1, [r7, #4]
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f001 f8bc 	bl	8007de6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c6e:	2300      	movs	r3, #0
 8006c70:	2200      	movs	r2, #0
 8006c72:	2100      	movs	r1, #0
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f001 fd8d 	bl	8008794 <USBD_LL_PrepareReceive>
 8006c7a:	e03f      	b.n	8006cfc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	68da      	ldr	r2, [r3, #12]
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d11c      	bne.n	8006cc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d316      	bcc.n	8006cc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d20f      	bcs.n	8006cc2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f001 f89d 	bl	8007de6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	2100      	movs	r1, #0
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f001 fd6a 	bl	8008794 <USBD_LL_PrepareReceive>
 8006cc0:	e01c      	b.n	8006cfc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d10f      	bne.n	8006cee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d009      	beq.n	8006cee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cee:	2180      	movs	r1, #128	@ 0x80
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f001 fca5 	bl	8008640 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f001 f8c7 	bl	8007e8a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d03a      	beq.n	8006d7c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f7ff fe42 	bl	8006990 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006d14:	e032      	b.n	8006d7c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006d16:	7afb      	ldrb	r3, [r7, #11]
 8006d18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	4619      	mov	r1, r3
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 f985 	bl	8007030 <USBD_CoreFindEP>
 8006d26:	4603      	mov	r3, r0
 8006d28:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d2a:	7dfb      	ldrb	r3, [r7, #23]
 8006d2c:	2bff      	cmp	r3, #255	@ 0xff
 8006d2e:	d025      	beq.n	8006d7c <USBD_LL_DataInStage+0x15a>
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d122      	bne.n	8006d7c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d11c      	bne.n	8006d7c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006d42:	7dfa      	ldrb	r2, [r7, #23]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	32ae      	adds	r2, #174	@ 0xae
 8006d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d014      	beq.n	8006d7c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006d52:	7dfa      	ldrb	r2, [r7, #23]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006d5a:	7dfa      	ldrb	r2, [r7, #23]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	32ae      	adds	r2, #174	@ 0xae
 8006d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	7afa      	ldrb	r2, [r7, #11]
 8006d68:	4611      	mov	r1, r2
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	4798      	blx	r3
 8006d6e:	4603      	mov	r3, r0
 8006d70:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006d72:	7dbb      	ldrb	r3, [r7, #22]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006d78:	7dbb      	ldrb	r3, [r7, #22]
 8006d7a:	e000      	b.n	8006d7e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d014      	beq.n	8006dec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00e      	beq.n	8006dec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	6852      	ldr	r2, [r2, #4]
 8006dda:	b2d2      	uxtb	r2, r2
 8006ddc:	4611      	mov	r1, r2
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	4798      	blx	r3
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006de8:	2303      	movs	r3, #3
 8006dea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dec:	2340      	movs	r3, #64	@ 0x40
 8006dee:	2200      	movs	r2, #0
 8006df0:	2100      	movs	r1, #0
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 fbdf 	bl	80085b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2240      	movs	r2, #64	@ 0x40
 8006e04:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e08:	2340      	movs	r3, #64	@ 0x40
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	2180      	movs	r1, #128	@ 0x80
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f001 fbd1 	bl	80085b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2240      	movs	r2, #64	@ 0x40
 8006e1e:	621a      	str	r2, [r3, #32]

  return ret;
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b083      	sub	sp, #12
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	460b      	mov	r3, r1
 8006e34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	78fa      	ldrb	r2, [r7, #3]
 8006e3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	d006      	beq.n	8006e6c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2204      	movs	r2, #4
 8006e70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	d106      	bne.n	8006ea4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d110      	bne.n	8006ee8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00b      	beq.n	8006ee8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d005      	beq.n	8006ee8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b082      	sub	sp, #8
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	460b      	mov	r3, r1
 8006efc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	32ae      	adds	r2, #174	@ 0xae
 8006f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e01c      	b.n	8006f4e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d115      	bne.n	8006f4c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	32ae      	adds	r2, #174	@ 0xae
 8006f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00b      	beq.n	8006f4c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	32ae      	adds	r2, #174	@ 0xae
 8006f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	78fa      	ldrb	r2, [r7, #3]
 8006f46:	4611      	mov	r1, r2
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	460b      	mov	r3, r1
 8006f60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	32ae      	adds	r2, #174	@ 0xae
 8006f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e01c      	b.n	8006fb2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b03      	cmp	r3, #3
 8006f82:	d115      	bne.n	8006fb0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	32ae      	adds	r2, #174	@ 0xae
 8006f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00b      	beq.n	8006fb0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	32ae      	adds	r2, #174	@ 0xae
 8006fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa8:	78fa      	ldrb	r2, [r7, #3]
 8006faa:	4611      	mov	r1, r2
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00e      	beq.n	800700c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	6852      	ldr	r2, [r2, #4]
 8006ffa:	b2d2      	uxtb	r2, r2
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	4798      	blx	r3
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007008:	2303      	movs	r3, #3
 800700a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800700c:	7bfb      	ldrb	r3, [r7, #15]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	460b      	mov	r3, r1
 8007020:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007022:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007024:	4618      	mov	r0, r3
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800703c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800703e:	4618      	mov	r0, r3
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b086      	sub	sp, #24
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	460b      	mov	r3, r1
 8007054:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800705e:	2300      	movs	r3, #0
 8007060:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	885b      	ldrh	r3, [r3, #2]
 8007066:	b29b      	uxth	r3, r3
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	7812      	ldrb	r2, [r2, #0]
 800706c:	4293      	cmp	r3, r2
 800706e:	d91f      	bls.n	80070b0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007076:	e013      	b.n	80070a0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007078:	f107 030a 	add.w	r3, r7, #10
 800707c:	4619      	mov	r1, r3
 800707e:	6978      	ldr	r0, [r7, #20]
 8007080:	f000 f81b 	bl	80070ba <USBD_GetNextDesc>
 8007084:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	785b      	ldrb	r3, [r3, #1]
 800708a:	2b05      	cmp	r3, #5
 800708c:	d108      	bne.n	80070a0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	789b      	ldrb	r3, [r3, #2]
 8007096:	78fa      	ldrb	r2, [r7, #3]
 8007098:	429a      	cmp	r2, r3
 800709a:	d008      	beq.n	80070ae <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800709c:	2300      	movs	r3, #0
 800709e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	885b      	ldrh	r3, [r3, #2]
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	897b      	ldrh	r3, [r7, #10]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d8e5      	bhi.n	8007078 <USBD_GetEpDesc+0x2e>
 80070ac:	e000      	b.n	80070b0 <USBD_GetEpDesc+0x66>
          break;
 80070ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80070b0:	693b      	ldr	r3, [r7, #16]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b085      	sub	sp, #20
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	7812      	ldrb	r2, [r2, #0]
 80070d0:	4413      	add	r3, r2
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	461a      	mov	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4413      	add	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80070e4:	68fb      	ldr	r3, [r7, #12]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80070f2:	b480      	push	{r7}
 80070f4:	b087      	sub	sp, #28
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	3301      	adds	r3, #1
 8007108:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007110:	8a3b      	ldrh	r3, [r7, #16]
 8007112:	021b      	lsls	r3, r3, #8
 8007114:	b21a      	sxth	r2, r3
 8007116:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800711a:	4313      	orrs	r3, r2
 800711c:	b21b      	sxth	r3, r3
 800711e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007120:	89fb      	ldrh	r3, [r7, #14]
}
 8007122:	4618      	mov	r0, r3
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
	...

08007130 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007146:	2b40      	cmp	r3, #64	@ 0x40
 8007148:	d005      	beq.n	8007156 <USBD_StdDevReq+0x26>
 800714a:	2b40      	cmp	r3, #64	@ 0x40
 800714c:	d857      	bhi.n	80071fe <USBD_StdDevReq+0xce>
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00f      	beq.n	8007172 <USBD_StdDevReq+0x42>
 8007152:	2b20      	cmp	r3, #32
 8007154:	d153      	bne.n	80071fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	32ae      	adds	r2, #174	@ 0xae
 8007160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	4798      	blx	r3
 800716c:	4603      	mov	r3, r0
 800716e:	73fb      	strb	r3, [r7, #15]
      break;
 8007170:	e04a      	b.n	8007208 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	785b      	ldrb	r3, [r3, #1]
 8007176:	2b09      	cmp	r3, #9
 8007178:	d83b      	bhi.n	80071f2 <USBD_StdDevReq+0xc2>
 800717a:	a201      	add	r2, pc, #4	@ (adr r2, 8007180 <USBD_StdDevReq+0x50>)
 800717c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007180:	080071d5 	.word	0x080071d5
 8007184:	080071e9 	.word	0x080071e9
 8007188:	080071f3 	.word	0x080071f3
 800718c:	080071df 	.word	0x080071df
 8007190:	080071f3 	.word	0x080071f3
 8007194:	080071b3 	.word	0x080071b3
 8007198:	080071a9 	.word	0x080071a9
 800719c:	080071f3 	.word	0x080071f3
 80071a0:	080071cb 	.word	0x080071cb
 80071a4:	080071bd 	.word	0x080071bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fa3c 	bl	8007628 <USBD_GetDescriptor>
          break;
 80071b0:	e024      	b.n	80071fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fba1 	bl	80078fc <USBD_SetAddress>
          break;
 80071ba:	e01f      	b.n	80071fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fbe0 	bl	8007984 <USBD_SetConfig>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73fb      	strb	r3, [r7, #15]
          break;
 80071c8:	e018      	b.n	80071fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fc83 	bl	8007ad8 <USBD_GetConfig>
          break;
 80071d2:	e013      	b.n	80071fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fcb4 	bl	8007b44 <USBD_GetStatus>
          break;
 80071dc:	e00e      	b.n	80071fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fce3 	bl	8007bac <USBD_SetFeature>
          break;
 80071e6:	e009      	b.n	80071fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fd07 	bl	8007bfe <USBD_ClrFeature>
          break;
 80071f0:	e004      	b.n	80071fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fd5e 	bl	8007cb6 <USBD_CtlError>
          break;
 80071fa:	bf00      	nop
      }
      break;
 80071fc:	e004      	b.n	8007208 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fd58 	bl	8007cb6 <USBD_CtlError>
      break;
 8007206:	bf00      	nop
  }

  return ret;
 8007208:	7bfb      	ldrb	r3, [r7, #15]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop

08007214 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800722a:	2b40      	cmp	r3, #64	@ 0x40
 800722c:	d005      	beq.n	800723a <USBD_StdItfReq+0x26>
 800722e:	2b40      	cmp	r3, #64	@ 0x40
 8007230:	d852      	bhi.n	80072d8 <USBD_StdItfReq+0xc4>
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <USBD_StdItfReq+0x26>
 8007236:	2b20      	cmp	r3, #32
 8007238:	d14e      	bne.n	80072d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007240:	b2db      	uxtb	r3, r3
 8007242:	3b01      	subs	r3, #1
 8007244:	2b02      	cmp	r3, #2
 8007246:	d840      	bhi.n	80072ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	889b      	ldrh	r3, [r3, #4]
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b01      	cmp	r3, #1
 8007250:	d836      	bhi.n	80072c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	889b      	ldrh	r3, [r3, #4]
 8007256:	b2db      	uxtb	r3, r3
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7ff fedb 	bl	8007016 <USBD_CoreFindIF>
 8007260:	4603      	mov	r3, r0
 8007262:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	2bff      	cmp	r3, #255	@ 0xff
 8007268:	d01d      	beq.n	80072a6 <USBD_StdItfReq+0x92>
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d11a      	bne.n	80072a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007270:	7bba      	ldrb	r2, [r7, #14]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	32ae      	adds	r2, #174	@ 0xae
 8007276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00f      	beq.n	80072a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007280:	7bba      	ldrb	r2, [r7, #14]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007288:	7bba      	ldrb	r2, [r7, #14]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	32ae      	adds	r2, #174	@ 0xae
 800728e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	4798      	blx	r3
 800729a:	4603      	mov	r3, r0
 800729c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800729e:	e004      	b.n	80072aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80072a0:	2303      	movs	r3, #3
 80072a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80072a4:	e001      	b.n	80072aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80072a6:	2303      	movs	r3, #3
 80072a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	88db      	ldrh	r3, [r3, #6]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d110      	bne.n	80072d4 <USBD_StdItfReq+0xc0>
 80072b2:	7bfb      	ldrb	r3, [r7, #15]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10d      	bne.n	80072d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fdd3 	bl	8007e64 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072be:	e009      	b.n	80072d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fcf7 	bl	8007cb6 <USBD_CtlError>
          break;
 80072c8:	e004      	b.n	80072d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fcf2 	bl	8007cb6 <USBD_CtlError>
          break;
 80072d2:	e000      	b.n	80072d6 <USBD_StdItfReq+0xc2>
          break;
 80072d4:	bf00      	nop
      }
      break;
 80072d6:	e004      	b.n	80072e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fceb 	bl	8007cb6 <USBD_CtlError>
      break;
 80072e0:	bf00      	nop
  }

  return ret;
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80072f6:	2300      	movs	r3, #0
 80072f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	889b      	ldrh	r3, [r3, #4]
 80072fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007308:	2b40      	cmp	r3, #64	@ 0x40
 800730a:	d007      	beq.n	800731c <USBD_StdEPReq+0x30>
 800730c:	2b40      	cmp	r3, #64	@ 0x40
 800730e:	f200 817f 	bhi.w	8007610 <USBD_StdEPReq+0x324>
 8007312:	2b00      	cmp	r3, #0
 8007314:	d02a      	beq.n	800736c <USBD_StdEPReq+0x80>
 8007316:	2b20      	cmp	r3, #32
 8007318:	f040 817a 	bne.w	8007610 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800731c:	7bbb      	ldrb	r3, [r7, #14]
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff fe85 	bl	8007030 <USBD_CoreFindEP>
 8007326:	4603      	mov	r3, r0
 8007328:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800732a:	7b7b      	ldrb	r3, [r7, #13]
 800732c:	2bff      	cmp	r3, #255	@ 0xff
 800732e:	f000 8174 	beq.w	800761a <USBD_StdEPReq+0x32e>
 8007332:	7b7b      	ldrb	r3, [r7, #13]
 8007334:	2b00      	cmp	r3, #0
 8007336:	f040 8170 	bne.w	800761a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800733a:	7b7a      	ldrb	r2, [r7, #13]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007342:	7b7a      	ldrb	r2, [r7, #13]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	32ae      	adds	r2, #174	@ 0xae
 8007348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 8163 	beq.w	800761a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007354:	7b7a      	ldrb	r2, [r7, #13]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	32ae      	adds	r2, #174	@ 0xae
 800735a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	4798      	blx	r3
 8007366:	4603      	mov	r3, r0
 8007368:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800736a:	e156      	b.n	800761a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	785b      	ldrb	r3, [r3, #1]
 8007370:	2b03      	cmp	r3, #3
 8007372:	d008      	beq.n	8007386 <USBD_StdEPReq+0x9a>
 8007374:	2b03      	cmp	r3, #3
 8007376:	f300 8145 	bgt.w	8007604 <USBD_StdEPReq+0x318>
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 809b 	beq.w	80074b6 <USBD_StdEPReq+0x1ca>
 8007380:	2b01      	cmp	r3, #1
 8007382:	d03c      	beq.n	80073fe <USBD_StdEPReq+0x112>
 8007384:	e13e      	b.n	8007604 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d002      	beq.n	8007398 <USBD_StdEPReq+0xac>
 8007392:	2b03      	cmp	r3, #3
 8007394:	d016      	beq.n	80073c4 <USBD_StdEPReq+0xd8>
 8007396:	e02c      	b.n	80073f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007398:	7bbb      	ldrb	r3, [r7, #14]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00d      	beq.n	80073ba <USBD_StdEPReq+0xce>
 800739e:	7bbb      	ldrb	r3, [r7, #14]
 80073a0:	2b80      	cmp	r3, #128	@ 0x80
 80073a2:	d00a      	beq.n	80073ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073a4:	7bbb      	ldrb	r3, [r7, #14]
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f001 f949 	bl	8008640 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073ae:	2180      	movs	r1, #128	@ 0x80
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f001 f945 	bl	8008640 <USBD_LL_StallEP>
 80073b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073b8:	e020      	b.n	80073fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fc7a 	bl	8007cb6 <USBD_CtlError>
              break;
 80073c2:	e01b      	b.n	80073fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	885b      	ldrh	r3, [r3, #2]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10e      	bne.n	80073ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00b      	beq.n	80073ea <USBD_StdEPReq+0xfe>
 80073d2:	7bbb      	ldrb	r3, [r7, #14]
 80073d4:	2b80      	cmp	r3, #128	@ 0x80
 80073d6:	d008      	beq.n	80073ea <USBD_StdEPReq+0xfe>
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	88db      	ldrh	r3, [r3, #6]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d104      	bne.n	80073ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 f92b 	bl	8008640 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fd3a 	bl	8007e64 <USBD_CtlSendStatus>

              break;
 80073f0:	e004      	b.n	80073fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fc5e 	bl	8007cb6 <USBD_CtlError>
              break;
 80073fa:	bf00      	nop
          }
          break;
 80073fc:	e107      	b.n	800760e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b02      	cmp	r3, #2
 8007408:	d002      	beq.n	8007410 <USBD_StdEPReq+0x124>
 800740a:	2b03      	cmp	r3, #3
 800740c:	d016      	beq.n	800743c <USBD_StdEPReq+0x150>
 800740e:	e04b      	b.n	80074a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007410:	7bbb      	ldrb	r3, [r7, #14]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00d      	beq.n	8007432 <USBD_StdEPReq+0x146>
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	2b80      	cmp	r3, #128	@ 0x80
 800741a:	d00a      	beq.n	8007432 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800741c:	7bbb      	ldrb	r3, [r7, #14]
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f001 f90d 	bl	8008640 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007426:	2180      	movs	r1, #128	@ 0x80
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f001 f909 	bl	8008640 <USBD_LL_StallEP>
 800742e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007430:	e040      	b.n	80074b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fc3e 	bl	8007cb6 <USBD_CtlError>
              break;
 800743a:	e03b      	b.n	80074b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	885b      	ldrh	r3, [r3, #2]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d136      	bne.n	80074b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800744a:	2b00      	cmp	r3, #0
 800744c:	d004      	beq.n	8007458 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f001 f913 	bl	800867e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fd03 	bl	8007e64 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800745e:	7bbb      	ldrb	r3, [r7, #14]
 8007460:	4619      	mov	r1, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f7ff fde4 	bl	8007030 <USBD_CoreFindEP>
 8007468:	4603      	mov	r3, r0
 800746a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800746c:	7b7b      	ldrb	r3, [r7, #13]
 800746e:	2bff      	cmp	r3, #255	@ 0xff
 8007470:	d01f      	beq.n	80074b2 <USBD_StdEPReq+0x1c6>
 8007472:	7b7b      	ldrb	r3, [r7, #13]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d11c      	bne.n	80074b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007478:	7b7a      	ldrb	r2, [r7, #13]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007480:	7b7a      	ldrb	r2, [r7, #13]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	32ae      	adds	r2, #174	@ 0xae
 8007486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d010      	beq.n	80074b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007490:	7b7a      	ldrb	r2, [r7, #13]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	32ae      	adds	r2, #174	@ 0xae
 8007496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	4798      	blx	r3
 80074a2:	4603      	mov	r3, r0
 80074a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80074a6:	e004      	b.n	80074b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fc03 	bl	8007cb6 <USBD_CtlError>
              break;
 80074b0:	e000      	b.n	80074b4 <USBD_StdEPReq+0x1c8>
              break;
 80074b2:	bf00      	nop
          }
          break;
 80074b4:	e0ab      	b.n	800760e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d002      	beq.n	80074c8 <USBD_StdEPReq+0x1dc>
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	d032      	beq.n	800752c <USBD_StdEPReq+0x240>
 80074c6:	e097      	b.n	80075f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d007      	beq.n	80074de <USBD_StdEPReq+0x1f2>
 80074ce:	7bbb      	ldrb	r3, [r7, #14]
 80074d0:	2b80      	cmp	r3, #128	@ 0x80
 80074d2:	d004      	beq.n	80074de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fbed 	bl	8007cb6 <USBD_CtlError>
                break;
 80074dc:	e091      	b.n	8007602 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	da0b      	bge.n	80074fe <USBD_StdEPReq+0x212>
 80074e6:	7bbb      	ldrb	r3, [r7, #14]
 80074e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074ec:	4613      	mov	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	3310      	adds	r3, #16
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	4413      	add	r3, r2
 80074fa:	3304      	adds	r3, #4
 80074fc:	e00b      	b.n	8007516 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074fe:	7bbb      	ldrb	r3, [r7, #14]
 8007500:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007504:	4613      	mov	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	4413      	add	r3, r2
 8007514:	3304      	adds	r3, #4
 8007516:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2202      	movs	r2, #2
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fc43 	bl	8007db0 <USBD_CtlSendData>
              break;
 800752a:	e06a      	b.n	8007602 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800752c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007530:	2b00      	cmp	r3, #0
 8007532:	da11      	bge.n	8007558 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007534:	7bbb      	ldrb	r3, [r7, #14]
 8007536:	f003 020f 	and.w	r2, r3, #15
 800753a:	6879      	ldr	r1, [r7, #4]
 800753c:	4613      	mov	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	440b      	add	r3, r1
 8007546:	3324      	adds	r3, #36	@ 0x24
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d117      	bne.n	800757e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fbb0 	bl	8007cb6 <USBD_CtlError>
                  break;
 8007556:	e054      	b.n	8007602 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007558:	7bbb      	ldrb	r3, [r7, #14]
 800755a:	f003 020f 	and.w	r2, r3, #15
 800755e:	6879      	ldr	r1, [r7, #4]
 8007560:	4613      	mov	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	440b      	add	r3, r1
 800756a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800756e:	881b      	ldrh	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d104      	bne.n	800757e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fb9d 	bl	8007cb6 <USBD_CtlError>
                  break;
 800757c:	e041      	b.n	8007602 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800757e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007582:	2b00      	cmp	r3, #0
 8007584:	da0b      	bge.n	800759e <USBD_StdEPReq+0x2b2>
 8007586:	7bbb      	ldrb	r3, [r7, #14]
 8007588:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800758c:	4613      	mov	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	3310      	adds	r3, #16
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	4413      	add	r3, r2
 800759a:	3304      	adds	r3, #4
 800759c:	e00b      	b.n	80075b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800759e:	7bbb      	ldrb	r3, [r7, #14]
 80075a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075a4:	4613      	mov	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	4413      	add	r3, r2
 80075b4:	3304      	adds	r3, #4
 80075b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80075b8:	7bbb      	ldrb	r3, [r7, #14]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d002      	beq.n	80075c4 <USBD_StdEPReq+0x2d8>
 80075be:	7bbb      	ldrb	r3, [r7, #14]
 80075c0:	2b80      	cmp	r3, #128	@ 0x80
 80075c2:	d103      	bne.n	80075cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2200      	movs	r2, #0
 80075c8:	601a      	str	r2, [r3, #0]
 80075ca:	e00e      	b.n	80075ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80075cc:	7bbb      	ldrb	r3, [r7, #14]
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f001 f873 	bl	80086bc <USBD_LL_IsStallEP>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	2201      	movs	r2, #1
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	e002      	b.n	80075ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2200      	movs	r2, #0
 80075e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2202      	movs	r2, #2
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fbdd 	bl	8007db0 <USBD_CtlSendData>
              break;
 80075f6:	e004      	b.n	8007602 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fb5b 	bl	8007cb6 <USBD_CtlError>
              break;
 8007600:	bf00      	nop
          }
          break;
 8007602:	e004      	b.n	800760e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fb55 	bl	8007cb6 <USBD_CtlError>
          break;
 800760c:	bf00      	nop
      }
      break;
 800760e:	e005      	b.n	800761c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fb4f 	bl	8007cb6 <USBD_CtlError>
      break;
 8007618:	e000      	b.n	800761c <USBD_StdEPReq+0x330>
      break;
 800761a:	bf00      	nop
  }

  return ret;
 800761c:	7bfb      	ldrb	r3, [r7, #15]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
	...

08007628 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007636:	2300      	movs	r3, #0
 8007638:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	885b      	ldrh	r3, [r3, #2]
 8007642:	0a1b      	lsrs	r3, r3, #8
 8007644:	b29b      	uxth	r3, r3
 8007646:	3b01      	subs	r3, #1
 8007648:	2b06      	cmp	r3, #6
 800764a:	f200 8128 	bhi.w	800789e <USBD_GetDescriptor+0x276>
 800764e:	a201      	add	r2, pc, #4	@ (adr r2, 8007654 <USBD_GetDescriptor+0x2c>)
 8007650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007654:	08007671 	.word	0x08007671
 8007658:	08007689 	.word	0x08007689
 800765c:	080076c9 	.word	0x080076c9
 8007660:	0800789f 	.word	0x0800789f
 8007664:	0800789f 	.word	0x0800789f
 8007668:	0800783f 	.word	0x0800783f
 800766c:	0800786b 	.word	0x0800786b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	7c12      	ldrb	r2, [r2, #16]
 800767c:	f107 0108 	add.w	r1, r7, #8
 8007680:	4610      	mov	r0, r2
 8007682:	4798      	blx	r3
 8007684:	60f8      	str	r0, [r7, #12]
      break;
 8007686:	e112      	b.n	80078ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	7c1b      	ldrb	r3, [r3, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10d      	bne.n	80076ac <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007698:	f107 0208 	add.w	r2, r7, #8
 800769c:	4610      	mov	r0, r2
 800769e:	4798      	blx	r3
 80076a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	3301      	adds	r3, #1
 80076a6:	2202      	movs	r2, #2
 80076a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80076aa:	e100      	b.n	80078ae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b4:	f107 0208 	add.w	r2, r7, #8
 80076b8:	4610      	mov	r0, r2
 80076ba:	4798      	blx	r3
 80076bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3301      	adds	r3, #1
 80076c2:	2202      	movs	r2, #2
 80076c4:	701a      	strb	r2, [r3, #0]
      break;
 80076c6:	e0f2      	b.n	80078ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	885b      	ldrh	r3, [r3, #2]
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b05      	cmp	r3, #5
 80076d0:	f200 80ac 	bhi.w	800782c <USBD_GetDescriptor+0x204>
 80076d4:	a201      	add	r2, pc, #4	@ (adr r2, 80076dc <USBD_GetDescriptor+0xb4>)
 80076d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076da:	bf00      	nop
 80076dc:	080076f5 	.word	0x080076f5
 80076e0:	08007729 	.word	0x08007729
 80076e4:	0800775d 	.word	0x0800775d
 80076e8:	08007791 	.word	0x08007791
 80076ec:	080077c5 	.word	0x080077c5
 80076f0:	080077f9 	.word	0x080077f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00b      	beq.n	8007718 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	7c12      	ldrb	r2, [r2, #16]
 800770c:	f107 0108 	add.w	r1, r7, #8
 8007710:	4610      	mov	r0, r2
 8007712:	4798      	blx	r3
 8007714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007716:	e091      	b.n	800783c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 facb 	bl	8007cb6 <USBD_CtlError>
            err++;
 8007720:	7afb      	ldrb	r3, [r7, #11]
 8007722:	3301      	adds	r3, #1
 8007724:	72fb      	strb	r3, [r7, #11]
          break;
 8007726:	e089      	b.n	800783c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00b      	beq.n	800774c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	7c12      	ldrb	r2, [r2, #16]
 8007740:	f107 0108 	add.w	r1, r7, #8
 8007744:	4610      	mov	r0, r2
 8007746:	4798      	blx	r3
 8007748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800774a:	e077      	b.n	800783c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fab1 	bl	8007cb6 <USBD_CtlError>
            err++;
 8007754:	7afb      	ldrb	r3, [r7, #11]
 8007756:	3301      	adds	r3, #1
 8007758:	72fb      	strb	r3, [r7, #11]
          break;
 800775a:	e06f      	b.n	800783c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	7c12      	ldrb	r2, [r2, #16]
 8007774:	f107 0108 	add.w	r1, r7, #8
 8007778:	4610      	mov	r0, r2
 800777a:	4798      	blx	r3
 800777c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800777e:	e05d      	b.n	800783c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fa97 	bl	8007cb6 <USBD_CtlError>
            err++;
 8007788:	7afb      	ldrb	r3, [r7, #11]
 800778a:	3301      	adds	r3, #1
 800778c:	72fb      	strb	r3, [r7, #11]
          break;
 800778e:	e055      	b.n	800783c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00b      	beq.n	80077b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	7c12      	ldrb	r2, [r2, #16]
 80077a8:	f107 0108 	add.w	r1, r7, #8
 80077ac:	4610      	mov	r0, r2
 80077ae:	4798      	blx	r3
 80077b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077b2:	e043      	b.n	800783c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fa7d 	bl	8007cb6 <USBD_CtlError>
            err++;
 80077bc:	7afb      	ldrb	r3, [r7, #11]
 80077be:	3301      	adds	r3, #1
 80077c0:	72fb      	strb	r3, [r7, #11]
          break;
 80077c2:	e03b      	b.n	800783c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077ca:	695b      	ldr	r3, [r3, #20]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00b      	beq.n	80077e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	7c12      	ldrb	r2, [r2, #16]
 80077dc:	f107 0108 	add.w	r1, r7, #8
 80077e0:	4610      	mov	r0, r2
 80077e2:	4798      	blx	r3
 80077e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077e6:	e029      	b.n	800783c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fa63 	bl	8007cb6 <USBD_CtlError>
            err++;
 80077f0:	7afb      	ldrb	r3, [r7, #11]
 80077f2:	3301      	adds	r3, #1
 80077f4:	72fb      	strb	r3, [r7, #11]
          break;
 80077f6:	e021      	b.n	800783c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	7c12      	ldrb	r2, [r2, #16]
 8007810:	f107 0108 	add.w	r1, r7, #8
 8007814:	4610      	mov	r0, r2
 8007816:	4798      	blx	r3
 8007818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800781a:	e00f      	b.n	800783c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fa49 	bl	8007cb6 <USBD_CtlError>
            err++;
 8007824:	7afb      	ldrb	r3, [r7, #11]
 8007826:	3301      	adds	r3, #1
 8007828:	72fb      	strb	r3, [r7, #11]
          break;
 800782a:	e007      	b.n	800783c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fa41 	bl	8007cb6 <USBD_CtlError>
          err++;
 8007834:	7afb      	ldrb	r3, [r7, #11]
 8007836:	3301      	adds	r3, #1
 8007838:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800783a:	bf00      	nop
      }
      break;
 800783c:	e037      	b.n	80078ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	7c1b      	ldrb	r3, [r3, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d109      	bne.n	800785a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800784c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800784e:	f107 0208 	add.w	r2, r7, #8
 8007852:	4610      	mov	r0, r2
 8007854:	4798      	blx	r3
 8007856:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007858:	e029      	b.n	80078ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fa2a 	bl	8007cb6 <USBD_CtlError>
        err++;
 8007862:	7afb      	ldrb	r3, [r7, #11]
 8007864:	3301      	adds	r3, #1
 8007866:	72fb      	strb	r3, [r7, #11]
      break;
 8007868:	e021      	b.n	80078ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	7c1b      	ldrb	r3, [r3, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10d      	bne.n	800788e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800787a:	f107 0208 	add.w	r2, r7, #8
 800787e:	4610      	mov	r0, r2
 8007880:	4798      	blx	r3
 8007882:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3301      	adds	r3, #1
 8007888:	2207      	movs	r2, #7
 800788a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800788c:	e00f      	b.n	80078ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fa10 	bl	8007cb6 <USBD_CtlError>
        err++;
 8007896:	7afb      	ldrb	r3, [r7, #11]
 8007898:	3301      	adds	r3, #1
 800789a:	72fb      	strb	r3, [r7, #11]
      break;
 800789c:	e007      	b.n	80078ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fa08 	bl	8007cb6 <USBD_CtlError>
      err++;
 80078a6:	7afb      	ldrb	r3, [r7, #11]
 80078a8:	3301      	adds	r3, #1
 80078aa:	72fb      	strb	r3, [r7, #11]
      break;
 80078ac:	bf00      	nop
  }

  if (err != 0U)
 80078ae:	7afb      	ldrb	r3, [r7, #11]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d11e      	bne.n	80078f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	88db      	ldrh	r3, [r3, #6]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d016      	beq.n	80078ea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80078bc:	893b      	ldrh	r3, [r7, #8]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00e      	beq.n	80078e0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	88da      	ldrh	r2, [r3, #6]
 80078c6:	893b      	ldrh	r3, [r7, #8]
 80078c8:	4293      	cmp	r3, r2
 80078ca:	bf28      	it	cs
 80078cc:	4613      	movcs	r3, r2
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078d2:	893b      	ldrh	r3, [r7, #8]
 80078d4:	461a      	mov	r2, r3
 80078d6:	68f9      	ldr	r1, [r7, #12]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fa69 	bl	8007db0 <USBD_CtlSendData>
 80078de:	e009      	b.n	80078f4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f9e7 	bl	8007cb6 <USBD_CtlError>
 80078e8:	e004      	b.n	80078f4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 faba 	bl	8007e64 <USBD_CtlSendStatus>
 80078f0:	e000      	b.n	80078f4 <USBD_GetDescriptor+0x2cc>
    return;
 80078f2:	bf00      	nop
  }
}
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop

080078fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	889b      	ldrh	r3, [r3, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d131      	bne.n	8007972 <USBD_SetAddress+0x76>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	88db      	ldrh	r3, [r3, #6]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d12d      	bne.n	8007972 <USBD_SetAddress+0x76>
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	885b      	ldrh	r3, [r3, #2]
 800791a:	2b7f      	cmp	r3, #127	@ 0x7f
 800791c:	d829      	bhi.n	8007972 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	885b      	ldrh	r3, [r3, #2]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007928:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b03      	cmp	r3, #3
 8007934:	d104      	bne.n	8007940 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007936:	6839      	ldr	r1, [r7, #0]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f9bc 	bl	8007cb6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800793e:	e01d      	b.n	800797c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	7bfa      	ldrb	r2, [r7, #15]
 8007944:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007948:	7bfb      	ldrb	r3, [r7, #15]
 800794a:	4619      	mov	r1, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fee1 	bl	8008714 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fa86 	bl	8007e64 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007958:	7bfb      	ldrb	r3, [r7, #15]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d004      	beq.n	8007968 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2202      	movs	r2, #2
 8007962:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007966:	e009      	b.n	800797c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007970:	e004      	b.n	800797c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f99e 	bl	8007cb6 <USBD_CtlError>
  }
}
 800797a:	bf00      	nop
 800797c:	bf00      	nop
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	885b      	ldrh	r3, [r3, #2]
 8007996:	b2da      	uxtb	r2, r3
 8007998:	4b4e      	ldr	r3, [pc, #312]	@ (8007ad4 <USBD_SetConfig+0x150>)
 800799a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800799c:	4b4d      	ldr	r3, [pc, #308]	@ (8007ad4 <USBD_SetConfig+0x150>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d905      	bls.n	80079b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f985 	bl	8007cb6 <USBD_CtlError>
    return USBD_FAIL;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e08c      	b.n	8007aca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d002      	beq.n	80079c2 <USBD_SetConfig+0x3e>
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d029      	beq.n	8007a14 <USBD_SetConfig+0x90>
 80079c0:	e075      	b.n	8007aae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80079c2:	4b44      	ldr	r3, [pc, #272]	@ (8007ad4 <USBD_SetConfig+0x150>)
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d020      	beq.n	8007a0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80079ca:	4b42      	ldr	r3, [pc, #264]	@ (8007ad4 <USBD_SetConfig+0x150>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079d4:	4b3f      	ldr	r3, [pc, #252]	@ (8007ad4 <USBD_SetConfig+0x150>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7fe ffe3 	bl	80069a6 <USBD_SetClassConfig>
 80079e0:	4603      	mov	r3, r0
 80079e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d008      	beq.n	80079fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f962 	bl	8007cb6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2202      	movs	r2, #2
 80079f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079fa:	e065      	b.n	8007ac8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fa31 	bl	8007e64 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2203      	movs	r2, #3
 8007a06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007a0a:	e05d      	b.n	8007ac8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fa29 	bl	8007e64 <USBD_CtlSendStatus>
      break;
 8007a12:	e059      	b.n	8007ac8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a14:	4b2f      	ldr	r3, [pc, #188]	@ (8007ad4 <USBD_SetConfig+0x150>)
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d112      	bne.n	8007a42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007a24:	4b2b      	ldr	r3, [pc, #172]	@ (8007ad4 <USBD_SetConfig+0x150>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a2e:	4b29      	ldr	r3, [pc, #164]	@ (8007ad4 <USBD_SetConfig+0x150>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7fe ffd2 	bl	80069de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fa12 	bl	8007e64 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a40:	e042      	b.n	8007ac8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007a42:	4b24      	ldr	r3, [pc, #144]	@ (8007ad4 <USBD_SetConfig+0x150>)
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d02a      	beq.n	8007aa6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7fe ffc0 	bl	80069de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ad4 <USBD_SetConfig+0x150>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a68:	4b1a      	ldr	r3, [pc, #104]	@ (8007ad4 <USBD_SetConfig+0x150>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7fe ff99 	bl	80069a6 <USBD_SetClassConfig>
 8007a74:	4603      	mov	r3, r0
 8007a76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00f      	beq.n	8007a9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f918 	bl	8007cb6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7fe ffa5 	bl	80069de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2202      	movs	r2, #2
 8007a98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007a9c:	e014      	b.n	8007ac8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f9e0 	bl	8007e64 <USBD_CtlSendStatus>
      break;
 8007aa4:	e010      	b.n	8007ac8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f9dc 	bl	8007e64 <USBD_CtlSendStatus>
      break;
 8007aac:	e00c      	b.n	8007ac8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f900 	bl	8007cb6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ab6:	4b07      	ldr	r3, [pc, #28]	@ (8007ad4 <USBD_SetConfig+0x150>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7fe ff8e 	bl	80069de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ac6:	bf00      	nop
  }

  return ret;
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20000214 	.word	0x20000214

08007ad8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	88db      	ldrh	r3, [r3, #6]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d004      	beq.n	8007af4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f8e2 	bl	8007cb6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007af2:	e023      	b.n	8007b3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	dc02      	bgt.n	8007b06 <USBD_GetConfig+0x2e>
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	dc03      	bgt.n	8007b0c <USBD_GetConfig+0x34>
 8007b04:	e015      	b.n	8007b32 <USBD_GetConfig+0x5a>
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	d00b      	beq.n	8007b22 <USBD_GetConfig+0x4a>
 8007b0a:	e012      	b.n	8007b32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	3308      	adds	r3, #8
 8007b16:	2201      	movs	r2, #1
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f948 	bl	8007db0 <USBD_CtlSendData>
        break;
 8007b20:	e00c      	b.n	8007b3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	3304      	adds	r3, #4
 8007b26:	2201      	movs	r2, #1
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f940 	bl	8007db0 <USBD_CtlSendData>
        break;
 8007b30:	e004      	b.n	8007b3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f8be 	bl	8007cb6 <USBD_CtlError>
        break;
 8007b3a:	bf00      	nop
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	3b01      	subs	r3, #1
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d81e      	bhi.n	8007b9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	88db      	ldrh	r3, [r3, #6]
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d004      	beq.n	8007b6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f8a5 	bl	8007cb6 <USBD_CtlError>
        break;
 8007b6c:	e01a      	b.n	8007ba4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d005      	beq.n	8007b8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	f043 0202 	orr.w	r2, r3, #2
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	330c      	adds	r3, #12
 8007b8e:	2202      	movs	r2, #2
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f90c 	bl	8007db0 <USBD_CtlSendData>
      break;
 8007b98:	e004      	b.n	8007ba4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f88a 	bl	8007cb6 <USBD_CtlError>
      break;
 8007ba2:	bf00      	nop
  }
}
 8007ba4:	bf00      	nop
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	885b      	ldrh	r3, [r3, #2]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d107      	bne.n	8007bce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f94c 	bl	8007e64 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007bcc:	e013      	b.n	8007bf6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	885b      	ldrh	r3, [r3, #2]
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d10b      	bne.n	8007bee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	889b      	ldrh	r3, [r3, #4]
 8007bda:	0a1b      	lsrs	r3, r3, #8
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f93c 	bl	8007e64 <USBD_CtlSendStatus>
}
 8007bec:	e003      	b.n	8007bf6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f860 	bl	8007cb6 <USBD_CtlError>
}
 8007bf6:	bf00      	nop
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b082      	sub	sp, #8
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	3b01      	subs	r3, #1
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d80b      	bhi.n	8007c2e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	885b      	ldrh	r3, [r3, #2]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d10c      	bne.n	8007c38 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f91c 	bl	8007e64 <USBD_CtlSendStatus>
      }
      break;
 8007c2c:	e004      	b.n	8007c38 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f840 	bl	8007cb6 <USBD_CtlError>
      break;
 8007c36:	e000      	b.n	8007c3a <USBD_ClrFeature+0x3c>
      break;
 8007c38:	bf00      	nop
  }
}
 8007c3a:	bf00      	nop
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	781a      	ldrb	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	781a      	ldrb	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f7ff fa40 	bl	80070f2 <SWAPBYTE>
 8007c72:	4603      	mov	r3, r0
 8007c74:	461a      	mov	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	3301      	adds	r3, #1
 8007c84:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f7ff fa33 	bl	80070f2 <SWAPBYTE>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	461a      	mov	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	3301      	adds	r3, #1
 8007c98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f7ff fa26 	bl	80070f2 <SWAPBYTE>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	461a      	mov	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	80da      	strh	r2, [r3, #6]
}
 8007cae:	bf00      	nop
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b082      	sub	sp, #8
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cc0:	2180      	movs	r1, #128	@ 0x80
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fcbc 	bl	8008640 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007cc8:	2100      	movs	r1, #0
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fcb8 	bl	8008640 <USBD_LL_StallEP>
}
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d042      	beq.n	8007d74 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007cf2:	6938      	ldr	r0, [r7, #16]
 8007cf4:	f000 f842 	bl	8007d7c <USBD_GetLen>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	005b      	lsls	r3, r3, #1
 8007cfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d02:	d808      	bhi.n	8007d16 <USBD_GetString+0x3e>
 8007d04:	6938      	ldr	r0, [r7, #16]
 8007d06:	f000 f839 	bl	8007d7c <USBD_GetLen>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	e001      	b.n	8007d1a <USBD_GetString+0x42>
 8007d16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	4413      	add	r3, r2
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	7812      	ldrb	r2, [r2, #0]
 8007d28:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d2a:	7dfb      	ldrb	r3, [r7, #23]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d30:	7dfb      	ldrb	r3, [r7, #23]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	4413      	add	r3, r2
 8007d36:	2203      	movs	r2, #3
 8007d38:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d3a:	7dfb      	ldrb	r3, [r7, #23]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007d40:	e013      	b.n	8007d6a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007d42:	7dfb      	ldrb	r3, [r7, #23]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	4413      	add	r3, r2
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	7812      	ldrb	r2, [r2, #0]
 8007d4c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	3301      	adds	r3, #1
 8007d52:	613b      	str	r3, [r7, #16]
    idx++;
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
 8007d56:	3301      	adds	r3, #1
 8007d58:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d5a:	7dfb      	ldrb	r3, [r7, #23]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	4413      	add	r3, r2
 8007d60:	2200      	movs	r2, #0
 8007d62:	701a      	strb	r2, [r3, #0]
    idx++;
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
 8007d66:	3301      	adds	r3, #1
 8007d68:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1e7      	bne.n	8007d42 <USBD_GetString+0x6a>
 8007d72:	e000      	b.n	8007d76 <USBD_GetString+0x9e>
    return;
 8007d74:	bf00      	nop
  }
}
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d8c:	e005      	b.n	8007d9a <USBD_GetLen+0x1e>
  {
    len++;
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	3301      	adds	r3, #1
 8007d92:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	3301      	adds	r3, #1
 8007d98:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1f5      	bne.n	8007d8e <USBD_GetLen+0x12>
  }

  return len;
 8007da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f000 fcbb 	bl	8008752 <USBD_LL_Transmit>

  return USBD_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b084      	sub	sp, #16
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	60f8      	str	r0, [r7, #12]
 8007dee:	60b9      	str	r1, [r7, #8]
 8007df0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	2100      	movs	r1, #0
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 fcaa 	bl	8008752 <USBD_LL_Transmit>

  return USBD_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2203      	movs	r2, #3
 8007e18:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	2100      	movs	r1, #0
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f000 fcae 	bl	8008794 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	60f8      	str	r0, [r7, #12]
 8007e4a:	60b9      	str	r1, [r7, #8]
 8007e4c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	2100      	movs	r1, #0
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 fc9d 	bl	8008794 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2204      	movs	r2, #4
 8007e70:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e74:	2300      	movs	r3, #0
 8007e76:	2200      	movs	r2, #0
 8007e78:	2100      	movs	r1, #0
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fc69 	bl	8008752 <USBD_LL_Transmit>

  return USBD_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b082      	sub	sp, #8
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2205      	movs	r2, #5
 8007e96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fc77 	bl	8008794 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	4912      	ldr	r1, [pc, #72]	@ (8007f00 <MX_USB_DEVICE_Init+0x50>)
 8007eb8:	4812      	ldr	r0, [pc, #72]	@ (8007f04 <MX_USB_DEVICE_Init+0x54>)
 8007eba:	f7fe fcf7 	bl	80068ac <USBD_Init>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ec4:	f7f8 fdba 	bl	8000a3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007ec8:	490f      	ldr	r1, [pc, #60]	@ (8007f08 <MX_USB_DEVICE_Init+0x58>)
 8007eca:	480e      	ldr	r0, [pc, #56]	@ (8007f04 <MX_USB_DEVICE_Init+0x54>)
 8007ecc:	f7fe fd1e 	bl	800690c <USBD_RegisterClass>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007ed6:	f7f8 fdb1 	bl	8000a3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007eda:	490c      	ldr	r1, [pc, #48]	@ (8007f0c <MX_USB_DEVICE_Init+0x5c>)
 8007edc:	4809      	ldr	r0, [pc, #36]	@ (8007f04 <MX_USB_DEVICE_Init+0x54>)
 8007ede:	f7fe fc55 	bl	800678c <USBD_CDC_RegisterInterface>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ee8:	f7f8 fda8 	bl	8000a3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007eec:	4805      	ldr	r0, [pc, #20]	@ (8007f04 <MX_USB_DEVICE_Init+0x54>)
 8007eee:	f7fe fd43 	bl	8006978 <USBD_Start>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ef8:	f7f8 fda0 	bl	8000a3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007efc:	bf00      	nop
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	200000b0 	.word	0x200000b0
 8007f04:	20000218 	.word	0x20000218
 8007f08:	2000001c 	.word	0x2000001c
 8007f0c:	2000009c 	.word	0x2000009c

08007f10 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f14:	2200      	movs	r2, #0
 8007f16:	4905      	ldr	r1, [pc, #20]	@ (8007f2c <CDC_Init_FS+0x1c>)
 8007f18:	4805      	ldr	r0, [pc, #20]	@ (8007f30 <CDC_Init_FS+0x20>)
 8007f1a:	f7fe fc51 	bl	80067c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007f1e:	4905      	ldr	r1, [pc, #20]	@ (8007f34 <CDC_Init_FS+0x24>)
 8007f20:	4803      	ldr	r0, [pc, #12]	@ (8007f30 <CDC_Init_FS+0x20>)
 8007f22:	f7fe fc6f 	bl	8006804 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007f26:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20000cf4 	.word	0x20000cf4
 8007f30:	20000218 	.word	0x20000218
 8007f34:	200004f4 	.word	0x200004f4

08007f38 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007f3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	6039      	str	r1, [r7, #0]
 8007f52:	71fb      	strb	r3, [r7, #7]
 8007f54:	4613      	mov	r3, r2
 8007f56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007f58:	79fb      	ldrb	r3, [r7, #7]
 8007f5a:	2b23      	cmp	r3, #35	@ 0x23
 8007f5c:	d84a      	bhi.n	8007ff4 <CDC_Control_FS+0xac>
 8007f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f64 <CDC_Control_FS+0x1c>)
 8007f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f64:	08007ff5 	.word	0x08007ff5
 8007f68:	08007ff5 	.word	0x08007ff5
 8007f6c:	08007ff5 	.word	0x08007ff5
 8007f70:	08007ff5 	.word	0x08007ff5
 8007f74:	08007ff5 	.word	0x08007ff5
 8007f78:	08007ff5 	.word	0x08007ff5
 8007f7c:	08007ff5 	.word	0x08007ff5
 8007f80:	08007ff5 	.word	0x08007ff5
 8007f84:	08007ff5 	.word	0x08007ff5
 8007f88:	08007ff5 	.word	0x08007ff5
 8007f8c:	08007ff5 	.word	0x08007ff5
 8007f90:	08007ff5 	.word	0x08007ff5
 8007f94:	08007ff5 	.word	0x08007ff5
 8007f98:	08007ff5 	.word	0x08007ff5
 8007f9c:	08007ff5 	.word	0x08007ff5
 8007fa0:	08007ff5 	.word	0x08007ff5
 8007fa4:	08007ff5 	.word	0x08007ff5
 8007fa8:	08007ff5 	.word	0x08007ff5
 8007fac:	08007ff5 	.word	0x08007ff5
 8007fb0:	08007ff5 	.word	0x08007ff5
 8007fb4:	08007ff5 	.word	0x08007ff5
 8007fb8:	08007ff5 	.word	0x08007ff5
 8007fbc:	08007ff5 	.word	0x08007ff5
 8007fc0:	08007ff5 	.word	0x08007ff5
 8007fc4:	08007ff5 	.word	0x08007ff5
 8007fc8:	08007ff5 	.word	0x08007ff5
 8007fcc:	08007ff5 	.word	0x08007ff5
 8007fd0:	08007ff5 	.word	0x08007ff5
 8007fd4:	08007ff5 	.word	0x08007ff5
 8007fd8:	08007ff5 	.word	0x08007ff5
 8007fdc:	08007ff5 	.word	0x08007ff5
 8007fe0:	08007ff5 	.word	0x08007ff5
 8007fe4:	08007ff5 	.word	0x08007ff5
 8007fe8:	08007ff5 	.word	0x08007ff5
 8007fec:	08007ff5 	.word	0x08007ff5
 8007ff0:	08007ff5 	.word	0x08007ff5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007ff4:	bf00      	nop
  }

  return (USBD_OK);
 8007ff6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800800e:	6879      	ldr	r1, [r7, #4]
 8008010:	4805      	ldr	r0, [pc, #20]	@ (8008028 <CDC_Receive_FS+0x24>)
 8008012:	f7fe fbf7 	bl	8006804 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008016:	4804      	ldr	r0, [pc, #16]	@ (8008028 <CDC_Receive_FS+0x24>)
 8008018:	f7fe fc12 	bl	8006840 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800801c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800801e:	4618      	mov	r0, r3
 8008020:	3708      	adds	r7, #8
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	20000218 	.word	0x20000218

0800802c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800802c:	b480      	push	{r7}
 800802e:	b087      	sub	sp, #28
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	4613      	mov	r3, r2
 8008038:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800803e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008042:	4618      	mov	r0, r3
 8008044:	371c      	adds	r7, #28
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
	...

08008050 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	4603      	mov	r3, r0
 8008058:	6039      	str	r1, [r7, #0]
 800805a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	2212      	movs	r2, #18
 8008060:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008062:	4b03      	ldr	r3, [pc, #12]	@ (8008070 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	200000cc 	.word	0x200000cc

08008074 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	4603      	mov	r3, r0
 800807c:	6039      	str	r1, [r7, #0]
 800807e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	2204      	movs	r2, #4
 8008084:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008086:	4b03      	ldr	r3, [pc, #12]	@ (8008094 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008088:	4618      	mov	r0, r3
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	200000e0 	.word	0x200000e0

08008098 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	4603      	mov	r3, r0
 80080a0:	6039      	str	r1, [r7, #0]
 80080a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080a4:	79fb      	ldrb	r3, [r7, #7]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d105      	bne.n	80080b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	4907      	ldr	r1, [pc, #28]	@ (80080cc <USBD_FS_ProductStrDescriptor+0x34>)
 80080ae:	4808      	ldr	r0, [pc, #32]	@ (80080d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80080b0:	f7ff fe12 	bl	8007cd8 <USBD_GetString>
 80080b4:	e004      	b.n	80080c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	4904      	ldr	r1, [pc, #16]	@ (80080cc <USBD_FS_ProductStrDescriptor+0x34>)
 80080ba:	4805      	ldr	r0, [pc, #20]	@ (80080d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80080bc:	f7ff fe0c 	bl	8007cd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080c0:	4b02      	ldr	r3, [pc, #8]	@ (80080cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	200014f4 	.word	0x200014f4
 80080d0:	08009278 	.word	0x08009278

080080d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	6039      	str	r1, [r7, #0]
 80080de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080e0:	683a      	ldr	r2, [r7, #0]
 80080e2:	4904      	ldr	r1, [pc, #16]	@ (80080f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80080e4:	4804      	ldr	r0, [pc, #16]	@ (80080f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80080e6:	f7ff fdf7 	bl	8007cd8 <USBD_GetString>
  return USBD_StrDesc;
 80080ea:	4b02      	ldr	r3, [pc, #8]	@ (80080f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	200014f4 	.word	0x200014f4
 80080f8:	08009290 	.word	0x08009290

080080fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	4603      	mov	r3, r0
 8008104:	6039      	str	r1, [r7, #0]
 8008106:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	221a      	movs	r2, #26
 800810c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800810e:	f000 f843 	bl	8008198 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008112:	4b02      	ldr	r3, [pc, #8]	@ (800811c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008114:	4618      	mov	r0, r3
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	200000e4 	.word	0x200000e4

08008120 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	4603      	mov	r3, r0
 8008128:	6039      	str	r1, [r7, #0]
 800812a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800812c:	79fb      	ldrb	r3, [r7, #7]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d105      	bne.n	800813e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	4907      	ldr	r1, [pc, #28]	@ (8008154 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008136:	4808      	ldr	r0, [pc, #32]	@ (8008158 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008138:	f7ff fdce 	bl	8007cd8 <USBD_GetString>
 800813c:	e004      	b.n	8008148 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	4904      	ldr	r1, [pc, #16]	@ (8008154 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008142:	4805      	ldr	r0, [pc, #20]	@ (8008158 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008144:	f7ff fdc8 	bl	8007cd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008148:	4b02      	ldr	r3, [pc, #8]	@ (8008154 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800814a:	4618      	mov	r0, r3
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	200014f4 	.word	0x200014f4
 8008158:	080092a4 	.word	0x080092a4

0800815c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	4603      	mov	r3, r0
 8008164:	6039      	str	r1, [r7, #0]
 8008166:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d105      	bne.n	800817a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	4907      	ldr	r1, [pc, #28]	@ (8008190 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008172:	4808      	ldr	r0, [pc, #32]	@ (8008194 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008174:	f7ff fdb0 	bl	8007cd8 <USBD_GetString>
 8008178:	e004      	b.n	8008184 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	4904      	ldr	r1, [pc, #16]	@ (8008190 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800817e:	4805      	ldr	r0, [pc, #20]	@ (8008194 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008180:	f7ff fdaa 	bl	8007cd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008184:	4b02      	ldr	r3, [pc, #8]	@ (8008190 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008186:	4618      	mov	r0, r3
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	200014f4 	.word	0x200014f4
 8008194:	080092b0 	.word	0x080092b0

08008198 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800819e:	4b0f      	ldr	r3, [pc, #60]	@ (80081dc <Get_SerialNum+0x44>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80081a4:	4b0e      	ldr	r3, [pc, #56]	@ (80081e0 <Get_SerialNum+0x48>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80081aa:	4b0e      	ldr	r3, [pc, #56]	@ (80081e4 <Get_SerialNum+0x4c>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4413      	add	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d009      	beq.n	80081d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80081be:	2208      	movs	r2, #8
 80081c0:	4909      	ldr	r1, [pc, #36]	@ (80081e8 <Get_SerialNum+0x50>)
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 f814 	bl	80081f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80081c8:	2204      	movs	r2, #4
 80081ca:	4908      	ldr	r1, [pc, #32]	@ (80081ec <Get_SerialNum+0x54>)
 80081cc:	68b8      	ldr	r0, [r7, #8]
 80081ce:	f000 f80f 	bl	80081f0 <IntToUnicode>
  }
}
 80081d2:	bf00      	nop
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	1fff7a10 	.word	0x1fff7a10
 80081e0:	1fff7a14 	.word	0x1fff7a14
 80081e4:	1fff7a18 	.word	0x1fff7a18
 80081e8:	200000e6 	.word	0x200000e6
 80081ec:	200000f6 	.word	0x200000f6

080081f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b087      	sub	sp, #28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	4613      	mov	r3, r2
 80081fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80081fe:	2300      	movs	r3, #0
 8008200:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008202:	2300      	movs	r3, #0
 8008204:	75fb      	strb	r3, [r7, #23]
 8008206:	e027      	b.n	8008258 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	0f1b      	lsrs	r3, r3, #28
 800820c:	2b09      	cmp	r3, #9
 800820e:	d80b      	bhi.n	8008228 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	0f1b      	lsrs	r3, r3, #28
 8008214:	b2da      	uxtb	r2, r3
 8008216:	7dfb      	ldrb	r3, [r7, #23]
 8008218:	005b      	lsls	r3, r3, #1
 800821a:	4619      	mov	r1, r3
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	440b      	add	r3, r1
 8008220:	3230      	adds	r2, #48	@ 0x30
 8008222:	b2d2      	uxtb	r2, r2
 8008224:	701a      	strb	r2, [r3, #0]
 8008226:	e00a      	b.n	800823e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	0f1b      	lsrs	r3, r3, #28
 800822c:	b2da      	uxtb	r2, r3
 800822e:	7dfb      	ldrb	r3, [r7, #23]
 8008230:	005b      	lsls	r3, r3, #1
 8008232:	4619      	mov	r1, r3
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	440b      	add	r3, r1
 8008238:	3237      	adds	r2, #55	@ 0x37
 800823a:	b2d2      	uxtb	r2, r2
 800823c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	011b      	lsls	r3, r3, #4
 8008242:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008244:	7dfb      	ldrb	r3, [r7, #23]
 8008246:	005b      	lsls	r3, r3, #1
 8008248:	3301      	adds	r3, #1
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	4413      	add	r3, r2
 800824e:	2200      	movs	r2, #0
 8008250:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008252:	7dfb      	ldrb	r3, [r7, #23]
 8008254:	3301      	adds	r3, #1
 8008256:	75fb      	strb	r3, [r7, #23]
 8008258:	7dfa      	ldrb	r2, [r7, #23]
 800825a:	79fb      	ldrb	r3, [r7, #7]
 800825c:	429a      	cmp	r2, r3
 800825e:	d3d3      	bcc.n	8008208 <IntToUnicode+0x18>
  }
}
 8008260:	bf00      	nop
 8008262:	bf00      	nop
 8008264:	371c      	adds	r7, #28
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
	...

08008270 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b08a      	sub	sp, #40	@ 0x28
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008278:	f107 0314 	add.w	r3, r7, #20
 800827c:	2200      	movs	r2, #0
 800827e:	601a      	str	r2, [r3, #0]
 8008280:	605a      	str	r2, [r3, #4]
 8008282:	609a      	str	r2, [r3, #8]
 8008284:	60da      	str	r2, [r3, #12]
 8008286:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008290:	d13a      	bne.n	8008308 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008292:	2300      	movs	r3, #0
 8008294:	613b      	str	r3, [r7, #16]
 8008296:	4b1e      	ldr	r3, [pc, #120]	@ (8008310 <HAL_PCD_MspInit+0xa0>)
 8008298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800829a:	4a1d      	ldr	r2, [pc, #116]	@ (8008310 <HAL_PCD_MspInit+0xa0>)
 800829c:	f043 0301 	orr.w	r3, r3, #1
 80082a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80082a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008310 <HAL_PCD_MspInit+0xa0>)
 80082a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	613b      	str	r3, [r7, #16]
 80082ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80082ae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80082b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082b4:	2302      	movs	r3, #2
 80082b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b8:	2300      	movs	r3, #0
 80082ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082bc:	2303      	movs	r3, #3
 80082be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80082c0:	230a      	movs	r3, #10
 80082c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082c4:	f107 0314 	add.w	r3, r7, #20
 80082c8:	4619      	mov	r1, r3
 80082ca:	4812      	ldr	r0, [pc, #72]	@ (8008314 <HAL_PCD_MspInit+0xa4>)
 80082cc:	f7f8 fec8 	bl	8001060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008310 <HAL_PCD_MspInit+0xa0>)
 80082d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082d4:	4a0e      	ldr	r2, [pc, #56]	@ (8008310 <HAL_PCD_MspInit+0xa0>)
 80082d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082da:	6353      	str	r3, [r2, #52]	@ 0x34
 80082dc:	2300      	movs	r3, #0
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008310 <HAL_PCD_MspInit+0xa0>)
 80082e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082e4:	4a0a      	ldr	r2, [pc, #40]	@ (8008310 <HAL_PCD_MspInit+0xa0>)
 80082e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80082ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80082ec:	4b08      	ldr	r3, [pc, #32]	@ (8008310 <HAL_PCD_MspInit+0xa0>)
 80082ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082f4:	60fb      	str	r3, [r7, #12]
 80082f6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80082f8:	2200      	movs	r2, #0
 80082fa:	2100      	movs	r1, #0
 80082fc:	2043      	movs	r0, #67	@ 0x43
 80082fe:	f7f8 fe78 	bl	8000ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008302:	2043      	movs	r0, #67	@ 0x43
 8008304:	f7f8 fe91 	bl	800102a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008308:	bf00      	nop
 800830a:	3728      	adds	r7, #40	@ 0x28
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	40023800 	.word	0x40023800
 8008314:	40020000 	.word	0x40020000

08008318 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800832c:	4619      	mov	r1, r3
 800832e:	4610      	mov	r0, r2
 8008330:	f7fe fb6f 	bl	8006a12 <USBD_LL_SetupStage>
}
 8008334:	bf00      	nop
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800834e:	78fa      	ldrb	r2, [r7, #3]
 8008350:	6879      	ldr	r1, [r7, #4]
 8008352:	4613      	mov	r3, r2
 8008354:	00db      	lsls	r3, r3, #3
 8008356:	4413      	add	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	440b      	add	r3, r1
 800835c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	78fb      	ldrb	r3, [r7, #3]
 8008364:	4619      	mov	r1, r3
 8008366:	f7fe fba9 	bl	8006abc <USBD_LL_DataOutStage>
}
 800836a:	bf00      	nop
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b082      	sub	sp, #8
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	460b      	mov	r3, r1
 800837c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008384:	78fa      	ldrb	r2, [r7, #3]
 8008386:	6879      	ldr	r1, [r7, #4]
 8008388:	4613      	mov	r3, r2
 800838a:	00db      	lsls	r3, r3, #3
 800838c:	4413      	add	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	440b      	add	r3, r1
 8008392:	3320      	adds	r3, #32
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	78fb      	ldrb	r3, [r7, #3]
 8008398:	4619      	mov	r1, r3
 800839a:	f7fe fc42 	bl	8006c22 <USBD_LL_DataInStage>
}
 800839e:	bf00      	nop
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b082      	sub	sp, #8
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fe fd7c 	bl	8006eb2 <USBD_LL_SOF>
}
 80083ba:	bf00      	nop
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b084      	sub	sp, #16
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083ca:	2301      	movs	r3, #1
 80083cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	79db      	ldrb	r3, [r3, #7]
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d001      	beq.n	80083da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80083d6:	f7f8 fb31 	bl	8000a3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083e0:	7bfa      	ldrb	r2, [r7, #15]
 80083e2:	4611      	mov	r1, r2
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fe fd20 	bl	8006e2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fe fcc8 	bl	8006d86 <USBD_LL_Reset>
}
 80083f6:	bf00      	nop
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
	...

08008400 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800840e:	4618      	mov	r0, r3
 8008410:	f7fe fd1b 	bl	8006e4a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	6812      	ldr	r2, [r2, #0]
 8008422:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008426:	f043 0301 	orr.w	r3, r3, #1
 800842a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	7adb      	ldrb	r3, [r3, #11]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d005      	beq.n	8008440 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008434:	4b04      	ldr	r3, [pc, #16]	@ (8008448 <HAL_PCD_SuspendCallback+0x48>)
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	4a03      	ldr	r2, [pc, #12]	@ (8008448 <HAL_PCD_SuspendCallback+0x48>)
 800843a:	f043 0306 	orr.w	r3, r3, #6
 800843e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008440:	bf00      	nop
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	e000ed00 	.word	0xe000ed00

0800844c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800845a:	4618      	mov	r0, r3
 800845c:	f7fe fd11 	bl	8006e82 <USBD_LL_Resume>
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	460b      	mov	r3, r1
 8008472:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800847a:	78fa      	ldrb	r2, [r7, #3]
 800847c:	4611      	mov	r1, r2
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe fd69 	bl	8006f56 <USBD_LL_IsoOUTIncomplete>
}
 8008484:	bf00      	nop
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	460b      	mov	r3, r1
 8008496:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800849e:	78fa      	ldrb	r2, [r7, #3]
 80084a0:	4611      	mov	r1, r2
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fe fd25 	bl	8006ef2 <USBD_LL_IsoINIncomplete>
}
 80084a8:	bf00      	nop
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084be:	4618      	mov	r0, r3
 80084c0:	f7fe fd7b 	bl	8006fba <USBD_LL_DevConnected>
}
 80084c4:	bf00      	nop
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084da:	4618      	mov	r0, r3
 80084dc:	f7fe fd78 	bl	8006fd0 <USBD_LL_DevDisconnected>
}
 80084e0:	bf00      	nop
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d13c      	bne.n	8008572 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80084f8:	4a20      	ldr	r2, [pc, #128]	@ (800857c <USBD_LL_Init+0x94>)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a1e      	ldr	r2, [pc, #120]	@ (800857c <USBD_LL_Init+0x94>)
 8008504:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008508:	4b1c      	ldr	r3, [pc, #112]	@ (800857c <USBD_LL_Init+0x94>)
 800850a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800850e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008510:	4b1a      	ldr	r3, [pc, #104]	@ (800857c <USBD_LL_Init+0x94>)
 8008512:	2204      	movs	r2, #4
 8008514:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008516:	4b19      	ldr	r3, [pc, #100]	@ (800857c <USBD_LL_Init+0x94>)
 8008518:	2202      	movs	r2, #2
 800851a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800851c:	4b17      	ldr	r3, [pc, #92]	@ (800857c <USBD_LL_Init+0x94>)
 800851e:	2200      	movs	r2, #0
 8008520:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008522:	4b16      	ldr	r3, [pc, #88]	@ (800857c <USBD_LL_Init+0x94>)
 8008524:	2202      	movs	r2, #2
 8008526:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008528:	4b14      	ldr	r3, [pc, #80]	@ (800857c <USBD_LL_Init+0x94>)
 800852a:	2200      	movs	r2, #0
 800852c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800852e:	4b13      	ldr	r3, [pc, #76]	@ (800857c <USBD_LL_Init+0x94>)
 8008530:	2200      	movs	r2, #0
 8008532:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008534:	4b11      	ldr	r3, [pc, #68]	@ (800857c <USBD_LL_Init+0x94>)
 8008536:	2200      	movs	r2, #0
 8008538:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800853a:	4b10      	ldr	r3, [pc, #64]	@ (800857c <USBD_LL_Init+0x94>)
 800853c:	2200      	movs	r2, #0
 800853e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008540:	4b0e      	ldr	r3, [pc, #56]	@ (800857c <USBD_LL_Init+0x94>)
 8008542:	2200      	movs	r2, #0
 8008544:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008546:	480d      	ldr	r0, [pc, #52]	@ (800857c <USBD_LL_Init+0x94>)
 8008548:	f7f9 ff22 	bl	8002390 <HAL_PCD_Init>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008552:	f7f8 fa73 	bl	8000a3c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008556:	2180      	movs	r1, #128	@ 0x80
 8008558:	4808      	ldr	r0, [pc, #32]	@ (800857c <USBD_LL_Init+0x94>)
 800855a:	f7fb f94e 	bl	80037fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800855e:	2240      	movs	r2, #64	@ 0x40
 8008560:	2100      	movs	r1, #0
 8008562:	4806      	ldr	r0, [pc, #24]	@ (800857c <USBD_LL_Init+0x94>)
 8008564:	f7fb f902 	bl	800376c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008568:	2280      	movs	r2, #128	@ 0x80
 800856a:	2101      	movs	r1, #1
 800856c:	4803      	ldr	r0, [pc, #12]	@ (800857c <USBD_LL_Init+0x94>)
 800856e:	f7fb f8fd 	bl	800376c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	200016f4 	.word	0x200016f4

08008580 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008588:	2300      	movs	r3, #0
 800858a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008596:	4618      	mov	r0, r3
 8008598:	f7fa f809 	bl	80025ae <HAL_PCD_Start>
 800859c:	4603      	mov	r3, r0
 800859e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 f942 	bl	800882c <USBD_Get_USB_Status>
 80085a8:	4603      	mov	r3, r0
 80085aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	4608      	mov	r0, r1
 80085c0:	4611      	mov	r1, r2
 80085c2:	461a      	mov	r2, r3
 80085c4:	4603      	mov	r3, r0
 80085c6:	70fb      	strb	r3, [r7, #3]
 80085c8:	460b      	mov	r3, r1
 80085ca:	70bb      	strb	r3, [r7, #2]
 80085cc:	4613      	mov	r3, r2
 80085ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80085de:	78bb      	ldrb	r3, [r7, #2]
 80085e0:	883a      	ldrh	r2, [r7, #0]
 80085e2:	78f9      	ldrb	r1, [r7, #3]
 80085e4:	f7fa fcdd 	bl	8002fa2 <HAL_PCD_EP_Open>
 80085e8:	4603      	mov	r3, r0
 80085ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 f91c 	bl	800882c <USBD_Get_USB_Status>
 80085f4:	4603      	mov	r3, r0
 80085f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b084      	sub	sp, #16
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	460b      	mov	r3, r1
 800860c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008612:	2300      	movs	r3, #0
 8008614:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800861c:	78fa      	ldrb	r2, [r7, #3]
 800861e:	4611      	mov	r1, r2
 8008620:	4618      	mov	r0, r3
 8008622:	f7fa fd28 	bl	8003076 <HAL_PCD_EP_Close>
 8008626:	4603      	mov	r3, r0
 8008628:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800862a:	7bfb      	ldrb	r3, [r7, #15]
 800862c:	4618      	mov	r0, r3
 800862e:	f000 f8fd 	bl	800882c <USBD_Get_USB_Status>
 8008632:	4603      	mov	r3, r0
 8008634:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008636:	7bbb      	ldrb	r3, [r7, #14]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	460b      	mov	r3, r1
 800864a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008650:	2300      	movs	r3, #0
 8008652:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800865a:	78fa      	ldrb	r2, [r7, #3]
 800865c:	4611      	mov	r1, r2
 800865e:	4618      	mov	r0, r3
 8008660:	f7fa fde0 	bl	8003224 <HAL_PCD_EP_SetStall>
 8008664:	4603      	mov	r3, r0
 8008666:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008668:	7bfb      	ldrb	r3, [r7, #15]
 800866a:	4618      	mov	r0, r3
 800866c:	f000 f8de 	bl	800882c <USBD_Get_USB_Status>
 8008670:	4603      	mov	r3, r0
 8008672:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008674:	7bbb      	ldrb	r3, [r7, #14]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b084      	sub	sp, #16
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	460b      	mov	r3, r1
 8008688:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800868a:	2300      	movs	r3, #0
 800868c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008698:	78fa      	ldrb	r2, [r7, #3]
 800869a:	4611      	mov	r1, r2
 800869c:	4618      	mov	r0, r3
 800869e:	f7fa fe24 	bl	80032ea <HAL_PCD_EP_ClrStall>
 80086a2:	4603      	mov	r3, r0
 80086a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 f8bf 	bl	800882c <USBD_Get_USB_Status>
 80086ae:	4603      	mov	r3, r0
 80086b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	460b      	mov	r3, r1
 80086c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	da0b      	bge.n	80086f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086d8:	78fb      	ldrb	r3, [r7, #3]
 80086da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086de:	68f9      	ldr	r1, [r7, #12]
 80086e0:	4613      	mov	r3, r2
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	4413      	add	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	440b      	add	r3, r1
 80086ea:	3316      	adds	r3, #22
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	e00b      	b.n	8008708 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086f0:	78fb      	ldrb	r3, [r7, #3]
 80086f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086f6:	68f9      	ldr	r1, [r7, #12]
 80086f8:	4613      	mov	r3, r2
 80086fa:	00db      	lsls	r3, r3, #3
 80086fc:	4413      	add	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	440b      	add	r3, r1
 8008702:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008706:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008708:	4618      	mov	r0, r3
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800872e:	78fa      	ldrb	r2, [r7, #3]
 8008730:	4611      	mov	r1, r2
 8008732:	4618      	mov	r0, r3
 8008734:	f7fa fc11 	bl	8002f5a <HAL_PCD_SetAddress>
 8008738:	4603      	mov	r3, r0
 800873a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800873c:	7bfb      	ldrb	r3, [r7, #15]
 800873e:	4618      	mov	r0, r3
 8008740:	f000 f874 	bl	800882c <USBD_Get_USB_Status>
 8008744:	4603      	mov	r3, r0
 8008746:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008748:	7bbb      	ldrb	r3, [r7, #14]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b086      	sub	sp, #24
 8008756:	af00      	add	r7, sp, #0
 8008758:	60f8      	str	r0, [r7, #12]
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	603b      	str	r3, [r7, #0]
 800875e:	460b      	mov	r3, r1
 8008760:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008766:	2300      	movs	r3, #0
 8008768:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008770:	7af9      	ldrb	r1, [r7, #11]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	f7fa fd1b 	bl	80031b0 <HAL_PCD_EP_Transmit>
 800877a:	4603      	mov	r3, r0
 800877c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800877e:	7dfb      	ldrb	r3, [r7, #23]
 8008780:	4618      	mov	r0, r3
 8008782:	f000 f853 	bl	800882c <USBD_Get_USB_Status>
 8008786:	4603      	mov	r3, r0
 8008788:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800878a:	7dbb      	ldrb	r3, [r7, #22]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3718      	adds	r7, #24
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	607a      	str	r2, [r7, #4]
 800879e:	603b      	str	r3, [r7, #0]
 80087a0:	460b      	mov	r3, r1
 80087a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80087b2:	7af9      	ldrb	r1, [r7, #11]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	f7fa fca7 	bl	800310a <HAL_PCD_EP_Receive>
 80087bc:	4603      	mov	r3, r0
 80087be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 f832 	bl	800882c <USBD_Get_USB_Status>
 80087c8:	4603      	mov	r3, r0
 80087ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b082      	sub	sp, #8
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	460b      	mov	r3, r1
 80087e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80087e8:	78fa      	ldrb	r2, [r7, #3]
 80087ea:	4611      	mov	r1, r2
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fa fcc7 	bl	8003180 <HAL_PCD_EP_GetRxCount>
 80087f2:	4603      	mov	r3, r0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008804:	4b03      	ldr	r3, [pc, #12]	@ (8008814 <USBD_static_malloc+0x18>)
}
 8008806:	4618      	mov	r0, r3
 8008808:	370c      	adds	r7, #12
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	20001bd8 	.word	0x20001bd8

08008818 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]

}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	4603      	mov	r3, r0
 8008834:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800883a:	79fb      	ldrb	r3, [r7, #7]
 800883c:	2b03      	cmp	r3, #3
 800883e:	d817      	bhi.n	8008870 <USBD_Get_USB_Status+0x44>
 8008840:	a201      	add	r2, pc, #4	@ (adr r2, 8008848 <USBD_Get_USB_Status+0x1c>)
 8008842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008846:	bf00      	nop
 8008848:	08008859 	.word	0x08008859
 800884c:	0800885f 	.word	0x0800885f
 8008850:	08008865 	.word	0x08008865
 8008854:	0800886b 	.word	0x0800886b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	73fb      	strb	r3, [r7, #15]
    break;
 800885c:	e00b      	b.n	8008876 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800885e:	2303      	movs	r3, #3
 8008860:	73fb      	strb	r3, [r7, #15]
    break;
 8008862:	e008      	b.n	8008876 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008864:	2301      	movs	r3, #1
 8008866:	73fb      	strb	r3, [r7, #15]
    break;
 8008868:	e005      	b.n	8008876 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800886a:	2303      	movs	r3, #3
 800886c:	73fb      	strb	r3, [r7, #15]
    break;
 800886e:	e002      	b.n	8008876 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008870:	2303      	movs	r3, #3
 8008872:	73fb      	strb	r3, [r7, #15]
    break;
 8008874:	bf00      	nop
  }
  return usb_status;
 8008876:	7bfb      	ldrb	r3, [r7, #15]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <sniprintf>:
 8008884:	b40c      	push	{r2, r3}
 8008886:	b530      	push	{r4, r5, lr}
 8008888:	4b17      	ldr	r3, [pc, #92]	@ (80088e8 <sniprintf+0x64>)
 800888a:	1e0c      	subs	r4, r1, #0
 800888c:	681d      	ldr	r5, [r3, #0]
 800888e:	b09d      	sub	sp, #116	@ 0x74
 8008890:	da08      	bge.n	80088a4 <sniprintf+0x20>
 8008892:	238b      	movs	r3, #139	@ 0x8b
 8008894:	602b      	str	r3, [r5, #0]
 8008896:	f04f 30ff 	mov.w	r0, #4294967295
 800889a:	b01d      	add	sp, #116	@ 0x74
 800889c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088a0:	b002      	add	sp, #8
 80088a2:	4770      	bx	lr
 80088a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80088a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80088ac:	bf14      	ite	ne
 80088ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80088b2:	4623      	moveq	r3, r4
 80088b4:	9304      	str	r3, [sp, #16]
 80088b6:	9307      	str	r3, [sp, #28]
 80088b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80088bc:	9002      	str	r0, [sp, #8]
 80088be:	9006      	str	r0, [sp, #24]
 80088c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80088c4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80088c6:	ab21      	add	r3, sp, #132	@ 0x84
 80088c8:	a902      	add	r1, sp, #8
 80088ca:	4628      	mov	r0, r5
 80088cc:	9301      	str	r3, [sp, #4]
 80088ce:	f000 f995 	bl	8008bfc <_svfiprintf_r>
 80088d2:	1c43      	adds	r3, r0, #1
 80088d4:	bfbc      	itt	lt
 80088d6:	238b      	movlt	r3, #139	@ 0x8b
 80088d8:	602b      	strlt	r3, [r5, #0]
 80088da:	2c00      	cmp	r4, #0
 80088dc:	d0dd      	beq.n	800889a <sniprintf+0x16>
 80088de:	9b02      	ldr	r3, [sp, #8]
 80088e0:	2200      	movs	r2, #0
 80088e2:	701a      	strb	r2, [r3, #0]
 80088e4:	e7d9      	b.n	800889a <sniprintf+0x16>
 80088e6:	bf00      	nop
 80088e8:	20000100 	.word	0x20000100

080088ec <memset>:
 80088ec:	4402      	add	r2, r0
 80088ee:	4603      	mov	r3, r0
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d100      	bne.n	80088f6 <memset+0xa>
 80088f4:	4770      	bx	lr
 80088f6:	f803 1b01 	strb.w	r1, [r3], #1
 80088fa:	e7f9      	b.n	80088f0 <memset+0x4>

080088fc <__errno>:
 80088fc:	4b01      	ldr	r3, [pc, #4]	@ (8008904 <__errno+0x8>)
 80088fe:	6818      	ldr	r0, [r3, #0]
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	20000100 	.word	0x20000100

08008908 <__libc_init_array>:
 8008908:	b570      	push	{r4, r5, r6, lr}
 800890a:	4d0d      	ldr	r5, [pc, #52]	@ (8008940 <__libc_init_array+0x38>)
 800890c:	4c0d      	ldr	r4, [pc, #52]	@ (8008944 <__libc_init_array+0x3c>)
 800890e:	1b64      	subs	r4, r4, r5
 8008910:	10a4      	asrs	r4, r4, #2
 8008912:	2600      	movs	r6, #0
 8008914:	42a6      	cmp	r6, r4
 8008916:	d109      	bne.n	800892c <__libc_init_array+0x24>
 8008918:	4d0b      	ldr	r5, [pc, #44]	@ (8008948 <__libc_init_array+0x40>)
 800891a:	4c0c      	ldr	r4, [pc, #48]	@ (800894c <__libc_init_array+0x44>)
 800891c:	f000 fc66 	bl	80091ec <_init>
 8008920:	1b64      	subs	r4, r4, r5
 8008922:	10a4      	asrs	r4, r4, #2
 8008924:	2600      	movs	r6, #0
 8008926:	42a6      	cmp	r6, r4
 8008928:	d105      	bne.n	8008936 <__libc_init_array+0x2e>
 800892a:	bd70      	pop	{r4, r5, r6, pc}
 800892c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008930:	4798      	blx	r3
 8008932:	3601      	adds	r6, #1
 8008934:	e7ee      	b.n	8008914 <__libc_init_array+0xc>
 8008936:	f855 3b04 	ldr.w	r3, [r5], #4
 800893a:	4798      	blx	r3
 800893c:	3601      	adds	r6, #1
 800893e:	e7f2      	b.n	8008926 <__libc_init_array+0x1e>
 8008940:	08009314 	.word	0x08009314
 8008944:	08009314 	.word	0x08009314
 8008948:	08009314 	.word	0x08009314
 800894c:	08009318 	.word	0x08009318

08008950 <__retarget_lock_acquire_recursive>:
 8008950:	4770      	bx	lr

08008952 <__retarget_lock_release_recursive>:
 8008952:	4770      	bx	lr

08008954 <_free_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4605      	mov	r5, r0
 8008958:	2900      	cmp	r1, #0
 800895a:	d041      	beq.n	80089e0 <_free_r+0x8c>
 800895c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008960:	1f0c      	subs	r4, r1, #4
 8008962:	2b00      	cmp	r3, #0
 8008964:	bfb8      	it	lt
 8008966:	18e4      	addlt	r4, r4, r3
 8008968:	f000 f8e0 	bl	8008b2c <__malloc_lock>
 800896c:	4a1d      	ldr	r2, [pc, #116]	@ (80089e4 <_free_r+0x90>)
 800896e:	6813      	ldr	r3, [r2, #0]
 8008970:	b933      	cbnz	r3, 8008980 <_free_r+0x2c>
 8008972:	6063      	str	r3, [r4, #4]
 8008974:	6014      	str	r4, [r2, #0]
 8008976:	4628      	mov	r0, r5
 8008978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800897c:	f000 b8dc 	b.w	8008b38 <__malloc_unlock>
 8008980:	42a3      	cmp	r3, r4
 8008982:	d908      	bls.n	8008996 <_free_r+0x42>
 8008984:	6820      	ldr	r0, [r4, #0]
 8008986:	1821      	adds	r1, r4, r0
 8008988:	428b      	cmp	r3, r1
 800898a:	bf01      	itttt	eq
 800898c:	6819      	ldreq	r1, [r3, #0]
 800898e:	685b      	ldreq	r3, [r3, #4]
 8008990:	1809      	addeq	r1, r1, r0
 8008992:	6021      	streq	r1, [r4, #0]
 8008994:	e7ed      	b.n	8008972 <_free_r+0x1e>
 8008996:	461a      	mov	r2, r3
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	b10b      	cbz	r3, 80089a0 <_free_r+0x4c>
 800899c:	42a3      	cmp	r3, r4
 800899e:	d9fa      	bls.n	8008996 <_free_r+0x42>
 80089a0:	6811      	ldr	r1, [r2, #0]
 80089a2:	1850      	adds	r0, r2, r1
 80089a4:	42a0      	cmp	r0, r4
 80089a6:	d10b      	bne.n	80089c0 <_free_r+0x6c>
 80089a8:	6820      	ldr	r0, [r4, #0]
 80089aa:	4401      	add	r1, r0
 80089ac:	1850      	adds	r0, r2, r1
 80089ae:	4283      	cmp	r3, r0
 80089b0:	6011      	str	r1, [r2, #0]
 80089b2:	d1e0      	bne.n	8008976 <_free_r+0x22>
 80089b4:	6818      	ldr	r0, [r3, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	6053      	str	r3, [r2, #4]
 80089ba:	4408      	add	r0, r1
 80089bc:	6010      	str	r0, [r2, #0]
 80089be:	e7da      	b.n	8008976 <_free_r+0x22>
 80089c0:	d902      	bls.n	80089c8 <_free_r+0x74>
 80089c2:	230c      	movs	r3, #12
 80089c4:	602b      	str	r3, [r5, #0]
 80089c6:	e7d6      	b.n	8008976 <_free_r+0x22>
 80089c8:	6820      	ldr	r0, [r4, #0]
 80089ca:	1821      	adds	r1, r4, r0
 80089cc:	428b      	cmp	r3, r1
 80089ce:	bf04      	itt	eq
 80089d0:	6819      	ldreq	r1, [r3, #0]
 80089d2:	685b      	ldreq	r3, [r3, #4]
 80089d4:	6063      	str	r3, [r4, #4]
 80089d6:	bf04      	itt	eq
 80089d8:	1809      	addeq	r1, r1, r0
 80089da:	6021      	streq	r1, [r4, #0]
 80089dc:	6054      	str	r4, [r2, #4]
 80089de:	e7ca      	b.n	8008976 <_free_r+0x22>
 80089e0:	bd38      	pop	{r3, r4, r5, pc}
 80089e2:	bf00      	nop
 80089e4:	20001f3c 	.word	0x20001f3c

080089e8 <sbrk_aligned>:
 80089e8:	b570      	push	{r4, r5, r6, lr}
 80089ea:	4e0f      	ldr	r6, [pc, #60]	@ (8008a28 <sbrk_aligned+0x40>)
 80089ec:	460c      	mov	r4, r1
 80089ee:	6831      	ldr	r1, [r6, #0]
 80089f0:	4605      	mov	r5, r0
 80089f2:	b911      	cbnz	r1, 80089fa <sbrk_aligned+0x12>
 80089f4:	f000 fba6 	bl	8009144 <_sbrk_r>
 80089f8:	6030      	str	r0, [r6, #0]
 80089fa:	4621      	mov	r1, r4
 80089fc:	4628      	mov	r0, r5
 80089fe:	f000 fba1 	bl	8009144 <_sbrk_r>
 8008a02:	1c43      	adds	r3, r0, #1
 8008a04:	d103      	bne.n	8008a0e <sbrk_aligned+0x26>
 8008a06:	f04f 34ff 	mov.w	r4, #4294967295
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	bd70      	pop	{r4, r5, r6, pc}
 8008a0e:	1cc4      	adds	r4, r0, #3
 8008a10:	f024 0403 	bic.w	r4, r4, #3
 8008a14:	42a0      	cmp	r0, r4
 8008a16:	d0f8      	beq.n	8008a0a <sbrk_aligned+0x22>
 8008a18:	1a21      	subs	r1, r4, r0
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	f000 fb92 	bl	8009144 <_sbrk_r>
 8008a20:	3001      	adds	r0, #1
 8008a22:	d1f2      	bne.n	8008a0a <sbrk_aligned+0x22>
 8008a24:	e7ef      	b.n	8008a06 <sbrk_aligned+0x1e>
 8008a26:	bf00      	nop
 8008a28:	20001f38 	.word	0x20001f38

08008a2c <_malloc_r>:
 8008a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a30:	1ccd      	adds	r5, r1, #3
 8008a32:	f025 0503 	bic.w	r5, r5, #3
 8008a36:	3508      	adds	r5, #8
 8008a38:	2d0c      	cmp	r5, #12
 8008a3a:	bf38      	it	cc
 8008a3c:	250c      	movcc	r5, #12
 8008a3e:	2d00      	cmp	r5, #0
 8008a40:	4606      	mov	r6, r0
 8008a42:	db01      	blt.n	8008a48 <_malloc_r+0x1c>
 8008a44:	42a9      	cmp	r1, r5
 8008a46:	d904      	bls.n	8008a52 <_malloc_r+0x26>
 8008a48:	230c      	movs	r3, #12
 8008a4a:	6033      	str	r3, [r6, #0]
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b28 <_malloc_r+0xfc>
 8008a56:	f000 f869 	bl	8008b2c <__malloc_lock>
 8008a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8008a5e:	461c      	mov	r4, r3
 8008a60:	bb44      	cbnz	r4, 8008ab4 <_malloc_r+0x88>
 8008a62:	4629      	mov	r1, r5
 8008a64:	4630      	mov	r0, r6
 8008a66:	f7ff ffbf 	bl	80089e8 <sbrk_aligned>
 8008a6a:	1c43      	adds	r3, r0, #1
 8008a6c:	4604      	mov	r4, r0
 8008a6e:	d158      	bne.n	8008b22 <_malloc_r+0xf6>
 8008a70:	f8d8 4000 	ldr.w	r4, [r8]
 8008a74:	4627      	mov	r7, r4
 8008a76:	2f00      	cmp	r7, #0
 8008a78:	d143      	bne.n	8008b02 <_malloc_r+0xd6>
 8008a7a:	2c00      	cmp	r4, #0
 8008a7c:	d04b      	beq.n	8008b16 <_malloc_r+0xea>
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	4639      	mov	r1, r7
 8008a82:	4630      	mov	r0, r6
 8008a84:	eb04 0903 	add.w	r9, r4, r3
 8008a88:	f000 fb5c 	bl	8009144 <_sbrk_r>
 8008a8c:	4581      	cmp	r9, r0
 8008a8e:	d142      	bne.n	8008b16 <_malloc_r+0xea>
 8008a90:	6821      	ldr	r1, [r4, #0]
 8008a92:	1a6d      	subs	r5, r5, r1
 8008a94:	4629      	mov	r1, r5
 8008a96:	4630      	mov	r0, r6
 8008a98:	f7ff ffa6 	bl	80089e8 <sbrk_aligned>
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	d03a      	beq.n	8008b16 <_malloc_r+0xea>
 8008aa0:	6823      	ldr	r3, [r4, #0]
 8008aa2:	442b      	add	r3, r5
 8008aa4:	6023      	str	r3, [r4, #0]
 8008aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8008aaa:	685a      	ldr	r2, [r3, #4]
 8008aac:	bb62      	cbnz	r2, 8008b08 <_malloc_r+0xdc>
 8008aae:	f8c8 7000 	str.w	r7, [r8]
 8008ab2:	e00f      	b.n	8008ad4 <_malloc_r+0xa8>
 8008ab4:	6822      	ldr	r2, [r4, #0]
 8008ab6:	1b52      	subs	r2, r2, r5
 8008ab8:	d420      	bmi.n	8008afc <_malloc_r+0xd0>
 8008aba:	2a0b      	cmp	r2, #11
 8008abc:	d917      	bls.n	8008aee <_malloc_r+0xc2>
 8008abe:	1961      	adds	r1, r4, r5
 8008ac0:	42a3      	cmp	r3, r4
 8008ac2:	6025      	str	r5, [r4, #0]
 8008ac4:	bf18      	it	ne
 8008ac6:	6059      	strne	r1, [r3, #4]
 8008ac8:	6863      	ldr	r3, [r4, #4]
 8008aca:	bf08      	it	eq
 8008acc:	f8c8 1000 	streq.w	r1, [r8]
 8008ad0:	5162      	str	r2, [r4, r5]
 8008ad2:	604b      	str	r3, [r1, #4]
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	f000 f82f 	bl	8008b38 <__malloc_unlock>
 8008ada:	f104 000b 	add.w	r0, r4, #11
 8008ade:	1d23      	adds	r3, r4, #4
 8008ae0:	f020 0007 	bic.w	r0, r0, #7
 8008ae4:	1ac2      	subs	r2, r0, r3
 8008ae6:	bf1c      	itt	ne
 8008ae8:	1a1b      	subne	r3, r3, r0
 8008aea:	50a3      	strne	r3, [r4, r2]
 8008aec:	e7af      	b.n	8008a4e <_malloc_r+0x22>
 8008aee:	6862      	ldr	r2, [r4, #4]
 8008af0:	42a3      	cmp	r3, r4
 8008af2:	bf0c      	ite	eq
 8008af4:	f8c8 2000 	streq.w	r2, [r8]
 8008af8:	605a      	strne	r2, [r3, #4]
 8008afa:	e7eb      	b.n	8008ad4 <_malloc_r+0xa8>
 8008afc:	4623      	mov	r3, r4
 8008afe:	6864      	ldr	r4, [r4, #4]
 8008b00:	e7ae      	b.n	8008a60 <_malloc_r+0x34>
 8008b02:	463c      	mov	r4, r7
 8008b04:	687f      	ldr	r7, [r7, #4]
 8008b06:	e7b6      	b.n	8008a76 <_malloc_r+0x4a>
 8008b08:	461a      	mov	r2, r3
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	42a3      	cmp	r3, r4
 8008b0e:	d1fb      	bne.n	8008b08 <_malloc_r+0xdc>
 8008b10:	2300      	movs	r3, #0
 8008b12:	6053      	str	r3, [r2, #4]
 8008b14:	e7de      	b.n	8008ad4 <_malloc_r+0xa8>
 8008b16:	230c      	movs	r3, #12
 8008b18:	6033      	str	r3, [r6, #0]
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	f000 f80c 	bl	8008b38 <__malloc_unlock>
 8008b20:	e794      	b.n	8008a4c <_malloc_r+0x20>
 8008b22:	6005      	str	r5, [r0, #0]
 8008b24:	e7d6      	b.n	8008ad4 <_malloc_r+0xa8>
 8008b26:	bf00      	nop
 8008b28:	20001f3c 	.word	0x20001f3c

08008b2c <__malloc_lock>:
 8008b2c:	4801      	ldr	r0, [pc, #4]	@ (8008b34 <__malloc_lock+0x8>)
 8008b2e:	f7ff bf0f 	b.w	8008950 <__retarget_lock_acquire_recursive>
 8008b32:	bf00      	nop
 8008b34:	20001f34 	.word	0x20001f34

08008b38 <__malloc_unlock>:
 8008b38:	4801      	ldr	r0, [pc, #4]	@ (8008b40 <__malloc_unlock+0x8>)
 8008b3a:	f7ff bf0a 	b.w	8008952 <__retarget_lock_release_recursive>
 8008b3e:	bf00      	nop
 8008b40:	20001f34 	.word	0x20001f34

08008b44 <__ssputs_r>:
 8008b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b48:	688e      	ldr	r6, [r1, #8]
 8008b4a:	461f      	mov	r7, r3
 8008b4c:	42be      	cmp	r6, r7
 8008b4e:	680b      	ldr	r3, [r1, #0]
 8008b50:	4682      	mov	sl, r0
 8008b52:	460c      	mov	r4, r1
 8008b54:	4690      	mov	r8, r2
 8008b56:	d82d      	bhi.n	8008bb4 <__ssputs_r+0x70>
 8008b58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008b60:	d026      	beq.n	8008bb0 <__ssputs_r+0x6c>
 8008b62:	6965      	ldr	r5, [r4, #20]
 8008b64:	6909      	ldr	r1, [r1, #16]
 8008b66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b6a:	eba3 0901 	sub.w	r9, r3, r1
 8008b6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b72:	1c7b      	adds	r3, r7, #1
 8008b74:	444b      	add	r3, r9
 8008b76:	106d      	asrs	r5, r5, #1
 8008b78:	429d      	cmp	r5, r3
 8008b7a:	bf38      	it	cc
 8008b7c:	461d      	movcc	r5, r3
 8008b7e:	0553      	lsls	r3, r2, #21
 8008b80:	d527      	bpl.n	8008bd2 <__ssputs_r+0x8e>
 8008b82:	4629      	mov	r1, r5
 8008b84:	f7ff ff52 	bl	8008a2c <_malloc_r>
 8008b88:	4606      	mov	r6, r0
 8008b8a:	b360      	cbz	r0, 8008be6 <__ssputs_r+0xa2>
 8008b8c:	6921      	ldr	r1, [r4, #16]
 8008b8e:	464a      	mov	r2, r9
 8008b90:	f000 fae8 	bl	8009164 <memcpy>
 8008b94:	89a3      	ldrh	r3, [r4, #12]
 8008b96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b9e:	81a3      	strh	r3, [r4, #12]
 8008ba0:	6126      	str	r6, [r4, #16]
 8008ba2:	6165      	str	r5, [r4, #20]
 8008ba4:	444e      	add	r6, r9
 8008ba6:	eba5 0509 	sub.w	r5, r5, r9
 8008baa:	6026      	str	r6, [r4, #0]
 8008bac:	60a5      	str	r5, [r4, #8]
 8008bae:	463e      	mov	r6, r7
 8008bb0:	42be      	cmp	r6, r7
 8008bb2:	d900      	bls.n	8008bb6 <__ssputs_r+0x72>
 8008bb4:	463e      	mov	r6, r7
 8008bb6:	6820      	ldr	r0, [r4, #0]
 8008bb8:	4632      	mov	r2, r6
 8008bba:	4641      	mov	r1, r8
 8008bbc:	f000 faa8 	bl	8009110 <memmove>
 8008bc0:	68a3      	ldr	r3, [r4, #8]
 8008bc2:	1b9b      	subs	r3, r3, r6
 8008bc4:	60a3      	str	r3, [r4, #8]
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	4433      	add	r3, r6
 8008bca:	6023      	str	r3, [r4, #0]
 8008bcc:	2000      	movs	r0, #0
 8008bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd2:	462a      	mov	r2, r5
 8008bd4:	f000 fad4 	bl	8009180 <_realloc_r>
 8008bd8:	4606      	mov	r6, r0
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d1e0      	bne.n	8008ba0 <__ssputs_r+0x5c>
 8008bde:	6921      	ldr	r1, [r4, #16]
 8008be0:	4650      	mov	r0, sl
 8008be2:	f7ff feb7 	bl	8008954 <_free_r>
 8008be6:	230c      	movs	r3, #12
 8008be8:	f8ca 3000 	str.w	r3, [sl]
 8008bec:	89a3      	ldrh	r3, [r4, #12]
 8008bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bf2:	81a3      	strh	r3, [r4, #12]
 8008bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf8:	e7e9      	b.n	8008bce <__ssputs_r+0x8a>
	...

08008bfc <_svfiprintf_r>:
 8008bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c00:	4698      	mov	r8, r3
 8008c02:	898b      	ldrh	r3, [r1, #12]
 8008c04:	061b      	lsls	r3, r3, #24
 8008c06:	b09d      	sub	sp, #116	@ 0x74
 8008c08:	4607      	mov	r7, r0
 8008c0a:	460d      	mov	r5, r1
 8008c0c:	4614      	mov	r4, r2
 8008c0e:	d510      	bpl.n	8008c32 <_svfiprintf_r+0x36>
 8008c10:	690b      	ldr	r3, [r1, #16]
 8008c12:	b973      	cbnz	r3, 8008c32 <_svfiprintf_r+0x36>
 8008c14:	2140      	movs	r1, #64	@ 0x40
 8008c16:	f7ff ff09 	bl	8008a2c <_malloc_r>
 8008c1a:	6028      	str	r0, [r5, #0]
 8008c1c:	6128      	str	r0, [r5, #16]
 8008c1e:	b930      	cbnz	r0, 8008c2e <_svfiprintf_r+0x32>
 8008c20:	230c      	movs	r3, #12
 8008c22:	603b      	str	r3, [r7, #0]
 8008c24:	f04f 30ff 	mov.w	r0, #4294967295
 8008c28:	b01d      	add	sp, #116	@ 0x74
 8008c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2e:	2340      	movs	r3, #64	@ 0x40
 8008c30:	616b      	str	r3, [r5, #20]
 8008c32:	2300      	movs	r3, #0
 8008c34:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c36:	2320      	movs	r3, #32
 8008c38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c40:	2330      	movs	r3, #48	@ 0x30
 8008c42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008de0 <_svfiprintf_r+0x1e4>
 8008c46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c4a:	f04f 0901 	mov.w	r9, #1
 8008c4e:	4623      	mov	r3, r4
 8008c50:	469a      	mov	sl, r3
 8008c52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c56:	b10a      	cbz	r2, 8008c5c <_svfiprintf_r+0x60>
 8008c58:	2a25      	cmp	r2, #37	@ 0x25
 8008c5a:	d1f9      	bne.n	8008c50 <_svfiprintf_r+0x54>
 8008c5c:	ebba 0b04 	subs.w	fp, sl, r4
 8008c60:	d00b      	beq.n	8008c7a <_svfiprintf_r+0x7e>
 8008c62:	465b      	mov	r3, fp
 8008c64:	4622      	mov	r2, r4
 8008c66:	4629      	mov	r1, r5
 8008c68:	4638      	mov	r0, r7
 8008c6a:	f7ff ff6b 	bl	8008b44 <__ssputs_r>
 8008c6e:	3001      	adds	r0, #1
 8008c70:	f000 80a7 	beq.w	8008dc2 <_svfiprintf_r+0x1c6>
 8008c74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c76:	445a      	add	r2, fp
 8008c78:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f000 809f 	beq.w	8008dc2 <_svfiprintf_r+0x1c6>
 8008c84:	2300      	movs	r3, #0
 8008c86:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c8e:	f10a 0a01 	add.w	sl, sl, #1
 8008c92:	9304      	str	r3, [sp, #16]
 8008c94:	9307      	str	r3, [sp, #28]
 8008c96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c9c:	4654      	mov	r4, sl
 8008c9e:	2205      	movs	r2, #5
 8008ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca4:	484e      	ldr	r0, [pc, #312]	@ (8008de0 <_svfiprintf_r+0x1e4>)
 8008ca6:	f7f7 faa3 	bl	80001f0 <memchr>
 8008caa:	9a04      	ldr	r2, [sp, #16]
 8008cac:	b9d8      	cbnz	r0, 8008ce6 <_svfiprintf_r+0xea>
 8008cae:	06d0      	lsls	r0, r2, #27
 8008cb0:	bf44      	itt	mi
 8008cb2:	2320      	movmi	r3, #32
 8008cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cb8:	0711      	lsls	r1, r2, #28
 8008cba:	bf44      	itt	mi
 8008cbc:	232b      	movmi	r3, #43	@ 0x2b
 8008cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cc8:	d015      	beq.n	8008cf6 <_svfiprintf_r+0xfa>
 8008cca:	9a07      	ldr	r2, [sp, #28]
 8008ccc:	4654      	mov	r4, sl
 8008cce:	2000      	movs	r0, #0
 8008cd0:	f04f 0c0a 	mov.w	ip, #10
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cda:	3b30      	subs	r3, #48	@ 0x30
 8008cdc:	2b09      	cmp	r3, #9
 8008cde:	d94b      	bls.n	8008d78 <_svfiprintf_r+0x17c>
 8008ce0:	b1b0      	cbz	r0, 8008d10 <_svfiprintf_r+0x114>
 8008ce2:	9207      	str	r2, [sp, #28]
 8008ce4:	e014      	b.n	8008d10 <_svfiprintf_r+0x114>
 8008ce6:	eba0 0308 	sub.w	r3, r0, r8
 8008cea:	fa09 f303 	lsl.w	r3, r9, r3
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	9304      	str	r3, [sp, #16]
 8008cf2:	46a2      	mov	sl, r4
 8008cf4:	e7d2      	b.n	8008c9c <_svfiprintf_r+0xa0>
 8008cf6:	9b03      	ldr	r3, [sp, #12]
 8008cf8:	1d19      	adds	r1, r3, #4
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	9103      	str	r1, [sp, #12]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	bfbb      	ittet	lt
 8008d02:	425b      	neglt	r3, r3
 8008d04:	f042 0202 	orrlt.w	r2, r2, #2
 8008d08:	9307      	strge	r3, [sp, #28]
 8008d0a:	9307      	strlt	r3, [sp, #28]
 8008d0c:	bfb8      	it	lt
 8008d0e:	9204      	strlt	r2, [sp, #16]
 8008d10:	7823      	ldrb	r3, [r4, #0]
 8008d12:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d14:	d10a      	bne.n	8008d2c <_svfiprintf_r+0x130>
 8008d16:	7863      	ldrb	r3, [r4, #1]
 8008d18:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d1a:	d132      	bne.n	8008d82 <_svfiprintf_r+0x186>
 8008d1c:	9b03      	ldr	r3, [sp, #12]
 8008d1e:	1d1a      	adds	r2, r3, #4
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	9203      	str	r2, [sp, #12]
 8008d24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d28:	3402      	adds	r4, #2
 8008d2a:	9305      	str	r3, [sp, #20]
 8008d2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008df0 <_svfiprintf_r+0x1f4>
 8008d30:	7821      	ldrb	r1, [r4, #0]
 8008d32:	2203      	movs	r2, #3
 8008d34:	4650      	mov	r0, sl
 8008d36:	f7f7 fa5b 	bl	80001f0 <memchr>
 8008d3a:	b138      	cbz	r0, 8008d4c <_svfiprintf_r+0x150>
 8008d3c:	9b04      	ldr	r3, [sp, #16]
 8008d3e:	eba0 000a 	sub.w	r0, r0, sl
 8008d42:	2240      	movs	r2, #64	@ 0x40
 8008d44:	4082      	lsls	r2, r0
 8008d46:	4313      	orrs	r3, r2
 8008d48:	3401      	adds	r4, #1
 8008d4a:	9304      	str	r3, [sp, #16]
 8008d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d50:	4824      	ldr	r0, [pc, #144]	@ (8008de4 <_svfiprintf_r+0x1e8>)
 8008d52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d56:	2206      	movs	r2, #6
 8008d58:	f7f7 fa4a 	bl	80001f0 <memchr>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d036      	beq.n	8008dce <_svfiprintf_r+0x1d2>
 8008d60:	4b21      	ldr	r3, [pc, #132]	@ (8008de8 <_svfiprintf_r+0x1ec>)
 8008d62:	bb1b      	cbnz	r3, 8008dac <_svfiprintf_r+0x1b0>
 8008d64:	9b03      	ldr	r3, [sp, #12]
 8008d66:	3307      	adds	r3, #7
 8008d68:	f023 0307 	bic.w	r3, r3, #7
 8008d6c:	3308      	adds	r3, #8
 8008d6e:	9303      	str	r3, [sp, #12]
 8008d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d72:	4433      	add	r3, r6
 8008d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d76:	e76a      	b.n	8008c4e <_svfiprintf_r+0x52>
 8008d78:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	2001      	movs	r0, #1
 8008d80:	e7a8      	b.n	8008cd4 <_svfiprintf_r+0xd8>
 8008d82:	2300      	movs	r3, #0
 8008d84:	3401      	adds	r4, #1
 8008d86:	9305      	str	r3, [sp, #20]
 8008d88:	4619      	mov	r1, r3
 8008d8a:	f04f 0c0a 	mov.w	ip, #10
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d94:	3a30      	subs	r2, #48	@ 0x30
 8008d96:	2a09      	cmp	r2, #9
 8008d98:	d903      	bls.n	8008da2 <_svfiprintf_r+0x1a6>
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d0c6      	beq.n	8008d2c <_svfiprintf_r+0x130>
 8008d9e:	9105      	str	r1, [sp, #20]
 8008da0:	e7c4      	b.n	8008d2c <_svfiprintf_r+0x130>
 8008da2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008da6:	4604      	mov	r4, r0
 8008da8:	2301      	movs	r3, #1
 8008daa:	e7f0      	b.n	8008d8e <_svfiprintf_r+0x192>
 8008dac:	ab03      	add	r3, sp, #12
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	462a      	mov	r2, r5
 8008db2:	4b0e      	ldr	r3, [pc, #56]	@ (8008dec <_svfiprintf_r+0x1f0>)
 8008db4:	a904      	add	r1, sp, #16
 8008db6:	4638      	mov	r0, r7
 8008db8:	f3af 8000 	nop.w
 8008dbc:	1c42      	adds	r2, r0, #1
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	d1d6      	bne.n	8008d70 <_svfiprintf_r+0x174>
 8008dc2:	89ab      	ldrh	r3, [r5, #12]
 8008dc4:	065b      	lsls	r3, r3, #25
 8008dc6:	f53f af2d 	bmi.w	8008c24 <_svfiprintf_r+0x28>
 8008dca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008dcc:	e72c      	b.n	8008c28 <_svfiprintf_r+0x2c>
 8008dce:	ab03      	add	r3, sp, #12
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	462a      	mov	r2, r5
 8008dd4:	4b05      	ldr	r3, [pc, #20]	@ (8008dec <_svfiprintf_r+0x1f0>)
 8008dd6:	a904      	add	r1, sp, #16
 8008dd8:	4638      	mov	r0, r7
 8008dda:	f000 f879 	bl	8008ed0 <_printf_i>
 8008dde:	e7ed      	b.n	8008dbc <_svfiprintf_r+0x1c0>
 8008de0:	080092d8 	.word	0x080092d8
 8008de4:	080092e2 	.word	0x080092e2
 8008de8:	00000000 	.word	0x00000000
 8008dec:	08008b45 	.word	0x08008b45
 8008df0:	080092de 	.word	0x080092de

08008df4 <_printf_common>:
 8008df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df8:	4616      	mov	r6, r2
 8008dfa:	4698      	mov	r8, r3
 8008dfc:	688a      	ldr	r2, [r1, #8]
 8008dfe:	690b      	ldr	r3, [r1, #16]
 8008e00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e04:	4293      	cmp	r3, r2
 8008e06:	bfb8      	it	lt
 8008e08:	4613      	movlt	r3, r2
 8008e0a:	6033      	str	r3, [r6, #0]
 8008e0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e10:	4607      	mov	r7, r0
 8008e12:	460c      	mov	r4, r1
 8008e14:	b10a      	cbz	r2, 8008e1a <_printf_common+0x26>
 8008e16:	3301      	adds	r3, #1
 8008e18:	6033      	str	r3, [r6, #0]
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	0699      	lsls	r1, r3, #26
 8008e1e:	bf42      	ittt	mi
 8008e20:	6833      	ldrmi	r3, [r6, #0]
 8008e22:	3302      	addmi	r3, #2
 8008e24:	6033      	strmi	r3, [r6, #0]
 8008e26:	6825      	ldr	r5, [r4, #0]
 8008e28:	f015 0506 	ands.w	r5, r5, #6
 8008e2c:	d106      	bne.n	8008e3c <_printf_common+0x48>
 8008e2e:	f104 0a19 	add.w	sl, r4, #25
 8008e32:	68e3      	ldr	r3, [r4, #12]
 8008e34:	6832      	ldr	r2, [r6, #0]
 8008e36:	1a9b      	subs	r3, r3, r2
 8008e38:	42ab      	cmp	r3, r5
 8008e3a:	dc26      	bgt.n	8008e8a <_printf_common+0x96>
 8008e3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e40:	6822      	ldr	r2, [r4, #0]
 8008e42:	3b00      	subs	r3, #0
 8008e44:	bf18      	it	ne
 8008e46:	2301      	movne	r3, #1
 8008e48:	0692      	lsls	r2, r2, #26
 8008e4a:	d42b      	bmi.n	8008ea4 <_printf_common+0xb0>
 8008e4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e50:	4641      	mov	r1, r8
 8008e52:	4638      	mov	r0, r7
 8008e54:	47c8      	blx	r9
 8008e56:	3001      	adds	r0, #1
 8008e58:	d01e      	beq.n	8008e98 <_printf_common+0xa4>
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	6922      	ldr	r2, [r4, #16]
 8008e5e:	f003 0306 	and.w	r3, r3, #6
 8008e62:	2b04      	cmp	r3, #4
 8008e64:	bf02      	ittt	eq
 8008e66:	68e5      	ldreq	r5, [r4, #12]
 8008e68:	6833      	ldreq	r3, [r6, #0]
 8008e6a:	1aed      	subeq	r5, r5, r3
 8008e6c:	68a3      	ldr	r3, [r4, #8]
 8008e6e:	bf0c      	ite	eq
 8008e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e74:	2500      	movne	r5, #0
 8008e76:	4293      	cmp	r3, r2
 8008e78:	bfc4      	itt	gt
 8008e7a:	1a9b      	subgt	r3, r3, r2
 8008e7c:	18ed      	addgt	r5, r5, r3
 8008e7e:	2600      	movs	r6, #0
 8008e80:	341a      	adds	r4, #26
 8008e82:	42b5      	cmp	r5, r6
 8008e84:	d11a      	bne.n	8008ebc <_printf_common+0xc8>
 8008e86:	2000      	movs	r0, #0
 8008e88:	e008      	b.n	8008e9c <_printf_common+0xa8>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	4652      	mov	r2, sl
 8008e8e:	4641      	mov	r1, r8
 8008e90:	4638      	mov	r0, r7
 8008e92:	47c8      	blx	r9
 8008e94:	3001      	adds	r0, #1
 8008e96:	d103      	bne.n	8008ea0 <_printf_common+0xac>
 8008e98:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea0:	3501      	adds	r5, #1
 8008ea2:	e7c6      	b.n	8008e32 <_printf_common+0x3e>
 8008ea4:	18e1      	adds	r1, r4, r3
 8008ea6:	1c5a      	adds	r2, r3, #1
 8008ea8:	2030      	movs	r0, #48	@ 0x30
 8008eaa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008eae:	4422      	add	r2, r4
 8008eb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008eb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008eb8:	3302      	adds	r3, #2
 8008eba:	e7c7      	b.n	8008e4c <_printf_common+0x58>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	4622      	mov	r2, r4
 8008ec0:	4641      	mov	r1, r8
 8008ec2:	4638      	mov	r0, r7
 8008ec4:	47c8      	blx	r9
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	d0e6      	beq.n	8008e98 <_printf_common+0xa4>
 8008eca:	3601      	adds	r6, #1
 8008ecc:	e7d9      	b.n	8008e82 <_printf_common+0x8e>
	...

08008ed0 <_printf_i>:
 8008ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed4:	7e0f      	ldrb	r7, [r1, #24]
 8008ed6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ed8:	2f78      	cmp	r7, #120	@ 0x78
 8008eda:	4691      	mov	r9, r2
 8008edc:	4680      	mov	r8, r0
 8008ede:	460c      	mov	r4, r1
 8008ee0:	469a      	mov	sl, r3
 8008ee2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ee6:	d807      	bhi.n	8008ef8 <_printf_i+0x28>
 8008ee8:	2f62      	cmp	r7, #98	@ 0x62
 8008eea:	d80a      	bhi.n	8008f02 <_printf_i+0x32>
 8008eec:	2f00      	cmp	r7, #0
 8008eee:	f000 80d2 	beq.w	8009096 <_printf_i+0x1c6>
 8008ef2:	2f58      	cmp	r7, #88	@ 0x58
 8008ef4:	f000 80b9 	beq.w	800906a <_printf_i+0x19a>
 8008ef8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008efc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f00:	e03a      	b.n	8008f78 <_printf_i+0xa8>
 8008f02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f06:	2b15      	cmp	r3, #21
 8008f08:	d8f6      	bhi.n	8008ef8 <_printf_i+0x28>
 8008f0a:	a101      	add	r1, pc, #4	@ (adr r1, 8008f10 <_printf_i+0x40>)
 8008f0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f10:	08008f69 	.word	0x08008f69
 8008f14:	08008f7d 	.word	0x08008f7d
 8008f18:	08008ef9 	.word	0x08008ef9
 8008f1c:	08008ef9 	.word	0x08008ef9
 8008f20:	08008ef9 	.word	0x08008ef9
 8008f24:	08008ef9 	.word	0x08008ef9
 8008f28:	08008f7d 	.word	0x08008f7d
 8008f2c:	08008ef9 	.word	0x08008ef9
 8008f30:	08008ef9 	.word	0x08008ef9
 8008f34:	08008ef9 	.word	0x08008ef9
 8008f38:	08008ef9 	.word	0x08008ef9
 8008f3c:	0800907d 	.word	0x0800907d
 8008f40:	08008fa7 	.word	0x08008fa7
 8008f44:	08009037 	.word	0x08009037
 8008f48:	08008ef9 	.word	0x08008ef9
 8008f4c:	08008ef9 	.word	0x08008ef9
 8008f50:	0800909f 	.word	0x0800909f
 8008f54:	08008ef9 	.word	0x08008ef9
 8008f58:	08008fa7 	.word	0x08008fa7
 8008f5c:	08008ef9 	.word	0x08008ef9
 8008f60:	08008ef9 	.word	0x08008ef9
 8008f64:	0800903f 	.word	0x0800903f
 8008f68:	6833      	ldr	r3, [r6, #0]
 8008f6a:	1d1a      	adds	r2, r3, #4
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	6032      	str	r2, [r6, #0]
 8008f70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e09d      	b.n	80090b8 <_printf_i+0x1e8>
 8008f7c:	6833      	ldr	r3, [r6, #0]
 8008f7e:	6820      	ldr	r0, [r4, #0]
 8008f80:	1d19      	adds	r1, r3, #4
 8008f82:	6031      	str	r1, [r6, #0]
 8008f84:	0606      	lsls	r6, r0, #24
 8008f86:	d501      	bpl.n	8008f8c <_printf_i+0xbc>
 8008f88:	681d      	ldr	r5, [r3, #0]
 8008f8a:	e003      	b.n	8008f94 <_printf_i+0xc4>
 8008f8c:	0645      	lsls	r5, r0, #25
 8008f8e:	d5fb      	bpl.n	8008f88 <_printf_i+0xb8>
 8008f90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f94:	2d00      	cmp	r5, #0
 8008f96:	da03      	bge.n	8008fa0 <_printf_i+0xd0>
 8008f98:	232d      	movs	r3, #45	@ 0x2d
 8008f9a:	426d      	negs	r5, r5
 8008f9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fa0:	4859      	ldr	r0, [pc, #356]	@ (8009108 <_printf_i+0x238>)
 8008fa2:	230a      	movs	r3, #10
 8008fa4:	e011      	b.n	8008fca <_printf_i+0xfa>
 8008fa6:	6821      	ldr	r1, [r4, #0]
 8008fa8:	6833      	ldr	r3, [r6, #0]
 8008faa:	0608      	lsls	r0, r1, #24
 8008fac:	f853 5b04 	ldr.w	r5, [r3], #4
 8008fb0:	d402      	bmi.n	8008fb8 <_printf_i+0xe8>
 8008fb2:	0649      	lsls	r1, r1, #25
 8008fb4:	bf48      	it	mi
 8008fb6:	b2ad      	uxthmi	r5, r5
 8008fb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008fba:	4853      	ldr	r0, [pc, #332]	@ (8009108 <_printf_i+0x238>)
 8008fbc:	6033      	str	r3, [r6, #0]
 8008fbe:	bf14      	ite	ne
 8008fc0:	230a      	movne	r3, #10
 8008fc2:	2308      	moveq	r3, #8
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008fca:	6866      	ldr	r6, [r4, #4]
 8008fcc:	60a6      	str	r6, [r4, #8]
 8008fce:	2e00      	cmp	r6, #0
 8008fd0:	bfa2      	ittt	ge
 8008fd2:	6821      	ldrge	r1, [r4, #0]
 8008fd4:	f021 0104 	bicge.w	r1, r1, #4
 8008fd8:	6021      	strge	r1, [r4, #0]
 8008fda:	b90d      	cbnz	r5, 8008fe0 <_printf_i+0x110>
 8008fdc:	2e00      	cmp	r6, #0
 8008fde:	d04b      	beq.n	8009078 <_printf_i+0x1a8>
 8008fe0:	4616      	mov	r6, r2
 8008fe2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fe6:	fb03 5711 	mls	r7, r3, r1, r5
 8008fea:	5dc7      	ldrb	r7, [r0, r7]
 8008fec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ff0:	462f      	mov	r7, r5
 8008ff2:	42bb      	cmp	r3, r7
 8008ff4:	460d      	mov	r5, r1
 8008ff6:	d9f4      	bls.n	8008fe2 <_printf_i+0x112>
 8008ff8:	2b08      	cmp	r3, #8
 8008ffa:	d10b      	bne.n	8009014 <_printf_i+0x144>
 8008ffc:	6823      	ldr	r3, [r4, #0]
 8008ffe:	07df      	lsls	r7, r3, #31
 8009000:	d508      	bpl.n	8009014 <_printf_i+0x144>
 8009002:	6923      	ldr	r3, [r4, #16]
 8009004:	6861      	ldr	r1, [r4, #4]
 8009006:	4299      	cmp	r1, r3
 8009008:	bfde      	ittt	le
 800900a:	2330      	movle	r3, #48	@ 0x30
 800900c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009010:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009014:	1b92      	subs	r2, r2, r6
 8009016:	6122      	str	r2, [r4, #16]
 8009018:	f8cd a000 	str.w	sl, [sp]
 800901c:	464b      	mov	r3, r9
 800901e:	aa03      	add	r2, sp, #12
 8009020:	4621      	mov	r1, r4
 8009022:	4640      	mov	r0, r8
 8009024:	f7ff fee6 	bl	8008df4 <_printf_common>
 8009028:	3001      	adds	r0, #1
 800902a:	d14a      	bne.n	80090c2 <_printf_i+0x1f2>
 800902c:	f04f 30ff 	mov.w	r0, #4294967295
 8009030:	b004      	add	sp, #16
 8009032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	f043 0320 	orr.w	r3, r3, #32
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	4833      	ldr	r0, [pc, #204]	@ (800910c <_printf_i+0x23c>)
 8009040:	2778      	movs	r7, #120	@ 0x78
 8009042:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	6831      	ldr	r1, [r6, #0]
 800904a:	061f      	lsls	r7, r3, #24
 800904c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009050:	d402      	bmi.n	8009058 <_printf_i+0x188>
 8009052:	065f      	lsls	r7, r3, #25
 8009054:	bf48      	it	mi
 8009056:	b2ad      	uxthmi	r5, r5
 8009058:	6031      	str	r1, [r6, #0]
 800905a:	07d9      	lsls	r1, r3, #31
 800905c:	bf44      	itt	mi
 800905e:	f043 0320 	orrmi.w	r3, r3, #32
 8009062:	6023      	strmi	r3, [r4, #0]
 8009064:	b11d      	cbz	r5, 800906e <_printf_i+0x19e>
 8009066:	2310      	movs	r3, #16
 8009068:	e7ac      	b.n	8008fc4 <_printf_i+0xf4>
 800906a:	4827      	ldr	r0, [pc, #156]	@ (8009108 <_printf_i+0x238>)
 800906c:	e7e9      	b.n	8009042 <_printf_i+0x172>
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	f023 0320 	bic.w	r3, r3, #32
 8009074:	6023      	str	r3, [r4, #0]
 8009076:	e7f6      	b.n	8009066 <_printf_i+0x196>
 8009078:	4616      	mov	r6, r2
 800907a:	e7bd      	b.n	8008ff8 <_printf_i+0x128>
 800907c:	6833      	ldr	r3, [r6, #0]
 800907e:	6825      	ldr	r5, [r4, #0]
 8009080:	6961      	ldr	r1, [r4, #20]
 8009082:	1d18      	adds	r0, r3, #4
 8009084:	6030      	str	r0, [r6, #0]
 8009086:	062e      	lsls	r6, r5, #24
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	d501      	bpl.n	8009090 <_printf_i+0x1c0>
 800908c:	6019      	str	r1, [r3, #0]
 800908e:	e002      	b.n	8009096 <_printf_i+0x1c6>
 8009090:	0668      	lsls	r0, r5, #25
 8009092:	d5fb      	bpl.n	800908c <_printf_i+0x1bc>
 8009094:	8019      	strh	r1, [r3, #0]
 8009096:	2300      	movs	r3, #0
 8009098:	6123      	str	r3, [r4, #16]
 800909a:	4616      	mov	r6, r2
 800909c:	e7bc      	b.n	8009018 <_printf_i+0x148>
 800909e:	6833      	ldr	r3, [r6, #0]
 80090a0:	1d1a      	adds	r2, r3, #4
 80090a2:	6032      	str	r2, [r6, #0]
 80090a4:	681e      	ldr	r6, [r3, #0]
 80090a6:	6862      	ldr	r2, [r4, #4]
 80090a8:	2100      	movs	r1, #0
 80090aa:	4630      	mov	r0, r6
 80090ac:	f7f7 f8a0 	bl	80001f0 <memchr>
 80090b0:	b108      	cbz	r0, 80090b6 <_printf_i+0x1e6>
 80090b2:	1b80      	subs	r0, r0, r6
 80090b4:	6060      	str	r0, [r4, #4]
 80090b6:	6863      	ldr	r3, [r4, #4]
 80090b8:	6123      	str	r3, [r4, #16]
 80090ba:	2300      	movs	r3, #0
 80090bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090c0:	e7aa      	b.n	8009018 <_printf_i+0x148>
 80090c2:	6923      	ldr	r3, [r4, #16]
 80090c4:	4632      	mov	r2, r6
 80090c6:	4649      	mov	r1, r9
 80090c8:	4640      	mov	r0, r8
 80090ca:	47d0      	blx	sl
 80090cc:	3001      	adds	r0, #1
 80090ce:	d0ad      	beq.n	800902c <_printf_i+0x15c>
 80090d0:	6823      	ldr	r3, [r4, #0]
 80090d2:	079b      	lsls	r3, r3, #30
 80090d4:	d413      	bmi.n	80090fe <_printf_i+0x22e>
 80090d6:	68e0      	ldr	r0, [r4, #12]
 80090d8:	9b03      	ldr	r3, [sp, #12]
 80090da:	4298      	cmp	r0, r3
 80090dc:	bfb8      	it	lt
 80090de:	4618      	movlt	r0, r3
 80090e0:	e7a6      	b.n	8009030 <_printf_i+0x160>
 80090e2:	2301      	movs	r3, #1
 80090e4:	4632      	mov	r2, r6
 80090e6:	4649      	mov	r1, r9
 80090e8:	4640      	mov	r0, r8
 80090ea:	47d0      	blx	sl
 80090ec:	3001      	adds	r0, #1
 80090ee:	d09d      	beq.n	800902c <_printf_i+0x15c>
 80090f0:	3501      	adds	r5, #1
 80090f2:	68e3      	ldr	r3, [r4, #12]
 80090f4:	9903      	ldr	r1, [sp, #12]
 80090f6:	1a5b      	subs	r3, r3, r1
 80090f8:	42ab      	cmp	r3, r5
 80090fa:	dcf2      	bgt.n	80090e2 <_printf_i+0x212>
 80090fc:	e7eb      	b.n	80090d6 <_printf_i+0x206>
 80090fe:	2500      	movs	r5, #0
 8009100:	f104 0619 	add.w	r6, r4, #25
 8009104:	e7f5      	b.n	80090f2 <_printf_i+0x222>
 8009106:	bf00      	nop
 8009108:	080092e9 	.word	0x080092e9
 800910c:	080092fa 	.word	0x080092fa

08009110 <memmove>:
 8009110:	4288      	cmp	r0, r1
 8009112:	b510      	push	{r4, lr}
 8009114:	eb01 0402 	add.w	r4, r1, r2
 8009118:	d902      	bls.n	8009120 <memmove+0x10>
 800911a:	4284      	cmp	r4, r0
 800911c:	4623      	mov	r3, r4
 800911e:	d807      	bhi.n	8009130 <memmove+0x20>
 8009120:	1e43      	subs	r3, r0, #1
 8009122:	42a1      	cmp	r1, r4
 8009124:	d008      	beq.n	8009138 <memmove+0x28>
 8009126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800912a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800912e:	e7f8      	b.n	8009122 <memmove+0x12>
 8009130:	4402      	add	r2, r0
 8009132:	4601      	mov	r1, r0
 8009134:	428a      	cmp	r2, r1
 8009136:	d100      	bne.n	800913a <memmove+0x2a>
 8009138:	bd10      	pop	{r4, pc}
 800913a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800913e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009142:	e7f7      	b.n	8009134 <memmove+0x24>

08009144 <_sbrk_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4d06      	ldr	r5, [pc, #24]	@ (8009160 <_sbrk_r+0x1c>)
 8009148:	2300      	movs	r3, #0
 800914a:	4604      	mov	r4, r0
 800914c:	4608      	mov	r0, r1
 800914e:	602b      	str	r3, [r5, #0]
 8009150:	f7f7 fd6c 	bl	8000c2c <_sbrk>
 8009154:	1c43      	adds	r3, r0, #1
 8009156:	d102      	bne.n	800915e <_sbrk_r+0x1a>
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	b103      	cbz	r3, 800915e <_sbrk_r+0x1a>
 800915c:	6023      	str	r3, [r4, #0]
 800915e:	bd38      	pop	{r3, r4, r5, pc}
 8009160:	20001f30 	.word	0x20001f30

08009164 <memcpy>:
 8009164:	440a      	add	r2, r1
 8009166:	4291      	cmp	r1, r2
 8009168:	f100 33ff 	add.w	r3, r0, #4294967295
 800916c:	d100      	bne.n	8009170 <memcpy+0xc>
 800916e:	4770      	bx	lr
 8009170:	b510      	push	{r4, lr}
 8009172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009176:	f803 4f01 	strb.w	r4, [r3, #1]!
 800917a:	4291      	cmp	r1, r2
 800917c:	d1f9      	bne.n	8009172 <memcpy+0xe>
 800917e:	bd10      	pop	{r4, pc}

08009180 <_realloc_r>:
 8009180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009184:	4680      	mov	r8, r0
 8009186:	4615      	mov	r5, r2
 8009188:	460c      	mov	r4, r1
 800918a:	b921      	cbnz	r1, 8009196 <_realloc_r+0x16>
 800918c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009190:	4611      	mov	r1, r2
 8009192:	f7ff bc4b 	b.w	8008a2c <_malloc_r>
 8009196:	b92a      	cbnz	r2, 80091a4 <_realloc_r+0x24>
 8009198:	f7ff fbdc 	bl	8008954 <_free_r>
 800919c:	2400      	movs	r4, #0
 800919e:	4620      	mov	r0, r4
 80091a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a4:	f000 f81a 	bl	80091dc <_malloc_usable_size_r>
 80091a8:	4285      	cmp	r5, r0
 80091aa:	4606      	mov	r6, r0
 80091ac:	d802      	bhi.n	80091b4 <_realloc_r+0x34>
 80091ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80091b2:	d8f4      	bhi.n	800919e <_realloc_r+0x1e>
 80091b4:	4629      	mov	r1, r5
 80091b6:	4640      	mov	r0, r8
 80091b8:	f7ff fc38 	bl	8008a2c <_malloc_r>
 80091bc:	4607      	mov	r7, r0
 80091be:	2800      	cmp	r0, #0
 80091c0:	d0ec      	beq.n	800919c <_realloc_r+0x1c>
 80091c2:	42b5      	cmp	r5, r6
 80091c4:	462a      	mov	r2, r5
 80091c6:	4621      	mov	r1, r4
 80091c8:	bf28      	it	cs
 80091ca:	4632      	movcs	r2, r6
 80091cc:	f7ff ffca 	bl	8009164 <memcpy>
 80091d0:	4621      	mov	r1, r4
 80091d2:	4640      	mov	r0, r8
 80091d4:	f7ff fbbe 	bl	8008954 <_free_r>
 80091d8:	463c      	mov	r4, r7
 80091da:	e7e0      	b.n	800919e <_realloc_r+0x1e>

080091dc <_malloc_usable_size_r>:
 80091dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091e0:	1f18      	subs	r0, r3, #4
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	bfbc      	itt	lt
 80091e6:	580b      	ldrlt	r3, [r1, r0]
 80091e8:	18c0      	addlt	r0, r0, r3
 80091ea:	4770      	bx	lr

080091ec <_init>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	bf00      	nop
 80091f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091f2:	bc08      	pop	{r3}
 80091f4:	469e      	mov	lr, r3
 80091f6:	4770      	bx	lr

080091f8 <_fini>:
 80091f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fa:	bf00      	nop
 80091fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fe:	bc08      	pop	{r3}
 8009200:	469e      	mov	lr, r3
 8009202:	4770      	bx	lr
